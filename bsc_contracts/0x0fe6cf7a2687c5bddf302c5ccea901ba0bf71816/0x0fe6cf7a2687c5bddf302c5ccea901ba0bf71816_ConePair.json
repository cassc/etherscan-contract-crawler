{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/base/core/ConePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../interface/IERC721Metadata.sol\\\";\\nimport \\\"../../interface/IPair.sol\\\";\\nimport \\\"../../interface/IFactory.sol\\\";\\nimport \\\"../../interface/ICallee.sol\\\";\\nimport \\\"../../interface/IUnderlying.sol\\\";\\nimport \\\"./PairFees.sol\\\";\\nimport \\\"../../lib/Math.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../Reentrancy.sol\\\";\\n\\n// The base pair of pools, either stable or volatile\\ncontract ConePair is IERC20, IPair, Reentrancy {\\n  using SafeERC20 for IERC20;\\n\\n  string public name;\\n  string public symbol;\\n  uint8 public constant decimals = 18;\\n\\n  /// @dev Used to denote stable or volatile pair\\n  bool public immutable stable;\\n\\n  uint public override totalSupply = 0;\\n\\n  mapping(address => mapping(address => uint)) public override allowance;\\n  mapping(address => uint) public override balanceOf;\\n\\n  bytes32 public immutable DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  uint internal constant _FEE_PRECISION = 1e32;\\n  mapping(address => uint) public nonces;\\n  uint public immutable chainId;\\n\\n  uint internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n  /// @dev 0.01% swap fee\\n  uint internal constant SWAP_FEE_STABLE = 10_000;\\n  /// @dev 0.05% swap fee\\n  uint internal constant SWAP_FEE_VOLATILE = 2_000;\\n  /// @dev 0.1% max allowed swap fee\\n  uint internal constant SWAP_FEE_MAX = 1_000;\\n  /// @dev Capture oracle reading every 30 minutes\\n  uint internal constant PERIOD_SIZE = 1800;\\n\\n\\n  address public immutable override token0;\\n  address public immutable override token1;\\n  address public immutable fees;\\n  address public immutable factory;\\n\\n  Observation[] public observations;\\n\\n  uint public swapFee;\\n  uint internal immutable decimals0;\\n  uint internal immutable decimals1;\\n\\n  uint public reserve0;\\n  uint public reserve1;\\n  uint public blockTimestampLast;\\n\\n  uint public reserve0CumulativeLast;\\n  uint public reserve1CumulativeLast;\\n\\n  // index0 and index1 are used to accumulate fees,\\n  // this is split out from normal trades to keep the swap \\\"clean\\\"\\n  // this further allows LP holders to easily claim fees for tokens they have/staked\\n  uint public index0 = 0;\\n  uint public index1 = 0;\\n\\n  // position assigned to each LP to track their current index0 & index1 vs the global position\\n  mapping(address => uint) public supplyIndex0;\\n  mapping(address => uint) public supplyIndex1;\\n\\n  // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\n  mapping(address => uint) public claimable0;\\n  mapping(address => uint) public claimable1;\\n\\n  event Treasury(address indexed sender, uint amount0, uint amount1);\\n  event Fees(address indexed sender, uint amount0, uint amount1);\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint reserve0, uint reserve1);\\n  event Claim(address indexed sender, address indexed recipient, uint amount0, uint amount1);\\n  event FeesChanged(uint newValue);\\n\\n  constructor() {\\n    factory = msg.sender;\\n    (address _token0, address _token1, bool _stable) = IFactory(msg.sender).getInitializable();\\n    (token0, token1, stable) = (_token0, _token1, _stable);\\n    fees = address(new PairFees(_token0, _token1));\\n\\n    swapFee = _stable ? SWAP_FEE_STABLE : SWAP_FEE_VOLATILE;\\n\\n    if (_stable) {\\n      name = string(abi.encodePacked(\\\"StableV1 AMM - \\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\n      symbol = string(abi.encodePacked(\\\"sAMM-\\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\n    } else {\\n      name = string(abi.encodePacked(\\\"VolatileV1 AMM - \\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\n      symbol = string(abi.encodePacked(\\\"vAMM-\\\", IERC721Metadata(_token0).symbol(), \\\"/\\\", IERC721Metadata(_token1).symbol()));\\n    }\\n\\n    decimals0 = 10 ** IUnderlying(_token0).decimals();\\n    decimals1 = 10 ** IUnderlying(_token1).decimals();\\n\\n    observations.push(Observation(block.timestamp, 0, 0));\\n\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n        keccak256(bytes(name)),\\n        keccak256('1'),\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n    chainId = block.chainid;\\n  }\\n\\n  function setSwapFee(uint value) external {\\n    require(msg.sender == factory, \\\"!factory\\\");\\n    require(value >= SWAP_FEE_MAX, \\\"max\\\");\\n    swapFee = value;\\n    emit FeesChanged(value);\\n  }\\n\\n  function observationLength() external view returns (uint) {\\n    return observations.length;\\n  }\\n\\n  function lastObservation() public view returns (Observation memory) {\\n    return observations[observations.length - 1];\\n  }\\n\\n  function metadata() external view returns (\\n    uint dec0,\\n    uint dec1,\\n    uint r0,\\n    uint r1,\\n    bool st,\\n    address t0,\\n    address t1\\n  ) {\\n    return (decimals0, decimals1, reserve0, reserve1, stable, token0, token1);\\n  }\\n\\n  function tokens() external view override returns (address, address) {\\n    return (token0, token1);\\n  }\\n\\n  /// @dev Claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\n  function claimFees() external override returns (uint claimed0, uint claimed1) {\\n    _updateFor(msg.sender);\\n\\n    claimed0 = claimable0[msg.sender];\\n    claimed1 = claimable1[msg.sender];\\n\\n    if (claimed0 > 0 || claimed1 > 0) {\\n      claimable0[msg.sender] = 0;\\n      claimable1[msg.sender] = 0;\\n\\n      PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\n\\n      emit Claim(msg.sender, msg.sender, claimed0, claimed1);\\n    }\\n  }\\n\\n  /// @dev Accrue fees on token0\\n  function _update0(uint amount) internal {\\n    // transfer the fees out to PairFees\\n    IERC20(token0).safeTransfer(fees, amount);\\n    // 1e32 adjustment is removed during claim\\n    uint _ratio = amount * _FEE_PRECISION / totalSupply;\\n    if (_ratio > 0) {\\n      index0 += _ratio;\\n    }\\n    emit Fees(msg.sender, amount, 0);\\n  }\\n\\n  /// @dev Accrue fees on token1\\n  function _update1(uint amount) internal {\\n    IERC20(token1).safeTransfer(fees, amount);\\n    uint _ratio = amount * _FEE_PRECISION / totalSupply;\\n    if (_ratio > 0) {\\n      index1 += _ratio;\\n    }\\n    emit Fees(msg.sender, 0, amount);\\n  }\\n\\n  /// @dev This function MUST be called on any balance changes,\\n  ///      otherwise can be used to infinitely claim fees\\n  //       Fees are segregated from core funds, so fees can never put liquidity at risk\\n  function _updateFor(address recipient) internal {\\n    uint _supplied = balanceOf[recipient];\\n    // get LP balance of `recipient`\\n    if (_supplied > 0) {\\n      uint _supplyIndex0 = supplyIndex0[recipient];\\n      // get last adjusted index0 for recipient\\n      uint _supplyIndex1 = supplyIndex1[recipient];\\n      uint _index0 = index0;\\n      // get global index0 for accumulated fees\\n      uint _index1 = index1;\\n      supplyIndex0[recipient] = _index0;\\n      // update user current position to global position\\n      supplyIndex1[recipient] = _index1;\\n      uint _delta0 = _index0 - _supplyIndex0;\\n      // see if there is any difference that need to be accrued\\n      uint _delta1 = _index1 - _supplyIndex1;\\n      if (_delta0 > 0) {\\n        uint _share = _supplied * _delta0 / _FEE_PRECISION;\\n        // add accrued difference for each supplied token\\n        claimable0[recipient] += _share;\\n      }\\n      if (_delta1 > 0) {\\n        uint _share = _supplied * _delta1 / _FEE_PRECISION;\\n        claimable1[recipient] += _share;\\n      }\\n    } else {\\n      supplyIndex0[recipient] = index0;\\n      // new users are set to the default global state\\n      supplyIndex1[recipient] = index1;\\n    }\\n  }\\n\\n  function getReserves() public view override returns (\\n    uint112 _reserve0,\\n    uint112 _reserve1,\\n    uint32 _blockTimestampLast\\n  ) {\\n    _reserve0 = uint112(reserve0);\\n    _reserve1 = uint112(reserve1);\\n    _blockTimestampLast = uint32(blockTimestampLast);\\n  }\\n\\n  /// @dev Update reserves and, on the first call per block, price accumulators\\n  function _update(uint balance0, uint balance1, uint _reserve0, uint _reserve1) internal {\\n    uint blockTimestamp = block.timestamp;\\n    uint timeElapsed = blockTimestamp - blockTimestampLast;\\n    // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n    unchecked {\\n      reserve0CumulativeLast += _reserve0 * timeElapsed;\\n      reserve1CumulativeLast += _reserve1 * timeElapsed;\\n    }\\n    }\\n\\n    Observation memory _point = lastObservation();\\n    timeElapsed = blockTimestamp - _point.timestamp;\\n    // compare the last observation with current timestamp,\\n    // if greater than 30 minutes, record a new event\\n    if (timeElapsed > PERIOD_SIZE) {\\n      observations.push(Observation(blockTimestamp, reserve0CumulativeLast, reserve1CumulativeLast));\\n    }\\n    reserve0 = balance0;\\n    reserve1 = balance1;\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  /// @dev Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n  function currentCumulativePrices() public view returns (\\n    uint reserve0Cumulative,\\n    uint reserve1Cumulative,\\n    uint blockTimestamp\\n  ) {\\n    blockTimestamp = block.timestamp;\\n    reserve0Cumulative = reserve0CumulativeLast;\\n    reserve1Cumulative = reserve1CumulativeLast;\\n\\n    // if time has elapsed since the last update on the pair, mock the accumulated price values\\n    (uint _reserve0, uint _reserve1, uint _blockTimestampLast) = getReserves();\\n    if (_blockTimestampLast != blockTimestamp) {\\n      // subtraction overflow is desired\\n      uint timeElapsed = blockTimestamp - _blockTimestampLast;\\n    unchecked {\\n      reserve0Cumulative += _reserve0 * timeElapsed;\\n      reserve1Cumulative += _reserve1 * timeElapsed;\\n    }\\n    }\\n  }\\n\\n  /// @dev Gives the current twap price measured from amountIn * tokenIn gives amountOut\\n  function current(address tokenIn, uint amountIn) external view returns (uint amountOut) {\\n    Observation memory _observation = lastObservation();\\n    (uint reserve0Cumulative, uint reserve1Cumulative,) = currentCumulativePrices();\\n    if (block.timestamp == _observation.timestamp) {\\n      _observation = observations[observations.length - 2];\\n    }\\n\\n    uint timeElapsed = block.timestamp - _observation.timestamp;\\n    uint _reserve0 = (reserve0Cumulative - _observation.reserve0Cumulative) / timeElapsed;\\n    uint _reserve1 = (reserve1Cumulative - _observation.reserve1Cumulative) / timeElapsed;\\n    amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n  }\\n\\n  /// @dev As per `current`, however allows user configured granularity, up to the full window size\\n  function quote(address tokenIn, uint amountIn, uint granularity)\\n  external view returns (uint amountOut) {\\n    uint [] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\n    uint priceAverageCumulative;\\n    for (uint i = 0; i < _prices.length; i++) {\\n      priceAverageCumulative += _prices[i];\\n    }\\n    return priceAverageCumulative / granularity;\\n  }\\n\\n  /// @dev Returns a memory set of twap prices\\n  function prices(address tokenIn, uint amountIn, uint points)\\n  external view returns (uint[] memory) {\\n    return sample(tokenIn, amountIn, points, 1);\\n  }\\n\\n  function sample(address tokenIn, uint amountIn, uint points, uint window)\\n  public view returns (uint[] memory) {\\n    uint[] memory _prices = new uint[](points);\\n\\n    uint length = observations.length - 1;\\n    uint i = length - (points * window);\\n    uint nextIndex = 0;\\n    uint index = 0;\\n\\n    for (; i < length; i += window) {\\n      nextIndex = i + window;\\n      uint timeElapsed = observations[nextIndex].timestamp - observations[i].timestamp;\\n      uint _reserve0 = (observations[nextIndex].reserve0Cumulative - observations[i].reserve0Cumulative) / timeElapsed;\\n      uint _reserve1 = (observations[nextIndex].reserve1Cumulative - observations[i].reserve1Cumulative) / timeElapsed;\\n      _prices[index] = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n      index = index + 1;\\n    }\\n    return _prices;\\n  }\\n\\n  /// @dev This low-level function should be called from a contract which performs important safety checks\\n  ///      standard uniswap v2 implementation\\n  function mint(address to) external lock override returns (uint liquidity) {\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n    uint _balance0 = IERC20(token0).balanceOf(address(this));\\n    uint _balance1 = IERC20(token1).balanceOf(address(this));\\n    uint _amount0 = _balance0 - _reserve0;\\n    uint _amount1 = _balance1 - _reserve1;\\n\\n    uint _totalSupply = totalSupply;\\n    // gas savings, must be defined here since totalSupply can update in _mintFee\\n    if (_totalSupply == 0) {\\n      liquidity = Math.sqrt(_amount0 * _amount1) - MINIMUM_LIQUIDITY;\\n      // permanently lock the first MINIMUM_LIQUIDITY tokens\\n      _mint(address(0), MINIMUM_LIQUIDITY);\\n    } else {\\n      liquidity = Math.min(_amount0 * _totalSupply / _reserve0, _amount1 * _totalSupply / _reserve1);\\n    }\\n    require(liquidity > 0, 'ConePair: INSUFFICIENT_LIQUIDITY_MINTED');\\n    _mint(to, liquidity);\\n\\n    _update(_balance0, _balance1, _reserve0, _reserve1);\\n    emit Mint(msg.sender, _amount0, _amount1);\\n  }\\n\\n  /// @dev This low-level function should be called from a contract which performs important safety checks\\n  ///      standard uniswap v2 implementation\\n  function burn(address to) external lock override returns (uint amount0, uint amount1) {\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n    (address _token0, address _token1) = (token0, token1);\\n    uint _balance0 = IERC20(_token0).balanceOf(address(this));\\n    uint _balance1 = IERC20(_token1).balanceOf(address(this));\\n    uint _liquidity = balanceOf[address(this)];\\n\\n    // gas savings, must be defined here since totalSupply can update in _mintFee\\n    uint _totalSupply = totalSupply;\\n    // using balances ensures pro-rata distribution\\n    amount0 = _liquidity * _balance0 / _totalSupply;\\n    // using balances ensures pro-rata distribution\\n    amount1 = _liquidity * _balance1 / _totalSupply;\\n    require(amount0 > 0 && amount1 > 0, 'ConePair: INSUFFICIENT_LIQUIDITY_BURNED');\\n    _burn(address(this), _liquidity);\\n    IERC20(_token0).safeTransfer(to, amount0);\\n    IERC20(_token1).safeTransfer(to, amount1);\\n    _balance0 = IERC20(_token0).balanceOf(address(this));\\n    _balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n    _update(_balance0, _balance1, _reserve0, _reserve1);\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  /// @dev This low-level function should be called from a contract which performs important safety checks\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external override lock {\\n    require(!IFactory(factory).isPaused(), \\\"ConePair: PAUSE\\\");\\n    require(amount0Out > 0 || amount1Out > 0, 'ConePair: INSUFFICIENT_OUTPUT_AMOUNT');\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, 'ConePair: INSUFFICIENT_LIQUIDITY');\\n    uint _balance0;\\n    uint _balance1;\\n    {// scope for _token{0,1}, avoids stack too deep errors\\n      (address _token0, address _token1) = (token0, token1);\\n      require(to != _token0 && to != _token1, 'ConePair: INVALID_TO');\\n      // optimistically transfer tokens\\n      if (amount0Out > 0) IERC20(_token0).safeTransfer(to, amount0Out);\\n      // optimistically transfer tokens\\n      if (amount1Out > 0) IERC20(_token1).safeTransfer(to, amount1Out);\\n      // callback, used for flash loans\\n      if (data.length > 0) ICallee(to).hook(msg.sender, amount0Out, amount1Out, data);\\n      _balance0 = IERC20(_token0).balanceOf(address(this));\\n      _balance1 = IERC20(_token1).balanceOf(address(this));\\n    }\\n    uint amount0In = _balance0 > _reserve0 - amount0Out ? _balance0 - (_reserve0 - amount0Out) : 0;\\n    uint amount1In = _balance1 > _reserve1 - amount1Out ? _balance1 - (_reserve1 - amount1Out) : 0;\\n    require(amount0In > 0 || amount1In > 0, 'ConePair: INSUFFICIENT_INPUT_AMOUNT');\\n    {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      (address _token0, address _token1) = (token0, token1);\\n      // accrue fees for token0 and move them out of pool\\n      if (amount0In > 0) _update0(amount0In / swapFee);\\n      // accrue fees for token1 and move them out of pool\\n      if (amount1In > 0) _update1(amount1In / swapFee);\\n      // since we removed tokens, we need to reconfirm balances,\\n      // can also simply use previous balance - amountIn/ SWAP_FEE,\\n      // but doing balanceOf again as safety check\\n      _balance0 = IERC20(_token0).balanceOf(address(this));\\n      _balance1 = IERC20(_token1).balanceOf(address(this));\\n      // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\n      require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), 'ConePair: K');\\n    }\\n\\n    _update(_balance0, _balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n  }\\n\\n  /// @dev Force balances to match reserves\\n  function skim(address to) external lock {\\n    (address _token0, address _token1) = (token0, token1);\\n    IERC20(_token0).safeTransfer(to, IERC20(_token0).balanceOf(address(this)) - (reserve0));\\n    IERC20(_token1).safeTransfer(to, IERC20(_token1).balanceOf(address(this)) - (reserve1));\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(\\n      IERC20(token0).balanceOf(address(this)),\\n      IERC20(token1).balanceOf(address(this)),\\n      reserve0,\\n      reserve1\\n    );\\n  }\\n\\n  function _f(uint x0, uint y) internal pure returns (uint) {\\n    return x0 * (y * y / 1e18 * y / 1e18) / 1e18 + (x0 * x0 / 1e18 * x0 / 1e18) * y / 1e18;\\n  }\\n\\n  function _d(uint x0, uint y) internal pure returns (uint) {\\n    return 3 * x0 * (y * y / 1e18) / 1e18 + (x0 * x0 / 1e18 * x0 / 1e18);\\n  }\\n\\n  function _getY(uint x0, uint xy, uint y) internal pure returns (uint) {\\n    for (uint i = 0; i < 255; i++) {\\n      uint yPrev = y;\\n      uint k = _f(x0, y);\\n      if (k < xy) {\\n        uint dy = (xy - k) * 1e18 / _d(x0, y);\\n        y = y + dy;\\n      } else {\\n        uint dy = (k - xy) * 1e18 / _d(x0, y);\\n        y = y - dy;\\n      }\\n      if (Math.closeTo(y, yPrev, 1)) {\\n        break;\\n      }\\n    }\\n    return y;\\n  }\\n\\n  function getAmountOut(uint amountIn, address tokenIn) external view override returns (uint) {\\n    (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n    // remove fee from amount received\\n    amountIn -= amountIn / swapFee;\\n    return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n  }\\n\\n  function _getAmountOut(uint amountIn, address tokenIn, uint _reserve0, uint _reserve1) internal view returns (uint) {\\n    if (stable) {\\n      uint xy = _k(_reserve0, _reserve1);\\n      _reserve0 = _reserve0 * 1e18 / decimals0;\\n      _reserve1 = _reserve1 * 1e18 / decimals1;\\n      (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n      amountIn = tokenIn == token0 ? amountIn * 1e18 / decimals0 : amountIn * 1e18 / decimals1;\\n      uint y = reserveB - _getY(amountIn + reserveA, xy, reserveB);\\n      return y * (tokenIn == token0 ? decimals1 : decimals0) / 1e18;\\n    } else {\\n      (uint reserveA, uint reserveB) = tokenIn == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n      return amountIn * reserveB / (reserveA + amountIn);\\n    }\\n  }\\n\\n  function _k(uint x, uint y) internal view returns (uint) {\\n    if (stable) {\\n      uint _x = x * 1e18 / decimals0;\\n      uint _y = y * 1e18 / decimals1;\\n      uint _a = (_x * _y) / 1e18;\\n      uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n      // x3y+y3x >= k\\n      return _a * _b / 1e18;\\n    } else {\\n      // xy >= k\\n      return x * y;\\n    }\\n  }\\n\\n  //****************************************************************************\\n  //**************************** ERC20 *****************************************\\n  //****************************************************************************\\n\\n  function _mint(address dst, uint amount) internal {\\n    // balances must be updated on mint/burn/transfer\\n    _updateFor(dst);\\n    totalSupply += amount;\\n    balanceOf[dst] += amount;\\n    emit Transfer(address(0), dst, amount);\\n  }\\n\\n  function _burn(address dst, uint amount) internal {\\n    _updateFor(dst);\\n    totalSupply -= amount;\\n    balanceOf[dst] -= amount;\\n    emit Transfer(dst, address(0), amount);\\n  }\\n\\n  function approve(address spender, uint amount) external override returns (bool) {\\n    require(spender != address(0), \\\"ConePair: Approve to the zero address\\\");\\n    allowance[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(deadline >= block.timestamp, 'ConePair: EXPIRED');\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n      )\\n    );\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\n    require(recoveredAddress != address(0) && recoveredAddress == owner, 'ConePair: INVALID_SIGNATURE');\\n    allowance[owner][spender] = value;\\n\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function transfer(address dst, uint amount) external override returns (bool) {\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(address src, address dst, uint amount) external override returns (bool) {\\n    address spender = msg.sender;\\n    uint spenderAllowance = allowance[src][spender];\\n\\n    if (spender != src && spenderAllowance != type(uint).max) {\\n      require(spenderAllowance >= amount, \\\"ConePair: Insufficient allowance\\\");\\n    unchecked {\\n      uint newAllowance = spenderAllowance - amount;\\n      allowance[src][spender] = newAllowance;\\n      emit Approval(src, spender, newAllowance);\\n    }\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  function _transferTokens(address src, address dst, uint amount) internal {\\n    require(dst != address(0), \\\"ConePair: Transfer to the zero address\\\");\\n\\n    // update fee position for src\\n    _updateFor(src);\\n    // update fee position for dst\\n    _updateFor(dst);\\n\\n    uint srcBalance = balanceOf[src];\\n    require(srcBalance >= amount, \\\"ConePair: Transfer amount exceeds balance\\\");\\n  unchecked {\\n    balanceOf[src] = srcBalance - amount;\\n  }\\n\\n    balanceOf[dst] += amount;\\n\\n    emit Transfer(src, dst, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n* @dev See https://eips.ethereum.org/EIPS/eip-721\\n*/\\ninterface IERC721Metadata is IERC721 {\\n  /**\\n  * @dev Returns the token collection name.\\n  */\\n  function name() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the token collection symbol.\\n  */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n  * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n  */\\n  function tokenURI(uint tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IPair {\\n\\n  // Structure to capture time period obervations every 30 minutes, used for local oracles\\n  struct Observation {\\n    uint timestamp;\\n    uint reserve0Cumulative;\\n    uint reserve1Cumulative;\\n  }\\n\\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n\\n  function getAmountOut(uint, address) external view returns (uint);\\n\\n  function claimFees() external returns (uint, uint);\\n\\n  function tokens() external view returns (address, address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function stable() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IFactory {\\n\\n  function isPair(address pair) external view returns (bool);\\n\\n  function getInitializable() external view returns (address, address, bool);\\n\\n  function isPaused() external view returns (bool);\\n\\n  function pairCodeHash() external pure returns (bytes32);\\n\\n  function getPair(address tokenA, address token, bool stable) external view returns (address);\\n\\n  function createPair(address tokenA, address tokenB, bool stable) external returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/ICallee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface ICallee {\\n  function hook(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IUnderlying.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\ninterface IUnderlying {\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function mint(address, uint) external;\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address) external view returns (uint);\\n\\n  function transfer(address, uint) external returns (bool);\\n\\n  function decimals() external returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/base/core/PairFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../../interface/IERC20.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\n\\n/// @title Base V1 Fees contract is used as a 1:1 pair relationship to split out fees,\\n///        this ensures that the curve does not need to be modified for LP shares\\ncontract PairFees {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev The pair it is bonded to\\n  address internal immutable pair;\\n  /// @dev Token0 of pair, saved localy and statically for gas optimization\\n  address internal immutable token0;\\n  /// @dev Token1 of pair, saved localy and statically for gas optimization\\n  address internal immutable token1;\\n\\n  constructor(address _token0, address _token1) {\\n    pair = msg.sender;\\n    token0 = _token0;\\n    token1 = _token1;\\n  }\\n\\n  // Allow the pair to transfer fees to users\\n  function claimFeesFor(address recipient, uint amount0, uint amount1) external {\\n    require(msg.sender == pair, \\\"Not pair\\\");\\n    if (amount0 > 0) {\\n      IERC20(token0).safeTransfer(recipient, amount0);\\n    }\\n    if (amount1 > 0) {\\n      IERC20(token1).safeTransfer(recipient, amount1);\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary Math {\\n\\n  function max(uint a, uint b) internal pure returns (uint) {\\n    return a >= b ? a : b;\\n  }\\n\\n  function min(uint a, uint b) internal pure returns (uint) {\\n    return a < b ? a : b;\\n  }\\n\\n  function positiveInt128(int128 value) internal pure returns (int128) {\\n    return value < 0 ? int128(0) : value;\\n  }\\n\\n  function closeTo(uint a, uint b, uint target) internal pure returns (bool) {\\n    if (a > b) {\\n      if (a - b <= target) {\\n        return true;\\n      }\\n    } else {\\n      if (b - a <= target) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint value\\n  ) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint value\\n  ) internal {\\n    uint newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/base/Reentrancy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nabstract contract Reentrancy {\\n\\n  /// @dev simple re-entrancy check\\n  uint internal _unlocked = 1;\\n\\n  modifier lock() {\\n    require(_unlocked == 1, \\\"Reentrant call\\\");\\n    _unlocked = 2;\\n    _;\\n    _unlocked = 1;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n  /**\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n   */\\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n  /**\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n   */\\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n  /**\\n   * @dev Returns the number of tokens in ``owner``'s account.\\n   */\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  /**\\n   * @dev Returns the owner of the `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\n   *\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) external;\\n\\n  /**\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n   * The approval is cleared when the token is transferred.\\n   *\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n   *\\n   * Requirements:\\n   *\\n   * - The caller must own the token or be an approved operator.\\n   * - `tokenId` must exist.\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address to, uint256 tokenId) external;\\n\\n  /**\\n   * @dev Returns the account approved for `tokenId` token.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n  /**\\n   * @dev Approve or remove `operator` as an operator for the caller.\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n   *\\n   * Requirements:\\n   *\\n   * - The `operator` cannot be the caller.\\n   *\\n   * Emits an {ApprovalForAll} event.\\n   */\\n  function setApprovalForAll(address operator, bool _approved) external;\\n\\n  /**\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n   *\\n   * See {setApprovalForAll}\\n   */\\n  function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n    (bool success, bytes memory returndata) = target.call(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserve1\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Treasury\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCumulativePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastObservation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"}],\"internalType\":\"struct IPair.Observation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dec0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dec1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"st\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observationLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve0Cumulative\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserve1Cumulative\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"granularity\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"sample\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex0\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyIndex1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConePair", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}