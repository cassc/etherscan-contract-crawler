{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function totalSupply() external view returns (uint256);\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b, \"SafeMath: multiplication overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        c = a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n    }\r\n}\r\n\r\ncontract pacoStaking is Owned {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    address public token;\r\n    uint256 public totalStaked;\r\n    uint256 public stakingTaxRate;\r\n    uint256 public stakeTime;\r\n    uint256 public dailyROI;                         // 100 = 1%\r\n    uint256 public unstakingTaxRate;                   // 10 = 1%\r\n    uint256 public minimumStakeValue;\r\n    bool public active = true;\r\n    bool public registered = true;\r\n\r\n    mapping(address => uint256) public stakes;\r\n    mapping(address => uint256) public referralRewards;\r\n    mapping(address => uint256) public referralCount;\r\n    mapping(address => uint256) public stakeRewards;\r\n    mapping(address => uint256) private lastClock;\r\n    mapping(address => uint256) private timeOfStake;\r\n    \r\n    event OnWithdrawal(address sender, uint256 amount);\r\n    event OnStake(address sender, uint256 amount, uint256 tax);\r\n    event OnUnstake(address sender, uint256 amount, uint256 tax);\r\n    event OnRegisterAndStake(address stakeholder, uint256 amount, uint256 totalTax, address _referrer);\r\n    \r\n    constructor(\r\n        address _token,\r\n        uint256 _stakingTaxRate, \r\n        uint256 _unstakingTaxRate,\r\n        uint256 _dailyROI,\r\n        uint256 _stakeTime,\r\n        uint256 _minimumStakeValue\r\n    ) {\r\n        token = _token;\r\n        stakingTaxRate = _stakingTaxRate;\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n        dailyROI = _dailyROI;\r\n        stakeTime = _stakeTime;\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n    \r\n    modifier whenActive() {\r\n        require(active, \"Smart contract is currently inactive\");\r\n        _;\r\n    }\r\n    \r\n    function calculateEarnings(address _stakeholder) public view returns(uint256) {\r\n        uint256 activeDays = (block.timestamp - lastClock[_stakeholder]) / 86400;\r\n        return (stakes[_stakeholder] * dailyROI * activeDays) / 10000;\r\n    }\r\n    \r\n    function stake(uint256 _amount) external whenActive() {\r\n        require(_amount >= minimumStakeValue, \"Amount is below minimum stake value.\");\r\n        require(IERC20(token).balanceOf(msg.sender) >= _amount, \"Must have enough balance to stake\");\r\n        require(IERC20(token).transferFrom(msg.sender, address(this), _amount), \"Stake failed due to failed amount transfer.\");\r\n        uint256 stakingTax = (stakingTaxRate * _amount) / 1000;\r\n        uint256 afterTax = _amount - stakingTax;\r\n        totalStaked = totalStaked + afterTax;\r\n        stakeRewards[msg.sender] = stakeRewards[msg.sender] + calculateEarnings(msg.sender);\r\n        uint256 remainder = (block.timestamp - lastClock[msg.sender]) % 86400;\r\n        lastClock[msg.sender] = block.timestamp - remainder;\r\n        timeOfStake[msg.sender] = block.timestamp;\r\n        stakes[msg.sender] = stakes[msg.sender] + afterTax;\r\n        emit OnStake(msg.sender, afterTax, stakingTax);\r\n    }\r\n    \r\n    function unstake(uint256 _amount) external {\r\n        require(_amount <= stakes[msg.sender] && _amount > 0, 'Insufficient balance to unstake');\r\n        uint256 unstakingTax = (unstakingTaxRate * _amount) / 1000;\r\n        uint256 afterTax = _amount - unstakingTax;\r\n        stakeRewards[msg.sender] = stakeRewards[msg.sender] + calculateEarnings(msg.sender);\r\n        stakes[msg.sender] = stakes[msg.sender] - _amount;\r\n        uint256 remainder = (block.timestamp - lastClock[msg.sender]) % 86400;\r\n        lastClock[msg.sender] = block.timestamp - remainder;\r\n        require(block.timestamp - timeOfStake[msg.sender] > stakeTime, \"You need to stake for the minimum amount of days\");\r\n        totalStaked = totalStaked - _amount;\r\n        IERC20(token).transfer(msg.sender, afterTax);\r\n        emit OnUnstake(msg.sender, _amount, unstakingTax);\r\n    }\r\n    \r\n    function withdrawEarnings() external returns (bool success) {\r\n        uint256 totalReward = referralRewards[msg.sender] + stakeRewards[msg.sender] + calculateEarnings(msg.sender);\r\n        require(totalReward > 0, 'No reward to withdraw'); \r\n        require(IERC20(token).balanceOf(address(this)) - totalStaked >= totalReward, 'Insufficient balance in pool');\r\n        stakeRewards[msg.sender] = 0;\r\n        referralRewards[msg.sender] = 0;\r\n        referralCount[msg.sender] = 0;\r\n        uint256 remainder = (block.timestamp - lastClock[msg.sender]) % 86400;\r\n        lastClock[msg.sender] = block.timestamp - remainder;\r\n        IERC20(token).transfer(msg.sender, totalReward);\r\n        emit OnWithdrawal(msg.sender, totalReward);\r\n        return true;\r\n    }\r\n\r\n    function rewardPool() external view onlyOwner() returns(uint256 claimable) {\r\n        return (IERC20(token).balanceOf(address(this)) - totalStaked);\r\n    }\r\n    \r\n    function changeActiveStatus() external onlyOwner() {\r\n        active = !active;\r\n    }\r\n    \r\n    function setStakingTaxRate(uint256 _stakingTaxRate) external onlyOwner() {\r\n        stakingTaxRate = _stakingTaxRate;\r\n    }\r\n\r\n    function setUnstakingTaxRate(uint256 _unstakingTaxRate) external onlyOwner() {\r\n        unstakingTaxRate = _unstakingTaxRate;\r\n    }\r\n    \r\n    function setDailyROI(uint256 _dailyROI) external onlyOwner() {\r\n        dailyROI = _dailyROI;\r\n    }\r\n    \r\n    function setMinimumStakeValue(uint256 _minimumStakeValue) external onlyOwner() {\r\n        minimumStakeValue = _minimumStakeValue;\r\n    }\r\n    \r\n    function setStakeTime(uint256 _newStakeTime) external onlyOwner() {\r\n        stakeTime = _newStakeTime;\r\n    }\r\n    \r\n    function checkUnstakeStatus(address _unstaker) public view returns(bool) {\r\n        return block.timestamp - timeOfStake[_unstaker] > stakeTime;\r\n    }  \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"OnRegisterAndStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"OnUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeholder\",\"type\":\"address\"}],\"name\":\"calculateEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeActiveStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unstaker\",\"type\":\"address\"}],\"name\":\"checkUnstakeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyROI\",\"type\":\"uint256\"}],\"name\":\"setDailyROI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakeValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakeValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakeTime\",\"type\":\"uint256\"}],\"name\":\"setStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingTaxRate\",\"type\":\"uint256\"}],\"name\":\"setStakingTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakingTaxRate\",\"type\":\"uint256\"}],\"name\":\"setUnstakingTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingTaxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "pacoStaking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1d0065c4cd16c14c539547bac404ca6f586b8ce00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000001275000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c3c6944f8876d7e4ace4349ab288fceaa9b3d55d1336fbdedc94492beaad2e74"}