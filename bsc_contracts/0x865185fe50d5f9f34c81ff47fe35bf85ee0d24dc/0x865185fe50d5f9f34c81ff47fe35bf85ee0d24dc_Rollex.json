{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-10-29\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IBEP20 {\r\n  \r\n\r\n  function totalSupply() external view returns(uint256);\r\n\r\n  function decimals() external view returns(uint256);\r\n\r\n  function symbol() external view returns(string memory);\r\n\r\n  function name() external view returns(string memory);\r\n\r\n  function getOwner() external view returns(address);\r\n\r\n  function balanceOf(address account) external view returns(uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns(bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns(uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns(bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n        uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n \r\ncontract Ownable {\r\n  address _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    _owner = msg.sender;\r\n    emit OwnershipTransferred(address(0), msg.sender);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract Rollex is IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) private _balances;\r\n\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  mapping(uint256 => address) public admin_distribution;\r\n  uint256[30] public levelPercentages; \r\n  uint256[30] public levelCondition; \r\n  \r\n  uint256 private _totalSupply;\r\n  uint256 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n  address public token;\r\n\r\n  uint256 public totalCollection ;\r\n  uint256 public totalMint ;\r\n  uint256 public customerId;\r\n  uint256 public buyId;\r\n  uint256 public sellId;\r\n\r\n  uint256 public admin_income;\r\n\r\n  constructor(address token_address) {\r\n    _name = \"Rollex\";\r\n    _symbol = \"RLX\";\r\n    _decimals = 18;\r\n    _totalSupply = 0 * 10 ** _decimals;\r\n    _balances[msg.sender] = _totalSupply;\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n    totalCollection = 0;\r\n    totalMint = 0;\r\n    token = token_address;\r\n    isRegistered[address(this)] = true;\r\n\r\n    admin_distribution[1] = 0xaF882024b1b99A5F0C58B7524C054B3F20f84e2a;\r\n    admin_distribution[2] = 0xbfa158ECce12d2d5D4Ca55F9539e39956C86097C;\r\n    admin_distribution[3] = 0x68bba82b87A8F86E56984F8D4F033b05C666226f;\r\n    admin_distribution[4] = 0x0e959B7d8fDaa51ad7359A6d29B54f0887D4CcC6;\r\n    admin_distribution[5] = 0x394A5675fbC807a3d68C330657B2ce51A3461E2E;\r\n\r\n    levelPercentages[1] = 10;\r\n    levelPercentages[2] = 6;\r\n    levelPercentages[3] = 4;\r\n    levelPercentages[4] = 3;\r\n    levelPercentages[5] = 2;\r\n    levelPercentages[6] = 2;\r\n    levelPercentages[7] = 2;\r\n    levelPercentages[8] = 2;\r\n    levelPercentages[9] = 2;\r\n    levelPercentages[10] = 2;\r\n    levelPercentages[11] = 1;\r\n    levelPercentages[12] = 1;\r\n    levelPercentages[13] = 1;\r\n    levelPercentages[14] = 1;\r\n    levelPercentages[15] = 1;\r\n    levelPercentages[16] = 1;\r\n    levelPercentages[17] = 1;\r\n    levelPercentages[18] = 1;\r\n    levelPercentages[19] = 1;\r\n    levelPercentages[20] = 1;\r\n    levelPercentages[21] = 1;\r\n    levelPercentages[22] = 1;\r\n    levelPercentages[23] = 1;\r\n    levelPercentages[24] = 1;\r\n    levelPercentages[25] = 1;\r\n\r\n    levelCondition[1] = 0 ether;\r\n    levelCondition[2] = 0.4 ether;\r\n    levelCondition[3] = 0.6 ether;\r\n    levelCondition[4] = 0.8 ether;\r\n    levelCondition[5] = 1 ether;\r\n    levelCondition[6] = 1.2 ether;\r\n    levelCondition[7] = 1.4 ether;\r\n    levelCondition[8] = 1.6 ether;\r\n    levelCondition[9] = 1.8 ether;\r\n    levelCondition[10] = 2 ether;\r\n    levelCondition[11] = 2.2 ether;\r\n    levelCondition[12] = 2.4 ether;\r\n    levelCondition[13] = 2.6 ether;\r\n    levelCondition[14] = 2.8 ether;\r\n    levelCondition[15] = 3 ether;\r\n    levelCondition[16] = 3.2 ether;\r\n    levelCondition[17] = 3.4 ether;\r\n    levelCondition[18] = 3.6 ether;\r\n    levelCondition[19] = 3.8 ether;\r\n    levelCondition[20] = 4 ether;\r\n    levelCondition[21] = 4.2 ether;\r\n    levelCondition[22] =  4.4 ether;\r\n    levelCondition[23] =  4.6 ether;\r\n    levelCondition[24] =  4.8 ether;\r\n    levelCondition[25] =  5 ether;\r\n  }\r\n\r\n\r\n  function getOwner() external view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  function decimals() external view returns(uint256) {\r\n    return _decimals;\r\n  }\r\n\r\n  function symbol() external view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function name() external view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function totalSupply() external view returns(uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) external view returns(uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) public returns(bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender) external view returns(uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public returns(bool) {\r\n    _approve(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) public returns(bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n    return true;\r\n  }\r\n\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function getBnbBalance() public view returns (uint256) {\r\n    return address(this).balance;\r\n  }\r\n\r\n  function withdraw(address con_address, address recevier, uint256 amount) public onlyOwner {\r\n    address payable to = payable(recevier);\r\n    IBEP20(con_address).transfer(to, amount);\r\n  }\r\n\r\n   function withdrawCollection(address payable recevier, uint256 amount) public onlyOwner {\r\n    recevier.transfer(amount);\r\n  }\r\n\r\n\r\n  uint256 public rollex_rate = 1000000000000;\r\n\r\n  uint256 public distribute_level = 25;\r\n\r\n  uint256 public payoutPercent = 40;\r\n  uint256 public directPercent = 100;\r\n  uint256 public adminPercent = 10;\r\n  \r\n\r\n  struct User {\r\n        address customer_address;\r\n        address referral_address;\r\n        uint256 totalDeposit;\r\n        uint256 totalWithdraw;\r\n        uint256 level_income;\r\n        uint256 last_ts;\r\n  }\r\n\r\n\r\n  struct Buyhistory {\r\n    address cust_address;\r\n    uint256 bnb_amt;\r\n    uint256 token_to_user;\r\n    uint256 distribution_amt;\r\n    uint256 distrbution_to_per_level;\r\n    uint256 admin_amt;\r\n  }\r\n\r\n    struct Sellhistory {\r\n    address cust_address;\r\n    uint256 token;\r\n    uint256 bnb_amt;\r\n    uint256 admin_amt;\r\n    uint256 final_amt;\r\n  }\r\n\r\n  mapping(uint256 => Buyhistory) public buyRecord;\r\n  mapping(uint256 => Sellhistory) public sellRecord;\r\n  mapping(uint256 => User) public userRegister;\r\n  mapping(address => uint256) public addressToUserId;\r\n  mapping(address => bool) public isRegistered;\r\n\r\n  function register(address refer_address) public returns (uint256 custid) {\r\n    require(refer_address != msg.sender, \"Cannot refer yourself\");\r\n    require(!isRegistered[msg.sender], \"User is already registered\");\r\n    require(isRegistered[refer_address], \"Invaild referral address\");\r\n\r\n    custid = ++customerId;\r\n    userRegister[custid].customer_address = msg.sender;\r\n    userRegister[custid].referral_address = refer_address;\r\n    userRegister[custid].totalDeposit = 0;\r\n    userRegister[custid].totalWithdraw = 0;\r\n    userRegister[custid].level_income = 0;\r\n    userRegister[custid].last_ts = 0;  \r\n\r\n    addressToUserId[msg.sender] = custid;\r\n    \r\n    isRegistered[msg.sender] = true;\r\n  }\r\n\r\n\r\n  function getTotalLevelIncome(address sponsorAddress) public view returns (uint256) {\r\n    uint256 count = 0;\r\n\r\n    for (uint256 i = 1; i <= customerId; i++) {\r\n        if (userRegister[i].referral_address == sponsorAddress) {\r\n            count += userRegister[i].totalDeposit;\r\n        }\r\n    }\r\n\r\n    return count;\r\n  }\r\n\r\n\r\n  function BuyRollex () payable public returns (uint256 id) {\r\n    require(isRegistered[msg.sender], \"User is not belongs to system\");\r\n    require(msg.value > 1000000000000 , \"Minimum buy limit\");\r\n    require(msg.value <= 5000000000000000000 , \"Maximum buy limit\");\r\n    \r\n    uint256 rollex = msg.value.mul(1 ether).div(rollex_rate);\r\n\r\n    uint256 user_amt = rollex.mul(payoutPercent).div(100);\r\n\r\n    uint256 refer_amt = user_amt.mul(directPercent).div(100);\r\n\r\n    uint256 admin_amt = user_amt.mul(adminPercent).div(100);\r\n\r\n    totalCollection = totalCollection + msg.value;\r\n\r\n    //user\r\n    _balances[msg.sender] = _balances[msg.sender].add(user_amt);\r\n    emit Transfer(address(0), msg.sender, user_amt);\r\n\r\n    // admin\r\n    uint256 admin_per1 = user_amt.mul(1).div(100);\r\n    uint256 admin_per2 = user_amt.mul(2).div(100);\r\n    uint256 admin_per3 = user_amt.mul(2.5 ether).div(100);\r\n    \r\n\r\n    _balances[admin_distribution[1]] = _balances[admin_distribution[1]].add(admin_per1);\r\n    emit Transfer(address(0), admin_distribution[1], admin_per1);\r\n\r\n    _balances[admin_distribution[2]] = _balances[admin_distribution[2]].add(admin_per2);\r\n    emit Transfer(address(0), admin_distribution[2], admin_per2);\r\n\r\n    _balances[admin_distribution[3]] = _balances[admin_distribution[3]].add(admin_per2);\r\n    emit Transfer(address(0), admin_distribution[3], admin_per2);\r\n\r\n    _balances[admin_distribution[4]] = _balances[admin_distribution[4]].add(admin_per3);\r\n    emit Transfer(address(0), admin_distribution[4], admin_per3);\r\n\r\n    _balances[admin_distribution[5]] = _balances[admin_distribution[5]].add(admin_per3);\r\n    emit Transfer(address(0), admin_distribution[5], admin_per3);\r\n\r\n    admin_income = admin_income.add(admin_amt);\r\n\r\n    uint256 userId = addressToUserId[msg.sender];\r\n    address currentReferrer = userRegister[userId].referral_address;\r\n    \r\n    uint256 total_dis = 0;\r\n\r\n    for (uint256 i = 1; i < distribute_level; i++) {\r\n\r\n      uint256 nextId = addressToUserId[currentReferrer];\r\n      if (currentReferrer == address(0)) {}\r\n      else {\r\n          if(getTotalLevelIncome(currentReferrer) >= levelCondition[i])\r\n          {\r\n            uint256 refer_per = refer_amt.mul(levelPercentages[i]).div(100);\r\n            _balances[currentReferrer] = _balances[currentReferrer].add(refer_per);\r\n            emit Transfer(address(0), currentReferrer, refer_per);\r\n            total_dis += refer_per;\r\n            userRegister[nextId].level_income = userRegister[nextId].level_income.add(refer_per);\r\n          }\r\n      }\r\n      currentReferrer = userRegister[nextId].referral_address;\r\n    }\r\n\r\n    userRegister[userId].totalDeposit = userRegister[userId].totalDeposit.add(msg.value);\r\n\r\n    totalMint = totalMint + user_amt + total_dis + admin_amt;\r\n    _totalSupply = _totalSupply + user_amt + total_dis + admin_amt;\r\n    rollex_rate = address(this).balance.mul(1 ether).div(_totalSupply);\r\n\r\n    id = ++buyId;\r\n    buyRecord[id].cust_address = msg.sender;\r\n    buyRecord[id].bnb_amt = msg.value;\r\n    buyRecord[id].token_to_user = user_amt;\r\n    buyRecord[id].distribution_amt = total_dis;\r\n    buyRecord[id].distrbution_to_per_level = 0;\r\n    buyRecord[id].admin_amt = admin_amt;\r\n\r\n  }\r\n\r\n\r\n\r\nfunction sellRollex(uint256 tokenAmount) public returns (uint256 id) {\r\n    require(isRegistered[msg.sender], \"User is not registered\");\r\n    require(tokenAmount > 0, \"Token amount must be greater than 0\");\r\n    uint256 rollexPPOPer = tokenAmount.mul(1).div(100);\r\n   // require(IBEP20(token).balanceOf(msg.sender) > 10 , \"You need 10 Roller pro tokens\");\r\n    require(IBEP20(token).balanceOf(msg.sender) > rollexPPOPer , \"You need 1% Rollex pro tokens on withdrawal amount\");\r\n\r\n    uint256 userId = addressToUserId[msg.sender];\r\n    // Ensure the last sell operation was more than 24 hours ago\r\n    require(userRegister[userId].last_ts + 1 days <= block.timestamp, \"Sell operation can only be performed once every 24 hours\");\r\n\r\n    uint256 bnbAmount = tokenAmount.mul(rollex_rate).div(1 ether);\r\n    uint256 adminServiceCharge = bnbAmount.mul(15).div(100); // 10% of bnbAmount\r\n    bnbAmount = bnbAmount.sub(adminServiceCharge);\r\n\r\n    // Check if the contract has enough BNB to proceed with the withdrawal\r\n    require(address(this).balance >= bnbAmount, \"Not enough BNB in the contract to proceed with the withdrawal\");\r\n\r\n    // Ensure the bnbAmount is less than or equal to the total deposit of the user\r\n    require(bnbAmount <= userRegister[userId].totalDeposit, \"Cannot withdraw more than total deposit at a time\");\r\n\r\n    // Ensure the bnbAmount is greater than or equal to 0.01 BNB\r\n    require(bnbAmount >= 0.01 ether, \"Minimum BNB withdraw limit is 0.01\");\r\n\r\n    // Ensure the bnbAmount is less than or equal to 5 BNB\r\n    require(bnbAmount <= 5 ether, \"Maximum BNB withdraw limit is 5\");\r\n\r\n    // Burn the token amount and update total supply\r\n    _balances[msg.sender] = _balances[msg.sender].sub(tokenAmount);\r\n    _totalSupply = _totalSupply.sub(tokenAmount);\r\n    emit Transfer(msg.sender, address(0), tokenAmount); // Emit a transfer event to the zero address to signify burning\r\n\r\n    // Send BNB to the user's address\r\n    payable(msg.sender).transfer(bnbAmount);\r\n    rollex_rate = address(this).balance.mul(1 ether).div(_totalSupply);\r\n\r\n    // Update the last sell timestamp\r\n    userRegister[userId].last_ts = block.timestamp;\r\n   \r\n   // Record the sell history\r\n    id = ++sellId;\r\n    sellRecord[id] = Sellhistory({\r\n        cust_address: msg.sender,\r\n        token: tokenAmount,\r\n        bnb_amt: bnbAmount,\r\n        admin_amt: adminServiceCharge,\r\n        final_amt: bnbAmount\r\n    });\r\n\r\n    return id;\r\n}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BuyRollex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admin_distribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_income\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"buyRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cust_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_to_user\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distribution_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distrbution_to_per_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute_level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsorAddress\",\"type\":\"address\"}],\"name\":\"getTotalLevelIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refer_address\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"custid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollex_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellRecord\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cust_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnb_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"admin_amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"final_amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sellRollex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"customer_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level_income\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"con_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recevier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rollex", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d899ebded30f1f2939593c6d3a9fc70d0201280c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9f3bed04758820f108a4c766cd7fc72f0ca513467033f02705af0794af485c1"}