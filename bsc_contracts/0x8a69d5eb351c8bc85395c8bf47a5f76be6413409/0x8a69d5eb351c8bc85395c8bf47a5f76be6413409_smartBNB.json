{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >= 0.8.7;\r\n\r\n\r\n\r\ninterface IBEP20 {\r\n\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\ncontract smartBNB{\r\n  \r\n    event Multisended(uint256 value , address indexed sender);\r\n  \tevent RegisterUser(address indexed  investor, string  referralId,string referral,uint investment);\r\n\t  event LevelUpgrade(string  investorId,uint256 investment,address indexed investor,string levelName);\r\n\t  event WithDraw(string  investorId,address indexed  investor,uint256 WithAmt);\r\n\t  event MemberPayment(uint256  investorId,address indexed  investor,uint256 WithAmt,uint netAmt);\r\n\t  event Payment(uint256 NetQty);\r\n\t\r\n    using SafeMath for uint256;\r\n    address public owner;   \r\n   \r\n   \r\n    constructor(address ownerAddress)\r\n    {\r\n        owner = ownerAddress;\r\n    }\r\n    \r\n    function NewRegistration(string memory referralId,string memory referral,uint256 investment,address payable recipient) public payable\r\n\t{\r\n    require(investment <= address(this).balance, \"Insufficient BNB To Payment\");\r\n    recipient.transfer(investment);\r\n\t\temit RegisterUser(msg.sender, referralId,referral,investment);\r\n\t}\r\n\r\n\tfunction UpgradeLevel(string memory investorId,uint256 investment,string memory levelName,address payable recipient) public payable\r\n\t{\r\n      require(msg.value>=investment, \"Insufficient BNB To Payment\");\r\n      recipient.transfer(investment);\r\n\t    emit LevelUpgrade( investorId,investment,msg.sender,levelName);\r\n\t}\r\n\r\n  function multisendBNB(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n      uint256 total = msg.value;\r\n      uint256 i = 0;\r\n      for (i; i < _contributors.length; i++) {\r\n          require(total >= _balances[i] );\r\n          total = total.sub(_balances[i]);\r\n          _contributors[i].transfer(_balances[i]);\r\n      }\r\n  }\r\n  function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory NetAmt,uint256[]  memory  _investorId) public payable {\r\n    uint256 total = totalQty;\r\n      uint256 i = 0;\r\n      for (i; i < _contributors.length; i++) {\r\n          require(total >= _balances[i]);\r\n          total = total.sub(_balances[i]);\r\n          _contributors[i].transfer(_balances[i]);\r\n      emit MemberPayment( _investorId[i], _contributors[i],_balances[i],NetAmt[i]);\r\n    }\r\n      emit Payment(totalQty);  \r\n  }    \r\n\tfunction multisendWithdraw(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n    require(msg.sender == owner, \"onlyOwner\");\r\n      uint256 i = 0;\r\n      for (i; i < _contributors.length; i++) {\r\n          _contributors[i].transfer(_balances[i]);\r\n      }   \r\n  }\r\n  function withdrawLostBNBFromBalance(address payable _sender) public {\r\n      require(msg.sender == owner, \"onlyOwner\");\r\n      _sender.transfer(address(this).balance);\r\n  }\t\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"levelName\",\"type\":\"string\"}],\"name\":\"LevelUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investorId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netAmt\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"RegisterUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referral\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"NewRegistration\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"investorId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"levelName\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"UpgradeLevel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"NetAmt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investorId\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "smartBNB", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f971487bea441ee49513b06110eabbe508b47432", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f637e61442ae2630d08b51f2f69841e686ca7bfc1b277c52a3a79315a2e0aef"}