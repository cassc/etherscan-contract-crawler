{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//Contrato criado por Murilo Fernandes, CEO do projeto Alion Network da empresa ALION NETWORK LTDA\r\n// https://alion.network\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract AlionBonusLocker {\r\n    address public owner;\r\n    IERC20 public usdc; // 0x8e4745F24C837B8a546543196A2747e734B1bA65\r\n    IERC20 public alion; // 0xC9537D2F6E04eE518ba4f32d64639cb93ab482C8\r\n    uint256 public constant MINIMO = 10000 * (10**18); \r\n    uint256 public constant MAX_HOLDERS = 200;\r\n    uint256 public constant TEMPO_DE_TRAVA = 2592000; // 3 meses - 90 dias.\r\n    //uint256 public constant TEMPO_DE_TRAVA = 1200; // 1 hora\r\n\r\n    struct Holder {\r\n        uint256 balance;\r\n        bool exists;\r\n        uint256 blockNumber;\r\n    }\r\n\r\n    mapping(address => Holder) public holders;\r\n    address[] public holderAddresses;\r\n    uint256 public totalLocked;\r\n\r\n    event TokensLocked(address indexed holder, uint256 amount, uint256 blockNumber);\r\n    event TokensUnlocked(address indexed holder, uint256 amount);\r\n    event TokensReturned(address indexed holder, uint256 amount);\r\n    event Distribution(uint256 totalAmount);\r\n\r\n    modifier onlyHolder() {\r\n        require(holders[msg.sender].exists, \"You are not a holder\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _usdc, address _alion) {\r\n        owner = msg.sender;\r\n        usdc = IERC20(_usdc);\r\n        alion = IERC20(_alion);\r\n    }\r\n\r\n    function trancarTokens(uint256 amount) external {\r\n        uint256 convertedAmount = amount;\r\n\r\n        require(convertedAmount >= MINIMO, \"Amount sent is less than the minimum required\");\r\n        \r\n        if (!holders[msg.sender].exists) {\r\n            require(holderAddresses.length < MAX_HOLDERS, \"Maximum number of holders reached\");\r\n            holderAddresses.push(msg.sender);\r\n            holders[msg.sender] = Holder({\r\n                balance: convertedAmount,\r\n                exists: true,\r\n                blockNumber: block.number\r\n            });\r\n        } else {\r\n            holders[msg.sender].balance += convertedAmount;\r\n        }\r\n\r\n        require(alion.transferFrom(msg.sender, address(this), convertedAmount), \"ALION transfer failed\");\r\n        totalLocked += convertedAmount;\r\n\r\n        emit TokensLocked(msg.sender, convertedAmount, block.number);\r\n    }\r\n\r\n    \r\n\r\n    function distributeUSDC() external {\r\n            uint256 totalUSDC = usdc.balanceOf(address(this));\r\n            if (totalUSDC > 0) {\r\n                for (uint256 i = 0; i < holderAddresses.length; i++) {\r\n                    address holderAddress = holderAddresses[i];\r\n                    uint256 holderBalance = holders[holderAddress].balance;\r\n                    uint256 holderShare = (totalUSDC * holderBalance) / totalLocked;\r\n\r\n                    require(usdc.transfer(holderAddress, holderShare), \"Distribution failed\");\r\n                }\r\n                emit Distribution(totalUSDC);\r\n            }\r\n    }\r\n\r\n\r\n    function destrancar() external onlyHolder {\r\n        require(block.number >= holders[msg.sender].blockNumber + TEMPO_DE_TRAVA, \"The tokens are still locked\");\r\n        \r\n        uint256 amountToUnlock = holders[msg.sender].balance;\r\n        require(alion.transfer(msg.sender, amountToUnlock), \"Falha ao desbloquear ALION\");\r\n        \r\n        totalLocked -= amountToUnlock;\r\n        emit TokensUnlocked(msg.sender, amountToUnlock);\r\n\r\n        // Remover holder\r\n        for (uint256 i = 0; i < holderAddresses.length; i++) {\r\n            if (holderAddresses[i] == msg.sender) {\r\n                holderAddresses[i] = holderAddresses[holderAddresses.length - 1];\r\n                holderAddresses.pop();\r\n                break;\r\n            }\r\n        }\r\n        delete holders[msg.sender];\r\n    }\r\n\r\n    function devolver() external {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n\r\n        for (uint256 i = 0; i < holderAddresses.length; i++) {\r\n            uint256 amountToReturn = holders[holderAddresses[i]].balance;\r\n            require(alion.transfer(holderAddresses[i], amountToReturn), \"Falha ao devolver ALION\");\r\n            emit TokensReturned(holderAddresses[i], amountToReturn);\r\n            delete holders[holderAddresses[i]];\r\n        }\r\n        delete holderAddresses;\r\n        totalLocked = 0;\r\n    }\r\n\r\n    function getHoldersList() external view returns (address[] memory) {\r\n        return holderAddresses;\r\n    }\r\n\r\n    function getHolderData(address holderAddress) external view returns (uint256 balance, uint256 blockNumber) {\r\n        return (holders[holderAddress].balance, holders[holderAddress].blockNumber);\r\n    }\r\n\r\n    function getRemainingBlocks(address holderAddress) external view returns (uint256) {\r\n        uint256 blockDifference = block.number - holders[holderAddress].blockNumber;\r\n        if (blockDifference >= TEMPO_DE_TRAVA) {\r\n            return 0;\r\n        }\r\n        return TEMPO_DE_TRAVA - blockDifference;\r\n    }\r\n\r\n    function getUSDCForDistribution() external view returns (uint256) {\r\n        return usdc.balanceOf(address(this));\r\n    }\r\n\r\n    function getTotalLockedTokens() external view returns (uint256) {\r\n        return totalLocked;\r\n    }\r\n\r\n    function getNumberOfHolders() external view returns (uint256) {\r\n        return holderAddresses.length;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alion\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_HOLDERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEMPO_DE_TRAVA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alion\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destrancar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"getHolderData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHoldersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"getRemainingBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDCForDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"trancarTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlionBonusLocker", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000008c68a5ac05efbb2e1f843094e726fe0f557de954", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8db393b763498ca0d6b7817facfd7d2a495a8d9ce5dbf0b2bf97fd2fb2bf2827"}