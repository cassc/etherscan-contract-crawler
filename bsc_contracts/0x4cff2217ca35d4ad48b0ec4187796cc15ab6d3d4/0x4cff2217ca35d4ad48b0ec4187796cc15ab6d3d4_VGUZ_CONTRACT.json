{"SourceCode": "pragma solidity >= 0.5.0;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  function burn(uint256 value) external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\ncontract VGUZ_CONTRACT{\r\n    event Multisended(uint256 value , address indexed sender);\r\n    event Airdropped(address indexed _userAddress, uint256 _amount);\r\n\tevent Staking(string  investorId,string time,uint256 investment,address indexed investor);\r\n\tevent WithDraw(address indexed  investor,uint256 WithAmt);\r\n\tevent MemberPayment(address indexed  investor,uint netAmt,uint256 Withid);\r\n\tevent Payment(uint256 NetQty);\r\n    event buypackage(address indexed userwallet,uint256 amountbuy);\r\n    event buyregister(address indexed userwallet,address indexed sender,string  referral,uint256 amountbuy);\r\n\t\r\n    using SafeMath for uint256;\r\n    IBEP20 private USDT; \r\n    address public owner;   \r\n   \r\n   \r\n    constructor(address _ownerAddress,IBEP20 _USDT) public\r\n    {\r\n        owner = _ownerAddress; \r\n        USDT = _USDT;\r\n    }\r\n    \r\n  function registerandbuy(address _userwallet,string memory referral,uint256 investment) public payable\r\n\t{\r\n\t  require(USDT.balanceOf(msg.sender)>=investment);\r\n      require(USDT.allowance(msg.sender,address(this))>=investment,\"Approve Your Token First\");\r\n   \t  USDT.transferFrom(msg.sender ,owner,investment);\r\n\t  emit buyregister( _userwallet,msg.sender,referral,investment);\r\n\t}\r\n\r\n\tfunction Deposit(uint256 investment) public payable\r\n\t{\r\n\t  require(USDT.balanceOf(msg.sender)>=investment);\r\n   \t  USDT.transferFrom(msg.sender ,owner,investment);\r\n\t  emit buypackage( msg.sender,investment);\r\n\t}\r\n  \r\n    function multisendBNB(address payable[]  memory  _contributors, uint256[] memory _balances) public payable {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i] );\r\n            total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }       \r\n    }\r\n\r\n  \r\n    function multisendToken(address payable[]  memory  _contributors, uint256[] memory _balances, uint256 totalQty,uint256[] memory WithId,IBEP20 _TKN) public payable {\r\n    \tuint256 total = totalQty;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= _balances[i]);\r\n            total = total.sub(_balances[i]);\r\n            _TKN.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n\t\t\temit MemberPayment(_contributors[i],_balances[i],WithId[i]);\r\n        }\r\n\t\temit Payment(totalQty);\r\n    }\r\n    \r\n\t function multisendWithdraw(address payable[]  memory  _contributors, uint256[] memory _balances,IBEP20 _TKN) public payable {\r\n    \trequire(msg.sender == owner, \"onlyOwner\");\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n              _TKN.transfer(_contributors[i], _balances[i]);\r\n        }\r\n    }\r\n\r\n    function withdrawLostBNBFromBalance(address payable _sender) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _sender.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawincome(address payable _userAddress,uint256 WithAmt) public {\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        USDT.transferFrom(msg.sender,_userAddress, WithAmt);\r\n        emit WithDraw(_userAddress,WithAmt);\r\n    }\r\n     \r\n\tfunction withdrawLostTokenFromBalance(uint QtyAmt,IBEP20 _TKN) public \r\n\t{\r\n        require(msg.sender == owner, \"onlyOwner\");\r\n        _TKN.transfer(owner,QtyAmt);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"totalQty\",\"type\":\"uint256\"},{\"name\":\"WithId\",\"type\":\"uint256[]\"},{\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userAddress\",\"type\":\"address\"},{\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"withdrawincome\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"QtyAmt\",\"type\":\"uint256\"},{\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"withdrawLostTokenFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"withdrawLostBNBFromBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userwallet\",\"type\":\"address\"},{\"name\":\"referral\",\"type\":\"string\"},{\"name\":\"investment\",\"type\":\"uint256\"}],\"name\":\"registerandbuy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributors\",\"type\":\"address[]\"},{\"name\":\"_balances\",\"type\":\"uint256[]\"},{\"name\":\"_TKN\",\"type\":\"address\"}],\"name\":\"multisendWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"name\":\"_USDT\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investorId\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"investment\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"Staking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"WithAmt\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"netAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"Withid\",\"type\":\"uint256\"}],\"name\":\"MemberPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"NetQty\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userwallet\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountbuy\",\"type\":\"uint256\"}],\"name\":\"buypackage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"userwallet\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"referral\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"amountbuy\",\"type\":\"uint256\"}],\"name\":\"buyregister\",\"type\":\"event\"}]", "ContractName": "VGUZ_CONTRACT", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000001854a75b0793de2c99271cd9f053457a571f89fc00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://9e4f50e7ac0a8fa76bfc8e00032ff46190d177f4ffc0e4afb66774f70a2001d5"}