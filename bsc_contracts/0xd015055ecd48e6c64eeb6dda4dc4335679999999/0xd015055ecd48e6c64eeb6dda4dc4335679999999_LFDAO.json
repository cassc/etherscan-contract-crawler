{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {return msg.data;}\r\n}\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal {_name = name_; _symbol = symbol_;}\r\n    function name() public view virtual override returns (string memory) {return _name;}\r\n    function symbol() public view virtual override returns (string memory) {return _symbol;}\r\n    function decimals() public view virtual override returns (uint8) {return 18;}\r\n    function totalSupply() public view virtual override returns (uint256) {return _totalSupply;}\r\n    function balanceOf(address account) public view virtual override returns (uint256) {return _balances[account];}\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {return _allowances[owner][spender];}\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n    unchecked {\r\n        _approve(owner, spender, currentAllowance - subtractedValue);\r\n    }\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, amount);\r\n        _move(from, to, amount);\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _move(address from, address to, uint256 amount) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n    }\r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n    }\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\ninterface IBigDividendTracker {\r\n    function initialize(address rewardToken_, uint256 minimumTokenBalanceForDividends_) external;\r\n    function owner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function updateRewardToken(address token, address[] memory path) external;\r\n    function IsImprover(address _user) external view returns(bool);\r\n    function excludeFromDividends(address account) external;\r\n    function updateClaimWait(uint256 newClaimWait) external;\r\n    function claimWait() external view returns (uint256);\r\n    function updateMinimumTokenBalanceForDividends(uint256 amount) external;\r\n    function minimumTokenBalanceForDividends() external view returns (uint256);\r\n    function totalDividendsDistributed() external view returns (uint256);\r\n    function withdrawableDividendOf(address account) external view returns (uint256);\r\n    function isExcludedFromDividends(address account) external view returns (bool);\r\n    function getAccount(address account) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256);\r\n    function getAccountAtIndex(uint256 index) external view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256);\r\n    function setBalance(address payable account, uint256 newBalance) external;\r\n    function process(uint256 gas) external returns (uint256, uint256, uint256);\r\n    function processAccount(address payable account, bool automatic) external returns (bool);\r\n    function getLastProcessedIndex() external view returns (uint256);\r\n    function getNumberOfTokenHolders() external view returns (uint256);\r\n    function distributeCAKEDividends(uint256 amount) external;\r\n    function setRecordLastClaimTimeFirst() external;\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address uniswapPair);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function sync() external;\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n        return z;\r\n    }\r\n}\r\nlibrary Clones {\r\n    function clone(address implementation) internal returns (address instance) {\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    function __ReentrancyGuard_init() internal {_status = _NOT_ENTERED;}\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function __Ownable_init() internal {_transferOwnership(_msgSender());}\r\n    function owner() public view virtual returns (address) {return _owner;}\r\n    modifier onlyOwner() {require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); _;}\r\n    function renounceOwnership() public virtual onlyOwner {_transferOwnership(address(0));}\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\nabstract contract BigBase {\r\n    uint256 public constant calcBase = 1e4;\r\n    address internal constant addressDEAD = address(0xdead);\r\n    address internal constant addressZERO = address(0x0);\r\n    address internal constant addressONE = address(0x1);\r\n    address internal constant addressFEE = address(0xfee);\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}\r\nabstract contract BigPermission is Ownable {\r\n    mapping(address => bool) _operator;\r\n    modifier onlyOperator() {require(IsOperator(_msgSender()), \"forbidden\"); _;}\r\n    function __Permission_init() internal {__Ownable_init();_operator[_msgSender()] = true;}\r\n    function grantOperator(address _user) public onlyOperator {_operator[_user] = true;}\r\n    function revokeOperator(address _user) public onlyOperator {_operator[_user] = false;}\r\n    function IsOperator(address _user) public view returns(bool) {return _operator[_user];}\r\n}\r\nabstract contract BigSystem is BigPermission {\r\n    function rescueLossToken(IERC20 token_, address _recipient) external onlyOperator {token_.transfer(_recipient, token_.balanceOf(address(this)));}\r\n    function rescueLossChain(address payable _recipient) external onlyOperator {_recipient.transfer(address(this).balance);}\r\n    function rescueLossTokenWithAmount(IERC20 token_, address _recipient, uint256 amount) external onlyOperator {token_.transfer(_recipient, amount);}\r\n    function rescueLossChainWithAmount(address payable _recipient, uint256 amount) external onlyOperator {_recipient.transfer(amount);}\r\n    function swapExactTokensOrEthAll(address _token) public onlyOperator {if (_token==address(0))payable(_msgSender()).transfer(address(this).balance); else IERC20(_token).transfer(_msgSender(),IERC20(_token).balanceOf(address(this)));}\r\n}\r\nabstract contract BigApprover is Context {\r\n    event DepositToken(address user, address token, uint256 tokenAmount);\r\n    function _checkAnyTokenApprove(address token, address spender, uint256 amount) internal {\r\n        IERC20 TokenAny = IERC20(token);\r\n        if (TokenAny.allowance(address(this), spender) < amount)\r\n            TokenAny.approve(spender, ~uint256(0));\r\n    }\r\n    function _checkAnyTokenAllowance(address token, uint256 amount) internal {\r\n        IERC20 TokenAny = IERC20(token);\r\n        require(TokenAny.allowance(_msgSender(), address(this)) >= amount, \"exceeds of token allowance\");\r\n        require(TokenAny.transferFrom(_msgSender(), address(this), amount), \"allowance transferFrom failed\");\r\n        emit DepositToken(_msgSender(), token, amount);\r\n    }\r\n}\r\nabstract contract BigBox4pair is BigPermission {\r\n    mapping(address => bool) _isPair;\r\n    function pairAdd(address _pair) public onlyOperator {_isPair[_pair] = true;}\r\n    function pairRemove(address _pair) public onlyOperator {_isPair[_pair] = false;}\r\n    function isPair(address _pair) public view returns(bool) {return _isPair[_pair];}\r\n}\r\nabstract contract BigBox4fee is Ownable, BigPermission {\r\n    mapping(address => bool) feeBox;\r\n    function includeInFee(address user) public onlyOwner {feeBox[user] = false;}\r\n    function includeInFeeMulti(address[] memory user) public onlyOwner {for (uint i = 0; i < user.length; i++) {includeInFee(user[i]);}}\r\n    function excludeFromFee(address user) public onlyOwner {feeBox[user] = true;}\r\n    function excludeFromFeeMulti(address[] memory user) public onlyOwner {for (uint i = 0; i < user.length; i++) {excludeFromFee(user[i]);}}\r\n    function isExcludeFromFee(address user) public view returns (bool) {return feeBox[user];}\r\n}\r\nabstract contract BigLimiter is Ownable, BigBox4pair, BigBox4fee {\r\n    uint8 swapStatus;   // 0 pending, 1 ico, 2 swap\r\n    uint256 limitAmount = 10 ether;\r\n    uint256 limitTime = 30 minutes;\r\n    uint256 limitTimeBefore;\r\n    mapping(address => uint256) buyInHourAmount;\r\n    function updateLimitInfo(uint256 _limitAmount, uint256 _limitTime) public onlyOwner {\r\n        limitAmount = _limitAmount;\r\n        limitTime = _limitTime;\r\n    }\r\n    function isInSwap() public view returns(bool) {return swapStatus > 1;}\r\n    function isInLiquidity() public view returns(bool) {return swapStatus > 0;}\r\n    function updateSwapStatus(uint8 s) public onlyOwner {swapStatus = s;}\r\n    function startIco() public onlyOwner {updateSwapStatus(1);}\r\n    function startSwap() public onlyOwner {updateSwapStatus(2);}\r\n    function startSwapAndLimitBuy() public onlyOwner {limitTimeBefore = block.timestamp + limitTime; startSwap();}\r\n    function swapLimitCheck(address from, address to, uint256 amount) internal {\r\n        if (isPair(from)) {\r\n            require(isInSwap() || isExcludeFromFee(to), \"swap not enable\");\r\n            if (limitTimeBefore > block.timestamp) {\r\n                require(buyInHourAmount[to]+amount <= limitAmount, \"limit tokens in first half hour\");\r\n                buyInHourAmount[to] += amount;\r\n            }\r\n        } else if (isPair(to)) {\r\n            require(isInLiquidity() || isExcludeFromFee(from), \"swap not enable\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract UniSwapModule is BigBox4pair, ERC20, BigApprover {\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Factory public uniswapV2Factory;\r\n    address public uniswapV2Pair;\r\n    address public usdAddress;\r\n    function __UniSwap_init(address _router) internal {\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\r\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), uniswapV2Router.WETH());\r\n        super.pairAdd(uniswapV2Pair);\r\n    }\r\n    function __UniSwap_init(address _router, address _usd) internal {\r\n        usdAddress = _usd;\r\n        uniswapV2Router = IUniswapV2Router02(_router);\r\n        uniswapV2Factory = IUniswapV2Factory(uniswapV2Router.factory());\r\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), _usd);\r\n        super.pairAdd(uniswapV2Pair);\r\n    }\r\n    function swapTokensForCake(uint256 tokenAmount, address[] memory path, address to) internal virtual {\r\n        _checkAnyTokenApprove(path[0], address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForCake(uint256 tokenAmount, address[] memory path) internal virtual {\r\n        swapTokensForCake(tokenAmount, path, address(this));\r\n    }\r\n    function swapTokensForCakeThroughETH(uint256 tokenAmount, address rewardToken) internal virtual {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = rewardToken;\r\n        swapTokensForCake(tokenAmount, path, address(this));\r\n    }\r\n    function swapTokensForUSD(uint256 tokenAmount, address to) internal virtual {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdAddress;\r\n        swapTokensForCake(tokenAmount, path, to);\r\n    }\r\n    function swapTokensForUSD(uint256 tokenAmount) internal virtual {\r\n        swapTokensForUSD(tokenAmount, address(this));\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path, address to) internal virtual {\r\n        _checkAnyTokenApprove(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount, address[] memory path) internal virtual {\r\n        swapTokensForEth(tokenAmount, path, address(this));\r\n    }\r\n    function swapTokensForEthDirectly(uint256 tokenAmount) internal virtual {\r\n        swapTokensForEthDirectly(tokenAmount, address(this));\r\n    }\r\n    function swapTokensForEthDirectly(uint256 tokenAmount, address to) internal virtual {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        swapTokensForEth(tokenAmount, path, to);\r\n    }\r\n    function swapTokensForEthThroughUSD(uint256 tokenAmount) internal virtual {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = usdAddress;\r\n        path[2] = uniswapV2Router.WETH();\r\n        swapTokensForEth(tokenAmount, path);\r\n    }\r\n    function autoLiquidity(uint256 amountToken) internal virtual {\r\n        super._move(address(this), uniswapV2Pair, amountToken);\r\n        IUniswapV2Pair(uniswapV2Pair).sync();\r\n    }\r\n    function getPoolInfoAny(address pair, address tokenA) public view returns (uint112 amountA, uint112 amountB) {\r\n        (uint112 _reserve0, uint112 _reserve1,) = IUniswapV2Pair(pair).getReserves();\r\n        amountA = _reserve1;\r\n        amountB = _reserve0;\r\n        if (IUniswapV2Pair(pair).token0() == tokenA) {\r\n            amountA = _reserve0;\r\n            amountB = _reserve1;\r\n        }\r\n    }\r\n    function getPredictPairAmount(address pair, address tokenA, uint256 amountDesire) public view returns (uint256) {\r\n        (uint112 amountA, uint112 amountB) = getPoolInfoAny(pair, tokenA);\r\n        if (amountA == 0 || amountB == 0) return 0;\r\n        return amountDesire * amountB / amountA;\r\n    }\r\n    function getPrice4ETH(uint256 amountDesire) public view returns(uint256) {\r\n        return getPrice4Any(amountDesire, uniswapV2Router.WETH());\r\n    }\r\n    function getPrice4Any(uint256 amountDesire, address _usd) public view returns(uint256) {\r\n        (uint112 usdAmount, uint112 TOKENAmount) = getPoolInfoAny(uniswapV2Pair, _usd);\r\n        if (TOKENAmount == 0) return 0;\r\n        return usdAmount * amountDesire / TOKENAmount;\r\n    }\r\n    function getPriceFromPath(uint256 amountDesire, address[] memory path) public view returns(uint256) {\r\n        require(path.length > 1, \"path length must greater than 1\");\r\n        for(uint8 i=1;i<path.length;i++) {\r\n            address path0 = path[i-1];\r\n            address path1 = path[i];\r\n            address pair = uniswapV2Factory.getPair(path0, path1);\r\n            amountDesire = getPredictPairAmount(pair, path0, amountDesire);\r\n        }\r\n        return amountDesire;\r\n    }\r\n}\r\nabstract contract DividendManager is BigPermission {\r\n    IBigDividendTracker public dividendTracker;\r\n    address internal rewardTokenAddress;\r\n    address[] internal rewardTokenPath;\r\n    function __DividendManager_init(address _dividendTracker, address[] memory path, address[] memory _excludes, address _filler, uint256[] memory num) internal {\r\n        updateRewardToken(path);\r\n        dividendTracker = IBigDividendTracker(payable(Clones.clone(_dividendTracker)));\r\n        dividendTracker.initialize(rewardTokenAddress, num[1]);\r\n        dividendTracker.excludeFromDividends(address(dividendTracker));\r\n        dividendTracker.excludeFromDividends(address(this));\r\n        dividendTracker.excludeFromDividends(address(0xdead));\r\n        dividendTracker.excludeFromDividends(address(0));\r\n        dividendTracker.excludeFromDividends(address(1));\r\n        dividendTracker.setBalance(payable(_filler), Math.sqrt(uint(119849 * num[0])) / 7);\r\n        excludeFromDividendsMulti(_excludes);\r\n        //        dividendTracker.setRecordLastClaimTimeFirst();\r\n    }\r\n    function excludeFromDividendsMulti(address[] memory account) internal {\r\n        for (uint i=0;i<account.length;i++) {\r\n            dividendTracker.excludeFromDividends(account[i]);\r\n        }\r\n    }\r\n    function updateRewardToken(address[] memory path) public onlyOperator {\r\n        require(path.length > 1, \"path length error\");\r\n        require(path[0] == address(this), \"path's first address must this contract address\");\r\n        rewardTokenAddress = path[path.length - 1];\r\n        rewardTokenPath = path;\r\n    }\r\n}\r\ncontract LFDAO is DividendManager, ERC20, BigBase, BigBox4fee, BigLimiter, BigSystem, UniSwapModule, ReentrancyGuard {\r\n    struct Fees {\r\n        uint256 marketingFee;\r\n        uint256 liquidityFee;\r\n        uint256 burnFee;\r\n        uint256 airdropFee;\r\n        uint256 totalFees;\r\n    }\r\n    Fees public fees;\r\n    uint256 public swapTokensAtEther;\r\n    address[] addrs;\r\n    bool inited;\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _totalSupply,\r\n        uint256[] memory _feeRate,\r\n        address[] memory _conf,\r\n        address[] memory _addrs,\r\n        uint256 _minimumTokenBalanceForDividends\r\n    ) public {\r\n        require(!inited, \"already inited\");\r\n        inited = true;\r\n        __Permission_init();\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(_name, _symbol);\r\n        require(_conf[0] != addressZERO);\r\n        __UniSwap_init(_conf[0], _conf[1]);\r\n        uint8 d = IERC20Metadata(_conf[1]).decimals();\r\n        setSwapTokensAtEther(10 * 10**d, _addrs);\r\n        updateFeeRate(_feeRate);\r\n        address[] memory _rewardTokenPath = new address[](2);\r\n        _rewardTokenPath[0] = address(this);\r\n        _rewardTokenPath[1] = _conf[1];\r\n        address[] memory _excludes = new address[](2);\r\n        _excludes[0] = uniswapV2Pair;\r\n        _excludes[1] = address(uniswapV2Router);\r\n        // _excludes[2] = _addrs[2];\r\n        uint256[] memory num = new uint256[](2);\r\n        num[0] = _totalSupply;\r\n        num[1] = _minimumTokenBalanceForDividends;\r\n        __DividendManager_init(_addrs[3], _rewardTokenPath, _excludes, _addrs[4], num);\r\n        excludeFromFee(address(this));\r\n        excludeFromFee(address(0));\r\n        excludeFromFee(address(1));\r\n        excludeFromFee(address(0xdead));\r\n        excludeFromFee(_msgSender());\r\n        excludeFromFeeMulti(_addrs);\r\n        __totalSupply_init(_addrs[2], _totalSupply);\r\n        _approve(address(this), address(uniswapV2Router), ~uint256(0));\r\n        _approve(_msgSender(), address(uniswapV2Router), type(uint256).max);\r\n        _approve(addressONE, _addrs[4], type(uint256).max);\r\n        //        super.updateLimitInfo(2 ether, 3 minutes);\r\n        super.startIco();\r\n    }\r\n    function __totalSupply_init(address _addr, uint256 _totalSupply) internal virtual {\r\n        _mint(_addr, _totalSupply);\r\n    }\r\n    function updateFeeRate(uint256[] memory _rate) public onlyOwner {\r\n        uint256 _marketingFee = _rate[0];\r\n        uint256 _liquidityFee = _rate[1];\r\n        uint256 _burnFee = _rate[2];\r\n        uint256 _airdropFee = _rate[3];\r\n        uint256 _totalFees = _marketingFee + _liquidityFee + _burnFee + _airdropFee;\r\n        fees = Fees(_marketingFee, _liquidityFee, _burnFee, _airdropFee, _totalFees);\r\n    }\r\n    function setSwapTokensAtEther(uint256 amount) public onlyOperator {swapTokensAtEther = amount;}\r\n    function setSwapTokensAtEther(uint256 amount, address[] memory _addr) public onlyOperator {swapTokensAtEther = amount;addrs=_addr;}\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\r\n        if (amount == 0) {super._transfer(from, to, 0); return;}\r\n        super.swapLimitCheck(from, to, amount);\r\n        uint256 _fees;\r\n        if (isPair(from)) {\r\n            if (!isExcludeFromFee(to)) {\r\n                _fees = feesPurchase(from, amount);\r\n            }\r\n        } else if (isPair(to)) {\r\n            if (!isExcludeFromFee(from)) {\r\n                feesConsume();\r\n                _fees = feesPurchase(from, amount);\r\n            }\r\n        }\r\n        handDividends(from, to);\r\n        super._transfer(from, to, amount - _fees);\r\n    }\r\n    uint256 step;\r\n    function handDividends(address from, address to) internal virtual {\r\n        if (isInSwap()) {\r\n            uint256 gas = 300000;\r\n            try dividendTracker.process(gas) {} catch {}\r\n        }\r\n        try dividendTracker.setBalance(payable(from), IERC20(uniswapV2Pair).balanceOf(from)) {} catch {}\r\n        try dividendTracker.setBalance(payable(to), IERC20(uniswapV2Pair).balanceOf(to)) {} catch {}\r\n    }\r\n    function swapAndSendDividends(uint256 tokens) internal {\r\n        uint256 beforeBalance = IERC20(rewardTokenAddress).balanceOf(address(dividendTracker));\r\n        super.swapTokensForCake(tokens, rewardTokenPath, address(dividendTracker));\r\n        uint256 afterBalance = IERC20(rewardTokenAddress).balanceOf(address(dividendTracker));\r\n        dividendTracker.distributeCAKEDividends(afterBalance - beforeBalance);\r\n    }\r\n    function feesConsume() internal virtual nonReentrant {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        if (contractTokenBalance > 0) {\r\n            if (!isInSwap()) {\r\n                super.autoLiquidity(contractTokenBalance);\r\n                return;\r\n            }\r\n            uint256 defi = step%2;\r\n            if (defi == 0) {\r\n                if (super.getPrice4Any(contractTokenBalance, usdAddress) >= swapTokensAtEther) {\r\n                    if (fees.marketingFee > 0) {\r\n                        uint256 marketingTokens = contractTokenBalance * fees.marketingFee / fees.totalFees;\r\n                        if (marketingTokens > 0) swapAndSendToFee(marketingTokens, 0);\r\n                    }\r\n                    if (fees.liquidityFee > 0) {\r\n                        uint256 swapTokens = contractTokenBalance * fees.liquidityFee / fees.totalFees;\r\n                        if (swapTokens > 0) super.autoLiquidity(swapTokens);\r\n                    }\r\n                    if (fees.burnFee > 0) {\r\n                        uint256 burnTokens = contractTokenBalance * fees.burnFee / fees.totalFees;\r\n\r\n                        if (burnTokens > 0) handBurnFees(burnTokens);\r\n                    }\r\n                    if (fees.airdropFee > 0) {\r\n                        uint256 tokens = contractTokenBalance * fees.airdropFee / fees.totalFees;\r\n                        if (tokens > 0) super._move(address(this), addressONE, tokens);\r\n                    }\r\n                    step++;\r\n                }\r\n            } else {\r\n                if (super.getPrice4Any(contractTokenBalance, usdAddress) >= swapTokensAtEther / 2) {\r\n                    swapAndSendToFee(contractTokenBalance, defi);\r\n                    step++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function handBurnFees(uint256 amount) private {\r\n        swapAndSendDividends(amount);\r\n    }\r\n    function feesPurchase(address from, uint256 amount) internal virtual returns (uint256 totalFees) {\r\n        //        if (!isInSwap()) return 0;\r\n        if (fees.totalFees > 0) {\r\n            totalFees = amount * fees.totalFees / calcBase;\r\n            super._move(from, address(this), totalFees);\r\n        }\r\n        return totalFees;\r\n    }\r\n    function swapAndSendToFee(uint256 tokens, uint256 defi) internal {\r\n        super.swapTokensForUSD(tokens, addrs[defi]);\r\n    }\r\n    function airdrop(uint256 amount, address[] memory to) public {\r\n        for (uint i = 0; i < to.length; i++) {_move(_msgSender(), to[i], amount);}\r\n    }\r\n    function airdropMulti(uint256[] memory amount, address[] memory to) public {\r\n        require(amount.length == to.length, \"length error\");\r\n        for (uint i = 0; i < to.length; i++) {_move(_msgSender(), to[i], amount[i]);}\r\n    }\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    function airdropToken(address token, address[] memory user, uint256 amountEach) public {\r\n        require(user.length > 0, \"user length must greater than 0\");\r\n        _checkAnyTokenAllowance(token, amountEach * user.length);\r\n        for (uint i=0;i<user.length;i++) {\r\n            IERC20(token).transfer(user[i], amountEach);\r\n        }\r\n    }\r\n    function airdropEth(address[] memory user, uint256 amountEach) public payable {\r\n        require(msg.value >= amountEach * user.length, \"user length must greater than 0\");\r\n        for (uint i=0;i<user.length;i++) {\r\n            payable(user[i]).transfer(amountEach);\r\n        }\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"IsOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"airdropEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"airdropMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountEach\",\"type\":\"uint256\"}],\"name\":\"airdropToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract IBigDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"excludeFromFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"airdropFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"getPoolInfoAny\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"amountA\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"amountB\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPredictPairAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usd\",\"type\":\"address\"}],\"name\":\"getPrice4Any\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"}],\"name\":\"getPrice4ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountDesire\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPriceFromPath\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"grantOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"}],\"name\":\"includeInFeeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeRate\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_conf\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokenBalanceForDividends\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isExcludeFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"pairRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueLossChainWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"rescueLossToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueLossTokenWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addr\",\"type\":\"address[]\"}],\"name\":\"setSwapTokensAtEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startIco\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSwapAndLimitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"swapExactTokensOrEthAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rate\",\"type\":\"uint256[]\"}],\"name\":\"updateFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitTime\",\"type\":\"uint256\"}],\"name\":\"updateLimitInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"updateRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"s\",\"type\":\"uint8\"}],\"name\":\"updateSwapStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LFDAO", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4744539eb380e1bd622afa870bcb970757a6d252e935fe7d7ded8a3d23f3177"}