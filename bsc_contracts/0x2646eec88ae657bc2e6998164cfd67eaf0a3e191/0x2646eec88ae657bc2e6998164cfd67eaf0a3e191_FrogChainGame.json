{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n// File: IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n    pragma solidity ^0.8.4;\r\n\r\n    \r\n    contract FrogChainGame is Ownable, IERC721Receiver{\r\n\r\n    IERC20 public token;\r\n    IERC721 public nft;\r\n\r\n    uint256 public decimalNumber = 9;\r\n    uint256 public countOfOverallStakers;\r\n\r\n    uint256 public gameStartTime;\r\n    uint256 public gameDuration = 604800;\r\n    uint256 public stakingEligibilityTime = 259200;\r\n    uint256 public additionalTime = 0;\r\n    uint256 public gameIndex = 0;\r\n    uint256 public originalGameIndex = 0;\r\n    uint256 public winnerPrizeRate = 90;\r\n \r\n    // Contract Addresses\r\n    address _nft_Contract = 0x65DCB33FaaDC14151b0B7FBffD2863C5229Cc29E;\r\n    address _token_Contract = 0xDCD103Bc6D14829C39Afc9c10c9c373CE385D2C5;\r\n\r\n    // Mapping \r\n    mapping(address => mapping(uint256 => uint256)) public tokenStakedTime;\r\n    mapping(address => mapping(uint256 => uint256)) public tokenStakedDuration;\r\n    mapping(uint256 => address) public stakedTokenOwner;\r\n    mapping(address => uint256[]) public stakedTokens;\r\n    mapping(address => uint256) public countofMyStakedTokens;\r\n    mapping(address => uint256) public totalRewardReleased;\r\n    mapping(uint256 => address) public stakers;  \r\n    mapping(uint256 => address) public nftOwner;\r\n    mapping(uint256 => uint256) public winner;  \r\n\r\n    mapping(uint256 => uint256) public AquaFrogsCount;\r\n    mapping(uint256 => uint256) public FireFrogsCount;\r\n\r\n    mapping(address => uint256) public individualStakingStartTime; \r\n    mapping(address => mapping(uint256 => bool)) public isAquaFrog;  \r\n    mapping(address => mapping(uint256 => bool)) public isFireFrog;\r\n    mapping(address => mapping(uint256 => uint256)) public individualStakingCount; \r\n    mapping(address => uint256) public myGameIndex; \r\n    mapping(address => mapping(uint256 => uint256)) public individualStakingIndex;\r\n    mapping(address => bool) public alreadyStakedNFT; \r\n    mapping(uint256 => bool) public gameEnded; \r\n\r\n    mapping(address => mapping(uint256 => uint256)) public rewardsClaimable1_map; \r\n    mapping(address => mapping(uint256 => uint256)) public rewardsClaimable2_map; \r\n    mapping(address => mapping(uint256 => uint256)) public rewardsClaimable_map; \r\n    mapping(address => mapping(uint256 => bool)) public rewardsTaken; \r\n\r\n\r\n    constructor(){\r\n    nft = IERC721(_nft_Contract);\r\n    token = IERC20(_token_Contract);\r\n    }\r\n\r\n    function stakeNFT(uint256 _tokenID) public timeConditions {\r\n\r\n        require(nft.ownerOf(_tokenID) == msg.sender, \"Not the owner\");\r\n        require(!alreadyStakedNFT[msg.sender], \"1 NFT is already staked\");\r\n        alreadyStakedNFT[msg.sender] = true;        \r\n        nftOwner[_tokenID] = msg.sender;\r\n        stakedTokens[msg.sender].push(_tokenID);\r\n        countofMyStakedTokens[msg.sender]++;\r\n\r\n        uint256 length = stakedTokens[msg.sender].length;\r\n\r\n        if(stakedTokens[msg.sender].length != countofMyStakedTokens[msg.sender]){\r\n            stakedTokens[msg.sender][countofMyStakedTokens[msg.sender]-1] = stakedTokens[msg.sender][length-1];\r\n            delete stakedTokens[msg.sender][length-1];\r\n        }\r\n    \r\n        stakedTokenOwner[_tokenID] = msg.sender;\r\n        tokenStakedTime[msg.sender][_tokenID] = block.timestamp;\r\n        nft.safeTransferFrom(msg.sender,address(this),_tokenID,\"0x00\");\r\n\r\n        stakers[countOfOverallStakers] = msg.sender;    \r\n        countOfOverallStakers++;\r\n    }\r\n\r\n    function stakeFrog_AquaFrogs(uint256 amount) public timeConditions {\r\n        require(alreadyStakedNFT[msg.sender], \"No NFT staked\");\r\n\r\n        if(individualStakingIndex[msg.sender][gameIndex] > 0){\r\n        require(block.timestamp < individualStakingStartTime[msg.sender] + stakingEligibilityTime, \"Staking eligibility is over\");\r\n\r\n        }else {\r\n            individualStakingStartTime[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        require(!isFireFrog[msg.sender][gameIndex], \"You are already a member in Fire Frogs\");\r\n        myGameIndex[msg.sender] = gameIndex;\r\n        isAquaFrog[msg.sender][gameIndex] = true;\r\n        token.transferFrom(msg.sender, address(this), amount * 10 ** decimalNumber);    \r\n        AquaFrogsCount[gameIndex] = AquaFrogsCount[gameIndex] + amount;\r\n        individualStakingCount[msg.sender][gameIndex] = individualStakingCount[msg.sender][gameIndex] + amount;\r\n        individualStakingIndex[msg.sender][gameIndex]++;\r\n    }\r\n\r\n    function stakeFrog_FireFrogs(uint256 amount) public timeConditions {\r\n        require(alreadyStakedNFT[msg.sender], \"No NFT staked\");\r\n\r\n        if(individualStakingIndex[msg.sender][gameIndex] > 0){\r\n        require(block.timestamp < individualStakingStartTime[msg.sender] + stakingEligibilityTime, \"Staking eligibility is over\");\r\n\r\n        }else {\r\n            individualStakingStartTime[msg.sender] = block.timestamp;\r\n        }\r\n\r\n        require(block.timestamp < individualStakingStartTime[msg.sender] + stakingEligibilityTime, \"Staking eligibility is over\");\r\n        require(!isAquaFrog[msg.sender][gameIndex], \"You are already a member in Aqua Frogs\");\r\n        myGameIndex[msg.sender] = gameIndex;\r\n        isFireFrog[msg.sender][gameIndex] = true;\r\n        token.transferFrom(msg.sender, address(this), amount * 10 ** decimalNumber);    \r\n        FireFrogsCount[gameIndex] = FireFrogsCount[gameIndex] + amount;\r\n        individualStakingCount[msg.sender][gameIndex] = individualStakingCount[msg.sender][gameIndex] + amount;\r\n        individualStakingIndex[msg.sender][gameIndex]++;\r\n    }\r\n\r\n    function setGameStartTime(uint256 _gameStartTime) public onlyOwner{\r\n        \r\n        gameStartTime = _gameStartTime;\r\n\r\n        if(gameIndex > 0){\r\n        originalGameIndex++;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function setAdditionalTime(uint256 _additionalTime) public onlyOwner{\r\n        \r\n        additionalTime = _additionalTime;\r\n\r\n    }\r\n\r\n    function setGameStart() public onlyOwner{\r\n\r\n        setGameStartTime(block.timestamp); \r\n\r\n    }\r\n\r\n    function setGameEnd(uint256 _additionalTime) public onlyOwner{  \r\n\r\n        uint256 gameEndingTime = gameStartTime + gameDuration + additionalTime;\r\n        require(block.timestamp > gameEndingTime, \"Game still running\");  \r\n\r\n        if(AquaFrogsCount[gameIndex] > FireFrogsCount[gameIndex]){\r\n            winner[gameIndex] = 1;       \r\n            gameEnded[gameIndex] = true;   \r\n            gameIndex++;\r\n        }\r\n\r\n        if(FireFrogsCount[gameIndex] > AquaFrogsCount[gameIndex]){\r\n            winner[gameIndex] = 2;   \r\n            gameEnded[gameIndex] = true; \r\n            gameIndex++;\r\n        }\r\n\r\n        if(FireFrogsCount[gameIndex] == AquaFrogsCount[gameIndex]){\r\n            winner[gameIndex] = 3;\r\n            setAdditionalTime(_additionalTime);\r\n        }\r\n                            \r\n    }\r\n\r\n    function claimWinningRewards() public {\r\n        \r\n        uint256 gameEndingTime = gameStartTime + gameDuration + additionalTime;\r\n\r\n        require(block.timestamp > gameEndingTime, \"Game still running\");\r\n        require(myGameIndex[msg.sender] == gameIndex - 1, \"The current game is not the game you are reffering to\");\r\n        require(!rewardsTaken[msg.sender][gameIndex - 1], \"Already claimed for this round\");\r\n\r\n            if(isAquaFrog[msg.sender][gameIndex - 1]){\r\n                require(winner[gameIndex - 1] == 1);\r\n\r\n                uint256 rewardsClaimable1 = individualStakingCount[msg.sender][gameIndex - 1] * 10 ** decimalNumber;\r\n                rewardsClaimable1_map[msg.sender][gameIndex - 1] = rewardsClaimable1;\r\n\r\n                uint256 rewardsClaimable2 = ((individualStakingCount[msg.sender][gameIndex - 1] * 10 ** decimalNumber / AquaFrogsCount[gameIndex - 1]) * (FireFrogsCount[gameIndex - 1] * winnerPrizeRate))/100 ;\r\n                rewardsClaimable2_map[msg.sender][gameIndex - 1] = rewardsClaimable2;\r\n\r\n                uint256 rewardsClaimable = rewardsClaimable1 + rewardsClaimable2;    \r\n                rewardsClaimable_map[msg.sender][gameIndex - 1] = rewardsClaimable;\r\n\r\n                token.transfer(msg.sender, rewardsClaimable);\r\n\r\n            } else if(isFireFrog[msg.sender][gameIndex - 1]){\r\n                require(winner[gameIndex - 1] == 2);\r\n\r\n                uint256 rewardsClaimable1 = individualStakingCount[msg.sender][gameIndex - 1] * 10 ** decimalNumber;\r\n                rewardsClaimable1_map[msg.sender][gameIndex - 1] = rewardsClaimable1;\r\n\r\n                uint256 rewardsClaimable2 = ((individualStakingCount[msg.sender][gameIndex - 1] * 10 ** decimalNumber / FireFrogsCount[gameIndex - 1]) * (AquaFrogsCount[gameIndex - 1] * winnerPrizeRate))/100;\r\n                rewardsClaimable2_map[msg.sender][gameIndex - 1] = rewardsClaimable2;\r\n\r\n                uint256 rewardsClaimable = rewardsClaimable1 + rewardsClaimable2;    \r\n                rewardsClaimable_map[msg.sender][gameIndex - 1] = rewardsClaimable;\r\n\r\n                token.transfer(msg.sender, rewardsClaimable); \r\n            }\r\n\r\n            rewardsTaken[msg.sender][gameIndex - 1] = true; \r\n\r\n        \r\n    }\r\n\r\n    modifier timeConditions() {\r\n\r\n        uint256 gameEndingTime = gameStartTime + gameDuration + additionalTime;\r\n        require(block.timestamp > gameStartTime, \"Game not yet started\");\r\n        require(block.timestamp < gameEndingTime, \"Game already finished\");\r\n        _;\r\n\r\n    }\r\n\r\n\r\n    function batchStakeNFT(uint256[] memory _tokenIDs) public {\r\n        \r\n        for(uint256 x = 0; x <  _tokenIDs.length ; x++){\r\n            stakeNFT(_tokenIDs[x]);\r\n\r\n        }\r\n\r\n    }\r\n        \r\n    function unstakeNFT(uint256 _tokenID) public {\r\n\r\n        uint256 gameEndingTime = gameStartTime + gameDuration + additionalTime;\r\n\r\n        require(gameEndingTime < block.timestamp, \"Game is still running. Unstake after game ends\");\r\n        alreadyStakedNFT[msg.sender] = false;   \r\n        isAquaFrog[msg.sender][gameIndex] = false;\r\n        isFireFrog[msg.sender][gameIndex] = false;     \r\n\r\n        require(nftOwner[_tokenID] == msg.sender, \"You are not the staker\");\r\n        nft.safeTransferFrom(address(this), msg.sender, _tokenID,\"0x00\");\r\n\r\n       // delete tokenStakedTime[msg.sender][_tokenID];\r\n        delete stakedTokenOwner[_tokenID]; \r\n        delete nftOwner[_tokenID];\r\n\r\n        for(uint256 i = 0; i < countofMyStakedTokens[msg.sender]; i++){\r\n            if(stakedTokens[msg.sender][i] == _tokenID){    \r\n            countofMyStakedTokens[msg.sender] = countofMyStakedTokens[msg.sender] - 1;\r\n\r\n\r\n                for(uint256 x = i; x < countofMyStakedTokens[msg.sender]; x++){                   \r\n                stakedTokens[msg.sender][x] = stakedTokens[msg.sender][x+1];\r\n                }\r\n\r\n                delete stakedTokens[msg.sender][countofMyStakedTokens[msg.sender]];\r\n\r\n                           \r\n            }\r\n        }\r\n    } \r\n\r\n    function batchUnstakeNFT(uint256[] memory _tokenIDs) public{\r\n\r\n        for(uint256 x = 0; x <  _tokenIDs.length ; x++){\r\n            unstakeNFT(_tokenIDs[x]);\r\n\r\n        }\r\n    }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4){\r\n    return this.onERC721Received.selector;\r\n    }\r\n\r\n    function setNFTContract(address _nftContract) public onlyOwner{\r\n    nft = IERC721(_nftContract);\r\n\r\n    }\r\n  \r\n    function setTokenContract(address _tokenContract) public onlyOwner{\r\n    token = IERC20(_tokenContract);\r\n\r\n    }\r\n    \r\n    function setDecimalNumber(uint256 _decimalNumber) public onlyOwner{\r\n    decimalNumber = _decimalNumber;\r\n\r\n    }\r\n\r\n    function setGameDuration(uint256 _gameDuration) public onlyOwner{\r\n    gameDuration = _gameDuration;\r\n\r\n    }\r\n\r\n    function setGameIndex(uint256 _gameIndex) public onlyOwner{\r\n    gameIndex = _gameIndex;\r\n\r\n    }\r\n        \r\n    function setWinnerPrizeRate(uint256 _winnerPrizeRate) public onlyOwner{\r\n    winnerPrizeRate = _winnerPrizeRate;\r\n\r\n    }\r\n\r\n    function setStakingEligibilityTime(uint256 _stakingEligibilityTime) public onlyOwner{\r\n    stakingEligibilityTime = _stakingEligibilityTime;\r\n\r\n    }\r\n    \r\n    function tokenWithdrawal() public onlyOwner{\r\n    token.transfer(msg.sender,token.balanceOf(address(this)));\r\n\r\n    }    \r\n  \r\n    function withdrawal() public onlyOwner {\r\n\r\n    (bool main, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    require(main);\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AquaFrogsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FireFrogsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"additionalTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyStakedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimWinningRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countOfOverallStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"countofMyStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"individualStakingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"individualStakingIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"individualStakingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isAquaFrog\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFireFrog\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myGameIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originalGameIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsClaimable1_map\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsClaimable2_map\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsClaimable_map\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalTime\",\"type\":\"uint256\"}],\"name\":\"setAdditionalTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_decimalNumber\",\"type\":\"uint256\"}],\"name\":\"setDecimalNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameDuration\",\"type\":\"uint256\"}],\"name\":\"setGameDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_additionalTime\",\"type\":\"uint256\"}],\"name\":\"setGameEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameIndex\",\"type\":\"uint256\"}],\"name\":\"setGameIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGameStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameStartTime\",\"type\":\"uint256\"}],\"name\":\"setGameStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContract\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEligibilityTime\",\"type\":\"uint256\"}],\"name\":\"setStakingEligibilityTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnerPrizeRate\",\"type\":\"uint256\"}],\"name\":\"setWinnerPrizeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFrog_AquaFrogs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFrog_FireFrogs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"stakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEligibilityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStakedDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerPrizeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FrogChainGame", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa9c3a25615923a4b91a71a2010585a93d64d14a2d371a9633a1556b34cfc3ac"}