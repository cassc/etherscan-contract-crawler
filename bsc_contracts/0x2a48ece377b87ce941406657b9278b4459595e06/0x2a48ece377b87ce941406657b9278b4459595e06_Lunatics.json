{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/* o/\r\n /$$                                      /$$$$$$  /$$$$$$$                               \r\n| $$                                     /$$__  $$| $$__  $$                              \r\n| $$       /$$   /$$ /$$$$$$$   /$$$$$$ | $$  \\__/| $$  \\ $$ /$$   /$$  /$$$$$$  /$$$$$$$ \r\n| $$      | $$  | $$| $$__  $$ |____  $$| $$      | $$$$$$$ | $$  | $$ /$$__  $$| $$__  $$\r\n| $$      | $$  | $$| $$  \\ $$  /$$$$$$$| $$      | $$__  $$| $$  | $$| $$  \\__/| $$  \\ $$\r\n| $$      | $$  | $$| $$  | $$ /$$__  $$| $$    $$| $$  \\ $$| $$  | $$| $$      | $$  | $$\r\n| $$$$$$$$|  $$$$$$/| $$  | $$|  $$$$$$$|  $$$$$$/| $$$$$$$/|  $$$$$$/| $$      | $$  | $$\r\n|________/ \\______/ |__/  |__/ \\_______/ \\______/ |_______/  \\______/ |__/      |__/  |__/\r\n                                                           \r\n*/\r\npragma solidity 0.8.15;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n \r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n \r\n    mapping (address => uint256) private _balances;\r\n \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n \r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 9;\r\n    }\r\n \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual returns (uint8) {\r\n        return 9;\r\n    }\r\n \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _beforeTokenTransfer(address(0), account, amount);\r\n \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        _beforeTokenTransfer(account, address(0), amount);\r\n \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n \r\n \r\ninterface IDividendPayingToken {\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n \r\n  function withdrawDividend() external;\r\n \r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmount\r\n  );\r\n \r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmount\r\n  );\r\n}\r\n \r\ninterface IDividendPayingTokenOptional {\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n \r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n \r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n \r\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional, Ownable {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n \r\n  uint256 constant internal magnitude = 2**128;\r\n \r\n  uint256 internal magnifiedDividendPerShare;\r\n  uint256 internal lastAmount;\r\n \r\n  address public dividendToken;\r\n \r\n \r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n  mapping(address => bool) internal _isAuth;\r\n \r\n  uint256 public totalDividendsDistributed;\r\n \r\n  modifier onlyAuth() {\r\n    require(_isAuth[msg.sender], \"Auth: caller is not the authorized\");\r\n    _;\r\n  }\r\n \r\n  constructor(string memory _name, string memory _symbol, address _token) ERC20(_name, _symbol) {\r\n    dividendToken = _token;\r\n    _isAuth[msg.sender] = true;\r\n  }\r\n \r\n  function setAuth(address account) external onlyOwner{\r\n      _isAuth[account] = true;\r\n  }\r\n \r\n \r\n  function distributeDividends(uint256 amount) public onlyOwner{\r\n    require(totalSupply() > 0);\r\n \r\n    if (amount > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (amount).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, amount);\r\n \r\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n    }\r\n  }\r\n \r\n  function withdrawDividend() public virtual override {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n \r\n  function setDividendTokenAddress(address newToken) external virtual onlyOwner{\r\n      dividendToken = newToken;\r\n  }\r\n \r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n \r\n      if(!success) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n        return 0;\r\n      }\r\n \r\n      return _withdrawableDividend;\r\n    }\r\n \r\n    return 0;\r\n  }\r\n \r\n \r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n \r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n \r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n \r\n \r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n \r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n \r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n \r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n \r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n \r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n \r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n \r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n \r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n}\r\n \r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n \r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n \r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n \r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n \r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n \r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n \r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n \r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n \r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n \r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n \r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n \r\n    function initialize(address, address) external;\r\n}\r\n \r\ninterface IUniswapV2Router01 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); \r\n    function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); \r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); \r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); \r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); \r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); \r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); \r\n    \r\n    \r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; \r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; \r\n \r\n}\r\n \r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n \r\n    function get(Map storage map, address key) internal view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n \r\n    function getIndexOfKey(Map storage map, address key) internal view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n \r\n    function getKeyAtIndex(Map storage map, uint index) internal view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n \r\n \r\n \r\n    function size(Map storage map) internal view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n \r\n    function set(Map storage map, address key, uint val) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n \r\n    function remove(Map storage map, address key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n \r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n \r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n \r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n \r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n \r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n \r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when multiplying INT256_MIN with -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n \r\n    int256 c = a * b;\r\n    require((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n \r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when dividing INT256_MIN by -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    require(!(a == - 2**255 && b == -1) && (b > 0));\r\n \r\n    return a / b;\r\n  }\r\n \r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n \r\n    return a - b;\r\n  }\r\n \r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n \r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    require(a >= 0);\r\n    return uint256(a);\r\n  }\r\n}\r\n \r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\ncontract _LUNADividendTracker is DividendPayingToken  {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n \r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n \r\n    mapping (address => bool) public excludedFromDividends;\r\n \r\n    mapping (address => uint256) public lastClaimTimes;\r\n \r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n \r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n \r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n \r\n    constructor(address _dividentToken) DividendPayingToken(\"Luna_Tracker\", \"Luna_Tracker\",_dividentToken) {\r\n    \tclaimWait = 60;\r\n        minimumTokenBalanceForDividends = 1_000_000 * (10**9);\r\n    }\r\n \r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"Luna_Tracker: No transfers allowed\");\r\n    }\r\n \r\n    function withdrawDividend() pure public override {\r\n        require(false, \"Luna_Tracker: withdrawDividend disabled. Use the 'claim' function on the main Luna contract.\");\r\n    }\r\n \r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n      dividendToken = newToken;\r\n    }\r\n \r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends, \"New mimimum balance for dividend cannot be same as current minimum balance\");\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**9);\r\n    }\r\n\r\n\r\n \r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \trequire(!excludedFromDividends[account],\"address already excluded from dividends\");\r\n    \texcludedFromDividends[account] = true;\r\n \r\n    \t_setBalance(account, 0);\r\n    \ttokenHoldersMap.remove(account);\r\n \r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n    function includeFromDividends(address account) external onlyOwner {\r\n        excludedFromDividends[account] = false;\r\n    }\r\n \r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"Luna_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"Luna_Tracker: Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n \r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n \r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n \r\n \r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n \r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n \r\n        iterationsUntilProcessed = -1;\r\n \r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n \r\n \r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n \r\n \r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n \r\n        lastClaimTime = lastClaimTimes[account];\r\n \r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n \r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n \r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n \r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n \r\n        return getAccount(account);\r\n    }\r\n \r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n \r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n \r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n \r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n \r\n    \tprocessAccount(account, true);\r\n    }\r\n \r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n \r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n \r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n \r\n    \tuint256 gasUsed = 0;\r\n \r\n    \tuint256 gasLeft = gasleft();\r\n \r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n \r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n \r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n \r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n \r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n \r\n    \t\titerations++;\r\n \r\n    \t\tuint256 newGasLeft = gasleft();\r\n \r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n \r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n \r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n \r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n \r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n \r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n \r\n    \treturn false;\r\n    }\r\n}\r\n\r\ncontract Lunatics is ERC20, Ownable {\r\n//library\r\n    using SafeMath for uint256;\r\n //custom\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    _LUNADividendTracker public _lunaDividendTracker;\r\n//address\r\n    address public uniswapV2Pair;\r\n    address public marketingWallet = 0xD179bF088A6c1B34936571bBE54F858AF3319aE4;\r\n    address public lunaBurnWallet = 0x6F3B3b903813679DDb21E4f2391638eE55ff3F89;\r\n    address public liqWallet = 0xEf949F14468a6F8d8e947e773F68e5a1Bb84d7C8; \r\n    address public _lunaDividendToken;\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public lunaAddress = 0x156ab3346823B651294766e23e6Cf87254d68962; // LUNA Wormhole\r\n //bool\r\n    bool public marketingSwapSendActive = true;\r\n    bool public lunaBurnSwapSendActive = true;\r\n    bool public LiqSwapSendActive = true;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public ProcessDividendStatus = true;\r\n    bool public _lunaDividendEnabled = true;\r\n    bool public marketActive;\r\n    bool public blockMultiBuys = true;\r\n    bool public limitSells = true;\r\n    bool public limitBuys = true;\r\n    bool public feeStatus = true;\r\n    bool public buyFeeStatus = true;\r\n    bool public sellFeeStatus = true;\r\n    bool public maxWallet = true;\r\n    bool private isInternalTransaction;\r\n\r\n //uint\r\n    uint256 public buySecondsLimit = 3;\r\n    uint256 public minimumWeiForTokenomics = 1 * 10**17; // 0.1 bnb\r\n    uint256 public maxBuyTxAmount; // 1% tot supply (constructor)\r\n    uint256 public maxSellTxAmount;// 1% tot supply (constructor)\r\n    uint256 public minimumTokensBeforeSwap = 10_000_000 *10**decimals();\r\n    uint256 public tokensToSwap = 10_000_000 * 10 **decimals();\r\n    uint256 public intervalSecondsForSwap = 20;\r\n    uint256 public LUNARewardsBuyFee = 2;\r\n    uint256 public LUNARewardsSellFee = 2;\r\n    uint256 public LUNABurnBuyFee = 2;\r\n    uint256 public LUNABurnSellFee = 2;\r\n    uint256 public marketingBuyFee = 3;\r\n    uint256 public marketingSellFee = 3;\r\n    uint256 public burnSellFee = 1;\r\n    uint256 public burnBuyFee = 1;\r\n    uint256 public liqBuyFee = 2;\r\n    uint256 public liqSellFee = 2;\r\n    uint256 public totalBuyFees = LUNARewardsBuyFee.add(marketingBuyFee).add(liqBuyFee).add(burnBuyFee).add(LUNABurnBuyFee);\r\n    uint256 public totalSellFees = LUNARewardsSellFee.add(marketingSellFee).add(liqSellFee).add(burnSellFee).add(LUNABurnSellFee);\r\n    uint256 public gasForProcessing = 300000;\r\n    uint256 public maxWalletAmount;// 1% tot supply (constructor)\r\n    uint256 private startTimeForSwap;\r\n    uint256 private marketActiveAt;\r\n    \r\n//struct\r\n    struct userData {\r\n        uint lastBuyTime;\r\n    }\r\n\r\n //mapping\r\n    mapping (address => bool) public premarketUser;\r\n    mapping (address => bool) public excludedFromFees;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => bool) public excludedFromMaxWallet;\r\n    mapping (address => userData) public userLastTradeData;\r\n //event\r\n    event Update_lunaDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    \r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n \r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event MarketingEnabledUpdated(bool enabled);\r\n    event _LUNADividendEnabledUpdated(bool enabled);\r\n    \r\n \r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n \r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n \r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n \r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n \r\n    event SendDividends(\r\n    \tuint256 amount\r\n    );\r\n \r\n    event Processed_lunaDividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n    event MarketingFeeCollected(uint256 amount);\r\n    event LunaBurnFeeCollected(uint256 amount);\r\n    event ExcludedFromMaxWalletChanged(address indexed user, bool state);\r\n\r\n \r\n    constructor() ERC20(\"Lunatics\", \"LunaT\") {\r\n        uint256 _total_supply = 100_000_000_000 * (10**9);\r\n    \t_lunaDividendToken = lunaAddress;\r\n\r\n        _lunaDividendTracker = new _LUNADividendTracker(_lunaDividendToken);\r\n    \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n \r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n \r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n \r\n        excludeFromDividend(address(_lunaDividendTracker));\r\n        excludeFromDividend(address(this));\r\n        excludeFromDividend(address(_uniswapV2Router));\r\n        excludeFromDividend(deadWallet);\r\n        excludeFromDividend(owner());\r\n \r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(liqWallet, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(deadWallet, true);\r\n        excludeFromFees(owner(), true);\r\n\r\n        excludedFromMaxWallet[marketingWallet] = true;\r\n        excludedFromMaxWallet[liqWallet] = true;\r\n        excludedFromMaxWallet[address(this)] = true;\r\n        excludedFromMaxWallet[deadWallet] = true;\r\n        excludedFromMaxWallet[owner()] = true;\r\n        excludedFromMaxWallet[address(_uniswapV2Pair)] = true;\r\n\r\n        premarketUser[owner()] = true;\r\n        premarketUser[marketingWallet] = true;\r\n        premarketUser[liqWallet] = true;\r\n        setAuthOnDividends(owner());\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(owner(), _total_supply);\r\n        maxSellTxAmount =  _total_supply / 100; // 1%\r\n        maxBuyTxAmount =  _total_supply / 100; // 1%\r\n        maxWalletAmount =  _total_supply / 100; // 1%\r\n        KKPunish(); // used at deploy and never called anymore\r\n    }\r\n    receive() external payable {\r\n  \t}\r\n    modifier sameSize(uint list1,uint list2) {\r\n        require(list1 == list2,\"lists must have same size\");\r\n        _;\r\n    }\r\n    function KKPunish() private {\r\n        LUNARewardsBuyFee = 20;\r\n        LUNARewardsSellFee = 20;\r\n        LUNABurnBuyFee = 20;\r\n        LUNABurnSellFee = 20;\r\n        marketingBuyFee = 20;\r\n        marketingSellFee = 20;\r\n        burnSellFee = 18;\r\n        burnBuyFee = 18;\r\n        liqBuyFee = 20;\r\n        liqSellFee = 20;\r\n        totalBuyFees = LUNARewardsBuyFee.add(marketingBuyFee).add(liqBuyFee).add(burnBuyFee).add(LUNABurnBuyFee);\r\n        totalSellFees = LUNARewardsSellFee.add(marketingSellFee).add(liqSellFee).add(burnSellFee).add(LUNABurnSellFee);\r\n    }\r\n    function prepareForLaunch() external onlyOwner {\r\n        LUNARewardsBuyFee = 2;\r\n        LUNARewardsSellFee = 2;\r\n        LUNABurnBuyFee = 2;\r\n        LUNABurnSellFee = 2;\r\n        marketingBuyFee = 3;\r\n        marketingSellFee = 3;\r\n        burnSellFee = 1;\r\n        burnBuyFee = 1;\r\n        liqBuyFee = 2;\r\n        liqSellFee = 2;\r\n        totalBuyFees = LUNARewardsBuyFee.add(marketingBuyFee).add(liqBuyFee).add(burnBuyFee).add(LUNABurnBuyFee);\r\n        totalSellFees = LUNARewardsSellFee.add(marketingSellFee).add(liqSellFee).add(burnSellFee).add(LUNABurnSellFee);\r\n    }\r\n    function setProcessDividendStatus(bool _active) external onlyOwner {\r\n        ProcessDividendStatus = _active;\r\n    }\r\n    function setLunaAddress(address newAddress) external onlyOwner {\r\n        lunaAddress = newAddress;\r\n    }\r\n    function setSwapAndLiquify(bool _state, uint _intervalSecondsForSwap, uint _minimumTokensBeforeSwap, uint _tokensToSwap) external onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        intervalSecondsForSwap = _intervalSecondsForSwap;\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap*10**decimals();\r\n        tokensToSwap = _tokensToSwap*10**decimals();\r\n        require(tokensToSwap <= minimumTokensBeforeSwap,\"You cannot swap more then the minimum amount\");\r\n        require(tokensToSwap <= totalSupply() / 1000,\"token to swap limited to 0.1% supply\");\r\n    }\r\n    function setSwapSend(bool _marketing, bool _liq, bool _burn) external onlyOwner {\r\n        marketingSwapSendActive = _marketing;\r\n        LiqSwapSendActive = _liq;\r\n        lunaBurnSwapSendActive = _burn;\r\n    }\r\n    function setMultiBlock(bool _state) external onlyOwner {\r\n        blockMultiBuys = _state;\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liqWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function setFeesDetails(bool _feeStatus, bool _buyFeeStatus, bool _sellFeeStatus) external onlyOwner {\r\n        feeStatus = _feeStatus;\r\n        buyFeeStatus = _buyFeeStatus;\r\n        sellFeeStatus = _sellFeeStatus;\r\n    }\r\n    function setMaxTxAmount(uint _buy, uint _sell) external onlyOwner {\r\n        maxBuyTxAmount = _buy * 10** decimals();\r\n        maxSellTxAmount = _sell * 10 ** decimals();\r\n        require(maxBuyTxAmount >= totalSupply() / 1000,\"maxBuyTxAmount should be at least 0.1% of total supply.\");\r\n        require(maxSellTxAmount >= totalSupply() / 1000,\"maxSellTxAmount should be at least 0.1% of total supply.\");\r\n    }\r\n    function setBuySecondLimits(uint buy) external onlyOwner {\r\n        buySecondsLimit = buy;\r\n    }\r\n    function activateMarket(bool active) external onlyOwner {\r\n        require(marketActive == false);\r\n        marketActive = active;\r\n        if (marketActive) {\r\n            marketActiveAt = block.timestamp;\r\n        }\r\n    }\r\n    function editLimits(bool buy, bool sell) external onlyOwner {\r\n        limitSells = sell;\r\n        limitBuys = buy;\r\n    }\r\n    function setMinimumWeiForTokenomics(uint _value) external onlyOwner {\r\n        minimumWeiForTokenomics = _value;\r\n    }\r\n\r\n    function editPreMarketUser(address _address, bool active) external onlyOwner {\r\n        premarketUser[_address] = active;\r\n    }\r\n    \r\n    function transferForeignToken(address _token, address _to, uint256 _value) external onlyOwner returns(bool _sent){\r\n        if(_value == 0) {\r\n            _value = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        _sent = IERC20(_token).transfer(_to, _value);\r\n    }\r\n   \r\n    function Sweep() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n    function edit_excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        excludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            excludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function setMarketingWallet(address payable wallet) external onlyOwner{\r\n        marketingWallet = wallet;\r\n    }\r\n    function setMaxWallet(bool state, uint max) public onlyOwner {\r\n        maxWallet = state;\r\n        maxWalletAmount = max * 10** decimals();\r\n        require(maxWalletAmount >= totalSupply() / 100,\"max wallet min amount: 1%\");\r\n    }\r\n    function editExcludedFromMaxWallet(address user, bool state) external onlyOwner {\r\n        excludedFromMaxWallet[user] = state;\r\n        emit ExcludedFromMaxWalletChanged(user,state);\r\n    }\r\n    function editMultiExcludedFromMaxWallet(address[] memory _address, bool[] memory _states) external onlyOwner sameSize(_address.length,_states.length) {\r\n        for(uint i=0; i< _states.length; i++){\r\n            excludedFromMaxWallet[_address[i]] = _states[i];\r\n            emit ExcludedFromMaxWalletChanged(_address[i],_states[i]);\r\n        }\r\n    }\r\n    function setliqWallet(address newWallet) external onlyOwner{\r\n        liqWallet = newWallet;\r\n    }\r\n    function setFees(uint256 _reward_buy, uint256 _liq_buy, uint256 _marketing_buy,\r\n        uint256 _reward_sell,uint256 _liq_sell,uint256 _marketing_sell,\r\n        uint256 _luna_burn_buy, uint256 _luna_burn_sell,uint256 _burn_buy, uint256 _burn_sell) external onlyOwner {\r\n        LUNARewardsBuyFee = _reward_buy;\r\n        LUNARewardsSellFee = _reward_sell;\r\n        LUNABurnBuyFee = _luna_burn_buy;\r\n        LUNABurnSellFee = _luna_burn_sell;\r\n        burnBuyFee = _burn_buy;\r\n        burnSellFee = _burn_sell;\r\n        liqBuyFee  = _liq_buy;\r\n        liqSellFee  = _liq_sell;\r\n        marketingBuyFee = _marketing_buy;\r\n        marketingSellFee = _marketing_sell;\r\n        totalBuyFees = LUNARewardsBuyFee.add(marketingBuyFee).add(liqBuyFee).add(burnBuyFee).add(LUNABurnBuyFee);\r\n        totalSellFees = LUNARewardsSellFee.add(marketingSellFee).add(liqSellFee).add(burnSellFee).add(LUNABurnSellFee);\r\n        totalBuyFees > 0 ? buyFeeStatus = true : buyFeeStatus = false;\r\n        totalSellFees > 0 ? sellFeeStatus = true : sellFeeStatus = false;\r\n        require(totalBuyFees + totalSellFees < 25,\"you cannot set fees more then 25%\");\r\n    }\r\n    function KKAirdrop(address[] memory _address, uint256[] memory _amount) external onlyOwner {\r\n        for(uint i=0; i< _amount.length; i++){\r\n            address adr = _address[i];\r\n            uint amnt = _amount[i] *10**decimals();\r\n            super._transfer(owner(), adr, amnt);\r\n            try _lunaDividendTracker.setBalance(payable(adr), balanceOf(adr)) {} catch {}\r\n        } \r\n    }\r\n    function swapTokens(uint256 minTknBfSwap) private {\r\n        isInternalTransaction = true;\r\n        uint256 LUNABalance = LUNARewardsSellFee * minTknBfSwap / 100;  \r\n        uint256 burnPart = burnSellFee * minTknBfSwap / 100;\r\n        uint256 liqPart = (liqSellFee * minTknBfSwap / 100)/2;\r\n        uint256 swapBalance = minTknBfSwap - LUNABalance - burnPart - (liqPart);\r\n\r\n        swapTokensForBNB(swapBalance);\r\n        super._transfer(address(this), lunaBurnWallet, burnPart);\r\n        uint256 balancez = address(this).balance;\r\n\r\n        if(marketingSwapSendActive && marketingSellFee > 0) {\r\n            uint256 marketingBnb = balancez.mul(marketingSellFee).div(totalSellFees);\r\n            (bool success,) = address(marketingWallet).call{value: marketingBnb}(\"\");\r\n            if(success) {emit MarketingFeeCollected(marketingBnb);}\r\n            balancez -= marketingBnb;\r\n        }\r\n        if(lunaBurnSwapSendActive  && LUNABurnSellFee > 0) {\r\n            uint256 lunaBurnBnb = balancez.mul(LUNABurnSellFee).div(totalSellFees);\r\n            (bool success,) = address(lunaBurnWallet).call{value: lunaBurnBnb}(\"\");\r\n            if(success) {emit LunaBurnFeeCollected(lunaBurnBnb);}\r\n            balancez -= lunaBurnBnb;\r\n        }\r\n        if(LiqSwapSendActive){\r\n            uint256 liqBnb = balancez.mul(liqSellFee).div(totalSellFees);\r\n            if(liqBnb > 5) { // failsafe if addLiq is too low\r\n                addLiquidity(liqPart, liqBnb);\r\n                balancez -= liqBnb;\r\n            }\r\n        }\r\n        if(ProcessDividendStatus){\r\n            if(balancez > 10000000000) {// 0,00000001 BNB\r\n                swapBNBforLuna(balancez);\r\n                uint256 DividendsPart = IERC20(_lunaDividendToken).balanceOf(address(this));\r\n                transferDividends(_lunaDividendToken, address(_lunaDividendTracker), _lunaDividendTracker, DividendsPart);\r\n                }\r\n        }\r\n        isInternalTransaction = false;\r\n    } \r\n  \tfunction prepareForPartherOrExchangeListing(address _partnerOrExchangeAddress) external onlyOwner {\r\n  \t    _lunaDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        excludeFromFees(_partnerOrExchangeAddress, true);\r\n        excludedFromMaxWallet[_partnerOrExchangeAddress] = true;\r\n  \t}\r\n  \tfunction updateMarketingWallet(address _newWallet) external onlyOwner {\r\n  \t    require(_newWallet != marketingWallet, \"Luna: The marketing wallet is already this address\");\r\n        excludeFromFees(_newWallet, true);\r\n        emit MarketingWalletUpdated(marketingWallet, _newWallet);\r\n  \t    marketingWallet = _newWallet;\r\n  \t}\r\n    function updateLiqWallet(address _newWallet) external onlyOwner {\r\n  \t    require(_newWallet != liqWallet, \"Luna: The liquidity Wallet is already this address\");\r\n        excludeFromFees(_newWallet, true);\r\n  \t    liqWallet = _newWallet;\r\n  \t}\r\n    function setAuthOnDividends(address account) public onlyOwner {\r\n        _lunaDividendTracker.setAuth(account);\r\n    }\r\n    function set_LUNADividendEnabled(bool _enabled) external onlyOwner {\r\n        _lunaDividendEnabled = _enabled;\r\n    } \r\n    function update_lunaDividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(_lunaDividendTracker), \"Luna: The dividend tracker already has that address\");\r\n        _LUNADividendTracker new_lunaDividendTracker = _LUNADividendTracker(payable(newAddress));\r\n        require(new_lunaDividendTracker.owner() == address(this), \"Luna: The new dividend tracker must be owned by the Luna token contract\");\r\n        new_lunaDividendTracker.excludeFromDividends(address(new_lunaDividendTracker));\r\n        new_lunaDividendTracker.excludeFromDividends(address(this));\r\n        new_lunaDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        new_lunaDividendTracker.excludeFromDividends(address(deadWallet));\r\n        emit Update_lunaDividendTracker(newAddress, address(_lunaDividendTracker));\r\n        _lunaDividendTracker = new_lunaDividendTracker;\r\n    }\r\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"Luna: The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        excludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n    function excludeFromDividend(address account) public onlyOwner {\r\n        _lunaDividendTracker.excludeFromDividends(address(account));\r\n    }\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"Luna: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private onlyOwner {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Luna: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        if(value) {\r\n            _lunaDividendTracker.excludeFromDividends(pair);\r\n        }\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\r\n        require(newValue != gasForProcessing, \"Luna: Cannot update gasForProcessing to same value\");\r\n        gasForProcessing = newValue;\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n    }\r\n    function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        _lunaDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        _lunaDividendTracker.updateClaimWait(claimWait);\r\n\r\n    }\r\n    function getLUNAClaimWait() external view returns(uint256) {\r\n        return _lunaDividendTracker.claimWait();\r\n    }\r\n    function getTotal_LUNADividendsDistributed() external view returns (uint256) {\r\n        return _lunaDividendTracker.totalDividendsDistributed();\r\n    }\r\n    function withdrawable_LUNADividendOf(address account) external view returns(uint256) {\r\n    \treturn _lunaDividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n\tfunction _lunaDividendTokenBalanceOf(address account) external view returns (uint256) {\r\n\t\treturn _lunaDividendTracker.balanceOf(account);\r\n\t}\r\n    function getAccount_LUNADividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return _lunaDividendTracker.getAccount(account);\r\n    }\r\n\tfunction getAccount_LUNADividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn _lunaDividendTracker.getAccountAtIndex(index);\r\n    }\r\n\tfunction processDividendTracker(uint256 gas) public onlyOwner {\r\n\t\t(uint256 lunaIterations, uint256 lunaClaims, uint256 lunaLastProcessedIndex) = _lunaDividendTracker.process(gas);\r\n\t\temit Processed_lunaDividendTracker(lunaIterations, lunaClaims, lunaLastProcessedIndex, false, gas, tx.origin);\r\n\t\r\n    }\r\n  \tfunction update_LUNADividendToken(address _newContract, uint gas) external onlyOwner {\r\n        _lunaDividendTracker.process(gas); //test\r\n  \t    _lunaDividendToken = _newContract;\r\n  \t    _lunaDividendTracker.setDividendTokenAddress(_newContract);\r\n  \t}\r\n    function claim() external {\r\n\t\t_lunaDividendTracker.processAccount(payable(msg.sender), false);\r\n\t\t\r\n    }\r\n    function getLast_LUNADividendProcessedIndex() external view returns(uint256) {\r\n    \treturn _lunaDividendTracker.getLastProcessedIndex();\r\n    }\r\n \r\n    \r\n \r\n    function getNumberOf_LUNADividendTokenHolders() external view returns(uint256) {\r\n        return _lunaDividendTracker.getNumberOfTokenHolders();\r\n    }\r\n \r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n    //tx utility vars\r\n        uint256 trade_type = 0;\r\n        bool overMinimumTokenBalance = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n    // market status flag\r\n        if(!marketActive) {\r\n            require(premarketUser[from],\"cannot trade before the market opening\");\r\n        }\r\n    // normal transaction\r\n        if(!isInternalTransaction) {\r\n        // tx limits & tokenomics\r\n            //buy\r\n            if(automatedMarketMakerPairs[from]) {\r\n                trade_type = 1;\r\n                // limits\r\n                if(!excludedFromFees[to]) {\r\n                    // tx limit\r\n                    if(limitBuys) {\r\n                        require(amount <= maxBuyTxAmount, \"maxBuyTxAmount Limit Exceeded\");\r\n                    }\r\n                    // multi-buy limit\r\n                    if(marketActiveAt + 30 < block.timestamp) {\r\n                        require(marketActiveAt + 7 < block.timestamp,\"You cannot buy at launch.\");\r\n                        require(userLastTradeData[to].lastBuyTime + buySecondsLimit <= block.timestamp,\"You cannot do multi-buy orders.\");\r\n                        userLastTradeData[to].lastBuyTime = block.timestamp;\r\n                    }\r\n                }\r\n            }\r\n            //sell\r\n            else if(automatedMarketMakerPairs[to]) {\r\n                trade_type = 2;\r\n                // liquidity generator for tokenomics\r\n                if (swapAndLiquifyEnabled && balanceOf(uniswapV2Pair) > 0 && sellFeeStatus) {\r\n                    if (overMinimumTokenBalance && startTimeForSwap + intervalSecondsForSwap <= block.timestamp) {\r\n                        startTimeForSwap = block.timestamp;\r\n                        // sell to bnb\r\n                        swapTokens(tokensToSwap);\r\n                    }\r\n                }\r\n                // limits\r\n                if(!excludedFromFees[from]) {\r\n                    // tx limit\r\n                    if(limitSells) {\r\n                        require(amount <= maxSellTxAmount, \"maxSellTxAmount Limit Exceeded\");\r\n                    }\r\n                }\r\n            }\r\n            // max wallet\r\n            if(maxWallet) {\r\n                require(balanceOf(to) + amount <= maxWalletAmount || excludedFromMaxWallet[to],\"maxWallet limit\");\r\n            }\r\n            // tokenomics\r\n        // fees management\r\n            if(feeStatus) {\r\n                // buy\r\n                if(trade_type == 1 && buyFeeStatus && !excludedFromFees[to]) {\r\n                \tuint txFees = amount * totalBuyFees / 100;\r\n                \tamount -= txFees;\r\n                    uint256 burnFees = txFees * burnBuyFee / totalBuyFees;\r\n                    super._transfer(from, address(this), txFees);\r\n                    super._transfer(address(this), deadWallet, burnFees);\r\n                }\r\n                //sell\r\n                else if(trade_type == 2 && sellFeeStatus && !excludedFromFees[from]) {\r\n                \tuint txFees = amount * totalSellFees / 100;\r\n                \tamount -= txFees;\r\n                    uint256 burnFees = txFees * burnSellFee / totalSellFees;\r\n                    super._transfer(from, address(this), txFees);\r\n                    super._transfer(address(this), deadWallet, burnFees);\r\n                }\r\n                // no wallet to wallet tax\r\n            }\r\n        }\r\n        // transfer tokens\r\n        super._transfer(from, to, amount);\r\n        //set dividends\r\n        try _lunaDividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try _lunaDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n        // auto-claims one time per transaction\r\n        if(!isInternalTransaction && ProcessDividendStatus) {\r\n\t    \tuint256 gas = gasForProcessing;\r\n\t    \ttry _lunaDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit Processed_lunaDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t} catch {}\r\n        }\r\n    }\r\n\r\n \r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n    }\r\n    function swapBNBforLuna(uint256 bnbAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = _lunaDividendToken;\r\n        uniswapV2Router.swapExactETHForTokens{value: bnbAmount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function transferDividends(address dividendToken, address dividendTracker, DividendPayingToken dividendPayingTracker, uint256 amount) private {\r\n        bool success = IERC20(dividendToken).transfer(dividendTracker, amount);\r\n        if (success) {\r\n            dividendPayingTracker.distributeDividends(amount);\r\n            emit SendDividends(amount);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ExcludedFromMaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LunaBurnFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MarketingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"Processed_lunaDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"Update_lunaDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"_LUNADividendEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"KKAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNABurnBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNABurnSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNARewardsBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LUNARewardsSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiqSwapSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProcessDividendStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lunaDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lunaDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"_lunaDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lunaDividendTracker\",\"outputs\":[{\"internalType\":\"contract _LUNADividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"activateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockMultiBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySecondsLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"editExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"}],\"name\":\"editLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_states\",\"type\":\"bool[]\"}],\"name\":\"editMultiExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"editPreMarketUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"edit_excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccount_LUNADividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccount_LUNADividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLUNAClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLast_LUNADividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOf_LUNADividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotal_LUNADividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSells\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunaBurnSwapSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lunaBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSwapSendActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWeiForTokenomics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"premarketUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerOrExchangeAddress\",\"type\":\"address\"}],\"name\":\"prepareForPartherOrExchangeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAuthOnDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"}],\"name\":\"setBuySecondLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reward_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liq_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liq_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_luna_burn_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_luna_burn_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn_sell\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_feeStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_buyFeeStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_sellFeeStatus\",\"type\":\"bool\"}],\"name\":\"setFeesDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setLunaAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinimumWeiForTokenomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMultiBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"setProcessDividendStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSecondsForSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_marketing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_liq\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_burn\",\"type\":\"bool\"}],\"name\":\"setSwapSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"set_LUNADividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setliqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateLiqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"update_LUNADividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"update_lunaDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastTradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawable_LUNADividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Lunatics", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b65ec74870450e8d8f4c98ea522470ea825b0efe02a9d267f547240d4843bbd3"}