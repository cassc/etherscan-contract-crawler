{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.3;\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\nabstract contract Context {\r\n        function _msgSender() internal view virtual returns (address payable) {\r\n            return payable(msg.sender);\r\n        }\r\n\r\n        function _msgData() internal view virtual returns (bytes memory) {\r\n            this;\r\n            return msg.data;\r\n        }\r\n    }\r\n\r\nlibrary SafeMath {\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n            return c;\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n\r\n        function sub(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n            return c;\r\n        }\r\n\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n            return c;\r\n        }\r\n\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n\r\n        function div(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            return c;\r\n        }\r\n\r\n        function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return mod(a, b, \"SafeMath: modulo by zero\");\r\n        }\r\n\r\n        function mod(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b != 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n\r\ninterface IERC20 {\r\n\r\n        function totalSupply() external view  returns (uint256);\r\n\r\n        function balanceOf(address account) external view returns (uint256);\r\n\r\n        function transfer(address recipient, uint256 amount)\r\n            external\r\n            returns (bool);\r\n\r\n        function allowance(address owner, address spender)\r\n            external\r\n            view\r\n            returns (uint256);\r\n\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n        );\r\n    }\r\n\r\ncontract DigiFortune is Context, IERC20 {\r\n        using SafeMath for uint256;\r\n        mapping(address => uint256) public _balances;\r\n        mapping(address => bool) private  blacklist;\r\n        mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n        uint256 public override totalSupply;\r\n        string public  name;\r\n        string public symbol;\r\n        uint8 public decimals;\r\n        address internal owner;\r\n        address [] internal blacklistAddresses;\r\n\r\n        constructor() {\r\n            name = \"DigiFortune\";\r\n            symbol = \"DIFO\";\r\n            totalSupply = 1000000000000e18;\r\n            decimals = 18;\r\n\r\n            owner = msg.sender;\r\n            _balances[owner] = totalSupply;\r\n            _paused = false;\r\n            emit Transfer(address(0), owner, totalSupply);\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n            require(msg.sender == owner, \"Only Call by Owner\");\r\n            _;\r\n        }\r\n\r\n        event DestroyedBlackFunds(address _blackListedUser, uint _balance);\r\n\r\n        event multiTransferTokens(address indexed sender, address indexed recipient, uint256 amount);\r\n\r\n        event BlackListed(address _user);\r\n\r\n        event RemovedBlackList(address _user);\r\n\r\n        event Paused(address account);\r\n\r\n        event Unpaused(address account);\r\n\r\n        bool private _paused;\r\n\r\n        function paused() public view virtual returns (bool) {\r\n            return _paused;\r\n        }\r\n\r\n        modifier whenNotPaused() {\r\n            require(!paused(), \"Pausable: paused\");\r\n            _;\r\n        }\r\n\r\n        modifier whenPaused() {\r\n            require(paused(), \"Pausable: not paused\");\r\n            _;\r\n        }\r\n\r\n        function _pause() internal virtual whenNotPaused {\r\n            _paused = true;\r\n            emit Paused(msg.sender);\r\n        }\r\n\r\n        function _unpause() internal virtual whenPaused {\r\n            _paused = false;\r\n            emit Unpaused(msg.sender);\r\n        }\r\n\r\n        function pauseContract() public onlyOwner {\r\n            _pause();\r\n        }\r\n\r\n        function unpauseContract() public onlyOwner {\r\n            _unpause();\r\n        }\r\n\r\n        function balanceOf(address account) public view override returns (uint256) {\r\n            return _balances[account];\r\n        }\r\n\r\n        function transfer(address recipient, uint256 amount)\r\n            public\r\n            virtual\r\n            override\r\n            whenNotPaused\r\n            returns (bool)\r\n        {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address _owner, address spender)\r\n            public\r\n            view\r\n            virtual\r\n            override\r\n            returns (uint256)\r\n        {\r\n            return _allowances[_owner][spender];\r\n        }\r\n\r\n        function approve(address spender, uint256 amount)\r\n            public\r\n            virtual\r\n            override\r\n            returns (bool)\r\n        {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) public virtual override whenNotPaused returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(\r\n                sender,\r\n                _msgSender(),\r\n                _allowances[sender][_msgSender()].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n            return true;\r\n        }\r\n\r\n        function increaseAllowance(address spender, uint256 addedValue)\r\n            public\r\n            virtual\r\n            whenNotPaused\r\n            returns (bool)\r\n        {\r\n            _approve(\r\n                _msgSender(),\r\n                spender,\r\n                _allowances[_msgSender()][spender].add(addedValue)\r\n            );\r\n            return true;\r\n        }\r\n\r\n        function decreaseAllowance(address spender, uint256 subtractedValue)\r\n            public\r\n            virtual\r\n            whenNotPaused\r\n            returns (bool)\r\n        {\r\n            _approve(\r\n                _msgSender(),\r\n                spender,\r\n                _allowances[_msgSender()][spender].sub(\r\n                    subtractedValue,\r\n                    \"ERC20: decreased allowance below zero\"\r\n                )\r\n            );\r\n            return true;\r\n        }\r\n \r\n        function _transfer(\r\n        address sender,\r\n        address recipient,\r\n          uint256 amount\r\n        ) internal virtual whenNotPaused {\r\n          require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n          require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n          require(blacklist[sender] == false, \"you are blacklisted\");\r\n          require(blacklist[recipient] == false, \"you are blacklisted\");\r\n          _beforeTokenTransfer(sender, recipient, amount);\r\n          _balances[sender] = _balances[sender].sub(\r\n              amount,\r\n           \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n          _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n          emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n        function _approve  (\r\n            address _owner,\r\n            address spender,\r\n            uint256 amount\r\n        ) internal virtual whenNotPaused {\r\n            require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n            _allowances[_owner][spender] = amount;\r\n            emit Approval(_owner, spender, amount);\r\n        }\r\n\r\n        function _mint(address account, uint256 amount) internal onlyOwner {\r\n            require(account != address(0), \"ERC20: mint to the zero address\");\r\n            _balances[account] = _balances[account].add(amount);\r\n            totalSupply = totalSupply.add(amount); \r\n            emit Transfer(address(0), account, amount);\r\n        }\r\n\r\n        function multiTransfer(address[] calldata recipients, uint256 amount)\r\n            external\r\n            onlyOwner\r\n            whenNotPaused\r\n        {\r\n            require(recipients.length > 0, \"Recipient list is empty\");\r\n\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                require(recipients[i] != address(0), \"Invalid recipient address\");\r\n                require(!blacklist[recipients[i]], \"Recipient is blacklisted\");\r\n\r\n                _transfer(_msgSender(), recipients[i], amount);\r\n                emit multiTransferTokens(_msgSender(), recipients[i], amount);\r\n            }\r\n        }\r\n\r\n        function _burn(address account, uint256 value) internal whenNotPaused onlyOwner {\r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n            totalSupply = totalSupply.sub(value);\r\n            _balances[account] = _balances[account].sub(value);\r\n            emit Transfer(account, address(0), value);\r\n        }\r\n\r\n        function transferownership(address _newonwer)\r\n            public\r\n            whenNotPaused\r\n            onlyOwner\r\n        {\r\n            owner = _newonwer;\r\n        }\r\n    \r\n        function addToBlackList(address[] calldata accounts) external onlyOwner whenNotPaused {\r\n         for (uint256 i = 0; i < accounts.length; i++) {\r\n         address account = accounts[i];\r\n         require(!isBlacklisted(account), \"Address is already blacklisted\");\r\n         blacklistAddresses.push(account);\r\n         blacklist[account] = true;\r\n         emit BlackListed(account);\r\n\r\n        }\r\n\r\n        } \r\n\r\n        function isBlacklisted(address account) public onlyOwner view returns (bool) {\r\n        for (uint256 i = 0; i < blacklistAddresses.length; i++) {\r\n            if (blacklistAddresses[i] == account) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n\r\n        }\r\n\r\n        function removefromblacklist() public onlyOwner whenNotPaused {\r\n            for (uint256 i = 0; i < blacklistAddresses.length; i++) {\r\n                blacklist[blacklistAddresses[i]] = false;\r\n            }\r\n            delete blacklistAddresses;\r\n        }\r\n\r\n        function destroyBlackFunds (address _blackListedUser) public onlyOwner {\r\n            require(blacklist[_blackListedUser]);\r\n            uint dirtyFunds = balanceOf(_blackListedUser);\r\n            _balances[_blackListedUser] = 0;\r\n            totalSupply -= dirtyFunds;\r\n            emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\r\n        }\r\n\r\n        function withDrawBNB(uint256 _amount) public onlyOwner whenNotPaused {\r\n            payable(msg.sender).transfer(_amount);\r\n        }\r\n\r\n        function getTokens(uint256 _amount) public onlyOwner whenNotPaused {\r\n            _transfer(address(this), msg.sender, _amount);\r\n        }\r\n\r\n        function _beforeTokenTransfer(\r\n            address from,\r\n            address to,\r\n            uint256 amount\r\n        ) internal virtual {}\r\n\r\n        function mint(address to, uint256 amount) public onlyOwner {\r\n            _mint(to, amount);\r\n        }\r\n\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n       }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"BlackListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multiTransferTokens\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removefromblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newonwer\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DigiFortune", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01723a7653011e49b0255a81237e57be01f364c86af71fae4efeecf564e5fae0"}