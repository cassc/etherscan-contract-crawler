{"SourceCode": "// File: contracts\\baseLibrary.sol\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPancakeSwapPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeSwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeSwapFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract IERC20Metadata is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface _MULTIFI_SERVICES {\r\n    function setMultifiData(uint256 initBlock) external;\r\n\r\n    function afterRebase() external;\r\n}\r\n\r\ninterface _MULTIFI_SERVICE {\r\n    function setServiceData(address multifiAddress) external;\r\n}\r\n\r\ninterface _MULTIFI {\r\n    function getGonsPerFragment() external view returns (uint256);\r\n}\r\n\r\ncontract MULTIFI is IERC20Metadata, Ownable, _MULTIFI {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event ReferralReward(address _address, uint256 amount);\r\n    event ReferralRewardBNB(address _address, uint256 amount);\r\n    event SetReferral(address _address, address _referral);\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    IPancakeSwapPair public pairContract;\r\n    mapping(address => bool) _isFeeExempt;\r\n    uint256 internal constant DECIMALS = 10;\r\n    uint256 constant MAX_UINT256 = ~uint256(0);\r\n    uint8 constant RATE_DECIMALS = 7;\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY =\r\n        1.4 * 10**6 * 10**DECIMALS;\r\n    uint256 public constant treasuryFee = 25;\r\n    uint256 public constant insuranceFundFee = 25;\r\n    uint256 public constant lotteryFee = 10;\r\n    uint256 public constant referralFee = 40;\r\n    uint256 public constant noReferralFee = 100;\r\n    uint256 public totalFee =\r\n        treasuryFee.add(insuranceFundFee).add(lotteryFee).add(referralFee);\r\n    uint256 public constant feeDenominator = 1000;\r\n    address public treasuryReceiver =\r\n        0xe4AC1174394c7C91Bc475dFEDed8359bC1107ADD;\r\n    address public insuranceFundReceiver =\r\n        0x1EEC091E91A5f1bfF9EA6fD4Cf84A59eF7198ADD;\r\n    address public serviceHolder = 0x000000000000000000000000000000000BADbaBe;\r\n    address public lotteryReceiver = 0x000000000000000000000000000000000001babe;\r\n    address public referralHolder = 0x000000000000000000000000000000000002BaBe;\r\n    address public pairAddress;\r\n    IPancakeSwapRouter public router;\r\n    address public pair;\r\n    bool public inSwap = false;\r\n    uint256 private constant TOTAL_GONS =\r\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = 1.5 * 10**10 * 10**DECIMALS;\r\n    bool public _autoRebase = false;\r\n    bool public _autoSwapBack = false;\r\n    uint256 public _rebaseStartTime;\r\n    uint256 public _lastAddLiquidityTime;\r\n    uint256 public _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 public _rebaseEpoch = 0;\r\n    uint256 public stepReferralAmount = 10**18;\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => bool) public countHolders;\r\n    mapping(address => uint256) public referralBalance;\r\n    mapping(address => mapping(address => uint256)) public referralFrom;\r\n    mapping(address => uint256) public referralLv;\r\n    mapping(address => address) public referralAddress;\r\n    uint256 _initBlock;\r\n    uint256 public numberOfBlocksPerLotteryCycle = 28800;\r\n    uint256 holders = 3;\r\n    bool _startRebase = false;\r\n    bool isSetServicesContract = false;\r\n    _MULTIFI_SERVICES servicesContract;\r\n\r\n    constructor() IERC20Metadata(\"MULTIFI\", \"MLM\", uint8(DECIMALS)) Ownable() {\r\n        router = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IPancakeSwapFactory(router.factory()).createPair(\r\n            router.WETH(),\r\n            address(this)\r\n        );\r\n        _allowedFragments[address(this)][address(router)] = MAX_UINT256;\r\n        pairAddress = pair;\r\n        pairContract = IPancakeSwapPair(pair);\r\n        _gonBalances[serviceHolder] = TOTAL_GONS.div(7).mul(2);\r\n        _gonBalances[treasuryReceiver] = TOTAL_GONS.sub(\r\n            _gonBalances[serviceHolder]\r\n        );\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        _rebaseStartTime = block.timestamp;\r\n        _lastAddLiquidityTime = block.timestamp;\r\n        _isFeeExempt[treasuryReceiver] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _initBlock = block.number;\r\n        emit Transfer(\r\n            address(0x0),\r\n            treasuryReceiver,\r\n            _gonBalances[treasuryReceiver].div(_gonsPerFragment)\r\n        );\r\n        emit Transfer(\r\n            address(0x0),\r\n            serviceHolder,\r\n            _gonBalances[serviceHolder].div(_gonsPerFragment)\r\n        );\r\n    }\r\n\r\n    function startRebase() external onlyOwner {\r\n        require(!_startRebase);\r\n        _startRebase = true;\r\n        _rebaseStartTime = block.timestamp;\r\n        _autoRebase = true;\r\n    }\r\n\r\n    function getGonsPerFragment() external view override returns (uint256) {\r\n        return _gonsPerFragment;\r\n    }\r\n\r\n    function setServicesContract(address _contract) external onlyOwner {\r\n        require(!isSetServicesContract && isContract(_contract));\r\n        servicesContract = _MULTIFI_SERVICES(_contract);\r\n        servicesContract.setMultifiData(_initBlock);\r\n        _gonBalances[address(servicesContract)] = _gonBalances[serviceHolder];\r\n        _gonBalances[serviceHolder] = 0;\r\n        isSetServicesContract = true;\r\n    }\r\n\r\n    function setStepReferralAmount(uint256 amount) public onlyOwner {\r\n        require(amount > 0);\r\n        stepReferralAmount = amount;\r\n    }\r\n\r\n    function _rebase() internal {\r\n        if (!shouldRebase()) return;\r\n        if (inSwap) return;\r\n        uint256 rebaseRate;\r\n        uint256 deltaTimeFromInit = block.timestamp - _rebaseStartTime;\r\n        uint256 epoch = currentRebaseEpoch();\r\n        uint256 times = epoch - _rebaseEpoch;\r\n        if (deltaTimeFromInit <= (365 days)) {\r\n            rebaseRate = 2500;\r\n        } else if (deltaTimeFromInit >= (5 * 365 days)) {\r\n            rebaseRate = 14;\r\n        } else {\r\n            rebaseRate = 20;\r\n        }\r\n        for (uint256 i = 0; i < times; i++) {\r\n            _totalSupply = _totalSupply\r\n                .mul((10**RATE_DECIMALS).add(rebaseRate))\r\n                .div(10**RATE_DECIMALS);\r\n        }\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        pairContract.sync();\r\n        _rebaseEpoch = epoch;\r\n        if (isSetServicesContract) {\r\n            servicesContract.afterRebase();\r\n        }\r\n        emit LogRebase(epoch, _totalSupply);\r\n    }\r\n\r\n    function currentRebaseEpoch() public view returns (uint256) {\r\n        return (block.timestamp - _rebaseStartTime).div(15 minutes);\r\n    }\r\n\r\n    function timeToNextEpoch() public view returns (uint256) {\r\n        return\r\n            _rebaseStartTime +\r\n            (currentRebaseEpoch() + 1).mul(15 minutes) -\r\n            block.timestamp;\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return\r\n            _startRebase &&\r\n            _autoRebase &&\r\n            (_totalSupply < MAX_SUPPLY) &&\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            currentRebaseEpoch() > _rebaseEpoch;\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        override\r\n        validRecipient(to)\r\n        returns (bool)\r\n    {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function manualRebase() external {\r\n        require(shouldRebase());\r\n        _rebase();\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != MAX_UINT256) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n                msg.sender\r\n            ].sub(value, \"\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n        return true;\r\n    }\r\n\r\n    function addReferral(address _referral) external {\r\n        require(\r\n            referralAddress[msg.sender] == address(0) &&\r\n                !isContract(_referral) &&\r\n                _referral != msg.sender &&\r\n                referralLv[_referral] > 0\r\n        );\r\n        bool flag = true;\r\n        address _address = _referral;\r\n        for (uint256 i = 0; i < 15; i++) {\r\n            if (referralAddress[_address] == address(0)) {\r\n                break;\r\n            } else if (referralAddress[_address] == msg.sender) {\r\n                flag = false;\r\n                break;\r\n            } else {\r\n                _address = referralAddress[_address];\r\n            }\r\n        }\r\n        require(flag);\r\n        referralAddress[msg.sender] = _referral;\r\n        emit SetReferral(msg.sender, _referral);\r\n    }\r\n\r\n    function referralBalanceOf(address _who) public view returns (uint256) {\r\n        return referralBalance[_who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function claimReferralRewardBNB() external {\r\n        require(referralBalance[msg.sender] > 0);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = msg.sender.balance;\r\n        _gonBalances[referralHolder] = _gonBalances[referralHolder].sub(\r\n            referralBalance[msg.sender]\r\n        );\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            referralBalance[msg.sender]\r\n        );\r\n        router.swapExactTokensForETH(\r\n            referralBalance[msg.sender].div(_gonsPerFragment),\r\n            0,\r\n            path,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n        referralBalance[msg.sender] = 0;\r\n        emit ReferralRewardBNB(\r\n            msg.sender,\r\n            msg.sender.balance.sub(balanceBefore)\r\n        );\r\n    }\r\n\r\n    function lvOf(address _who) external view returns (uint256) {\r\n        return referralLv[_who];\r\n    }\r\n\r\n    function claimReferralReward() external {\r\n        require(referralBalance[msg.sender] > 0);\r\n        _gonBalances[referralHolder] = _gonBalances[referralHolder].sub(\r\n            referralBalance[msg.sender]\r\n        );\r\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].add(\r\n            referralBalance[msg.sender]\r\n        );\r\n        reCheckLv(msg.sender, true);\r\n        emit ReferralReward(\r\n            msg.sender,\r\n            referralBalance[msg.sender].div(_gonsPerFragment)\r\n        );\r\n        referralBalance[msg.sender] = 0;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(!blacklist[sender] && !blacklist[recipient]);\r\n        if (!countHolders[sender]) {\r\n            countHolders[sender] = true;\r\n            holders = holders.add(1);\r\n        }\r\n        if (!countHolders[recipient]) {\r\n            countHolders[recipient] = true;\r\n            holders = holders.add(1);\r\n        }\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n        _rebase();\r\n\r\n        if (shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\r\n            ? takeFee(sender, recipient, gonAmount)\r\n            : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(\r\n            gonAmountReceived\r\n        );\r\n        reCheckLv(sender, false);\r\n        reCheckLv(recipient, true);\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function reCheckLv(address _address, bool isBuyer) internal {\r\n        uint256 price = tokenStepPrice();\r\n        uint256 balance = balanceOf(_address);\r\n        uint256 lv = price != 0 ? balance.div(price) : 0;\r\n        if (isBuyer) {\r\n            if (lv > referralLv[_address]) {\r\n                referralLv[_address] = lv;\r\n            }\r\n        } else {\r\n            referralLv[_address] = lv;\r\n        }\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 gonAmount\r\n    ) internal returns (uint256) {\r\n        address feeAddress = sender;\r\n        if (sender == pair) {\r\n            feeAddress = recipient;\r\n        }\r\n        uint256 _totalFee = totalFee;\r\n        address _referralAddress = referralAddress[feeAddress];\r\n        address _address = feeAddress;\r\n        uint256 referralGon = gonAmount.mul(referralFee).div(feeDenominator);\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\r\n            gonAmount.mul(treasuryFee.add(insuranceFundFee)).div(feeDenominator)\r\n        );\r\n        address _service = lotteryReceiver;\r\n        if (isSetServicesContract) {\r\n            _service = address(servicesContract);\r\n        }\r\n        _gonBalances[_service] = _gonBalances[_service].add(\r\n            gonAmount.mul(lotteryFee).div(feeDenominator)\r\n        );\r\n        uint256 _referralGon = referralGon;\r\n        if (_referralAddress == address(0)) {\r\n            _totalFee = _totalFee.add(noReferralFee);\r\n            referralGon = gonAmount.mul(referralFee.add(noReferralFee)).div(\r\n                feeDenominator\r\n            );\r\n            _referralGon = referralGon;\r\n        } else {\r\n            uint256 count = 1;\r\n            uint256 _lv = referralLv[_referralAddress];\r\n            uint256 _halfReferralGon = _referralGon.div(2);\r\n            while (\r\n                _referralAddress != address(0) &&\r\n                count < 16 &&\r\n                _lv >= count &&\r\n                _halfReferralGon > 0\r\n            ) {\r\n                referralBalance[_referralAddress] = referralBalance[\r\n                    _referralAddress\r\n                ].add(_halfReferralGon);\r\n                referralFrom[_referralAddress][_address] = referralFrom[\r\n                    _referralAddress\r\n                ][_address].add(_halfReferralGon);\r\n                count = count.add(1);\r\n                _address = _referralAddress;\r\n                _referralAddress = referralAddress[_referralAddress];\r\n                _lv = referralLv[_referralAddress];\r\n                _referralGon = _referralGon.sub(_halfReferralGon);\r\n                _halfReferralGon = _halfReferralGon.div(2);\r\n            }\r\n        }\r\n        _gonBalances[referralHolder] = _gonBalances[referralHolder].add(\r\n            referralGon\r\n        );\r\n        if (_referralGon > 0) {\r\n            referralBalance[treasuryReceiver] = referralBalance[\r\n                treasuryReceiver\r\n            ].add(_referralGon);\r\n        }\r\n        uint256 feeAmount = gonAmount.div(feeDenominator).mul(_totalFee);\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    function tokenStepPrice() public view returns (uint256) {\r\n        (uint256 a0, uint256 a1, ) = pairContract.getReserves();\r\n        uint256 price = 0;\r\n        if (pairContract.token0() == address(this)) {\r\n            price = a1 != 0 ? a0.mul(stepReferralAmount).div(a1) : 0;\r\n        } else {\r\n            price = a0 != 0 ? a1.mul(stepReferralAmount).div(a0) : 0;\r\n        }\r\n        return price;\r\n    }\r\n\r\n    function _sellToken(uint256 amountToSwap) internal returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        return address(this).balance.sub(balanceBefore);\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        uint256 amountToSwap = _gonBalances[address(this)].div(\r\n            _gonsPerFragment\r\n        );\r\n        if (amountToSwap == 0) {\r\n            return;\r\n        }\r\n        uint256 totalSwapBackFee = treasuryFee.add(insuranceFundFee);\r\n        uint256 amountETH = _sellToken(amountToSwap);\r\n        uint256 treasuryETH = amountETH.mul(treasuryFee).div(totalSwapBackFee);\r\n        (bool success, ) = payable(treasuryReceiver).call{\r\n            value: treasuryETH,\r\n            gas: 30000\r\n        }(\"\");\r\n        (success, ) = payable(insuranceFundReceiver).call{\r\n            value: amountETH.sub(treasuryETH),\r\n            gas: 30000\r\n        }(\"\");\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (pair == from || pair == to) && !_isFeeExempt[from];\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return _autoSwapBack && !inSwap && msg.sender != pair;\r\n    }\r\n\r\n    function setAutoRebase(bool _flag) external onlyOwner {\r\n        _autoRebase = _flag;\r\n    }\r\n\r\n    function setAutoSwapBack(bool _flag) external onlyOwner {\r\n        _autoSwapBack = _flag;\r\n    }\r\n\r\n    function allowance(address owner_, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n            spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return TOTAL_GONS.div(_gonsPerFragment);\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _treasuryReceiver,\r\n        address _insuranceFundReceiver\r\n    ) external onlyOwner {\r\n        treasuryReceiver = _treasuryReceiver;\r\n        insuranceFundReceiver = _insuranceFundReceiver;\r\n    }\r\n\r\n    function setWhitelist(address _addr) external onlyOwner {\r\n        _isFeeExempt[_addr] = true;\r\n    }\r\n\r\n    function setBotBlacklist(address _botAddress, bool _flag)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(isContract(_botAddress));\r\n        blacklist[_botAddress] = _flag;\r\n    }\r\n\r\n    function setPairAddress(address _pairAddress) public onlyOwner {\r\n        pairAddress = _pairAddress;\r\n    }\r\n\r\n    function setLP(address _address) external onlyOwner {\r\n        pairContract = IPancakeSwapPair(_address);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"SetReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferralRewardBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"countHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRebaseEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGonsPerFragment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"lvOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfBlocksPerLotteryCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"referralBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralLv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insuranceFundReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setServicesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setStepReferralAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stepReferralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeToNextEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStepPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MULTIFI", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fc61c987b68cd9bdd7d128d4afb0680718b27934348e61d3ec077da27593ebe3"}