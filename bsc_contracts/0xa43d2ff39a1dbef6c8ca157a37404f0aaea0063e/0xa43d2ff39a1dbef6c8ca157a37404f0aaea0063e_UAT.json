{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface Ipool{\r\n    function invite_reward(address user , uint256 amount)external view;\r\n}\r\n\r\n\r\ncontract UAT is IERC20 , Ownable{\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    uint256 public _totalSupply;\r\n    uint8 public _decimals;\r\n    string public _symbol;\r\n    string public _name;\r\n\r\n    bool public open_swap;\r\n    //\u6c60\u5b50\u5730\u5740\r\n    address public uniswapV2Pair;\r\n    bool public isBuy; //\u662f\u5426\u5728\u4e70\r\n    address public constant usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n    //\u6ce8\u610f\u6d4b\u8bd5\u7f51\u548c\u4e3b\u7f51\u7684\u5730\u5740\r\n    //0x6725F303b657a9451d8BA641348b6761A6CC7a17 \u6d4b\u8bd5\u7f51\u7edc\r\n    //0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73 \u6b63\u5f0f\u7f51\u7edc\r\n    address public constant factory_Pancake = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n    //\u6ce8\u610f\u6d4b\u8bd5\u7f51\u548c\u4e3b\u7f51\u7684\u5730\u5740\r\n    //0x9a489505a00cE272eAa5e07Dba6491314CaE3796 \u6d4b\u8bd5\u7f51\u7edc\r\n    //0x10ED43C718714eb63d5aA57B78B54704E256024E\u6b63\u5f0f\u7f51\r\n    address public constant router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    //\u4e00\u7ea7\u9080\u8bf7\u5730\u5740\r\n    mapping(address => address) public first_invite_address;\r\n    //\u4e8c\u7ea7\u9080\u8bf7\u5730\u5740\r\n    mapping(address => address) public second_invite_address;\r\n    //\u5c0f\u8282\u70b9\r\n    mapping(address => bool) public small_node;\r\n    //\u4e2d\u8282\u70b9\r\n    mapping(address => bool) public middle_node;\r\n    //\u5927\u8282\u70b9\r\n    mapping(address => bool) public big_node;\r\n    //\u7528\u6237\u4e00\u7ea7\u4e8c\u7ea7\u5f53\u524dLP\u7684\u603b\u548c ,\u4e0b\u7ea7\u52a0\u6c60\u5b50\u7d2f\u52a0\uff0c\u51cf\u6c60\u5b50\u5c31\u51cf\r\n    mapping(address => uint256) public group_lp;\r\n    //\u767d\u540d\u5355\u5730\u5740\r\n    mapping(address => bool) public white_address;\r\n    //\u65e0\u5356\u51fa\u9650\u5236\u5730\u5740\r\n    //mapping(address => bool) public no_limit_address;\r\n    mapping(address => bool)public no_feeAddress;\r\n\r\n    //\u7b2c\u4e00\u4e2a\u5408\u7ea6\u5956\u52b1\u5730\u5740\r\n    address public first_reward_address;\r\n    //\u7b2c\u4e8c\u4e2a\u5408\u7ea6\u5956\u52b1\u5730\u5740\r\n    address public second_reward_address;\r\n\r\n    //\u4ea4\u6613\u624b\u7eed\u8d39 3%\r\n    uint256 public fee = 3;\r\n\r\n    //\u5f00\u59cb\u4ea4\u6613\u65f6\u95f4\u6233\r\n    uint256 public start_timestamp = 1689091200;  //2023 7-12 0 0 0\r\n\r\n    //\u9500\u6bc1\u6570\u91cf\r\n    uint256 public destory_amount;\r\n\r\n    //\u6536\u624b\u7eed\u8d39\u5730\u5740\r\n    address public address_1 = 0xEe766895476ab758b2D0c48c787317da5264a398;\r\n    address public address_2 = 0x3c851a324bb2D06C0B73A2e8F7609e34E5aC21D5;\r\n    address public address_3 = 0x019EAf29f9a843e64f9e51f39FA4317C4bD2236C;\r\n    \r\n\r\n\r\n    //\u9ed1\u6d1e\u5730\u5740\r\n    address public constant blackAddress = 0x0000000000000000000000000000000000000000;\r\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct snap{\r\n        //\u5929\u6570\uff08\u7528\u6765\u5237\u65b0\uff09\r\n        uint256 day;\r\n        //\u5f53\u524d\u6700\u5927\u5356\u51fa\u6570\u91cf\r\n        uint256 max_amount;\r\n        //\u5f53\u524d\u7d2f\u52a0\u5356\u51fa\u6570\u91cf\r\n        uint256 amount;\r\n    }\r\n    //\u7528\u6237\u51fa\u552e\u4fe1\u606f\r\n    mapping(address => snap) public user_snap;\r\n\r\n\r\n    event Level(uint256 level);\r\n\r\n    constructor(){\r\n        //IUniswapV2Router01 _uniswapV2Router = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _uniswapV2Pair = IUniswapV2Factory(factory_Pancake).createPair(address(this), usdtAddress);\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        //\u5bf9router\u5408\u7ea6\u8f6croc\u8fdb\u884c\u6388\u6743\r\n        _allowances[address(this)][address(router)] = uint256(~uint256(0));\r\n\r\n        no_feeAddress[address(this)] = true;\r\n        _name = \"UAT Token\";\r\n        _symbol = \"UAT\";\r\n        _decimals = 18;\r\n        //\u521d\u59cb\u53d1\u884c\u4e00\u767e\u4ebf\uff0c\u5168\u90e8\u7ed9\u9879\u76ee\u65b9\u5730\u5740\r\n        _totalSupply = 10000000000 * 10**uint256(_decimals);\r\n        //_balances[ItemAddress] = _totalSupply;\r\n        _balances[msg.sender] = _totalSupply;\r\n        // \u521d\u59cb\u7ed1\u5b9a\u4e0a\u7ea7\r\n        first_invite_address[msg.sender] = deadAddress;\r\n\r\n        isBuy = true;\r\n        open_swap = false;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n        /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _uid) external override view returns (uint256) {\r\n        return _balances[_uid];\r\n    }\r\n\r\n    function transfer(\r\n        address token,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public onlyOwner {\r\n        IERC20(token).transfer(recipient, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        override\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address sender,\r\n        address receipt,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(receipt != address(0), \"ERC20: transfer to the zero address\");\r\n        require(sender != receipt , \"cant transfer youeself\");\r\n        if(amount == 0){\r\n            return true;\r\n        }\r\n     \r\n        uint256 fee_amount = amount * fee / 100;\r\n        if (!no_feeAddress[sender]){\r\n            amount = amount - fee_amount;\r\n        }\r\n\r\n        if(sender == uniswapV2Pair){\r\n            //require(first_invite_address[receipt] != blackAddress , \"not allow\");\r\n            require(open_swap , \"not open\");\r\n            //\u5206\u5e01\r\n            uint256 roc_amount = fee_amount / 3;\r\n            _balances[address_1] += roc_amount;\r\n            _balances[sender] = _balances[sender] - roc_amount;\r\n            emit Transfer(sender, address_1, roc_amount);\r\n            _balances[address_2] += roc_amount;\r\n            _balances[sender] = _balances[sender] -  roc_amount;\r\n            emit Transfer(sender, address_2, roc_amount);\r\n            _balances[address_3] += fee_amount - 2 * roc_amount;\r\n            _balances[sender] = _balances[sender] - fee_amount + 2 * roc_amount;\r\n            emit Transfer(sender, address_3, fee_amount - 2 * roc_amount);\r\n            if (isBuy){\r\n                //\r\n                (uint256 token0_amount , uint256 token1_amount , ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n                address token0 = IUniswapV2Pair(uniswapV2Pair).token0();\r\n                address token1 =  IUniswapV2Pair(uniswapV2Pair).token1();\r\n                if (token0 == address(this)){\r\n                    \r\n                    require(IERC20(token1).balanceOf(uniswapV2Pair) >= token1_amount , \"not allowed\");\r\n                }else{\r\n                    require(IERC20(token0).balanceOf(uniswapV2Pair) >= token0_amount , \"not allowed\");\r\n                }\r\n                //\u4e0a\u7ea7\u5206\u4e70\u5e01\u5956\u52b1\r\n                invit_reward(receipt , fee_amount + amount);\r\n                //\u8282\u70b9\u4e70\u5e01\u5956\u52b1\r\n                node_reward(receipt , fee_amount + amount);\r\n            }\r\n        }else if(receipt == uniswapV2Pair && sender != address(this)){\r\n            require(open_swap , \"not open\");\r\n            //\u5356\u5e01\r\n            uint256 time = block.timestamp;\r\n            //28800\uff0c24\u5c0f\u65f6\u51fa\u5757\u91cf\r\n            uint256 open_days = (time - start_timestamp) / 86400;\r\n            //\u7b2c\u4e00\u6b21\u5356\uff0c\u6216\u8005\u5929\u6570\u5df2\u66f4\u65b0\r\n            if ((user_snap[sender].day == 0 && user_snap[sender].amount == 0 ) || (user_snap[sender].day < open_days)){\r\n                //\u7528\u6237\u5f53\u524d\u6570\u91cf\u603b\u5e01\uff0c\u505a\u4e2a\u5feb\u7167\r\n                uint256 user_totol =  IERC20(address(this)).balanceOf(sender);\r\n                uint256 max_amount = user_totol * 5 / 1000;\r\n                require((amount + fee_amount)  < max_amount , \"transaction exceeds maximum limit\");\r\n                user_snap[sender].day = open_days;\r\n                user_snap[sender].max_amount = max_amount;\r\n                user_snap[sender].amount = amount + fee_amount;\r\n            }else{\r\n                require(user_snap[sender].amount + amount + fee_amount < user_snap[sender].max_amount ,  \"transaction exceeds maximum limit\");\r\n                user_snap[sender].amount = amount + fee_amount;\r\n            }\r\n            destory_amount += amount;\r\n            _balances[address(this)] = _balances[address(this)] + fee_amount;\r\n            _balances[sender] = _balances[sender] - fee_amount;\r\n            emit Transfer(sender, address(this), fee_amount);\r\n            dividend_usdt(fee_amount);\r\n        }else{\r\n            //\u4e92\u8f6c\r\n            //\u8fd9\u91cc\u8fd8\u9700\u8981\u52a0\u4e2a\u4e92\u8f6c\u591a\u5c11\u8fbe\u5230\u8981\u6c42\r\n            //\u5224\u65ad\u662f\u5426\u7ec4\u4e86lp\r\n            uint256 pair_amount = IERC20(address(this)).balanceOf(uniswapV2Pair);\r\n            uint256 prcie;\r\n            if( pair_amount > 0){\r\n                (uint256 token0 , uint256 token1 , ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n                //uint256 prcie;\r\n                if (IUniswapV2Pair(uniswapV2Pair).token0() == address(this)){\r\n                    prcie = amount * token1 / token0;\r\n                }else{\r\n                    prcie = amount *token0 / token1;\r\n                }\r\n            }\r\n            if(!no_feeAddress[sender]){\r\n                if (prcie >= 15 * 10**16 && !isContract(sender) && !isContract(receipt)){\r\n                    //\u63a5\u53d7\u8005\u8fd8\u6ca1\u6709\u4e0a\u7ea7\r\n                    if(first_invite_address[receipt] == blackAddress){\r\n                        first_invite_address[receipt] = sender;\r\n                    }\r\n                    //\u53d1\u9001\u8005\u6709\u4e00\u7ea7\u9080\u8bf7\u4eba\uff0c\u63a5\u53d7\u8005\u662f\u53d1\u9001\u8005\u4e00\u7ea7\u9080\u8bf7\u8005\u7684\u4e8c\u7ea7\r\n                    if(first_invite_address[sender] != blackAddress){\r\n                        address second_address =  first_invite_address[sender];\r\n                        if(second_invite_address[receipt] == blackAddress){\r\n                            second_invite_address[receipt] = second_address;\r\n                        }\r\n                    }\r\n                }\r\n                //\u5206roc\r\n                uint256 roc_amount = fee_amount / 3;\r\n                _balances[address_1] += roc_amount;\r\n                _balances[sender] =  _balances[sender] - roc_amount;\r\n                emit Transfer(sender, address_1, roc_amount);\r\n                _balances[address_2] += roc_amount;\r\n                _balances[sender] = _balances[sender] - roc_amount;\r\n                emit Transfer(sender, address_2, roc_amount);\r\n                _balances[address_3] += fee_amount - 2 * roc_amount;\r\n                _balances[sender] =  _balances[sender] - fee_amount + 2 * roc_amount;\r\n                emit Transfer(sender, address_3, fee_amount - 2 * roc_amount);\r\n            }\r\n        }\r\n\r\n    \r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[receipt] = _balances[receipt] + amount;\r\n        emit Transfer(sender, receipt, amount);\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) public view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n     // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) public pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n            hex'ff',\r\n            factory,  //\u5de5\u573a\u5408\u7ea6\r\n            keccak256(abi.encodePacked(token0, token1)),\r\n            //d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66 \u6d4b\u8bd5\u7f51\r\n            //00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5 \u4e3b\u7f51\r\n            hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash\r\n        )))));\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        pairFor(factory, tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n     // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'PancakeLibrary: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA * reserveB / reserveA;\r\n    }\r\n\r\n    \r\n    function _addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin\r\n    ) internal virtual returns (uint amountA, uint amountB) {\r\n        // create the pair if it doesn't exist yet\r\n        if (IUniswapV2Factory(factory_Pancake).getPair(tokenA, tokenB) == address(0)) {\r\n            IUniswapV2Factory(factory_Pancake).createPair(tokenA, tokenB);\r\n        }\r\n        (uint reserveA, uint reserveB) = getReserves(factory_Pancake, tokenA, tokenB);\r\n        if (reserveA == 0 && reserveB == 0) {\r\n            (amountA, amountB) = (amountADesired, amountBDesired);\r\n        } else {\r\n            uint amountBOptimal = quote(amountADesired, reserveA, reserveB);\r\n            if (amountBOptimal <= amountBDesired) {\r\n                require(amountBOptimal >= amountBMin, 'PancakeRouter: INSUFFICIENT_B_AMOUNT');\r\n                (amountA, amountB) = (amountADesired, amountBOptimal);\r\n            } else {\r\n                uint amountAOptimal = quote(amountBDesired, reserveB, reserveA);\r\n                assert(amountAOptimal <= amountADesired);\r\n                require(amountAOptimal >= amountAMin, 'PancakeRouter: INSUFFICIENT_A_AMOUNT');\r\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\r\n            }\r\n        }\r\n    }\r\n\r\n    //\u7ec4lp\r\n    function addLP(uint256 rocAmount , uint256 usdtAmount , uint256 rocAmountMin , uint256 usdtAmountMin , address to)external returns (uint amountA, uint amountB){\r\n        require(first_invite_address[msg.sender] != blackAddress , \"not allow\");\r\n        ( amountA,  amountB) = _addLiquidity(address(this), usdtAddress, rocAmount, usdtAmount, rocAmountMin, usdtAmountMin);\r\n\r\n        //IERC20(address(this)).transferFrom(msg.sender , uniswapV2Pair , amountA);\r\n        _balances[msg.sender] -= amountA;\r\n        _balances[uniswapV2Pair] += amountA;\r\n        emit Transfer(msg.sender, uniswapV2Pair, amountA);\r\n\r\n        IERC20(usdtAddress).transferFrom(msg.sender , uniswapV2Pair , amountB);\r\n        IUniswapV2Pair(uniswapV2Pair).mint(to);\r\n\r\n        //\u7d2f\u52a0usdt\r\n        //\u83b7\u53d6\u4e00\u4e8c\u7ea7\r\n        address first_address = first_invite_address[msg.sender];\r\n        address second_address = second_invite_address[msg.sender];\r\n        if(first_address != blackAddress){\r\n            group_lp[first_address] += usdtAmount;\r\n        }\r\n        if(second_address != blackAddress){\r\n            group_lp[second_address] += usdtAmount;\r\n        }\r\n    }\r\n\r\n    //\u79fb\u9664lp\r\n    function delLP(uint256 lp_amount ,  uint rocMin , uint usdtMin , address to)external returns (uint256 amountA, uint256 amountB) {\r\n        IUniswapV2Pair(uniswapV2Pair).transferFrom(msg.sender, uniswapV2Pair, lp_amount); \r\n        isBuy = false;\r\n        (uint256 amount0, uint256 amount1) =  IUniswapV2Pair(uniswapV2Pair).burn(to);\r\n        isBuy = true;\r\n        (address token0,) = sortTokens(address(this) , usdtAddress);\r\n\r\n        (amountA, amountB) = token0 == address(this) ? (amount0, amount1) : (amount1, amount0);\r\n        require(amountA >= rocMin, 'PancakeRouter: INSUFFICIENT_A_AMOUNT');\r\n        require(amountB >= usdtMin, 'PancakeRouter: INSUFFICIENT_B_AMOUNT');\r\n\r\n        //\u79fb\u9664lp\r\n        //\u83b7\u53d6\u4e00\u4e8c\u7ea7\r\n        address first_address = first_invite_address[msg.sender];\r\n        address second_address = second_invite_address[msg.sender];\r\n        if(first_address != blackAddress){\r\n            if (group_lp[first_address] >= amountB){\r\n                group_lp[first_address] -= amountB;\r\n            }else{\r\n                group_lp[first_address] = 0;\r\n            }\r\n        }\r\n        if(second_address != blackAddress){\r\n            if( group_lp[second_address] >= amountB){\r\n                group_lp[second_address] -= amountB;\r\n            }else{\r\n                group_lp[second_address] = 0;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function setFirstRewardAddress(address first)external onlyOwner{\r\n        first_reward_address = first;\r\n    }\r\n\r\n    function setSecondRewardAddress(address second)external onlyOwner{\r\n        second_reward_address = second;\r\n    }\r\n\r\n    function setNofeeAddress(address noFee)external onlyOwner{\r\n        no_feeAddress[noFee] = true;\r\n    }\r\n\r\n    function delNofeeAddress(address noFee)external onlyOwner{\r\n        no_feeAddress[noFee] = false;\r\n    }\r\n\r\n    //\u76f4\u63a5\u8bbe\u7f6e\u56e2\u961f\u5956\u52b1\r\n    function set_small_node(address user , bool status)external onlyOwner{\r\n        small_node[user] = status;\r\n    }\r\n\r\n    function set_middle_node(address user , bool status)external onlyOwner{\r\n        middle_node[user] = status;\r\n    }\r\n\r\n    function set_big_node(address user , bool status)external onlyOwner{\r\n        big_node[user] = status;\r\n    }\r\n\r\n    function set_open_status(bool status)external onlyOwner{\r\n        open_swap = status;\r\n    }\r\n\r\n    function destory_pair_amount()external onlyOwner{\r\n        if (destory_amount > 0){\r\n            if(_balances[uniswapV2Pair]  >= 0){\r\n                _balances[uniswapV2Pair] = _balances[uniswapV2Pair] -  destory_amount;\r\n                emit Transfer(uniswapV2Pair, blackAddress, destory_amount);\r\n                destory_amount = 0;\r\n                IUniswapV2Pair(uniswapV2Pair).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    function invit_reward(address user , uint256 amount)internal {\r\n        //\u83b7\u53d6\u4e00\u4e8c\u7ea7\r\n        address first_address = first_invite_address[user];\r\n        address second_address = second_invite_address[user];\r\n        uint256 pool1_balance = IERC20(address(this)).balanceOf(first_reward_address);\r\n        uint256 pool2_balance = IERC20(address(this)).balanceOf(second_reward_address);\r\n        if(first_address != blackAddress){\r\n            //\u8ba1\u7b97\u4e00\u4e0b\u5f53\u524d\u7b49\u7ea7\r\n            uint256 lp_amount = IERC20(uniswapV2Pair).balanceOf(first_address);\r\n            (uint256 token0 , uint256 token1 , ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n            uint256 lp_total = IERC20(uniswapV2Pair).totalSupply();\r\n            if (IUniswapV2Pair(uniswapV2Pair).token0() == address(this)){\r\n                lp_amount = lp_amount * token1 / lp_total;\r\n            }else{\r\n                lp_amount = lp_amount * token0 / lp_total;\r\n            }\r\n            uint256 level = getRewardLevel(lp_amount);\r\n            emit Level(level);\r\n            //\u8ba1\u7b97\u6c60\u5b50\u94b1\u662f\u5426\u8fd8\u591f\r\n            if (level > 0){\r\n                uint256 reward_amount = amount * level / 10;\r\n                if (reward_amount < pool1_balance){\r\n                    //\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6c60\u5b50\u8f6c\u8d26\r\n                    _balances[first_reward_address] = _balances[first_reward_address]  - reward_amount;\r\n                    _balances[first_address] = _balances[first_address] + reward_amount;\r\n                    emit Transfer(first_reward_address, first_address, reward_amount);\r\n                    //Ipool(first_reward_address).invite_reward(first_address, reward_amount);\r\n\r\n                }else if(reward_amount / 2 < pool2_balance){\r\n                    //\u4f7f\u7528\u7b2c\u4e8c\u4e2a\r\n                    _balances[second_reward_address] = _balances[second_reward_address] - reward_amount / 2;\r\n                    _balances[first_address] =  _balances[first_address] + reward_amount / 2;\r\n                    emit Transfer(second_reward_address, first_address, reward_amount / 2); \r\n                    // Ipool(second_reward_address).invite_reward(first_address, reward_amount / 2 );\r\n                }\r\n            }\r\n        }\r\n        if(second_address != blackAddress){\r\n             //\u8ba1\u7b97\u4e00\u4e0b\u5f53\u524d\u7b49\u7ea7\r\n            uint256 lp_amount = IERC20(uniswapV2Pair).balanceOf(second_address);\r\n            (uint256 token0 , uint256 token1 , ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n            uint256 lp_total = IERC20(uniswapV2Pair).totalSupply();\r\n            if (IUniswapV2Pair(uniswapV2Pair).token0() == address(this)){\r\n                lp_amount = lp_amount * token1 / lp_total;\r\n            }else{\r\n                lp_amount = lp_amount * token0 / lp_total;\r\n            }\r\n            uint256 level = getRewardLevel(lp_amount);\r\n            emit Level(level);\r\n            //\u8ba1\u7b97\u6c60\u5b50\u94b1\u662f\u5426\u8fd8\u591f\r\n            if (level > 0){\r\n                uint256 reward_amount = amount * level / 10 / 2 ;\r\n                if (reward_amount < pool1_balance){\r\n                    //\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6c60\u5b50\u8f6c\u8d26\r\n                    _balances[first_reward_address] =  _balances[first_reward_address] -  reward_amount;\r\n                    _balances[second_address] = _balances[second_address] +  reward_amount;\r\n                    emit Transfer(first_reward_address, second_address, reward_amount);\r\n                    //Ipool(first_reward_address).invite_reward(second_address, reward_amount);\r\n\r\n                }else if(reward_amount / 2 < pool2_balance){\r\n                    //\u4f7f\u7528\u7b2c\u4e8c\u4e2a\r\n                    _balances[second_reward_address] = _balances[second_reward_address] -  reward_amount / 2;\r\n                    _balances[second_address] =  _balances[second_address] + reward_amount / 2;\r\n                    emit Transfer(second_reward_address, second_address, reward_amount / 2); \r\n                    //Ipool(second_reward_address).invite_reward(second_address, reward_amount / 2 );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function node_reward(address user , uint256 amount)internal {\r\n        (address small_address , address middle_address, address big_address) = getNodeAddress(user);\r\n        uint256 pool1_balance = IERC20(address(this)).balanceOf(first_reward_address);\r\n        uint256 pool2_balance = IERC20(address(this)).balanceOf(second_reward_address);\r\n\r\n        if (small_address != blackAddress){\r\n            uint256 reward_amount = amount * 1 / 10;\r\n            if (reward_amount < pool1_balance){\r\n                //\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6c60\u5b50\u8f6c\u8d26\r\n                _balances[first_reward_address] = _balances[first_reward_address] -  reward_amount;\r\n                _balances[small_address] =  _balances[small_address] + reward_amount;\r\n                emit Transfer(first_reward_address, small_address, reward_amount);\r\n            }else if(reward_amount / 2  < pool2_balance){\r\n                //\u4f7f\u7528\u7b2c\u4e8c\u4e2a\r\n                _balances[second_reward_address] = _balances[second_reward_address] -  reward_amount / 2;\r\n                _balances[small_address] = _balances[small_address] +  reward_amount / 2;\r\n                emit Transfer(second_reward_address, small_address, reward_amount / 2); \r\n            }\r\n        }\r\n        if (middle_address != blackAddress){\r\n            uint256 reward_amount = amount * 2 / 10;\r\n            if (reward_amount < pool1_balance){\r\n                //\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6c60\u5b50\u8f6c\u8d26\r\n                _balances[first_reward_address] = _balances[first_reward_address] -  reward_amount;\r\n                _balances[middle_address] =  _balances[middle_address] + reward_amount;\r\n                emit Transfer(first_reward_address, middle_address, reward_amount);\r\n            }else if(reward_amount / 2  < pool2_balance){\r\n                //\u4f7f\u7528\u7b2c\u4e8c\u4e2a\r\n                _balances[second_reward_address] = _balances[second_reward_address] -  reward_amount / 2;\r\n                _balances[middle_address] = _balances[middle_address] +  reward_amount / 2;\r\n                emit Transfer(second_reward_address, middle_address, reward_amount / 2); \r\n            }\r\n        }\r\n        if (big_address != blackAddress){\r\n            uint256 reward_amount = amount * 3 / 10;\r\n            if (reward_amount < pool1_balance){\r\n                //\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6c60\u5b50\u8f6c\u8d26\r\n                _balances[first_reward_address] = _balances[first_reward_address] -  reward_amount;\r\n                _balances[big_address] =  _balances[big_address] + reward_amount;\r\n                emit Transfer(first_reward_address, big_address, reward_amount);\r\n            }else if(reward_amount / 2  < pool2_balance){\r\n                //\u4f7f\u7528\u7b2c\u4e8c\u4e2a\r\n                _balances[second_reward_address] = _balances[second_reward_address] -  reward_amount / 2;\r\n                _balances[big_address] = _balances[big_address] +  reward_amount / 2;\r\n                emit Transfer(second_reward_address, big_address, reward_amount / 2); \r\n            }\r\n        }\r\n    }\r\n\r\n    function dividend_usdt(uint256 amount)internal{\r\n        //uint256 usdt_amount = IERC20(usdtAddress).balanceOf(address(this));\r\n        if(amount > 0){\r\n            _swapTokensForToken(amount);\r\n        }\r\n    }\r\n\r\n    function _swapTokensForToken(uint256 swapAmount) internal{\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddress;\r\n        uint256 amount  = swapAmount / 3;\r\n        //address _to = address(this);\r\n        if(amount > 0){\r\n            IUniswapV2Router01(router).swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address_1,\r\n                block.timestamp\r\n            );\r\n\r\n            IUniswapV2Router01(router).swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address_2,\r\n                block.timestamp\r\n            );\r\n        }\r\n        amount = swapAmount - 2 * amount;\r\n        if(amount > 0){\r\n            IUniswapV2Router01(router).swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address_3,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function TEST_swapTokensForToken(uint256 swapAmount) external {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdtAddress;\r\n        uint256 amount  = swapAmount / 3;\r\n        //address _to = address(this);\r\n        if(amount > 0){\r\n            IUniswapV2Router01(router).swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address_1,\r\n                block.timestamp\r\n            );\r\n\r\n            IUniswapV2Router01(router).swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address_2,\r\n                block.timestamp\r\n            );\r\n        }\r\n        amount = swapAmount - 2 * amount;\r\n        if(amount > 0){\r\n            IUniswapV2Router01(router).swapExactTokensForTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                address_3,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n    \r\n    function caculInviteReward(address invite_address) public view returns(uint256 level){\r\n        //\u8ba1\u7b97\u5956\u52b1\r\n        uint256 invite_address_balacne = IERC20(uniswapV2Pair).balanceOf(invite_address);\r\n\r\n        (uint256 token0 , uint256 token1 , ) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        uint256 lp_total = IERC20(uniswapV2Pair).totalSupply();\r\n        if (IUniswapV2Pair(uniswapV2Pair).token0() == address(this)){\r\n            invite_address_balacne = invite_address_balacne * token1 / lp_total;\r\n        }else{\r\n            invite_address_balacne = invite_address_balacne * token0 / lp_total;\r\n        }\r\n\r\n        level = getRewardLevel(invite_address_balacne);\r\n        return level;\r\n    }\r\n\r\n    function getRewardLevel(uint256 amount)public pure returns(uint256){\r\n        if(amount < 100 * 10**18){\r\n            return 0;\r\n        }else if(amount < 200 * 10**18){\r\n            return 1;\r\n        }\r\n        else if(amount < 300 * 10**18){\r\n            return 2;\r\n        }\r\n        else if(amount < 400 * 10**18){\r\n            return 3;\r\n        }\r\n        else if(amount < 500 * 10**18){\r\n            return 4;\r\n        }\r\n        else if(amount < 600 * 10**18){\r\n            return 5;\r\n        }\r\n        else if(amount < 700 * 10**18){\r\n            return 6;\r\n        }\r\n        else if(amount < 800 * 10**18){\r\n            return 7;\r\n        }\r\n        else if(amount < 900 * 10**18){\r\n            return 8;\r\n        }else if(amount < 1000 * 10**18){\r\n            return 9;\r\n        }else{\r\n            return 10;\r\n        }\r\n    }\r\n\r\n    function getNodeRewardLevel(uint256 amount)public pure returns(uint256){\r\n        if(amount < 5000 * 10**18){\r\n            return 0;\r\n        }else if(amount < 20000 * 10**18){\r\n            return 1;\r\n        }else if(amount < 100000 * 10**18){\r\n            return 2;\r\n        }else{\r\n            return 3;\r\n        }\r\n    }\r\n\r\n    function getNodeAddress(address user)public view returns(address small_address , address middle_address, address big_address){\r\n        address first_address = first_invite_address[user];\r\n        bool small;\r\n        bool middle;\r\n        while(first_address != blackAddress && first_address != deadAddress){\r\n            uint256 lp_amount = group_lp[first_address];\r\n            uint256 level;\r\n            level = getNodeRewardLevel(lp_amount);\r\n            if(small_node[first_address] || level == 1){\r\n                if(!small){\r\n                    small_address = first_address;\r\n                    small = true;\r\n                }\r\n            }else if(middle_node[first_address] || level == 2){\r\n                if(!middle){\r\n                    middle_address = first_address;\r\n                    small = true;\r\n                    middle = true;\r\n                }\r\n\r\n            }else if(big_node[first_address] || level == 3){\r\n                big_address = first_address;\r\n                break;\r\n            }\r\n            first_address = first_invite_address[first_address];\r\n        }\r\n    }\r\n      \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"Level\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"}],\"name\":\"TEST_swapTokensForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rocAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rocAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uid\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"big_node\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invite_address\",\"type\":\"address\"}],\"name\":\"caculInviteReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lp_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rocMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"delLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"noFee\",\"type\":\"address\"}],\"name\":\"delNofeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destory_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destory_pair_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory_Pancake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"first_invite_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"first_reward_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"small_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"middle_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"big_address\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getNodeRewardLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRewardLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"group_lp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"middle_node\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"no_feeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open_swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"second_invite_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"second_reward_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"first\",\"type\":\"address\"}],\"name\":\"setFirstRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"noFee\",\"type\":\"address\"}],\"name\":\"setNofeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"second\",\"type\":\"address\"}],\"name\":\"setSecondRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_big_node\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_middle_node\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_open_status\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"set_small_node\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"small_node\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_snap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"white_address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UAT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ae19a1f6eed2d619cdcd5da6efd0c519c519d2ebe3bfb0acb86116624fbc7cca"}