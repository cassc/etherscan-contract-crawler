{"SourceCode": "// Copyright (c) 2021 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n/*\r\nThe EverRise token is the keystone in the EverRise Ecosytem of dApps\r\n and the overaching key that unlocks multi-blockchain unification via\r\n the EverBridge.\r\n\r\nOn EverRise token txns 6% buyback and business development fees are collected\r\n* 4% for token Buyback from the market, \r\n     with bought back tokens directly distributed as staking rewards\r\n* 2% for Business Development (Development, Sustainability and Marketing)\r\n\r\n ________                              _______   __\r\n/        |                            /       \\ /  |\r\n$$$$$$$$/__     __  ______    ______  $$$$$$$  |$$/   _______   ______\r\n$$ |__  /  \\   /  |/      \\  /      \\ $$ |__$$ |/  | /       | /      \\\r\n$$    | $$  \\ /$$//$$$$$$  |/$$$$$$  |$$    $$< $$ |/$$$$$$$/ /$$$$$$  |\r\n$$$$$/   $$  /$$/ $$    $$ |$$ |  $$/ $$$$$$$  |$$ |$$      \\ $$    $$ |\r\n$$ |_____ $$ $$/  $$$$$$$$/ $$ |      $$ |  $$ |$$ | $$$$$$  |$$$$$$$$/\r\n$$       | $$$/   $$       |$$ |      $$ |  $$ |$$ |/     $$/ $$       |\r\n$$$$$$$$/   $/     $$$$$$$/ $$/       $$/   $$/ $$/ $$$$$$$/   $$$$$$$/\r\n\r\nLearn more about EverRise and the EverRise Ecosystem of dApps and\r\nhow our utilities, and our partners, can help protect your investors\r\nand help your project grow: https://www.everrise.com\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.8;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferFromWithPermit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IEverStake {\r\n    function createRewards(address acount, uint256 tAmount) external;\r\n\r\n    function deliver(uint256 tAmount) external;\r\n\r\n    function getTotalAmountStaked() external view returns (uint256);\r\n\r\n    function getTotalRewardsDistributed() external view returns (uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// helper methods for discovering LP pair addresses\r\nlibrary PairHelper {\r\n    bytes private constant token0Selector =\r\n        abi.encodeWithSelector(IUniswapV2Pair.token0.selector);\r\n    bytes private constant token1Selector =\r\n        abi.encodeWithSelector(IUniswapV2Pair.token1.selector);\r\n\r\n    function token0(address pair) internal view returns (address) {\r\n        return token(pair, token0Selector);\r\n    }\r\n\r\n    function token1(address pair) internal view returns (address) {\r\n        return token(pair, token1Selector);\r\n    }\r\n\r\n    function token(address pair, bytes memory selector)\r\n        private\r\n        view\r\n        returns (address)\r\n    {\r\n        // Do not check if pair is not a contract to avoid warning in txn log\r\n        if (!isContract(pair)) return address(0); \r\n\r\n        (bool success, bytes memory data) = pair.staticcall(selector);\r\n\r\n        if (success && data.length >= 32) {\r\n            return abi.decode(data, (address));\r\n        }\r\n        \r\n        return address(0);\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _buybackOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBuybackOwner() {\r\n        require(\r\n            _buybackOwner == _msgSender(),\r\n            \"Ownable: caller is not the buyback owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _buybackOwner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Allow contract ownership and access to contract onlyOwner functions\r\n    // to be locked using EverOwn with control gated by community vote.\r\n    //\r\n    // EverRise ($RISE) stakers become voting members of the\r\n    // decentralized autonomous organization (DAO) that controls access\r\n    // to the token contract via the EverRise Ecosystem dApp EverOwn\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferBuybackOwnership(address newOwner)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_buybackOwner, newOwner);\r\n        _buybackOwner = newOwner;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function buybackOwner() public view returns (address) {\r\n        return _buybackOwner;\r\n    }\r\n}\r\n\r\ncontract EverRise is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using PairHelper for address;\r\n\r\n    struct TransferDetails {\r\n        uint112 balance0;\r\n        uint112 balance1;\r\n        uint32 blockNumber;\r\n        address to;\r\n        address origin;\r\n    }\r\n\r\n    address payable public businessDevelopmentAddress =\r\n        payable(0x23F4d6e1072E42e5d25789e3260D19422C2d3674); // Business Development Address\r\n    address public stakingAddress;\r\n    address public everMigrateAddress;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private lastCoolDownTrade;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isEverRiseEcosystemContract;\r\n    address[] public allEcosystemContracts;\r\n\r\n    mapping(address => bool) private _isAuthorizedSwapToken;\r\n    address[] public allAuthorizedSwapTokens;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    string private constant _name = \"EverRise\";\r\n    string private constant _symbol = \"RISE\";\r\n    // Large data type for maths\r\n    uint256 private constant _decimals = 18;\r\n    // Short data type for decimals function (no per function conversion)\r\n    uint8 private constant _decimalsShort = uint8(_decimals);\r\n    // Golden supply\r\n    uint256 private constant _tTotal = 7_1_618_033_988 * 10**_decimals;\r\n\r\n    uint256 private _holders = 0;\r\n\r\n    // Fee and max txn are set by setTradingEnabled\r\n    // to allow upgrading balances to arrange their wallets\r\n    // and stake their assets before trading start\r\n    uint256 public liquidityFee = 0;\r\n    uint256 private _previousLiquidityFee = liquidityFee;\r\n    uint256 private _maxTxAmount = _tTotal;\r\n    \r\n    uint256 private constant _tradeStartLiquidityFee = 6;\r\n    uint256 private _tradeStartMaxTxAmount = _tTotal.div(1000); // Max txn 0.1% of supply\r\n\r\n    uint256 public businessDevelopmentDivisor = 2;\r\n\r\n    uint256 private minimumTokensBeforeSwap = 5 * 10**6 * 10**_decimals;\r\n    uint256 private buyBackUpperLimit = 10 * 10**18;\r\n    uint256 private buyBackTriggerTokenLimit = 1 * 10**6 * 10**_decimals;\r\n    uint256 private buyBackMinAvailability = 1 * 10**18; //1 BNB\r\n\r\n    uint256 private buyVolume = 0;\r\n    uint256 private sellVolume = 0;\r\n    uint256 public totalBuyVolume = 0;\r\n    uint256 public totalSellVolume = 0;\r\n    uint256 public totalVolume = 0;\r\n    uint256 private nextBuybackAmount = 0;\r\n    uint256 private buyBackTriggerVolume = 100 * 10**6 * 10**_decimals;\r\n\r\n    uint256 private tradingStart = MAX;\r\n    uint256 private tradingStartCooldown = MAX;\r\n\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n    uint256 private constant _FALSE = 1;\r\n    uint256 private constant _TRUE = 2;\r\n\r\n    uint256 private _checkingTokens;\r\n    uint256 private _inSwapAndLiquify;\r\n\r\n    // Infrequently set booleans\r\n    bool public swapAndLiquifyEnabled = false;\r\n    bool public buyBackEnabled = false;\r\n    bool public liquidityLocked = false;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    IEverStake stakeToken;\r\n\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    TransferDetails lastTransfer;\r\n\r\n    event BuyBackEnabledUpdated(bool enabled);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event SwapTokensForTokens(uint256 amountIn, address[] path);\r\n\r\n    event ExcludeFromFeeUpdated(address account);\r\n    event IncludeInFeeUpdated(address account);\r\n\r\n    event LiquidityFeeUpdated(uint256 prevValue, uint256 newValue);\r\n    event MaxTxAmountUpdated(uint256 prevValue, uint256 newValue);\r\n    event BusinessDevelopmentDivisorUpdated(\r\n        uint256 prevValue,\r\n        uint256 newValue\r\n    );\r\n    event MinTokensBeforeSwapUpdated(uint256 prevValue, uint256 newValue);\r\n    event BuybackMinAvailabilityUpdated(uint256 prevValue, uint256 newValue);\r\n\r\n    event TradingEnabled();\r\n    event BuyBackAndRewardStakers(uint256 amount);\r\n    event BuybackUpperLimitUpdated(uint256 prevValue, uint256 newValue);\r\n    event BuyBackTriggerTokenLimitUpdated(uint256 prevValue, uint256 newValue);\r\n\r\n    event RouterAddressUpdated(address prevAddress, address newAddress);\r\n    event BusinessDevelopmentAddressUpdated(\r\n        address prevAddress,\r\n        address newAddress\r\n    );\r\n    event StakingAddressUpdated(address prevAddress, address newAddress);\r\n    event EverMigrateAddressUpdated(address prevAddress, address newAddress);\r\n\r\n    event EverRiseEcosystemContractAdded(address contractAddress);\r\n    event EverRiseEcosystemContractRemoved(address contractAddress);\r\n\r\n    event HoldersIncreased(uint256 prevValue, uint256 newValue);\r\n    event HoldersDecreased(uint256 prevValue, uint256 newValue);\r\n\r\n    event AuthorizedSwapTokenAdded(address tokenAddress);\r\n    event AuthorizedSwapTokenRemoved(address tokenAddress);\r\n\r\n    event LiquidityLocked();\r\n    event LiquidityUnlocked();\r\n\r\n    event StakingIncreased(uint256 amount);\r\n    event StakingDecreased(uint256 amount);\r\n\r\n    modifier lockTheSwap() {\r\n        require(_inSwapAndLiquify != _TRUE);\r\n        _inSwapAndLiquify = _TRUE;\r\n        _;\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _inSwapAndLiquify = _FALSE;\r\n    }\r\n\r\n    modifier tokenCheck() {\r\n        require(_checkingTokens != _TRUE);\r\n        _checkingTokens = _TRUE;\r\n        _;\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _checkingTokens = _FALSE;\r\n    }\r\n\r\n    constructor(address _stakingAddress, address routerAddress) {\r\n        require(\r\n            _stakingAddress != address(0),\r\n            \"_stakingAddress should not be to the zero address\"\r\n        );\r\n        require(\r\n            routerAddress != address(0),\r\n            \"routerAddress should not be the zero address\"\r\n        );\r\n\r\n\r\n        // The values being non-zero value makes deployment a bit more expensive,\r\n        // but in exchange the refund on every call to modifiers will be lower in\r\n        // amount. Since refunds are capped to a percentage of the total\r\n        // transaction's gas, it is best to keep them low in cases like this one, to\r\n        // increase the likelihood of the full refund coming into effect.\r\n        _checkingTokens = _FALSE;\r\n        _inSwapAndLiquify = _FALSE;\r\n\r\n        stakingAddress = _stakingAddress;\r\n        stakeToken = IEverStake(_stakingAddress);\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancakeswap router mainnet - BSC\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); //Testnet\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); //Sushiswap router mainnet - Polygon\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap V2 router mainnet - ETH\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xa5e0829caced8ffdd4de3c43696c57f7d7a678ff); //Quickswap V2 router mainnet - Polygon\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(_name)),\r\n                keccak256(bytes(\"1\")),\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        // Track holder change\r\n        _holders = 1;\r\n        emit HoldersIncreased(0, 1);\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _everRiseEcosystemContractAdd(_stakingAddress);\r\n        authorizedSwapTokenAdd(address(this));\r\n        authorizedSwapTokenAdd(uniswapV2Router.WETH());\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n        lockLiquidity();\r\n    }\r\n\r\n    // Function to receive ETH when msg.data is be empty\r\n    // Receives ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    // Fallback function to receive ETH when msg.data is not empty\r\n    fallback() external payable {}\r\n\r\n    function transferBalance() external onlyOwner {\r\n        _msgSender().transfer(address(this).balance);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function transferFromWithPermit(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (bool) {\r\n        permit(sender, _msgSender(), amount, deadline, v, r, s);\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function manualBuyback(uint256 amount, uint256 numOfDecimals)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        require(amount > 0 && numOfDecimals >= 0, \"Invalid Input\");\r\n\r\n        uint256 value = amount.mul(10**18).div(10**numOfDecimals);\r\n\r\n        uint256 tokensReceived = swapETHForTokensNoFee(\r\n            address(this),\r\n            stakingAddress,\r\n            value\r\n        );\r\n\r\n        //Distribute the rewards to the staking pool\r\n        distributeStakingRewards(tokensReceived);\r\n    }\r\n\r\n    function swapTokens(\r\n        address fromToken,\r\n        address toToken,\r\n        uint256 amount,\r\n        uint256 numOfDecimals,\r\n        uint256 fromTokenDecimals\r\n    ) external onlyBuybackOwner {\r\n        require(_isAuthorizedSwapToken[fromToken], \"fromToken is not an authorized token\");\r\n        require(_isAuthorizedSwapToken[toToken], \"toToken is not an authorized token\");\r\n\r\n        uint256 actualAmount = amount\r\n            .mul(10**fromTokenDecimals)\r\n            .div(10**numOfDecimals);\r\n\r\n        if (toToken == uniswapV2Router.WETH()) {\r\n            swapTokensForEth(fromToken, address(this), actualAmount);\r\n        } else if (fromToken == uniswapV2Router.WETH()) {\r\n            swapETHForTokens(toToken, address(this), actualAmount);\r\n        } else {\r\n            swapTokensForTokens(\r\n                fromToken,\r\n                toToken,\r\n                address(this),\r\n                actualAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    function lockLiquidity() public onlyOwner {\r\n        liquidityLocked = true;\r\n        emit LiquidityLocked();\r\n    }\r\n\r\n    function unlockLiquidity() external onlyOwner {\r\n        liquidityLocked = false;\r\n        emit LiquidityUnlocked();\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        require(\r\n            !_isExcludedFromFee[account],\r\n            \"Account is not excluded for fees\"\r\n        );\r\n\r\n        _excludeFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFee[account],\r\n            \"Account is not included for fees\"\r\n        );\r\n\r\n        _includeInFee(account);\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFeeRate) external onlyOwner {\r\n        require(liquidityFeeRate <= 10, \"liquidityFeeRate should be less than 10%\");\r\n\r\n        uint256 prevValue = liquidityFee;\r\n        liquidityFee = liquidityFeeRate;\r\n        emit LiquidityFeeUpdated(prevValue, liquidityFee);\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 txAmount) external onlyOwner {\r\n        uint256 prevValue = _maxTxAmount;\r\n        _maxTxAmount = txAmount;\r\n        emit MaxTxAmountUpdated(prevValue, txAmount);\r\n    }\r\n\r\n    function setBusinessDevelopmentDivisor(uint256 divisor) external onlyOwner {\r\n        require(\r\n            divisor <= liquidityFee,\r\n            \"Business Development divisor should be less than liquidity fee\"\r\n        );\r\n\r\n        uint256 prevValue = businessDevelopmentDivisor;\r\n        businessDevelopmentDivisor = divisor;\r\n        emit BusinessDevelopmentDivisorUpdated(\r\n            prevValue,\r\n            businessDevelopmentDivisor\r\n        );\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap)\r\n        external\r\n        onlyOwner\r\n    {\r\n        uint256 prevValue = minimumTokensBeforeSwap;\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\r\n        emit MinTokensBeforeSwapUpdated(prevValue, minimumTokensBeforeSwap);\r\n    }\r\n\r\n    function setBuybackUpperLimit(uint256 buyBackLimit, uint256 numOfDecimals)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        uint256 prevValue = buyBackUpperLimit;\r\n        buyBackUpperLimit = buyBackLimit\r\n            .mul(10**18)\r\n            .div(10**numOfDecimals);\r\n        emit BuybackUpperLimitUpdated(prevValue, buyBackUpperLimit);\r\n    }\r\n\r\n    function setBuybackTriggerTokenLimit(uint256 buyBackTriggerLimit)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        uint256 prevValue = buyBackTriggerTokenLimit;\r\n        buyBackTriggerTokenLimit = buyBackTriggerLimit;\r\n        emit BuyBackTriggerTokenLimitUpdated(\r\n            prevValue,\r\n            buyBackTriggerTokenLimit\r\n        );\r\n    }\r\n\r\n    function setBuybackMinAvailability(uint256 amount, uint256 numOfDecimals)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        uint256 prevValue = buyBackMinAvailability;\r\n        buyBackMinAvailability = amount\r\n            .mul(10**18)\r\n            .div(10**numOfDecimals);\r\n        emit BuybackMinAvailabilityUpdated(prevValue, buyBackMinAvailability);\r\n    }\r\n\r\n    function setBuyBackEnabled(bool _enabled) public onlyBuybackOwner {\r\n        buyBackEnabled = _enabled;\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setTradingEnabled(uint256 _tradeStartDelay, uint256 _tradeStartCoolDown) external onlyOwner {\r\n        require(_tradeStartDelay < 10, \"tradeStartDelay should be less than 10 minutes\");\r\n        require(_tradeStartCoolDown < 120, \"tradeStartCoolDown should be less than 120 minutes\");\r\n        require(_tradeStartDelay < _tradeStartCoolDown, \"tradeStartDelay must be less than tradeStartCoolDown\");\r\n        // Can only be called once\r\n        require(tradingStart == MAX && tradingStartCooldown == MAX, \"Trading has already started\");\r\n        // Set initial values\r\n        liquidityFee = _tradeStartLiquidityFee;\r\n        _previousLiquidityFee = liquidityFee;\r\n        _maxTxAmount = _tradeStartMaxTxAmount;\r\n\r\n        setBuyBackEnabled(true);\r\n        setSwapAndLiquifyEnabled(true);\r\n        // Add time buffer to allow switching on trading on every chain\r\n        // before announcing to community\r\n        tradingStart = block.timestamp + _tradeStartDelay * 1 minutes;\r\n        tradingStartCooldown = tradingStart + _tradeStartCoolDown * 1 minutes;\r\n        // Announce to blockchain immediately, even though trades\r\n        // can't start until delay passes (snipers no sniping)\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    function setBusinessDevelopmentAddress(address _businessDevelopmentAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _businessDevelopmentAddress != address(0),\r\n            \"_businessDevelopmentAddress should not be the zero address\"\r\n        );\r\n\r\n        address prevAddress = businessDevelopmentAddress;\r\n        businessDevelopmentAddress = payable(_businessDevelopmentAddress);\r\n        emit BusinessDevelopmentAddressUpdated(\r\n            prevAddress,\r\n            _businessDevelopmentAddress\r\n        );\r\n    }\r\n\r\n    function setEverMigrateAddress(address _everMigrateAddress)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _everMigrateAddress != address(0),\r\n            \"_everMigrateAddress should not be the zero address\"\r\n        );\r\n\r\n        address prevAddress = everMigrateAddress;\r\n        everMigrateAddress = _everMigrateAddress;\r\n        emit EverMigrateAddressUpdated(prevAddress, _everMigrateAddress);\r\n\r\n        _everRiseEcosystemContractAdd(_everMigrateAddress);\r\n    }\r\n\r\n    function setStakingAddress(address _stakingAddress) external onlyOwner {\r\n        require(\r\n            _stakingAddress != address(0),\r\n            \"_stakingAddress should not be to zero address\"\r\n        );\r\n\r\n        address prevAddress = stakingAddress;\r\n        stakingAddress = _stakingAddress;\r\n        stakeToken = IEverStake(_stakingAddress);\r\n        emit StakingAddressUpdated(prevAddress, _stakingAddress);\r\n\r\n        _everRiseEcosystemContractAdd(_stakingAddress);\r\n    }\r\n\r\n    function setRouterAddress(address routerAddress) external onlyOwner {\r\n        require(\r\n            routerAddress != address(0),\r\n            \"routerAddress should not be the zero address\"\r\n        );\r\n\r\n        address prevAddress = address(uniswapV2Router);\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress); \r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        emit RouterAddressUpdated(prevAddress, routerAddress);\r\n    }\r\n\r\n    function everRiseEcosystemContractAdd(address contractAddress) external onlyOwner {\r\n        require(contractAddress != address(0), \"contractAddress should not be the zero address\");\r\n        require(contractAddress != address(this), \"EverRise token should not be added as an Ecosystem contract\");\r\n        require(\r\n            !_isEverRiseEcosystemContract[contractAddress],\r\n            \"contractAddress is already included as an EverRise Ecosystem contract\"\r\n        );\r\n\r\n        _everRiseEcosystemContractAdd(contractAddress);\r\n    }\r\n\r\n    function everRiseEcosystemContractRemove(address contractAddress) external onlyOwner {\r\n        require(\r\n            _isEverRiseEcosystemContract[contractAddress],\r\n            \"contractAddress is not included as EverRise Ecosystem contract\"\r\n        );\r\n\r\n        _isEverRiseEcosystemContract[contractAddress] = false;\r\n\r\n        for (uint256 i = 0; i < allEcosystemContracts.length; i++) {\r\n            if (allEcosystemContracts[i] == contractAddress) {\r\n                allEcosystemContracts[i] = allEcosystemContracts[allEcosystemContracts.length - 1];\r\n                allEcosystemContracts.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit EverRiseEcosystemContractRemoved(contractAddress);\r\n        _includeInFee(contractAddress);\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        uint256 balance0 = _balanceOf(account);\r\n        if (\r\n            !inSwapAndLiquify() &&\r\n            lastTransfer.blockNumber == uint32(block.number) &&\r\n            account == lastTransfer.to\r\n        ) {\r\n            // Balance being checked is same address as last to in _transfer\r\n            // check if likely same txn and a Liquidity Add\r\n            _validateIfLiquidityAdd(account, uint112(balance0));\r\n        }\r\n\r\n        return balance0;\r\n    }\r\n\r\n    function maxTxAmount() external view returns (uint256) {\r\n        if (isTradingEnabled() && inTradingStartCoolDown()) {\r\n            uint256 maxTxn = maxTxCooldownAmount();\r\n            return maxTxn < _maxTxAmount ? maxTxn : _maxTxAmount;\r\n        }\r\n\r\n        return _maxTxAmount;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function getTotalAmountStaked() external view returns (uint256)\r\n    {\r\n        return stakeToken.getTotalAmountStaked();\r\n    }\r\n\r\n    function getTotalRewardsDistributed() external view returns (uint256)\r\n    {\r\n        return stakeToken.getTotalRewardsDistributed();\r\n    }\r\n\r\n    function holders() external view returns (uint256) {\r\n        return _holders;\r\n    }\r\n\r\n    function minimumTokensBeforeSwapAmount() external view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function buyBackUpperLimitAmount() external view returns (uint256) {\r\n        return buyBackUpperLimit;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function allEcosystemContractsLength() external view returns (uint) {\r\n        return allEcosystemContracts.length;\r\n    }\r\n\r\n    function allAuthorizedSwapTokensLength() external view returns (uint) {\r\n        return allAuthorizedSwapTokens.length;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimalsShort;\r\n    }\r\n\r\n    function authorizedSwapTokenAdd(address tokenAddress) public onlyOwner {\r\n        require(tokenAddress != address(0), \"tokenAddress should not be the zero address\");\r\n        require(!_isAuthorizedSwapToken[tokenAddress], \"tokenAddress is already an authorized token\");\r\n\r\n        _isAuthorizedSwapToken[tokenAddress] = true;\r\n        allAuthorizedSwapTokens.push(tokenAddress);\r\n\r\n        emit AuthorizedSwapTokenAdded(tokenAddress);\r\n    }\r\n\r\n    function authorizedSwapTokenRemove(address tokenAddress) public onlyOwner {\r\n        require(tokenAddress != address(this), \"cannot remove this contract from authorized tokens\");\r\n        require(tokenAddress != uniswapV2Router.WETH(), \"cannot remove the WETH type contract from authorized tokens\");\r\n        require(_isAuthorizedSwapToken[tokenAddress], \"tokenAddress is not an authorized token\");\r\n\r\n        _isAuthorizedSwapToken[tokenAddress] = false;\r\n\r\n        for (uint256 i = 0; i < allAuthorizedSwapTokens.length; i++) {\r\n            if (allAuthorizedSwapTokens[i] == tokenAddress) {\r\n                allAuthorizedSwapTokens[i] = allAuthorizedSwapTokens[allAuthorizedSwapTokens.length - 1];\r\n                allAuthorizedSwapTokens.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit AuthorizedSwapTokenRemoved(tokenAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function isTradingEnabled() public view returns (bool) {\r\n        // Trading has been set and has time buffer has elapsed\r\n        return tradingStart < block.timestamp;\r\n    }\r\n\r\n    function inTradingStartCoolDown() public view returns (bool) {\r\n        // Trading has been started and the cool down period has elapsed\r\n        return tradingStartCooldown >= block.timestamp;\r\n    }\r\n\r\n    function maxTxCooldownAmount() public pure returns (uint256) {\r\n        return _tTotal.div(2000);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(from != to, \"Transfer to and from addresses the same\");\r\n        require(!inTokenCheck(), \"Invalid reentrancy from token0/token1 balanceOf check\");\r\n\r\n        address _owner = owner();\r\n        bool isIgnoredAddress = from == _owner || to == _owner ||\r\n             _isEverRiseEcosystemContract[from] || _isEverRiseEcosystemContract[to];\r\n        \r\n        bool _isTradingEnabled = isTradingEnabled();\r\n\r\n        require(amount <= _maxTxAmount || isIgnoredAddress || !_isTradingEnabled,\r\n            \"Transfer amount exceeds the maxTxAmount\");\r\n        \r\n        address _pair = uniswapV2Pair;\r\n        require(_isTradingEnabled || isIgnoredAddress || (from != _pair && to != _pair),\r\n            \"Trading is not enabled\");\r\n\r\n        bool notInSwapAndLiquify = !inSwapAndLiquify();\r\n        if (_isTradingEnabled && inTradingStartCoolDown() && !isIgnoredAddress && notInSwapAndLiquify) {\r\n            validateDuringTradingCoolDown(to, from, amount);\r\n        }\r\n\r\n        uint256 contractTokenBalance = _balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >=\r\n            minimumTokensBeforeSwap;\r\n\r\n        bool contractAction = _isTradingEnabled &&\r\n            notInSwapAndLiquify &&\r\n            swapAndLiquifyEnabled &&\r\n            to == _pair;\r\n\r\n        // Following block is for the contract to convert the tokens to ETH and do the buy back\r\n        if (contractAction) {\r\n            if (overMinimumTokenBalance) {\r\n                contractTokenBalance = minimumTokensBeforeSwap;\r\n                swapTokens(contractTokenBalance);\r\n            }\r\n            if (buyBackEnabled &&\r\n                address(this).balance > buyBackMinAvailability &&\r\n                buyVolume.add(sellVolume) > buyBackTriggerVolume\r\n            ) {\r\n                if (nextBuybackAmount > address(this).balance) {\r\n                    // Don't try to buyback more than is available.\r\n                    // For example some \"ETH\" balance may have been\r\n                    // temporally switched to stable coin in crypto-market\r\n                    // downturn using swapTokens, for switching back later\r\n                    nextBuybackAmount = address(this).balance;\r\n                }\r\n\r\n                if (nextBuybackAmount > 0) {\r\n                    uint256 tokensReceived = buyBackTokens(nextBuybackAmount);\r\n                    //Distribute the rewards to the staking pool\r\n                    distributeStakingRewards(tokensReceived);\r\n                    nextBuybackAmount = 0; //reset the next buyback amount\r\n                    buyVolume = 0; //reset the buy volume\r\n                    sellVolume = 0; // reset the sell volume\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isTradingEnabled) {\r\n            // Compute Sell Volume and set the next buyback amount\r\n            if (to == _pair) {\r\n                sellVolume = sellVolume.add(amount);\r\n                totalSellVolume = totalSellVolume.add(amount);\r\n                if (amount > buyBackTriggerTokenLimit) {\r\n                    uint256 balance = address(this).balance;\r\n                    if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;\r\n                    nextBuybackAmount = nextBuybackAmount.add(balance.div(100));\r\n                }\r\n            }\r\n            // Compute Buy Volume\r\n            else if (from == _pair) {\r\n                buyVolume = buyVolume.add(amount);\r\n                totalBuyVolume = totalBuyVolume.add(amount);\r\n            }\r\n            \r\n            totalVolume = totalVolume.add(amount);\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        // For safety Liquidity Adds should only be done by an owner, \r\n        // and transfers to and from EverRise Ecosystem contracts\r\n        // are not considered LP adds\r\n        if (isIgnoredAddress || buybackOwner() == _msgSender()) {\r\n            // Clear transfer data\r\n            _clearTransferIfNeeded();\r\n        } else if (notInSwapAndLiquify) {\r\n            // Not in a swap during a LP add, so record the transfer details\r\n            _recordPotentialLiquidityAddTransaction(to);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _recordPotentialLiquidityAddTransaction(address to)\r\n        private\r\n        tokenCheck {\r\n        uint112 balance0 = uint112(_balanceOf(to));\r\n        address token1 = to.token1();\r\n        if (token1 == address(this)) {\r\n            // Switch token so token1 is always other side of pair\r\n            token1 = to.token0();\r\n        }\r\n\r\n        uint112 balance1;\r\n        if (token1 == address(0)) {\r\n            // Not a LP pair, or not yet (contract being created)\r\n            balance1 = 0;\r\n        } else {\r\n            balance1 = uint112(IERC20(token1).balanceOf(to));\r\n        }\r\n\r\n        lastTransfer = TransferDetails({\r\n            balance0: balance0,\r\n            balance1: balance1,\r\n            blockNumber: uint32(block.number),\r\n            to: to,\r\n            origin: tx.origin\r\n        });\r\n    }\r\n\r\n    function _clearTransferIfNeeded() private {\r\n        // Not Liquidity Add or is owner, clear data from same block to allow balanceOf\r\n        if (lastTransfer.blockNumber == uint32(block.number)) {\r\n            // Don't need to clear if different block\r\n            lastTransfer = TransferDetails({\r\n                balance0: 0,\r\n                balance1: 0,\r\n                blockNumber: 0,\r\n                to: address(0),\r\n                origin: address(0)\r\n            });\r\n        }\r\n    }\r\n\r\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(address(this), address(this), contractTokenBalance);\r\n        uint256 transferredBalance = address(this).balance.sub(initialBalance);\r\n\r\n        //Send to Business Development address\r\n        transferToAddressETH(\r\n            businessDevelopmentAddress,\r\n            transferredBalance\r\n                .mul(businessDevelopmentDivisor)\r\n                .div(liquidityFee)\r\n        );\r\n    }\r\n\r\n    function buyBackTokens(uint256 amount)\r\n        private\r\n        lockTheSwap\r\n        returns (uint256)\r\n    {\r\n        uint256 tokensReceived;\r\n        if (amount > 0) {\r\n            tokensReceived = swapETHForTokensNoFee(\r\n                address(this),\r\n                stakingAddress,\r\n                amount\r\n            );\r\n        }\r\n        return tokensReceived;\r\n    }\r\n\r\n    function swapTokensForEth(\r\n        address tokenAddress,\r\n        address toAddress,\r\n        uint256 tokenAmount\r\n    ) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress;\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        IERC20(tokenAddress).approve(address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function swapETHForTokensNoFee(\r\n        address tokenAddress,\r\n        address toAddress,\r\n        uint256 amount\r\n    ) private returns (uint256) {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenAddress;\r\n\r\n        // make the swap\r\n        uint256[] memory amounts = uniswapV2Router.swapExactETHForTokens{\r\n            value: amount\r\n        }(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        emit SwapETHForTokens(amount, path);\r\n        return amounts[1];\r\n    }\r\n\r\n    function swapETHForTokens(\r\n        address tokenAddress,\r\n        address toAddress,\r\n        uint256 amount\r\n    ) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenAddress;\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        emit SwapETHForTokens(amount, path);\r\n    }\r\n\r\n    function swapTokensForTokens(\r\n        address fromTokenAddress,\r\n        address toTokenAddress,\r\n        address toAddress,\r\n        uint256 tokenAmount\r\n    ) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = fromTokenAddress;\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = toTokenAddress;\r\n\r\n        IERC20(fromTokenAddress).approve(address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp.add(120)\r\n        );\r\n\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n\r\n    function distributeStakingRewards(uint256 amount) private {\r\n        if (amount > 0) {\r\n            stakeToken.createRewards(address(this), amount);\r\n            stakeToken.deliver(amount);\r\n\r\n            emit BuyBackAndRewardStakers(amount);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) removeAllFee();\r\n\r\n        _actualTokenTransfer(sender, recipient, amount);\r\n\r\n        if (!takeFee) restoreAllFee();\r\n    }\r\n\r\n    function _actualTokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        (\r\n            uint256 tTransferAmount,\r\n            uint256 tLiquidity\r\n        ) = _getValues(tAmount);\r\n\r\n        uint256 senderBefore = _tOwned[sender];\r\n        uint256 senderAfter = senderBefore.sub(tAmount);\r\n        _tOwned[sender] = senderAfter;\r\n\r\n        uint256 recipientBefore = _tOwned[recipient];\r\n        uint256 recipientAfter = recipientBefore.add(tTransferAmount);\r\n        _tOwned[recipient] = recipientAfter;\r\n\r\n        // Track holder change\r\n        if (recipientBefore == 0 && recipientAfter > 0) {\r\n            uint256 holdersBefore = _holders;\r\n            uint256 holdersAfter = holdersBefore.add(1);\r\n            _holders = holdersAfter;\r\n\r\n            emit HoldersIncreased(holdersBefore, holdersAfter);\r\n        }\r\n\r\n        if (senderBefore > 0 && senderAfter == 0) {\r\n            uint256 holdersBefore = _holders;\r\n            uint256 holdersAfter = holdersBefore.sub(1);\r\n            _holders = holdersAfter;\r\n\r\n            emit HoldersDecreased(holdersBefore, holdersAfter);\r\n        }\r\n\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        if (recipient == stakingAddress) {\r\n            // Increases by the amount entering staking (transfer - fees)\r\n            // Howver, fees should be zero for staking so same as full amount.\r\n            emit StakingIncreased(tTransferAmount);\r\n        } else if (sender == stakingAddress) {\r\n            // Decreases by the amount leaving staking (full amount)\r\n            emit StakingDecreased(tAmount);\r\n        }\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) private {\r\n        require(deadline >= block.timestamp, \"EverRise: EXPIRED\");\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        if (v < 27) {\r\n            v += 27;\r\n        } else if (v > 30) {\r\n            digest = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", digest));\r\n        }\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"EverRise: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 beforeAmount = _tOwned[address(this)];\r\n        uint256 afterAmount = beforeAmount.add(tLiquidity);\r\n        _tOwned[address(this)] = afterAmount;\r\n\r\n        // Track holder change\r\n        if (beforeAmount == 0 && afterAmount > 0) {\r\n            uint256 holdersBefore = _holders;\r\n            uint256 holdersAfter = holdersBefore.add(1);\r\n            _holders = holdersAfter;\r\n\r\n            emit HoldersIncreased(holdersBefore, holdersAfter);\r\n        }\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if (liquidityFee == 0) return;\r\n\r\n        _previousLiquidityFee = liquidityFee;\r\n\r\n        liquidityFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        liquidityFee = _previousLiquidityFee;\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount)\r\n        private\r\n    {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function _everRiseEcosystemContractAdd(address contractAddress) private {\r\n        if (_isEverRiseEcosystemContract[contractAddress]) return;\r\n\r\n        _isEverRiseEcosystemContract[contractAddress] = true;\r\n        allEcosystemContracts.push(contractAddress);\r\n\r\n        emit EverRiseEcosystemContractAdded(contractAddress);\r\n        _excludeFromFee(contractAddress);\r\n    }\r\n\r\n    function _excludeFromFee(address account) private {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludeFromFeeUpdated(account);\r\n    }\r\n\r\n    function _includeInFee(address account) private {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludeInFeeUpdated(account);\r\n    }\r\n\r\n    function validateDuringTradingCoolDown(address to, address from, uint256 amount) private {\r\n        address pair = uniswapV2Pair;\r\n        bool disallow;\r\n\r\n        // Disallow multiple same source trades in same block\r\n        if (from == pair) {\r\n            disallow = lastCoolDownTrade[to] == block.number || lastCoolDownTrade[tx.origin] == block.number;\r\n            lastCoolDownTrade[to] = block.number;\r\n            lastCoolDownTrade[tx.origin] = block.number;\r\n        } else if (to == pair) {\r\n            disallow = lastCoolDownTrade[from] == block.number || lastCoolDownTrade[tx.origin] == block.number;\r\n            lastCoolDownTrade[from] = block.number;\r\n            lastCoolDownTrade[tx.origin] = block.number;\r\n        }\r\n\r\n        require(!disallow, \"Multiple trades in same block from same source are not allowed during trading start cooldown\");\r\n\r\n        require(amount <= maxTxCooldownAmount(), \"Max transaction is 0.05% of total supply during trading start cooldown\");\r\n    }\r\n\r\n    function inSwapAndLiquify() private view returns (bool) {\r\n        return _inSwapAndLiquify == _TRUE;\r\n    }\r\n\r\n    function inTokenCheck() private view returns (bool) {\r\n        return _checkingTokens == _TRUE;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity);\r\n        return (tTransferAmount, tLiquidity);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _amount.mul(liquidityFee).div(10**2);\r\n    }\r\n\r\n    function _balanceOf(address account) private view returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    // account must be recorded in _transfer and same block\r\n    function _validateIfLiquidityAdd(address account, uint112 balance0)\r\n        private\r\n        view\r\n    {\r\n        // Test to see if this tx is part of a Liquidity Add\r\n        // using the data recorded in _transfer\r\n        TransferDetails memory _lastTransfer = lastTransfer;\r\n        if (_lastTransfer.origin == tx.origin) {\r\n            // May be same transaction as _transfer, check LP balances\r\n            address token1 = account.token1();\r\n\r\n            if (token1 == address(this)) {\r\n                // Switch token so token1 is always other side of pair\r\n                token1 = account.token0();\r\n            }\r\n\r\n            // Not LP pair\r\n            if (token1 == address(0)) return;\r\n\r\n            uint112 balance1 = uint112(IERC20(token1).balanceOf(account));\r\n\r\n            if (balance0 > _lastTransfer.balance0 &&\r\n                balance1 > _lastTransfer.balance1) {\r\n                // Both pair balances have increased, this is a Liquidty Add\r\n                require(false, \"Liquidity can be added by the owner only\");\r\n            } else if (balance0 < _lastTransfer.balance0 &&\r\n                balance1 < _lastTransfer.balance1)\r\n            {\r\n                // Both pair balances have decreased, this is a Liquidty Remove\r\n                require(!liquidityLocked, \"Liquidity cannot be removed while locked\");\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AuthorizedSwapTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AuthorizedSwapTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"BusinessDevelopmentAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BusinessDevelopmentDivisorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackAndRewardStakers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggerTokenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackMinAvailabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackUpperLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EverMigrateAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"EverRiseEcosystemContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"EverRiseEcosystemContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"HoldersDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"HoldersIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeInFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LiquidityLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LiquidityUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"RouterAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"StakingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAuthorizedSwapTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allAuthorizedSwapTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allEcosystemContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allEcosystemContractsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"authorizedSwapTokenAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"authorizedSwapTokenRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessDevelopmentAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessDevelopmentDivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackUpperLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everMigrateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"everRiseEcosystemContractAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"everRiseEcosystemContractRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inTradingStartCoolDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"manualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxCooldownAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_businessDevelopmentAddress\",\"type\":\"address\"}],\"name\":\"setBusinessDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setBusinessDevelopmentDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setBuybackMinAvailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackTriggerLimit\",\"type\":\"uint256\"}],\"name\":\"setBuybackTriggerTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_everMigrateAddress\",\"type\":\"address\"}],\"name\":\"setEverMigrateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFeeRate\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeStartDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeStartCoolDown\",\"type\":\"uint256\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenDecimals\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferBuybackOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferFromWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverRise", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001490eaa0de0b2d4f9fe0e354a7d99d6c6532be8400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://161ad41a3905b0de17f7196a5502ac4483c0579ded4c05685938810f669ee3cd"}