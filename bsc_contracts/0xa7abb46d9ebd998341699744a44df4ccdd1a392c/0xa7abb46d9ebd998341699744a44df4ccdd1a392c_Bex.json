{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/bex.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBoracle {\r\n    function blaPrice() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ncontract Bex {\r\n    address public owner;\r\n    uint256 public decimals;\r\n    uint256 internal constant feeBp = 50;\r\n    IBoracle internal boracle;\r\n    IERC20 internal usdt;\r\n    IERC20 internal bla;\r\n\r\n    event TransferOwnership(address newOwner);\r\n    event SetBoracleAddress(address newBoracleAddress); \r\n    event DepositUsdt(uint256 amount);\r\n    event WithdrawUsdt(uint256 amount);\r\n    event DepositBla(uint256 amount);\r\n    event WithdrawBla(uint256 amount);\r\n    event BuyBla(address user, uint256 amount_usdt, uint256 amount_bla, uint256 fee_bla);\r\n    event SellBla(address user, uint256 amount_bla, uint256 amount_usdt, uint256 fee_usdt);\r\n\r\n    constructor(address address_Boracle, address address_Usdt, address address_bla) {\r\n        boracle = IBoracle(address_Boracle);\r\n        usdt = IERC20(address_Usdt);\r\n        bla = IERC20(address_bla);\r\n        owner = msg.sender;\r\n        decimals = boracle.decimals();\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    function getBlaPrice() public view returns (uint256) {\r\n        uint256 price = boracle.blaPrice();\r\n        return price;\r\n    }\r\n\r\n    function getAvailableUsdt() public view returns (uint256){\r\n        return usdt.balanceOf(address(this));\r\n    }\r\n    \r\n    function getAvailableBla() public view returns (uint256){\r\n        return bla.balanceOf(address(this));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Zero address\");\r\n        require(newOwner != owner, \"New owner must be different from current owner\");\r\n        owner = newOwner;\r\n        emit TransferOwnership(newOwner);\r\n    }\r\n\r\n    function setBoracleAddress(address newBoracleAddress) external onlyOwner {\r\n        require(newBoracleAddress != address(0), \"Zero address\");\r\n        boracle = IBoracle(newBoracleAddress);\r\n        decimals = boracle.decimals();\r\n        emit SetBoracleAddress(newBoracleAddress);\r\n    }\r\n\r\n    // Owner \r\n\r\n    function depositUsdt(uint256 amount) external onlyOwner {\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n\r\n        // send\r\n        require(usdt.transferFrom(msg.sender, address(this), amount), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit DepositUsdt(amount);\r\n    }\r\n\r\n    function withdrawUsdt(uint256 amount) external onlyOwner {\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        uint256 availableUsdt = getAvailableUsdt();\r\n        require(availableUsdt >= amount, \"Not enough available USDT\");\r\n        \r\n        // send \r\n        require(usdt.transfer(msg.sender, amount), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit WithdrawUsdt(amount);\r\n    }\r\n\r\n    function depositBla(uint256 amount) external onlyOwner{\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n\r\n        // send\r\n        require(bla.transferFrom(msg.sender, address(this), amount), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit DepositBla(amount);\r\n    }\r\n\r\n    function withdrawBla(uint256 amount) external onlyOwner{\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        uint256 availableBla = getAvailableBla();\r\n        require(availableBla >= amount, \"Not enough available BLA\");\r\n\r\n        // send\r\n        require(bla.transfer(msg.sender, amount), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit WithdrawBla(amount);\r\n    }\r\n\r\n    // User\r\n    function buyBla(uint256 amount_usdt) external {\r\n        // check \r\n        require(amount_usdt > 0, \"Amount should be greater than zero\");\r\n        uint256 price = getBlaPrice();\r\n        uint256 amount_bla = amount_usdt *10**decimals / price;\r\n        uint256 fee_bla = amount_bla * feeBp / 10**4;\r\n        uint256 availableBla = getAvailableBla();\r\n        require(availableBla >= amount_bla - fee_bla, \"Not enough available BLA\");\r\n\r\n        // send\r\n        require(usdt.transferFrom(msg.sender, address(this), amount_usdt), \"Failed to transfer USDT\");\r\n        require(bla.transfer(msg.sender, amount_bla - fee_bla), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit BuyBla(msg.sender, amount_usdt, amount_bla, fee_bla);\r\n    }\r\n\r\n    function sellBla(uint256 amount_bla) external {\r\n        // check\r\n        require(amount_bla > 0, \"Amount should be greater than zero\");\r\n        uint256 price = getBlaPrice();\r\n        uint256 amount_usdt = amount_bla * price / 10**decimals;\r\n        uint256 fee_usdt = amount_usdt * feeBp / 10**4;\r\n        uint256 availableUsdt = getAvailableUsdt();\r\n        require(availableUsdt >= amount_usdt - fee_usdt, \"Not enough available USDT\");\r\n\r\n        //send\r\n        require(bla.transferFrom(msg.sender, address(this), amount_bla), \"Failed to transfer BLA\");\r\n        require(usdt.transfer(msg.sender, amount_usdt - fee_usdt), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit SellBla(msg.sender, amount_bla, amount_usdt, fee_usdt);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_Boracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_Usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_bla\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_bla\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee_bla\",\"type\":\"uint256\"}],\"name\":\"BuyBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_bla\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee_usdt\",\"type\":\"uint256\"}],\"name\":\"SellBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBoracleAddress\",\"type\":\"address\"}],\"name\":\"SetBoracleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUsdt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_usdt\",\"type\":\"uint256\"}],\"name\":\"buyBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableBla\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlaPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_bla\",\"type\":\"uint256\"}],\"name\":\"sellBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBoracleAddress\",\"type\":\"address\"}],\"name\":\"setBoracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bex", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e33d899e3ec740582448d7cda659986a3b176ce00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000006aee38ee96ab844d1e5a93f636c62e43f479b3e2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0bb165db42068fd5c9c779654ffd7c41af93cb469b675c0f4201dd1c5bbe12bb"}