{"SourceCode": "// Sources flattened with hardhat v2.12.0 https://hardhat.org\r\n\r\n// File contracts/peripherals/interfaces/IHandlerTarget.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IHandlerTarget {\r\n    function isHandler(address _account) external returns (bool);\r\n    function setHandler(address _handler, bool _isActive) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVaultUtils.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVaultUtils {\r\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\r\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\r\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\r\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\r\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\r\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVault.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\ninterface IVault {\r\n    function isInitialized() external view returns (bool);\r\n    function isSwapEnabled() external view returns (bool);\r\n    function isLeverageEnabled() external view returns (bool);\r\n\r\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\r\n    function setError(uint256 _errorCode, string calldata _error) external;\r\n\r\n    function router() external view returns (address);\r\n    function usdg() external view returns (address);\r\n    function gov() external view returns (address);\r\n\r\n    function whitelistedTokenCount() external view returns (uint256);\r\n    function maxLeverage() external view returns (uint256);\r\n\r\n    function minProfitTime() external view returns (uint256);\r\n    function hasDynamicFees() external view returns (bool);\r\n    function fundingInterval() external view returns (uint256);\r\n    function totalTokenWeights() external view returns (uint256);\r\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\r\n\r\n    function inManagerMode() external view returns (bool);\r\n    function inPrivateLiquidationMode() external view returns (bool);\r\n\r\n    function maxGasPrice() external view returns (uint256);\r\n\r\n    function approvedRouters(address _account, address _router) external view returns (bool);\r\n    function isLiquidator(address _account) external view returns (bool);\r\n    function isManager(address _account) external view returns (bool);\r\n\r\n    function minProfitBasisPoints(address _token) external view returns (uint256);\r\n    function tokenBalances(address _token) external view returns (uint256);\r\n    function lastFundingTimes(address _token) external view returns (uint256);\r\n\r\n    function setMaxLeverage(uint256 _maxLeverage) external;\r\n    function setInManagerMode(bool _inManagerMode) external;\r\n    function setManager(address _manager, bool _isManager) external;\r\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\r\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\r\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\r\n    function setUsdgAmount(address _token, uint256 _amount) external;\r\n    function setBufferAmount(address _token, uint256 _amount) external;\r\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\r\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\r\n    function setLiquidator(address _liquidator, bool _isActive) external;\r\n\r\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\r\n\r\n    function setFees(\r\n        uint256 _taxBasisPoints,\r\n        uint256 _stableTaxBasisPoints,\r\n        uint256 _mintBurnFeeBasisPoints,\r\n        uint256 _swapFeeBasisPoints,\r\n        uint256 _stableSwapFeeBasisPoints,\r\n        uint256 _marginFeeBasisPoints,\r\n        uint256 _liquidationFeeUsd,\r\n        uint256 _minProfitTime,\r\n        bool _hasDynamicFees\r\n    ) external;\r\n\r\n    function setTokenConfig(\r\n        address _token,\r\n        uint256 _tokenDecimals,\r\n        uint256 _redemptionBps,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        bool _isStable,\r\n        bool _isShortable\r\n    ) external;\r\n\r\n    function setPriceFeed(address _priceFeed) external;\r\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\r\n\r\n    function directPoolDeposit(address _token) external;\r\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\r\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\r\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\r\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\r\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\r\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\r\n\r\n    function priceFeed() external view returns (address);\r\n    function fundingRateFactor() external view returns (uint256);\r\n    function stableFundingRateFactor() external view returns (uint256);\r\n    function cumulativeFundingRates(address _token) external view returns (uint256);\r\n    function getNextFundingRate(address _token) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n\r\n    function liquidationFeeUsd() external view returns (uint256);\r\n    function taxBasisPoints() external view returns (uint256);\r\n    function stableTaxBasisPoints() external view returns (uint256);\r\n    function mintBurnFeeBasisPoints() external view returns (uint256);\r\n    function swapFeeBasisPoints() external view returns (uint256);\r\n    function stableSwapFeeBasisPoints() external view returns (uint256);\r\n    function marginFeeBasisPoints() external view returns (uint256);\r\n\r\n    function allWhitelistedTokensLength() external view returns (uint256);\r\n    function allWhitelistedTokens(uint256) external view returns (address);\r\n    function whitelistedTokens(address _token) external view returns (bool);\r\n    function stableTokens(address _token) external view returns (bool);\r\n    function shortableTokens(address _token) external view returns (bool);\r\n    function feeReserves(address _token) external view returns (uint256);\r\n    function globalShortSizes(address _token) external view returns (uint256);\r\n    function globalShortAveragePrices(address _token) external view returns (uint256);\r\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\r\n    function tokenDecimals(address _token) external view returns (uint256);\r\n    function tokenWeights(address _token) external view returns (uint256);\r\n    function guaranteedUsd(address _token) external view returns (uint256);\r\n    function poolAmounts(address _token) external view returns (uint256);\r\n    function bufferAmounts(address _token) external view returns (uint256);\r\n    function reservedAmounts(address _token) external view returns (uint256);\r\n    function usdgAmounts(address _token) external view returns (uint256);\r\n    function maxUsdgAmounts(address _token) external view returns (uint256);\r\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getMaxPrice(address _token) external view returns (uint256);\r\n    function getMinPrice(address _token) external view returns (uint256);\r\n\r\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\r\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IGlpManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\ninterface IGlpManager {\r\n    function glp() external view returns (address);\r\n    function usdg() external view returns (address);\r\n    function vault() external view returns (IVault);\r\n    function cooldownDuration() external returns (uint256);\r\n    function getAumInUsdg(bool maximise) external view returns (uint256);\r\n    function lastAddedAt(address _account) external returns (uint256);\r\n    function addLiquidity(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\r\n    function addLiquidityForAccount(address _fundingAccount, address _account, address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\r\n    function removeLiquidity(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\r\n    function removeLiquidityForAccount(address _account, address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\r\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external;\r\n    function setCooldownDuration(uint256 _cooldownDuration) external;\r\n}\r\n\r\n\r\n// File contracts/peripherals/interfaces/ITimelockTarget.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITimelockTarget {\r\n    function setGov(address _gov) external;\r\n    function withdrawToken(address _token, address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/peripherals/interfaces/ITimelock.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITimelock {\r\n    function setAdmin(address _admin) external;\r\n    function enableLeverage(address _vault) external;\r\n    function disableLeverage(address _vault) external;\r\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\r\n    function signalSetGov(address _target, address _gov) external;\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IUSDG.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IUSDG {\r\n    function addVault(address _vault) external;\r\n    function removeVault(address _vault) external;\r\n    function mint(address _account, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/access/interfaces/IAdmin.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IAdmin {\r\n    function setAdmin(address _admin) external;\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IBaseToken.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IBaseToken {\r\n    function totalStaked() external view returns (uint256);\r\n    function stakedBalance(address _account) external view returns (uint256);\r\n    function removeAdmin(address _account) external;\r\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external;\r\n    function withdrawToken(address _token, address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IMintable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IMintable {\r\n    function isMinter(address _account) external returns (bool);\r\n    function setMinter(address _minter, bool _isActive) external;\r\n    function mint(address _account, uint256 _amount) external;\r\n    function burn(address _account, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/referrals/interfaces/IReferralStorage.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IReferralStorage {\r\n    function codeOwners(bytes32 _code) external view returns (address);\r\n    function traderReferralCodes(address _account) external view returns (bytes32);\r\n    function referrerDiscountShares(address _account) external view returns (uint256);\r\n    function referrerTiers(address _account) external view returns (uint256);\r\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\r\n    function setTraderReferralCode(address _account, bytes32 _code) external;\r\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\r\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\r\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IVester.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVester {\r\n    function rewardTracker() external view returns (address);\r\n\r\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\r\n\r\n    function claimable(address _account) external view returns (uint256);\r\n    function cumulativeClaimAmounts(address _account) external view returns (uint256);\r\n    function claimedAmounts(address _account) external view returns (uint256);\r\n    function pairAmounts(address _account) external view returns (uint256);\r\n    function getVestedAmount(address _account) external view returns (uint256);\r\n    function transferredAverageStakedAmounts(address _account) external view returns (uint256);\r\n    function transferredCumulativeRewards(address _account) external view returns (uint256);\r\n    function cumulativeRewardDeductions(address _account) external view returns (uint256);\r\n    function bonusRewards(address _account) external view returns (uint256);\r\n\r\n    function transferStakeValues(address _sender, address _receiver) external;\r\n    function setTransferredAverageStakedAmounts(address _account, uint256 _amount) external;\r\n    function setTransferredCumulativeRewards(address _account, uint256 _amount) external;\r\n    function setCumulativeRewardDeductions(address _account, uint256 _amount) external;\r\n    function setBonusRewards(address _account, uint256 _amount) external;\r\n\r\n    function getMaxVestableAmount(address _account) external view returns (uint256);\r\n    function getCombinedAverageStakedAmount(address _account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/libraries/token/IERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IYieldToken.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IYieldToken {\r\n    function totalStaked() external view returns (uint256);\r\n    function stakedBalance(address _account) external view returns (uint256);\r\n    function removeAdmin(address _account) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/staking/interfaces/IRewardRouterV2.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRewardRouterV2 {\r\n    function feeGlpTracker() external view returns (address);\r\n    function stakedGlpTracker() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/peripherals/Timelock.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\ncontract Timelock is ITimelock {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\r\n    uint256 public constant MAX_BUFFER = 5 days;\r\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 200; // 0.02%\r\n    uint256 public constant MAX_LEVERAGE_VALIDATION = 300000; // 30x\r\n\r\n    uint256 public buffer;\r\n    address public admin;\r\n\r\n    address public tokenManager;\r\n    address public mintReceiver;\r\n    address public glpManager;\r\n    address public rewardRouter;\r\n    uint256 public maxTokenSupply;\r\n\r\n    uint256 public marginFeeBasisPoints;\r\n    uint256 public maxMarginFeeBasisPoints;\r\n    bool public shouldToggleIsLeverageEnabled;\r\n\r\n    mapping (bytes32 => uint256) public pendingActions;\r\n\r\n    mapping (address => bool) public isHandler;\r\n    mapping (address => bool) public isKeeper;\r\n\r\n    event SignalPendingAction(bytes32 action);\r\n    event SignalApprove(address token, address spender, uint256 amount, bytes32 action);\r\n    event SignalWithdrawToken(address target, address token, address receiver, uint256 amount, bytes32 action);\r\n    event SignalMint(address token, address receiver, uint256 amount, bytes32 action);\r\n    event SignalSetGov(address target, address gov, bytes32 action);\r\n    event SignalSetHandler(address target, address handler, bool isActive, bytes32 action);\r\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\r\n    event SignalRedeemUsdg(address vault, address token, uint256 amount);\r\n    event SignalVaultSetTokenConfig(\r\n        address vault,\r\n        address token,\r\n        uint256 tokenDecimals,\r\n        uint256 tokenWeight,\r\n        uint256 minProfitBps,\r\n        uint256 maxUsdgAmount,\r\n        bool isStable,\r\n        bool isShortable\r\n    );\r\n    event ClearAction(bytes32 action);\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Timelock: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyHandlerAndAbove() {\r\n        require(msg.sender == admin || isHandler[msg.sender], \"Timelock: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeeperAndAbove() {\r\n        require(msg.sender == admin || isHandler[msg.sender] || isKeeper[msg.sender], \"Timelock: forbidden\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenManager() {\r\n        require(msg.sender == tokenManager, \"Timelock: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _admin,\r\n        uint256 _buffer,\r\n        address _tokenManager,\r\n        address _mintReceiver,\r\n        address _glpManager,\r\n        address _rewardRouter,\r\n        uint256 _maxTokenSupply,\r\n        uint256 _marginFeeBasisPoints,\r\n        uint256 _maxMarginFeeBasisPoints\r\n    ) public {\r\n        require(_buffer <= MAX_BUFFER, \"Timelock: invalid _buffer\");\r\n        admin = _admin;\r\n        buffer = _buffer;\r\n        tokenManager = _tokenManager;\r\n        mintReceiver = _mintReceiver;\r\n        glpManager = _glpManager;\r\n        rewardRouter = _rewardRouter;\r\n        maxTokenSupply = _maxTokenSupply;\r\n\r\n        marginFeeBasisPoints = _marginFeeBasisPoints;\r\n        maxMarginFeeBasisPoints = _maxMarginFeeBasisPoints;\r\n    }\r\n\r\n    function setAdmin(address _admin) external override onlyTokenManager {\r\n        admin = _admin;\r\n    }\r\n\r\n    function setExternalAdmin(address _target, address _admin) external onlyAdmin {\r\n        require(_target != address(this), \"Timelock: invalid _target\");\r\n        IAdmin(_target).setAdmin(_admin);\r\n    }\r\n\r\n    function setContractHandler(address _handler, bool _isActive) external onlyAdmin {\r\n        isHandler[_handler] = _isActive;\r\n    }\r\n\r\n    function initGlpManager() external onlyAdmin {\r\n        IGlpManager _glpManager = IGlpManager(glpManager);\r\n\r\n        IMintable glp = IMintable(_glpManager.glp());\r\n        glp.setMinter(glpManager, true);\r\n\r\n        IUSDG usdg = IUSDG(_glpManager.usdg());\r\n        usdg.addVault(glpManager);\r\n\r\n        IVault vault = _glpManager.vault();\r\n        vault.setManager(glpManager, true);\r\n    }\r\n\r\n    function initRewardRouter() external onlyAdmin {\r\n        IRewardRouterV2 _rewardRouter = IRewardRouterV2(rewardRouter);\r\n\r\n        IHandlerTarget(_rewardRouter.feeGlpTracker()).setHandler(rewardRouter, true);\r\n        IHandlerTarget(_rewardRouter.stakedGlpTracker()).setHandler(rewardRouter, true);\r\n        IHandlerTarget(glpManager).setHandler(rewardRouter, true);\r\n    }\r\n\r\n    function setKeeper(address _keeper, bool _isActive) external onlyAdmin {\r\n        isKeeper[_keeper] = _isActive;\r\n    }\r\n\r\n    function setBuffer(uint256 _buffer) external onlyAdmin {\r\n        require(_buffer <= MAX_BUFFER, \"Timelock: invalid _buffer\");\r\n        require(_buffer > buffer, \"Timelock: buffer cannot be decreased\");\r\n        buffer = _buffer;\r\n    }\r\n\r\n    function setMaxLeverage(address _vault, uint256 _maxLeverage) external onlyAdmin {\r\n      require(_maxLeverage > MAX_LEVERAGE_VALIDATION, \"Timelock: invalid _maxLeverage\");\r\n      IVault(_vault).setMaxLeverage(_maxLeverage);\r\n    }\r\n\r\n    function setFundingRate(address _vault, uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external onlyKeeperAndAbove {\r\n        require(_fundingRateFactor < MAX_FUNDING_RATE_FACTOR, \"Timelock: invalid _fundingRateFactor\");\r\n        require(_stableFundingRateFactor < MAX_FUNDING_RATE_FACTOR, \"Timelock: invalid _stableFundingRateFactor\");\r\n        IVault(_vault).setFundingRate(_fundingInterval, _fundingRateFactor, _stableFundingRateFactor);\r\n    }\r\n\r\n    function setShouldToggleIsLeverageEnabled(bool _shouldToggleIsLeverageEnabled) external onlyHandlerAndAbove {\r\n        shouldToggleIsLeverageEnabled = _shouldToggleIsLeverageEnabled;\r\n    }\r\n\r\n    function setMarginFeeBasisPoints(uint256 _marginFeeBasisPoints, uint256 _maxMarginFeeBasisPoints) external onlyHandlerAndAbove {\r\n        marginFeeBasisPoints = _marginFeeBasisPoints;\r\n        maxMarginFeeBasisPoints = _maxMarginFeeBasisPoints;\r\n    }\r\n\r\n    function setSwapFees(\r\n        address _vault,\r\n        uint256 _taxBasisPoints,\r\n        uint256 _stableTaxBasisPoints,\r\n        uint256 _mintBurnFeeBasisPoints,\r\n        uint256 _swapFeeBasisPoints,\r\n        uint256 _stableSwapFeeBasisPoints\r\n    ) external onlyKeeperAndAbove {\r\n        IVault vault = IVault(_vault);\r\n\r\n        vault.setFees(\r\n            _taxBasisPoints,\r\n            _stableTaxBasisPoints,\r\n            _mintBurnFeeBasisPoints,\r\n            _swapFeeBasisPoints,\r\n            _stableSwapFeeBasisPoints,\r\n            maxMarginFeeBasisPoints,\r\n            vault.liquidationFeeUsd(),\r\n            vault.minProfitTime(),\r\n            vault.hasDynamicFees()\r\n        );\r\n    }\r\n\r\n    // assign _marginFeeBasisPoints to this.marginFeeBasisPoints\r\n    // because enableLeverage would update Vault.marginFeeBasisPoints to this.marginFeeBasisPoints\r\n    // and disableLeverage would reset the Vault.marginFeeBasisPoints to this.maxMarginFeeBasisPoints\r\n    function setFees(\r\n        address _vault,\r\n        uint256 _taxBasisPoints,\r\n        uint256 _stableTaxBasisPoints,\r\n        uint256 _mintBurnFeeBasisPoints,\r\n        uint256 _swapFeeBasisPoints,\r\n        uint256 _stableSwapFeeBasisPoints,\r\n        uint256 _marginFeeBasisPoints,\r\n        uint256 _liquidationFeeUsd,\r\n        uint256 _minProfitTime,\r\n        bool _hasDynamicFees\r\n    ) external onlyKeeperAndAbove {\r\n        marginFeeBasisPoints = _marginFeeBasisPoints;\r\n\r\n        IVault(_vault).setFees(\r\n            _taxBasisPoints,\r\n            _stableTaxBasisPoints,\r\n            _mintBurnFeeBasisPoints,\r\n            _swapFeeBasisPoints,\r\n            _stableSwapFeeBasisPoints,\r\n            maxMarginFeeBasisPoints,\r\n            _liquidationFeeUsd,\r\n            _minProfitTime,\r\n            _hasDynamicFees\r\n        );\r\n    }\r\n\r\n    function enableLeverage(address _vault) external override onlyHandlerAndAbove {\r\n        IVault vault = IVault(_vault);\r\n\r\n        if (shouldToggleIsLeverageEnabled) {\r\n            vault.setIsLeverageEnabled(true);\r\n        }\r\n\r\n        vault.setFees(\r\n            vault.taxBasisPoints(),\r\n            vault.stableTaxBasisPoints(),\r\n            vault.mintBurnFeeBasisPoints(),\r\n            vault.swapFeeBasisPoints(),\r\n            vault.stableSwapFeeBasisPoints(),\r\n            marginFeeBasisPoints,\r\n            vault.liquidationFeeUsd(),\r\n            vault.minProfitTime(),\r\n            vault.hasDynamicFees()\r\n        );\r\n    }\r\n\r\n    function disableLeverage(address _vault) external override onlyHandlerAndAbove {\r\n        IVault vault = IVault(_vault);\r\n\r\n        if (shouldToggleIsLeverageEnabled) {\r\n            vault.setIsLeverageEnabled(false);\r\n        }\r\n\r\n        vault.setFees(\r\n            vault.taxBasisPoints(),\r\n            vault.stableTaxBasisPoints(),\r\n            vault.mintBurnFeeBasisPoints(),\r\n            vault.swapFeeBasisPoints(),\r\n            vault.stableSwapFeeBasisPoints(),\r\n            maxMarginFeeBasisPoints, // marginFeeBasisPoints\r\n            vault.liquidationFeeUsd(),\r\n            vault.minProfitTime(),\r\n            vault.hasDynamicFees()\r\n        );\r\n    }\r\n\r\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external override onlyHandlerAndAbove {\r\n        IVault(_vault).setIsLeverageEnabled(_isLeverageEnabled);\r\n    }\r\n\r\n    function setTokenConfig(\r\n        address _vault,\r\n        address _token,\r\n        uint256 _tokenWeight,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        uint256 _bufferAmount,\r\n        uint256 _usdgAmount\r\n    ) external onlyKeeperAndAbove {\r\n        require(_minProfitBps <= 500, \"Timelock: invalid _minProfitBps\");\r\n\r\n        IVault vault = IVault(_vault);\r\n        require(vault.whitelistedTokens(_token), \"Timelock: token not yet whitelisted\");\r\n\r\n        uint256 tokenDecimals = vault.tokenDecimals(_token);\r\n        bool isStable = vault.stableTokens(_token);\r\n        bool isShortable = vault.shortableTokens(_token);\r\n\r\n        IVault(_vault).setTokenConfig(\r\n            _token,\r\n            tokenDecimals,\r\n            _tokenWeight,\r\n            _minProfitBps,\r\n            _maxUsdgAmount,\r\n            isStable,\r\n            isShortable\r\n        );\r\n\r\n        IVault(_vault).setBufferAmount(_token, _bufferAmount);\r\n\r\n        IVault(_vault).setUsdgAmount(_token, _usdgAmount);\r\n    }\r\n\r\n    function setUsdgAmounts(address _vault, address[] memory _tokens, uint256[] memory _usdgAmounts) external onlyKeeperAndAbove {\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            IVault(_vault).setUsdgAmount(_tokens[i], _usdgAmounts[i]);\r\n        }\r\n    }\r\n\r\n    function updateUsdgSupply(uint256 usdgAmount) external onlyKeeperAndAbove {\r\n        address usdg = IGlpManager(glpManager).usdg();\r\n        uint256 balance = IERC20(usdg).balanceOf(glpManager);\r\n\r\n        IUSDG(usdg).addVault(address(this));\r\n\r\n        if (usdgAmount > balance) {\r\n            uint256 mintAmount = usdgAmount.sub(balance);\r\n            IUSDG(usdg).mint(glpManager, mintAmount);\r\n        } else {\r\n            uint256 burnAmount = balance.sub(usdgAmount);\r\n            IUSDG(usdg).burn(glpManager, burnAmount);\r\n        }\r\n\r\n        IUSDG(usdg).removeVault(address(this));\r\n    }\r\n\r\n    function setShortsTrackerAveragePriceWeight(uint256 _shortsTrackerAveragePriceWeight) external onlyAdmin {\r\n        IGlpManager(glpManager).setShortsTrackerAveragePriceWeight(_shortsTrackerAveragePriceWeight);\r\n    }\r\n\r\n    function setGlpCooldownDuration(uint256 _cooldownDuration) external onlyAdmin {\r\n        require(_cooldownDuration < 2 hours, \"Timelock: invalid _cooldownDuration\");\r\n        IGlpManager(glpManager).setCooldownDuration(_cooldownDuration);\r\n    }\r\n\r\n    function setMaxGlobalShortSize(address _vault, address _token, uint256 _amount) external onlyAdmin {\r\n        IVault(_vault).setMaxGlobalShortSize(_token, _amount);\r\n    }\r\n\r\n    function removeAdmin(address _token, address _account) external onlyAdmin {\r\n        IYieldToken(_token).removeAdmin(_account);\r\n    }\r\n\r\n    function setIsSwapEnabled(address _vault, bool _isSwapEnabled) external onlyKeeperAndAbove {\r\n        IVault(_vault).setIsSwapEnabled(_isSwapEnabled);\r\n    }\r\n\r\n    function setTier(address _referralStorage, uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external onlyKeeperAndAbove {\r\n        IReferralStorage(_referralStorage).setTier(_tierId, _totalRebate, _discountShare);\r\n    }\r\n\r\n    function setReferrerTier(address _referralStorage, address _referrer, uint256 _tierId) external onlyKeeperAndAbove {\r\n        IReferralStorage(_referralStorage).setReferrerTier(_referrer, _tierId);\r\n    }\r\n\r\n    function govSetCodeOwner(address _referralStorage, bytes32 _code, address _newAccount) external onlyKeeperAndAbove {\r\n        IReferralStorage(_referralStorage).govSetCodeOwner(_code, _newAccount);\r\n    }\r\n\r\n    function setVaultUtils(address _vault, IVaultUtils _vaultUtils) external onlyAdmin {\r\n        IVault(_vault).setVaultUtils(_vaultUtils);\r\n    }\r\n\r\n    function setMaxGasPrice(address _vault, uint256 _maxGasPrice) external onlyAdmin {\r\n        require(_maxGasPrice > 5000000000, \"Invalid _maxGasPrice\");\r\n        IVault(_vault).setMaxGasPrice(_maxGasPrice);\r\n    }\r\n\r\n    function withdrawFees(address _vault, address _token, address _receiver) external onlyAdmin {\r\n        IVault(_vault).withdrawFees(_token, _receiver);\r\n    }\r\n\r\n    function batchWithdrawFees(address _vault, address[] memory _tokens) external onlyKeeperAndAbove {\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            IVault(_vault).withdrawFees(_tokens[i], admin);\r\n        }\r\n    }\r\n\r\n    function setInPrivateLiquidationMode(address _vault, bool _inPrivateLiquidationMode) external onlyAdmin {\r\n        IVault(_vault).setInPrivateLiquidationMode(_inPrivateLiquidationMode);\r\n    }\r\n\r\n    function setLiquidator(address _vault, address _liquidator, bool _isActive) external onlyAdmin {\r\n        IVault(_vault).setLiquidator(_liquidator, _isActive);\r\n    }\r\n\r\n    function setInPrivateTransferMode(address _token, bool _inPrivateTransferMode) external onlyAdmin {\r\n        IBaseToken(_token).setInPrivateTransferMode(_inPrivateTransferMode);\r\n    }\r\n\r\n    function batchSetBonusRewards(address _vester, address[] memory _accounts, uint256[] memory _amounts) external onlyKeeperAndAbove {\r\n        require(_accounts.length == _amounts.length, \"Timelock: invalid lengths\");\r\n\r\n        IHandlerTarget(_vester).setHandler(address(this), true);\r\n\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            address account = _accounts[i];\r\n            uint256 amount = _amounts[i];\r\n            IVester(_vester).setBonusRewards(account, amount);\r\n        }\r\n\r\n        IHandlerTarget(_vester).setHandler(address(this), false);\r\n    }\r\n\r\n    function transferIn(address _sender, address _token, uint256 _amount) external onlyAdmin {\r\n        IERC20(_token).transferFrom(_sender, address(this), _amount);\r\n    }\r\n\r\n    function signalApprove(address _token, address _spender, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"approve\", _token, _spender, _amount));\r\n        _setPendingAction(action);\r\n        emit SignalApprove(_token, _spender, _amount, action);\r\n    }\r\n\r\n    function approve(address _token, address _spender, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"approve\", _token, _spender, _amount));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n        IERC20(_token).approve(_spender, _amount);\r\n    }\r\n\r\n    function signalWithdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"withdrawToken\", _target, _token, _receiver, _amount));\r\n        _setPendingAction(action);\r\n        emit SignalWithdrawToken(_target, _token, _receiver, _amount, action);\r\n    }\r\n\r\n    function withdrawToken(address _target, address _token, address _receiver, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"withdrawToken\", _target, _token, _receiver, _amount));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n        IBaseToken(_target).withdrawToken(_token, _receiver, _amount);\r\n    }\r\n\r\n    function signalMint(address _token, address _receiver, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"mint\", _token, _receiver, _amount));\r\n        _setPendingAction(action);\r\n        emit SignalMint(_token, _receiver, _amount, action);\r\n    }\r\n\r\n    function processMint(address _token, address _receiver, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"mint\", _token, _receiver, _amount));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n\r\n        _mint(_token, _receiver, _amount);\r\n    }\r\n\r\n    function signalSetGov(address _target, address _gov) external override onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"setGov\", _target, _gov));\r\n        _setPendingAction(action);\r\n        emit SignalSetGov(_target, _gov, action);\r\n    }\r\n\r\n    function setGov(address _target, address _gov) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"setGov\", _target, _gov));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n        ITimelockTarget(_target).setGov(_gov);\r\n    }\r\n\r\n    function signalSetHandler(address _target, address _handler, bool _isActive) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"setHandler\", _target, _handler, _isActive));\r\n        _setPendingAction(action);\r\n        emit SignalSetHandler(_target, _handler, _isActive, action);\r\n    }\r\n\r\n    function setHandler(address _target, address _handler, bool _isActive) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"setHandler\", _target, _handler, _isActive));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n        IHandlerTarget(_target).setHandler(_handler, _isActive);\r\n    }\r\n\r\n    function signalSetPriceFeed(address _vault, address _priceFeed) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"setPriceFeed\", _vault, _priceFeed));\r\n        _setPendingAction(action);\r\n        emit SignalSetPriceFeed(_vault, _priceFeed, action);\r\n    }\r\n\r\n    function setPriceFeed(address _vault, address _priceFeed) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"setPriceFeed\", _vault, _priceFeed));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n        IVault(_vault).setPriceFeed(_priceFeed);\r\n    }\r\n\r\n    function signalRedeemUsdg(address _vault, address _token, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"redeemUsdg\", _vault, _token, _amount));\r\n        _setPendingAction(action);\r\n        emit SignalRedeemUsdg(_vault, _token, _amount);\r\n    }\r\n\r\n    function redeemUsdg(address _vault, address _token, uint256 _amount) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\"redeemUsdg\", _vault, _token, _amount));\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n\r\n        address usdg = IVault(_vault).usdg();\r\n        IVault(_vault).setManager(address(this), true);\r\n        IUSDG(usdg).addVault(address(this));\r\n\r\n        IUSDG(usdg).mint(address(this), _amount);\r\n        IERC20(usdg).transfer(address(_vault), _amount);\r\n\r\n        IVault(_vault).sellUSDG(_token, mintReceiver);\r\n\r\n        IVault(_vault).setManager(address(this), false);\r\n        IUSDG(usdg).removeVault(address(this));\r\n    }\r\n\r\n    function signalVaultSetTokenConfig(\r\n        address _vault,\r\n        address _token,\r\n        uint256 _tokenDecimals,\r\n        uint256 _tokenWeight,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        bool _isStable,\r\n        bool _isShortable\r\n    ) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\r\n            \"vaultSetTokenConfig\",\r\n            _vault,\r\n            _token,\r\n            _tokenDecimals,\r\n            _tokenWeight,\r\n            _minProfitBps,\r\n            _maxUsdgAmount,\r\n            _isStable,\r\n            _isShortable\r\n        ));\r\n\r\n        _setPendingAction(action);\r\n\r\n        emit SignalVaultSetTokenConfig(\r\n            _vault,\r\n            _token,\r\n            _tokenDecimals,\r\n            _tokenWeight,\r\n            _minProfitBps,\r\n            _maxUsdgAmount,\r\n            _isStable,\r\n            _isShortable\r\n        );\r\n    }\r\n\r\n    function vaultSetTokenConfig(\r\n        address _vault,\r\n        address _token,\r\n        uint256 _tokenDecimals,\r\n        uint256 _tokenWeight,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        bool _isStable,\r\n        bool _isShortable\r\n    ) external onlyAdmin {\r\n        bytes32 action = keccak256(abi.encodePacked(\r\n            \"vaultSetTokenConfig\",\r\n            _vault,\r\n            _token,\r\n            _tokenDecimals,\r\n            _tokenWeight,\r\n            _minProfitBps,\r\n            _maxUsdgAmount,\r\n            _isStable,\r\n            _isShortable\r\n        ));\r\n\r\n        _validateAction(action);\r\n        _clearAction(action);\r\n\r\n        IVault(_vault).setTokenConfig(\r\n            _token,\r\n            _tokenDecimals,\r\n            _tokenWeight,\r\n            _minProfitBps,\r\n            _maxUsdgAmount,\r\n            _isStable,\r\n            _isShortable\r\n        );\r\n    }\r\n\r\n    function cancelAction(bytes32 _action) external onlyAdmin {\r\n        _clearAction(_action);\r\n    }\r\n\r\n    function _mint(address _token, address _receiver, uint256 _amount) private {\r\n        IMintable mintable = IMintable(_token);\r\n\r\n        mintable.setMinter(address(this), true);\r\n\r\n        mintable.mint(_receiver, _amount);\r\n        require(IERC20(_token).totalSupply() <= maxTokenSupply, \"Timelock: maxTokenSupply exceeded\");\r\n\r\n        mintable.setMinter(address(this), false);\r\n    }\r\n\r\n    function _setPendingAction(bytes32 _action) private {\r\n        require(pendingActions[_action] == 0, \"Timelock: action already signalled\");\r\n        pendingActions[_action] = block.timestamp.add(buffer);\r\n        emit SignalPendingAction(_action);\r\n    }\r\n\r\n    function _validateAction(bytes32 _action) private view {\r\n        require(pendingActions[_action] != 0, \"Timelock: action not signalled\");\r\n        require(pendingActions[_action] < block.timestamp, \"Timelock: action time not yet passed\");\r\n    }\r\n\r\n    function _clearAction(bytes32 _action) private {\r\n        require(pendingActions[_action] != 0, \"Timelock: invalid _action\");\r\n        delete pendingActions[_action];\r\n        emit ClearAction(_action);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_glpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMarginFeeBasisPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"ClearAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalPendingAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SignalRedeemUsdg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalSetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalSetHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalSetPriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minProfitBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxUsdgAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShortable\",\"type\":\"bool\"}],\"name\":\"SignalVaultSetTokenConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalWithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUNDING_RATE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEVERAGE_VALIDATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vester\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchSetBonusRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"batchWithdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_action\",\"type\":\"bytes32\"}],\"name\":\"cancelAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"disableLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"enableLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"glpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"govSetCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initGlpManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRewardRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"processMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeemUsdg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setContractHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setExternalAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableTaxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSwapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasDynamicFees\",\"type\":\"bool\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableFundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"setFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownDuration\",\"type\":\"uint256\"}],\"name\":\"setGlpCooldownDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_inPrivateLiquidationMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateLiquidationMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_inPrivateTransferMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateTransferMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMarginFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setMarginFeeBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxGlobalShortSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"setReferrerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shortsTrackerAveragePriceWeight\",\"type\":\"uint256\"}],\"name\":\"setShortsTrackerAveragePriceWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldToggleIsLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setShouldToggleIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableTaxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSwapFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdgAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bufferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdgAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_usdgAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setUsdgAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IVaultUtils\",\"name\":\"_vaultUtils\",\"type\":\"address\"}],\"name\":\"setVaultUtils\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldToggleIsLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalRedeemUsdg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"signalSetGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"signalSetHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"signalSetPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdgAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"}],\"name\":\"signalVaultSetTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdgAmount\",\"type\":\"uint256\"}],\"name\":\"updateUsdgSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdgAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"}],\"name\":\"vaultSetTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Timelock", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "000000000000000000000000b1dd2fdb023cb54b7cc2a0f5d9e8d47a9f7723ce000000000000000000000000000000000000000000000000000000000002a300000000000000000000000000dd257d090fa0f9ffb496b790844418593e969ba6000000000000000000000000dd257d090fa0f9ffb496b790844418593e969ba6000000000000000000000000749da3a34a6e1b098f3bfaed23dad2b7d7846b9b0000000000000000000000009ac78c583bd14370248fb65c151d33cf21c1f4e4000000000000000000000000000000000000000000295be96e64066972000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000001f4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f32d657a169e9cb0a0a85162b88a2864dfe827d13c8a19d1b4a9ad8654db986b"}