{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"pragma solidity ^0.7.4;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"EliteFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator to use with ERC31337 AMM pairs\\r\\nEnsures 100% of accessible funds are backed at all times\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\ncontract EliteFloorCalculator is IFloorCalculator, TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    IERC20 immutable rootedToken;\\r\\n    address immutable rootedElitePair;\\r\\n    address immutable rootedBasePair;\\r\\n    IPancakeRouter02 immutable internal pancakeRouter;\\r\\n    IPancakeFactory immutable internal pancakeFactory;\\r\\n    EnumerableSet.AddressSet ignoredAddresses;\\r\\n\\r\\n    constructor(IERC20 _rootedToken, IERC20 _eliteToken, IERC20 _baseToken, IPancakeFactory _pancakeFactory, IPancakeRouter02 _pancakeRouter)\\r\\n    {\\r\\n        rootedToken = _rootedToken;\\r\\n        pancakeFactory = _pancakeFactory;\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n\\r\\n        rootedElitePair = _pancakeFactory.getPair(address(_eliteToken), address(_rootedToken));\\r\\n        rootedBasePair = _pancakeFactory.getPair(address(_baseToken), address(_rootedToken));\\r\\n    }    \\r\\n\\r\\n\\r\\n    function setIgnoreAddresses(address ignoredAddress, bool add) public ownerOnly()\\r\\n    {\\r\\n        if (add) \\r\\n        { \\r\\n            ignoredAddresses.add(ignoredAddress); \\r\\n        } \\r\\n        else \\r\\n        { \\r\\n            ignoredAddresses.remove(ignoredAddress); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIgnoredAddress(address ignoredAddress) public view returns (bool)\\r\\n    {\\r\\n        return ignoredAddresses.contains(ignoredAddress);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressCount() public view returns (uint256)\\r\\n    {\\r\\n        return ignoredAddresses.length();\\r\\n    }\\r\\n\\r\\n    function ignoredAddressAt(uint256 index) public view returns (address)\\r\\n    {\\r\\n        return ignoredAddresses.at(index);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressesTotalBalance() public view returns (uint256)\\r\\n    {\\r\\n        uint256 total = 0;\\r\\n        for (uint i = 0; i \\u003c ignoredAddresses.length(); i++) \\r\\n        {\\r\\n            total = total.add(rootedToken.balanceOf(ignoredAddresses.at(i)));\\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) public override view returns (uint256)\\r\\n    {\\r\\n        uint256 totalRootedInPairs = rootedToken.balanceOf(rootedElitePair).add(rootedToken.balanceOf(rootedBasePair));\\r\\n        uint256 totalBaseAndEliteInPairs = eliteToken.balanceOf(rootedElitePair).add(baseToken.balanceOf(rootedBasePair));\\r\\n        uint256 rootedCirculatingSupply = rootedToken.totalSupply().sub(totalRootedInPairs).sub(ignoredAddressesTotalBalance());\\r\\n        uint256 amountUntilFloor = pancakeRouter.getAmountOut(rootedCirculatingSupply, totalRootedInPairs, totalBaseAndEliteInPairs);\\r\\n\\r\\n        uint256 totalExcessInPools = totalBaseAndEliteInPairs.sub(amountUntilFloor);\\r\\n        uint256 previouslySwept = eliteToken.totalSupply().sub(baseToken.balanceOf(address(eliteToken)));\\r\\n        \\r\\n        if (previouslySwept \\u003e= totalExcessInPools) { return 0; }\\r\\n\\r\\n        return totalExcessInPools.sub(previouslySwept);\\r\\n    }\\r\\n}\"},\"EliteFloorCalculatorV1.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA floor calculator to use with ERC31337 AMM pairs\\r\\nEnsures 100% of accessible funds are backed at all times\\r\\n*/\\r\\n\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./PancakeLibrary.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\n\\r\\ncontract EliteFloorCalculatorV1 is IFloorCalculator, TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    IERC20 immutable rootedToken;\\r\\n    IPancakeFactory immutable pancakeFactory;\\r\\n    EnumerableSet.AddressSet ignoredAddresses;\\r\\n\\r\\n    constructor(IERC20 _rootedToken, IPancakeFactory _pancakeFactory)\\r\\n    {\\r\\n        rootedToken = _rootedToken;\\r\\n        pancakeFactory = _pancakeFactory;\\r\\n    }    \\r\\n\\r\\n    function setIgnoreAddresses(address ignoredAddress, bool add) public ownerOnly()\\r\\n    {\\r\\n        if (add) \\r\\n        { \\r\\n            ignoredAddresses.add(ignoredAddress); \\r\\n        } \\r\\n        else \\r\\n        { \\r\\n            ignoredAddresses.remove(ignoredAddress); \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIgnoredAddress(address ignoredAddress) public view returns (bool)\\r\\n    {\\r\\n        return ignoredAddresses.contains(ignoredAddress);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressCount() public view returns (uint256)\\r\\n    {\\r\\n        return ignoredAddresses.length();\\r\\n    }\\r\\n\\r\\n    function ignoredAddressAt(uint256 index) public view returns (address)\\r\\n    {\\r\\n        return ignoredAddresses.at(index);\\r\\n    }\\r\\n\\r\\n    function ignoredAddressesTotalBalance() public view returns (uint256)\\r\\n    {\\r\\n        uint256 total = 0;\\r\\n        for (uint i = 0; i \\u003c ignoredAddresses.length(); i++) \\r\\n        {\\r\\n            total = total.add(rootedToken.balanceOf(ignoredAddresses.at(i)));\\r\\n        }\\r\\n\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function calculateExcessInPool(IERC20 token, address pair, uint256 liquidityShare, uint256 rootedTokenTotalSupply, uint256 rootedTokenPoolsLiquidity) internal view returns (uint256)\\r\\n    {\\r\\n        uint256 freeRootedToken = (rootedTokenTotalSupply.sub(rootedTokenPoolsLiquidity)).mul(liquidityShare).div(1e12);\\r\\n\\r\\n        uint256 sellAllProceeds = 0;\\r\\n        if (freeRootedToken \\u003e 0) \\r\\n        {\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(rootedToken);\\r\\n            path[1] = address(token);\\r\\n            uint256[] memory amountsOut = PancakeLibrary.getAmountsOut(address(pancakeFactory), freeRootedToken, path);\\r\\n            sellAllProceeds = amountsOut[1];\\r\\n        }\\r\\n\\r\\n        uint256 backingInPool = token.balanceOf(pair);\\r\\n        if (backingInPool \\u003c= sellAllProceeds) { return 0; }\\r\\n        uint256 excessInPool = backingInPool - sellAllProceeds;\\r\\n\\r\\n        return excessInPool;\\r\\n    }\\r\\n\\r\\n    function calculateExcessInPools(IERC20 baseToken, IERC20 eliteToken) public view returns (uint256)\\r\\n    {\\r\\n        address rootedElitePair = PancakeLibrary.pairFor(address(pancakeFactory), address(rootedToken), address(eliteToken));\\r\\n        address rootedBasePair = PancakeLibrary.pairFor(address(pancakeFactory), address(rootedToken), address(baseToken));   \\r\\n        \\r\\n        uint256 rootedTokenTotalSupply = rootedToken.totalSupply().sub(ignoredAddressesTotalBalance());\\r\\n        uint256 rootedTokenPoolsLiquidity = rootedToken.balanceOf(rootedElitePair).add(rootedToken.balanceOf(rootedBasePair));\\r\\n        uint256 baseTokenPoolsLiquidity = eliteToken.balanceOf(rootedElitePair).add(baseToken.balanceOf(rootedBasePair));\\r\\n\\r\\n        uint256 rootedLiquidityShareInElitePair = rootedToken.balanceOf(rootedElitePair).mul(1e12).div(rootedTokenPoolsLiquidity);\\r\\n        uint256 eliteLiquidityShareInElitePair = eliteToken.balanceOf(rootedElitePair).mul(1e12).div(baseTokenPoolsLiquidity);\\r\\n        uint256 avgLiquidityShareInElitePair = (rootedLiquidityShareInElitePair.add(eliteLiquidityShareInElitePair)).div(2);\\r\\n        uint256 one = 1e12;\\r\\n\\r\\n        uint256 excessInElitePool = calculateExcessInPool(eliteToken, rootedElitePair, avgLiquidityShareInElitePair, rootedTokenTotalSupply, rootedTokenPoolsLiquidity);\\r\\n        uint256 excessInBasePool = calculateExcessInPool(baseToken, rootedBasePair, (one).sub(avgLiquidityShareInElitePair), rootedTokenTotalSupply, rootedTokenPoolsLiquidity);\\r\\n        return excessInElitePool.add(excessInBasePool);\\r\\n    }\\r\\n\\r\\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) public override view returns (uint256)\\r\\n    {        \\r\\n        uint256 excessInPools = calculateExcessInPools(baseToken, eliteToken);\\r\\n\\r\\n        uint256 requiredBacking = eliteToken.totalSupply().sub(excessInPools);\\r\\n        uint256 currentBacking = baseToken.balanceOf(address(eliteToken));\\r\\n        if (requiredBacking \\u003e= currentBacking) { return 0; }\\r\\n        return currentBacking - requiredBacking;\\r\\n    }\\r\\n}\"},\"EliteToken.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./ERC31337.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ncontract EliteToken is ERC31337\\r\\n{\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public freeParticipantControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipants; \\r\\n\\r\\n    mapping (address =\\u003e bool) public burnRateControllers;\\r\\n    uint16 burnRate;   \\r\\n\\r\\n    constructor (IERC20 _wrappedToken) ERC31337(_wrappedToken, \\\"eliteSK2\\\", \\\"eSK2\\\")\\r\\n    {\\r\\n    }    \\r\\n\\r\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        freeParticipantControllers[freeParticipantController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipant(address participant, bool free) public\\r\\n    {\\r\\n        require (msg.sender == owner || freeParticipantControllers[msg.sender], \\\"Not an owner or free participant controller\\\");\\r\\n        freeParticipants[participant] = free;\\r\\n    }\\r\\n\\r\\n    function setBurnRateController(address burnRateController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        burnRateControllers[burnRateController] = allow;\\r\\n    }\\r\\n\\r\\n    function setBurnRate(uint16 _burnRate) public // 10000 = 100%\\r\\n    {\\r\\n        require (msg.sender == owner || burnRateControllers[msg.sender], \\\"Not an owner or burn rate controller\\\");\\r\\n        require (_burnRate \\u003c= 10000, \\\"But rate must be less or equal to 100%\\\");\\r\\n       \\r\\n        burnRate = _burnRate;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \\r\\n    {\\r\\n        require(sender != address(0), \\\"EliteToken: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"EliteToken: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        uint256 remaining = amount;\\r\\n\\r\\n        if (!freeParticipants[sender] \\u0026\\u0026 !freeParticipants[recipient] \\u0026\\u0026 burnRate \\u003e 0)\\r\\n        {\\r\\n            uint256 burn = amount * burnRate / 10000;\\r\\n            amount = remaining = remaining.sub(burn, \\\"Burn too much\\\");\\r\\n            _burn(sender, burn);\\r\\n        }\\r\\n        \\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"EliteToken: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\\r\\n        \\r\\n        emit Transfer(sender, recipient, remaining);\\r\\n    }\\r\\n}\"},\"EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint256(_at(set._inner, index)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nSimplified thanks to higher solidity version\\r\\nBut same functionality\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\nabstract contract ERC20 is IERC20 \\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) internal _balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) public override allowance;\\r\\n\\r\\n    uint256 public override totalSupply;\\r\\n\\r\\n    string public override name;\\r\\n    string public override symbol;\\r\\n    uint8 public override decimals = 18;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory _name, string memory _symbol) \\r\\n    {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address a) public virtual override view returns (uint256) { return _balanceOf[a]; }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 oldAllowance = allowance[sender][msg.sender];\\r\\n        if (oldAllowance != uint256(-1)) {\\r\\n            _approve(sender, msg.sender, oldAllowance.sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, allowance[msg.sender][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        _balanceOf[account] = _balanceOf[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balanceOf[account] = _balanceOf[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowance[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 _decimals) internal {\\r\\n        decimals = _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\"},\"ERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA wrapped token, where the underlying token can be swept\\r\\nand used for other purposes\\r\\nGoverned by an installable floor calculator contract\\r\\nSweepable by designated sweeper addresses\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\nimport \\\"./WrappedERC20.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\n\\r\\ncontract ERC31337 is WrappedERC20, IERC31337\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IFloorCalculator public override floorCalculator;\\r\\n    \\r\\n    mapping (address =\\u003e bool) public override sweepers;\\r\\n\\r\\n    constructor(IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        WrappedERC20(_wrappedToken, _name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) public override ownerOnly()\\r\\n    {\\r\\n        floorCalculator = _floorCalculator;\\r\\n    }\\r\\n\\r\\n    function setSweeper(address sweeper, bool allow) public override ownerOnly()\\r\\n    {\\r\\n        sweepers[sweeper] = allow;\\r\\n    }\\r\\n\\r\\n    function sweepFloor(address to) public override returns (uint256 amountSwept)\\r\\n    {\\r\\n        require (to != address(0),  \\\" transfer to the zero address\\\");\\r\\n        require (sweepers[msg.sender], \\\"Sweepers only\\\");\\r\\n        amountSwept = floorCalculator.calculateSubFloor(wrappedToken, this);\\r\\n        if (amountSwept \\u003e 0) {\\r\\n            wrappedToken.safeTransfer(to, amountSwept);\\r\\n        }\\r\\n    }\\r\\n}\"},\"FeeSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IGatedERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract FeeSplitter is TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    \\r\\n    uint256 devRateMin = 1000;  \\r\\n    uint256 rootRateMin = 1000; \\r\\n    address public devAddress;\\r\\n    address public immutable deployerAddress;    \\r\\n    address public lazarusPit;\\r\\n\\r\\n    mapping (IGatedERC20 =\\u003e address[]) public feeCollectors;\\r\\n    mapping (IGatedERC20 =\\u003e uint256[]) public feeRates;\\r\\n    mapping (IGatedERC20 =\\u003e uint256) public burnRates;\\r\\n\\r\\n    constructor(address _devAddress)\\r\\n    {\\r\\n        deployerAddress = msg.sender;\\r\\n        devAddress = _devAddress;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function setDevAddress(address _devAddress) public\\r\\n    {\\r\\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \\\"Not a deployer or dev address\\\");\\r\\n        devAddress = _devAddress;\\r\\n    }    \\r\\n\\r\\n    function setLazarusPit(address _lazarusPit) public\\r\\n    {\\r\\n        require (msg.sender == deployerAddress || msg.sender == devAddress, \\\"Not a deployer or dev address\\\");\\r\\n        lazarusPit = _lazarusPit;\\r\\n    }\\r\\n\\r\\n    function setFees(IGatedERC20 token, uint256 burnRate, address[] memory collectors, uint256[] memory rates) public ownerOnly() // 100% = 10000\\r\\n    {\\r\\n        //require (collectors.length == rates.length \\u0026\\u0026 collectors.length \\u003e 1, \\\"Fee Collectors and Rates must be the same size and contain at least 2 elements\\\");\\r\\n        require (collectors[0] == devAddress, \\\"First address must be dev address\\\");\\r\\n        //require (rates[0] \\u003e= devRateMin \\u0026\\u0026 rates[1] \\u003e= rootRateMin, \\\"First rate must be greater or equal to devRateMin and second rate must be greater or equal to rootRateMin\\\");\\r\\n        \\r\\n        uint256 totalRate = burnRate;\\r\\n        for (uint256 i = 0; i \\u003c rates.length; i++)\\r\\n        {\\r\\n            totalRate = totalRate + rates[i];\\r\\n        }\\r\\n\\r\\n        require (totalRate == 10000, \\\"Total fee rate must be 100%\\\");\\r\\n        \\r\\n        if (token.balanceOf(address(this)) \\u003e 0)\\r\\n        {\\r\\n            payFees(token);\\r\\n        }\\r\\n\\r\\n        feeCollectors[token] = collectors;\\r\\n        feeRates[token] = rates;\\r\\n        burnRates[token] = burnRate;\\r\\n    }\\r\\n\\r\\n    function payFees(IGatedERC20 token) public\\r\\n    {\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n        require (balance \\u003e 0, \\\"Nothing to pay\\\");\\r\\n\\r\\n        if (burnRates[token] \\u003e 0)\\r\\n        {\\r\\n            uint256 burnAmount = burnRates[token] * balance / 10000;\\r\\n            token.transfer(lazarusPit, burnAmount);\\r\\n        }\\r\\n\\r\\n        address[] memory collectors = feeCollectors[token];\\r\\n        uint256[] memory rates = feeRates[token];\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c collectors.length; i++)\\r\\n        {\\r\\n            address collector = collectors[i];\\r\\n            uint256 rate = rates[i];\\r\\n\\r\\n            if (rate \\u003e 0)\\r\\n            {\\r\\n                uint256 feeAmount = rate * balance / 10000;\\r\\n                token.transfer(collector, feeAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \\r\\n    { \\r\\n        address[] memory collectors = feeCollectors[IGatedERC20(address(token))];\\r\\n        return address(token) != address(this) \\u0026\\u0026 collectors.length == 0; \\r\\n    }\\r\\n}\"},\"GatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA standard ERC20 with an extra hook: An installable transfer\\r\\ngate allowing for token tax and burn on transfer\\r\\n*/\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IGatedERC20.sol\\\";\\r\\n\\r\\nabstract contract GatedERC20 is ERC20, TokensRecoverable, IGatedERC20\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ITransferGate public override transferGate;\\r\\n    address [] public tokenHolder;\\r\\n    uint256 public numberOfTokenHolders = 0;\\r\\n    mapping(address =\\u003e bool) public exist;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) public override ownerOnly()\\r\\n    {\\r\\n        transferGate = _transferGate;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override \\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        if(!exist[recipient]){\\r\\n            tokenHolder.push(recipient);\\r\\n            numberOfTokenHolders++;\\r\\n            exist[recipient] = true;\\r\\n        }\\r\\n        ITransferGate _transferGate = transferGate;\\r\\n        uint256 remaining = amount;\\r\\n        if (address(_transferGate) != address(0)) \\r\\n        {\\r\\n            address splitter = _transferGate.feeSplitter();\\r\\n            uint256 fees = _transferGate.handleTransfer(msg.sender, sender, recipient, amount);\\r\\n            if (fees \\u003e 0)\\r\\n            {\\r\\n               _balanceOf[splitter] = _balanceOf[splitter].add(fees);\\r\\n                emit Transfer(sender, splitter, fees);\\r\\n                remaining = remaining.sub(fees);\\r\\n            }           \\r\\n        }\\r\\n        _balanceOf[sender] = _balanceOf[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balanceOf[recipient] = _balanceOf[recipient].add(remaining);\\r\\n        emit Transfer(sender, recipient, remaining);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 amount) public override\\r\\n    {\\r\\n        _burn(msg.sender, amount);\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IERC20 \\r\\n{\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address _account) external view returns (uint256);\\r\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\r\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IERC31337.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\ninterface IERC31337 is IWrappedERC20\\r\\n{\\r\\n    function floorCalculator() external view returns (IFloorCalculator);\\r\\n    function sweepers(address _sweeper) external view returns (bool);\\r\\n    \\r\\n    function setFloorCalculator(IFloorCalculator _floorCalculator) external;\\r\\n    function setSweeper(address _sweeper, bool _allow) external;\\r\\n    function sweepFloor(address _to) external returns (uint256 amountSwept);\\r\\n}\"},\"IFloorCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IFloorCalculator\\r\\n{\\r\\n    function calculateSubFloor(IERC20 baseToken, IERC20 eliteToken) external view returns (uint256);\\r\\n}\"},\"IGatedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\ninterface IGatedERC20 is IERC20\\r\\n{\\r\\n    function transferGate() external view returns (ITransferGate);\\r\\n\\r\\n    function setTransferGate(ITransferGate _transferGate) external;\\r\\n    function burn( uint256 amount) external;\\r\\n}\"},\"ILiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILiquidityController\\r\\n{\\r\\n    function balancePriceBase(uint256 amount) external;\\r\\n    function balancePriceElite(uint256 amount) external;\\r\\n    function removeBuyAndTax(uint256 amount, address token, uint16 tax, uint256 time) external;\\r\\n    function buyAndTax(address token, uint256 amountToSpend, uint16 tax, uint256 time) external;\\r\\n    function sweepFloor() external;\\r\\n    function zapEliteToBase(uint256 liquidity) external;\\r\\n    function zapBaseToElite(uint256 liquidity) external;\\r\\n    function wrapToElite(uint256 baseAmount) external;\\r\\n    function unwrapElite(uint256 eliteAmount) external;\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) external;\\r\\n    function removeLiquidity(address eliteOrBase, uint256 tokens) external;    \\r\\n    function buyRooted(address token, uint256 amountToSpend) external;\\r\\n    function sellRooted(address token, uint256 amountToSpend) external;   \\r\\n}\"},\"ILiquidityLockedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\n\\r\\ninterface ILiquidityLockedERC20\\r\\n{\\r\\n    function setLiquidityLock(IPancakePair _liquidityPair, bool _locked) external;\\r\\n}\"},\"IMarketDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IMarketDistribution\\r\\n{\\r\\n    function distributionComplete() external view returns (bool);\\r\\n    function vestingPeriodStartTime() external view returns (uint256); \\r\\n    function vestingPeriodEndTime() external view returns (uint256);\\r\\n    \\r\\n    function distribute() external;        \\r\\n    function claim(address account) external;\\r\\n    function claimReferralRewards(address account, uint256 referralShare) external;\\r\\n}\"},\"IMarketGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IMarketGeneration\\r\\n{\\r\\n    function contribution(address) external view returns (uint256);\\r\\n    function referralPoints(address) external view returns (uint256);    \\r\\n    function totalContribution() external view returns (uint256);\\r\\n    function totalReferralPoints() external view returns (uint256);\\r\\n}\"},\"IOwned.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IOwned\\r\\n{\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address newOwner) external;\\r\\n    function claimOwnership() external;\\r\\n}\"},\"IPancakeCallee.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IPancakeCallee {\\r\\n    function pancakeCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\\r\\n}\"},\"IPancakeERC20.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IPancakeERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\"},\"IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IPancakeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"},\"IPancakeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\u0027./IPancakeRouter01.sol\\u0027;\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"ITokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface ITokensRecoverable\\r\\n{\\r\\n    function recoverTokens(IERC20 token) external;\\r\\n}\"},\"ITransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ITransferGate\\r\\n{\\r\\n    function feeSplitter() external view returns (address);\\r\\n    function handleTransfer(address msgSender, address from, address to, uint256 amount) external returns (uint256);\\r\\n}\"},\"IWBNB.sol\":{\"content\":\"// SPDX-License-Identifier: J-J-J-JENGA!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IWBNB\\r\\n{    \\r\\n    function deposit() external payable;\\r\\n}\"},\"IWrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20Events.sol\\\";\\r\\n\\r\\ninterface IWrappedERC20 is IERC20, IWrappedERC20Events\\r\\n{\\r\\n    function wrappedToken() external view returns (IERC20);\\r\\n    function depositTokens(uint256 _amount) external;\\r\\n    function withdrawTokens(uint256 _amount) external;\\r\\n}\"},\"IWrappedERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IWrappedERC20Events\\r\\n{\\r\\n    event Deposit(address indexed from, uint256 amount);\\r\\n    event Withdrawal(address indexed to, uint256 amount);\\r\\n}\\r\\n\"},\"LazarusPit.sol\":{\"content\":\"pragma solidity ^0.7.4;\\r\\n//The graveyard is a step above a simple burn address \\r\\n//It will serve the community by collecting a redistributing fees\\r\\n//Oscillatig between 50-51%\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\ncontract LazarusPit is Context, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    uint256 public lastRebalance;\\r\\n    uint256 public immutable upperboundPercentage = 51;\\r\\n\\r\\n\\r\\n    IERC20 public immutable token;\\r\\n\\r\\n    event Rebalance(\\r\\n        uint256 tokens\\r\\n    );\\r\\n\\r\\n    constructor (ERC20 _token) public {\\r\\n\\r\\n        //get a handle on the token\\r\\n        token = IERC20(_token);\\r\\n\\r\\n        //a rebalance isn\\u0027t necessary at launch\\r\\n        lastRebalance =  block.timestamp;\\r\\n\\r\\n    }\\r\\n\\r\\n    function rebalance() external {   \\r\\n            \\r\\n        //we should rebalance when we get more than target percentage of the supply in the graveyard\\r\\n        uint256 upperbound = token.totalSupply().mul(upperboundPercentage).div(100);\\r\\n        uint256 target =  token.totalSupply().mul(50).div(100);\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n\\r\\n        //airdrop the difference by sending back to the token contract which will \\r\\n        //split rewards and locked liquidity \\r\\n        if (balance \\u003e upperbound){\\r\\n            uint256 airdrop = balance.sub(target);\\r\\n\\r\\n            //send airdrop to token where it will be added to liquidity \\r\\n            token.transfer(address(token), airdrop);\\r\\n\\r\\n            lastRebalance = block.timestamp;\\r\\n\\r\\n            emit Rebalance(airdrop);\\r\\n        }\\r\\n\\r\\n            \\r\\n    }\\r\\n\\r\\n    function ready() external view returns (bool) {\\r\\n            \\r\\n        //we should rebalance when we get more than 55% of the supply in the graveyard\\r\\n        uint256 upperbound = token.totalSupply().mul(upperboundPercentage).div(100);\\r\\n        uint256 balance = token.balanceOf(address(this));\\r\\n\\r\\n        //airdrop the difference by sending back to the token contract which will \\r\\n        //split rewards and locked liquidity \\r\\n        if (balance \\u003e upperbound){\\r\\n            return true;\\r\\n        }\\r\\n        \\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\"},\"LiquidityController.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./RootedTransferGate.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ILiquidityController.sol\\\";\\r\\nimport \\\"./IFloorCalculator.sol\\\";\\r\\n\\r\\ncontract LiquidityController is TokensRecoverable, ILiquidityController\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IPancakeRouter02 immutable pancakeRouter;\\r\\n    IPancakeFactory immutable pancakeFactory;\\r\\n    IERC20 immutable rooted;\\r\\n    IERC20 immutable base;\\r\\n    IERC31337 immutable elite;\\r\\n    IERC20 immutable rootedEliteLP;\\r\\n    IERC20 immutable rootedBaseLP;\\r\\n    IFloorCalculator public calculator;\\r\\n    RootedTransferGate public gate;\\r\\n    mapping(address =\\u003e bool) public liquidityControllers;\\r\\n\\r\\n    constructor(IPancakeRouter02 _pancakeRouter, IERC20 _base, IERC20 _rooted, IERC31337 _elite, IFloorCalculator _calculator, RootedTransferGate _gate) \\r\\n    {\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n        base = _base;\\r\\n        elite = _elite;\\r\\n        rooted = _rooted;\\r\\n        calculator = _calculator;\\r\\n        gate = _gate;\\r\\n\\r\\n        IPancakeFactory _pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\\r\\n        pancakeFactory = _pancakeFactory;        \\r\\n        \\r\\n        _base.approve(address(_elite), uint256(-1));\\r\\n        _base.approve(address(_pancakeRouter), uint256(-1));\\r\\n        _rooted.approve(address(_pancakeRouter), uint256(-1));\\r\\n        IERC20 _rootedBaseLP = IERC20(_pancakeFactory.getPair(address(_base), address(_rooted)));\\r\\n        _rootedBaseLP.approve(address(_pancakeRouter), uint256(-1));\\r\\n        rootedBaseLP = _rootedBaseLP;\\r\\n        _elite.approve(address(_pancakeRouter), uint256(-1));\\r\\n        IERC20 _rootedEliteLP = IERC20(_pancakeFactory.getPair(address(_elite), address(_rooted)));\\r\\n        _rootedEliteLP.approve(address(_pancakeRouter), uint256(-1));\\r\\n        rootedEliteLP = _rootedEliteLP;\\r\\n    }\\r\\n\\r\\n    modifier liquidityControllerOnly()\\r\\n    {\\r\\n        require(liquidityControllers[msg.sender], \\\"Not a Liquidity Controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Owner function to enable other contracts or addresses to use the Liquidity Controller\\r\\n    function setLiquidityController(address controlAddress, bool controller) public ownerOnly()\\r\\n    {\\r\\n        liquidityControllers[controlAddress] = controller;\\r\\n    }\\r\\n\\r\\n    function setCalculatorAndGate(IFloorCalculator _calculator, RootedTransferGate _gate) public ownerOnly()\\r\\n    {\\r\\n        calculator = _calculator;\\r\\n        gate = _gate;\\r\\n    }\\r\\n\\r\\n    // Removes liquidity, buys from either pool, sets a temporary dump tax\\r\\n    function removeBuyAndTax(uint256 amount, address token, uint16 tax, uint256 time) public override liquidityControllerOnly()\\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        amount = removeLiq(token, amount);\\r\\n        buyRootedToken(token, amount);\\r\\n        gate.setDumpTax(tax, time);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    // Use Base tokens held by this contract to buy from the Base Pool and sell in the Elite Pool\\r\\n    function balancePriceBase(uint256 amount) public override liquidityControllerOnly()\\r\\n    {\\r\\n        amount = buyRootedToken(address(base), amount);\\r\\n        amount = sellRootedToken(address(elite), amount);\\r\\n        elite.withdrawTokens(amount);\\r\\n    }\\r\\n\\r\\n    // Use Base tokens held by this contract to buy from the Elite Pool and sell in the Base Pool\\r\\n    function balancePriceElite(uint256 amount) public override liquidityControllerOnly()\\r\\n    {        \\r\\n        elite.depositTokens(amount);\\r\\n        amount = buyRootedToken(address(elite), amount);\\r\\n        amount = sellRootedToken(address(base), amount);\\r\\n    }\\r\\n\\r\\n    // Uses value in the controller to buy\\r\\n    function buyAndTax(address token, uint256 amountToSpend, uint16 tax, uint256 time) public override liquidityControllerOnly()\\r\\n    {\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n        gate.setDumpTax(tax, time);\\r\\n    }\\r\\n\\r\\n    // Sweeps the Base token under the floor to this address\\r\\n    function sweepFloor() public override liquidityControllerOnly()\\r\\n    {\\r\\n        elite.sweepFloor(address(this));\\r\\n    }\\r\\n\\r\\n    // Move liquidity from Elite pool ---\\u003e\\u003e Base pool\\r\\n    function zapEliteToBase(uint256 liquidity) public override liquidityControllerOnly() \\r\\n    {       \\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(elite), liquidity);\\r\\n        elite.withdrawTokens(liquidity);\\r\\n        addLiq(address(base), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    // Move liquidity from Base pool ---\\u003e\\u003e Elite pool\\r\\n    function zapBaseToElite(uint256 liquidity) public override liquidityControllerOnly() \\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        liquidity = removeLiq(address(base), liquidity);\\r\\n        elite.depositTokens(liquidity);\\r\\n        addLiq(address(elite), liquidity);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function wrapToElite(uint256 baseAmount) public override liquidityControllerOnly() \\r\\n    {\\r\\n        elite.depositTokens(baseAmount);\\r\\n    }\\r\\n\\r\\n    function unwrapElite(uint256 eliteAmount) public override liquidityControllerOnly() \\r\\n    {\\r\\n        elite.withdrawTokens(eliteAmount);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(address eliteOrBase, uint256 baseAmount) public override liquidityControllerOnly() \\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        addLiq(eliteOrBase, baseAmount);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(address eliteOrBase, uint256 tokens) public override liquidityControllerOnly()\\r\\n    {\\r\\n        gate.setUnrestricted(true);\\r\\n        removeLiq(eliteOrBase, tokens);\\r\\n        gate.setUnrestricted(false);\\r\\n    }\\r\\n\\r\\n    function buyRooted(address token, uint256 amountToSpend) public override liquidityControllerOnly()\\r\\n    {\\r\\n        buyRootedToken(token, amountToSpend);\\r\\n    }\\r\\n\\r\\n    function sellRooted(address token, uint256 amountToSpend) public override liquidityControllerOnly()\\r\\n    {\\r\\n        sellRootedToken(token, amountToSpend);\\r\\n    }\\r\\n\\r\\n    function addLiq(address eliteOrBase, uint256 baseAmount) internal \\r\\n    {\\r\\n        pancakeRouter.addLiquidity(address(eliteOrBase), address(rooted), baseAmount, rooted.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function removeLiq(address eliteOrBase, uint256 tokens) internal returns (uint256)\\r\\n    {\\r\\n        (tokens, ) = pancakeRouter.removeLiquidity(address(eliteOrBase), address(rooted), tokens, 0, 0, address(this), block.timestamp);\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    function buyRootedToken(address token, uint256 amountToSpend) internal returns (uint256)\\r\\n    {\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amountToSpend, 0, buyPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1];\\r\\n        return amountToSpend;\\r\\n    }\\r\\n\\r\\n    function sellRootedToken(address token, uint256 amountToSpend) internal returns (uint256)\\r\\n    {\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amountToSpend, 0, sellPath(token), address(this), block.timestamp);\\r\\n        amountToSpend = amounts[1];\\r\\n        return amountToSpend;\\r\\n    }\\r\\n\\r\\n    function buyPath(address token) internal view returns (address[] memory) \\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(token);\\r\\n        path[1] = address(rooted);\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    function sellPath(address token) internal view returns (address[] memory) \\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rooted);\\r\\n        path[1] = address(token);\\r\\n        return path;\\r\\n    }\\r\\n}\"},\"LiquidityLockedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./GatedERC20.sol\\\";\\r\\nimport \\\"./ILiquidityLockedERC20.sol\\\";\\r\\n\\r\\nabstract contract LiquidityLockedERC20 is GatedERC20, ILiquidityLockedERC20\\r\\n{\\r\\n    mapping (IPancakePair =\\u003e bool) public liquidityPairLocked;\\r\\n    mapping (address =\\u003e bool) public liquidityController;\\r\\n\\r\\n    struct CallRecord\\r\\n    {\\r\\n        address origin;\\r\\n        uint32 blockNumber;\\r\\n        bool transferFrom;\\r\\n    }\\r\\n\\r\\n    CallRecord balanceAllowed;\\r\\n\\r\\n    constructor(string memory _name, string memory _symbol)\\r\\n        GatedERC20(_name, _symbol)\\r\\n    {\\r\\n    }\\r\\n\\r\\n    function setLiquidityLock(IPancakePair _liquidityPair, bool _locked) public override\\r\\n    {\\r\\n        require (liquidityController[msg.sender], \\\"Liquidity controller only\\\");\\r\\n        require (_liquidityPair.token0() == address(this) || _liquidityPair.token1() == address(this), \\\"Unrelated pair\\\");\\r\\n        liquidityPairLocked[_liquidityPair] = _locked;\\r\\n    }\\r\\n\\r\\n    function setLiquidityController(address _liquidityController, bool _canControl) public ownerOnly()\\r\\n    {\\r\\n        liquidityController[_liquidityController] = _canControl;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public override view returns (uint256) \\r\\n    {\\r\\n        IPancakePair pair = IPancakePair(address(msg.sender));\\r\\n        if (liquidityPairLocked[pair]) {\\r\\n            CallRecord memory last = balanceAllowed;\\r\\n            require (last.origin == tx.origin \\u0026\\u0026 last.blockNumber == block.number, \\\"Liquidity is locked\\\");\\r\\n            if (last.transferFrom) {\\r\\n                (uint256 reserve0, uint256 reserve1,) = pair.getReserves();\\r\\n                IERC20 token0 = IERC20(pair.token0());\\r\\n                if (address(token0) == address(this)) {\\r\\n                    require (IERC20(pair.token1()).balanceOf(address(pair)) \\u003c reserve1, \\\"Liquidity is locked\\\");\\r\\n                }\\r\\n                else {\\r\\n                    require (token0.balanceOf(address(pair)) \\u003c reserve0, \\\"Liquidity is locked\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return super.balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function allowBalance(bool _transferFrom) private\\r\\n    {\\r\\n        CallRecord memory last = balanceAllowed;\\r\\n        CallRecord memory allow = CallRecord({ \\r\\n            origin: tx.origin,\\r\\n            blockNumber: uint32(block.number),\\r\\n            transferFrom: _transferFrom\\r\\n        });\\r\\n        require (last.origin != allow.origin || last.blockNumber != allow.blockNumber || last.transferFrom != allow.transferFrom, \\\"Liquidity is locked (Please try again next block)\\\");\\r\\n        balanceAllowed = allow;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) \\r\\n    {        \\r\\n        if (liquidityPairLocked[IPancakePair(address(msg.sender))]) {\\r\\n            allowBalance(false);\\r\\n        }\\r\\n        else {\\r\\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\\r\\n        }\\r\\n        return super.transfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) \\r\\n    {\\r\\n        if (liquidityPairLocked[IPancakePair(recipient)]) {\\r\\n            allowBalance(true);\\r\\n        }\\r\\n        else {\\r\\n            balanceAllowed = CallRecord({ origin: address(0), blockNumber: 0, transferFrom: false });\\r\\n        }\\r\\n        return super.transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n}\"},\"MarketDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IMarketDistribution.sol\\\";\\r\\nimport \\\"./IMarketGeneration.sol\\\";\\r\\nimport \\\"./RootedToken.sol\\\";\\r\\nimport \\\"./RootedTransferGate.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC31337.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\n/*\\r\\nIntroducing the Market Generation Event:\\r\\n\\r\\nAllows full and permanent liquidity locking\\r\\nof all raised funds with no commitment to LPs. \\r\\nUsing ERC-31337 we get ALL the raised funds\\r\\nback from liquidity if we lock all the raised\\r\\ntoken with all the supply of the new token and\\r\\nthere is no ability to mint.\\r\\n\\r\\n- Raise with any token\\r\\n- All raised funds get locked forever\\r\\n- ERC-31337 sweeps back all locked value\\r\\n- Recovered value buys from the new market\\r\\n- Any length vesting period\\r\\n- Built in referral system\\r\\n\\r\\nPhases:\\r\\n    Initializing\\r\\n        Call setupEliteRooted()\\r\\n        Call setupBaseRooted() \\r\\n        Call completeSetup()\\r\\n        \\r\\n    Call distribute() to:\\r\\n        Transfer all rootedToken to this contract\\r\\n        Take all BaseToken + rootedToken and create a market\\r\\n        Sweep the floor\\r\\n        Buy rootedToken for the groups\\r\\n        Move liquidity from elite pool to create standard pool\\r\\n        Begin the vesting period with a linier unlock\\r\\n\\r\\n    Complete\\r\\n        Everyone can call claim() to receive their tokens (via the liquidity generation contract)\\r\\n*/\\r\\n\\r\\ncontract MarketDistribution is TokensRecoverable, IMarketDistribution\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bool public override distributionComplete;\\r\\n\\r\\n    address public lazarusPit;\\r\\n    IMarketGeneration public marketGeneration;\\r\\n    IPancakeRouter02 pancakeRouter;\\r\\n    IPancakeFactory pancakeFactory;\\r\\n    RootedToken public rootedToken;\\r\\n    IERC31337 public eliteToken;\\r\\n    IERC20 public baseToken;\\r\\n    address public immutable devAddress;\\r\\n    address public liquidityController;\\r\\n    IPancakePair public rootedEliteLP;\\r\\n    IPancakePair public rootedBaseLP;\\r\\n\\r\\n    // uint256 public constant rootedTokenSupply = 1e25; // 10 million\\r\\n    uint256 public constant rootedTokenSupply = 1e25*10; // 100 mil\\r\\n    uint256 public totalBaseTokenCollected;\\r\\n    uint256 public totalBoughtForContributors;\\r\\n    mapping (address =\\u003e uint256) public claimTime;\\r\\n    mapping (address =\\u003e uint256) public totalClaim;\\r\\n    mapping (address =\\u003e uint256) public remainingClaim;\\r\\n    uint256 public totalBoughtForReferrals;\\r\\n    \\r\\n    uint256 public recoveryDate = block.timestamp + 2592000; // 1 Month\\r\\n    \\r\\n    uint16 public devCutPercent;\\r\\n    uint16 public preBuyForReferralsPercent;\\r\\n    uint16 public preBuyForContributorsPercent;\\r\\n    uint16 public preBuyForMarketStabilizationPercent;\\r\\n    uint256 public override vestingPeriodStartTime;\\r\\n    uint256 public override vestingPeriodEndTime; \\r\\n    uint256 public vestingDuration;\\r\\n    uint256 public rootedBottom;\\r\\n\\r\\n    constructor(address _devAddress)\\r\\n    {\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function init(\\r\\n        RootedToken _rootedToken, \\r\\n        IERC31337 _eliteToken, \\r\\n        address _lazarusPit,\\r\\n        address _liquidityController,\\r\\n        IPancakeRouter02 _pancakeRouter, \\r\\n        IMarketGeneration _marketGeneration,\\r\\n        uint256 _vestingDuration, \\r\\n        uint16 _devCutPercent, \\r\\n        uint16 _preBuyForReferralsPercent, \\r\\n        uint16 _preBuyForContributorsPercent, \\r\\n        uint16 _preBuyForMarketStabilizationPercent) public ownerOnly()\\r\\n    {        \\r\\n        rootedToken = _rootedToken;\\r\\n        eliteToken = _eliteToken;\\r\\n        lazarusPit = _lazarusPit;\\r\\n        baseToken = _eliteToken.wrappedToken();\\r\\n        liquidityController = _liquidityController;\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n        pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\\r\\n        marketGeneration = _marketGeneration;\\r\\n        vestingDuration = _vestingDuration;\\r\\n        devCutPercent = _devCutPercent;\\r\\n        preBuyForReferralsPercent = _preBuyForReferralsPercent;\\r\\n        preBuyForContributorsPercent = _preBuyForContributorsPercent;\\r\\n        preBuyForMarketStabilizationPercent = _preBuyForMarketStabilizationPercent;\\r\\n    }\\r\\n\\r\\n    function setupEliteRooted() public\\r\\n    {\\r\\n        rootedEliteLP = IPancakePair(pancakeFactory.getPair(address(eliteToken), address(rootedToken)));\\r\\n        if (address(rootedEliteLP) == address(0)) \\r\\n        {\\r\\n            rootedEliteLP = IPancakePair(pancakeFactory.createPair(address(eliteToken), address(rootedToken)));\\r\\n            require (address(rootedEliteLP) != address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setupBaseRooted() public\\r\\n    {\\r\\n        rootedBaseLP = IPancakePair(pancakeFactory.getPair(address(baseToken), address(rootedToken)));\\r\\n        if (address(rootedBaseLP) == address(0)) \\r\\n        {\\r\\n            rootedBaseLP = IPancakePair(pancakeFactory.createPair(address(baseToken), address(rootedToken)));\\r\\n            require (address(rootedBaseLP) != address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function completeSetup() public ownerOnly()\\r\\n    {   \\r\\n        require (address(rootedEliteLP) != address(0), \\\"Rooted Elite pool is not created\\\");\\r\\n        require (address(rootedBaseLP) != address(0), \\\"Rooted Base pool is not created\\\");   \\r\\n\\r\\n        eliteToken.approve(address(pancakeRouter), uint256(-1));\\r\\n        rootedToken.approve(address(pancakeRouter), uint256(-1));\\r\\n        baseToken.safeApprove(address(pancakeRouter), uint256(-1));\\r\\n        baseToken.safeApprove(address(eliteToken), uint256(-1));\\r\\n        rootedBaseLP.approve(address(pancakeRouter), uint256(-1));\\r\\n        rootedEliteLP.approve(address(pancakeRouter), uint256(-1));\\r\\n    }\\r\\n\\r\\n    function distribute() public override\\r\\n    {\\r\\n        require (msg.sender == address(marketGeneration), \\\"Unauthorized\\\");\\r\\n        require (!distributionComplete, \\\"Distribution complete\\\");\\r\\n   \\r\\n        vestingPeriodStartTime = block.timestamp;\\r\\n        vestingPeriodEndTime = block.timestamp + vestingDuration;\\r\\n        distributionComplete = true;\\r\\n        totalBaseTokenCollected = baseToken.balanceOf(address(marketGeneration));\\r\\n        baseToken.safeTransferFrom(msg.sender, address(this), totalBaseTokenCollected);  \\r\\n\\r\\n        RootedTransferGate gate = RootedTransferGate(address(rootedToken.transferGate()));\\r\\n\\r\\n        gate.setUnrestricted(true);\\r\\n        rootedToken.mint(rootedTokenSupply);\\r\\n\\r\\n        // add 50% of supply to lazarusPit\\r\\n       rootedToken.transfer(lazarusPit, rootedTokenSupply.mul(24).div(100));\\r\\n    \\r\\n        rootedToken.transfer(devAddress, rootedTokenSupply.mul(6).div(100)); \\r\\n\\r\\n        createRootedEliteLiquidity();\\r\\n\\r\\n        eliteToken.sweepFloor(address(this));        \\r\\n        eliteToken.depositTokens(baseToken.balanceOf(address(this)));\\r\\n                \\r\\n        buyTheBottom();        \\r\\n        preBuyForReferrals();\\r\\n        preBuyForContributors();\\r\\n        sellTheTop();        \\r\\n\\r\\n        uint256 devCut = totalBaseTokenCollected * devCutPercent / 10000;\\r\\n        baseToken.transfer(devAddress, devCut);\\r\\n        baseToken.transfer(liquidityController, baseToken.balanceOf(address(this)));      \\r\\n\\r\\n        createRootedBaseLiquidity();    \\r\\n\\r\\n        gate.setUnrestricted(false);\\r\\n    }   \\r\\n   \\r\\n    \\r\\n    function createRootedEliteLiquidity() private\\r\\n    {\\r\\n        // Create Rooted/Elite LP \\r\\n        eliteToken.depositTokens(baseToken.balanceOf(address(this)));\\r\\n        pancakeRouter.addLiquidity(address(eliteToken), address(rootedToken), eliteToken.balanceOf(address(this)), rootedToken.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function buyTheBottom() private\\r\\n    {\\r\\n        uint256 amount = totalBaseTokenCollected * preBuyForMarketStabilizationPercent / 10000;  \\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);        \\r\\n        rootedBottom = amounts[1];\\r\\n    }\\r\\n\\r\\n    function sellTheTop() private\\r\\n    {\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(rootedBottom, 0, rootedElitePath(), address(this), block.timestamp);\\r\\n        uint256 eliteAmount = amounts[1];\\r\\n        eliteToken.withdrawTokens(eliteAmount);\\r\\n    }   \\r\\n    \\r\\n    function preBuyForReferrals() private \\r\\n    {\\r\\n        uint256 amount = totalBaseTokenCollected * preBuyForReferralsPercent / 10000;\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);\\r\\n        totalBoughtForReferrals = amounts[1];\\r\\n    }\\r\\n\\r\\n    function preBuyForContributors() private \\r\\n    {\\r\\n        uint256 preBuyAmount = totalBaseTokenCollected * preBuyForContributorsPercent / 10000;\\r\\n        uint256 eliteBalance = eliteToken.balanceOf(address(this));\\r\\n        uint256 amount = preBuyAmount \\u003e eliteBalance ? eliteBalance : preBuyAmount;\\r\\n        uint256[] memory amounts = pancakeRouter.swapExactTokensForTokens(amount, 0, eliteRootedPath(), address(this), block.timestamp);\\r\\n        totalBoughtForContributors = amounts[1];\\r\\n    }\\r\\n\\r\\n    function createRootedBaseLiquidity() private\\r\\n    {\\r\\n        uint256 elitePerLpToken = eliteToken.balanceOf(address(rootedEliteLP)).mul(1e18).div(rootedEliteLP.totalSupply());\\r\\n        uint256 lpAmountToRemove = baseToken.balanceOf(address(eliteToken)).mul(1e18).div(elitePerLpToken);\\r\\n        \\r\\n        (uint256 eliteAmount, uint256 rootedAmount) = pancakeRouter.removeLiquidity(address(eliteToken), address(rootedToken), lpAmountToRemove, 0, 0, address(this), block.timestamp);\\r\\n        \\r\\n        uint256 baseInElite = baseToken.balanceOf(address(eliteToken));\\r\\n        uint256 baseAmount = eliteAmount \\u003e baseInElite ? baseInElite : eliteAmount;       \\r\\n        \\r\\n        eliteToken.withdrawTokens(baseAmount);\\r\\n        pancakeRouter.addLiquidity(address(baseToken), address(rootedToken), baseAmount, rootedAmount, 0, 0, liquidityController, block.timestamp);\\r\\n        rootedEliteLP.transfer(liquidityController, rootedEliteLP.balanceOf(address(this)));\\r\\n        eliteToken.transfer(liquidityController, eliteToken.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function eliteRootedPath() private view returns (address[] memory)\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(eliteToken);\\r\\n        path[1] = address(rootedToken);\\r\\n        return path;\\r\\n    }\\r\\n\\r\\n    function rootedElitePath() private view returns (address[] memory)\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(rootedToken);\\r\\n        path[1] = address(eliteToken);\\r\\n        return path;\\r\\n    }\\r\\n    \\r\\n    function getTotalClaim(address account) public view returns (uint256)\\r\\n    {\\r\\n        uint256 contribution = marketGeneration.contribution(account);\\r\\n        return contribution == 0 ? 0 : contribution.mul(totalBoughtForContributors).div(marketGeneration.totalContribution());\\r\\n    }\\r\\n\\r\\n    function getReferralClaim(address account) public view returns (uint256)\\r\\n    {\\r\\n        uint256 referralShare = marketGeneration.referralPoints(account);\\r\\n        return referralShare == 0 ? 0 : referralShare.mul(totalBoughtForReferrals).div(marketGeneration.totalReferralPoints());\\r\\n    }\\r\\n\\r\\n    function claim(address account) public override \\r\\n    {\\r\\n        require (distributionComplete, \\\"Distribution is not completed\\\");\\r\\n        require (msg.sender == address(marketGeneration), \\\"Unauthorized\\\");\\r\\n\\r\\n        if (totalClaim[account] == 0)\\r\\n        {\\r\\n            totalClaim[account] = remainingClaim[account] = getTotalClaim(account);\\r\\n        }\\r\\n\\r\\n        uint256 share = totalClaim[account];\\r\\n        uint256 endTime = vestingPeriodEndTime \\u003e block.timestamp ? block.timestamp : vestingPeriodEndTime;\\r\\n\\r\\n        require (claimTime[account] \\u003c endTime, \\\"Already claimed\\\");\\r\\n\\r\\n        uint256 claimStartTime = claimTime[account] == 0 ? vestingPeriodStartTime : claimTime[account];\\r\\n        share = (endTime.sub(claimStartTime)).mul(share).div(vestingDuration);\\r\\n        claimTime[account] = block.timestamp;\\r\\n        remainingClaim[account] -= share;\\r\\n        rootedToken.transfer(account, share);\\r\\n    }\\r\\n\\r\\n    function claimReferralRewards(address account, uint256 referralShare) public override \\r\\n    {\\r\\n        require (distributionComplete, \\\"Distribution is not completed\\\");\\r\\n        require (msg.sender == address(marketGeneration), \\\"Unauthorized\\\");\\r\\n\\r\\n        uint256 share = referralShare.mul(totalBoughtForReferrals).div(marketGeneration.totalReferralPoints());\\r\\n        rootedToken.transfer(account, share);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \\r\\n    { \\r\\n        return block.timestamp \\u003e recoveryDate || token != rootedToken;\\r\\n    }\\r\\n}\"},\"MarketGeneration.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IMarketDistribution.sol\\\";\\r\\nimport \\\"./IMarketGeneration.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IWBNB.sol\\\";\\r\\n\\r\\ncontract MarketGeneration is TokensRecoverable, IMarketGeneration\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) public override contribution;\\r\\n    mapping (address =\\u003e uint256) public override referralPoints;\\r\\n    uint256 public override totalReferralPoints;\\r\\n    uint256 public override totalContribution;\\r\\n    address public immutable devAddress;    \\r\\n\\r\\n    bool public isActive;\\r\\n\\r\\n    IERC20 public baseToken;\\r\\n    IMarketDistribution public marketDistribution;\\r\\n    uint256 public refundsAllowedUntil;\\r\\n\\r\\n    constructor(address _devAddress)\\r\\n    {\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    modifier active()\\r\\n    {\\r\\n        require (isActive, \\\"Distribution not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function init(IERC20 _baseToken) public ownerOnly()\\r\\n    {\\r\\n        require (!isActive \\u0026\\u0026 block.timestamp \\u003e= refundsAllowedUntil, \\\"Already activated\\\");\\r\\n        baseToken = _baseToken;\\r\\n    }\\r\\n\\r\\n    function activate(IMarketDistribution _marketDistribution) public ownerOnly()\\r\\n    {\\r\\n        require (!isActive \\u0026\\u0026 block.timestamp \\u003e= refundsAllowedUntil, \\\"Already activated\\\");        \\r\\n        require (address(_marketDistribution) != address(0));\\r\\n        marketDistribution = _marketDistribution;\\r\\n        isActive = true;\\r\\n    }\\r\\n\\r\\n    function setMarketDistribution(IMarketDistribution _marketDistribution) public ownerOnly() active()\\r\\n    {\\r\\n        require (address(_marketDistribution) != address(0), \\\"Invalid market distribution\\\");\\r\\n        if (_marketDistribution == marketDistribution) { return; }\\r\\n        marketDistribution = _marketDistribution;\\r\\n\\r\\n        // Give everyone 1 day to claim refunds if they don\\u0027t approve of the new distributor\\r\\n        refundsAllowedUntil = block.timestamp + 86400;\\r\\n    }\\r\\n\\r\\n    function complete() public ownerOnly() active()\\r\\n    {\\r\\n        require (block.timestamp \\u003e= refundsAllowedUntil, \\\"Refund period is still active\\\");\\r\\n        isActive = false;\\r\\n        if (address(this).balance == 0) { return; }\\r\\n        IWBNB(address(baseToken)).deposit{ value: address(this).balance }();\\r\\n        baseToken.safeApprove(address(marketDistribution), uint256(-1));\\r\\n\\r\\n        marketDistribution.distribute();\\r\\n    }\\r\\n\\r\\n    function allowRefunds() public ownerOnly() active()\\r\\n    {\\r\\n        isActive = false;\\r\\n        refundsAllowedUntil = uint256(-1);\\r\\n    }\\r\\n\\r\\n    function refund(uint256 amount) private\\r\\n    {\\r\\n        (bool success,) = msg.sender.call{ value: amount }(\\\"\\\");\\r\\n        require (success, \\\"Refund transfer failed\\\");  \\r\\n          \\r\\n        totalContribution -= amount;\\r\\n        contribution[msg.sender] = 0;\\r\\n\\r\\n        uint256 refPoints = referralPoints[msg.sender];\\r\\n\\r\\n        if (refPoints \\u003e 0)\\r\\n        {\\r\\n            totalReferralPoints -= refPoints;\\r\\n            referralPoints[msg.sender] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim() public \\r\\n    {\\r\\n        uint256 amount = contribution[msg.sender];\\r\\n\\r\\n        require (amount \\u003e 0, \\\"Nothing to claim\\\");\\r\\n        \\r\\n        if (refundsAllowedUntil \\u003e block.timestamp) \\r\\n        {\\r\\n            refund(amount);\\r\\n        }\\r\\n        else \\r\\n        {\\r\\n            marketDistribution.claim(msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimReferralRewards() public\\r\\n    {\\r\\n        require (referralPoints[msg.sender] \\u003e 0, \\\"No rewards to claim\\\");\\r\\n        \\r\\n        uint256 refShare = referralPoints[msg.sender];\\r\\n        referralPoints[msg.sender] = 0;\\r\\n        marketDistribution.claimReferralRewards(msg.sender, refShare);\\r\\n    }\\r\\n\\r\\n    function contribute(address referral) public payable active() \\r\\n    {\\r\\n        if (referral == address(0) || referral == msg.sender) \\r\\n        {\\r\\n            referralPoints[devAddress] += msg.value;\\r\\n            totalReferralPoints += msg.value;\\r\\n        }\\r\\n        else \\r\\n        {\\r\\n            referralPoints[msg.sender] += msg.value;\\r\\n            referralPoints[referral] += msg.value;\\r\\n            totalReferralPoints +=(msg.value + msg.value);\\r\\n        }\\r\\n\\r\\n        contribution[msg.sender] += msg.value;\\r\\n        totalContribution += msg.value;\\r\\n    }\\r\\n\\r\\n    receive() external payable active()\\r\\n    {\\r\\n        contribute(address(0));\\r\\n    }\\r\\n}\"},\"Math.sol\":{\"content\":\"pragma solidity \\u003e=0.5.16;\\r\\n\\r\\n// a library for performing various math operations\\r\\n\\r\\nlibrary Math {\\r\\n    function min(uint x, uint y) internal pure returns (uint z) {\\r\\n        z = x \\u003c y ? x : y;\\r\\n    }\\r\\n\\r\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y \\u003e 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x \\u003c z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n}\"},\"Migrations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.4.22 \\u003c0.8.0;\\n\\ncontract Migrations {\\n  address public owner = msg.sender;\\n  uint public last_completed_migration;\\n\\n  modifier restricted() {\\n    require(\\n      msg.sender == owner,\\n      \\\"This function is restricted to the contract\\u0027s owner\\\"\\n    );\\n    _;\\n  }\\n\\n  function setCompleted(uint completed) public restricted {\\n    last_completed_migration = completed;\\n  }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\n import \\\"./Context.sol\\\";\\r\\n \\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    uint256 private _lockTime;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function getUnlockTime() public view returns (uint256) {\\r\\n        return _lockTime;\\r\\n    }\\r\\n\\r\\n    //Locks the contract for owner for the amount of time provided\\r\\n    function lock(uint256 time) public virtual onlyOwner {\\r\\n        _previousOwner = _owner;\\r\\n        _owner = address(0);\\r\\n        _lockTime = block.timestamp + time;\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n    }\\r\\n    \\r\\n    //Unlocks the contract for owner when _lockTime is exceeds\\r\\n    function unlock() public virtual {\\r\\n        require(_previousOwner == msg.sender, \\\"You don\\u0027t have permission to unlock\\\");\\r\\n        require(block.timestamp \\u003e _lockTime , \\\"Contract is locked until 7 days\\\");\\r\\n        emit OwnershipTransferred(_owner, _previousOwner);\\r\\n        _owner = _previousOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nProvides ownerOnly() modifier\\r\\nAllows for ownership transfer but requires the new\\r\\nowner to claim (accept) ownership\\r\\nSafer because no accidental transfers or renouncing\\r\\n*/\\r\\n\\r\\nimport \\\"./IOwned.sol\\\";\\r\\n\\r\\nabstract contract Owned is IOwned\\r\\n{\\r\\n    address public override owner = msg.sender;\\r\\n    address internal pendingOwner;\\r\\n\\r\\n    modifier ownerOnly()\\r\\n    {\\r\\n        require (msg.sender == owner, \\\"Owner only\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public override ownerOnly()\\r\\n    {\\r\\n        pendingOwner = newOwner;\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public override\\r\\n    {\\r\\n        require (pendingOwner == msg.sender);\\r\\n        pendingOwner = address(0);\\r\\n        emit OwnershipTransferred(owner, msg.sender);\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n}\"},\"PancakeLibrary.sol\":{\"content\":\"pragma solidity \\u003e=0.5.0;\\r\\n\\r\\nimport \\u0027./IPancakePair.sol\\u0027;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary PancakeLibrary {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\r\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\r\\n        require(tokenA != tokenB, \\u0027PancakeLibrary: IDENTICAL_ADDRESSES\\u0027);\\r\\n        (token0, token1) = tokenA \\u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n        require(token0 != address(0), \\u0027PancakeLibrary: ZERO_ADDRESS\\u0027);\\r\\n    }\\r\\n\\r\\n    // calculates the CREATE2 address for a pair without making any external calls\\r\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\r\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\r\\n        pair = address(uint(keccak256(abi.encodePacked(\\r\\n                hex\\u0027ff\\u0027,\\r\\n                factory,\\r\\n                keccak256(abi.encodePacked(token0, token1)),\\r\\n                hex\\u0027d0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66\\u0027 // init code hash\\r\\n            ))));\\r\\n    }\\r\\n\\r\\n    // fetches and sorts the reserves for a pair\\r\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\r\\n        (address token0,) = sortTokens(tokenA, tokenB);\\r\\n        pairFor(factory, tokenA, tokenB);\\r\\n        (uint reserve0, uint reserve1,) = IPancakePair(pairFor(factory, tokenA, tokenB)).getReserves();\\r\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\r\\n    }\\r\\n\\r\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\r\\n        require(amountA \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_AMOUNT\\u0027);\\r\\n        require(reserveA \\u003e 0 \\u0026\\u0026 reserveB \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        amountB = amountA.mul(reserveB) / reserveA;\\r\\n    }\\r\\n\\r\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint amountInWithFee = amountIn.mul(998);\\r\\n        uint numerator = amountInWithFee.mul(reserveOut);\\r\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\r\\n        amountOut = numerator / denominator;\\r\\n    }\\r\\n\\r\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\r\\n        require(amountOut \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\u0027);\\r\\n        require(reserveIn \\u003e 0 \\u0026\\u0026 reserveOut \\u003e 0, \\u0027PancakeLibrary: INSUFFICIENT_LIQUIDITY\\u0027);\\r\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\r\\n        uint denominator = reserveOut.sub(amountOut).mul(998);\\r\\n        amountIn = (numerator / denominator).add(1);\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountOut calculations on any number of pairs\\r\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027PancakeLibrary: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[0] = amountIn;\\r\\n        for (uint i; i \\u003c path.length - 1; i++) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\r\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // performs chained getAmountIn calculations on any number of pairs\\r\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\r\\n        require(path.length \\u003e= 2, \\u0027PancakeLibrary: INVALID_PATH\\u0027);\\r\\n        amounts = new uint[](path.length);\\r\\n        amounts[amounts.length - 1] = amountOut;\\r\\n        for (uint i = path.length - 1; i \\u003e 0; i--) {\\r\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\r\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\r\\n        }\\r\\n    }\\r\\n}\"},\"RootedToken.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT: upToken\\r\\n\\r\\nAn upToken is a token that gains in value\\r\\nagainst whatever token it is paired with.\\r\\n\\r\\n- Raise any token using the Market Generation\\r\\nand Market Distribution contracts\\r\\n- An equal amount of upToken will be minted\\r\\n- combine with an ERC-31337 version of the \\r\\nraised token.\\r\\n- Send LP tokens to the Liquidity Controller\\r\\nfor efficent access to market features\\r\\n\\r\\n*/\\r\\n\\r\\nimport \\\"./LiquidityLockedERC20.sol\\\";\\r\\n\\r\\ncontract RootedToken is LiquidityLockedERC20(\\\"SideKick Token\\\", \\\"SK\\\")\\r\\n{\\r\\n    address public minter;\\r\\n\\r\\n    function setMinter(address _minter) public ownerOnly()\\r\\n    {\\r\\n        minter = _minter;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 amount) public\\r\\n    {\\r\\n        require(msg.sender == minter, \\\"Not a minter\\\");\\r\\n        require(this.totalSupply() == 0, \\\"Already minted\\\");\\r\\n        _mint(msg.sender, amount);\\r\\n    }\\r\\n}\"},\"RootedTransferGate.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/* ROOTKIT:\\r\\nA transfer gate (GatedERC20) for use with upTokens\\r\\n\\r\\nIt:\\r\\n    Allows customization of tax and burn rates\\r\\n    Allows transfer to/from approved pools\\r\\n    Disallows transfer to/from non-approved pools\\r\\n    Allows transfer to/from anywhere else\\r\\n    Allows for free transfers if permission granted\\r\\n    Allows for unrestricted transfers if permission granted\\r\\n    Allows for a pool to have an extra tax\\r\\n    Allows for a temporary declining tax\\r\\n*/\\r\\n\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./ILiquidityLockedERC20.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./ITransferGate.sol\\\";\\r\\n\\r\\ncontract RootedTransferGate is TokensRecoverable, ITransferGate\\r\\n{   \\r\\n    using Address for address;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IPancakeRouter02 immutable internal pancakeRouter;\\r\\n    IPancakeFactory immutable internal pancakeFactory;\\r\\n    ILiquidityLockedERC20 immutable internal rootedToken;\\r\\n\\r\\n    bool public unrestricted;\\r\\n    mapping (address =\\u003e bool) public unrestrictedControllers;\\r\\n    mapping (address =\\u003e bool) public feeControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipantControllers;\\r\\n    mapping (address =\\u003e bool) public freeParticipant;\\r\\n    mapping (address =\\u003e uint16) public poolsTaxRates;\\r\\n\\r\\n    address public override feeSplitter;\\r\\n    uint16 public feesRate;\\r\\n    IPancakePair public mainPool;\\r\\n   \\r\\n    uint16 public dumpTaxStartRate; \\r\\n    uint256 public dumpTaxDurationInSeconds;\\r\\n    uint256 public dumpTaxEndTimestamp;\\r\\n\\r\\n    constructor(ILiquidityLockedERC20 _rootedToken, IPancakeRouter02 _pancakeRouter)\\r\\n    {\\r\\n        rootedToken = _rootedToken;\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n        pancakeFactory = IPancakeFactory(_pancakeRouter.factory());\\r\\n    }\\r\\n\\r\\n    function setUnrestrictedController(address unrestrictedController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        unrestrictedControllers[unrestrictedController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipantController(address freeParticipantController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        freeParticipantControllers[freeParticipantController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFeeControllers(address feeController, bool allow) public ownerOnly()\\r\\n    {\\r\\n        feeControllers[feeController] = allow;\\r\\n    }\\r\\n\\r\\n    function setFeeSplitter(address _feeSplitter) public ownerOnly()\\r\\n    {\\r\\n        feeSplitter = _feeSplitter;\\r\\n    }\\r\\n\\r\\n    function setFreeParticipant(address participant, bool free) public\\r\\n    {\\r\\n        require (msg.sender == owner || freeParticipantControllers[msg.sender], \\\"Not an owner or free participant controller\\\");\\r\\n        freeParticipant[participant] = free;\\r\\n    }\\r\\n\\r\\n    function setUnrestricted(bool _unrestricted) public\\r\\n    {\\r\\n        require (unrestrictedControllers[msg.sender], \\\"Not an unrestricted controller\\\");\\r\\n        unrestricted = _unrestricted;\\r\\n        rootedToken.setLiquidityLock(mainPool, !_unrestricted);\\r\\n    }    \\r\\n\\r\\n    function setMainPool(IPancakePair _mainPool) public ownerOnly()\\r\\n    {\\r\\n        mainPool = _mainPool;\\r\\n    }\\r\\n\\r\\n     function setPoolTaxRate(address pool, uint16 taxRate) public ownerOnly()\\r\\n    {\\r\\n        require (taxRate \\u003c= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\r\\n        poolsTaxRates[pool] = taxRate;        \\r\\n    }\\r\\n\\r\\n    function setDumpTax(uint16 startTaxRate, uint256 durationInSeconds) public\\r\\n    {\\r\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        require (startTaxRate \\u003c= 10000, \\\"Dump tax rate must be less than or equal to 100%\\\");\\r\\n\\r\\n        dumpTaxStartRate = startTaxRate;\\r\\n        dumpTaxDurationInSeconds = durationInSeconds;\\r\\n        dumpTaxEndTimestamp = block.timestamp + durationInSeconds;\\r\\n    }\\r\\n\\r\\n    function getDumpTax() public view returns (uint256)\\r\\n    {\\r\\n        if (block.timestamp \\u003e= dumpTaxEndTimestamp) \\r\\n        {\\r\\n            return 0;\\r\\n        }       \\r\\n        \\r\\n        return dumpTaxStartRate*(dumpTaxEndTimestamp - block.timestamp)*1e18/dumpTaxDurationInSeconds/1e18;\\r\\n    }\\r\\n\\r\\n    function setFees(uint16 _feesRate) public\\r\\n    {\\r\\n        require (feeControllers[msg.sender] || msg.sender == owner, \\\"Not an owner or fee controller\\\");\\r\\n        require (_feesRate \\u003c= 10000, \\\"Fee rate must be less than or equal to 100%\\\");\\r\\n        feesRate = _feesRate;\\r\\n    }\\r\\n\\r\\n    function handleTransfer(address, address from, address to, uint256 amount) public virtual override returns (uint256)\\r\\n    {\\r\\n        if (unrestricted || freeParticipant[from] || freeParticipant[to]) \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint16 poolTaxRate = poolsTaxRates[to];\\r\\n\\r\\n        if (poolTaxRate \\u003e feesRate) \\r\\n        {\\r\\n            uint256 totalTax = getDumpTax() + poolTaxRate;\\r\\n            return totalTax \\u003e= 10000 ? amount : amount * totalTax / 10000;\\r\\n        }\\r\\n\\r\\n        return amount * feesRate / 10000;\\r\\n    }   \\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nModified to remove some junk\\r\\nAlso modified to remove silly restrictions (traps!) within safeApprove\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {        \\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nlibrary SafeMath \\r\\n{\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) \\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n    \\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) \\r\\n    {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) \\r\\n    {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"StakingToken.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\n\\r\\ncontract StakingToken is ERC20(\\\"SK Staking\\\", \\\"xSK\\\"), TokensRecoverable\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    IERC20 public immutable rooted;\\r\\n\\r\\n    constructor(IERC20 _rooted) \\r\\n    {\\r\\n        rooted = _rooted;\\r\\n    }\\r\\n\\r\\n    // Stake rooted, get staking shares\\r\\n    function stake(uint256 amount) public \\r\\n    {\\r\\n        uint256 totalRooted = rooted.balanceOf(address(this));\\r\\n        uint256 totalShares = this.totalSupply();\\r\\n\\r\\n        if (totalShares == 0 || totalRooted == 0) \\r\\n        {\\r\\n            _mint(msg.sender, amount);\\r\\n        } \\r\\n        else \\r\\n        {\\r\\n            uint256 mintAmount = amount.mul(totalShares).div(totalRooted);\\r\\n            _mint(msg.sender, mintAmount);\\r\\n        }\\r\\n\\r\\n        rooted.transferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    // Unstake shares, claim back rooted\\r\\n    function unstake(uint256 share) public \\r\\n    {\\r\\n        uint256 totalShares = this.totalSupply();\\r\\n        uint256 unstakeAmount = share.mul(rooted.balanceOf(address(this))).div(totalShares);\\r\\n\\r\\n        _burn(msg.sender, share);\\r\\n        rooted.transfer(msg.sender, unstakeAmount);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal override view returns (bool) \\r\\n    { \\r\\n        return address(token) != address(this) \\u0026\\u0026 address(token) != address(rooted); \\r\\n    }\\r\\n}\"},\"TokensRecoverable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nAllows recovery of unexpected tokens (airdrops, etc)\\r\\nInheriters can customize logic by overriding canRecoverTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\nimport \\\"./ITokensRecoverable.sol\\\";\\r\\n\\r\\nabstract contract TokensRecoverable is Owned, ITokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    function recoverTokens(IERC20 token) public override ownerOnly() \\r\\n    {\\r\\n        require (canRecoverTokens(token));\\r\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual view returns (bool) \\r\\n    { \\r\\n        return address(token) != address(this); \\r\\n    }\\r\\n}\"},\"UQ112x112.sol\":{\"content\":\"pragma solidity \\u003e=0.5.16;\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\n\\r\\n// range: [0, 2**112 - 1]\\r\\n// resolution: 1 / 2**112\\r\\n\\r\\nlibrary UQ112x112 {\\r\\n    uint224 constant Q112 = 2**112;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\r\\n        z = uint224(y) * Q112; // never overflows\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\r\\n        z = x / uint224(y);\\r\\n    }\\r\\n}\"},\"WBNB.sol\":{\"content\":\"pragma solidity \\u003e=0.4.18;\\r\\n\\r\\ncontract WBNB {\\r\\n    string public name     = \\\"Wrapped BNB\\\";\\r\\n    string public symbol   = \\\"WBNB\\\";\\r\\n    uint8  public decimals = 18;\\r\\n\\r\\n    event  Approval(address indexed src, address indexed guy, uint wad);\\r\\n    event  Transfer(address indexed src, address indexed dst, uint wad);\\r\\n    event  Deposit(address indexed dst, uint wad);\\r\\n    event  Withdrawal(address indexed src, uint wad);\\r\\n\\r\\n    mapping (address =\\u003e uint)                       public  balanceOf;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint))  public  allowance;\\r\\n\\r\\n    fallback() external payable {\\r\\n        deposit();\\r\\n    }\\r\\n    function deposit() public payable {\\r\\n        balanceOf[msg.sender] += msg.value;\\r\\n        emit Deposit(msg.sender, msg.value);\\r\\n    }\\r\\n    function withdraw(uint wad) public {\\r\\n        require(balanceOf[msg.sender] \\u003e= wad);\\r\\n        balanceOf[msg.sender] -= wad;\\r\\n        msg.sender.transfer(wad);\\r\\n        emit Withdrawal(msg.sender, wad);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view returns (uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function approve(address guy, uint wad) public returns (bool) {\\r\\n        allowance[msg.sender][guy] = wad;\\r\\n        emit Approval(msg.sender, guy, wad);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint wad) public returns (bool) {\\r\\n        return transferFrom(msg.sender, dst, wad);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address src, address dst, uint wad)\\r\\n    public\\r\\n    returns (bool)\\r\\n    {\\r\\n        require(balanceOf[src] \\u003e= wad);\\r\\n\\r\\n        if (src != msg.sender \\u0026\\u0026 allowance[src][msg.sender] != uint(-1)) {\\r\\n            require(allowance[src][msg.sender] \\u003e= wad);\\r\\n            allowance[src][msg.sender] -= wad;\\r\\n        }\\r\\n\\r\\n        balanceOf[src] -= wad;\\r\\n        balanceOf[dst] += wad;\\r\\n\\r\\n        emit Transfer(src, dst, wad);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n/*\\r\\n                    GNU GENERAL PUBLIC LICENSE\\r\\n                       Version 3, 29 June 2007\\r\\n\\r\\n Copyright (C) 2007 Free Software Foundation, Inc. \\u003chttp://fsf.org/\\u003e\\r\\n Everyone is permitted to copy and distribute verbatim copies\\r\\n of this license document, but changing it is not allowed.\\r\\n\\r\\n                            Preamble\\r\\n\\r\\n  The GNU General Public License is a free, copyleft license for\\r\\nsoftware and other kinds of works.\\r\\n\\r\\n  The licenses for most software and other practical works are designed\\r\\nto take away your freedom to share and change the works.  By contrast,\\r\\nthe GNU General Public License is intended to guarantee your freedom to\\r\\nshare and change all versions of a program--to make sure it remains free\\r\\nsoftware for all its users.  We, the Free Software Foundation, use the\\r\\nGNU General Public License for most of our software; it applies also to\\r\\nany other work released this way by its authors.  You can apply it to\\r\\nyour programs, too.\\r\\n\\r\\n  When we speak of free software, we are referring to freedom, not\\r\\nprice.  Our General Public Licenses are designed to make sure that you\\r\\nhave the freedom to distribute copies of free software (and charge for\\r\\nthem if you wish), that you receive source code or can get it if you\\r\\nwant it, that you can change the software or use pieces of it in new\\r\\nfree programs, and that you know you can do these things.\\r\\n\\r\\n  To protect your rights, we need to prevent others from denying you\\r\\nthese rights or asking you to surrender the rights.  Therefore, you have\\r\\ncertain responsibilities if you distribute copies of the software, or if\\r\\nyou modify it: responsibilities to respect the freedom of others.\\r\\n\\r\\n  For example, if you distribute copies of such a program, whether\\r\\ngratis or for a fee, you must pass on to the recipients the same\\r\\nfreedoms that you received.  You must make sure that they, too, receive\\r\\nor can get the source code.  And you must show them these terms so they\\r\\nknow their rights.\\r\\n\\r\\n  Developers that use the GNU GPL protect your rights with two steps:\\r\\n(1) assert copyright on the software, and (2) offer you this License\\r\\ngiving you legal permission to copy, distribute and/or modify it.\\r\\n\\r\\n  For the developers\\u0027 and authors\\u0027 protection, the GPL clearly explains\\r\\nthat there is no warranty for this free software.  For both users\\u0027 and\\r\\nauthors\\u0027 sake, the GPL requires that modified versions be marked as\\r\\nchanged, so that their problems will not be attributed erroneously to\\r\\nauthors of previous versions.\\r\\n\\r\\n  Some devices are designed to deny users access to install or run\\r\\nmodified versions of the software inside them, although the manufacturer\\r\\ncan do so.  This is fundamentally incompatible with the aim of\\r\\nprotecting users\\u0027 freedom to change the software.  The systematic\\r\\npattern of such abuse occurs in the area of products for individuals to\\r\\nuse, which is precisely where it is most unacceptable.  Therefore, we\\r\\nhave designed this version of the GPL to prohibit the practice for those\\r\\nproducts.  If such problems arise substantially in other domains, we\\r\\nstand ready to extend this provision to those domains in future versions\\r\\nof the GPL, as needed to protect the freedom of users.\\r\\n\\r\\n  Finally, every program is threatened constantly by software patents.\\r\\nStates should not allow patents to restrict development and use of\\r\\nsoftware on general-purpose computers, but in those that do, we wish to\\r\\navoid the special danger that patents applied to a free program could\\r\\nmake it effectively proprietary.  To prevent this, the GPL assures that\\r\\npatents cannot be used to render the program non-free.\\r\\n\\r\\n  The precise terms and conditions for copying, distribution and\\r\\nmodification follow.\\r\\n\\r\\n                       TERMS AND CONDITIONS\\r\\n\\r\\n  0. Definitions.\\r\\n\\r\\n  \\\"This License\\\" refers to version 3 of the GNU General Public License.\\r\\n\\r\\n  \\\"Copyright\\\" also means copyright-like laws that apply to other kinds of\\r\\nworks, such as semiconductor masks.\\r\\n\\r\\n  \\\"The Program\\\" refers to any copyrightable work licensed under this\\r\\nLicense.  Each licensee is addressed as \\\"you\\\".  \\\"Licensees\\\" and\\r\\n\\\"recipients\\\" may be individuals or organizations.\\r\\n\\r\\n  To \\\"modify\\\" a work means to copy from or adapt all or part of the work\\r\\nin a fashion requiring copyright permission, other than the making of an\\r\\nexact copy.  The resulting work is called a \\\"modified version\\\" of the\\r\\nearlier work or a work \\\"based on\\\" the earlier work.\\r\\n\\r\\n  A \\\"covered work\\\" means either the unmodified Program or a work based\\r\\non the Program.\\r\\n\\r\\n  To \\\"propagate\\\" a work means to do anything with it that, without\\r\\npermission, would make you directly or secondarily liable for\\r\\ninfringement under applicable copyright law, except executing it on a\\r\\ncomputer or modifying a private copy.  Propagation includes copying,\\r\\ndistribution (with or without modification), making available to the\\r\\npublic, and in some countries other activities as well.\\r\\n\\r\\n  To \\\"convey\\\" a work means any kind of propagation that enables other\\r\\nparties to make or receive copies.  Mere interaction with a user through\\r\\na computer network, with no transfer of a copy, is not conveying.\\r\\n\\r\\n  An interactive user interface displays \\\"Appropriate Legal Notices\\\"\\r\\nto the extent that it includes a convenient and prominently visible\\r\\nfeature that (1) displays an appropriate copyright notice, and (2)\\r\\ntells the user that there is no warranty for the work (except to the\\r\\nextent that warranties are provided), that licensees may convey the\\r\\nwork under this License, and how to view a copy of this License.  If\\r\\nthe interface presents a list of user commands or options, such as a\\r\\nmenu, a prominent item in the list meets this criterion.\\r\\n\\r\\n  1. Source Code.\\r\\n\\r\\n  The \\\"source code\\\" for a work means the preferred form of the work\\r\\nfor making modifications to it.  \\\"Object code\\\" means any non-source\\r\\nform of a work.\\r\\n\\r\\n  A \\\"Standard Interface\\\" means an interface that either is an official\\r\\nstandard defined by a recognized standards body, or, in the case of\\r\\ninterfaces specified for a particular programming language, one that\\r\\nis widely used among developers working in that language.\\r\\n\\r\\n  The \\\"System Libraries\\\" of an executable work include anything, other\\r\\nthan the work as a whole, that (a) is included in the normal form of\\r\\npackaging a Major Component, but which is not part of that Major\\r\\nComponent, and (b) serves only to enable use of the work with that\\r\\nMajor Component, or to implement a Standard Interface for which an\\r\\nimplementation is available to the public in source code form.  A\\r\\n\\\"Major Component\\\", in this context, means a major essential component\\r\\n(kernel, window system, and so on) of the specific operating system\\r\\n(if any) on which the executable work runs, or a compiler used to\\r\\nproduce the work, or an object code interpreter used to run it.\\r\\n\\r\\n  The \\\"Corresponding Source\\\" for a work in object code form means all\\r\\nthe source code needed to generate, install, and (for an executable\\r\\nwork) run the object code and to modify the work, including scripts to\\r\\ncontrol those activities.  However, it does not include the work\\u0027s\\r\\nSystem Libraries, or general-purpose tools or generally available free\\r\\nprograms which are used unmodified in performing those activities but\\r\\nwhich are not part of the work.  For example, Corresponding Source\\r\\nincludes interface definition files associated with source files for\\r\\nthe work, and the source code for shared libraries and dynamically\\r\\nlinked subprograms that the work is specifically designed to require,\\r\\nsuch as by intimate data communication or control flow between those\\r\\nsubprograms and other parts of the work.\\r\\n\\r\\n  The Corresponding Source need not include anything that users\\r\\ncan regenerate automatically from other parts of the Corresponding\\r\\nSource.\\r\\n\\r\\n  The Corresponding Source for a work in source code form is that\\r\\nsame work.\\r\\n\\r\\n  2. Basic Permissions.\\r\\n\\r\\n  All rights granted under this License are granted for the term of\\r\\ncopyright on the Program, and are irrevocable provided the stated\\r\\nconditions are met.  This License explicitly affirms your unlimited\\r\\npermission to run the unmodified Program.  The output from running a\\r\\ncovered work is covered by this License only if the output, given its\\r\\ncontent, constitutes a covered work.  This License acknowledges your\\r\\nrights of fair use or other equivalent, as provided by copyright law.\\r\\n\\r\\n  You may make, run and propagate covered works that you do not\\r\\nconvey, without conditions so long as your license otherwise remains\\r\\nin force.  You may convey covered works to others for the sole purpose\\r\\nof having them make modifications exclusively for you, or provide you\\r\\nwith facilities for running those works, provided that you comply with\\r\\nthe terms of this License in conveying all material for which you do\\r\\nnot control copyright.  Those thus making or running the covered works\\r\\nfor you must do so exclusively on your behalf, under your direction\\r\\nand control, on terms that prohibit them from making any copies of\\r\\nyour copyrighted material outside their relationship with you.\\r\\n\\r\\n  Conveying under any other circumstances is permitted solely under\\r\\nthe conditions stated below.  Sublicensing is not allowed; section 10\\r\\nmakes it unnecessary.\\r\\n\\r\\n  3. Protecting Users\\u0027 Legal Rights From Anti-Circumvention Law.\\r\\n\\r\\n  No covered work shall be deemed part of an effective technological\\r\\nmeasure under any applicable law fulfilling obligations under article\\r\\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\\r\\nsimilar laws prohibiting or restricting circumvention of such\\r\\nmeasures.\\r\\n\\r\\n  When you convey a covered work, you waive any legal power to forbid\\r\\ncircumvention of technological measures to the extent such circumvention\\r\\nis effected by exercising rights under this License with respect to\\r\\nthe covered work, and you disclaim any intention to limit operation or\\r\\nmodification of the work as a means of enforcing, against the work\\u0027s\\r\\nusers, your or third parties\\u0027 legal rights to forbid circumvention of\\r\\ntechnological measures.\\r\\n\\r\\n  4. Conveying Verbatim Copies.\\r\\n\\r\\n  You may convey verbatim copies of the Program\\u0027s source code as you\\r\\nreceive it, in any medium, provided that you conspicuously and\\r\\nappropriately publish on each copy an appropriate copyright notice;\\r\\nkeep intact all notices stating that this License and any\\r\\nnon-permissive terms added in accord with section 7 apply to the code;\\r\\nkeep intact all notices of the absence of any warranty; and give all\\r\\nrecipients a copy of this License along with the Program.\\r\\n\\r\\n  You may charge any price or no price for each copy that you convey,\\r\\nand you may offer support or warranty protection for a fee.\\r\\n\\r\\n  5. Conveying Modified Source Versions.\\r\\n\\r\\n  You may convey a work based on the Program, or the modifications to\\r\\nproduce it from the Program, in the form of source code under the\\r\\nterms of section 4, provided that you also meet all of these conditions:\\r\\n\\r\\n    a) The work must carry prominent notices stating that you modified\\r\\n    it, and giving a relevant date.\\r\\n\\r\\n    b) The work must carry prominent notices stating that it is\\r\\n    released under this License and any conditions added under section\\r\\n    7.  This requirement modifies the requirement in section 4 to\\r\\n    \\\"keep intact all notices\\\".\\r\\n\\r\\n    c) You must license the entire work, as a whole, under this\\r\\n    License to anyone who comes into possession of a copy.  This\\r\\n    License will therefore apply, along with any applicable section 7\\r\\n    additional terms, to the whole of the work, and all its parts,\\r\\n    regardless of how they are packaged.  This License gives no\\r\\n    permission to license the work in any other way, but it does not\\r\\n    invalidate such permission if you have separately received it.\\r\\n\\r\\n    d) If the work has interactive user interfaces, each must display\\r\\n    Appropriate Legal Notices; however, if the Program has interactive\\r\\n    interfaces that do not display Appropriate Legal Notices, your\\r\\n    work need not make them do so.\\r\\n\\r\\n  A compilation of a covered work with other separate and independent\\r\\nworks, which are not by their nature extensions of the covered work,\\r\\nand which are not combined with it such as to form a larger program,\\r\\nin or on a volume of a storage or distribution medium, is called an\\r\\n\\\"aggregate\\\" if the compilation and its resulting copyright are not\\r\\nused to limit the access or legal rights of the compilation\\u0027s users\\r\\nbeyond what the individual works permit.  Inclusion of a covered work\\r\\nin an aggregate does not cause this License to apply to the other\\r\\nparts of the aggregate.\\r\\n\\r\\n  6. Conveying Non-Source Forms.\\r\\n\\r\\n  You may convey a covered work in object code form under the terms\\r\\nof sections 4 and 5, provided that you also convey the\\r\\nmachine-readable Corresponding Source under the terms of this License,\\r\\nin one of these ways:\\r\\n\\r\\n    a) Convey the object code in, or embodied in, a physical product\\r\\n    (including a physical distribution medium), accompanied by the\\r\\n    Corresponding Source fixed on a durable physical medium\\r\\n    customarily used for software interchange.\\r\\n\\r\\n    b) Convey the object code in, or embodied in, a physical product\\r\\n    (including a physical distribution medium), accompanied by a\\r\\n    written offer, valid for at least three years and valid for as\\r\\n    long as you offer spare parts or customer support for that product\\r\\n    model, to give anyone who possesses the object code either (1) a\\r\\n    copy of the Corresponding Source for all the software in the\\r\\n    product that is covered by this License, on a durable physical\\r\\n    medium customarily used for software interchange, for a price no\\r\\n    more than your reasonable cost of physically performing this\\r\\n    conveying of source, or (2) access to copy the\\r\\n    Corresponding Source from a network server at no charge.\\r\\n\\r\\n    c) Convey individual copies of the object code with a copy of the\\r\\n    written offer to provide the Corresponding Source.  This\\r\\n    alternative is allowed only occasionally and noncommercially, and\\r\\n    only if you received the object code with such an offer, in accord\\r\\n    with subsection 6b.\\r\\n\\r\\n    d) Convey the object code by offering access from a designated\\r\\n    place (gratis or for a charge), and offer equivalent access to the\\r\\n    Corresponding Source in the same way through the same place at no\\r\\n    further charge.  You need not require recipients to copy the\\r\\n    Corresponding Source along with the object code.  If the place to\\r\\n    copy the object code is a network server, the Corresponding Source\\r\\n    may be on a different server (operated by you or a third party)\\r\\n    that supports equivalent copying facilities, provided you maintain\\r\\n    clear directions next to the object code saying where to find the\\r\\n    Corresponding Source.  Regardless of what server hosts the\\r\\n    Corresponding Source, you remain obligated to ensure that it is\\r\\n    available for as long as needed to satisfy these requirements.\\r\\n\\r\\n    e) Convey the object code using peer-to-peer transmission, provided\\r\\n    you inform other peers where the object code and Corresponding\\r\\n    Source of the work are being offered to the general public at no\\r\\n    charge under subsection 6d.\\r\\n\\r\\n  A separable portion of the object code, whose source code is excluded\\r\\nfrom the Corresponding Source as a System Library, need not be\\r\\nincluded in conveying the object code work.\\r\\n\\r\\n  A \\\"User Product\\\" is either (1) a \\\"consumer product\\\", which means any\\r\\ntangible personal property which is normally used for personal, family,\\r\\nor household purposes, or (2) anything designed or sold for incorporation\\r\\ninto a dwelling.  In determining whether a product is a consumer product,\\r\\ndoubtful cases shall be resolved in favor of coverage.  For a particular\\r\\nproduct received by a particular user, \\\"normally used\\\" refers to a\\r\\ntypical or common use of that class of product, regardless of the status\\r\\nof the particular user or of the way in which the particular user\\r\\nactually uses, or expects or is expected to use, the product.  A product\\r\\nis a consumer product regardless of whether the product has substantial\\r\\ncommercial, industrial or non-consumer uses, unless such uses represent\\r\\nthe only significant mode of use of the product.\\r\\n\\r\\n  \\\"Installation Information\\\" for a User Product means any methods,\\r\\nprocedures, authorization keys, or other information required to install\\r\\nand execute modified versions of a covered work in that User Product from\\r\\na modified version of its Corresponding Source.  The information must\\r\\nsuffice to ensure that the continued functioning of the modified object\\r\\ncode is in no case prevented or interfered with solely because\\r\\nmodification has been made.\\r\\n\\r\\n  If you convey an object code work under this section in, or with, or\\r\\nspecifically for use in, a User Product, and the conveying occurs as\\r\\npart of a transaction in which the right of possession and use of the\\r\\nUser Product is transferred to the recipient in perpetuity or for a\\r\\nfixed term (regardless of how the transaction is characterized), the\\r\\nCorresponding Source conveyed under this section must be accompanied\\r\\nby the Installation Information.  But this requirement does not apply\\r\\nif neither you nor any third party retains the ability to install\\r\\nmodified object code on the User Product (for example, the work has\\r\\nbeen installed in ROM).\\r\\n\\r\\n  The requirement to provide Installation Information does not include a\\r\\nrequirement to continue to provide support service, warranty, or updates\\r\\nfor a work that has been modified or installed by the recipient, or for\\r\\nthe User Product in which it has been modified or installed.  Access to a\\r\\nnetwork may be denied when the modification itself materially and\\r\\nadversely affects the operation of the network or violates the rules and\\r\\nprotocols for communication across the network.\\r\\n\\r\\n  Corresponding Source conveyed, and Installation Information provided,\\r\\nin accord with this section must be in a format that is publicly\\r\\ndocumented (and with an implementation available to the public in\\r\\nsource code form), and must require no special password or key for\\r\\nunpacking, reading or copying.\\r\\n\\r\\n  7. Additional Terms.\\r\\n\\r\\n  \\\"Additional permissions\\\" are terms that supplement the terms of this\\r\\nLicense by making exceptions from one or more of its conditions.\\r\\nAdditional permissions that are applicable to the entire Program shall\\r\\nbe treated as though they were included in this License, to the extent\\r\\nthat they are valid under applicable law.  If additional permissions\\r\\napply only to part of the Program, that part may be used separately\\r\\nunder those permissions, but the entire Program remains governed by\\r\\nthis License without regard to the additional permissions.\\r\\n\\r\\n  When you convey a copy of a covered work, you may at your option\\r\\nremove any additional permissions from that copy, or from any part of\\r\\nit.  (Additional permissions may be written to require their own\\r\\nremoval in certain cases when you modify the work.)  You may place\\r\\nadditional permissions on material, added by you to a covered work,\\r\\nfor which you have or can give appropriate copyright permission.\\r\\n\\r\\n  Notwithstanding any other provision of this License, for material you\\r\\nadd to a covered work, you may (if authorized by the copyright holders of\\r\\nthat material) supplement the terms of this License with terms:\\r\\n\\r\\n    a) Disclaiming warranty or limiting liability differently from the\\r\\n    terms of sections 15 and 16 of this License; or\\r\\n\\r\\n    b) Requiring preservation of specified reasonable legal notices or\\r\\n    author attributions in that material or in the Appropriate Legal\\r\\n    Notices displayed by works containing it; or\\r\\n\\r\\n    c) Prohibiting misrepresentation of the origin of that material, or\\r\\n    requiring that modified versions of such material be marked in\\r\\n    reasonable ways as different from the original version; or\\r\\n\\r\\n    d) Limiting the use for publicity purposes of names of licensors or\\r\\n    authors of the material; or\\r\\n\\r\\n    e) Declining to grant rights under trademark law for use of some\\r\\n    trade names, trademarks, or service marks; or\\r\\n\\r\\n    f) Requiring indemnification of licensors and authors of that\\r\\n    material by anyone who conveys the material (or modified versions of\\r\\n    it) with contractual assumptions of liability to the recipient, for\\r\\n    any liability that these contractual assumptions directly impose on\\r\\n    those licensors and authors.\\r\\n\\r\\n  All other non-permissive additional terms are considered \\\"further\\r\\nrestrictions\\\" within the meaning of section 10.  If the Program as you\\r\\nreceived it, or any part of it, contains a notice stating that it is\\r\\ngoverned by this License along with a term that is a further\\r\\nrestriction, you may remove that term.  If a license document contains\\r\\na further restriction but permits relicensing or conveying under this\\r\\nLicense, you may add to a covered work material governed by the terms\\r\\nof that license document, provided that the further restriction does\\r\\nnot survive such relicensing or conveying.\\r\\n\\r\\n  If you add terms to a covered work in accord with this section, you\\r\\nmust place, in the relevant source files, a statement of the\\r\\nadditional terms that apply to those files, or a notice indicating\\r\\nwhere to find the applicable terms.\\r\\n\\r\\n  Additional terms, permissive or non-permissive, may be stated in the\\r\\nform of a separately written license, or stated as exceptions;\\r\\nthe above requirements apply either way.\\r\\n\\r\\n  8. Termination.\\r\\n\\r\\n  You may not propagate or modify a covered work except as expressly\\r\\nprovided under this License.  Any attempt otherwise to propagate or\\r\\nmodify it is void, and will automatically terminate your rights under\\r\\nthis License (including any patent licenses granted under the third\\r\\nparagraph of section 11).\\r\\n\\r\\n  However, if you cease all violation of this License, then your\\r\\nlicense from a particular copyright holder is reinstated (a)\\r\\nprovisionally, unless and until the copyright holder explicitly and\\r\\nfinally terminates your license, and (b) permanently, if the copyright\\r\\nholder fails to notify you of the violation by some reasonable means\\r\\nprior to 60 days after the cessation.\\r\\n\\r\\n  Moreover, your license from a particular copyright holder is\\r\\nreinstated permanently if the copyright holder notifies you of the\\r\\nviolation by some reasonable means, this is the first time you have\\r\\nreceived notice of violation of this License (for any work) from that\\r\\ncopyright holder, and you cure the violation prior to 30 days after\\r\\nyour receipt of the notice.\\r\\n\\r\\n  Termination of your rights under this section does not terminate the\\r\\nlicenses of parties who have received copies or rights from you under\\r\\nthis License.  If your rights have been terminated and not permanently\\r\\nreinstated, you do not qualify to receive new licenses for the same\\r\\nmaterial under section 10.\\r\\n\\r\\n  9. Acceptance Not Required for Having Copies.\\r\\n\\r\\n  You are not required to accept this License in order to receive or\\r\\nrun a copy of the Program.  Ancillary propagation of a covered work\\r\\noccurring solely as a consequence of using peer-to-peer transmission\\r\\nto receive a copy likewise does not require acceptance.  However,\\r\\nnothing other than this License grants you permission to propagate or\\r\\nmodify any covered work.  These actions infringe copyright if you do\\r\\nnot accept this License.  Therefore, by modifying or propagating a\\r\\ncovered work, you indicate your acceptance of this License to do so.\\r\\n\\r\\n  10. Automatic Licensing of Downstream Recipients.\\r\\n\\r\\n  Each time you convey a covered work, the recipient automatically\\r\\nreceives a license from the original licensors, to run, modify and\\r\\npropagate that work, subject to this License.  You are not responsible\\r\\nfor enforcing compliance by third parties with this License.\\r\\n\\r\\n  An \\\"entity transaction\\\" is a transaction transferring control of an\\r\\norganization, or substantially all assets of one, or subdividing an\\r\\norganization, or merging organizations.  If propagation of a covered\\r\\nwork results from an entity transaction, each party to that\\r\\ntransaction who receives a copy of the work also receives whatever\\r\\nlicenses to the work the party\\u0027s predecessor in interest had or could\\r\\ngive under the previous paragraph, plus a right to possession of the\\r\\nCorresponding Source of the work from the predecessor in interest, if\\r\\nthe predecessor has it or can get it with reasonable efforts.\\r\\n\\r\\n  You may not impose any further restrictions on the exercise of the\\r\\nrights granted or affirmed under this License.  For example, you may\\r\\nnot impose a license fee, royalty, or other charge for exercise of\\r\\nrights granted under this License, and you may not initiate litigation\\r\\n(including a cross-claim or counterclaim in a lawsuit) alleging that\\r\\nany patent claim is infringed by making, using, selling, offering for\\r\\nsale, or importing the Program or any portion of it.\\r\\n\\r\\n  11. Patents.\\r\\n\\r\\n  A \\\"contributor\\\" is a copyright holder who authorizes use under this\\r\\nLicense of the Program or a work on which the Program is based.  The\\r\\nwork thus licensed is called the contributor\\u0027s \\\"contributor version\\\".\\r\\n\\r\\n  A contributor\\u0027s \\\"essential patent claims\\\" are all patent claims\\r\\nowned or controlled by the contributor, whether already acquired or\\r\\nhereafter acquired, that would be infringed by some manner, permitted\\r\\nby this License, of making, using, or selling its contributor version,\\r\\nbut do not include claims that would be infringed only as a\\r\\nconsequence of further modification of the contributor version.  For\\r\\npurposes of this definition, \\\"control\\\" includes the right to grant\\r\\npatent sublicenses in a manner consistent with the requirements of\\r\\nthis License.\\r\\n\\r\\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\\r\\npatent license under the contributor\\u0027s essential patent claims, to\\r\\nmake, use, sell, offer for sale, import and otherwise run, modify and\\r\\npropagate the contents of its contributor version.\\r\\n\\r\\n  In the following three paragraphs, a \\\"patent license\\\" is any express\\r\\nagreement or commitment, however denominated, not to enforce a patent\\r\\n(such as an express permission to practice a patent or covenant not to\\r\\nsue for patent infringement).  To \\\"grant\\\" such a patent license to a\\r\\nparty means to make such an agreement or commitment not to enforce a\\r\\npatent against the party.\\r\\n\\r\\n  If you convey a covered work, knowingly relying on a patent license,\\r\\nand the Corresponding Source of the work is not available for anyone\\r\\nto copy, free of charge and under the terms of this License, through a\\r\\npublicly available network server or other readily accessible means,\\r\\nthen you must either (1) cause the Corresponding Source to be so\\r\\navailable, or (2) arrange to deprive yourself of the benefit of the\\r\\npatent license for this particular work, or (3) arrange, in a manner\\r\\nconsistent with the requirements of this License, to extend the patent\\r\\nlicense to downstream recipients.  \\\"Knowingly relying\\\" means you have\\r\\nactual knowledge that, but for the patent license, your conveying the\\r\\ncovered work in a country, or your recipient\\u0027s use of the covered work\\r\\nin a country, would infringe one or more identifiable patents in that\\r\\ncountry that you have reason to believe are valid.\\r\\n\\r\\n  If, pursuant to or in connection with a single transaction or\\r\\narrangement, you convey, or propagate by procuring conveyance of, a\\r\\ncovered work, and grant a patent license to some of the parties\\r\\nreceiving the covered work authorizing them to use, propagate, modify\\r\\nor convey a specific copy of the covered work, then the patent license\\r\\nyou grant is automatically extended to all recipients of the covered\\r\\nwork and works based on it.\\r\\n\\r\\n  A patent license is \\\"discriminatory\\\" if it does not include within\\r\\nthe scope of its coverage, prohibits the exercise of, or is\\r\\nconditioned on the non-exercise of one or more of the rights that are\\r\\nspecifically granted under this License.  You may not convey a covered\\r\\nwork if you are a party to an arrangement with a third party that is\\r\\nin the business of distributing software, under which you make payment\\r\\nto the third party based on the extent of your activity of conveying\\r\\nthe work, and under which the third party grants, to any of the\\r\\nparties who would receive the covered work from you, a discriminatory\\r\\npatent license (a) in connection with copies of the covered work\\r\\nconveyed by you (or copies made from those copies), or (b) primarily\\r\\nfor and in connection with specific products or compilations that\\r\\ncontain the covered work, unless you entered into that arrangement,\\r\\nor that patent license was granted, prior to 28 March 2007.\\r\\n\\r\\n  Nothing in this License shall be construed as excluding or limiting\\r\\nany implied license or other defenses to infringement that may\\r\\notherwise be available to you under applicable patent law.\\r\\n\\r\\n  12. No Surrender of Others\\u0027 Freedom.\\r\\n\\r\\n  If conditions are imposed on you (whether by court order, agreement or\\r\\notherwise) that contradict the conditions of this License, they do not\\r\\nexcuse you from the conditions of this License.  If you cannot convey a\\r\\ncovered work so as to satisfy simultaneously your obligations under this\\r\\nLicense and any other pertinent obligations, then as a consequence you may\\r\\nnot convey it at all.  For example, if you agree to terms that obligate you\\r\\nto collect a royalty for further conveying from those to whom you convey\\r\\nthe Program, the only way you could satisfy both those terms and this\\r\\nLicense would be to refrain entirely from conveying the Program.\\r\\n\\r\\n  13. Use with the GNU Affero General Public License.\\r\\n\\r\\n  Notwithstanding any other provision of this License, you have\\r\\npermission to link or combine any covered work with a work licensed\\r\\nunder version 3 of the GNU Affero General Public License into a single\\r\\ncombined work, and to convey the resulting work.  The terms of this\\r\\nLicense will continue to apply to the part which is the covered work,\\r\\nbut the special requirements of the GNU Affero General Public License,\\r\\nsection 13, concerning interaction through a network will apply to the\\r\\ncombination as such.\\r\\n\\r\\n  14. Revised Versions of this License.\\r\\n\\r\\n  The Free Software Foundation may publish revised and/or new versions of\\r\\nthe GNU General Public License from time to time.  Such new versions will\\r\\nbe similar in spirit to the present version, but may differ in detail to\\r\\naddress new problems or concerns.\\r\\n\\r\\n  Each version is given a distinguishing version number.  If the\\r\\nProgram specifies that a certain numbered version of the GNU General\\r\\nPublic License \\\"or any later version\\\" applies to it, you have the\\r\\noption of following the terms and conditions either of that numbered\\r\\nversion or of any later version published by the Free Software\\r\\nFoundation.  If the Program does not specify a version number of the\\r\\nGNU General Public License, you may choose any version ever published\\r\\nby the Free Software Foundation.\\r\\n\\r\\n  If the Program specifies that a proxy can decide which future\\r\\nversions of the GNU General Public License can be used, that proxy\\u0027s\\r\\npublic statement of acceptance of a version permanently authorizes you\\r\\nto choose that version for the Program.\\r\\n\\r\\n  Later license versions may give you additional or different\\r\\npermissions.  However, no additional obligations are imposed on any\\r\\nauthor or copyright holder as a result of your choosing to follow a\\r\\nlater version.\\r\\n\\r\\n  15. Disclaimer of Warranty.\\r\\n\\r\\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\r\\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\r\\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\r\\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\r\\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\r\\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\r\\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\r\\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\r\\n\\r\\n  16. Limitation of Liability.\\r\\n\\r\\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\r\\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\r\\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\r\\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\r\\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\r\\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\r\\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\r\\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\r\\nSUCH DAMAGES.\\r\\n\\r\\n  17. Interpretation of Sections 15 and 16.\\r\\n\\r\\n  If the disclaimer of warranty and limitation of liability provided\\r\\nabove cannot be given local legal effect according to their terms,\\r\\nreviewing courts shall apply local law that most closely approximates\\r\\nan absolute waiver of all civil liability in connection with the\\r\\nProgram, unless a warranty or assumption of liability accompanies a\\r\\ncopy of the Program in return for a fee.\\r\\n\\r\\n                     END OF TERMS AND CONDITIONS\\r\\n\\r\\n            How to Apply These Terms to Your New Programs\\r\\n\\r\\n  If you develop a new program, and you want it to be of the greatest\\r\\npossible use to the public, the best way to achieve this is to make it\\r\\nfree software which everyone can redistribute and change under these terms.\\r\\n\\r\\n  To do so, attach the following notices to the program.  It is safest\\r\\nto attach them to the start of each source file to most effectively\\r\\nstate the exclusion of warranty; and each file should have at least\\r\\nthe \\\"copyright\\\" line and a pointer to where the full notice is found.\\r\\n\\r\\n    \\u003cone line to give the program\\u0027s name and a brief idea of what it does.\\u003e\\r\\n    Copyright (C) \\u003cyear\\u003e  \\u003cname of author\\u003e\\r\\n\\r\\n    This program is free software: you can redistribute it and/or modify\\r\\n    it under the terms of the GNU General Public License as published by\\r\\n    the Free Software Foundation, either version 3 of the License, or\\r\\n    (at your option) any later version.\\r\\n\\r\\n    This program is distributed in the hope that it will be useful,\\r\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n    GNU General Public License for more details.\\r\\n\\r\\n    You should have received a copy of the GNU General Public License\\r\\n    along with this program.  If not, see \\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\nAlso add information on how to contact you by electronic and paper mail.\\r\\n\\r\\n  If the program does terminal interaction, make it output a short\\r\\nnotice like this when it starts in an interactive mode:\\r\\n\\r\\n    \\u003cprogram\\u003e  Copyright (C) \\u003cyear\\u003e  \\u003cname of author\\u003e\\r\\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w\\u0027.\\r\\n    This is free software, and you are welcome to redistribute it\\r\\n    under certain conditions; type `show c\\u0027 for details.\\r\\n\\r\\nThe hypothetical commands `show w\\u0027 and `show c\\u0027 should show the appropriate\\r\\nparts of the General Public License.  Of course, your program\\u0027s commands\\r\\nmight be different; for a GUI interface, you would use an \\\"about box\\\".\\r\\n\\r\\n  You should also get your employer (if you work as a programmer) or school,\\r\\nif any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.\\r\\nFor more information on this, and how to apply and follow the GNU GPL, see\\r\\n\\u003chttp://www.gnu.org/licenses/\\u003e.\\r\\n\\r\\n  The GNU General Public License does not permit incorporating your program\\r\\ninto proprietary programs.  If your program is a subroutine library, you\\r\\nmay consider it more useful to permit linking proprietary applications with\\r\\nthe library.  If this is what you want to do, use the GNU Lesser General\\r\\nPublic License instead of this License.  But first, please read\\r\\n\\u003chttp://www.gnu.org/philosophy/why-not-lgpl.html\\u003e.\\r\\n\\r\\n*/\"},\"WrappedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPPP!!!\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\n/* ROOTKIT:\\r\\nWraps any ERC20\\r\\nSimilar to WETH except for ERC20 tokens instead of ETH\\r\\ndepositTokens/withdrawTokens are like deposit/withdraw in WETH\\r\\nInheriters can hook into depositTokens and withdrawTokens\\r\\nby overriding _beforeDepositTokens and _beforeWithdrawTokens\\r\\n*/\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./IWrappedERC20.sol\\\";\\r\\nimport \\\"./TokensRecoverable.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ncontract WrappedERC20 is ERC20, IWrappedERC20, TokensRecoverable\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public immutable override wrappedToken;\\r\\n\\r\\n    constructor (IERC20 _wrappedToken, string memory _name, string memory _symbol)\\r\\n        ERC20(_name, _symbol)\\r\\n    {        \\r\\n        if (_wrappedToken.decimals() != 18) {\\r\\n            _setupDecimals(_wrappedToken.decimals());\\r\\n        }\\r\\n        wrappedToken = _wrappedToken;\\r\\n    }\\r\\n\\r\\n    function depositTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeDepositTokens(_amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 received = wrappedToken.balanceOf(address(this)).sub(myBalance);\\r\\n        _mint(msg.sender, received);\\r\\n        emit Deposit(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(uint256 _amount) public override\\r\\n    {\\r\\n        _beforeWithdrawTokens(_amount);\\r\\n        _burn(msg.sender, _amount);\\r\\n        uint256 myBalance = wrappedToken.balanceOf(address(this));\\r\\n        wrappedToken.safeTransfer(msg.sender, _amount);\\r\\n        require (wrappedToken.balanceOf(address(this)) == myBalance.sub(_amount), \\\"Transfer not exact\\\");\\r\\n        emit Withdrawal(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function canRecoverTokens(IERC20 token) internal virtual override view returns (bool) \\r\\n    {\\r\\n        return token != this \\u0026\\u0026 token != wrappedToken;\\r\\n    }\\r\\n\\r\\n    function _beforeDepositTokens(uint256 _amount) internal virtual view { }\\r\\n    function _beforeWithdrawTokens(uint256 _amount) internal virtual view { }\\r\\n}\"}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityPairLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityController\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canControl\",\"type\":\"bool\"}],\"name\":\"setLiquidityController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"_liquidityPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_locked\",\"type\":\"bool\"}],\"name\":\"setLiquidityLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferGate\",\"name\":\"_transferGate\",\"type\":\"address\"}],\"name\":\"setTransferGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferGate\",\"outputs\":[{\"internalType\":\"contract ITransferGate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RootedToken", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6116e612776299cb9f40617eef10e3c277b1dbcffa9d657964ed2458168f7afb"}