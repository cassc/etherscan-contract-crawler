{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\n/*\r\n\r\n\r\nEverestCoin is a Play to Earn Game. Join us and let\u2019s climb Mount Everest together!\r\n\r\nFirst 200 buyers get Bored Yeti NFT + 20M EVCoin ETH tokens \r\n\r\nFirst 1000 buyers get 2M EVCoin ETH tokens:\r\n\r\n    Telegram: t.me/TheEverestCoin\r\n    Twitter: Twitter.com/CoinEverest\r\n    Website: everestcoin.io\r\n    Bridge: bridge.everestcoin.io\r\n\r\n\r\n*/\r\n\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface Protections {\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function setProtections(bool _as, bool _ab) external;\r\n    function removeSniper(address account) external;\r\n    function removeBlacklisted(address account) external;\r\n    function isBlacklisted(address account) external view returns (bool);\r\n    function setBlacklistEnabled(address account, bool enabled) external;\r\n    function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external;\r\n\r\n    function fullReset() external;\r\n}\r\n\r\ncontract LotteryArray {\r\n    address[] private lotteryList;\r\n    mapping (address => bool) private inLottery;\r\n    address private token;\r\n    uint256 lotteryEndStamp;\r\n\r\n    modifier onlyToken() {\r\n        require (msg.sender == token, \"Caller must be token.\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _lotteryEndStamp, address _token) {\r\n        lotteryEndStamp = _lotteryEndStamp;\r\n        token = _token;\r\n    }\r\n\r\n    function checkUser(address account, bool balance) external view onlyToken returns (string memory) {\r\n        return (inLottery[account] && balance) ? \"User is in the lottery!\" : \"User is not in the lottery.\";\r\n    }\r\n\r\n    function checkUserAtIndex(uint256 index) external view onlyToken returns (address) {\r\n       return lotteryList[index - 1];\r\n    }\r\n\r\n    function addUserToLottery(address account) external onlyToken {\r\n        if (block.timestamp < lotteryEndStamp) {\r\n            lotteryList.push(account);\r\n            inLottery[account] = true;\r\n        }\r\n    }\r\n\r\n    function finishAndCloseLottery(address payable owner) external onlyToken {\r\n        require (block.timestamp >= lotteryEndStamp, \"Lottery must be over.\");\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function getLotteryUserLength() public view returns (uint256) {\r\n        return uint256(lotteryList.length);\r\n    }\r\n\r\n    function getRemainingLotteryTime() public view returns (uint256) {\r\n        return (lotteryEndStamp > block.timestamp) ? (lotteryEndStamp - block.timestamp) : 0;\r\n    }\r\n\r\n}\r\n\r\ncontract EverestCoin is IERC20 {\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _liquidityHolders;\r\n    mapping (address => bool) private _isExcludedFromProtection;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    mapping (address => bool) private presaleAddresses;\r\n    bool private allowedPresaleExclusion = true;\r\n   \r\n    uint256 constant private startingSupply = 1_000_000_000_000;\r\n    string constant private _name = \"EverestCoin\";\r\n    string constant private _symbol = \"$EVCoin\";\r\n    uint8 constant private _decimals = 9;\r\n\r\n    uint256 constant private _tTotal = startingSupply * 10**_decimals;\r\n    uint256 constant private MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    struct Fees {\r\n        uint16 buyFee;\r\n        uint16 sellFee;\r\n        uint16 transferFee;\r\n    }\r\n\r\n    struct Ratios {\r\n        uint16 reflection;\r\n        uint16 burn;\r\n\r\n        uint16 marketing;\r\n        uint16 liquidity;\r\n        uint16 development;\r\n        uint16 mod;\r\n        uint16 gameAdvancement;\r\n        uint16 technicalSupport;\r\n        uint16 totalSwap;\r\n    }\r\n\r\n    Fees public _taxRates = Fees({\r\n        buyFee: 300,\r\n        sellFee: 300,\r\n        transferFee: 300\r\n        });\r\n\r\n    Ratios public _ratios = Ratios({\r\n        reflection: 400,\r\n        burn: 200,\r\n\r\n        marketing: 600,\r\n        liquidity: 100,\r\n        development: 200,\r\n        mod: 200,\r\n        gameAdvancement: 200,\r\n        technicalSupport: 100,\r\n        totalSwap: 1400\r\n        });\r\n\r\n    uint256 constant public maxBuyTaxes = 2000;\r\n    uint256 constant public maxSellTaxes = 2000;\r\n    uint256 constant public maxTransferTaxes = 2000;\r\n    uint256 constant masterTaxDivisor = 10000;\r\n\r\n    IRouter02 public dexRouter;\r\n    address public lpPair;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct TaxWallets {\r\n        address payable marketing;\r\n        address payable development;\r\n        address payable mod;\r\n        address payable gameAdvancement;\r\n        address payable technicalSupport;\r\n    }\r\n\r\n    TaxWallets public _taxWallets = TaxWallets({\r\n        marketing: payable(0xD60b49CeA6e10D9e54DC1F90C7bc55bA55904097),\r\n        development: payable(0xE4712e1d5d2B2594cB9887B5f07b17527F19D533),\r\n        mod: payable(0x734336CC4c0a16Ac7c2Ea206e3DB65AF6B5803C1),\r\n        gameAdvancement: payable(0x5b31FaF42470D84B20659354A4bE7cC603C6e640),\r\n        technicalSupport: payable(0xBaAFeeb00d5B02F24243540bdB12DaE2C097fFEB)\r\n        });\r\n    \r\n    bool inSwap;\r\n    bool public contractSwapEnabled = false;\r\n    uint256 public swapThreshold;\r\n    uint256 public swapAmount;\r\n    \r\n    uint256 private _maxTxAmount = (_tTotal * 2) / 100;\r\n    uint256 private _maxWalletSize = (_tTotal * 4) / 100;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    Protections protections;\r\n\r\n    LotteryArray lottery;\r\n    bool public lotteryRunning;\r\n    uint256 public minHoldForLotteryUI = 5 * 10**6;\r\n    uint256 private minimumHoldForLottery = minHoldForLotteryUI * 10**9; // 5 Million tokens needed to enter lottery.\r\n    uint256 public minETHBuy = 19*10**16;\r\n\r\n    bool public piEnabled = true;\r\n\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event AutoLiquify(uint256 amountCurrency, uint256 amountTokens);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor () payable {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n\r\n        if (block.chainid == 56) {\r\n            dexRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else if (block.chainid == 97) {\r\n            dexRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        } else if (block.chainid == 1) {\r\n            dexRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        lpPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n\r\n        _approve(_owner, address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n\r\n        _isExcludedFromFees[_owner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _liquidityHolders[_owner] = true;\r\n        _isExcludedFromLimits[_taxWallets.development] = true;\r\n        _isExcludedFromLimits[_taxWallets.gameAdvancement] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and renouncements.\r\n    // This allows for removal of ownership privileges from the owner once renounced or transferred.\r\n\r\n    address private _owner;\r\n\r\n    modifier onlyOwner() { require(_owner == msg.sender, \"Caller =/= owner.\"); _; }\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        setExcludedFromFees(_owner, false);\r\n        setExcludedFromFees(newOwner, true);\r\n        \r\n        if (balanceOf(_owner) > 0) {\r\n            finalizeTransfer(_owner, newOwner, balanceOf(_owner), false, false, true);\r\n        }\r\n        \r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        setExcludedFromFees(_owner, false);\r\n        address oldOwner = _owner;\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(oldOwner, address(0));\r\n    }\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external pure override returns (uint256) { return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (enabled == false) {\r\n            lpPairs[pair] = false;\r\n            protections.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"3 Day cooldown.!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            protections.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function setInitializer(address initializer) external onlyOwner {\r\n        require(!_hasLiqBeenAdded);\r\n        require(initializer != address(this), \"Can't be self.\");\r\n        protections = Protections(initializer);\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) external view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function isExcludedFromFees(address account) external view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function isExcludedFromProtection(address account) external view returns (bool) {\r\n        return _isExcludedFromProtection[account];\r\n    }\r\n\r\n    function setExcludedFromLimits(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromLimits[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromProtection(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromProtection[account] = enabled;\r\n    }\r\n//================================================ BLACKLIST\r\n\r\n    function setBlacklistEnabled(address account, bool enabled) external onlyOwner {\r\n        protections.setBlacklistEnabled(account, enabled);\r\n    }\r\n\r\n    function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external onlyOwner {\r\n        protections.setBlacklistEnabledMultiple(accounts, enabled);\r\n    }\r\n\r\n    function isBlacklisted(address account) public view returns (bool) {\r\n        return protections.isBlacklisted(account);\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner {\r\n        protections.removeSniper(account);\r\n    }\r\n\r\n    function setProtectionSettings(bool _antiSnipe, bool _antiBlock) external onlyOwner {\r\n        protections.setProtections(_antiSnipe, _antiBlock);\r\n    }\r\n\r\n    function setTaxes(uint16 buyFee, uint16 sellFee, uint16 transferFee) external onlyOwner {\r\n        require(buyFee <= maxBuyTaxes\r\n                && sellFee <= maxSellTaxes\r\n                && transferFee <= maxTransferTaxes,\r\n                \"Cannot exceed maximums.\");\r\n        _taxRates.buyFee = buyFee;\r\n        _taxRates.sellFee = sellFee;\r\n        _taxRates.transferFee = transferFee;\r\n    }\r\n\r\n    function setRatios(\r\n            uint16 reflection, \r\n            uint16 marketing,\r\n            uint16 liquidity,\r\n            uint16 development, \r\n            uint16 mod, \r\n            uint16 gameAdvancement, \r\n            uint16 technicalSupport, \r\n            uint16 burn\r\n                      ) external onlyOwner {\r\n        _ratios.technicalSupport = technicalSupport;\r\n        _ratios.reflection = reflection;\r\n        _ratios.marketing = marketing;\r\n        _ratios.liquidity = liquidity;\r\n        _ratios.mod = mod;\r\n        _ratios.gameAdvancement = gameAdvancement;\r\n        _ratios.development = development;\r\n        _ratios.burn = burn;\r\n        _ratios.totalSwap = marketing + development + mod + gameAdvancement + technicalSupport + liquidity;\r\n        uint256 total = _taxRates.buyFee + _taxRates.sellFee;\r\n        require(_ratios.totalSwap + _ratios.reflection + _ratios.burn <= total, \"Cannot exceed sum of buy and sell fees.\");\r\n    }\r\n\r\n    function setWallets(address payable marketing, address payable development, address payable mod, address payable gameAdvancement, address payable technicalSupport) external onlyOwner {\r\n        _taxWallets.technicalSupport = technicalSupport;\r\n        _taxWallets.marketing = payable(marketing);\r\n        _taxWallets.mod = payable(mod);\r\n        _taxWallets.gameAdvancement = payable(gameAdvancement);\r\n        _taxWallets.development = payable(development);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 percent, uint256 divisor) external onlyOwner {\r\n        require((_tTotal * percent) / divisor >= (_tTotal / 1000), \"Max Transaction amt must be above 0.1% of total supply.\");\r\n        _maxTxAmount = (_tTotal * percent) / divisor;\r\n    }\r\n\r\n    function setMaxWalletSize(uint256 percent, uint256 divisor) external onlyOwner {\r\n        require((_tTotal * percent) / divisor >= (_tTotal / 100), \"Max Wallet amt must be above 1% of total supply.\");\r\n        _maxWalletSize = (_tTotal * percent) / divisor;\r\n    }\r\n\r\n    function getMaxTX() public view returns (uint256) {\r\n        return _maxTxAmount / (10**_decimals);\r\n    }\r\n\r\n    function getMaxWallet() public view returns (uint256) {\r\n        return _maxWalletSize / (10**_decimals);\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n        require(swapThreshold <= swapAmount, \"Threshold cannot be above amount.\");\r\n        require(swapAmount <= (balanceOf(lpPair) * 150) / masterTaxDivisor, \"Cannot be above 1.5% of current PI.\");\r\n        require(swapAmount >= _tTotal / 1_000_000, \"Cannot be lower than 0.00001% of total supply.\");\r\n        require(swapThreshold >= _tTotal / 1_000_000, \"Cannot be lower than 0.00001% of total supply.\");\r\n    }\r\n\r\n    function setContractSwapEnabled(bool swapEnabled) external onlyOwner {\r\n        contractSwapEnabled = swapEnabled;\r\n        emit ContractSwapEnabledUpdated(swapEnabled);\r\n    }\r\n\r\n    function excludePresaleAddresses(address router, address presale) external onlyOwner {\r\n        require(allowedPresaleExclusion);\r\n        require(router != address(this) && presale != address(this), \"Just don't.\");\r\n        if (router == presale) {\r\n            _liquidityHolders[presale] = true;\r\n            presaleAddresses[presale] = true;\r\n            setExcludedFromFees(presale, true);\r\n            setExcludedFromReward(presale, true);\r\n        } else {\r\n            _liquidityHolders[router] = true;\r\n            _liquidityHolders[presale] = true;\r\n            presaleAddresses[router] = true;\r\n            presaleAddresses[presale] = true;\r\n            setExcludedFromFees(router, true);\r\n            setExcludedFromFees(presale, true);\r\n            setExcludedFromReward(router, true);\r\n            setExcludedFromReward(presale, true);\r\n        }\r\n    }\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != _owner\r\n            && to != _owner\r\n            && tx.origin != _owner\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\nfunction _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool buy = false;\r\n        bool sell = false;\r\n        bool other = false;\r\n        if (lpPairs[from]) {\r\n            buy = true;\r\n        } else if (lpPairs[to]) {\r\n            sell = true;\r\n        } else {\r\n            other = true;\r\n        }\r\n        if (_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                if (!other) {\r\n                    revert(\"Trading not yet enabled!\");\r\n                } else if (!_isExcludedFromProtection[from] && !_isExcludedFromProtection[to]) {\r\n                    revert(\"Tokens cannot be moved until trading is live.\");\r\n                }\r\n            }\r\n            if (buy || sell){\r\n                if (!_isExcludedFromLimits[from] && !_isExcludedFromLimits[to]) {\r\n                    require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n                }\r\n            }\r\n            if (to != address(dexRouter) && !sell) {\r\n                if (!_isExcludedFromLimits[to]) {\r\n                    require(balanceOf(to) + amount <= _maxWalletSize, \"Transfer amount exceeds the maxWalletSize.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sell) {\r\n            if (!inSwap) {\r\n                if (contractSwapEnabled\r\n                   && !presaleAddresses[to]\r\n                   && !presaleAddresses[from]\r\n                ) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance >= swapThreshold) {\r\n                        uint256 swapAmt = swapAmount;\r\n                        if (contractTokenBalance >= swapAmt) { contractTokenBalance = swapAmt; }\r\n                        contractSwap(contractTokenBalance);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return finalizeTransfer(from, to, amount, buy, sell, other);\r\n    }\r\n\r\n    function contractSwap(uint256 contractTokenBalance) internal lockTheSwap {\r\n        Ratios memory ratios = _ratios;\r\n        if (ratios.totalSwap == 0) {\r\n            return;\r\n        }\r\n\r\n        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n        \r\n        uint256 toLiquify = ((contractTokenBalance * ratios.liquidity) / ratios.totalSwap) / 2;\r\n        uint256 swapAmt = contractTokenBalance - toLiquify;\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        try dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            swapAmt,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {} catch {\r\n            return;\r\n        }\r\n\r\n        uint256 amtBalance = address(this).balance;\r\n        uint256 liquidityBalance = (amtBalance * toLiquify) / swapAmt;\r\n\r\n        if (toLiquify > 0) {\r\n            try dexRouter.addLiquidityETH{value: liquidityBalance}(\r\n                address(this),\r\n                toLiquify,\r\n                0,\r\n                0,\r\n                DEAD,\r\n                block.timestamp\r\n            ) {\r\n                emit AutoLiquify(liquidityBalance, toLiquify);\r\n            } catch {\r\n                return;\r\n            }\r\n        }\r\n\r\n        amtBalance -= liquidityBalance;\r\n        ratios.totalSwap -= ratios.liquidity;\r\n        uint256 modBalance = (amtBalance * ratios.mod) / ratios.totalSwap;\r\n        uint256 developmentBalance = (amtBalance * ratios.development) / ratios.totalSwap;\r\n        uint256 gameAdvancementBalance = (amtBalance * ratios.gameAdvancement) / ratios.totalSwap;\r\n        uint256 technicalSupportBalance = (amtBalance * ratios.technicalSupport) / ratios.totalSwap;\r\n        uint256 marketingBalance = amtBalance - (modBalance + developmentBalance + technicalSupportBalance + gameAdvancementBalance);\r\n        bool success;\r\n        if (ratios.marketing > 0) {\r\n            sendValue(_taxWallets.marketing, marketingBalance);\r\n        }\r\n        if (ratios.mod > 0) {\r\n            sendValue(_taxWallets.mod, modBalance);\r\n        }\r\n        if (ratios.development > 0) {\r\n            sendValue(_taxWallets.development, developmentBalance);\r\n        }\r\n        if (ratios.gameAdvancement > 0) {\r\n            sendValue(_taxWallets.gameAdvancement, gameAdvancementBalance);\r\n        }\r\n        if (ratios.technicalSupport > 0) {\r\n            sendValue(_taxWallets.technicalSupport, technicalSupportBalance);\r\n        }\r\n    }\r\n\r\n    function sendValue(address payable account, uint256 amount) internal {\r\n        bool success;\r\n        (success,) = account.call{value: amount, gas: 35000}(\"\");\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) internal {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            if(address(protections) == address(0)){\r\n                protections = Protections(address(this));\r\n            }\r\n            contractSwapEnabled = true;\r\n            emit ContractSwapEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        if(address(protections) == address(0)){\r\n            protections = Protections(address(this));\r\n        }\r\n        try protections.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        tradingEnabled = true;\r\n        allowedPresaleExclusion = false;\r\n        swapThreshold = (balanceOf(lpPair) * 10) / 10000;\r\n        swapAmount = (balanceOf(lpPair) * 25) / 10000;\r\n    }\r\n\r\n    function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\r\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            require(balanceOf(msg.sender) >= amounts[i]);\r\n            finalizeTransfer(msg.sender, accounts[i], amounts[i]*10**_decimals, false, false, true);\r\n        }\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function setExcludedFromReward(address account, bool enabled) public onlyOwner {\r\n        if (enabled) {\r\n            require(!_isExcluded[account], \"Account is already excluded.\");\r\n            if(_rOwned[account] > 0) {\r\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            if(account != lpPair){\r\n                _excluded.push(account);\r\n            }\r\n        } else if (!enabled) {\r\n            require(_isExcluded[account], \"Account is already included.\");\r\n            if (account == lpPair) {\r\n                _rOwned[account] = _tOwned[account] * _getRate();\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n            } else if(_excluded.length == 1) {\r\n                _rOwned[account] = _tOwned[account] * _getRate();\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n            } else {\r\n                for (uint256 i = 0; i < _excluded.length; i++) {\r\n                    if (_excluded[i] == account) {\r\n                        _excluded[i] = _excluded[_excluded.length - 1];\r\n                        _tOwned[account] = 0;\r\n                        _rOwned[account] = _tOwned[account] * _getRate();\r\n                        _isExcluded[account] = false;\r\n                        _excluded.pop();\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    struct ExtraValues {\r\n        uint256 tTransferAmount;\r\n        uint256 tFee;\r\n        uint256 tSwap;\r\n        uint256 tBurn;\r\n\r\n        uint256 rTransferAmount;\r\n        uint256 rAmount;\r\n        uint256 rFee;\r\n\r\n        uint256 currentRate;\r\n    }\r\n\r\n    function finalizeTransfer(address from, address to, uint256 tAmount, bool buy, bool sell, bool other) internal returns (bool) {\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        ExtraValues memory values = takeTaxes(from, to, tAmount, takeFee, buy, sell, other);\r\n\r\n        _rOwned[from] = _rOwned[from] - values.rAmount;\r\n        _rOwned[to] = _rOwned[to] + values.rTransferAmount;\r\n\r\n        if (_isExcluded[from]) {\r\n            _tOwned[from] = _tOwned[from] - tAmount;\r\n        }\r\n        if (_isExcluded[to]) {\r\n            _tOwned[to] = _tOwned[to] + values.tTransferAmount;  \r\n        }\r\n\r\n        if (values.rFee > 0 || values.tFee > 0) {\r\n            _rTotal -= values.rFee;\r\n        }\r\n\r\n        if (lotteryRunning) {\r\n            if (buy) {\r\n                if (balanceOf(to) > minimumHoldForLottery && !_isExcludedFromFees[to]) {\r\n                    address[] memory path = new address[](2);\r\n                    path[0] = address(this);\r\n                    path[1] = dexRouter.WETH();\r\n                    uint256 ethBalance = dexRouter.getAmountsOut(tAmount, path)[1];\r\n                    if (ethBalance >= minETHBuy) {\r\n                        lottery.addUserToLottery(to);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        emit Transfer(from, to, values.tTransferAmount);\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to) && !_isExcludedFromProtection[from] && !_isExcludedFromProtection[to] && !other) {\r\n                revert(\"Pre-liquidity transfer protection.\");\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    uint256 public _currentFee;\r\n    uint256 public _bonus;\r\n\r\n    function takeTaxes(address from, address to, uint256 tAmount, bool takeFee, bool buy, bool sell, bool other) internal returns (ExtraValues memory) {\r\n        ExtraValues memory values;\r\n        Ratios memory ratios = _ratios;\r\n        values.currentRate = _getRate();\r\n\r\n        values.rAmount = tAmount * values.currentRate;\r\n\r\n        if (_hasLimits(from, to)) {\r\n            bool checked;\r\n            try protections.checkUser(from, to, tAmount) returns (bool check) {\r\n                checked = check;\r\n            } catch {\r\n                revert();\r\n            }\r\n\r\n            if(!checked) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        if(takeFee) {\r\n            uint256 currentFee;\r\n\r\n            if (buy) {\r\n                currentFee = _taxRates.buyFee;\r\n            } else if (sell) {\r\n                currentFee = _taxRates.sellFee;\r\n                if (piEnabled) {\r\n                    uint256 balance = balanceOf(lpPair);\r\n                    if (tAmount > balance / 100) {\r\n                        _bonus = (tAmount * (10**4)) / balance;\r\n                        currentFee += (tAmount * (10**4)) / balance;\r\n                        if (currentFee > 3000) {\r\n                            currentFee = 3000;\r\n                        }\r\n                        _currentFee = currentFee;\r\n                    }\r\n                }\r\n            } else {\r\n                currentFee = _taxRates.transferFee;\r\n            }\r\n\r\n            uint256 feeAmount = (tAmount * currentFee) / masterTaxDivisor;\r\n            uint256 total = ratios.totalSwap + ratios.reflection + ratios.burn;\r\n            values.tFee = (feeAmount * ratios.reflection) / total;\r\n            values.tBurn = (feeAmount * ratios.burn) / total;\r\n            values.tSwap = feeAmount - (values.tFee + values.tBurn);\r\n            values.tTransferAmount = tAmount - (values.tFee + values.tSwap + values.tBurn);\r\n\r\n            values.rFee = values.tFee * values.currentRate;\r\n        } else {\r\n            values.tFee = 0;\r\n            values.tSwap = 0;\r\n            values.tBurn = 0;\r\n            values.tTransferAmount = tAmount;\r\n\r\n            values.rFee = 0;\r\n        }\r\n\r\n        if (values.tSwap > 0) {\r\n            _rOwned[address(this)] += values.tSwap * values.currentRate;\r\n            if(_isExcluded[address(this)]) {\r\n                _tOwned[address(this)] += values.tSwap;\r\n            }\r\n            emit Transfer(from, address(this), values.tSwap);\r\n        }\r\n\r\n        if (values.tBurn > 0) {\r\n            _rOwned[DEAD] += values.tBurn * values.currentRate;\r\n            if(_isExcluded[DEAD]) {\r\n                _tOwned[DEAD] += values.tBurn;\r\n            }\r\n            emit Transfer(from, DEAD, values.tBurn);\r\n        }\r\n\r\n        values.rTransferAmount = values.rAmount - (values.rFee + (values.tSwap * values.currentRate) + (values.tBurn * values.currentRate));\r\n        return values;\r\n    }\r\n\r\n    function _getRate() internal view returns(uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if(_isExcluded[lpPair]) {\r\n            if (_rOwned[lpPair] > rSupply || _tOwned[lpPair] > tSupply) return _rTotal / _tTotal;\r\n            rSupply -= _rOwned[lpPair];\r\n            tSupply -= _tOwned[lpPair];\r\n        }\r\n        if(_excluded.length > 0) {\r\n            for (uint8 i = 0; i < _excluded.length; i++) {\r\n                if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return _rTotal / _tTotal;\r\n                rSupply = rSupply - _rOwned[_excluded[i]];\r\n                tSupply = tSupply - _tOwned[_excluded[i]];\r\n            }\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return _rTotal / _tTotal;\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n//============================Lottery====================================\r\n    function startNewLottery(uint256 endTime) external onlyOwner {\r\n        require(!lotteryRunning, \"Lottery must be offline.\");\r\n        require(endTime > block.timestamp, \"Cannot end in the past.\");\r\n        lottery = new LotteryArray(endTime, address(this));\r\n        lotteryRunning = true;\r\n    }\r\n\r\n    function isUserInLottery(address account) public view returns (string memory) {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        bool userBalance = (balanceOf(account) >= minimumHoldForLottery);\r\n        return lottery.checkUser(account, userBalance);\r\n    }\r\n\r\n    function getLotteryUserLength() external view returns (uint256) {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        return lottery.getLotteryUserLength();\r\n    }\r\n\r\n    function finishAndCloseLottery() external onlyOwner {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        lottery.finishAndCloseLottery(payable(_owner));\r\n        lotteryRunning = false;\r\n    }\r\n\r\n    function setMinimumHoldForLottery(uint256 minHoldPercent, uint256 divisor) external onlyOwner {\r\n        require(!lotteryRunning, \"Lottery must be offline.\");\r\n        minimumHoldForLottery = (_tTotal * minHoldPercent) / divisor;\r\n        minHoldForLotteryUI = (startingSupply * minHoldPercent) / divisor;\r\n    }\r\n\r\n    function getRemainingLotteryTime() public view returns (uint256) {\r\n        require(lotteryRunning, \"Lottery offline!\");\r\n        return lottery.getRemainingLotteryTime();\r\n    }\r\n\r\n    function getUserAtIndex(uint256 index) public view returns (address, bool) {\r\n        address account = lottery.checkUserAtIndex(index);\r\n        bool returned;\r\n        if (balanceOf(account) >= minimumHoldForLottery){\r\n            returned = true;\r\n        } else {\r\n            returned = false;\r\n        }\r\n        return (account, returned);\r\n    }\r\n\r\n    function setMinETHBuyNeeded(uint256 amount, uint256 divisor) external onlyOwner {\r\n        require(!lotteryRunning, \"Lottery must be offline.\");\r\n        minETHBuy = amount * 10**divisor;\r\n    }\r\n\r\n    function setPriceImpactEnabled(bool enabled) external onlyOwner {\r\n        piEnabled = enabled;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"reflection\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mod\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gameAdvancement\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"technicalSupport\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalSwap\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxRates\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mod\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"gameAdvancement\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"technicalSupport\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"presale\",\"type\":\"address\"}],\"name\":\"excludePresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAndCloseLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryUserLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingLotteryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUserInLottery\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRunning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minETHBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldForLotteryUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBlacklistEnabledMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"setInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMinETHBuyNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minHoldPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMinimumHoldForLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setPriceImpactEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reflection\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"development\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mod\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gameAdvancement\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"technicalSupport\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burn\",\"type\":\"uint16\"}],\"name\":\"setRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"buyFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sellFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"transferFee\",\"type\":\"uint16\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mod\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"gameAdvancement\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"technicalSupport\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"startNewLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverestCoin", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "5", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c28c40308fdbf25a95ca3297ae1412a174291561f6935c11baef7f8965b78d33"}