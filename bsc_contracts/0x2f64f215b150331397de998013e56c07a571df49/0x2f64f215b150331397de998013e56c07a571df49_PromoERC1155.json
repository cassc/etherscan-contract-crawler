{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/extensions/ERC1155UserBlocklist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\nimport { IGetStatus } from \\\"../interfaces/IGetStatus.sol\\\";\\nimport { UserBlocklist } from \\\"./UserBlocklist.sol\\\";\\nimport { VerboseReverts } from \\\"../libraries/VerboseReverts.sol\\\";\\n\\nabstract contract ERC1155UserBlocklist is UserBlocklist, ERC1155 {\\n    string internal constant ERC1155_LOCK_USER_MESSAGE = \\\"ERC1155UserBlocklist: Transfer is blocked for user\\\";\\n    string internal constant ERC1155_LOCK_TOKEN_MESSAGE = \\\"ERC1155UserBlocklist: Transfer is blocked for token\\\";\\n\\n    constructor(address blocklist_) UserBlocklist(blocklist_) {}\\n\\n    /**\\n     * @inheritdoc UserBlocklist\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, UserBlocklist) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        BlocklistInfo memory blocklistInfo = _getBlocklist();\\n        if (!blocklistInfo.enabled) return;\\n\\n        address[] memory usersToCheck = new address[](3);\\n        usersToCheck[0] = operator;\\n        usersToCheck[1] = from;\\n        usersToCheck[2] = to;\\n        _checkIfActionIsAllowed(blocklistInfo.blocklist, usersToCheck, ids);\\n    }\\n\\n    /**\\n     * @dev Check if token ids are blocked\\n     * @param blocklist address of blocklist\\n     * @param ids ids of tokens\\n     */\\n    function _checkIfActionIsAllowed(address blocklist, address[] memory users, uint256[] memory ids) internal view {\\n        bool[] memory userStatuses;\\n        bool[] memory tokenStatuses;\\n        (userStatuses, tokenStatuses) = IGetStatus(blocklist).usersTokenIdsBlockStatus(users, address(this), ids);\\n\\n        for (uint256 i = 0; i < userStatuses.length; i++) {\\n            if (userStatuses[i]) {\\n                VerboseReverts._revertWithAddress(ERC1155_LOCK_USER_MESSAGE, users[i]);\\n            }\\n        }\\n        for (uint256 i = 0; i < tokenStatuses.length; i++) {\\n            if (tokenStatuses[i]) {\\n                VerboseReverts._revertWithUint(ERC1155_LOCK_TOKEN_MESSAGE, ids[i]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/extensions/ERC721UserBlocklist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IGetStatus } from \\\"../interfaces/IGetStatus.sol\\\";\\nimport { IGetTokenStatus } from \\\"../interfaces/IGetTokenStatus.sol\\\";\\nimport { VerboseReverts } from \\\"../libraries/VerboseReverts.sol\\\";\\nimport { UserBlocklist } from \\\"./UserBlocklist.sol\\\";\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n// Check if user is blocked and perform action\\nabstract contract ERC721UserBlocklist is ERC721, UserBlocklist {\\n    string internal constant ERC721_LOCK_USER_MESSAGE = \\\"ERC721UserBlocklist: Transfer is blocked for user\\\";\\n    string internal constant ERC721_LOCK_TOKEN_MESSAGE = \\\"ERC721UserBlocklist: Transfer is blocked for token\\\";\\n\\n    constructor(address blocklist_) UserBlocklist(blocklist_) {}\\n\\n    /**\\n     * @inheritdoc UserBlocklist\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, UserBlocklist) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        BlocklistInfo memory blocklistInfo = _getBlocklist();\\n        if (!blocklistInfo.enabled) return;\\n\\n        bool actionByOperator = _msgSender() != from;\\n\\n        address[] memory usersToCheck = new address[](actionByOperator ? 3 : 2);\\n        usersToCheck[0] = from;\\n        usersToCheck[1] = to;\\n        if (actionByOperator) {\\n            usersToCheck[2] = _msgSender();\\n        }\\n        _checkIfActionIsAllowed(blocklistInfo.blocklist, usersToCheck, tokenId);\\n    }\\n\\n    /**\\n     * @dev Check if user is blocked\\n     * @param blocklist_ address of blocklist\\n     * @param tokenId id of token\\n     */\\n    function _checkIfActionIsAllowed(address blocklist_, address[] memory users, uint256 tokenId) internal view {\\n        bool[] memory userStatuses;\\n        bool tokenStatus;\\n        (userStatuses, tokenStatus) = IGetStatus(blocklist_).usersTokenIdBlockStatus(users, address(this), tokenId);\\n\\n        for (uint256 id; id < userStatuses.length; id++) {\\n            if (userStatuses[id]) {\\n                VerboseReverts._revertWithAddress(ERC721_LOCK_USER_MESSAGE, users[id]);\\n            }\\n        }\\n\\n        if (tokenStatus) {\\n            VerboseReverts._revertWithUint(ERC721_LOCK_TOKEN_MESSAGE, tokenId);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/extensions/UserBlocklist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IGetStatus } from \\\"../interfaces/IGetStatus.sol\\\";\\nimport { IGetUserStatus } from \\\"../interfaces/IGetUserStatus.sol\\\";\\nimport { VerboseReverts } from \\\"../libraries/VerboseReverts.sol\\\";\\n\\nimport { ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nbytes4 constant USER_LOCK_HASH = 0x91659165;\\n\\n// Check if user is blocked and perform action\\ncontract UserBlocklist is ERC165 {\\n    struct BlocklistInfo {\\n        bool enabled;\\n        address blocklist;\\n    }\\n\\n    event BlocklistChanged(address indexed oldBlocklist, address indexed newBlocklist);\\n    event BlocklistStatusChanged(bool indexed newStatus);\\n\\n    string internal constant USERLOCK_MESSAGE = \\\"UserBlocklist: Action is blocked for\\\";\\n\\n    // For some gas optimization these two variables are in the same slot, so they can be read in one SLOAD\\n    BlocklistInfo private _blocklistInfo;\\n\\n    /**\\n     * @param blocklist_ address of the blocklist\\n     */\\n    constructor(address blocklist_) {\\n        _setBlocklist(blocklist_);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return interfaceId == USER_LOCK_HASH || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the blocklist.\\n     * @return address of the blocklist\\n     */\\n    function blocklist() public view returns (address) {\\n        return _blocklistInfo.blocklist;\\n    }\\n\\n    /**\\n     * @dev If true the blocklist is enabled, false otherwise.\\n     * @param state true if the blocklist is enabled, false otherwise\\n     */\\n    function _changeBlocklistState(bool state) internal virtual {\\n        emit BlocklistStatusChanged(state);\\n        _blocklistInfo.enabled = state;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the blocklist.\\n     * @param blocklist_ address of the blocklist\\n     */\\n    function _setBlocklist(address blocklist_) internal virtual {\\n        emit BlocklistChanged(_blocklistInfo.blocklist, blocklist_);\\n        _blocklistInfo.blocklist = blocklist_;\\n\\n        _changeBlocklistState(blocklist_ == address(0) ? false : true);\\n    }\\n\\n    /**\\n     * @dev Returns blocklist info.\\n     * @return Full blocklist info\\n     */\\n    function _getBlocklist() internal view returns (BlocklistInfo memory) {\\n        return _blocklistInfo;\\n    }\\n\\n    /**\\n     * @dev Reverts if the user is blocked.\\n     * @param user address of the user\\n     * @param message message to revert with\\n     */\\n    function _checkIfActionIsAllowed(address user, string memory message) internal view virtual {\\n        BlocklistInfo memory ri = _blocklistInfo;\\n        if (!ri.enabled) return;\\n        _checkIfActionIsAllowed(ri.blocklist, user, message);\\n    }\\n\\n    /**\\n     * @dev Reverts if the user is blocked.\\n     * @param blocklist_ address of the blocklist\\n     * @param user address of the user\\n     * @param message message to revert with\\n     */\\n    function _checkIfActionIsAllowed(address blocklist_, address user, string memory message) internal view virtual {\\n        if (IGetUserStatus(blocklist_).isUserBlocked(user)) {\\n            VerboseReverts._revertWithAddress(bytes(message).length > 0 ? message : USERLOCK_MESSAGE, user);\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if any of the users are blocked.\\n     * @param users array of addresses of the users\\n     * @param message message to revert with\\n     */\\n    function _batchCheckIfActionIsAllowed(address[] memory users, string memory message) internal view virtual {\\n        BlocklistInfo memory ri = _blocklistInfo;\\n        if (!ri.enabled) return;\\n        _batchCheckIfActionIsAllowed(ri.blocklist, users, message);\\n    }\\n\\n    /**\\n     * @dev Reverts if any of the users are blocked.\\n     * @param blocklist_ address of the blocklist\\n     * @param users array of addresses of the users\\n     * @param message message to revert with\\n     */\\n    function _batchCheckIfActionIsAllowed(\\n        address blocklist_,\\n        address[] memory users,\\n        string memory message\\n    ) internal view virtual {\\n        bool[] memory statuses = IGetUserStatus(blocklist_).batchIsUserBlocked(users);\\n        for (uint256 i = 0; i < users.length; i++) {\\n            if (statuses[i]) {\\n                VerboseReverts._revertWithAddress(bytes(message).length > 0 ? message : USERLOCK_MESSAGE, users[i]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/interfaces/IGetStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGetStatus {\\n    /**\\n     * @dev Returns if the user is blocked and if the token is blocked\\n     * @param user The user address\\n     * @param contractAddress The contract address\\n     * @param tokenId The token id\\n     * @return (userBlocked, tokenBlocked)\\n     */\\n    function userTokenIdBlockStatus(\\n        address user,\\n        address contractAddress,\\n        uint256 tokenId\\n    ) external view returns (bool, bool);\\n\\n    /**\\n     * @dev Returns if the user is blocked and if the tokens are blocked\\n     * @param user The user address\\n     * @param contractAddress The contract address\\n     * @param tokenIds Array of token ids\\n     * @return (userBlocked, tokenIdsBlocked)\\n     */\\n    function userTokenIdsBlockStatus(\\n        address user,\\n        address contractAddress,\\n        uint256[] calldata tokenIds\\n    ) external view returns (bool, bool[] memory);\\n\\n    /**\\n     * @dev Returns if the user is blocked and if the tokens are blocked\\n     * @param users Array of user addresses\\n     * @param contractAddress The contract address\\n     * @param tokenId The token id\\n     * @return (usersBlocked, tokenBlocked)\\n     */\\n    function usersTokenIdBlockStatus(\\n        address[] calldata users,\\n        address contractAddress,\\n        uint256 tokenId\\n    ) external view returns (bool[] memory, bool);\\n\\n    /**\\n     * @dev Returns if the users are blocked and if the tokens ids of a token are blocked\\n     * @param users Array of user addresses\\n     * @param contractAddress The contract address\\n     * @param tokenIds Array of token ids\\n     * @return (usersBlocked, tokenIdsBlocked)\\n     */\\n    function usersTokenIdsBlockStatus(\\n        address[] calldata users,\\n        address contractAddress,\\n        uint256[] calldata tokenIds\\n    ) external view returns (bool[] memory, bool[] memory);\\n\\n    /**\\n     * @dev Returns if the users are blocked and if the tokens are blocked\\n     * @param users Array of user addresses\\n     * @param contractAddresses Array of contract addresses\\n     * @param tokenIds Array of token ids\\n     * @return (usersBlocked, tokenIdsBlocked)\\n     */\\n    function usersTokensIdsBlockStatus(\\n        address[] calldata users,\\n        address[] calldata contractAddresses,\\n        uint256[][] calldata tokenIds\\n    ) external view returns (bool[] memory, bool[][] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/interfaces/IGetTokenStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGetTokenStatus {\\n    /**\\n     * @dev Returns true if the token is blocked.\\n     * @param contractAddress address of the contract\\n     * @param tokenId id of the token\\n     * @return true if the token is blocked, false otherwise\\n     */\\n    function isTokenBlocked(address contractAddress, uint256 tokenId) external view returns (bool);\\n\\n    /**\\n     * @dev Returns true if the tokens are blocked.\\n     * @param contractAddress address of the contract\\n     * @param tokenIds array of ids of the tokens\\n     * @return array of booleans, true if the token is blocked, false otherwise\\n     */\\n    function isTokenIdsBlocked(\\n        address contractAddress,\\n        uint256[] calldata tokenIds\\n    ) external view returns (bool[] memory);\\n\\n    /**\\n     * @dev Returns true if the token is blocked.\\n     * @param contractAddresses array of addresses of the contracts\\n     * @param tokenIds array of ids of the tokens\\n     * @return array of booleans, true if the token is blocked, false otherwise\\n     */\\n    function batchIsTokenIdsBlocked(\\n        address[] calldata contractAddresses,\\n        uint256[][] calldata tokenIds\\n    ) external view returns (bool[][] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/interfaces/IGetUserStatus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IGetUserStatus {\\n    /**\\n     * @dev Returns true if the user is blocked.\\n     * @param user address of the user\\n     * @return true if the user is blocked, false otherwise\\n     */\\n    function isUserBlocked(address user) external view returns (bool);\\n\\n    /**\\n     * @dev Returns true if the user is blocked.\\n     * @param users array of addresses of the users\\n     * @return array of booleans, true if the user is blocked, false otherwise\\n     */\\n    function batchIsUserBlocked(address[] calldata users) external view returns (bool[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/blocklist/libraries/VerboseReverts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary VerboseReverts {\\n    function _revertWithAddress(string memory message, address user) internal pure {\\n        revert(string(abi.encodePacked(message, \\\": \\\", Strings.toHexString(uint160(user), 20))));\\n    }\\n\\n    function _revertWithUint(string memory message, uint256 value) internal pure {\\n        revert(string(abi.encodePacked(message, \\\": \\\", Strings.toHexString(value, 32))));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/ERC1155Default.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport { IERC165, ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { IERC1155, ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\nimport { ERC1155Mintable, MintableToken } from \\\"./extensions/MintableToken.sol\\\";\\nimport { ERC1155Metadata, ContractMetadata } from \\\"./extensions/TokenMetadata.sol\\\";\\nimport \\\"./extensions/ERC2981Royalty.sol\\\";\\n\\npragma solidity ^0.8.17;\\n\\ncontract ERC1155Default is ERC1155, ERC1155Mintable, ERC1155Metadata, ERC2981Royalty {\\n    constructor(\\n        address feeReceiver,\\n        address royaltySetter_,\\n        string memory contractURI_,\\n        string memory tokenBaseURI_,\\n        address owner_,\\n        address minter_,\\n        address uriUpdater_,\\n        address metadataUpdater_\\n    )\\n        ERC1155(tokenBaseURI_)\\n        TokenRoles(owner_)\\n        ERC2981Royalty(feeReceiver, 250, royaltySetter_)\\n        ContractMetadata(contractURI_, tokenBaseURI_, uriUpdater_, metadataUpdater_)\\n        MintableToken(minter_)\\n    {}\\n\\n    /******************************************************************************/\\n    /*                                   ERC165                                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155, ERC2981Royalty, ERC1155Mintable, ERC1155Metadata) returns (bool) {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            ERC2981Royalty.supportsInterface(interfaceId) ||\\n            ERC1155Mintable.supportsInterface(interfaceId) ||\\n            ERC1155Metadata.supportsInterface(interfaceId);\\n    }\\n\\n    /******************************************************************************/\\n    /*                               ERC271Metadata                               */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC1155Metadata\\n     */\\n    function uri(uint256 tokenId) public view virtual override(ERC1155Metadata, ERC1155) returns (string memory) {\\n        return super.uri(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/ERC721Default.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport { IERC165, ERC165 } from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"./extensions/ERC721BatchRetriever.sol\\\";\\nimport { ERC721Mintable, MintableToken } from \\\"./extensions/MintableToken.sol\\\";\\nimport { ERC721Metadata, ContractMetadata } from \\\"./extensions/TokenMetadata.sol\\\";\\nimport \\\"./extensions/ERC2981Royalty.sol\\\";\\n\\npragma solidity ^0.8.17;\\n\\nabstract contract ERC721Default is ERC721, ERC721BatchRetriever, ERC721Mintable, ERC721Metadata, ERC2981Royalty {\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address feeReceiver,\\n        address royaltySetter_,\\n        string memory contractURI_,\\n        string memory tokenBaseURI_,\\n        address owner_,\\n        address minter_,\\n        address uriUpdater_,\\n        address metadataUpdater_\\n    )\\n        ERC721(name, symbol)\\n        TokenRoles(owner_)\\n        ERC2981Royalty(feeReceiver, 250, royaltySetter_)\\n        ContractMetadata(contractURI_, tokenBaseURI_, uriUpdater_, metadataUpdater_)\\n        MintableToken(minter_)\\n    {}\\n\\n    /******************************************************************************/\\n    /*                                   ERC165                                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, ERC2981Royalty, ERC721Mintable, ERC721Metadata, IERC165) returns (bool) {\\n        return\\n            ERC721.supportsInterface(interfaceId) ||\\n            ERC2981Royalty.supportsInterface(interfaceId) ||\\n            ERC721Mintable.supportsInterface(interfaceId) ||\\n            ERC721Metadata.supportsInterface(interfaceId);\\n    }\\n\\n    /******************************************************************************/\\n    /*                               ERC271Metadata                               */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC721Metadata\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721Metadata, ERC721) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/extensions/ERC2981Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\nimport \\\"../interfaces/IERC2981Royalty.sol\\\";\\n\\nimport \\\"./TokenRoles.sol\\\";\\n\\nabstract contract ERC2981Royalty is TokenRoles, ERC2981, IERC2981Royalty {\\n    error NotRoyaltySetterOrOwner(address sender);\\n\\n    bytes32 public constant ROYALTY_SETTER_ROLE = keccak256(\\\"ROYALTY_SETTER_ROLE\\\");\\n\\n    /**\\n     * @param receiver Who will receive royalties\\n     * @param royalty Numerator of the fee fraction (royalty/10000)\\n     */\\n    constructor(address receiver, uint96 royalty, address royaltySetter_) {\\n        _setDefaultRoyalty(receiver, royalty);\\n        _setupRolesRoyalty(royaltySetter_);\\n    }\\n\\n    function _setupRolesRoyalty(address royaltySetter_) private {\\n        _grantRole(ROYALTY_SETTER_ROLE, royaltySetter_);\\n        _setRoleAdmin(ROYALTY_SETTER_ROLE, OWNER_ROLE);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControl\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl, ERC2981) returns (bool) {\\n        return\\n            type(IERC2981Royalty).interfaceId == interfaceId ||\\n            ERC2981.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @param receiver Who will receive royalty\\n     * @param royalty Numerator of the royalty fraction (royalty/10000)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 royalty) external override onlyOwner {\\n        _setDefaultRoyalty(receiver, royalty);\\n    }\\n\\n    function resetDefaultRoyalty() external override onlyOwner {\\n        _deleteDefaultRoyalty();\\n    }\\n\\n    /**\\n     * @param tokenId Token id to set royalty for\\n     * @param receiver Who will receive property\\n     * @param royalty Numerator of the royalty fraction (feeNumerator/10000)\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 royalty) external override royaltySetterOrOwner {\\n        _setTokenRoyalty(tokenId, receiver, royalty);\\n    }\\n\\n    /**\\n     * @param tokenId Id of token to reset royalty for\\n     */\\n    function resetTokenRoyalty(uint256 tokenId) external override royaltySetterOrOwner {\\n        _resetTokenRoyalty(tokenId);\\n    }\\n\\n    /******************************************************************************/\\n    /*                               AccessControl                                */\\n    /******************************************************************************/\\n\\n    /**\\n     * @param account Address to grant royalty setter role to\\n     */\\n    function addRoyaltySetter(address account) external onlyOwner {\\n        _grantRole(ROYALTY_SETTER_ROLE, account);\\n    }\\n\\n    /**\\n     * @param account Address to revoke royalty setter role from\\n     */\\n    function revokeRoyaltySetter(address account) external onlyOwner {\\n        _revokeRole(ROYALTY_SETTER_ROLE, account);\\n    }\\n\\n    modifier royaltySetterOrOwner() {\\n        if (!hasRole(ROYALTY_SETTER_ROLE, _msgSender()) && !hasRole(OWNER_ROLE, _msgSender())) {\\n            revert NotRoyaltySetterOrOwner(_msgSender());\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/extensions/ERC4906.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC4906.sol\\\";\\n\\nabstract contract ERC4906 is IERC4906 {\\n    function notifyMetadataUpdate(uint256 tokenId) external virtual {\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == bytes4(0x49064906);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/extensions/ERC721BatchRetriever.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nabstract contract ERC721BatchRetriever is IERC721 {\\n    /**\\n     * @param accounts Array of accounts to check balances\\n     * @return balances Array of balances of provided accounts\\n     */\\n    function retrieveMultipleBalances(address[] calldata accounts) external view returns (uint256[] memory balances) {\\n        balances = new uint256[](accounts.length);\\n\\n        for (uint256 id = 0; id < accounts.length; id++) {\\n            balances[id] = this.balanceOf(accounts[id]);\\n        }\\n    }\\n\\n    /**\\n     * @param tokenIds Array of token Ids to check owners of\\n     * @return owners Array of owners that own provided tokens\\n     */\\n    function retriveBatchOwners(uint256[] calldata tokenIds) external view returns (address[] memory owners) {\\n        owners = new address[](tokenIds.length);\\n\\n        for (uint256 id = 0; id < tokenIds.length; id++) {\\n            owners[id] = this.ownerOf(tokenIds[id]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/extensions/MintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IERC721Mintable.sol\\\";\\nimport \\\"../interfaces/IERC1155Mintable.sol\\\";\\nimport \\\"./TokenRoles.sol\\\";\\n\\nabstract contract MintableToken is TokenRoles {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    error NotMinterOrOwner(address minter_);\\n\\n    constructor(address minter_) {\\n        _setupRolesMintable(minter_);\\n    }\\n\\n    /**\\n     * @dev Grants MINTER_ROLE to minter_ and sets OWNER_ROLE as admin role\\n     * @param minter_ Address to grant MINTER_ROLE to\\n     */\\n    function _setupRolesMintable(address minter_) private {\\n        _grantRole(MINTER_ROLE, minter_);\\n        _setRoleAdmin(MINTER_ROLE, OWNER_ROLE);\\n    }\\n\\n    /******************************************************************************/\\n    /*                               AccessControl                                */\\n    /******************************************************************************/\\n\\n    /**\\n     * @param _minter Address to grant minter role to\\n     */\\n    function addMinter(address _minter) external onlyOwner {\\n        _grantRole(MINTER_ROLE, _minter);\\n    }\\n\\n    /**\\n     * @param _minter Address to revoke minter role from\\n     */\\n    function revokeMinter(address _minter) external onlyOwner {\\n        _revokeRole(MINTER_ROLE, _minter);\\n    }\\n\\n    modifier minterOrOwner() {\\n        if (!hasRole(MINTER_ROLE, _msgSender()) && !hasRole(OWNER_ROLE, _msgSender())) {\\n            revert NotMinterOrOwner(_msgSender());\\n        }\\n        _;\\n    }\\n}\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nabstract contract ERC721Mintable is MintableToken, ERC721, IERC721Mintable {\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Mintable).interfaceId ||\\n            ERC721.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Mintable\\n     */\\n    function mintTo(address _to, uint256 _tokenId) external override minterOrOwner {\\n        _mintTo(_to, _tokenId);\\n    }\\n\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenId Id of token to mint\\n     */\\n    function _mintTo(address _to, uint256 _tokenId) internal virtual {\\n        _safeMint(_to, _tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Mintable\\n     */\\n    function mintBatchTo(address _to, uint256[] calldata _tokenIds) external override minterOrOwner {\\n        _mintBatchTo(_to, _tokenIds);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Mintable\\n     */\\n    function mintBatchToMultiple(\\n        address[] calldata _to,\\n        uint256[][] calldata _tokenIds\\n    ) external override minterOrOwner {\\n        for (uint256 i = 0; i < _to.length; i++) {\\n            _mintBatchTo(_to[i], _tokenIds[i]);\\n        }\\n    }\\n\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenIds Array with token ids to mint\\n     */\\n    function _mintBatchTo(address _to, uint256[] calldata _tokenIds) internal {\\n        uint256 length = _tokenIds.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            _mintTo(_to, _tokenIds[i]);\\n        }\\n    }\\n}\\n\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\nabstract contract ERC1155Mintable is MintableToken, ERC1155, IERC1155Mintable {\\n    error ArrayLengthMismatch();\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, AccessControl) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Mintable).interfaceId ||\\n            ERC1155.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintTo(address _to, uint256 _tokenId, uint256 _amount) external override minterOrOwner {\\n        _mint(_to, _tokenId, _amount, \\\"\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintBatchTo(\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts\\n    ) external override minterOrOwner {\\n        _mintBatch(_to, _tokenIds, _amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Mintable\\n     */\\n    function mintBatchToMultiple(\\n        address[] calldata _to,\\n        uint256[][] calldata _tokenIds,\\n        uint256[][] calldata _amounts\\n    ) external override minterOrOwner {\\n        uint256 length = _to.length;\\n        if (length != _tokenIds.length || length != _amounts.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n        for (uint256 i = 0; i < length; i++) {\\n            _mintBatch(_to[i], _tokenIds[i], _amounts[i], \\\"\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/extensions/TokenMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ERC4906.sol\\\";\\nimport \\\"./TokenRoles.sol\\\";\\n\\nabstract contract ContractMetadata is TokenRoles, ERC4906 {\\n    using Strings for uint256;\\n\\n    error NotURIUpdater(address account);\\n    error NotMetadataUpdater(address account);\\n\\n    event ContractURIUpdate(string newContractURI);\\n\\n    string internal _contractURI;\\n\\n    bytes32 public constant URI_UPDATER_ROLE = keccak256(\\\"URI_UPDATER_ROLE\\\");\\n    bytes32 public constant METADATA_UPDATER_ROLE = keccak256(\\\"METADATA_UPDATER_ROLE\\\");\\n\\n    constructor(\\n        string memory contractURI_,\\n        string memory tokenBaseURI_,\\n        address uriUpdater_,\\n        address metadataUpdater_\\n    ) {\\n        require(bytes(contractURI_).length != 0, \\\"ContractMetadata: contract uri cannot be empty!\\\");\\n\\n        _setContractURI(contractURI_);\\n        _setTokenURI(tokenBaseURI_, 0);\\n        _setupRolesMetadata(uriUpdater_, metadataUpdater_);\\n    }\\n\\n    /******************************************************************************/\\n    /*                                 TokenRoles                                 */\\n    /******************************************************************************/\\n\\n    /**\\n     *\\n     * @param uriUpdater_ Uri updater address\\n     * @param metadataUpdater_ Metadata updater address\\n     */\\n    function _setupRolesMetadata(address uriUpdater_, address metadataUpdater_) private {\\n        _grantRole(URI_UPDATER_ROLE, uriUpdater_);\\n        _setRoleAdmin(URI_UPDATER_ROLE, OWNER_ROLE);\\n        _grantRole(METADATA_UPDATER_ROLE, metadataUpdater_);\\n        _setRoleAdmin(METADATA_UPDATER_ROLE, OWNER_ROLE);\\n    }\\n\\n    function addUriUpdater(address account) external onlyOwner {\\n        _grantRole(URI_UPDATER_ROLE, account);\\n    }\\n\\n    function revokeUriUpdater(address account) external onlyOwner {\\n        _revokeRole(URI_UPDATER_ROLE, account);\\n    }\\n\\n    function addMetadataUpdater(address account) external onlyOwner {\\n        _grantRole(METADATA_UPDATER_ROLE, account);\\n    }\\n\\n    function revokeMetadataUpdater(address account) external onlyOwner {\\n        _revokeRole(METADATA_UPDATER_ROLE, account);\\n    }\\n\\n    modifier onlyUriUpdater() {\\n        if (!hasRole(URI_UPDATER_ROLE, _msgSender()) && !hasRole(OWNER_ROLE, _msgSender())) {\\n            revert NotURIUpdater(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    modifier onlyMetadataUpdater() {\\n        if (!hasRole(METADATA_UPDATER_ROLE, _msgSender()) && !hasRole(OWNER_ROLE, _msgSender())) {\\n            revert NotMetadataUpdater(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /******************************************************************************/\\n    /*                                   ERC165                                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @param interfaceId IntrefaceId to check\\n     * @return Is interface implemented or not\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC4906, AccessControl) returns (bool) {\\n        return ERC4906.supportsInterface(interfaceId) || AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    /******************************************************************************/\\n    /*                              ContractMetadata                              */\\n    /******************************************************************************/\\n\\n    function contractURI() public view virtual returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    /**\\n     * @param uri_ New contract URI\\n     */\\n    function _setContractURI(string memory uri_) internal {\\n        emit ContractURIUpdate(uri_);\\n        _contractURI = uri_;\\n    }\\n\\n    /**\\n     * @param uri_ Contract URI\\n     */\\n    function setContractURI(string memory uri_) external onlyUriUpdater {\\n        _setContractURI(uri_);\\n    }\\n\\n    function _setTokenURI(string memory, uint256) internal virtual {}\\n\\n    /******************************************************************************/\\n    /*                                  ERC4906                                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC4906\\n     */\\n    function notifyMetadataUpdate(uint256 tokenId) external override onlyMetadataUpdater {\\n        _notifyMetadataUpdate(tokenId);\\n    }\\n\\n    function _notifyMetadataUpdate(uint256 tokenId) internal {\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev Notify metadata update\\n     * @param from First token id to update\\n     * @param to Last token id to update\\n     */\\n    function notifyBatchMetadataUpdate(uint256 from, uint256 to) external onlyMetadataUpdater {\\n        _notifyBatchMetadataUpdate(from, to);\\n    }\\n\\n    function _notifyBatchMetadataUpdate(uint256 from, uint256 to) internal {\\n        emit BatchMetadataUpdate(from, to);\\n    }\\n\\n    /**\\n     * @dev Notify metadata update for multiple tokens\\n     * @param tokenIds Array of token ids to update\\n     */\\n    function notifyMetadataUpdateForMultipleTokens(uint256[] calldata tokenIds) external onlyMetadataUpdater {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _notifyMetadataUpdate(tokenIds[i]);\\n        }\\n    }\\n}\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nabstract contract ERC721Metadata is ContractMetadata, ERC721 {\\n    using Strings for uint256;\\n\\n    string internal _tokenBaseURI;\\n\\n    /******************************************************************************/\\n    /*                                   ERC165                                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @param interfaceId IntrefaceId to check\\n     * @return Is interface implemented or not\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721, ContractMetadata) returns (bool) {\\n        return ERC721.supportsInterface(interfaceId) || ContractMetadata.supportsInterface(interfaceId);\\n    }\\n\\n    /******************************************************************************/\\n    /*                               ERC721Metadata                               */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC721\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (bytes(_tokenBaseURI).length == 0) return \\\"\\\";\\n\\n        return string(abi.encodePacked(_tokenBaseURI, tokenId.toString(), \\\".json\\\"));\\n    }\\n\\n    /**\\n     * @param uri_ Base token uri_\\n     * @param totalTokens Total supply when all tokens will be minted\\n     */\\n    function setTokenURI(string memory uri_, uint256 totalTokens) external onlyUriUpdater {\\n        _setTokenURI(uri_, totalTokens);\\n    }\\n\\n    /**\\n     * @param uri_ New base URI for token metadata\\n     */\\n    function _setTokenURI(string memory uri_, uint256 totalTokens) internal override {\\n        emit BatchMetadataUpdate(0, totalTokens);\\n        _tokenBaseURI = uri_;\\n    }\\n}\\n\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\n\\nabstract contract ERC1155Metadata is ContractMetadata, ERC1155 {\\n    using Strings for uint256;\\n\\n    /******************************************************************************/\\n    /*                                   ERC165                                   */\\n    /******************************************************************************/\\n\\n    /**\\n     * @param interfaceId IntrefaceId to check\\n     * @return Is interface implemented or not\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155, ContractMetadata) returns (bool) {\\n        return ERC1155.supportsInterface(interfaceId) || ContractMetadata.supportsInterface(interfaceId);\\n    }\\n\\n    /******************************************************************************/\\n    /*                              ERC1155Metadata                               */\\n    /******************************************************************************/\\n\\n    /**\\n     * @inheritdoc ERC1155\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory baseURI = super.uri(tokenId);\\n\\n        if (bytes(baseURI).length == 0) return \\\"\\\";\\n\\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\n    }\\n\\n    /**\\n     *\\n     * @param uri_ New base URI for token metadata\\n     * @param totalTokens Total amount of tokens in the collection\\n     */\\n    function setURI(string memory uri_, uint256 totalTokens) external onlyUriUpdater {\\n        _setTokenURI(uri_, totalTokens);\\n    }\\n\\n    function _setTokenURI(string memory uri_, uint256 totalTokens) internal override {\\n        emit BatchMetadataUpdate(0, totalTokens);\\n        _setURI(uri_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/extensions/TokenRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n// Improt access control contracts\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nabstract contract TokenRoles is AccessControl {\\n    error NotOwner(address account);\\n\\n    error FunctionDisabled(bytes4 selector);\\n    error CannotRevokeSelf(address owner_);\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n\\n    constructor(address owner_) {\\n        _setupRoles(owner_);\\n    }\\n\\n    /**\\n     * @dev Grants OWNER_ROLE to owner_ and sets OWNER_ROLE as admin role\\n     * @param owner_ Address to grant OWNER_ROLE to\\n     */\\n    function _setupRoles(address owner_) private {\\n        _grantRole(OWNER_ROLE, owner_);\\n        _setRoleAdmin(OWNER_ROLE, OWNER_ROLE);\\n    }\\n\\n    /**\\n     * @param owner_ Address to grant OWNER_ROLE to\\n     */\\n    function addOwner(address owner_) external onlyOwner {\\n        _grantRole(OWNER_ROLE, owner_);\\n    }\\n\\n    /**\\n     * @param owner_ Address to revoke OWNER_ROLE from\\n     */\\n    function revokeOwner(address owner_) external onlyOwner {\\n        if (owner_ == _msgSender()) {\\n            revert CannotRevokeSelf(owner_);\\n        }\\n        _revokeRole(OWNER_ROLE, owner_);\\n    }\\n\\n    function grantRole(bytes32, address) public pure override {\\n        revert FunctionDisabled(AccessControl.grantRole.selector);\\n    }\\n\\n    function revokeRole(bytes32, address) public pure override {\\n        revert FunctionDisabled(AccessControl.revokeRole.selector);\\n    }\\n\\n    function renounceRole(bytes32, address) public pure override {\\n        revert FunctionDisabled(AccessControl.renounceRole.selector);\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by the owner.\\n     */\\n    modifier onlyOwner() {\\n        if (!hasRole(OWNER_ROLE, _msgSender())) {\\n            revert NotOwner(_msgSender());\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/interfaces/IERC1155Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC1155Mintable {\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenId Id of token to mint\\n     */\\n    function mintTo(address _to, uint256 _tokenId, uint256 _amount) external;\\n\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenIds Array with token ids to mint\\n     * @param _amounts Array with token amounts to mint\\n     */\\n    function mintBatchTo(address _to, uint256[] calldata _tokenIds, uint256[] calldata _amounts) external;\\n\\n    /**\\n     * @param _to Array of addresses to mint token to\\n     * @param _tokenIds Array of arrays with token ids to mint\\n     * @param _amounts Array of arrays with token amounts to mint\\n     */\\n    function mintBatchToMultiple(\\n        address[] calldata _to,\\n        uint256[][] calldata _tokenIds,\\n        uint256[][] calldata _amounts\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/interfaces/IERC2981Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC2981Royalty {\\n    /**\\n     * @param receiver Who will receive royalty\\n     * @param royalty Numerator of the royalty fraction (royalty/10000)\\n     */\\n    function setDefaultRoyalty(address receiver, uint96 royalty) external;\\n\\n    function resetDefaultRoyalty() external;\\n\\n    /**\\n     * @param tokenId Token id to set royalty for\\n     * @param receiver Who will receive property\\n     * @param royalty Numerator of the royalty fraction (feeNumerator/10000)\\n     */\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 royalty) external;\\n\\n    /**\\n     * @param tokenId Id of token to reset royalty for\\n     */\\n    function resetTokenRoyalty(uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/interfaces/IERC4906.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\r\n    },\r\n    \"contracts/common/tokens/interfaces/IERC721Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC721Mintable {\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenId Id of token to mint\\n     */\\n    function mintTo(address _to, uint256 _tokenId) external;\\n\\n    /**\\n     * @param _to Address to mint token to\\n     * @param _tokenIds Array with token ids to mint\\n     */\\n    function mintBatchTo(address _to, uint256[] calldata _tokenIds) external;\\n\\n    /**\\n     * @param _to Array of addresses to mint tokens to\\n     * @param _tokenIds Array of arrays with token ids to mint\\n     */\\n    function mintBatchToMultiple(address[] calldata _to, uint256[][] calldata _tokenIds) external;\\n}\\n\"\r\n    },\r\n    \"contracts/game/TokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"../common/tokens/ERC721Default.sol\\\";\\nimport \\\"../blocklist/extensions/ERC721UserBlocklist.sol\\\";\\n\\nimport \\\"../common/tokens/ERC1155Default.sol\\\";\\nimport \\\"../blocklist/extensions/ERC1155UserBlocklist.sol\\\";\\n\\nabstract contract ERC721Base is ERC721Default, ERC721UserBlocklist {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address feeReceiver_,\\n        address royaltySetter_,\\n        string memory contractURI_,\\n        string memory tokenBaseURI_,\\n        address blocklist_,\\n        address owner_,\\n        address minter_,\\n        address uriUpdater_,\\n        address metadataUpdater_\\n    )\\n        ERC721Default(\\n            name_,\\n            symbol_,\\n            feeReceiver_,\\n            royaltySetter_,\\n            contractURI_,\\n            tokenBaseURI_,\\n            owner_,\\n            minter_,\\n            uriUpdater_,\\n            metadataUpdater_\\n        )\\n        ERC721UserBlocklist(blocklist_)\\n    {}\\n\\n    /**\\n     * @inheritdoc ERC721UserBlocklist\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721UserBlocklist, ERC721) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC721Default, ERC721UserBlocklist) returns (bool) {\\n        return ERC721Default.supportsInterface(interfaceId) || ERC721UserBlocklist.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC721Default\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721Default, ERC721) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @param state - true to enable blocklist, false to disable\\n     */\\n    function changeBlocklistState(bool state) external onlyOwner {\\n        _changeBlocklistState(state);\\n    }\\n\\n    /**\\n     * @param blocklist_ - address of the new blocklist\\n     */\\n    function changeBlocklist(address blocklist_) external onlyOwner {\\n        _setBlocklist(blocklist_);\\n    }\\n}\\n\\nabstract contract ERC1155Base is ERC1155Default, ERC1155UserBlocklist {\\n    constructor(\\n        address feeReceiver_,\\n        address royaltySetter_,\\n        string memory contractURI_,\\n        string memory tokenBaseURI_,\\n        address blocklist_,\\n        address owner_,\\n        address minter_,\\n        address uriUpdater_,\\n        address metadataUpdater_\\n    )\\n        ERC1155Default(\\n            feeReceiver_,\\n            royaltySetter_,\\n            contractURI_,\\n            tokenBaseURI_,\\n            owner_,\\n            minter_,\\n            uriUpdater_,\\n            metadataUpdater_\\n        )\\n        ERC1155UserBlocklist(blocklist_)\\n    {}\\n\\n    /**\\n     * @inheritdoc ERC1155UserBlocklist\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155UserBlocklist, ERC1155) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155Default\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Default, ERC1155UserBlocklist) returns (bool) {\\n        return ERC1155Default.supportsInterface(interfaceId) || ERC1155UserBlocklist.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155Default\\n     */\\n    function uri(uint256 tokenId) public view virtual override(ERC1155Default, ERC1155) returns (string memory) {\\n        return super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @param state - true to enable blocklist, false to disable\\n     */\\n    function changeBlocklistState(bool state) external onlyOwner {\\n        _changeBlocklistState(state);\\n    }\\n\\n    /**\\n     * @param blocklist_ - address of the new blocklist\\n     */\\n    function changeBlocklist(address blocklist_) external onlyOwner {\\n        _setBlocklist(blocklist_);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/promo-1155/PromoERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport { ERC1155 } from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport { ERC1155Supply } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport { ERC1155Burnable } from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport { ERC1155Base } from \\\"../game/TokenBase.sol\\\";\\n\\ncontract PromoERC1155 is ERC1155Base, ERC1155Burnable, ERC1155Supply {\\n    event TokenAdded(uint256 tokenId, Restrictions r);\\n    event TokenDeleted(uint256 tokenId);\\n\\n    error UnknownTokenId(uint256 tokenId);\\n    error BurnForbidden(uint256 tokenId);\\n    error TransferForbidden(uint256 tokenId);\\n    error MintForbidden(uint256 tokenId);\\n    error TokenAlreadyExists(uint256 tokenId);\\n    error TotalSupplyIsNotZero(uint256 tokenId);\\n    error InvalidCollection(uint256 requiredCollection, uint256 tokenCollection);\\n    error MaxMintAmountPerAddressExceeded(uint256 tokenId, address to, address operator, uint256 delta);\\n    error MaxMintAmountPerTokenIdExceeded(uint256 tokenId, address to, address operator, uint256 delta);\\n\\n    mapping(uint256 => Restrictions) public tokenRestrictions;\\n    mapping(uint256 => mapping(address => uint256)) public mintedPerUser;\\n    mapping(uint256 => uint256) public mintedPerToken;\\n\\n    constructor(\\n        address feeReceiver,\\n        address royaltySetter_,\\n        string memory contractURI_,\\n        string memory tokenBaseURI_,\\n        address blocklist_,\\n        address owner_,\\n        address minter_,\\n        address uriUpdater_,\\n        address metadataUpdater_,\\n        address tokenManager_\\n    )\\n        ERC1155Base(\\n            feeReceiver,\\n            royaltySetter_,\\n            contractURI_,\\n            tokenBaseURI_,\\n            blocklist_,\\n            owner_,\\n            minter_,\\n            uriUpdater_,\\n            metadataUpdater_\\n        )\\n    {\\n        _setupTokenManagerRole(tokenManager_);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155Base\\n     */\\n    function uri(uint256 tokenId) public view virtual override(ERC1155Base, ERC1155) returns (string memory) {\\n        return ERC1155Base.uri(tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155Base\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155Base, ERC1155) returns (bool) {\\n        return ERC1155Base.supportsInterface(interfaceId) || ERC1155.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice public mint function\\n     * @param tokenId id of the token to mint\\n     * @param amount amount of the token to mint\\n     */\\n    function publicMint(uint256 tokenId, uint256 amount) external {\\n        _mint(msg.sender, tokenId, amount, \\\"\\\");\\n    }\\n\\n    struct Restrictions {\\n        bool exists; // true if token exists\\n        bool mintable; // true if token is mintable\\n        bool burnable; // true if token is burnable\\n        bool transferrable; // true if token is transferrable\\n        uint64 amountPerAddress; // max amount of tokens per address\\n        uint64 maxAmount; // max amount of tokens\\n        uint64 collectionId; // collection id\\n    }\\n\\n    /******************************************************************************/\\n    /*                             Token manager role                             */\\n    /******************************************************************************/\\n\\n    error NotTokenManagerOrOwner(address tokenManager);\\n\\n    bytes32 public constant TOKEN_MANAGER_ROLE = keccak256(\\\"TOKEN_MANAGER_ROLE\\\");\\n\\n    modifier onlyTokenManagerOrOwner() {\\n        if (!hasRole(TOKEN_MANAGER_ROLE, _msgSender()) && !hasRole(OWNER_ROLE, _msgSender())) {\\n            revert NotTokenManagerOrOwner(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Grants TOKEN_MANAGER role to token manager and sets OWNER_ROLE as admin role\\n     * @param tokenManager_ Address to grant TOKEN_MANAGER role to\\n     */\\n    function _setupTokenManagerRole(address tokenManager_) private {\\n        _grantRole(TOKEN_MANAGER_ROLE, tokenManager_);\\n        _setRoleAdmin(TOKEN_MANAGER_ROLE, OWNER_ROLE);\\n    }\\n\\n    /**\\n     * @param tokenManager_ Address to grant TOKEN_MANAGER role to\\n     */\\n    function addTokenManager(address tokenManager_) external onlyOwner {\\n        _grantRole(TOKEN_MANAGER_ROLE, tokenManager_);\\n    }\\n\\n    /**\\n     * @param tokenManager_ Address to grant TOKEN_MANAGER role to\\n     */\\n    function revokeTokenManager(address tokenManager_) external onlyOwner {\\n        _revokeRole(TOKEN_MANAGER_ROLE, tokenManager_);\\n    }\\n\\n    /******************************************************************************/\\n    /*                             Token tokenRestrictions                             */\\n    /******************************************************************************/\\n\\n    /**\\n     * @notice Check if token exists\\n     * @param tokenId id of the token to check\\n     * @return true if token exists\\n     */\\n    function tokenExist(uint256 tokenId) public view returns (bool) {\\n        return tokenRestrictions[tokenId].exists;\\n    }\\n\\n    /**\\n     * @param tokenId id of the token\\n     */\\n    function _revertIfTokenDoesNotExist(uint256 tokenId, Restrictions memory r) internal pure {\\n        if (!r.exists) {\\n            revert UnknownTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Add token to the promo pool\\n     * @param tokenId id of the token\\n     * @param mintable true if the token is mintable\\n     * @param burnable true if the token is burnable\\n     * @param transferrable true if the token is transferrable\\n     * @param amountPerAddress amount of tokens per address for public mint\\n     * @param maxTokenAmount max amount of tokens per tokenId for public mint\\n     */\\n    function modifyTokenRestrictions(\\n        uint256 tokenId,\\n        bool mintable,\\n        bool burnable,\\n        bool transferrable,\\n        uint64 amountPerAddress,\\n        uint64 maxTokenAmount\\n    ) external onlyTokenManagerOrOwner {\\n        Restrictions memory tr = tokenRestrictions[tokenId];\\n\\n        _revertIfTokenDoesNotExist(tokenId, tr);\\n\\n        Restrictions memory r = Restrictions({\\n            exists: true,\\n            mintable: mintable,\\n            burnable: burnable,\\n            transferrable: transferrable,\\n            amountPerAddress: amountPerAddress,\\n            maxAmount: maxTokenAmount,\\n            collectionId: tr.collectionId\\n        });\\n\\n        emit TokenAdded(tokenId, r);\\n\\n        tokenRestrictions[tokenId] = r;\\n    }\\n\\n    /**\\n     * @notice Add token to the promo pool\\n     * @param collectionId id of the collection to modify\\n     * @param tokenIds id of the token\\n     * @param mintable true if the token is mintable\\n     * @param burnable true if the token is burnable\\n     * @param transferrable true if the token is transferrable\\n     * @param amountPerAddress amount of tokens per address for public mint\\n     * @param maxTokenAmount max amount of tokens per tokenId for public mint\\n     */\\n    function modifyCollectionRestrictions(\\n        uint256 collectionId,\\n        uint256[] memory tokenIds,\\n        bool[] memory mintable,\\n        bool[] memory burnable,\\n        bool[] memory transferrable,\\n        uint64[] memory amountPerAddress,\\n        uint64[] memory maxTokenAmount\\n    ) external onlyTokenManagerOrOwner {\\n        for (uint256 id = 0; id < tokenIds.length; id++) {\\n            Restrictions memory tr = tokenRestrictions[tokenIds[id]];\\n\\n            if (tr.collectionId != collectionId) {\\n                revert InvalidCollection(collectionId, tr.collectionId);\\n            }\\n\\n            _revertIfTokenDoesNotExist(tokenIds[id], tr);\\n\\n            Restrictions memory r = Restrictions({\\n                exists: true,\\n                mintable: mintable[id],\\n                burnable: burnable[id],\\n                transferrable: transferrable[id],\\n                amountPerAddress: amountPerAddress[id],\\n                maxAmount: maxTokenAmount[id],\\n                collectionId: tr.collectionId\\n            });\\n\\n            emit TokenAdded(tokenIds[id], r);\\n\\n            tokenRestrictions[tokenIds[id]] = r;\\n        }\\n    }\\n\\n    /**\\n     * @notice Add collection of tokens\\n     * @param collectionId id of the token collection\\n     * @param tokenIds Array of token ids to add\\n     * @param mintable Array of mintable flags for tokens\\n     * @param burnable Array of burnable flags for tokens\\n     * @param transferrable Array of transferrable flags for tokens\\n     * @param amountPerAddress Array of max tokens per address\\n     * @param maxTokenAmount Array of max token amount\\n     */\\n    function addTokenCollection(\\n        uint64 collectionId,\\n        uint256[] memory tokenIds,\\n        bool[] memory mintable,\\n        bool[] memory burnable,\\n        bool[] memory transferrable,\\n        uint64[] memory amountPerAddress,\\n        uint64[] memory maxTokenAmount\\n    ) external onlyTokenManagerOrOwner {\\n        for (uint256 id = 0; id < tokenIds.length; id++) {\\n            uint256 tokenId = tokenIds[id];\\n            if (tokenRestrictions[tokenId].exists) {\\n                revert TokenAlreadyExists(tokenId);\\n            }\\n\\n            Restrictions memory r = Restrictions({\\n                exists: true,\\n                mintable: mintable[id],\\n                burnable: burnable[id],\\n                transferrable: transferrable[id],\\n                amountPerAddress: amountPerAddress[id],\\n                maxAmount: maxTokenAmount[id],\\n                collectionId: collectionId\\n            });\\n\\n            emit TokenAdded(tokenId, r);\\n\\n            tokenRestrictions[tokenId] = r;\\n        }\\n    }\\n\\n    /// @notice Delete token restrictions (effectively delete token)\\n    /// @param collectionId Id of the collection\\n    /// @param tokenIds Array of tokenIds to delete\\n    function deleteTokenRestrictions(uint64 collectionId, uint256[] memory tokenIds) external onlyTokenManagerOrOwner {\\n        for (uint256 id = 0; id < tokenIds.length; id++) {\\n            Restrictions memory tr = tokenRestrictions[tokenIds[id]];\\n\\n            if (tr.collectionId != collectionId) {\\n                revert InvalidCollection(collectionId, tr.collectionId);\\n            }\\n\\n            _revertIfTokenDoesNotExist(tokenIds[id], tr);\\n\\n            if (exists(tokenIds[id])) {\\n                revert TotalSupplyIsNotZero(tokenIds[id]);\\n            }\\n\\n            emit TokenDeleted(tokenIds[id]);\\n\\n            delete tokenRestrictions[tokenIds[id]];\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ERC1155Base\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155Base, ERC1155Supply, ERC1155) {\\n        ERC1155Base._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        ERC1155Supply._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n        // Additional costs: 800 * (unique tokenIds) gas\\n\\n        Restrictions[] memory restrs = new Restrictions[](ids.length);\\n        uint256[] memory loadedTokenIds = new uint256[](ids.length);\\n\\n        // Transfer operation\\n        if (from != address(0) && to != address(0)) {\\n            for (uint256 id = 0; id < ids.length; id++) {\\n                Restrictions memory _restrictions = _getRestrictions(ids[id], loadedTokenIds, restrs);\\n                _revertIfTokenDoesNotExist(ids[id], _restrictions);\\n                if (!_restrictions.transferrable) {\\n                    revert TransferForbidden(ids[id]);\\n                }\\n            }\\n        }\\n\\n        // Burn operation\\n        if (to == address(0)) {\\n            for (uint256 id = 0; id < ids.length; id++) {\\n                Restrictions memory _restrictions = _getRestrictions(ids[id], loadedTokenIds, restrs);\\n                _revertIfTokenDoesNotExist(ids[id], _restrictions);\\n                if (!_restrictions.burnable) {\\n                    revert BurnForbidden(ids[id]);\\n                }\\n            }\\n        }\\n\\n        // Mint operation\\n        if (from == address(0)) {\\n            _checkMintRestrictions(operator, to, ids, amounts, restrs, loadedTokenIds);\\n        }\\n    }\\n\\n    /**\\n     * Function to check minting tokenRestrictions\\n     * @param operator Address of token operator\\n     * @param to Who will receive tokens\\n     * @param ids Ids of tokens to mint\\n     * @param amounts Amount of tokens to mint\\n     * @param restrs Loaded tokenRestrictions\\n     * @param loadedTokenIds token ids of loaded restrictions\\n     */\\n    function _checkMintRestrictions(\\n        address operator,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        Restrictions[] memory restrs,\\n        uint256[] memory loadedTokenIds\\n    ) internal {\\n        bool operatorIsMinter = hasRole(MINTER_ROLE, operator);\\n        for (uint256 id = 0; id < ids.length; id++) {\\n            Restrictions memory _restrictions = _getRestrictions(ids[id], loadedTokenIds, restrs);\\n\\n            _revertIfTokenDoesNotExist(ids[id], _restrictions);\\n\\n            if (!_restrictions.mintable && !operatorIsMinter) {\\n                revert MintForbidden(ids[id]);\\n            }\\n\\n            if (_restrictions.amountPerAddress != 0) {\\n                uint256 currentAmount = mintedPerUser[ids[id]][to] + amounts[id];\\n                if (currentAmount > _restrictions.amountPerAddress) {\\n                    revert MaxMintAmountPerAddressExceeded(\\n                        ids[id],\\n                        to,\\n                        operator,\\n                        currentAmount - _restrictions.amountPerAddress\\n                    );\\n                }\\n                mintedPerUser[ids[id]][to] = currentAmount;\\n            }\\n\\n            if (_restrictions.maxAmount != 0) {\\n                uint256 currentAmount = mintedPerToken[ids[id]] + amounts[id];\\n                if (currentAmount > _restrictions.maxAmount) {\\n                    revert MaxMintAmountPerTokenIdExceeded(\\n                        ids[id],\\n                        to,\\n                        operator,\\n                        currentAmount - _restrictions.maxAmount\\n                    );\\n                }\\n                mintedPerToken[ids[id]] = currentAmount;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This function is used to find loaded token restrictions from memory or load restriction from storage\\n     * @param tokenId Id of token to get\\n     * @param loadedTokenIds Loaded token ids\\n     * @param restrs Loaded token restrictions\\n     */\\n    function _getRestrictions(\\n        uint256 tokenId,\\n        uint256[] memory loadedTokenIds,\\n        Restrictions[] memory restrs\\n    ) internal view returns (Restrictions memory) {\\n        uint256 id = 0;\\n        for (; id < restrs.length; id++) {\\n            if (!restrs[id].exists) {\\n                break;\\n            }\\n\\n            if (loadedTokenIds[id] == tokenId) {\\n                return restrs[id];\\n            }\\n        }\\n\\n        loadedTokenIds[id] = tokenId;\\n        restrs[id] = tokenRestrictions[tokenId];\\n        return restrs[id];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltySetter_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenBaseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"blocklist_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uriUpdater_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"metadataUpdater_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BurnForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"CannotRevokeSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"FunctionDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredCollection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenCollection\",\"type\":\"uint256\"}],\"name\":\"InvalidCollection\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"MaxMintAmountPerAddressExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"MaxMintAmountPerTokenIdExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MintForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotMetadataUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"NotMinterOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotRoyaltySetterOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenManager\",\"type\":\"address\"}],\"name\":\"NotTokenManagerOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotURIUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TotalSupplyIsNotZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"UnknownTokenId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldBlocklist\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlocklist\",\"type\":\"address\"}],\"name\":\"BlocklistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"BlocklistStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newContractURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferrable\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"amountPerAddress\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"collectionId\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct PromoERC1155.Restrictions\",\"name\":\"r\",\"type\":\"tuple\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METADATA_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROYALTY_SETTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URI_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMetadataUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addRoyaltySetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"collectionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"mintable\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"burnable\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"transferrable\",\"type\":\"bool[]\"},{\"internalType\":\"uint64[]\",\"name\":\"amountPerAddress\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"maxTokenAmount\",\"type\":\"uint64[]\"}],\"name\":\"addTokenCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenManager_\",\"type\":\"address\"}],\"name\":\"addTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addUriUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocklist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blocklist_\",\"type\":\"address\"}],\"name\":\"changeBlocklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"changeBlocklistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"collectionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deleteTokenRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintBatchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_tokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_amounts\",\"type\":\"uint256[][]\"}],\"name\":\"mintBatchToMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintedPerUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"mintable\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"burnable\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"transferrable\",\"type\":\"bool[]\"},{\"internalType\":\"uint64[]\",\"name\":\"amountPerAddress\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"maxTokenAmount\",\"type\":\"uint64[]\"}],\"name\":\"modifyCollectionRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferrable\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"amountPerAddress\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxTokenAmount\",\"type\":\"uint64\"}],\"name\":\"modifyTokenRestrictions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"notifyBatchMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"notifyMetadataUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"notifyMetadataUpdateForMultipleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"publicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resetTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMetadataUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"revokeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRoyaltySetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenManager_\",\"type\":\"address\"}],\"name\":\"revokeTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeUriUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRestrictions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"burnable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferrable\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"amountPerAddress\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"collectionId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PromoERC1155", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000380ffa08f13a8537192a49b5e2b6ab908b4b1218000000000000000000000000380ffa08f13a8537192a49b5e2b6ab908b4b1218000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000282fe7d4606cf1a9ad6a9fcd68e4a7f3b929f986000000000000000000000000380ffa08f13a8537192a49b5e2b6ab908b4b121800000000000000000000000014cee6169e57508efd055df9a474eb7ec5bf183500000000000000000000000014cee6169e57508efd055df9a474eb7ec5bf183500000000000000000000000014cee6169e57508efd055df9a474eb7ec5bf183500000000000000000000000014cee6169e57508efd055df9a474eb7ec5bf1835000000000000000000000000000000000000000000000000000000000000002f68747470733a2f2f6d6574612e626c75656c696768742e696e632f636f6e7472616374732f70726f6d6f2e6a736f6e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}