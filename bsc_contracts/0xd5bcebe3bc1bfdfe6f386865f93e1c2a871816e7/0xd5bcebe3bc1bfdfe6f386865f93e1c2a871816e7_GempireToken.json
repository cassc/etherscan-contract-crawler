{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\n\r\n// June 1992: Neal Stephenson coins the term Metaverse in his book Snow Crash. \r\n// June 2003: Linden Lab releases the Second Life virtual world. \r\n// October 2021: Facebook changes its name to Meta.\r\n\r\n/**\r\n * @dev Interface of the BEP20 standard\r\n */\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function sync() external;\r\n}\r\n\r\ncontract GempireToken is BEP20 {\r\n    /// @dev Token Details\r\n    string public constant name = \"Gempire.io\";\r\n    string public constant symbol = \"GEMS\";\r\n    uint8 public constant decimals = 12;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n    uint256 private _totalSupply = 1618033988749894848204;\r\n    uint256 public burnableSupply = 0;     // Amount that can be burned from liquidity pool\r\n    uint256 public buys = 0;\r\n    uint256 public sells = 0;\r\n    uint256 public transfers = 0;\r\n\r\n    /// @dev Divisors used to calculate fees/rewards\r\n    uint64 public sellFeeDivisor = 25;   // Charged to sellers and sent to community pool\r\n    uint64 public lpBurnDivisor = 4;       // Sold amount burnable from liquidity pool\r\n    uint64 public buyMintDivisor = 100;  // Minted to community pool on each buy\r\n    uint64 public burnRewardDivisor = 1000; // Reward for calling burnFromLp function\r\n\r\n    /// @dev Addresses\r\n    address public communityPool;\r\n    mapping(address => bool) public admins;\r\n    mapping(address => bool) public lpAddresses;\r\n\r\n    constructor() {\r\n        admins[msg.sender] = true;\r\n        communityPool = msg.sender;\r\n        balances[msg.sender] = _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than an admin\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(admins[msg.sender], \"GempireToken: caller is not Admin\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return uint256 the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @return uint256 Balance of given @param account\r\n     */\r\n    function balanceOf(address account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @return uint256 Transfer allowance given to @param spender by @param owner\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approves @param spender to spend up to @param amount on behalf of caller\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Increases the spending allowance granted to @param spender for caller by @param addedValue\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowances[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Decreases the spending allowance granted to @param spender for caller by @param subtractedValue\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = allowances[msg.sender][spender];\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @param _newAdmin address to be added as Admin.\r\n     */\r\n    function setAdmin(address _newAdmin) external onlyAdmin {\r\n        admins[_newAdmin] = true;\r\n    }\r\n\r\n    /**\r\n     * @param _remove address to be removed as Admin.\r\n     */\r\n    function removeAdmin(address _remove) external onlyAdmin {\r\n        admins[_remove] = false;\r\n    }\r\n\r\n    /**\r\n     * @param _communityPool address that receives fees and newly minted tokens.\r\n     */\r\n    function setCommunityPool(address _communityPool) external onlyAdmin {\r\n        communityPool = _communityPool;\r\n    }\r\n\r\n    /**\r\n     * @param _sellFeeDivisor divisor to calculate fee charged to sellers\r\n     */\r\n    function setSellFeeDivisor(uint64 _sellFeeDivisor) external onlyAdmin {\r\n        require(\r\n            _sellFeeDivisor > 15,\r\n            \"GempireToken::setSellFeeDivisor: sellFeeDivisor must be greater than 15\"\r\n        ); // 1/16 = 6.25% max sell fee\r\n        sellFeeDivisor = _sellFeeDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _lpBurnDivisor divisor used to calculate amount that can be burned from liquidity pool per sale\r\n     */\r\n    function setLpBurnDivisor(uint64 _lpBurnDivisor) external onlyAdmin {\r\n        lpBurnDivisor = _lpBurnDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _buyMintDivisor divisor to calculate amount minted to community pool on each buy\r\n     */\r\n    function setBuyMintDivisor(uint64 _buyMintDivisor) external onlyAdmin {\r\n        require(\r\n            _buyMintDivisor > 3,\r\n            \"GempireToken::setBuyMintDivisor: setBuyMintDivisor must be greater than 3\"\r\n        ); // 1/4 = 25% max minting\r\n        buyMintDivisor = _buyMintDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _burnRewardDivisor divisor to calculate rewards given to caller of burnFromLP function\r\n     */\r\n    function setBurnRewardDivisor(uint64 _burnRewardDivisor) external onlyAdmin {\r\n        require(\r\n            _burnRewardDivisor > 49,\r\n            \"GempireToken::setBurnRewardDivisor: burnRewardDivisor must be greater than 49\"\r\n        ); // 1/50 = 2% max burn reward\r\n        burnRewardDivisor = _burnRewardDivisor;\r\n    }\r\n\r\n    /**\r\n     * @param _lpAddress address of liquidity pool to add\r\n     */\r\n    function addLiquidityPool(address _lpAddress) external onlyAdmin {\r\n        IPancakePair lp = IPancakePair(_lpAddress);\r\n        lp.sync();\r\n        lpAddresses[_lpAddress] = true;\r\n    }\r\n\r\n    /**\r\n     * @param _lpAddress address of liquidity pool to remove\r\n     */\r\n    function removeLiquidityPool(address _lpAddress) external onlyAdmin {\r\n        lpAddresses[_lpAddress] = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens\r\n     * @param recipient Address to receive transferred tokens\r\n     * @param amount Amount to be sent. A portion may be collected as fees.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        require(\r\n            recipient != address(0),\r\n            \"GempireToken::transfer: transfer to the zero address\"\r\n        );\r\n        if ( lpAddresses[recipient] ) {\r\n            // Sell. Add portion of sold tokens to burnable supply.\r\n            _sellTransfer( msg.sender, recipient, amount);\r\n        } else if ( lpAddresses[msg.sender] ) {\r\n            // Buy. Mint new tokens to community pool.\r\n            _buyTransfer( msg.sender, recipient, amount);\r\n        } else {\r\n            // Regular transfer.\r\n            _transfer( msg.sender, recipient, amount);\r\n        } \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer tokens from approved allowance\r\n     * @param sender address sending tokens.\r\n     * @param recipient address to receive transferred tokens.\r\n     * @param amount Amount to be sent. A portion of this will be burned.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);\r\n        if ( lpAddresses[recipient] ) {\r\n            // Sell. Increase burnable supply.\r\n            _sellTransfer( sender, recipient, amount);\r\n        } else if ( lpAddresses[sender] ) {\r\n            // Buy. Mint to community pool.\r\n            _buyTransfer( sender, recipient, amount);\r\n        } else {\r\n            // Regular transfer.\r\n            _transfer( sender, recipient, amount);\r\n        }   \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers tokens to multiple addresses.\r\n     * @param addresses Addresses to send tokens to.\r\n     * @param amounts Amounts of tokens to send.\r\n     */\r\n    function multiTransfer(\r\n        address[] calldata addresses,\r\n        uint256[] calldata amounts\r\n    ) external {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"GempireToken::multiTransfer: addresses and amounts count do not match\"\r\n        );\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            _transfer(msg.sender, addresses[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Destroys @param amount tokens and reduces total supply.\r\n     */\r\n    function burn(uint256 amount) external {\r\n        require(\r\n            balances[msg.sender] >= amount,\r\n            \"GempireToken::burn: burn amount exceeds balance\"\r\n        );\r\n        balances[msg.sender] -= amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves @param amount tokens from @param sender to @param recipient without fees\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(\r\n            recipient != address(0),\r\n            \"GempireToken::_transfer: transfer to the zero address\"\r\n        );\r\n        balances[sender] -= amount;\r\n        balances[recipient] += amount;\r\n        transfers++;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves @param amount tokens from @param sender to @param recipient and mints tokens to community pool\r\n     */\r\n    function _buyTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 mintAmount = amount / buyMintDivisor;\r\n        balances[communityPool] += mintAmount;\r\n        _totalSupply += mintAmount;\r\n        balances[sender] -= amount;\r\n        balances[recipient] += amount;\r\n        buys++;\r\n        emit Transfer(address(0), communityPool, mintAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves @param amount tokens from @param sender to @param recipient \r\n     * Send sell fee to community pool. Increase burnable supply.\r\n     */\r\n    function _sellTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        burnableSupply += amount / lpBurnDivisor;\r\n        balances[sender] -= amount;\r\n        uint256 sellFeeAmount = amount / sellFeeDivisor;\r\n        balances[communityPool] += sellFeeAmount;   \r\n        amount -= sellFeeAmount;  \r\n        balances[recipient] += amount;\r\n        sells++;\r\n        emit Transfer(sender, communityPool, sellFeeAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Burns accumulated burnable supply from @param lpAddress. \r\n     * Send reward to @param rewardReceiver.\r\n     */\r\n    function burnFromLiquidityPool(address lpAddress, address rewardReceiver)\r\n        external\r\n    {\r\n        require(\r\n            lpAddresses[lpAddress],\r\n            \"GempireToken::burnFromLiquidityPool: lpAddress must be liquidity pool contract\"\r\n        );  \r\n        // Burn no more than 10% of Liquidity Pool at a time\r\n        if ( balances[lpAddress] / 10 < burnableSupply ) {\r\n            burnableSupply = balances[lpAddress] / 10;\r\n        } \r\n        uint256 reward = burnableSupply / burnRewardDivisor;\r\n        balances[rewardReceiver] += reward;   \r\n        balances[lpAddress] -= burnableSupply;\r\n        _totalSupply -= burnableSupply - reward;     \r\n        emit Transfer(address(0), rewardReceiver, reward);\r\n        emit Transfer(lpAddress, address(0), burnableSupply);\r\n        burnableSupply = 0;\r\n        IPancakePair lp = IPancakePair(lpAddress);\r\n        lp.sync();\r\n    }\r\n\r\n    /**\r\n     * @notice Burns accumulated burnable supply multiplied by @param multiplier from @param lpAddress. \r\n     * Admin only. No reward.\r\n     */\r\n    function adminBurnFromLiquidityPool(address lpAddress, uint8 multiplier)\r\n        external onlyAdmin\r\n    {\r\n        require(\r\n            lpAddresses[lpAddress],\r\n            \"GempireToken::adminBurnFromLiquidityPool: lpAddress must be liquidity pool contract\"\r\n        );  \r\n        require(\r\n            multiplier < 5,\r\n            \"GempireToken::adminBurnFromLiquidityPool: multiplier must be less than 5\"\r\n        ); \r\n        burnableSupply *= multiplier;\r\n        // Burn no more than 25% of Liquidity Pool at a time\r\n        if ( balances[lpAddress] / 4 < burnableSupply ) {\r\n            burnableSupply = balances[lpAddress] / 4;\r\n        } \r\n        balances[lpAddress] -= burnableSupply;\r\n        _totalSupply -= burnableSupply;     \r\n        emit Transfer(lpAddress, address(0), burnableSupply);\r\n        burnableSupply = 0;\r\n        IPancakePair lp = IPancakePair(lpAddress);\r\n        lp.sync();\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Resets Burnable Supply Back to 0\r\n     */\r\n    function resetBurnableSupply() external onlyAdmin {\r\n        burnableSupply = 0;\r\n    }\r\n    \r\n    /**\r\n     * @dev Approves spending to @param spender of up to @param amount tokens from @param owner\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}\r\n\r\n// 6296AC00", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"}],\"name\":\"adminBurnFromLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardReceiver\",\"type\":\"address\"}],\"name\":\"burnFromLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRewardDivisor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMintDivisor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBurnDivisor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remove\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"removeLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBurnableSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeDivisor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sells\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_burnRewardDivisor\",\"type\":\"uint64\"}],\"name\":\"setBurnRewardDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_buyMintDivisor\",\"type\":\"uint64\"}],\"name\":\"setBuyMintDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityPool\",\"type\":\"address\"}],\"name\":\"setCommunityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lpBurnDivisor\",\"type\":\"uint64\"}],\"name\":\"setLpBurnDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sellFeeDivisor\",\"type\":\"uint64\"}],\"name\":\"setSellFeeDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GempireToken", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1597", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a8a2a402b938b0c1302f3216c12f3d5729a9e78e64dc9b9a548370f5f8597362"}