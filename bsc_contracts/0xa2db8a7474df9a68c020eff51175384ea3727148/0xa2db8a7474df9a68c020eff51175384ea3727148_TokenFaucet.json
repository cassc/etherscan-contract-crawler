{"SourceCode": "/**\r\n\u2554\u2550\u2557\u252c\u2500\u2510\u250c\u2500\u2510\u250c\u2500\u2510      \r\n\u2560\u2563 \u251c\u252c\u2518\u251c\u2524 \u251c\u2524       \r\n\u255a  \u2534\u2514\u2500\u2514\u2500\u2518\u2514\u2500\u2518      \r\n\u2554\u2566\u2557\u250c\u2500\u2510\u250c\u2510\u250c\u250c\u2500\u2510\u252c \u252c   \r\n\u2551\u2551\u2551\u2502 \u2502\u2502\u2502\u2502\u251c\u2524 \u2514\u252c\u2518   \r\n\u2569 \u2569\u2514\u2500\u2518\u2518\u2514\u2518\u2514\u2500\u2518 \u2534    \r\n\u2566\u2550\u2557\u250c\u2500\u2510\u250c\u252c\u2510\u252c\u250c\u2500\u2510     \r\n\u2560\u2566\u255d\u251c\u2500\u2524 \u2502\u2502\u2502\u2502 \u2502     \r\n\u2569\u255a\u2550\u2534 \u2534\u2500\u2534\u2518\u2534\u2514\u2500\u2518     \r\n\u2554\u2550\u2557\u2554\u2550\u2557\u2566 \u2566\u2554\u2550\u2557\u2554\u2550\u2557\u2554\u2566\u2557\r\n\u2560\u2563 \u2560\u2550\u2563\u2551 \u2551\u2551  \u2551\u2563  \u2551 \r\n\u255a  \u2569 \u2569\u255a\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d \u2569 \r\n**/\r\npragma solidity ^0.4.21;\r\n\r\ninterface IERC20Token {\r\n    function balanceOf(address owner) external returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function decimals() external returns (uint256);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n   function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract TokenFaucet is Ownable {\r\n    IERC20Token public tokenContract;  // the token being sent Faucet\r\n    uint256 public price;              // the price, in wei, per token\r\n    uint256 public tokenamount;\r\n    address owner;\r\n\r\n    uint256 public tokensGiven;\r\n\r\n    event Given(address fauceter, uint256 amount);\r\n\r\n    function Tokendrip(IERC20Token _tokenContract, uint256 _price, uint256 _Tokenamount) public onlyOwner{\r\n        owner = msg.sender;\r\n        tokenContract = _tokenContract;\r\n        price = _price;\r\n        tokenamount = _Tokenamount;\r\n    }\r\n\r\n    // Guards against integer overflows\r\n    function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c;\r\n        }\r\n    }\r\n\r\n    function faucetTokens() external payable {\r\n        //gimmeSome();\r\n        //require(msg.value == safeMultiply(tokenamount, price));\r\n        require(msg.value == price, 'Need to send some ETH');\r\n\r\n        uint256 scaledAmount = safeMultiply(tokenamount,\r\n            uint256(10) ** tokenContract.decimals());\r\n\r\n        require(tokenContract.balanceOf(this) >= scaledAmount);\r\n\r\n        emit Given(msg.sender, tokenamount);\r\n        tokensGiven += tokenamount;\r\n\r\n        require(tokenContract.transfer(msg.sender, scaledAmount));\r\n    }\r\n\r\n    function gimmeSome() public payable onlyOwner{\r\n         require(msg.value == price, 'Need to send some ETH');\r\n\r\n    }\r\n    \r\n\r\n    function enddrip() public onlyOwner{\r\n        require(msg.sender == owner);\r\n\r\n        // Send unGiven tokens to the owner.\r\n        require(tokenContract.transfer(owner, tokenContract.balanceOf(this)));\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function removeFee() public onlyOwner{\r\n        require(msg.sender == owner);\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenContract\",\"type\":\"address\"},{\"name\":\"_price\",\"type\":\"uint256\"},{\"name\":\"_Tokenamount\",\"type\":\"uint256\"}],\"name\":\"Tokendrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enddrip\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensGiven\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"faucetTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"gimmeSome\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenamount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"removeFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"fauceter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Given\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "TokenFaucet", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://419eb2c2b75a75979e95e7da76fe113513c5d0ce414cbf2c66932f3bae3c5097"}