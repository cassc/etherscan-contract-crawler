{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-11-10\r\n */\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-11-09\r\n */\r\n\r\npragma abicoder v2;\r\npragma solidity >=0.7.5;\r\n\r\n/// @title Self Permit\r\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\r\ninterface ISelfPermit {\r\n    /// @notice Permits this contract to spend a given token from `msg.sender`\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\r\n    /// @param token The address of the token spent\r\n    /// @param value The amount that can be spent of token\r\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermit(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend a given token from `msg.sender`\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\r\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\r\n    /// @param token The address of the token spent\r\n    /// @param value The amount that can be spent of token\r\n    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitIfNecessary(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\r\n    /// @param token The address of the token spent\r\n    /// @param nonce The current nonce of the owner\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitAllowed(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n\r\n    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\r\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\r\n    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\r\n    /// @param token The address of the token spent\r\n    /// @param nonce The current nonce of the owner\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function selfPermitAllowedIfNecessary(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\ninterface IERC20PermitAllowed {\r\n    /// @notice Approve the spender to spend some tokens via the holder signature\r\n    /// @dev This is the permit interface used by DAI and CHAI\r\n    /// @param holder The address of the token holder, the token owner\r\n    /// @param spender The address of the token spender\r\n    /// @param nonce The holder's nonce, increases at each call to permit\r\n    /// @param expiry The timestamp at which the permit is no longer valid\r\n    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\r\n    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\r\n    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\r\n    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\nabstract contract SelfPermit is ISelfPermit {\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermit(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable override {\r\n        IERC20Permit(token).permit(\r\n            msg.sender,\r\n            address(this),\r\n            value,\r\n            deadline,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitIfNecessary(\r\n        address token,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable override {\r\n        if (IERC20(token).allowance(msg.sender, address(this)) < value)\r\n            selfPermit(token, value, deadline, v, r, s);\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitAllowed(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public payable override {\r\n        IERC20PermitAllowed(token).permit(\r\n            msg.sender,\r\n            address(this),\r\n            nonce,\r\n            expiry,\r\n            true,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc ISelfPermit\r\n    function selfPermitAllowedIfNecessary(\r\n        address token,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable override {\r\n        if (\r\n            IERC20(token).allowance(msg.sender, address(this)) <\r\n            type(uint256).max\r\n        ) selfPermitAllowed(token, nonce, expiry, v, r, s);\r\n    }\r\n}\r\n\r\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\r\nlibrary PoolAddress {\r\n    bytes32 internal constant POOL_INIT_CODE_HASH =\r\n        0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2;\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\r\n    /// @param deployer The PancakeSwap V3 deployer contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(\r\n        address deployer,\r\n        PoolKey memory key\r\n    ) internal pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        deployer,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        POOL_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = -denominator & denominator;\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeCast {\r\n    /// @notice Cast a uint256 to a uint160, revert on overflow\r\n    /// @param y The uint256 to be downcasted\r\n    /// @return z The downcasted integer, now type uint160\r\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\r\n        require((z = uint160(y)) == y);\r\n    }\r\n\r\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\r\n    /// @param y The int256 to be downcasted\r\n    /// @return z The downcasted integer, now type int128\r\n    function toInt128(int256 y) internal pure returns (int128 z) {\r\n        require((z = int128(y)) == y);\r\n    }\r\n\r\n    /// @notice Cast a uint256 to a int256, revert on overflow\r\n    /// @param y The uint256 to be casted\r\n    /// @return z The casted integer, now type int256\r\n    function toInt256(uint256 y) internal pure returns (int256 z) {\r\n        require(y < 2 ** 255);\r\n        z = int256(y);\r\n    }\r\n}\r\n\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = -887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = -MIN_TICK;\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO =\r\n        1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(\r\n        int24 tick\r\n    ) internal pure returns (uint160 sqrtPriceX96) {\r\n        uint256 absTick = tick < 0\r\n            ? uint256(-int256(tick))\r\n            : uint256(int256(tick));\r\n        require(absTick <= uint256(MAX_TICK), \"T\");\r\n        uint256 ratio = absTick & 0x1 != 0\r\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n            : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0)\r\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0)\r\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0)\r\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0)\r\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0)\r\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0)\r\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0)\r\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0)\r\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0)\r\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0)\r\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0)\r\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0)\r\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0)\r\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0)\r\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0)\r\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0)\r\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0)\r\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0)\r\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0)\r\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n        if (tick > 0) ratio = type(uint256).max / ratio;\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160(\r\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n        );\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(\r\n        uint160 sqrtPriceX96\r\n    ) internal pure returns (int24 tick) {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(\r\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\r\n            \"R\"\r\n        );\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n        int24 tickLow = int24(\r\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\r\n        );\r\n        int24 tickHi = int24(\r\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\r\n        );\r\n        tick = tickLow == tickHi\r\n            ? tickLow\r\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\r\n            ? tickHi\r\n            : tickLow;\r\n    }\r\n}\r\n\r\nlibrary OracleLibrary {\r\n    /// @notice Calculates time-weighted means of tick and liquidity for a given PancakeSwap V3 pool\r\n    /// @param pool Address of the pool that we want to observe\r\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\r\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\r\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\r\n    function consult(\r\n        address pool,\r\n        uint32 secondsAgo\r\n    )\r\n        internal\r\n        view\r\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\r\n    {\r\n        require(secondsAgo != 0, \"BP\");\r\n        uint32[] memory secondsAgos = new uint32[](2);\r\n        secondsAgos[0] = secondsAgo;\r\n        secondsAgos[1] = 0;\r\n        (\r\n            int56[] memory tickCumulatives,\r\n            uint160[] memory secondsPerLiquidityCumulativeX128s\r\n        ) = IPancakeV3Pool(pool).observe(secondsAgos);\r\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\r\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[\r\n                1\r\n            ] - secondsPerLiquidityCumulativeX128s[0];\r\n        arithmeticMeanTick = int24(tickCumulativesDelta / secondsAgo);\r\n        // Always round to negative infinity\r\n        if (\r\n            tickCumulativesDelta < 0 && (tickCumulativesDelta % secondsAgo != 0)\r\n        ) arithmeticMeanTick--;\r\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\r\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\r\n        harmonicMeanLiquidity = uint128(\r\n            secondsAgoX160 /\r\n                (uint192(secondsPerLiquidityCumulativesDelta) << 32)\r\n        );\r\n    }\r\n\r\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\r\n    /// @param tick Tick value used to calculate the quote\r\n    /// @param baseAmount Amount of token to be converted\r\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\r\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\r\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\r\n    function getQuoteAtTick(\r\n        int24 tick,\r\n        uint128 baseAmount,\r\n        address baseToken,\r\n        address quoteToken\r\n    ) internal pure returns (uint256 quoteAmount) {\r\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\r\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\r\n        if (sqrtRatioX96 <= type(uint128).max) {\r\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\r\n            quoteAmount = baseToken < quoteToken\r\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\r\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\r\n        } else {\r\n            uint256 ratioX128 = FullMath.mulDiv(\r\n                sqrtRatioX96,\r\n                sqrtRatioX96,\r\n                1 << 64\r\n            );\r\n            quoteAmount = baseToken < quoteToken\r\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\r\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\r\n        }\r\n    }\r\n\r\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\r\n    /// @param pool Address of PancakeSwap V3 pool that we want to observe\r\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\r\n    function getOldestObservationSecondsAgo(\r\n        address pool\r\n    ) internal view returns (uint32 secondsAgo) {\r\n        (\r\n            ,\r\n            ,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            ,\r\n            ,\r\n\r\n        ) = IPancakeV3Pool(pool).slot0();\r\n        require(observationCardinality > 0, \"NI\");\r\n        (uint32 observationTimestamp, , , bool initialized) = IPancakeV3Pool(\r\n            pool\r\n        ).observations((observationIndex + 1) % observationCardinality);\r\n        // The next index might not be initialized if the cardinality is in the process of increasing\r\n        // In this case the oldest observation is always in index 0\r\n        if (!initialized) {\r\n            (observationTimestamp, , , ) = IPancakeV3Pool(pool).observations(0);\r\n        }\r\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\r\n    }\r\n\r\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\r\n    /// @param pool Address of PancakeSwap V3 pool\r\n    /// @return The tick that the pool was in at the start of the current block\r\n    function getBlockStartingTickAndLiquidity(\r\n        address pool\r\n    ) internal view returns (int24, uint128) {\r\n        (\r\n            ,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            ,\r\n            ,\r\n\r\n        ) = IPancakeV3Pool(pool).slot0();\r\n        // 2 observations are needed to reliably calculate the block starting tick\r\n        require(observationCardinality > 1, \"NEO\");\r\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\r\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\r\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\r\n        (\r\n            uint32 observationTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n\r\n        ) = IPancakeV3Pool(pool).observations(observationIndex);\r\n        if (observationTimestamp != uint32(block.timestamp)) {\r\n            return (tick, IPancakeV3Pool(pool).liquidity());\r\n        }\r\n        uint256 prevIndex = (uint256(observationIndex) +\r\n            observationCardinality -\r\n            1) % observationCardinality;\r\n        (\r\n            uint32 prevObservationTimestamp,\r\n            int56 prevTickCumulative,\r\n            uint160 prevSecondsPerLiquidityCumulativeX128,\r\n            bool prevInitialized\r\n        ) = IPancakeV3Pool(pool).observations(prevIndex);\r\n        require(prevInitialized, \"ONI\");\r\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\r\n        tick = int24((tickCumulative - prevTickCumulative) / delta);\r\n        uint128 liquidity = uint128(\r\n            (uint192(delta) * type(uint160).max) /\r\n                (uint192(\r\n                    secondsPerLiquidityCumulativeX128 -\r\n                        prevSecondsPerLiquidityCumulativeX128\r\n                ) << 32)\r\n        );\r\n        return (tick, liquidity);\r\n    }\r\n\r\n    /// @notice Information for calculating a weighted arithmetic mean tick\r\n    struct WeightedTickData {\r\n        int24 tick;\r\n        uint128 weight;\r\n    }\r\n\r\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\r\n    /// @param weightedTickData An array of ticks and weights\r\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\r\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\r\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\r\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\r\n    function getWeightedArithmeticMeanTick(\r\n        WeightedTickData[] memory weightedTickData\r\n    ) internal pure returns (int24 weightedArithmeticMeanTick) {\r\n        // Accumulates the sum of products between each tick and its weight\r\n        int256 numerator;\r\n        // Accumulates the sum of the weights\r\n        uint256 denominator;\r\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\r\n        for (uint256 i; i < weightedTickData.length; i++) {\r\n            numerator +=\r\n                weightedTickData[i].tick *\r\n                int256(weightedTickData[i].weight);\r\n            denominator += weightedTickData[i].weight;\r\n        }\r\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\r\n        // Always round to negative infinity\r\n        if (numerator < 0 && (numerator % int256(denominator) != 0))\r\n            weightedArithmeticMeanTick--;\r\n    }\r\n\r\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\r\n    /// @dev Useful for calculating relative prices along routes.\r\n    /// @dev There must be one tick for each pairwise set of tokens.\r\n    /// @param tokens The token contract addresses\r\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\r\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\r\n    function getChainedPrice(\r\n        address[] memory tokens,\r\n        int24[] memory ticks\r\n    ) internal pure returns (int256 syntheticTick) {\r\n        require(tokens.length - 1 == ticks.length, \"DL\");\r\n        for (uint256 i = 1; i <= ticks.length; i++) {\r\n            // check the tokens for address sort order, then accumulate the\r\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\r\n            tokens[i - 1] < tokens[i]\r\n                ? syntheticTick += ticks[i - 1]\r\n                : syntheticTick -= ticks[i - 1];\r\n        }\r\n    }\r\n}\r\n\r\nlibrary BytesLib {\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_start + _length >= _start, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n        bytes memory tempBytes;\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(\r\n                    add(tempBytes, lengthmod),\r\n                    mul(0x20, iszero(lengthmod))\r\n                )\r\n                let end := add(mc, _length)\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(\r\n                        add(\r\n                            add(_bytes, lengthmod),\r\n                            mul(0x20, iszero(lengthmod))\r\n                        ),\r\n                        _start\r\n                    )\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n                mstore(tempBytes, _length)\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n                //zero out the 32 bytes slice we are about to return\r\n                //we need to do it because Solidity does not garbage collect\r\n                mstore(tempBytes, 0)\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(\r\n        bytes memory _bytes,\r\n        uint256 _start\r\n    ) internal pure returns (address) {\r\n        require(_start + 20 >= _start, \"toAddress_overflow\");\r\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n        assembly {\r\n            tempAddress := div(\r\n                mload(add(add(_bytes, 0x20), _start)),\r\n                0x1000000000000000000000000\r\n            )\r\n        }\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint24(\r\n        bytes memory _bytes,\r\n        uint256 _start\r\n    ) internal pure returns (uint24) {\r\n        require(_start + 3 >= _start, \"toUint24_overflow\");\r\n        require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\r\n        uint24 tempUint;\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x3), _start))\r\n        }\r\n        return tempUint;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/// @title Functions for manipulating path data for multihop swaps\r\nlibrary Path {\r\n    using BytesLib for bytes;\r\n    /// @dev The length of the bytes encoded address\r\n    uint256 private constant ADDR_SIZE = 20;\r\n    /// @dev The length of the bytes encoded fee\r\n    uint256 private constant FEE_SIZE = 3;\r\n    /// @dev The offset of a single token address and pool fee\r\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\r\n    /// @dev The offset of an encoded pool key\r\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\r\n    /// @dev The minimum length of an encoding that contains 2 or more pools\r\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH =\r\n        POP_OFFSET + NEXT_OFFSET;\r\n\r\n    /// @notice Returns true iff the path contains two or more pools\r\n    /// @param path The encoded swap path\r\n    /// @return True if path contains two or more pools, otherwise false\r\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\r\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\r\n    }\r\n\r\n    /// @notice Returns the number of pools in the path\r\n    /// @param path The encoded swap path\r\n    /// @return The number of pools in the path\r\n    function numPools(bytes memory path) internal pure returns (uint256) {\r\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\r\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Decodes the first pool in path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return tokenA The first token of the given pool\r\n    /// @return tokenB The second token of the given pool\r\n    /// @return fee The fee level of the pool\r\n    function decodeFirstPool(\r\n        bytes memory path\r\n    ) internal pure returns (address tokenA, address tokenB, uint24 fee) {\r\n        tokenA = path.toAddress(0);\r\n        fee = path.toUint24(ADDR_SIZE);\r\n        tokenB = path.toAddress(NEXT_OFFSET);\r\n    }\r\n\r\n    /// @notice Gets the segment corresponding to the first pool in the path\r\n    /// @param path The bytes encoded swap path\r\n    /// @return The segment containing all data necessary to target the first pool in the path\r\n    function getFirstPool(\r\n        bytes memory path\r\n    ) internal pure returns (bytes memory) {\r\n        return path.slice(0, POP_OFFSET);\r\n    }\r\n\r\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\r\n    /// @param path The swap path\r\n    /// @return The remaining token + fee elements in the path\r\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\r\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\r\n    }\r\n}\r\n\r\npragma solidity >=0.7.5;\r\n\r\n/// @title OracleSlippage interface\r\n/// @notice Enables slippage checks against oracle prices\r\ninterface IOracleSlippage {\r\n    /// @notice Ensures that the current (synthetic) tick over the path is no worse than\r\n    /// `maximumTickDivergence` ticks away from the average as of `secondsAgo`\r\n    /// @param path The path to fetch prices over\r\n    /// @param maximumTickDivergence The maximum number of ticks that the price can degrade by\r\n    /// @param secondsAgo The number of seconds ago to compute oracle prices against\r\n    function checkOracleSlippage(\r\n        bytes memory path,\r\n        uint24 maximumTickDivergence,\r\n        uint32 secondsAgo\r\n    ) external view;\r\n\r\n    /// @notice Ensures that the weighted average current (synthetic) tick over the path is no\r\n    /// worse than `maximumTickDivergence` ticks away from the average as of `secondsAgo`\r\n    /// @param paths The paths to fetch prices over\r\n    /// @param amounts The weights for each entry in `paths`\r\n    /// @param maximumTickDivergence The maximum number of ticks that the price can degrade by\r\n    /// @param secondsAgo The number of seconds ago to compute oracle prices against\r\n    function checkOracleSlippage(\r\n        bytes[] memory paths,\r\n        uint128[] memory amounts,\r\n        uint24 maximumTickDivergence,\r\n        uint32 secondsAgo\r\n    ) external view;\r\n}\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity =0.7.6;\r\n\r\n/// @title Constant state\r\n/// @notice Constant state used by the swap router\r\nlibrary Constants {\r\n    /// @dev Used for identifying cases when this contract's balance of a token is to be used\r\n    uint256 internal constant CONTRACT_BALANCE = 0;\r\n    /// @dev Used as a flag for identifying msg.sender, saves gas by sending more 0 bytes\r\n    address internal constant MSG_SENDER = address(1);\r\n    /// @dev Used as a flag for identifying address(this), saves gas by sending more 0 bytes\r\n    address internal constant ADDRESS_THIS = address(2);\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\npragma solidity =0.7.6;\r\n\r\ninterface IStableSwapInfo {\r\n    function get_dx(\r\n        address _swap,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dy,\r\n        uint256 max_dx\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IStableSwapFactory {\r\n    struct StableSwapPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address LPContract;\r\n    }\r\n    struct StableSwapThreePoolPairInfo {\r\n        address swapContract;\r\n        address token0;\r\n        address token1;\r\n        address token2;\r\n        address LPContract;\r\n    }\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function pairLength() external view returns (uint256);\r\n\r\n    function getPairInfo(\r\n        address _tokenA,\r\n        address _tokenB\r\n    ) external view returns (StableSwapPairInfo memory info);\r\n\r\n    function getThreePoolPairInfo(\r\n        address _tokenA,\r\n        address _tokenB\r\n    ) external view returns (StableSwapThreePoolPairInfo memory info);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    /// @notice Transfers tokens from the targeted address to the given destination\r\n    /// @notice Errors with 'STF' if transfer fails\r\n    /// @param token The contract address of the token to be transferred\r\n    /// @param from The originating address from which the tokens will be transferred\r\n    /// @param to The destination address of the transfer\r\n    /// @param value The amount to be transferred\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(\r\n                IERC20.transferFrom.selector,\r\n                from,\r\n                to,\r\n                value\r\n            )\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"STF\"\r\n        );\r\n    }\r\n\r\n    /// @notice Transfers tokens from msg.sender to a recipient\r\n    /// @dev Errors with ST if transfer fails\r\n    /// @param token The contract address of the token which will be transferred\r\n    /// @param to The recipient of the transfer\r\n    /// @param value The value of the transfer\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"ST\"\r\n        );\r\n    }\r\n\r\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\r\n    /// @dev Errors with 'SA' if transfer fails\r\n    /// @param token The contract address of the token to be approved\r\n    /// @param to The target of the approval\r\n    /// @param value The amount of the given token the target will be allowed to spend\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(IERC20.approve.selector, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"SA\"\r\n        );\r\n    }\r\n\r\n    /// @notice Transfers ETH to the recipient address\r\n    /// @dev Fails with `STE`\r\n    /// @param to The destination of the transfer\r\n    /// @param value The value to be transferred\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"STE\");\r\n    }\r\n}\r\n\r\ninterface IWETH9 is IERC20 {\r\n    /// @notice Deposit ether to get wrapped ether\r\n    function deposit() external payable;\r\n\r\n    /// @notice Withdraw wrapped ether to get ether\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ninterface IApproveAndCall {\r\n    enum ApprovalType {\r\n        NOT_REQUIRED,\r\n        MAX,\r\n        MAX_MINUS_ONE,\r\n        ZERO_THEN_MAX,\r\n        ZERO_THEN_MAX_MINUS_ONE\r\n    }\r\n\r\n    /// @dev Lens to be called off-chain to determine which (if any) of the relevant approval functions should be called\r\n    /// @param token The token to approve\r\n    /// @param amount The amount to approve\r\n    /// @return The required approval type\r\n    function getApprovalType(\r\n        address token,\r\n        uint256 amount\r\n    ) external returns (ApprovalType);\r\n\r\n    /// @notice Approves a token for the maximum possible amount\r\n    /// @param token The token to approve\r\n    function approveMax(address token) external payable;\r\n\r\n    /// @notice Approves a token for the maximum possible amount minus one\r\n    /// @param token The token to approve\r\n    function approveMaxMinusOne(address token) external payable;\r\n\r\n    /// @notice Approves a token for zero, then the maximum possible amount\r\n    /// @param token The token to approve\r\n    function approveZeroThenMax(address token) external payable;\r\n\r\n    /// @notice Approves a token for zero, then the maximum possible amount minus one\r\n    /// @param token The token to approve\r\n    function approveZeroThenMaxMinusOne(address token) external payable;\r\n\r\n    /// @notice Calls the position manager with arbitrary calldata\r\n    /// @param data Calldata to pass along to the position manager\r\n    /// @return result The result from the call\r\n    function callPositionManager(\r\n        bytes memory data\r\n    ) external payable returns (bytes memory result);\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n    }\r\n\r\n    /// @notice Calls the position manager's mint function\r\n    /// @param params Calldata to pass along to the position manager\r\n    /// @return result The result from the call\r\n    function mint(\r\n        MintParams calldata params\r\n    ) external payable returns (bytes memory result);\r\n\r\n    struct IncreaseLiquidityParams {\r\n        address token0;\r\n        address token1;\r\n        uint256 tokenId;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n    }\r\n\r\n    /// @notice Calls the position manager's increaseLiquidity function\r\n    /// @param params Calldata to pass along to the position manager\r\n    /// @return result The result from the call\r\n    function increaseLiquidity(\r\n        IncreaseLiquidityParams calldata params\r\n    ) external payable returns (bytes memory result);\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IPeripheryImmutableState {\r\n    /// @return Returns the address of the PancakeSwap V3 deployer\r\n    function deployer() external view returns (address);\r\n\r\n    /// @return Returns the address of the PancakeSwap V3 factory\r\n    function factory() external view returns (address);\r\n\r\n    /// @return Returns the address of WETH9\r\n    function WETH9() external view returns (address);\r\n}\r\n\r\npragma solidity >=0.7.0;\r\n\r\n/// @title Optimized overflow and underflow safe math operations\r\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\r\nlibrary LowGasSafeMath {\r\n    /// @notice Returns x + y, reverts if sum overflows uint256\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    /// @notice Returns x * y, reverts if overflows\r\n    /// @param x The multiplicand\r\n    /// @param y The multiplier\r\n    /// @return z The product of x and y\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(x == 0 || (z = x * y) / x == y);\r\n    }\r\n\r\n    /// @notice Returns x + y, reverts if overflows or underflows\r\n    /// @param x The augend\r\n    /// @param y The addend\r\n    /// @return z The sum of x and y\r\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x + y) >= x == (y >= 0));\r\n    }\r\n\r\n    /// @notice Returns x - y, reverts if overflows or underflows\r\n    /// @param x The minuend\r\n    /// @param y The subtrahend\r\n    /// @return z The difference of x and y\r\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\r\n        require((z = x - y) <= x == (y >= 0));\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Immutable state\r\n/// @notice Functions that return immutable state of the router\r\ninterface IImmutableState {\r\n    /// @return Returns the address of the PancakeSwap V2 factory\r\n    function factoryV2() external view returns (address);\r\n\r\n    /// @return Returns the address of PancakeSwap V3 NFT position manager\r\n    function positionManager() external view returns (address);\r\n}\r\n\r\npragma solidity =0.7.6;\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Pancake Stable Swap\r\ninterface IStableSwapRouter {\r\n    /**\r\n     * @param flag token amount in a stable swap pool. 2 for 2pool, 3 for 3pool\r\n     */\r\n    function exactInputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address to\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    /**\r\n     * @param flag token amount in a stable swap pool. 2 for 2pool, 3 for 3pool\r\n     */\r\n    function exactOutputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address to\r\n    ) external payable returns (uint256 amountIn);\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/// @title Callback for IPancakeV3PoolActions#swap\r\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\r\ninterface IPancakeV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\r\n    function pancakeV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeV3PoolImmutables {\r\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\r\n    /// @return The contract address\r\n    function factory() external view returns (address);\r\n\r\n    /// @notice The first of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token0() external view returns (address);\r\n\r\n    /// @notice The second of the two tokens of the pool, sorted by address\r\n    /// @return The token contract address\r\n    function token1() external view returns (address);\r\n\r\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\r\n    /// @return The fee\r\n    function fee() external view returns (uint24);\r\n\r\n    /// @notice The pool tick spacing\r\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\r\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\r\n    /// This value is an int24 to avoid casting even though it is always positive.\r\n    /// @return The tick spacing\r\n    function tickSpacing() external view returns (int24);\r\n\r\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\r\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\r\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\r\n    /// @return The max amount of liquidity per tick\r\n    function maxLiquidityPerTick() external view returns (uint128);\r\n}\r\n\r\ninterface IPancakeV3PoolState {\r\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\r\n    /// when accessed externally.\r\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\r\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\r\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\r\n    /// boundary.\r\n    /// observationIndex The index of the last oracle observation that was written,\r\n    /// observationCardinality The current maximum number of observations stored in the pool,\r\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\r\n    /// feeProtocol The protocol fee for both tokens of the pool.\r\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\r\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\r\n    /// unlocked Whether the pool is currently locked to reentrancy\r\n    function slot0()\r\n        external\r\n        view\r\n        returns (\r\n            uint160 sqrtPriceX96,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            uint16 observationCardinalityNext,\r\n            uint32 feeProtocol,\r\n            bool unlocked\r\n        );\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal0X128() external view returns (uint256);\r\n\r\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\r\n    /// @dev This value can overflow the uint256\r\n    function feeGrowthGlobal1X128() external view returns (uint256);\r\n\r\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\r\n    /// @dev Protocol fees will never exceed uint128 max in either token\r\n    function protocolFees()\r\n        external\r\n        view\r\n        returns (uint128 token0, uint128 token1);\r\n\r\n    /// @notice The currently in range liquidity available to the pool\r\n    /// @dev This value has no relationship to the total liquidity across all ticks\r\n    function liquidity() external view returns (uint128);\r\n\r\n    /// @notice Look up information about a specific tick in the pool\r\n    /// @param tick The tick to look up\r\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\r\n    /// tick upper,\r\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\r\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\r\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\r\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\r\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\r\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\r\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\r\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\r\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\r\n    /// a specific position.\r\n    function ticks(\r\n        int24 tick\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint128 liquidityGross,\r\n            int128 liquidityNet,\r\n            uint256 feeGrowthOutside0X128,\r\n            uint256 feeGrowthOutside1X128,\r\n            int56 tickCumulativeOutside,\r\n            uint160 secondsPerLiquidityOutsideX128,\r\n            uint32 secondsOutside,\r\n            bool initialized\r\n        );\r\n\r\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\r\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\r\n\r\n    /// @notice Returns the information about a position by the position's key\r\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\r\n    /// @return _liquidity The amount of liquidity in the position,\r\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\r\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\r\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\r\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\r\n    function positions(\r\n        bytes32 key\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint128 _liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    /// @notice Returns data about a specific observation index\r\n    /// @param index The element of the observations array to fetch\r\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\r\n    /// ago, rather than at a specific index in the array.\r\n    /// @return blockTimestamp The timestamp of the observation,\r\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\r\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\r\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\r\n    function observations(\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint32 blockTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n            bool initialized\r\n        );\r\n}\r\n\r\ninterface IPancakeV3PoolDerivedState {\r\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\r\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\r\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\r\n    /// you must call it with secondsAgos = [3600, 0].\r\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\r\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\r\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\r\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\r\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\r\n    /// timestamp\r\n    function observe(\r\n        uint32[] calldata secondsAgos\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            int56[] memory tickCumulatives,\r\n            uint160[] memory secondsPerLiquidityCumulativeX128s\r\n        );\r\n\r\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\r\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\r\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\r\n    /// snapshot is taken and the second snapshot is taken.\r\n    /// @param tickLower The lower tick of the range\r\n    /// @param tickUpper The upper tick of the range\r\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\r\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\r\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\r\n    function snapshotCumulativesInside(\r\n        int24 tickLower,\r\n        int24 tickUpper\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            int56 tickCumulativeInside,\r\n            uint160 secondsPerLiquidityInsideX128,\r\n            uint32 secondsInside\r\n        );\r\n}\r\n\r\ninterface IPancakeV3PoolActions {\r\n    /// @notice Sets the initial price for the pool\r\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\r\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\r\n    function initialize(uint160 sqrtPriceX96) external;\r\n\r\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\r\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback\r\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\r\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\r\n    /// @param recipient The address for which the liquidity will be created\r\n    /// @param tickLower The lower tick of the position in which to add liquidity\r\n    /// @param tickUpper The upper tick of the position in which to add liquidity\r\n    /// @param amount The amount of liquidity to mint\r\n    /// @param data Any data that should be passed through to the callback\r\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\r\n    function mint(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount,\r\n        bytes calldata data\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Collects tokens owed to a position\r\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\r\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\r\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\r\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\r\n    /// @param recipient The address which should receive the fees collected\r\n    /// @param tickLower The lower tick of the position for which to collect fees\r\n    /// @param tickUpper The upper tick of the position for which to collect fees\r\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\r\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\r\n    /// @return amount0 The amount of fees collected in token0\r\n    /// @return amount1 The amount of fees collected in token1\r\n    function collect(\r\n        address recipient,\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\r\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\r\n    /// @dev Fees must be collected separately via a call to #collect\r\n    /// @param tickLower The lower tick of the position for which to burn liquidity\r\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\r\n    /// @param amount How much liquidity to burn\r\n    /// @return amount0 The amount of token0 sent to the recipient\r\n    /// @return amount1 The amount of token1 sent to the recipient\r\n    function burn(\r\n        int24 tickLower,\r\n        int24 tickUpper,\r\n        uint128 amount\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    /// @notice Swap token0 for token1, or token1 for token0\r\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\r\n    /// @param recipient The address to receive the output of the swap\r\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\r\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\r\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\r\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\r\n    /// @param data Any data to be passed through to the callback\r\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\r\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n\r\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\r\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallback\r\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\r\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\r\n    /// @param recipient The address which will receive the token0 and token1 amounts\r\n    /// @param amount0 The amount of token0 to send\r\n    /// @param amount1 The amount of token1 to send\r\n    /// @param data Any data to be passed through to the callback\r\n    function flash(\r\n        address recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\r\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\r\n    /// the input observationCardinalityNext.\r\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\r\n    function increaseObservationCardinalityNext(\r\n        uint16 observationCardinalityNext\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeV3PoolOwnerActions {\r\n    /// @notice Set the denominator of the protocol's % share of the fees\r\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\r\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\r\n    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;\r\n\r\n    /// @notice Collect the protocol fee accrued to the pool\r\n    /// @param recipient The address to which collected protocol fees should be sent\r\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\r\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\r\n    /// @return amount0 The protocol fee collected in token0\r\n    /// @return amount1 The protocol fee collected in token1\r\n    function collectProtocol(\r\n        address recipient,\r\n        uint128 amount0Requested,\r\n        uint128 amount1Requested\r\n    ) external returns (uint128 amount0, uint128 amount1);\r\n\r\n    /// @notice Set the LM pool to enable liquidity mining\r\n    function setLmPool(address lmPool) external;\r\n}\r\n\r\ninterface IPancakeV3PoolEvents {\r\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\r\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\r\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\r\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\r\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\r\n    /// @notice Emitted when liquidity is minted for a given position\r\n    /// @param sender The address that minted the liquidity\r\n    /// @param owner The owner of the position and recipient of any minted liquidity\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount The amount of liquidity minted to the position range\r\n    /// @param amount0 How much token0 was required for the minted liquidity\r\n    /// @param amount1 How much token1 was required for the minted liquidity\r\n    event Mint(\r\n        address sender,\r\n        address indexed owner,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n    /// @notice Emitted when fees are collected by the owner of a position\r\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\r\n    /// @param owner The owner of the position for which fees are collected\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount0 The amount of token0 fees collected\r\n    /// @param amount1 The amount of token1 fees collected\r\n    event Collect(\r\n        address indexed owner,\r\n        address recipient,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount0,\r\n        uint128 amount1\r\n    );\r\n    /// @notice Emitted when a position's liquidity is removed\r\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\r\n    /// @param owner The owner of the position for which liquidity is removed\r\n    /// @param tickLower The lower tick of the position\r\n    /// @param tickUpper The upper tick of the position\r\n    /// @param amount The amount of liquidity to remove\r\n    /// @param amount0 The amount of token0 withdrawn\r\n    /// @param amount1 The amount of token1 withdrawn\r\n    event Burn(\r\n        address indexed owner,\r\n        int24 indexed tickLower,\r\n        int24 indexed tickUpper,\r\n        uint128 amount,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    );\r\n    /// @notice Emitted by the pool for any swaps between token0 and token1\r\n    /// @param sender The address that initiated the swap call, and that received the callback\r\n    /// @param recipient The address that received the output of the swap\r\n    /// @param amount0 The delta of the token0 balance of the pool\r\n    /// @param amount1 The delta of the token1 balance of the pool\r\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\r\n    /// @param liquidity The liquidity of the pool after the swap\r\n    /// @param tick The log base 1.0001 of price of the pool after the swap\r\n    /// @param protocolFeesToken0 The protocol fee of token0 in the swap\r\n    /// @param protocolFeesToken1 The protocol fee of token1 in the swap\r\n    event Swap(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        int256 amount0,\r\n        int256 amount1,\r\n        uint160 sqrtPriceX96,\r\n        uint128 liquidity,\r\n        int24 tick,\r\n        uint128 protocolFeesToken0,\r\n        uint128 protocolFeesToken1\r\n    );\r\n    /// @notice Emitted by the pool for any flashes of token0/token1\r\n    /// @param sender The address that initiated the swap call, and that received the callback\r\n    /// @param recipient The address that received the tokens from flash\r\n    /// @param amount0 The amount of token0 that was flashed\r\n    /// @param amount1 The amount of token1 that was flashed\r\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\r\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\r\n    event Flash(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        uint256 paid0,\r\n        uint256 paid1\r\n    );\r\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\r\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\r\n    /// just before a mint/swap/burn.\r\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\r\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\r\n    event IncreaseObservationCardinalityNext(\r\n        uint16 observationCardinalityNextOld,\r\n        uint16 observationCardinalityNextNew\r\n    );\r\n    /// @notice Emitted when the protocol fee is changed by the pool\r\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\r\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\r\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\r\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\r\n    event SetFeeProtocol(\r\n        uint32 feeProtocol0Old,\r\n        uint32 feeProtocol1Old,\r\n        uint32 feeProtocol0New,\r\n        uint32 feeProtocol1New\r\n    );\r\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\r\n    /// @param sender The address that collects the protocol fees\r\n    /// @param recipient The address that receives the collected protocol fees\r\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\r\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\r\n    event CollectProtocol(\r\n        address indexed sender,\r\n        address indexed recipient,\r\n        uint128 amount0,\r\n        uint128 amount1\r\n    );\r\n}\r\n\r\ninterface IPancakeV3Pool is\r\n    IPancakeV3PoolImmutables,\r\n    IPancakeV3PoolState,\r\n    IPancakeV3PoolDerivedState,\r\n    IPancakeV3PoolActions,\r\n    IPancakeV3PoolOwnerActions,\r\n    IPancakeV3PoolEvents\r\n{}\r\n\r\npragma solidity >=0.7.5;\r\n\r\nlibrary SmartRouterHelper {\r\n    using LowGasSafeMath for uint256;\r\n\r\n    /************************************************** Stable **************************************************/\r\n    // get the pool info in stable swap\r\n    function getStableInfo(\r\n        address stableSwapFactory,\r\n        address input,\r\n        address output,\r\n        uint256 flag\r\n    ) public view returns (uint256 i, uint256 j, address swapContract) {\r\n        if (flag == 2) {\r\n            IStableSwapFactory.StableSwapPairInfo\r\n                memory info = IStableSwapFactory(stableSwapFactory).getPairInfo(\r\n                    input,\r\n                    output\r\n                );\r\n            i = input == info.token0 ? 0 : 1;\r\n            j = (i == 0) ? 1 : 0;\r\n            swapContract = info.swapContract;\r\n        } else if (flag == 3) {\r\n            IStableSwapFactory.StableSwapThreePoolPairInfo\r\n                memory info = IStableSwapFactory(stableSwapFactory)\r\n                    .getThreePoolPairInfo(input, output);\r\n            if (input == info.token0) i = 0;\r\n            else if (input == info.token1) i = 1;\r\n            else if (input == info.token2) i = 2;\r\n            if (output == info.token0) j = 0;\r\n            else if (output == info.token1) j = 1;\r\n            else if (output == info.token2) j = 2;\r\n            swapContract = info.swapContract;\r\n        }\r\n        require(\r\n            swapContract != address(0),\r\n            \"getStableInfo: invalid pool address\"\r\n        );\r\n    }\r\n\r\n    function getStableAmountsIn(\r\n        address stableSwapFactory,\r\n        address stableSwapInfo,\r\n        address[] memory path,\r\n        uint256[] memory flag,\r\n        uint256 amountOut\r\n    ) public view returns (uint256[] memory amounts) {\r\n        uint256 length = path.length;\r\n        require(length >= 2, \"getStableAmountsIn: incorrect length\");\r\n        amounts = new uint256[](length);\r\n        amounts[length - 1] = amountOut;\r\n        for (uint256 i = length - 1; i > 0; i--) {\r\n            uint256 last = i - 1;\r\n            (uint256 k, uint256 j, address swapContract) = getStableInfo(\r\n                stableSwapFactory,\r\n                path[last],\r\n                path[i],\r\n                flag[last]\r\n            );\r\n            amounts[last] = IStableSwapInfo(stableSwapInfo).get_dx(\r\n                swapContract,\r\n                k,\r\n                j,\r\n                amounts[i],\r\n                type(uint256).max\r\n            );\r\n        }\r\n    }\r\n\r\n    /************************************************** V2 **************************************************/\r\n    // bytes32 internal constant V2_INIT_CODE_HASH = 0xd0d4c4cd0848c93cb4fd1f498d7013ee6bfb25783ea21593d5834f5d250ece66; // BSC TESTNET\r\n    // bytes32 internal constant V2_INIT_CODE_HASH = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5; // BSC\r\n    // bytes32 internal constant V2_INIT_CODE_HASH = 0x57224589c67f3f30a6b0d7a1b54cf3153ab84563bc609ef41dfb34f8b2974d2d; // ETH, GOERLI\r\n    bytes32 internal constant V2_INIT_CODE_HASH =\r\n        0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(\r\n        address tokenA,\r\n        address tokenB\r\n    ) public pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB);\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0));\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) public pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        factory,\r\n                        keccak256(abi.encodePacked(token0, token1)),\r\n                        V2_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) public view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\r\n            pairFor(factory, tokenA, tokenB)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) public pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, \"INSUFFICIENT_INPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0);\r\n        uint256 amountInWithFee = amountIn.mul(9975);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) public pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, \"INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        require(reserveIn > 0 && reserveOut > 0);\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(10000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(9975);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path\r\n    ) public view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2);\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i]\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    /************************************************** V3 **************************************************/\r\n    bytes32 internal constant V3_INIT_CODE_HASH =\r\n        0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2;\r\n    /// @notice The identifying key of the pool\r\n    struct PoolKey {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n    }\r\n\r\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\r\n    /// @param tokenA The first token of a pool, unsorted\r\n    /// @param tokenB The second token of a pool, unsorted\r\n    /// @param fee The fee level of the pool\r\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\r\n    function getPoolKey(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) public pure returns (PoolKey memory) {\r\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\r\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\r\n    }\r\n\r\n    /// @notice Deterministically computes the pool address given the deployer and PoolKey\r\n    /// @param deployer The PancakeSwap V3 deployer contract address\r\n    /// @param key The PoolKey\r\n    /// @return pool The contract address of the V3 pool\r\n    function computeAddress(\r\n        address deployer,\r\n        PoolKey memory key\r\n    ) public pure returns (address pool) {\r\n        require(key.token0 < key.token1);\r\n        pool = address(\r\n            uint256(\r\n                keccak256(\r\n                    abi.encodePacked(\r\n                        hex\"ff\",\r\n                        deployer,\r\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\r\n                        V3_INIT_CODE_HASH\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\r\n    function getPool(\r\n        address deployer,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) public pure returns (IPancakeV3Pool) {\r\n        return\r\n            IPancakeV3Pool(\r\n                computeAddress(deployer, getPoolKey(tokenA, tokenB, fee))\r\n            );\r\n    }\r\n\r\n    /// @notice Returns the address of a valid PancakeSwap V3 Pool\r\n    /// @param deployer The contract address of the PancakeSwap V3 deployer\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The V3 pool contract address\r\n    function verifyCallback(\r\n        address deployer,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) public view returns (IPancakeV3Pool pool) {\r\n        return verifyCallback(deployer, getPoolKey(tokenA, tokenB, fee));\r\n    }\r\n\r\n    /// @notice Returns the address of a valid PancakeSwap V3 Pool\r\n    /// @param deployer The contract address of the PancakeSwap V3 deployer\r\n    /// @param poolKey The identifying key of the V3 pool\r\n    /// @return pool The V3 pool contract address\r\n    function verifyCallback(\r\n        address deployer,\r\n        PoolKey memory poolKey\r\n    ) public view returns (IPancakeV3Pool pool) {\r\n        pool = IPancakeV3Pool(computeAddress(deployer, poolKey));\r\n        require(msg.sender == address(pool));\r\n    }\r\n}\r\n\r\n/// @title Self Permit\r\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\r\n\r\n/// @title Multicall interface\r\n/// @notice Enables calling multiple methods in a single call to the contract\r\ninterface IMulticall {\r\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\r\n    /// @param data The encoded function data for each of the calls to make to this contract\r\n    /// @return results The results from each of the calls passed in via data\r\n    function multicall(\r\n        bytes[] calldata data\r\n    ) external payable returns (bytes[] memory results);\r\n}\r\n\r\n/// @title MulticallExtended interface\r\n/// @notice Enables calling multiple methods in a single call to the contract with optional validation\r\ninterface IMulticallExtended is IMulticall {\r\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\r\n    /// @param deadline The time by which this function must be called before failing\r\n    /// @param data The encoded function data for each of the calls to make to this contract\r\n    /// @return results The results from each of the calls passed in via data\r\n    function multicall(\r\n        uint256 deadline,\r\n        bytes[] calldata data\r\n    ) external payable returns (bytes[] memory results);\r\n\r\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\r\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\r\n    /// @param previousBlockhash The expected parent blockHash\r\n    /// @param data The encoded function data for each of the calls to make to this contract\r\n    /// @return results The results from each of the calls passed in via data\r\n    function multicall(\r\n        bytes32 previousBlockhash,\r\n        bytes[] calldata data\r\n    ) external payable returns (bytes[] memory results);\r\n}\r\n\r\ninterface IV3SwapRouter is IPancakeV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(\r\n        ExactInputSingleParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(\r\n        ExactInputParams calldata params\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// that may remain in the router after the swap.\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// that may remain in the router after the swap.\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable returns (uint256 amountIn);\r\n}\r\n\r\n/// @title Router token swapping functionality\r\ninterface IV2SwapRouter {\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\r\n    /// and swap the entire amount, enabling contracts to send tokens before calling this function.\r\n    /// @param amountIn The amount of token to swap\r\n    /// @param amountOutMin The minimum amount of output that must be received\r\n    /// @param path The ordered list of tokens to swap through\r\n    /// @param to The recipient address\r\n    /// @return amountOut The amount of the received token\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to\r\n    ) external payable returns (uint256 amountOut);\r\n\r\n    /// @notice Swaps as little as possible of one token for an exact amount of another token\r\n    /// @param amountOut The amount of token to swap for\r\n    /// @param amountInMax The maximum amount of input that the caller will pay\r\n    /// @param path The ordered list of tokens to swap through\r\n    /// @param to The recipient address\r\n    /// @return amountIn The amount of token to pay\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to\r\n    ) external payable returns (uint256 amountIn);\r\n}\r\n\r\nabstract contract ImmutableState is IImmutableState {\r\n    /// @inheritdoc IImmutableState\r\n    address public immutable override factoryV2;\r\n    /// @inheritdoc IImmutableState\r\n    address public immutable override positionManager;\r\n\r\n    constructor(address _factoryV2, address _positionManager) {\r\n        factoryV2 = _factoryV2;\r\n        positionManager = _positionManager;\r\n    }\r\n}\r\n\r\ninterface IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\r\n    /// @param recipient The address receiving ETH\r\n    function unwrapWETH9(\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) external payable;\r\n\r\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\r\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\r\n    /// that use ether for the input amount. And in PancakeSwap Router, this would be called\r\n    /// at the very end of swap\r\n    function refundETH() external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    /// @param token The contract address of the token which will be transferred to `recipient`\r\n    /// @param amountMinimum The minimum amount of token required for a transfer\r\n    /// @param recipient The destination address of the token\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) external payable;\r\n}\r\n\r\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\r\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    function unwrapWETH9WithFee(\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\r\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    function sweepTokenWithFee(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable;\r\n}\r\n\r\ninterface IPeripheryPaymentsExtended is IPeripheryPayments {\r\n    // function unwrapWETH(uint256 amount, address to) external payable;\r\n    /// @notice Wraps the contract's ETH balance into WETH9\r\n    /// @dev The resulting WETH9 is custodied by the router, thus will require further distribution\r\n    /// @param value The amount of ETH to wrap\r\n    function wrapETH(uint256 value) external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to msg.sender\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    /// @param token The contract address of the token which will be transferred to msg.sender\r\n    /// @param amountMinimum The minimum amount of token required for a transfer\r\n    function sweepToken(address token, uint256 amountMinimum) external payable;\r\n\r\n    /// @notice Transfers the specified amount of a token from the msg.sender to address(this)\r\n    /// @param token The token to pull\r\n    /// @param value The amount to pay\r\n    function pull(address token, uint256 value) external payable;\r\n}\r\n\r\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override deployer;\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override factory;\r\n    /// @inheritdoc IPeripheryImmutableState\r\n    address public immutable override WETH9;\r\n\r\n    constructor(address _deployer, address _factory, address _WETH9) {\r\n        deployer = _deployer;\r\n        factory = _factory;\r\n        WETH9 = _WETH9;\r\n    }\r\n}\r\n\r\ninterface IPeripheryPaymentsWithFeeExtended is\r\n    IPeripheryPaymentsExtended,\r\n    IPeripheryPaymentsWithFee\r\n{\r\n    /// @notice Unwraps the contract's WETH9 balance and sends it to msg.sender as ETH, with a percentage between\r\n    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\r\n    function unwrapWETH9WithFee(\r\n        uint256 amountMinimum,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable;\r\n\r\n    /// @notice Transfers the full amount of a token held by this contract to msg.sender, with a percentage between\r\n    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\r\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\r\n    function sweepTokenWithFee(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable;\r\n}\r\n\r\nabstract contract PeripheryPayments is\r\n    IPeripheryPayments,\r\n    PeripheryImmutableState\r\n{\r\n    receive() external payable {\r\n        require(msg.sender == WETH9, \"Not WETH9\");\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPayments\r\n    function unwrapWETH9(\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) public payable override {\r\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\r\n        require(balanceWETH9 >= amountMinimum, \"Insufficient WETH9\");\r\n        if (balanceWETH9 > 0) {\r\n            IWETH9(WETH9).withdraw(balanceWETH9);\r\n            TransferHelper.safeTransferETH(recipient, balanceWETH9);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPayments\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient\r\n    ) public payable override {\r\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\r\n        require(balanceToken >= amountMinimum, \"Insufficient token\");\r\n        if (balanceToken > 0) {\r\n            TransferHelper.safeTransfer(token, recipient, balanceToken);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPayments\r\n    function refundETH() external payable override {\r\n        if (address(this).balance > 0)\r\n            TransferHelper.safeTransferETH(msg.sender, address(this).balance);\r\n    }\r\n\r\n    /// @param token The token to pay\r\n    /// @param payer The entity that must pay\r\n    /// @param recipient The entity that will receive payment\r\n    /// @param value The amount to pay\r\n    function pay(\r\n        address token,\r\n        address payer,\r\n        address recipient,\r\n        uint256 value\r\n    ) internal {\r\n        if (token == WETH9 && address(this).balance >= value) {\r\n            // pay with WETH9\r\n            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\r\n            IWETH9(WETH9).transfer(recipient, value);\r\n        } else if (payer == address(this)) {\r\n            // pay with tokens already in the contract (for the exact input multihop case)\r\n            TransferHelper.safeTransfer(token, recipient, value);\r\n        } else {\r\n            // pull payment\r\n            TransferHelper.safeTransferFrom(token, payer, recipient, value);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract PeripheryPaymentsExtended is\r\n    IPeripheryPaymentsExtended,\r\n    PeripheryPayments\r\n{\r\n    /**\r\n    /// @inheritdoc IPeripheryPaymentsExtended\r\n    function unwrapWETH(uint256 amount, address to) external payable override {\r\n        uint256 balance = IWETH9(WETH9).balanceOf(msg.sender);\r\n        require(balance >= amount);\r\n        TransferHelper.safeTransferFrom(WETH9, msg.sender, address(this), amount);\r\n        IWETH9(WETH9).withdraw(amount);\r\n        TransferHelper.safeTransferETH(to, amount);\r\n    }\r\n    */\r\n    /// @inheritdoc IPeripheryPaymentsExtended\r\n    function wrapETH(uint256 value) external payable override {\r\n        IWETH9(WETH9).deposit{value: value}();\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPaymentsExtended\r\n    function sweepToken(\r\n        address token,\r\n        uint256 amountMinimum\r\n    ) external payable override {\r\n        sweepToken(token, amountMinimum, msg.sender);\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPaymentsExtended\r\n    function pull(address token, uint256 value) external payable override {\r\n        TransferHelper.safeTransferFrom(\r\n            token,\r\n            msg.sender,\r\n            address(this),\r\n            value\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract PeripheryPaymentsWithFee is\r\n    PeripheryPayments,\r\n    IPeripheryPaymentsWithFee\r\n{\r\n    using LowGasSafeMath for uint256;\r\n\r\n    /// @inheritdoc IPeripheryPaymentsWithFee\r\n    function unwrapWETH9WithFee(\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) public payable override {\r\n        require(feeBips > 0 && feeBips <= 100);\r\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\r\n        require(balanceWETH9 >= amountMinimum, \"Insufficient WETH9\");\r\n        if (balanceWETH9 > 0) {\r\n            IWETH9(WETH9).withdraw(balanceWETH9);\r\n            uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;\r\n            if (feeAmount > 0)\r\n                TransferHelper.safeTransferETH(feeRecipient, feeAmount);\r\n            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPaymentsWithFee\r\n    function sweepTokenWithFee(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        address recipient,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) public payable override {\r\n        require(feeBips > 0 && feeBips <= 100);\r\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\r\n        require(balanceToken >= amountMinimum, \"Insufficient token\");\r\n        if (balanceToken > 0) {\r\n            uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;\r\n            if (feeAmount > 0)\r\n                TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\r\n            TransferHelper.safeTransfer(\r\n                token,\r\n                recipient,\r\n                balanceToken - feeAmount\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract PeripheryPaymentsWithFeeExtended is\r\n    IPeripheryPaymentsWithFeeExtended,\r\n    PeripheryPaymentsExtended,\r\n    PeripheryPaymentsWithFee\r\n{\r\n    /// @inheritdoc IPeripheryPaymentsWithFeeExtended\r\n    function unwrapWETH9WithFee(\r\n        uint256 amountMinimum,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable override {\r\n        unwrapWETH9WithFee(amountMinimum, msg.sender, feeBips, feeRecipient);\r\n    }\r\n\r\n    /// @inheritdoc IPeripheryPaymentsWithFeeExtended\r\n    function sweepTokenWithFee(\r\n        address token,\r\n        uint256 amountMinimum,\r\n        uint256 feeBips,\r\n        address feeRecipient\r\n    ) external payable override {\r\n        sweepTokenWithFee(\r\n            token,\r\n            amountMinimum,\r\n            msg.sender,\r\n            feeBips,\r\n            feeRecipient\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract V2SwapRouter is\r\n    IV2SwapRouter,\r\n    ImmutableState,\r\n    PeripheryPaymentsWithFeeExtended,\r\n    ReentrancyGuard\r\n{\r\n    using LowGasSafeMath for uint256;\r\n\r\n    // supports fee-on-transfer tokens\r\n    // requires the initial amount to have already been sent to the first pair\r\n    // `refundETH` should be called at very end of all swaps\r\n    function _swap(address[] memory path, address _to) private {\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = SmartRouterHelper.sortTokens(input, output);\r\n            IUniswapV2Pair pair = IUniswapV2Pair(\r\n                SmartRouterHelper.pairFor(factoryV2, input, output)\r\n            );\r\n            uint256 amountInput;\r\n            uint256 amountOutput;\r\n            // scope to avoid stack too deep errors\r\n            {\r\n                (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n                (uint256 reserveInput, uint256 reserveOutput) = input == token0\r\n                    ? (reserve0, reserve1)\r\n                    : (reserve1, reserve0);\r\n                amountInput = IERC20(input).balanceOf(address(pair)).sub(\r\n                    reserveInput\r\n                );\r\n                amountOutput = SmartRouterHelper.getAmountOut(\r\n                    amountInput,\r\n                    reserveInput,\r\n                    reserveOutput\r\n                );\r\n            }\r\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\r\n                ? (uint256(0), amountOutput)\r\n                : (amountOutput, uint256(0));\r\n            address to = i < path.length - 2\r\n                ? SmartRouterHelper.pairFor(factoryV2, output, path[i + 2])\r\n                : _to;\r\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IV2SwapRouter\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to\r\n    ) external payable override nonReentrant returns (uint256 amountOut) {\r\n        IERC20 srcToken = IERC20(path[0]);\r\n        IERC20 dstToken = IERC20(path[path.length - 1]);\r\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\r\n        bool hasAlreadyPaid;\r\n        if (amountIn == Constants.CONTRACT_BALANCE) {\r\n            hasAlreadyPaid = true;\r\n            amountIn = srcToken.balanceOf(address(this));\r\n        }\r\n        pay(\r\n            address(srcToken),\r\n            hasAlreadyPaid ? address(this) : msg.sender,\r\n            SmartRouterHelper.pairFor(factoryV2, address(srcToken), path[1]),\r\n            amountIn\r\n        );\r\n        // find and replace to addresses\r\n        if (to == Constants.MSG_SENDER) to = msg.sender;\r\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\r\n        uint256 balanceBefore = dstToken.balanceOf(to);\r\n        _swap(path, to);\r\n        amountOut = dstToken.balanceOf(to).sub(balanceBefore);\r\n        require(amountOut >= amountOutMin);\r\n    }\r\n\r\n    /// @inheritdoc IV2SwapRouter\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to\r\n    ) external payable override nonReentrant returns (uint256 amountIn) {\r\n        address srcToken = path[0];\r\n        amountIn = SmartRouterHelper.getAmountsIn(factoryV2, amountOut, path)[\r\n            0\r\n        ];\r\n        require(amountIn <= amountInMax);\r\n        pay(\r\n            srcToken,\r\n            msg.sender,\r\n            SmartRouterHelper.pairFor(factoryV2, srcToken, path[1]),\r\n            amountIn\r\n        );\r\n        // find and replace to addresses\r\n        if (to == Constants.MSG_SENDER) to = msg.sender;\r\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\r\n        _swap(path, to);\r\n    }\r\n}\r\n\r\nabstract contract BlockTimestamp {\r\n    /// @dev Method that exists purely to be overridden for tests\r\n    /// @return The current block timestamp\r\n    function _blockTimestamp() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\nabstract contract OracleSlippage is\r\n    IOracleSlippage,\r\n    PeripheryImmutableState,\r\n    BlockTimestamp\r\n{\r\n    using Path for bytes;\r\n\r\n    /// @dev Returns the tick as of the beginning of the current block, and as of right now, for the given pool.\r\n    function getBlockStartingAndCurrentTick(\r\n        IPancakeV3Pool pool\r\n    ) internal view returns (int24 blockStartingTick, int24 currentTick) {\r\n        uint16 observationIndex;\r\n        uint16 observationCardinality;\r\n        (, currentTick, observationIndex, observationCardinality, , , ) = pool\r\n            .slot0();\r\n        // 2 observations are needed to reliably calculate the block starting tick\r\n        require(observationCardinality > 1);\r\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\r\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\r\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\r\n        (uint32 observationTimestamp, int56 tickCumulative, , ) = pool\r\n            .observations(observationIndex);\r\n        if (observationTimestamp != uint32(_blockTimestamp())) {\r\n            blockStartingTick = currentTick;\r\n        } else {\r\n            uint256 prevIndex = (uint256(observationIndex) +\r\n                observationCardinality -\r\n                1) % observationCardinality;\r\n            (\r\n                uint32 prevObservationTimestamp,\r\n                int56 prevTickCumulative,\r\n                ,\r\n                bool prevInitialized\r\n            ) = pool.observations(prevIndex);\r\n            require(prevInitialized);\r\n            uint32 delta = observationTimestamp - prevObservationTimestamp;\r\n            blockStartingTick = int24(\r\n                (tickCumulative - prevTickCumulative) / delta\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @dev Virtual function to get pool addresses that can be overridden in tests.\r\n    function getPoolAddress(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) internal view virtual returns (IPancakeV3Pool pool) {\r\n        pool = IPancakeV3Pool(\r\n            PoolAddress.computeAddress(\r\n                deployer,\r\n                PoolAddress.getPoolKey(tokenA, tokenB, fee)\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the synthetic time-weighted average tick as of secondsAgo, as well as the current tick,\r\n    /// for the given path. Returned synthetic ticks always represent tokenOut/tokenIn prices,\r\n    /// meaning lower ticks are worse.\r\n    function getSyntheticTicks(\r\n        bytes memory path,\r\n        uint32 secondsAgo\r\n    )\r\n        internal\r\n        view\r\n        returns (int256 syntheticAverageTick, int256 syntheticCurrentTick)\r\n    {\r\n        bool lowerTicksAreWorse;\r\n        uint256 numPools = path.numPools();\r\n        address previousTokenIn;\r\n        for (uint256 i = 0; i < numPools; i++) {\r\n            // this assumes the path is sorted in swap order\r\n            (address tokenIn, address tokenOut, uint24 fee) = path\r\n                .decodeFirstPool();\r\n            IPancakeV3Pool pool = getPoolAddress(tokenIn, tokenOut, fee);\r\n            // get the average and current ticks for the current pool\r\n            int256 averageTick;\r\n            int256 currentTick;\r\n            if (secondsAgo == 0) {\r\n                // we optimize for the secondsAgo == 0 case, i.e. since the beginning of the block\r\n                (averageTick, currentTick) = getBlockStartingAndCurrentTick(\r\n                    pool\r\n                );\r\n            } else {\r\n                (averageTick, ) = OracleLibrary.consult(\r\n                    address(pool),\r\n                    secondsAgo\r\n                );\r\n                (, currentTick, , , , , ) = IPancakeV3Pool(pool).slot0();\r\n            }\r\n            if (i == numPools - 1) {\r\n                // if we're here, this is the last pool in the path, meaning tokenOut represents the\r\n                // destination token. so, if tokenIn < tokenOut, then tokenIn is token0 of the last pool,\r\n                // meaning the current running ticks are going to represent tokenOut/tokenIn prices.\r\n                // so, the lower these prices get, the worse of a price the swap will get\r\n                lowerTicksAreWorse = tokenIn < tokenOut;\r\n            } else {\r\n                // if we're here, we need to iterate over the next pool in the path\r\n                path = path.skipToken();\r\n                previousTokenIn = tokenIn;\r\n            }\r\n            // accumulate the ticks derived from the current pool into the running synthetic ticks,\r\n            // ensuring that intermediate tokens \"cancel out\"\r\n            bool add = (i == 0) ||\r\n                (\r\n                    previousTokenIn < tokenIn\r\n                        ? tokenIn < tokenOut\r\n                        : tokenOut < tokenIn\r\n                );\r\n            if (add) {\r\n                syntheticAverageTick += averageTick;\r\n                syntheticCurrentTick += currentTick;\r\n            } else {\r\n                syntheticAverageTick -= averageTick;\r\n                syntheticCurrentTick -= currentTick;\r\n            }\r\n        }\r\n        // flip the sign of the ticks if necessary, to ensure that the lower ticks are always worse\r\n        if (!lowerTicksAreWorse) {\r\n            syntheticAverageTick *= -1;\r\n            syntheticCurrentTick *= -1;\r\n        }\r\n    }\r\n\r\n    /// @dev Cast a int256 to a int24, revert on overflow or underflow\r\n    function toInt24(int256 y) private pure returns (int24 z) {\r\n        require((z = int24(y)) == y);\r\n    }\r\n\r\n    /// @dev For each passed path, fetches the synthetic time-weighted average tick as of secondsAgo,\r\n    /// as well as the current tick. Then, synthetic ticks from all paths are subjected to a weighted\r\n    /// average, where the weights are the fraction of the total input amount allocated to each path.\r\n    /// Returned synthetic ticks always represent tokenOut/tokenIn prices, meaning lower ticks are worse.\r\n    /// Paths must all start and end in the same token.\r\n    function getSyntheticTicks(\r\n        bytes[] memory paths,\r\n        uint128[] memory amounts,\r\n        uint32 secondsAgo\r\n    )\r\n        internal\r\n        view\r\n        returns (\r\n            int256 averageSyntheticAverageTick,\r\n            int256 averageSyntheticCurrentTick\r\n        )\r\n    {\r\n        require(paths.length == amounts.length);\r\n        OracleLibrary.WeightedTickData[]\r\n            memory weightedSyntheticAverageTicks = new OracleLibrary.WeightedTickData[](\r\n                paths.length\r\n            );\r\n        OracleLibrary.WeightedTickData[]\r\n            memory weightedSyntheticCurrentTicks = new OracleLibrary.WeightedTickData[](\r\n                paths.length\r\n            );\r\n        for (uint256 i = 0; i < paths.length; i++) {\r\n            (\r\n                int256 syntheticAverageTick,\r\n                int256 syntheticCurrentTick\r\n            ) = getSyntheticTicks(paths[i], secondsAgo);\r\n            weightedSyntheticAverageTicks[i].tick = toInt24(\r\n                syntheticAverageTick\r\n            );\r\n            weightedSyntheticCurrentTicks[i].tick = toInt24(\r\n                syntheticCurrentTick\r\n            );\r\n            weightedSyntheticAverageTicks[i].weight = amounts[i];\r\n            weightedSyntheticCurrentTicks[i].weight = amounts[i];\r\n        }\r\n        averageSyntheticAverageTick = OracleLibrary\r\n            .getWeightedArithmeticMeanTick(weightedSyntheticAverageTicks);\r\n        averageSyntheticCurrentTick = OracleLibrary\r\n            .getWeightedArithmeticMeanTick(weightedSyntheticCurrentTicks);\r\n    }\r\n\r\n    /// @inheritdoc IOracleSlippage\r\n    function checkOracleSlippage(\r\n        bytes memory path,\r\n        uint24 maximumTickDivergence,\r\n        uint32 secondsAgo\r\n    ) external view override {\r\n        (\r\n            int256 syntheticAverageTick,\r\n            int256 syntheticCurrentTick\r\n        ) = getSyntheticTicks(path, secondsAgo);\r\n        require(\r\n            syntheticAverageTick - syntheticCurrentTick < maximumTickDivergence\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IOracleSlippage\r\n    function checkOracleSlippage(\r\n        bytes[] memory paths,\r\n        uint128[] memory amounts,\r\n        uint24 maximumTickDivergence,\r\n        uint32 secondsAgo\r\n    ) external view override {\r\n        (\r\n            int256 averageSyntheticAverageTick,\r\n            int256 averageSyntheticCurrentTick\r\n        ) = getSyntheticTicks(paths, amounts, secondsAgo);\r\n        require(\r\n            averageSyntheticAverageTick - averageSyntheticCurrentTick <\r\n                maximumTickDivergence\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract V3SwapRouter is\r\n    IV3SwapRouter,\r\n    PeripheryPaymentsWithFeeExtended,\r\n    OracleSlippage,\r\n    ReentrancyGuard\r\n{\r\n    using Path for bytes;\r\n    using SafeCast for uint256;\r\n    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\r\n    /// can never actually be this value\r\n    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\r\n    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\r\n    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\r\n    struct SwapCallbackData {\r\n        bytes path;\r\n        address payer;\r\n    }\r\n\r\n    /// @inheritdoc IPancakeV3SwapCallback\r\n    function pancakeV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata _data\r\n    ) external override {\r\n        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\r\n        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\r\n        (address tokenIn, address tokenOut, uint24 fee) = data\r\n            .path\r\n            .decodeFirstPool();\r\n        SmartRouterHelper.verifyCallback(deployer, tokenIn, tokenOut, fee);\r\n        (bool isExactInput, uint256 amountToPay) = amount0Delta > 0\r\n            ? (tokenIn < tokenOut, uint256(amount0Delta))\r\n            : (tokenOut < tokenIn, uint256(amount1Delta));\r\n        if (isExactInput) {\r\n            pay(tokenIn, data.payer, msg.sender, amountToPay);\r\n        } else {\r\n            // either initiate the next swap or pay\r\n            if (data.path.hasMultiplePools()) {\r\n                data.path = data.path.skipToken();\r\n                exactOutputInternal(amountToPay, msg.sender, 0, data);\r\n            } else {\r\n                amountInCached = amountToPay;\r\n                // note that because exact output swaps are executed in reverse order, tokenOut is actually tokenIn\r\n                pay(tokenOut, data.payer, msg.sender, amountToPay);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Performs a single exact input swap\r\n    /// @notice `refundETH` should be called at very end of all swaps\r\n    function exactInputInternal(\r\n        uint256 amountIn,\r\n        address recipient,\r\n        uint160 sqrtPriceLimitX96,\r\n        SwapCallbackData memory data\r\n    ) private returns (uint256 amountOut) {\r\n        // find and replace recipient addresses\r\n        if (recipient == Constants.MSG_SENDER) recipient = msg.sender;\r\n        else if (recipient == Constants.ADDRESS_THIS) recipient = address(this);\r\n        (address tokenIn, address tokenOut, uint24 fee) = data\r\n            .path\r\n            .decodeFirstPool();\r\n        bool zeroForOne = tokenIn < tokenOut;\r\n        (int256 amount0, int256 amount1) = SmartRouterHelper\r\n            .getPool(deployer, tokenIn, tokenOut, fee)\r\n            .swap(\r\n                recipient,\r\n                zeroForOne,\r\n                amountIn.toInt256(),\r\n                sqrtPriceLimitX96 == 0\r\n                    ? (\r\n                        zeroForOne\r\n                            ? TickMath.MIN_SQRT_RATIO + 1\r\n                            : TickMath.MAX_SQRT_RATIO - 1\r\n                    )\r\n                    : sqrtPriceLimitX96,\r\n                abi.encode(data)\r\n            );\r\n        return uint256(-(zeroForOne ? amount1 : amount0));\r\n    }\r\n\r\n    /// @inheritdoc IV3SwapRouter\r\n    function exactInputSingle(\r\n        ExactInputSingleParams memory params\r\n    ) external payable override nonReentrant returns (uint256 amountOut) {\r\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\r\n        bool hasAlreadyPaid;\r\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\r\n            hasAlreadyPaid = true;\r\n            params.amountIn = IERC20(params.tokenIn).balanceOf(address(this));\r\n        }\r\n        amountOut = exactInputInternal(\r\n            params.amountIn,\r\n            params.recipient,\r\n            params.sqrtPriceLimitX96,\r\n            SwapCallbackData({\r\n                path: abi.encodePacked(\r\n                    params.tokenIn,\r\n                    params.fee,\r\n                    params.tokenOut\r\n                ),\r\n                payer: hasAlreadyPaid ? address(this) : msg.sender\r\n            })\r\n        );\r\n        require(amountOut >= params.amountOutMinimum);\r\n    }\r\n\r\n    /// @inheritdoc IV3SwapRouter\r\n    function exactInput(\r\n        ExactInputParams memory params\r\n    ) external payable override nonReentrant returns (uint256 amountOut) {\r\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\r\n        bool hasAlreadyPaid;\r\n        if (params.amountIn == Constants.CONTRACT_BALANCE) {\r\n            hasAlreadyPaid = true;\r\n            (address tokenIn, , ) = params.path.decodeFirstPool();\r\n            params.amountIn = IERC20(tokenIn).balanceOf(address(this));\r\n        }\r\n        address payer = hasAlreadyPaid ? address(this) : msg.sender;\r\n        while (true) {\r\n            bool hasMultiplePools = params.path.hasMultiplePools();\r\n            // the outputs of prior swaps become the inputs to subsequent ones\r\n            params.amountIn = exactInputInternal(\r\n                params.amountIn,\r\n                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\r\n                0,\r\n                SwapCallbackData({\r\n                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\r\n                    payer: payer\r\n                })\r\n            );\r\n            // decide whether to continue or terminate\r\n            if (hasMultiplePools) {\r\n                payer = address(this);\r\n                params.path = params.path.skipToken();\r\n            } else {\r\n                amountOut = params.amountIn;\r\n                break;\r\n            }\r\n        }\r\n        require(amountOut >= params.amountOutMinimum);\r\n    }\r\n\r\n    /// @dev Performs a single exact output swap\r\n    /// @notice `refundETH` should be called at very end of all swaps\r\n    function exactOutputInternal(\r\n        uint256 amountOut,\r\n        address recipient,\r\n        uint160 sqrtPriceLimitX96,\r\n        SwapCallbackData memory data\r\n    ) private returns (uint256 amountIn) {\r\n        // find and replace recipient addresses\r\n        if (recipient == Constants.MSG_SENDER) recipient = msg.sender;\r\n        else if (recipient == Constants.ADDRESS_THIS) recipient = address(this);\r\n        (address tokenOut, address tokenIn, uint24 fee) = data\r\n            .path\r\n            .decodeFirstPool();\r\n        bool zeroForOne = tokenIn < tokenOut;\r\n        (int256 amount0Delta, int256 amount1Delta) = SmartRouterHelper\r\n            .getPool(deployer, tokenIn, tokenOut, fee)\r\n            .swap(\r\n                recipient,\r\n                zeroForOne,\r\n                -amountOut.toInt256(),\r\n                sqrtPriceLimitX96 == 0\r\n                    ? (\r\n                        zeroForOne\r\n                            ? TickMath.MIN_SQRT_RATIO + 1\r\n                            : TickMath.MAX_SQRT_RATIO - 1\r\n                    )\r\n                    : sqrtPriceLimitX96,\r\n                abi.encode(data)\r\n            );\r\n        uint256 amountOutReceived;\r\n        (amountIn, amountOutReceived) = zeroForOne\r\n            ? (uint256(amount0Delta), uint256(-amount1Delta))\r\n            : (uint256(amount1Delta), uint256(-amount0Delta));\r\n        // it's technically possible to not receive the full output amount,\r\n        // so if no price limit has been specified, require this possibility away\r\n        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\r\n    }\r\n\r\n    /// @inheritdoc IV3SwapRouter\r\n    function exactOutputSingle(\r\n        ExactOutputSingleParams calldata params\r\n    ) external payable override nonReentrant returns (uint256 amountIn) {\r\n        // avoid an SLOAD by using the swap return data\r\n        amountIn = exactOutputInternal(\r\n            params.amountOut,\r\n            params.recipient,\r\n            params.sqrtPriceLimitX96,\r\n            SwapCallbackData({\r\n                path: abi.encodePacked(\r\n                    params.tokenOut,\r\n                    params.fee,\r\n                    params.tokenIn\r\n                ),\r\n                payer: msg.sender\r\n            })\r\n        );\r\n        require(amountIn <= params.amountInMaximum);\r\n        // has to be reset even though we don't use it in the single hop case\r\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\r\n    }\r\n\r\n    /// @inheritdoc IV3SwapRouter\r\n    function exactOutput(\r\n        ExactOutputParams calldata params\r\n    ) external payable override nonReentrant returns (uint256 amountIn) {\r\n        exactOutputInternal(\r\n            params.amountOut,\r\n            params.recipient,\r\n            0,\r\n            SwapCallbackData({path: params.path, payer: msg.sender})\r\n        );\r\n        amountIn = amountInCached;\r\n        require(amountIn <= params.amountInMaximum);\r\n        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address internal owner;\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IStableSwap {\r\n    // solium-disable-next-line mixedcase\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256 dy);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 minDy\r\n    ) external payable;\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function coins(uint256 i) external view returns (address);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function balances(uint256 i) external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function A() external view returns (uint256);\r\n\r\n    // solium-disable-next-line mixedcase\r\n    function fee() external view returns (uint256);\r\n}\r\n\r\nabstract contract StableSwapRouter is\r\n    IStableSwapRouter,\r\n    PeripheryPaymentsWithFeeExtended,\r\n    Ownable,\r\n    ReentrancyGuard\r\n{\r\n    address public stableSwapFactory;\r\n    address public stableSwapInfo;\r\n    event SetStableSwap(address indexed factory, address indexed info);\r\n\r\n    constructor(address _stableSwapFactory, address _stableSwapInfo) {\r\n        stableSwapFactory = _stableSwapFactory;\r\n        stableSwapInfo = _stableSwapInfo;\r\n    }\r\n\r\n    /**\r\n     * @notice Set Pancake Stable Swap Factory and Info\r\n     * @dev Only callable by contract owner\r\n     */\r\n    function setStableSwap(address _factory, address _info) external onlyOwner {\r\n        require(_factory != address(0) && _info != address(0));\r\n        stableSwapFactory = _factory;\r\n        stableSwapInfo = _info;\r\n        emit SetStableSwap(stableSwapFactory, stableSwapInfo);\r\n    }\r\n\r\n    /// `refundETH` should be called at very end of all swaps\r\n    function _swap(address[] memory path, uint256[] memory flag) private {\r\n        require(path.length - 1 == flag.length);\r\n\r\n        for (uint256 i; i < flag.length; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (uint256 k, uint256 j, address swapContract) = SmartRouterHelper\r\n                .getStableInfo(stableSwapFactory, input, output, flag[i]);\r\n            uint256 amountIn_ = IERC20(input).balanceOf(address(this));\r\n            TransferHelper.safeApprove(input, swapContract, amountIn_);\r\n            IStableSwap(swapContract).exchange(k, j, amountIn_, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param flag token amount in a stable swap pool. 2 for 2pool, 3 for 3pool\r\n     */\r\n    function exactInputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address to\r\n    ) external payable override nonReentrant returns (uint256 amountOut) {\r\n        IERC20 srcToken = IERC20(path[0]);\r\n        IERC20 dstToken = IERC20(path[path.length - 1]);\r\n        // use amountIn == Constants.CONTRACT_BALANCE as a flag to swap the entire balance of the contract\r\n        bool hasAlreadyPaid;\r\n        if (amountIn == Constants.CONTRACT_BALANCE) {\r\n            hasAlreadyPaid = true;\r\n            amountIn = srcToken.balanceOf(address(this));\r\n        }\r\n        if (!hasAlreadyPaid) {\r\n            pay(address(srcToken), msg.sender, address(this), amountIn);\r\n        }\r\n        _swap(path, flag);\r\n        amountOut = dstToken.balanceOf(address(this));\r\n        require(amountOut >= amountOutMin);\r\n        // find and replace to addresses\r\n        if (to == Constants.MSG_SENDER) to = msg.sender;\r\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\r\n        if (to != address(this))\r\n            pay(address(dstToken), address(this), to, amountOut);\r\n    }\r\n\r\n    /**\r\n     * @param flag token amount in a stable swap pool. 2 for 2pool, 3 for 3pool\r\n     */\r\n    function exactOutputStableSwap(\r\n        address[] calldata path,\r\n        uint256[] calldata flag,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address to\r\n    ) external payable override nonReentrant returns (uint256 amountIn) {\r\n        amountIn = SmartRouterHelper.getStableAmountsIn(\r\n            stableSwapFactory,\r\n            stableSwapInfo,\r\n            path,\r\n            flag,\r\n            amountOut\r\n        )[0];\r\n        require(amountIn <= amountInMax);\r\n        pay(path[0], msg.sender, address(this), amountIn);\r\n        _swap(path, flag);\r\n        // find and replace to addresses\r\n        if (to == Constants.MSG_SENDER) to = msg.sender;\r\n        else if (to == Constants.ADDRESS_THIS) to = address(this);\r\n        if (to != address(this))\r\n            pay(path[path.length - 1], address(this), to, amountOut);\r\n    }\r\n}\r\n\r\nabstract contract ApproveAndCall is IApproveAndCall, ImmutableState {\r\n    function tryApprove(address token, uint256 amount) private returns (bool) {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(\r\n                IERC20.approve.selector,\r\n                positionManager,\r\n                amount\r\n            )\r\n        );\r\n        return success && (data.length == 0 || abi.decode(data, (bool)));\r\n    }\r\n\r\n    /// @inheritdoc IApproveAndCall\r\n    function getApprovalType(\r\n        address token,\r\n        uint256 amount\r\n    ) external override returns (ApprovalType) {\r\n        // check existing approval\r\n        if (IERC20(token).allowance(address(this), positionManager) >= amount)\r\n            return ApprovalType.NOT_REQUIRED;\r\n        // try type(uint256).max / type(uint256).max - 1\r\n        if (tryApprove(token, type(uint256).max)) return ApprovalType.MAX;\r\n        if (tryApprove(token, type(uint256).max - 1))\r\n            return ApprovalType.MAX_MINUS_ONE;\r\n        // set approval to 0 (must succeed)\r\n        require(tryApprove(token, 0));\r\n        // try type(uint256).max / type(uint256).max - 1\r\n        if (tryApprove(token, type(uint256).max))\r\n            return ApprovalType.ZERO_THEN_MAX;\r\n        if (tryApprove(token, type(uint256).max - 1))\r\n            return ApprovalType.ZERO_THEN_MAX_MINUS_ONE;\r\n        revert();\r\n    }\r\n\r\n    /// @inheritdoc IApproveAndCall\r\n    function approveMax(address token) external payable override {\r\n        require(tryApprove(token, type(uint256).max));\r\n    }\r\n\r\n    /// @inheritdoc IApproveAndCall\r\n    function approveMaxMinusOne(address token) external payable override {\r\n        require(tryApprove(token, type(uint256).max - 1));\r\n    }\r\n\r\n    /// @inheritdoc IApproveAndCall\r\n    function approveZeroThenMax(address token) external payable override {\r\n        require(tryApprove(token, 0));\r\n        require(tryApprove(token, type(uint256).max));\r\n    }\r\n\r\n    /// @inheritdoc IApproveAndCall\r\n    function approveZeroThenMaxMinusOne(\r\n        address token\r\n    ) external payable override {\r\n        require(tryApprove(token, 0));\r\n        require(tryApprove(token, type(uint256).max - 1));\r\n    }\r\n\r\n    /// @inheritdoc IApproveAndCall\r\n    function callPositionManager(\r\n        bytes memory data\r\n    ) public payable override returns (bytes memory result) {\r\n        bool success;\r\n        (success, result) = positionManager.call(data);\r\n        if (!success) {\r\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577\r\n            if (result.length < 68) revert();\r\n            assembly {\r\n                result := add(result, 0x04)\r\n            }\r\n            revert(abi.decode(result, (string)));\r\n        }\r\n    }\r\n\r\n    function balanceOf(address token) private view returns (uint256) {\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n}\r\n\r\nabstract contract Multicall is IMulticall {\r\n    /// @inheritdoc IMulticall\r\n    function multicall(\r\n        bytes[] calldata data\r\n    ) public payable override returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(\r\n                data[i]\r\n            );\r\n            if (!success) {\r\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\r\n                if (result.length < 68) revert();\r\n                assembly {\r\n                    result := add(result, 0x04)\r\n                }\r\n                revert(abi.decode(result, (string)));\r\n            }\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract PeripheryValidation is BlockTimestamp {\r\n    modifier checkDeadline(uint256 deadline) {\r\n        require(_blockTimestamp() <= deadline, \"Transaction too old\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract PeripheryValidationExtended is PeripheryValidation {\r\n    modifier checkPreviousBlockhash(bytes32 previousBlockhash) {\r\n        require(blockhash(block.number - 1) == previousBlockhash, \"Blockhash\");\r\n        _;\r\n    }\r\n}\r\n\r\nabstract contract MulticallExtended is\r\n    IMulticallExtended,\r\n    Multicall,\r\n    PeripheryValidationExtended\r\n{\r\n    /// @inheritdoc IMulticallExtended\r\n    function multicall(\r\n        uint256 deadline,\r\n        bytes[] calldata data\r\n    )\r\n        external\r\n        payable\r\n        override\r\n        checkDeadline(deadline)\r\n        returns (bytes[] memory)\r\n    {\r\n        return multicall(data);\r\n    }\r\n\r\n    /// @inheritdoc IMulticallExtended\r\n    function multicall(\r\n        bytes32 previousBlockhash,\r\n        bytes[] calldata data\r\n    )\r\n        external\r\n        payable\r\n        override\r\n        checkPreviousBlockhash(previousBlockhash)\r\n        returns (bytes[] memory)\r\n    {\r\n        return multicall(data);\r\n    }\r\n}\r\n\r\ninterface ISmartRouter is\r\n    IV2SwapRouter,\r\n    IV3SwapRouter,\r\n    IStableSwapRouter,\r\n    IApproveAndCall,\r\n    IMulticallExtended,\r\n    ISelfPermit\r\n{}\r\n\r\ninterface IDEXRouter is ISmartRouter {}\r\n\r\ninterface ILegacyRouter {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract PIXMonster is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public RESERVE = 0x55d398326f99059fF775485246999027B3197955;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address ROUTER = 0x13f4EA83D0bd40E75C8222255bc855a974568Dd4;\r\n    address MAIN_ROUTER = ROUTER;\r\n\r\n    uint256 public feeDenominator = 10000;\r\n    uint256 public nixFeeNumeratorBNB = 9000;\r\n    uint256 public nixFeeNumeratorTokenAmount = 1000;\r\n    uint256 public slippageFactor = 10000;\r\n    uint256 public slippageMultiplier = 2000;\r\n    uint256 public gasFee = 5200000000000000;\r\n    address public pixFeeReceiver = 0x0AeEfC469847B1a53340ca79251582F174B7c37E;\r\n    address public safetyWitdrawReceiver =\r\n        0x7FA0a7cAF42B3CB5c3f7e4B73eBb3c797b10e4A5;\r\n\r\n    // BUY BACK & REFERRAL SYSTEM\r\n    uint256 private beforeBuyback = 0;\r\n    uint256 private afterBuyback = 0;\r\n    uint256 private beforeReferral = 0;\r\n    uint256 private afterReferral = 0;\r\n    uint256 private buybackAmount = 0;\r\n    uint256 private buybackBurnAmount = 0;\r\n    uint256 private referralAmount = 0;\r\n\r\n    // GLOBAL TOKEN INFO\r\n    uint256 public pixFee = 50;\r\n    uint256 public contractFee = 0;\r\n    uint256 public extraFee = 100;\r\n    uint256 public overFee = 0;\r\n    uint256 public buybackPercentage = 1000;\r\n    address public feeReceiver = 0x0AeEfC469847B1a53340ca79251582F174B7c37E;\r\n    address public buyBackToken = 0xBe96fcF736AD906b1821Ef74A0e4e346C74e6221;\r\n    bool public transferAfter = false;\r\n    bool public buyBack = true;\r\n    bool public generalBuyBack = true;\r\n\r\n    uint256 private MAXIMUM_OVER_FEE = 10000;\r\n\r\n    uint256 private USDTToLiquify = 0;\r\n    uint256 private USDTToLiquifyFeeAmount = 0;\r\n    uint256 private USDTToLiquifyEXTRAFee = 0;\r\n    uint256 private USDTToLiquifyOVERFee = 0;\r\n    uint256 private feeAmount = 0;\r\n    uint256 private amountToBeSentAfterFees = 0;\r\n\r\n    string _name = \"PIX Monster\";\r\n    string _symbol = \"PIX\";\r\n    uint8 _decimals = 0;\r\n    uint256 _totalSupply = 0;\r\n\r\n    // Info of each pool.\r\n    struct TokenInfo {\r\n        IERC20 tokenAddress;\r\n        uint256 pixFee;\r\n        uint256 contractFee;\r\n        uint256 extraFee;\r\n        uint256 overFee;\r\n        uint256 totalFees;\r\n        address feeReceiver;\r\n        address path;\r\n        bool transferAfter;\r\n        bool isV2Smart;\r\n        bool isV3Smart;\r\n        /*   bool isLegacyV2;  */\r\n    }\r\n\r\n    struct PartnerInfo {\r\n        uint256 partnerFee;\r\n        uint256 totalTransfered;\r\n        address partnerAddress;\r\n        address partnerTokenPreference;\r\n        address partnerWorker;\r\n        bool isPartner;\r\n    }\r\n\r\n    mapping(address => PartnerInfo) public partnerInfo;\r\n    mapping(address => TokenInfo) public tokenInfo;\r\n    mapping(address => uint256) _balances;\r\n    mapping(address => bool) _isWorker;\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n    mapping(address => uint256) public totalFee;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => bool) public haltIfNoBalance;\r\n\r\n    IDEXRouter public router;\r\n    ILegacyRouter public legacyRouter;\r\n    address public pair;\r\n\r\n    event AdminTokenRecovery(address tokenAddress, uint256 tokenAmount);\r\n\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        router = IDEXRouter(ROUTER);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address holder,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function addTokens(\r\n        address[] calldata addresses,\r\n        address _route\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addresses.length; i++) {\r\n            setTokenInfo(\r\n                addresses[i],\r\n                pixFee,\r\n                contractFee,\r\n                extraFee,\r\n                overFee,\r\n                feeReceiver,\r\n                transferAfter,\r\n                _route,\r\n                true,\r\n                false\r\n                /*               false */\r\n            );\r\n        }\r\n    }\r\n\r\n    function addToken(\r\n        address _token,\r\n        address _route,\r\n        bool _isV2Smart,\r\n        bool _isV3Smart\r\n    )\r\n        external\r\n        /*          _isLegacyV2 */\r\n        onlyOwner\r\n    {\r\n        setTokenInfo(\r\n            _token,\r\n            pixFee,\r\n            contractFee,\r\n            extraFee,\r\n            overFee,\r\n            feeReceiver,\r\n            transferAfter,\r\n            _route,\r\n            _isV2Smart,\r\n            _isV3Smart\r\n            /*          _isLegacyV2 */\r\n        );\r\n    }\r\n\r\n    function setGeneralInfo(\r\n        uint256 _pixFee,\r\n        uint256 _contractFee,\r\n        uint256 _extraFee,\r\n        uint256 _overFee,\r\n        address _feeReceiver,\r\n        bool _transferAfter,\r\n        address _buyBackToken,\r\n        bool _generalBuyBack,\r\n        uint256 _buybackPercentage,\r\n        bool _isV2Smart,\r\n        bool _isV3Smart\r\n    )\r\n        external\r\n        /*         bool _isLegacyV2 */\r\n        onlyOwner\r\n    {\r\n        pixFee = _pixFee;\r\n        contractFee = _contractFee;\r\n        extraFee = _extraFee;\r\n        overFee = _overFee;\r\n        feeReceiver = _feeReceiver;\r\n        transferAfter = _transferAfter;\r\n        buyBackToken = _buyBackToken;\r\n        generalBuyBack = _generalBuyBack;\r\n        buybackPercentage = _buybackPercentage;\r\n        _isV2Smart = _isV2Smart;\r\n        _isV3Smart = _isV3Smart;\r\n        /*         _isLegacyV2 = _isLegacyV2; */\r\n    }\r\n\r\n    function setTokenInfo(\r\n        address _tokenAddress,\r\n        uint256 _pixFee,\r\n        uint256 _contractFee,\r\n        uint256 _extraFee,\r\n        uint256 _overFee,\r\n        address _feeReceiver,\r\n        bool _transferAfter,\r\n        address _path,\r\n        bool _isV2Smart,\r\n        bool _isV3Smart\r\n    ) public /*         bool _isLegacyV2 */\r\n    {\r\n        require(\r\n            msg.sender == owner || msg.sender == address(this),\r\n            \"You are not authorized\"\r\n        );\r\n\r\n        TokenInfo storage token = tokenInfo[_tokenAddress];\r\n        token.tokenAddress = IERC20(_tokenAddress);\r\n        token.pixFee = _pixFee;\r\n        token.contractFee = _contractFee;\r\n        token.extraFee = _extraFee;\r\n        token.overFee = _overFee;\r\n        token.feeReceiver = _feeReceiver;\r\n        token.transferAfter = _transferAfter;\r\n        token.path = _path;\r\n        totalFee[_tokenAddress] = _pixFee.add(_contractFee).add(_extraFee);\r\n        token.totalFees = totalFee[_tokenAddress];\r\n        token.isV2Smart = _isV2Smart;\r\n        token.isV3Smart = _isV3Smart;\r\n        /*    token.isLegacyV2 = _isLegacyV2; */\r\n    }\r\n\r\n    function setPartnerInfo(\r\n        uint256 _partnerFee,\r\n        address _partnerAddress,\r\n        address _partnerWorker,\r\n        address _partnerTokenPreference,\r\n        bool _isPartner\r\n    ) external onlyOwner {\r\n        PartnerInfo storage partner = partnerInfo[_partnerAddress];\r\n        partner.partnerFee = _partnerFee;\r\n        partner.partnerAddress = _partnerAddress;\r\n        partner.partnerWorker = _partnerWorker;\r\n        partner.partnerTokenPreference = _partnerTokenPreference;\r\n        partner.isPartner = _isPartner;\r\n    }\r\n\r\n    function halt(address _address, bool _enabled) public onlyOwner {\r\n        require(_enabled != haltIfNoBalance[_address]);\r\n        haltIfNoBalance[_address] = _enabled;\r\n    }\r\n\r\n    function setPixFeeReceiver(\r\n        address _pixFeeReceiver,\r\n        uint256 _gasFee\r\n    ) external onlyOwner {\r\n        pixFeeReceiver = _pixFeeReceiver;\r\n        gasFee = _gasFee;\r\n    }\r\n\r\n    function setNixFees(\r\n        uint256 _nixFeeBNB,\r\n        uint256 _nixFeeToken\r\n    ) external onlyOwner {\r\n        nixFeeNumeratorBNB = _nixFeeBNB;\r\n        nixFeeNumeratorTokenAmount = _nixFeeToken;\r\n    }\r\n\r\n    function setWorker(\r\n        address _workerAddress,\r\n        bool _enabled\r\n    ) external onlyOwner {\r\n        require(_isWorker[_workerAddress] != _enabled);\r\n        _isWorker[_workerAddress] = _enabled;\r\n    }\r\n\r\n    function blacklist(address _token, bool _isBlacklisted) external onlyOwner {\r\n        require(isBlacklisted[_token] != _isBlacklisted);\r\n        isBlacklisted[_token] = _isBlacklisted;\r\n    }\r\n\r\n    function PIXTransfer(\r\n        address _token,\r\n        address _deliveryAddress,\r\n        uint256 _amount\r\n    ) public {\r\n        require(_isWorker[msg.sender], \"MSG SENDER is not a worker\");\r\n        require(!isBlacklisted[_token], \"BLACKLISTED\");\r\n        uint256 amountToLiquify = _amount;\r\n        if (_token != WBNB) {\r\n            require(IERC20(_token).balanceOf(address(this)) >= _amount);\r\n            IERC20(_token).transfer(address(_deliveryAddress), _amount);\r\n        } else {\r\n            require(address(this).balance >= amountToLiquify);\r\n            (bool tmpSuccess, ) = payable(_deliveryAddress).call{\r\n                value: amountToLiquify,\r\n                gas: 30000\r\n            }(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n    }\r\n\r\n    function process(\r\n        address _token,\r\n        address _referralToken,\r\n        address _deliveryAddress,\r\n        address _referrer,\r\n        uint256 _amountUSDTToLiquify,\r\n        uint256 _mintokenAmount,\r\n        address _router\r\n    ) internal swapping {\r\n        //CHECKS CONTRACT INFO\r\n        TokenInfo storage token = tokenInfo[_token];\r\n\r\n        //REQUIREMENTS\r\n        require(!isBlacklisted[_token], \"BLACKLISTED\");\r\n        require(\r\n            IERC20(RESERVE).balanceOf(address(this)) >= _amountUSDTToLiquify,\r\n            \"INSUFFICIENT_USDT_BALANCE\"\r\n        );\r\n        require(\r\n            !haltIfNoBalance[_token] ||\r\n                IERC20(_token).balanceOf(address(this)) >= _mintokenAmount,\r\n            \"HALT_IF_NO_BALANCE\"\r\n        );\r\n\r\n        //CREATE LOCAL VARIABLES\r\n        bool swapHasBeenDone = false;\r\n        uint256 totalAmountSent = 0;\r\n        address deliveryAddress = _deliveryAddress;\r\n        address referrer = _referrer;\r\n\r\n        //RESET VARIABLES\r\n        USDTToLiquify = _amountUSDTToLiquify;\r\n        USDTToLiquifyFeeAmount = 0;\r\n        USDTToLiquifyEXTRAFee = 0;\r\n        USDTToLiquifyOVERFee = 0;\r\n        feeAmount = 0;\r\n        amountToBeSentAfterFees = _mintokenAmount;\r\n\r\n        //UPDATES AMOUNT OF FEES TO BE CHARGED\r\n        if (token.totalFees > 0) {\r\n            USDTToLiquifyFeeAmount = USDTToLiquify\r\n                .mul(token.totalFees.sub(token.contractFee))\r\n                .div(feeDenominator);\r\n        }\r\n        if (token.extraFee > 0) {\r\n            USDTToLiquifyEXTRAFee = USDTToLiquify.mul(token.extraFee).div(\r\n                feeDenominator\r\n            );\r\n\r\n            // CHECKS IF BUYBACK IS OFF. IF IT IS, ADDS BUYBACK FEE TO PIXFEE\r\n            if (!generalBuyBack) {\r\n                USDTToLiquifyFeeAmount = USDTToLiquifyFeeAmount.add(\r\n                    USDTToLiquifyEXTRAFee\r\n                );\r\n                USDTToLiquifyEXTRAFee = 0;\r\n            }\r\n        }\r\n        if (\r\n            token.overFee > 0 &&\r\n            IERC20(_token).balanceOf(address(this)) > _mintokenAmount\r\n        ) {\r\n            USDTToLiquifyOVERFee = USDTToLiquify.mul(token.overFee).div(\r\n                feeDenominator\r\n            );\r\n        }\r\n\r\n        //SEND FEES & BUY BACK TOKENS\r\n        if (USDTToLiquifyFeeAmount > 0 && !isFeeExempt[_deliveryAddress]) {\r\n            USDTToLiquify = USDTToLiquify.sub(USDTToLiquifyFeeAmount);\r\n            if (token.pixFee > 0) {\r\n                USDTToLiquifyFeeAmount = USDTToLiquifyFeeAmount.add(gasFee).add(\r\n                        USDTToLiquifyOVERFee\r\n                    );\r\n            }\r\n            if (token.pixFee == 0) {\r\n                USDTToLiquifyOVERFee = USDTToLiquifyOVERFee.add(gasFee);\r\n            }\r\n            if (\r\n                USDTToLiquifyEXTRAFee > 0 &&\r\n                generalBuyBack &&\r\n                _referralToken == buyBackToken\r\n            ) {\r\n                // RECORDS CURRENT BALANCE\r\n                beforeBuyback = IERC20(buyBackToken).balanceOf(address(this));\r\n\r\n                // BUY TOKENS\r\n                newSwap(\r\n                    RESERVE,\r\n                    buyBackToken,\r\n                    USDTToLiquifyEXTRAFee,\r\n                    0,\r\n                    WBNB,\r\n                    address(this),\r\n                    MAIN_ROUTER,\r\n                    true,\r\n                    false /* ,\r\n                    false */\r\n                );\r\n\r\n                // RECORDS NEW BALANCE\r\n                afterBuyback = IERC20(buyBackToken).balanceOf(address(this));\r\n                // IDENTIFIES BOUGHT AMOUNT\r\n                buybackAmount = afterBuyback.sub(beforeBuyback);\r\n                uint256 burnTokens = 0;\r\n\r\n                // BURN PROCESS IF THERE IS ANY\r\n                if (buybackPercentage > 0 && buybackAmount > 0) {\r\n                    // RECORDS AMOUNT TO BE BURNED\r\n                    burnTokens = buybackAmount.div(feeDenominator).mul(\r\n                        buybackPercentage\r\n                    );\r\n                    // BURN DESIRED AMOUNT\r\n                    IERC20(buyBackToken).transfer(address(DEAD), burnTokens);\r\n                    // IDENTIFIES NEW BALANCE\r\n                    afterBuyback = IERC20(buyBackToken).balanceOf(\r\n                        address(this)\r\n                    );\r\n                    // IDENTIFIES NEW BUYBACK AMOUNT\r\n                    buybackAmount = afterBuyback.sub(beforeBuyback);\r\n                    burnTokens = 0;\r\n                }\r\n\r\n                // CHECKS IF THERE IS ANY BALANCE TO BE SENT OUT\r\n                if (\r\n                    IERC20(buyBackToken).balanceOf(address(this)) >=\r\n                    buybackAmount\r\n                ) {\r\n                    // SEND BUYBACK TOKENS TO DIFFERENT ADDRESSES\r\n                    if (referrer != deliveryAddress && buybackAmount > 1) {\r\n                        buybackAmount = buybackAmount.div(2);\r\n                        IERC20(buyBackToken).transfer(\r\n                            address(deliveryAddress),\r\n                            buybackAmount\r\n                        );\r\n                        IERC20(buyBackToken).transfer(\r\n                            address(referrer),\r\n                            buybackAmount\r\n                        );\r\n                        // SET BUYBACK AMOUNT VARIABLE TO ORIGINAL VALUE\r\n                        buybackAmount = buybackAmount.mul(2);\r\n                    }\r\n                    // SEND BUYBACK TOKENS TO SAME ADDRESS AS REFERRER\r\n                    if (referrer == deliveryAddress && buybackAmount > 1) {\r\n                        IERC20(buyBackToken).transfer(\r\n                            address(deliveryAddress),\r\n                            buybackAmount\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            if (\r\n                USDTToLiquifyEXTRAFee > 0 &&\r\n                generalBuyBack &&\r\n                _referralToken != buyBackToken\r\n            ) {\r\n                // SETS BUYBACK AMOUNT\r\n                buybackBurnAmount = USDTToLiquifyEXTRAFee\r\n                    .div(feeDenominator)\r\n                    .mul(buybackPercentage);\r\n                // BUY & BURN BUYBACK TOKENS\r\n                newSwap(\r\n                    RESERVE,\r\n                    buyBackToken,\r\n                    buybackBurnAmount,\r\n                    0,\r\n                    WBNB,\r\n                    DEAD,\r\n                    MAIN_ROUTER,\r\n                    true,\r\n                    false /* ,\r\n                    false */\r\n                );\r\n                USDTToLiquifyEXTRAFee.sub(buybackBurnAmount);\r\n\r\n                // RECORDS CURRENT BALANCE\r\n                USDTToLiquifyEXTRAFee = USDTToLiquifyEXTRAFee.div(2);\r\n                beforeBuyback = IERC20(buyBackToken).balanceOf(address(this));\r\n                beforeReferral = IERC20(_referralToken).balanceOf(\r\n                    address(this)\r\n                );\r\n\r\n                // BUY TOKENS\r\n                newSwap(\r\n                    RESERVE,\r\n                    buyBackToken,\r\n                    USDTToLiquifyEXTRAFee,\r\n                    0,\r\n                    WBNB,\r\n                    _deliveryAddress,\r\n                    MAIN_ROUTER,\r\n                    true,\r\n                    false /* ,\r\n                    false */\r\n                );\r\n                newSwap(\r\n                    RESERVE,\r\n                    _referralToken,\r\n                    USDTToLiquifyEXTRAFee,\r\n                    0,\r\n                    WBNB,\r\n                    _referrer,\r\n                    MAIN_ROUTER,\r\n                    true,\r\n                    false /* ,\r\n                    false */\r\n                );\r\n\r\n                // RECORDS NEW BALANCE\r\n                afterBuyback = IERC20(buyBackToken).balanceOf(address(this));\r\n                afterReferral = IERC20(_referralToken).balanceOf(address(this));\r\n                // IDENTIFIES BOUGHT AMOUNT\r\n                buybackAmount = afterBuyback.sub(beforeBuyback);\r\n                referralAmount = afterReferral.sub(beforeReferral);\r\n                // CHECKS IF THERE IS ANY BALANCE TO BE SENT OUT\r\n                if (buybackAmount > 0) {\r\n                    IERC20(buyBackToken).transfer(\r\n                        address(deliveryAddress),\r\n                        buybackAmount\r\n                    );\r\n                }\r\n                if (referralAmount > 0) {\r\n                    IERC20(_referralToken).transfer(\r\n                        address(referrer),\r\n                        referralAmount\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // DELIVERY PROCESS STARTS HERE IF IT'S NOT BNB\r\n        if (_token != WBNB) {\r\n            uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\r\n            if (token.transferAfter) {\r\n                deliveryAddress = address(this);\r\n            }\r\n            if (balanceBefore < _mintokenAmount || _mintokenAmount == 0) {\r\n                uint256 minAmount = _mintokenAmount;\r\n                if (minAmount >= 3) {\r\n                    minAmount =\r\n                        (minAmount / slippageFactor) *\r\n                        slippageMultiplier;\r\n                }\r\n                newSwap(\r\n                    RESERVE,\r\n                    _token,\r\n                    USDTToLiquify,\r\n                    minAmount,\r\n                    token.path,\r\n                    deliveryAddress,\r\n                    _router,\r\n                    token.isV2Smart,\r\n                    token.isV3Smart\r\n                    /*       token.isLegacyV2 */\r\n                );\r\n\r\n                swapHasBeenDone = true;\r\n                if (deliveryAddress == _deliveryAddress) {\r\n                    totalAmountSent = _mintokenAmount;\r\n                }\r\n                uint256 balanceNow = IERC20(_token).balanceOf(address(this));\r\n                uint256 amountToBeSent = balanceNow.sub(balanceBefore);\r\n                if (\r\n                    balanceNow > balanceBefore &&\r\n                    deliveryAddress != _deliveryAddress\r\n                ) {\r\n                    IERC20(_token).transfer(\r\n                        address(_deliveryAddress),\r\n                        amountToBeSent\r\n                    );\r\n                    totalAmountSent = amountToBeSent;\r\n                }\r\n            } else if (\r\n                balanceBefore >= _mintokenAmount && _mintokenAmount > 0\r\n            ) {\r\n                feeAmount = _mintokenAmount.mul(token.totalFees).div(\r\n                    feeDenominator\r\n                );\r\n                amountToBeSentAfterFees = _mintokenAmount.sub(feeAmount);\r\n                IERC20(_token).transfer(\r\n                    address(_deliveryAddress),\r\n                    amountToBeSentAfterFees\r\n                );\r\n                totalAmountSent = amountToBeSentAfterFees;\r\n            }\r\n        }\r\n        // IF IT'S BNB, THE DELIVERY WILL HAPPEN HERE\r\n        if (_token == WBNB) {\r\n            newSwap(\r\n                RESERVE,\r\n                WBNB,\r\n                USDTToLiquify,\r\n                _mintokenAmount,\r\n                WBNB,\r\n                deliveryAddress,\r\n                _router,\r\n                token.isV2Smart,\r\n                false /* ,\r\n                false  */\r\n            );\r\n        }\r\n        beforeBuyback = 0;\r\n        afterBuyback = 0;\r\n        beforeReferral = 0;\r\n        afterReferral = 0;\r\n        buybackAmount = 0;\r\n        buybackBurnAmount = 0;\r\n        referralAmount = 0;\r\n    }\r\n\r\n    //HERE IS WHERE THE MAGIC HAPPENS\r\n    function criptoNoPix(\r\n        address _tokenAddress,\r\n        address _holder,\r\n        address _referral,\r\n        address _referralToken,\r\n        uint256 _amountInUSDT,\r\n        uint256 _mintokenAmount,\r\n        address _router,\r\n        uint256 _slippage\r\n    ) external {\r\n        require(_slippage <= slippageFactor, \"Slippage too high\");\r\n        slippageMultiplier = slippageFactor.sub(_slippage);\r\n        require(_isWorker[msg.sender], \"MSG SENDER is not a worker\");\r\n        require(\r\n            _amountInUSDT > 0 || _mintokenAmount > 0,\r\n            \"BOTH_AMOUNTS_CANNOT_BE_ZERO\"\r\n        );\r\n\r\n        require(_tokenAddress != _holder, \"DUPLICATED_ADDRESS\");\r\n        if (_tokenAddress == buyBackToken) {\r\n            uint256 amountUSDTToBuy = _amountInUSDT.mul(nixFeeNumeratorBNB).div(\r\n                feeDenominator\r\n            );\r\n\r\n            uint256 mintokenAmountToTransfer = _mintokenAmount\r\n                .mul(nixFeeNumeratorTokenAmount)\r\n                .div(feeDenominator);\r\n\r\n            uint256 minTokenAmountToBuy = _mintokenAmount.sub(\r\n                mintokenAmountToTransfer\r\n            );\r\n\r\n            if (\r\n                IERC20(buyBackToken).balanceOf(address(this)) >=\r\n                mintokenAmountToTransfer\r\n            ) {\r\n                PIXTransfer(buyBackToken, _holder, mintokenAmountToTransfer);\r\n                process(\r\n                    buyBackToken,\r\n                    _referralToken,\r\n                    _holder,\r\n                    _referral,\r\n                    amountUSDTToBuy,\r\n                    minTokenAmountToBuy,\r\n                    _router\r\n                );\r\n            } else {\r\n                process(\r\n                    buyBackToken,\r\n                    _referralToken,\r\n                    _holder,\r\n                    _referral,\r\n                    _amountInUSDT,\r\n                    _mintokenAmount,\r\n                    _router\r\n                );\r\n            }\r\n        } else {\r\n            process(\r\n                _tokenAddress,\r\n                _referralToken,\r\n                _holder,\r\n                _referral,\r\n                _amountInUSDT,\r\n                _mintokenAmount,\r\n                _router\r\n            );\r\n        }\r\n    }\r\n\r\n    function partnerNoPix(\r\n        address _partnerAddress,\r\n        uint256 _amountToTransfer\r\n    ) external {\r\n        require(_isWorker[msg.sender], \"Something is not right\");\r\n        require(_amountToTransfer > 0, \"AMOUNT_CANNOT_BE_ZERO\");\r\n        require(_partnerAddress != address(this), \"DUPLICATED_ADDRESS\");\r\n\r\n        PartnerInfo storage partner = partnerInfo[_partnerAddress];\r\n        require(partner.isPartner, \"NOT_A_PARTNER\");\r\n        require(msg.sender == partner.partnerWorker, \"NOT_A_WORKER\");\r\n        partner.totalTransfered = partner.totalTransfered.add(\r\n            _amountToTransfer\r\n        );\r\n        uint256 _amountToken = _amountToTransfer.mul(partner.partnerFee).div(\r\n            feeDenominator\r\n        );\r\n        uint256 _amountToPartner = _amountToTransfer.sub(_amountToken);\r\n        PIXTransfer(\r\n            partner.partnerTokenPreference,\r\n            _partnerAddress,\r\n            _amountToPartner\r\n        );\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function swap(\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMin,\r\n        address _path,\r\n        address _to,\r\n        address _router,\r\n        bool _isV2Smart,\r\n        bool _isV3Smart\r\n    ) external /*         bool _isLegacyV2 */\r\n    {\r\n        require(_isWorker[msg.sender], \"MSG.SENDER IS NOT A WORKER\");\r\n        newSwap(\r\n            _tokenIn,\r\n            _tokenOut,\r\n            _amountIn,\r\n            _amountOutMin,\r\n            _path,\r\n            _to,\r\n            _router,\r\n            _isV2Smart,\r\n            _isV3Smart\r\n            /*             _isLegacyV2 */\r\n        );\r\n    }\r\n\r\n    function newSwap(\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint256 _amountIn,\r\n        uint256 _amountOutMin,\r\n        address _path,\r\n        address _to,\r\n        address _router,\r\n        bool _isV2Smart,\r\n        bool _isV3Smart\r\n    )\r\n        internal\r\n        /*         bool _isLegacyV2 */\r\n        swapping\r\n    {\r\n        require(\r\n            _amountIn <= IERC20(RESERVE).balanceOf(address(this)),\r\n            \"INSUFFICIENT_RESERVE_AMOUNT\"\r\n        );\r\n\r\n        // SET UP ROUTER\r\n        router = IDEXRouter(_router);\r\n\r\n        //first we need to transfer the amount in tokens from the msg.sender to this contract\r\n        //this contract will have the amount of in tokens\r\n        // IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);\r\n\r\n        //next we need to allow the uniswapv2 router to spend the token we just sent to this contract\r\n        //by calling IERC20 approve you allow the uniswap contract to spend the tokens in this contract\r\n        if (IERC20(_tokenIn).allowance(address(this), _router) < _amountIn) {\r\n            require(\r\n                IERC20(_tokenIn).approve(_router, type(uint256).max),\r\n                \"TOKENSWAP::Approve failed\"\r\n            );\r\n        }\r\n\r\n        //path is an array of addresses.\r\n        //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\r\n        //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\r\n        address[] memory path;\r\n\r\n        if (_isV3Smart) {\r\n            // swapExactInputMulti\r\n            IERC20(_tokenIn).approve(address(router), _amountIn);\r\n\r\n            bytes memory pathV3 = abi.encodePacked(\r\n                bytes32(uint256(_tokenIn)),\r\n                bytes32(uint256(_path)),\r\n                bytes32(uint256(_tokenOut))\r\n            );\r\n\r\n            uint256 sendAmount = router.exactInput(\r\n                IV3SwapRouter.ExactInputParams({\r\n                    path: pathV3,\r\n                    recipient: address(this),\r\n                    amountIn: _amountIn,\r\n                    amountOutMinimum: _amountOutMin\r\n                })\r\n            );\r\n\r\n            IERC20(_tokenOut).transfer(_to, sendAmount);\r\n        }\r\n        /* else if (_isLegacyV2) {\r\n            // THE LEGACY IS HERE\r\n            path = new address[](3);\r\n            path[0] = _tokenIn;\r\n            path[1] = _path;\r\n            path[2] = _tokenOut;\r\n            //then we will call swapExactTokensForTokensSupportingFeeOnTransferTokens on LegacyRouter\r\n            //for the deadline we will pass in block.timestamp\r\n\r\n            legacyRouter = ILegacyRouter(_router);\r\n\r\n            legacyRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                _amountIn,\r\n                _amountOutMin,\r\n                path,\r\n                _to,\r\n                block.timestamp\r\n            );\r\n        } */\r\n        else if (_isV2Smart) {\r\n            if (_tokenOut == WBNB) {\r\n                path = new address[](2);\r\n                path[0] = _tokenIn;\r\n                path[1] = WBNB;\r\n                uint256 amountsOut = router.swapExactTokensForTokens(\r\n                    _amountIn,\r\n                    _amountOutMin,\r\n                    path,\r\n                    address(this)\r\n                );\r\n                IWETH9(WBNB).withdraw(amountsOut);\r\n                // pay the _to account with BNB\r\n                (bool tmpSuccess, ) = payable(_to).call{\r\n                    value: amountsOut,\r\n                    gas: 30000\r\n                }(\"\");\r\n                tmpSuccess = false;\r\n            } else if (_tokenOut == RESERVE) {\r\n                IERC20(RESERVE).transfer(address(_to), _amountIn);\r\n            } else {\r\n                path = new address[](3);\r\n                path[0] = _tokenIn;\r\n                path[1] = _path;\r\n                path[2] = _tokenOut;\r\n                //then we will call swapExactTokensForTokens\r\n                //for the deadline we will pass in block.timestamp\r\n                //the deadline is the latest time the trade is valid for\r\n                router.swapExactTokensForTokens(\r\n                    _amountIn,\r\n                    _amountOutMin,\r\n                    path,\r\n                    _to\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, uint256(-1));\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != uint256(-1)) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function withdrawBNB(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(safetyWitdrawReceiver).transfer(\r\n            (amountBNB * amountPercentage) / 100\r\n        );\r\n    }\r\n\r\n    function withdrawTokens(address _tokenAddress) external onlyOwner {\r\n        uint256 tokenBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        IERC20(_tokenAddress).transfer(\r\n            address(safetyWitdrawReceiver),\r\n            tokenBalance\r\n        );\r\n        emit AdminTokenRecovery(_tokenAddress, tokenBalance);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deliveryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PIXTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isV2Smart\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isV3Smart\",\"type\":\"bool\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountInUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"criptoNoPix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generalBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"halt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"haltIfNoBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyRouter\",\"outputs\":[{\"internalType\":\"contract ILegacyRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nixFeeNumeratorBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nixFeeNumeratorTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"partnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTransfered\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerTokenPreference\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partnerWorker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPartner\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"partnerNoPix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pixFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyWitdrawReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pixFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_transferAfter\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_buyBackToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_generalBuyBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_buybackPercentage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isV2Smart\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isV3Smart\",\"type\":\"bool\"}],\"name\":\"setGeneralInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nixFeeBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nixFeeToken\",\"type\":\"uint256\"}],\"name\":\"setNixFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partnerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_partnerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partnerTokenPreference\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isPartner\",\"type\":\"bool\"}],\"name\":\"setPartnerInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pixFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasFee\",\"type\":\"uint256\"}],\"name\":\"setPixFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pixFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_overFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_transferAfter\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_path\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isV2Smart\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isV3Smart\",\"type\":\"bool\"}],\"name\":\"setTokenInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_workerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_path\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isV2Smart\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isV3Smart\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pixFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"path\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferAfter\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isV2Smart\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isV3Smart\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PIXMonster", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://669ac4ba3adc7858fc69f4af15404e2436e070558ac35d15a6d1596f9d512431"}