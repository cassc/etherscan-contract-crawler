{"SourceCode": "{\"BCoinVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BEP20.sol\\\";\\r\\n\\r\\nabstract contract BCoinVesting is BEPOwnable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  // Address of BCOIN Token.\\r\\n  IBEP20 public bcoinToken;\\r\\n\\r\\n  // Starting timestamp of vesting\\r\\n  // Will be used as a starting point for all dates calculations.\\r\\n  // The first vesting will happen one month after this timestamp\\r\\n  uint256 public vestingStartAt;\\r\\n\\r\\n  // Vesting duration in seconds\\r\\n  uint256 public vestingDuration;\\r\\n\\r\\n  // Vesting cliff is one month\\r\\n  // 365*(60*60*24) / 12\\r\\n  uint256 internal constant SECONDS_PER_MONTH = 2628000;\\r\\n\\r\\n  // Percent of vested token which can be withraw per month;\\r\\n  uint256 internal percent_unlease_per_month;\\r\\n\\r\\n  // Beneficiary contains details of each beneficiary/investor\\r\\n  struct Beneficiary {\\r\\n    uint256 initialBalance;\\r\\n    uint256 monthsClaimed;\\r\\n    uint256 totalClaimed;\\r\\n  }\\r\\n\\r\\n  // beneficiaries tracks all beneficiary and store data in storage\\r\\n  mapping(address =\\u003e Beneficiary) public beneficiaries;\\r\\n\\r\\n  // Event raised on each successful withdraw.\\r\\n  event Claim(address beneficiary, uint256 amount, uint256 timestamp);\\r\\n\\r\\n  // Event raised on each desposit\\r\\n  event Deposit(address beneficiary, uint256 initialBalance, uint256 timestamp);\\r\\n\\r\\n  // @dev constructor creates the vesting contract\\r\\n  // @param _token Address of BCOIN token\\r\\n  // @param _owner Address of owner of this contract, a.k.a the CEO\\r\\n  // @param _vestingStartAt the starting timestamp of vesting , in seconds.\\r\\n  // @param _vestingDuration the duration since _vestingStartAt until the vesting ends, in months.\\r\\n  constructor(\\r\\n    address _token,\\r\\n    address _owner,\\r\\n    uint256 _vestingStartAt,\\r\\n    uint256 _vestingDuration\\r\\n  ) {\\r\\n    require(_token != address(0), \\\"zero-address\\\");\\r\\n    require(_owner != address(0), \\\"zero-address\\\");\\r\\n    bcoinToken = IBEP20(_token);\\r\\n    _transferOwnership(_owner);\\r\\n    vestingStartAt = _vestingStartAt;\\r\\n    vestingDuration = _vestingDuration;\\r\\n  }\\r\\n\\r\\n  // @dev addBeneficiary registers a beneficiary and deposit a\\r\\n  // corresponded amount of token for this beneficiary\\r\\n  //\\r\\n  // The owner can call this function many times to update\\r\\n  // (additionally desposit) the amount of token for this beneficiary\\r\\n  // @param _beneficiary Address of the beneficiary\\r\\n  // @param _amount Amount of token belongs to this beneficiary\\r\\n  function addBeneficiary(address _beneficiary, uint256 _amount) public onlyOwner {\\r\\n    //require(block.timestamp \\u003c vestingStartAt, \\\"not-update-after-vesting-started\\\");\\r\\n    require(_beneficiary != address(0), \\\"zero-address\\\");\\r\\n    // Based on ERC20 standard, to transfer funds to this contract,\\r\\n    // the owner must first call approve() to allow to transfer token to this contract.\\r\\n    require(bcoinToken.transferFrom(_msgSender(), address(this), _amount), \\\"cannot-transfer-token-to-this-contract\\\");\\r\\n\\r\\n    // update storage data\\r\\n    Beneficiary storage bf = beneficiaries[_beneficiary];\\r\\n    bf.initialBalance = bf.initialBalance.add(_amount);\\r\\n\\r\\n    emit Deposit(_beneficiary, bf.initialBalance, block.timestamp);\\r\\n  }\\r\\n\\r\\n  // @dev Claim withraws the vested token and sends beneficiary\\r\\n  // Only the owner or the beneficiary can call this function\\r\\n  // @param _beneficiary Address of the beneficiary\\r\\n  function claimVestedToken(address _beneficiary) public {\\r\\n    require(isOwner() || (_msgSender() == _beneficiary), \\\"must-be-onwer-or-beneficiary\\\");\\r\\n    uint256 monthsVestable;\\r\\n    uint256 tokenVestable;\\r\\n    (monthsVestable, tokenVestable) = calculateClaimable(_beneficiary);\\r\\n    require(tokenVestable \\u003e 0, \\\"nothing-to-be-vested\\\");\\r\\n\\r\\n    require(bcoinToken.transfer(_beneficiary, tokenVestable), \\\"fail-to-transfer-token\\\");\\r\\n\\r\\n    // update data in blockchain storage\\r\\n    Beneficiary storage bf = beneficiaries[_beneficiary];\\r\\n    bf.monthsClaimed = bf.monthsClaimed.add(monthsVestable);\\r\\n    bf.totalClaimed = bf.totalClaimed.add(tokenVestable);\\r\\n\\r\\n    emit Claim(_beneficiary, tokenVestable, block.timestamp);\\r\\n  }\\r\\n\\r\\n  // calculateWithrawable calculates the claimable token of the beneficiary\\r\\n  // claimable token each month is rounded if it is a decimal number\\r\\n  // So the rest of the token will be claimed on the last month (the duration is over)\\r\\n  // @param _beneficiary Address of the beneficiary\\r\\n  function calculateClaimable(address _beneficiary) private view returns (uint256, uint256) {\\r\\n    uint256 _now = block.timestamp;\\r\\n    if (_now \\u003c vestingStartAt) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    uint256 elapsedTime = _now.sub(vestingStartAt);\\r\\n    uint256 elapsedMonths = elapsedTime.div(SECONDS_PER_MONTH);\\r\\n\\r\\n    if (elapsedMonths \\u003c 1) {\\r\\n      return (0, 0);\\r\\n    }\\r\\n\\r\\n    Beneficiary storage bf = beneficiaries[_beneficiary];\\r\\n    require(bf.initialBalance \\u003e 0, \\\"beneficiary-not-found\\\");\\r\\n\\r\\n    // If over vesting duration, all tokens vested\\r\\n    if (elapsedMonths \\u003e= vestingDuration) {\\r\\n      uint256 remaining = bf.initialBalance.sub(bf.totalClaimed);\\r\\n      return (vestingDuration, remaining);\\r\\n    } else {\\r\\n      uint256 monthsVestable = elapsedMonths.sub(bf.monthsClaimed);\\r\\n      uint256 tokenVestedPerMonth = bf.initialBalance.div(vestingDuration);\\r\\n      uint256 tokenVestable = monthsVestable.mul(tokenVestedPerMonth);\\r\\n      return (monthsVestable, tokenVestable);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // view function to check status of a beneficiary\\r\\n  function getBeneficiary(address _beneficiary)\\r\\n    public\\r\\n    view\\r\\n    returns (\\r\\n      uint256 initialBalance,\\r\\n      uint256 monthsClaimed,\\r\\n      uint256 totalClaimed\\r\\n    )\\r\\n  {\\r\\n    Beneficiary storage bf = beneficiaries[_beneficiary];\\r\\n    require(bf.initialBalance \\u003e 0, \\\"beneficiary-not-found\\\");\\r\\n\\r\\n    return (bf.initialBalance, bf.monthsClaimed, bf.totalClaimed);\\r\\n  }\\r\\n}\\r\\n\"},\"BCoinVestingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./BCoinVesting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev PrivateSaleBCoinVesting will be blocked and release 10% each month.\\r\\n * Hence, the vestingDuration should be 10 months from the beginning.\\r\\n *\\r\\n */\\r\\ncontract PrivateSaleBCoinVesting is BCoinVesting {\\r\\n  constructor(\\r\\n    address _token,\\r\\n    address _owner,\\r\\n    uint256 _vestingStartAt\\r\\n  ) BCoinVesting(_token, _owner, _vestingStartAt, 10) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev TeamBCoinVesting will be blocked for 1 year,\\r\\n * then releaseed linearly each month during the next year.\\r\\n * Hence, the _vestingStartAt should delay 1 year\\r\\n * and the vestingDuration should be 12 months.\\r\\n *\\r\\n */\\r\\ncontract TeamBCoinVesting is BCoinVesting {\\r\\n  //uint256 private SECONDS_PER_YEAR = 31536000;\\r\\n  constructor(\\r\\n    address _token,\\r\\n    address _owner,\\r\\n    uint256 _vestingStartAt\\r\\n  ) BCoinVesting(_token, _owner, (_vestingStartAt + 31536000), 12) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev AdvisorBCoinVesting will be blocked for 1 year,\\r\\n * then releaseed linearly each month during the next year.\\r\\n * Hence, the _vestingStartAt should delay 1 year\\r\\n * and the vestingDuration should be 12 months.\\r\\n *\\r\\n */\\r\\ncontract AdvisorBCoinVesting is BCoinVesting {\\r\\n  //uint256 private SECONDS_PER_YEAR = 31536000;\\r\\n  constructor(\\r\\n    address _token,\\r\\n    address _owner,\\r\\n    uint256 _vestingStartAt\\r\\n  ) BCoinVesting(_token, _owner, (_vestingStartAt + 31536000), 12) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev DexLiquidityBCoinVesting will be blocked for 1 month,\\r\\n * then releaseed 5% each month during the next year.\\r\\n * Hence, the _vestingStartAt should delay 1 month\\r\\n * and the vestingDuration should be 20 months.\\r\\n *\\r\\n */\\r\\ncontract DexLiquidityBCoinVesting is BCoinVesting {\\r\\n  //uint256 private SECONDS_PER_MONTH = 2628000;\\r\\n  constructor(\\r\\n    address _token,\\r\\n    address _owner,\\r\\n    uint256 _vestingStartAt\\r\\n  ) BCoinVesting(_token, _owner, (_vestingStartAt + 2628000), 20) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev ReserveBCoinVesting will be blocked for 1 year,\\r\\n * then releaseed linearly each month during the next 2 year.\\r\\n * Hence, the _vestingStartAt should delay 1 year\\r\\n * and the vestingDuration should be 24 months.\\r\\n *\\r\\n */\\r\\ncontract ReserveBCoinVesting is BCoinVesting {\\r\\n  //uint256 private SECONDS_PER_YEAR = 31536000;\\r\\n  constructor(\\r\\n    address _token,\\r\\n    address _owner,\\r\\n    uint256 _vestingStartAt\\r\\n  ) BCoinVesting(_token, _owner, (_vestingStartAt + 31536000), 24) {}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev BCoinVestingFactory is the main and is the only contract should be deployed.\\r\\n * Notice: remember to config the Token address and approriate startAtTimeStamp\\r\\n */\\r\\ncontract BCoinVestingFactory {\\r\\n  // put the token address here\\r\\n  // This should be included in the contract for transparency\\r\\n  address public BCOIN_TOKEN_ADDRESS = 0x00e1656e45f18ec6747F5a8496Fd39B50b38396D;\\r\\n\\r\\n  // put the startAtTimeStamp here\\r\\n  // To test all contracts, change this timestamp to time in the past.\\r\\n  uint256 public startAtTimeStamp = 1632213361;\\r\\n\\r\\n  // address to track other information\\r\\n  address public owner;\\r\\n  address public privateSaleBCoinVesting;\\r\\n  address public teamBCoinVesting;\\r\\n  address public advisorBCoinVesting;\\r\\n  address public dexLiquidityBCoinVesting;\\r\\n  address public reserveBCoinVesting;\\r\\n\\r\\n  constructor() {\\r\\n    owner = msg.sender;\\r\\n\\r\\n    PrivateSaleBCoinVesting _privateSaleBCoinVesting = new PrivateSaleBCoinVesting(\\r\\n      BCOIN_TOKEN_ADDRESS,\\r\\n      owner,\\r\\n      startAtTimeStamp\\r\\n    );\\r\\n    privateSaleBCoinVesting = address(_privateSaleBCoinVesting);\\r\\n\\r\\n    TeamBCoinVesting _teamBCoinVesting = new TeamBCoinVesting(BCOIN_TOKEN_ADDRESS, owner, startAtTimeStamp);\\r\\n    teamBCoinVesting = address(_teamBCoinVesting);\\r\\n\\r\\n    AdvisorBCoinVesting _advisorBCoinVesting = new AdvisorBCoinVesting(BCOIN_TOKEN_ADDRESS, owner, startAtTimeStamp);\\r\\n    advisorBCoinVesting = address(_advisorBCoinVesting);\\r\\n\\r\\n    DexLiquidityBCoinVesting _dexLiquidityBCoinVesting = new DexLiquidityBCoinVesting(\\r\\n      BCOIN_TOKEN_ADDRESS,\\r\\n      owner,\\r\\n      startAtTimeStamp\\r\\n    );\\r\\n    dexLiquidityBCoinVesting = address(_dexLiquidityBCoinVesting);\\r\\n\\r\\n    ReserveBCoinVesting _reserveBCoinVesting = new ReserveBCoinVesting(BCOIN_TOKEN_ADDRESS, owner, startAtTimeStamp);\\r\\n    reserveBCoinVesting = address(_reserveBCoinVesting);\\r\\n  }\\r\\n}\\r\\n\"},\"BEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the BEP20 standard. Does not include\\r\\n * the optional functions; to access them see {BEP20Detailed}.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Subtraction cannot overflow.\\r\\n   *\\r\\n   * _Available since v2.4.0._\\r\\n   */\\r\\n  function sub(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a, errorMessage);\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   *\\r\\n   * _Available since v2.4.0._\\r\\n   */\\r\\n  function div(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    // Solidity only automatically asserts when dividing by 0\\r\\n    require(b \\u003e 0, errorMessage);\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * Reverts with custom message when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - The divisor cannot be zero.\\r\\n   *\\r\\n   * _Available since v2.4.0._\\r\\n   */\\r\\n  function mod(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b != 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract BEPContext {\\r\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n  // an instance of this contract, which should be used via inheritance.\\r\\n  constructor() {}\\r\\n\\r\\n  function _msgSender() internal view returns (address payable) {\\r\\n    return payable(msg.sender);\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view returns (bytes memory) {\\r\\n    this;\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract BEPOwnable is BEPContext {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the caller is the current owner.\\r\\n   */\\r\\n  function isOwner() public view returns (bool) {\\r\\n    return _msgSender() == _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public onlyOwner {\\r\\n    _transferOwnership(newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   */\\r\\n  function _transferOwnership(address newOwner) internal {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Pausable\\r\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\r\\n */\\r\\ncontract BEPPausable is BEPOwnable {\\r\\n  event Pause();\\r\\n  event Unpause();\\r\\n\\r\\n  bool public paused = false;\\r\\n\\r\\n  /**\\r\\n   * @dev modifier to allow actions only when the contract IS paused\\r\\n   */\\r\\n  modifier whenNotPaused() {\\r\\n    require(!paused);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev modifier to allow actions only when the contract IS NOT paused\\r\\n   */\\r\\n  modifier whenPaused() {\\r\\n    require(paused);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev called by the owner to pause, triggers stopped state\\r\\n   */\\r\\n  function pause() public onlyOwner whenNotPaused returns (bool) {\\r\\n    paused = true;\\r\\n    emit Pause();\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev called by the owner to unpause, returns to normal state\\r\\n   */\\r\\n  function unpause() public onlyOwner whenPaused returns (bool) {\\r\\n    paused = false;\\r\\n    emit Unpause();\\r\\n    return true;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IBEP20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {BEP20Mintable}.\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of BEP20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IBEP20-approve}.\\r\\n */\\r\\ncontract BEP20 is BEPContext, IBEP20, BEPPausable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n  mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n  uint256 private _totalSupply;\\r\\n\\r\\n  /**\\r\\n   * @dev See {IBEP20-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view override returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IBEP20-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IBEP20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) public virtual override whenNotPaused returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IBEP20-allowance}.\\r\\n   */\\r\\n  function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IBEP20-approve}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IBEP20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {BEP20};\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - `sender` and `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) public virtual override whenNotPaused returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(\\r\\n      sender,\\r\\n      _msgSender(),\\r\\n      _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\")\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IBEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {IBEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\\r\\n    _approve(\\r\\n      _msgSender(),\\r\\n      spender,\\r\\n      _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\")\\r\\n    );\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n   *\\r\\n   * This is internal function is equivalent to {transfer}, and can be used to\\r\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` cannot be the zero address.\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n    require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n    _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n    _balances[recipient] = _balances[recipient].add(amount);\\r\\n    emit Transfer(sender, recipient, amount);\\r\\n  }\\r\\n\\r\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n   * the total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `from` set to the zero address.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   */\\r\\n  function _mint(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n    _totalSupply = _totalSupply.add(amount);\\r\\n    _balances[account] = _balances[account].add(amount);\\r\\n    emit Transfer(address(0), account, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n   * total supply.\\r\\n   *\\r\\n   * Emits a {Transfer} event with `to` set to the zero address.\\r\\n   *\\r\\n   * Requirements\\r\\n   *\\r\\n   * - `account` cannot be the zero address.\\r\\n   * - `account` must have at least `amount` tokens.\\r\\n   */\\r\\n  function _burn(address account, uint256 amount) internal {\\r\\n    require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n    _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n    _totalSupply = _totalSupply.sub(amount);\\r\\n    emit Transfer(account, address(0), amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n   *\\r\\n   * This is internal function is equivalent to `approve`, and can be used to\\r\\n   * e.g. set automatic allowances for certain subsystems, etc.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n  function _approve(\\r\\n    address owner,\\r\\n    address spender,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n   * from the caller\\u0027s allowance.\\r\\n   *\\r\\n   * See {_burn} and {_approve}.\\r\\n   */\\r\\n  function _burnFrom(address account, uint256 amount) internal {\\r\\n    _burn(account, amount);\\r\\n    _approve(\\r\\n      account,\\r\\n      _msgSender(),\\r\\n      _allowances[account][_msgSender()].sub(amount, \\\"BEP20: burn amount exceeds allowance\\\")\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Optional functions from the BEP20 standard.\\r\\n */\\r\\nabstract contract BEP20Detailed {\\r\\n  string private _name;\\r\\n  string private _symbol;\\r\\n  uint8 private _decimals;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\r\\n   * these values are immutable: they can only be set once during\\r\\n   * construction.\\r\\n   */\\r\\n  constructor(\\r\\n    string memory name_,\\r\\n    string memory symbol_,\\r\\n    uint8 decimals_\\r\\n  ) {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n    _decimals = decimals_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the name of the token.\\r\\n   */\\r\\n  function name() public view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n   * name.\\r\\n   */\\r\\n  function symbol() public view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of decimals used to get its user representation.\\r\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n   *\\r\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n   * Ether and Wei.\\r\\n   *\\r\\n   * NOTE: This information is only used for _display_ purposes: it in\\r\\n   * no way affects any of the arithmetic of the contract, including\\r\\n   * {IBEP20-balanceOf} and {IBEP20-transfer}.\\r\\n   */\\r\\n  function decimals() public view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcoinToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"beneficiaries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimVestedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdvisorBCoinVesting", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000e1656e45f18ec6747f5a8496fd39b50b38396d000000000000000000000000050f559cd756ca09fc46988b6cf19ebf012562680000000000000000000000000000000000000000000000000000000061499971", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34aa8a76d6d2595a29f517a26f7ee5c747c11e9934e283e020b9e0137f465c56"}