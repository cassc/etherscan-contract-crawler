{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n// OpenZeppelin v4\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Snapshot\\n * @author Railgun Contributors\\n * @notice Governance contract for railgun, handles staking, voting power, and snapshotting\\n * @dev Snapshots cannot be taken during interval 0\\n * wait till interval 1 before utilising snapshots\\n */\\ncontract Staking {\\n  using SafeERC20 for IERC20;\\n\\n  // Constants\\n  uint256 public constant STAKE_LOCKTIME = 30 days;\\n  uint256 public constant SNAPSHOT_INTERVAL = 1 days;\\n\\n  // Staking token\\n  IERC20 public stakingToken;\\n\\n  // Time of deployment\\n  // solhint-disable-next-line var-name-mixedcase\\n  uint256 public immutable DEPLOY_TIME = block.timestamp;\\n\\n  // New stake screated\\n  event Stake(address indexed account, uint256 indexed stakeID, uint256 amount);\\n\\n  // Stake unlocked (coins removed from voting pool, 30 day delay before claiming is allowed)\\n  event Unlock(address indexed account, uint256 indexed stakeID);\\n\\n  // Stake claimed\\n  event Claim(address indexed account, uint256 indexed stakeID);\\n\\n  // Delegate claimed\\n  event Delegate(address indexed owner, address indexed _from, address indexed to, uint256 stakeID, uint256 amount);\\n\\n  // Total staked\\n  uint256 public totalStaked = 0;\\n\\n  // Snapshots for globals\\n  struct GlobalsSnapshot {\\n    uint256 interval;\\n    uint256 totalVotingPower;\\n    uint256 totalStaked;\\n  }\\n  GlobalsSnapshot[] private globalsSnapshots;\\n\\n  // Stake\\n  struct StakeStruct {\\n    address delegate; // Address stake voting power is delegated to\\n    uint256 amount; // Amount of tokens on this stake\\n    uint256 staketime; // Time this stake was created\\n    uint256 locktime; // Time this stake can be claimed (if 0, unlock hasn't been initiated)\\n    uint256 claimedTime; // Time this stake was claimed (if 0, stake hasn't been claimed)\\n  }\\n\\n  // Stake mapping\\n  // address => stakeID => stake\\n  mapping(address => StakeStruct[]) public stakes;\\n\\n  // Voting power for each account\\n  mapping(address => uint256) public votingPower;\\n\\n  // Snapshots for accounts\\n  struct AccountSnapshot {\\n    uint256 interval;\\n    uint256 votingPower;\\n  }\\n  mapping(address => AccountSnapshot[]) private accountSnapshots;\\n\\n  /**\\n   * @notice Sets staking token\\n   * @param _stakingToken - time to get interval of\\n   */\\n\\n  constructor(IERC20 _stakingToken) {\\n    stakingToken = _stakingToken;\\n\\n    // Use address 0 to store inverted totalVotingPower\\n    votingPower[address(0)] = type(uint256).max;\\n  }\\n\\n  /**\\n   * @notice Gets total voting power in system\\n   * @return totalVotingPower\\n   */\\n\\n  function totalVotingPower() public view returns (uint256) {\\n    return ~votingPower[address(0)];\\n  }\\n\\n  /**\\n   * @notice Gets length of stakes array for address\\n   * @param _account - address to retrieve stakes array of\\n   * @return length\\n   */\\n\\n  function stakesLength(address _account) external view returns (uint256) {\\n    return stakes[_account].length;\\n  }\\n\\n  /**\\n   * @notice Gets interval at time\\n   * @param _time - time to get interval of\\n   * @return interval\\n   */\\n\\n  function intervalAtTime(uint256 _time) public view returns (uint256) {\\n    require(_time >= DEPLOY_TIME, \\\"Staking: Requested time is before contract was deployed\\\");\\n    return (_time - DEPLOY_TIME) / SNAPSHOT_INTERVAL;\\n  }\\n\\n  /**\\n   * @notice Gets current interval\\n   * @return interval\\n   */\\n\\n  function currentInterval() public view returns (uint256) {\\n    return intervalAtTime(block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Returns interval of latest global snapshot\\n   * @return Latest global snapshot interval\\n   */\\n\\n  function latestGlobalsSnapshotInterval() public view returns (uint256) {\\n    if (globalsSnapshots.length > 0) {\\n      // If a snapshot exists return the interval it was taken\\n      return globalsSnapshots[globalsSnapshots.length - 1].interval;\\n    } else {\\n      // Else default to 0\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns interval of latest account snapshot\\n   * @param _account - account to get latest snapshot of\\n   * @return Latest account snapshot interval\\n   */\\n\\n  function latestAccountSnapshotInterval(address _account) public view returns (uint256) {\\n    if (accountSnapshots[_account].length > 0) {\\n      // If a snapshot exists return the interval it was taken\\n      return accountSnapshots[_account][accountSnapshots[_account].length - 1].interval;\\n    } else {\\n      // Else default to 0\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns length of snapshot array\\n   * @param _account - account to get snapshot array length of\\n   * @return Snapshot array length\\n   */\\n\\n  function accountSnapshotLength(address _account) external view returns (uint256) {\\n    return accountSnapshots[_account].length;\\n  }\\n\\n  /**\\n   * @notice Returns length of snapshot array\\n   * @return Snapshot array length\\n   */\\n\\n  function globalsSnapshotLength() external view returns (uint256) {\\n    return globalsSnapshots.length;\\n  }\\n\\n  /**\\n   * @notice Returns global snapshot at index\\n   * @param _index - account to get latest snapshot of\\n   * @return Globals snapshot\\n   */\\n\\n  function globalsSnapshot(uint256 _index) external view returns (GlobalsSnapshot memory) {\\n    return globalsSnapshots[_index];\\n  }\\n\\n  /**\\n   * @notice Returns account snapshot at index\\n   * @param _account - account to get snapshot of\\n   * @param _index - index to get snapshot at\\n   * @return Account snapshot\\n   */\\n  function accountSnapshot(address _account, uint256 _index) external view returns (AccountSnapshot memory) {\\n    return accountSnapshots[_account][_index];\\n  }\\n\\n  /**\\n   * @notice Checks if accoutn and globals snapshots need updating and updates\\n   * @param _account - Account to take snapshot for\\n   */\\n  function snapshot(address _account) internal {\\n    uint256 _currentInterval = currentInterval();\\n\\n    // If latest global snapshot is less than current interval, push new snapshot\\n    if(latestGlobalsSnapshotInterval() < _currentInterval) {\\n      globalsSnapshots.push(GlobalsSnapshot(\\n        _currentInterval,\\n        totalVotingPower(),\\n        totalStaked\\n      ));\\n    }\\n\\n    // If latest account snapshot is less than current interval, push new snapshot\\n    // Skip if account is 0 address\\n    if(_account != address(0) && latestAccountSnapshotInterval(_account) < _currentInterval) {\\n      accountSnapshots[_account].push(AccountSnapshot(\\n        _currentInterval,\\n        votingPower[_account]\\n      ));\\n    }\\n  }\\n\\n  /**\\n   * @notice Moves voting power in response to delegation or stake/unstake\\n   * @param _from - account to move voting power fom\\n   * @param _to - account to move voting power to\\n   * @param _amount - amount of voting power to move\\n   */\\n  function moveVotingPower(address _from, address _to, uint256 _amount) internal {\\n    votingPower[_from] -= _amount;\\n    votingPower[_to] += _amount;\\n  }\\n\\n  /**\\n   * @notice Updates vote delegation\\n   * @param _stakeID - stake to delegate\\n   * @param _to - address to delegate to\\n   */\\n\\n  function delegate(uint256 _stakeID, address _to) public {\\n    StakeStruct storage _stake = stakes[msg.sender][_stakeID];\\n\\n    require(\\n      _stake.staketime != 0,\\n      \\\"Staking: Stake doesn't exist\\\"\\n    );\\n\\n    require(\\n      _stake.locktime == 0,\\n      \\\"Staking: Stake unlocked\\\"\\n    );\\n\\n    require(\\n      _to != address(0),\\n      \\\"Staking: Can't delegate to 0 address\\\"\\n    );\\n\\n    if (_stake.delegate != _to) {\\n      // Check if snapshot needs to be taken\\n      snapshot(_stake.delegate); // From\\n      snapshot(_to); // To\\n\\n      // Move voting power to delegatee\\n      moveVotingPower(\\n        _stake.delegate,\\n        _to,\\n        _stake.amount\\n      );\\n\\n      // Emit event\\n      emit Delegate(msg.sender, _stake.delegate, _to, _stakeID, _stake.amount);\\n\\n      // Update delegation\\n      _stake.delegate = _to;\\n    }\\n  }\\n\\n  /**\\n   * @notice Delegates voting power of stake back to self\\n   * @param _stakeID - stake to delegate back to self\\n   */\\n\\n  function undelegate(uint256 _stakeID) external {\\n    delegate(_stakeID, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Gets global state at interval\\n   * @param _interval - interval to get state at\\n   * @return state\\n   */\\n\\n  function globalsSnapshotAtSearch(uint256 _interval) internal view returns (GlobalsSnapshot memory) {\\n    require(_interval <= currentInterval(), \\\"Staking: Interval out of bounds\\\");\\n\\n    // Index of element\\n    uint256 index;\\n\\n    // High/low for binary serach to find index\\n    // https://en.wikipedia.org/wiki/Binary_search_algorithm\\n    uint256 low = 0;\\n    uint256 high = globalsSnapshots.length;\\n\\n    while (low < high) {\\n      uint256 mid = Math.average(low, high);\\n\\n      // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n      // because Math.average rounds down (it does integer division with truncation).\\n      if (globalsSnapshots[mid].interval > _interval) {\\n        high = mid;\\n      } else {\\n        low = mid + 1;\\n      }\\n    }\\n\\n    // At this point `low` is the exclusive upper bound. Find the inclusive upper bounds and set to index\\n    if (low > 0 && globalsSnapshots[low - 1].interval == _interval) {\\n      return globalsSnapshots[low - 1];\\n    } else {\\n      index = low;\\n    }\\n\\n    // If index is equal to snapshot array length, then no update was made after the requested\\n    // snapshot interval. This means the latest value is the right one.\\n    if (index == globalsSnapshots.length) {\\n      return GlobalsSnapshot(\\n        _interval,\\n        totalVotingPower(),\\n        totalStaked\\n      );\\n    } else {\\n      return globalsSnapshots[index];\\n    }\\n  }\\n\\n  /**\\n   * @notice Gets global state at interval\\n   * @param _interval - interval to get state at\\n   * @param _hint - off-chain computed index of interval\\n   * @return state\\n   */\\n\\n  function globalsSnapshotAt(uint256 _interval, uint256 _hint) external view returns (GlobalsSnapshot memory) {\\n    require(_interval <= currentInterval(), \\\"Staking: Interval out of bounds\\\");\\n\\n    // Check if hint is correct, else fall back to binary search\\n    if (\\n      _hint <= globalsSnapshots.length\\n      && (_hint == 0 || globalsSnapshots[_hint - 1].interval < _interval)\\n      && (_hint == globalsSnapshots.length || globalsSnapshots[_hint].interval >= _interval)\\n    ) {\\n    // The hint is correct\\n      if (_hint < globalsSnapshots.length)\\n        return globalsSnapshots[_hint];\\n      else\\n        return GlobalsSnapshot (_interval, totalVotingPower(), totalStaked);\\n    } else return globalsSnapshotAtSearch (_interval);\\n  }\\n\\n\\n  /**\\n   * @notice Gets account state at interval\\n   * @param _account - account to get state for\\n   * @param _interval - interval to get state at\\n   * @return state\\n   */\\n  function accountSnapshotAtSearch(address _account, uint256 _interval) internal view returns (AccountSnapshot memory) {\\n    require(_interval <= currentInterval(), \\\"Staking: Interval out of bounds\\\");\\n\\n    // Get account snapshots array\\n    AccountSnapshot[] storage snapshots = accountSnapshots[_account];\\n\\n    // Index of element\\n    uint256 index;\\n\\n    // High/low for binary serach to find index\\n    // https://en.wikipedia.org/wiki/Binary_search_algorithm\\n    uint256 low = 0;\\n    uint256 high = snapshots.length;\\n\\n    while (low < high) {\\n      uint256 mid = Math.average(low, high);\\n\\n      // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n      // because Math.average rounds down (it does integer division with truncation).\\n      if (snapshots[mid].interval > _interval) {\\n        high = mid;\\n      } else {\\n        low = mid + 1;\\n      }\\n    }\\n\\n    // At this point `low` is the exclusive upper bound. Find the inclusive upper bounds and set to index\\n    if (low > 0 && snapshots[low - 1].interval == _interval) {\\n      return snapshots[low - 1];\\n    } else {\\n      index = low;\\n    }\\n\\n    // If index is equal to snapshot array length, then no update was made after the requested\\n    // snapshot interval. This means the latest value is the right one.\\n    if (index == snapshots.length) {\\n      return AccountSnapshot(\\n        _interval,\\n        votingPower[_account]\\n      );\\n    } else {\\n      return snapshots[index];\\n    }\\n  }\\n\\n\\n  /**\\n   * @notice Gets account state at interval\\n   * @param _account - account to get state for\\n   * @param _interval - interval to get state at\\n   * @param _hint - off-chain computed index of interval\\n   * @return state\\n   */\\n  function accountSnapshotAt(address _account, uint256 _interval, uint256 _hint) external view returns (AccountSnapshot memory) {\\n    require(_interval <= currentInterval(), \\\"Staking: Interval out of bounds\\\");\\n\\n    // Get account snapshots array\\n    AccountSnapshot[] storage snapshots = accountSnapshots[_account];\\n\\n    // Check if hint is correct, else fall back to binary search\\n    if (\\n      _hint <= snapshots.length\\n      && (_hint == 0 || snapshots[_hint - 1].interval < _interval)\\n      && (_hint == snapshots.length || snapshots[_hint].interval >= _interval)\\n    ) {\\n      // The hint is correct\\n      if (_hint < snapshots.length)\\n        return snapshots[_hint];\\n      else\\n        return AccountSnapshot(_interval, votingPower[_account]);\\n    } else return accountSnapshotAtSearch(_account, _interval);\\n  }\\n\\n  /**\\n   * @notice Stake tokens\\n   * @dev This contract should be approve()'d for _amount\\n   * @param _amount - Amount to stake\\n   * @return stake ID\\n   */\\n\\n  function stake(uint256 _amount) public returns (uint256) {\\n    // Check if amount is not 0\\n    require(_amount > 0, \\\"Staking: Amount not set\\\");\\n\\n    // Check if snapshot needs to be taken\\n    snapshot(msg.sender);\\n\\n    // Get stakeID\\n    uint256 stakeID = stakes[msg.sender].length;\\n\\n    // Set stake values\\n    stakes[msg.sender].push(StakeStruct(\\n      msg.sender,\\n      _amount,\\n      block.timestamp,\\n      0,\\n      0\\n    ));\\n\\n    // Increment global staked\\n    totalStaked += _amount;\\n\\n    // Add voting power\\n    moveVotingPower(\\n      address(0),\\n      msg.sender,\\n      _amount\\n    );\\n\\n    // Transfer tokens\\n    stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    // Emit event\\n    emit Stake(msg.sender, stakeID, _amount);\\n\\n    return stakeID;\\n  }\\n\\n  /**\\n   * @notice Unlock stake tokens\\n   * @param _stakeID - Stake to unlock\\n   */\\n\\n  function unlock(uint256 _stakeID) public {\\n    require(\\n      stakes[msg.sender][_stakeID].staketime != 0,\\n      \\\"Staking: Stake doesn't exist\\\"\\n    );\\n\\n    require(\\n      stakes[msg.sender][_stakeID].locktime == 0,\\n      \\\"Staking: Stake already unlocked\\\"\\n    );\\n\\n    // Check if snapshot needs to be taken\\n    snapshot(msg.sender);\\n\\n    // Set stake locktime\\n    stakes[msg.sender][_stakeID].locktime = block.timestamp + STAKE_LOCKTIME;\\n\\n    // Remove voting power\\n    moveVotingPower(\\n      stakes[msg.sender][_stakeID].delegate,\\n      address(0),\\n      stakes[msg.sender][_stakeID].amount\\n    );\\n\\n    // Emit event\\n    emit Unlock(msg.sender, _stakeID);\\n  }\\n\\n  /**\\n   * @notice Claim stake token\\n   * @param _stakeID - Stake to claim\\n   */\\n\\n  function claim(uint256 _stakeID) public {\\n    require(\\n      stakes[msg.sender][_stakeID].locktime != 0\\n      && stakes[msg.sender][_stakeID].locktime < block.timestamp,\\n      \\\"Staking: Stake not unlocked\\\"\\n    );\\n\\n    require(\\n      stakes[msg.sender][_stakeID].claimedTime == 0,\\n      \\\"Staking: Stake already claimed\\\"\\n    );\\n\\n    // Check if snapshot needs to be taken\\n    snapshot(msg.sender);\\n\\n    // Set stake claimed time\\n    stakes[msg.sender][_stakeID].claimedTime = block.timestamp;\\n\\n    // Decrement global staked\\n    totalStaked -= stakes[msg.sender][_stakeID].amount;\\n\\n    // Transfer tokens\\n    stakingToken.safeTransfer(\\n      msg.sender,\\n      stakes[msg.sender][_stakeID].amount\\n    );\\n\\n    // Emit event\\n    emit Claim(msg.sender, _stakeID);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1600\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPLOY_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNAPSHOT_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_LOCKTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"accountSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.AccountSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hint\",\"type\":\"uint256\"}],\"name\":\"accountSnapshotAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPower\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.AccountSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"accountSnapshotLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"globalsSnapshot\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.GlobalsSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hint\",\"type\":\"uint256\"}],\"name\":\"globalsSnapshotAt\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.GlobalsSnapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalsSnapshotLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"intervalAtTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"latestAccountSnapshotInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestGlobalsSnapshotInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeID\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "1600", "ConstructorArguments": "0000000000000000000000003f847b01d4d498a293e3197b186356039ecd737f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}