{"SourceCode": "{\"Mintingcoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n\\r\\nimport \\\"./Records.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function transfer(address to, uint256 _amount) external returns (bool);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function burn(uint256 _amount, address user) external returns(bool);\\r\\n    function mint(address _to, uint256 _amount,uint256 key,uint256 Dollor) external returns(bool); \\r\\n    function balanceOf(address account) external view returns (uint256); \\r\\n}\\r\\n\\r\\ninterface calling {\\r\\n    function called(address _to, uint256 _amount, uint256 _key,uint256 Dollor) external;\\r\\n    \\r\\n}\\r\\n\\r\\ncontract MintingCoin is IERC20, Records,calling{\\r\\n     string public name = \\\"METAHYPETOKEN\\\";   \\r\\n     string public symbol = \\\"MTH\\\";\\r\\n     uint8 public decimals = 18;\\r\\n    uint256 public totalSupply;\\r\\n    address public owner;\\r\\n    address private Adr;\\r\\n    uint256 public rate = 10;\\r\\n    \\r\\n\\r\\n    address public StrkingAddress;\\r\\n    \\r\\n    mapping(address =\\u003e uint256) public _balanceOf;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Burn(address indexed from, uint256 value);\\r\\n    \\r\\n    constructor() {\\r\\n     StrkingAddress = address(this);\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n    function mint(address _to, uint256 _amount, uint256 _key, uint256 Dollor) external override returns (bool) {\\r\\n        require(getKey() == _key,\\\"You\\u0027re not eligible for claim \\\");\\r\\n        require(balances[_to] \\u003e 0 , \\\"You must have atlest one Straked\\\");\\r\\n        require(msg.sender == StrkingAddress);\\r\\n\\r\\n        _balanceOf[_to] += _amount;\\r\\n        totalSupply += _amount;\\r\\n        mintingTokens[_to] += Dollor ;\\r\\n        require(balances[_to] * 3 \\u003e= mintingTokens[_to],\\\"You not claim upto 3X\\\");\\r\\n         if (balances[_to] * 3 \\u003c= mintingTokens[_to]) {\\r\\n            balances[_to] = 0;\\r\\n            mintingTokens[_to] = 0;\\r\\n        }\\r\\n   \\r\\n        \\r\\n        emit Transfer(address(0), _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setStrakingAddress(address add) external onlyOwner{\\r\\n        StrkingAddress = add;\\r\\n    }\\r\\n        function balanceOf(address user) public view override returns (uint256) {\\r\\n        return _balanceOf[user];\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _amount,address user) external override returns (bool) {\\r\\n        require(_amount \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(_balanceOf[user] \\u003e= _amount, \\\"Insufficient balance\\\");     \\r\\n        _balanceOf[user] -= _amount;\\r\\n        totalSupply -= _amount;\\r\\n        \\r\\n        emit Transfer(msg.sender, address(0), _amount);\\r\\n        emit Burn(user, _amount);\\r\\n        return true;\\r\\n    }\\r\\n    function setAdr(address adr)external onlyOwner{\\r\\n        Adr = adr;\\r\\n    }\\r\\n    \\r\\n    function transfer(address _to, uint256 _amount) external override returns (bool) {\\r\\n        require(_to != address(0), \\\"Invalid address\\\");\\r\\n        require(_amount \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(_balanceOf[msg.sender] \\u003e= _amount, \\\"Insufficient balance\\\");\\r\\n        _balanceOf[msg.sender] -= _amount;\\r\\n        _balanceOf[_to] += _amount;\\r\\n        \\r\\n        emit Transfer(msg.sender, _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\r\\n        require(_spender != address(0), \\\"Invalid address\\\");\\r\\n        \\r\\n        allowance[msg.sender][_spender] = _amount;\\r\\n        \\r\\n        emit Approval(msg.sender, _spender, _amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(address _from, address _to, uint256 _amount) external override returns (bool) {\\r\\n        require(_from != address(0), \\\"Invalid \\u0027from\\u0027 address\\\");\\r\\n        require(_to != address(0), \\\"Invalid \\u0027to\\u0027 address\\\");\\r\\n        require(_amount \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(_balanceOf[_from] \\u003e= _amount, \\\"Insufficient balance\\\");\\r\\n        require(allowance[_from][msg.sender] \\u003e= _amount, \\\"Allowance exceeded\\\");     \\r\\n        _balanceOf[_from] -= _amount;\\r\\n        _balanceOf[_to] += _amount;\\r\\n        allowance[_from][msg.sender] -= _amount;\\r\\n        \\r\\n        emit Transfer(_from, _to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n         function called(address _to, uint256 _amount, uint256 _key, uint256 Dollor) external override  {\\r\\n              require(_msgSender() == Adr,\\\"..\\\");\\r\\n               IERC20 token = IERC20(address(this));\\r\\n               token.mint(_to, _amount, _key, Dollor);         \\r\\n       }\\r\\n       function _mint(address to , uint256 amount)external onlyOwner{\\r\\n           _balanceOf[to] += amount;\\r\\n           totalSupply +=amount;\\r\\n       }\\r\\n         function SetRate(uint256 setrate)external onlyOwner{\\r\\n        rate = setrate;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"},\"nftstake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Records.sol\\\";\\r\\nimport \\\"./Mintingcoin.sol\\\";\\r\\n\\r\\n\\r\\ncontract NFTStraking is Records, MintingCoin {\\r\\n\\r\\n    IERC20 public usdtToken;\\r\\n    mapping(address =\\u003e uint256) public lastUpdateTime;\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event claim_(address indexed user, uint256 amount, uint256 rewards);\\r\\n\\r\\n    uint256 public dailyRewardPercentage = 5;\\r\\n      bool public FreezClaim = true;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    uint256 public Volt1Percentage = 90;\\r\\n    uint256 public Volt2Percentage = 10;\\r\\n    address private volt1Address ;\\r\\n    address private volt2Address;\\r\\n\\r\\n    address public tokenContract;\\r\\n\\r\\n\\r\\n    struct CustomerRecord {\\r\\n        uint256 totalVotes;\\r\\n        uint256 TotalNFTStaking;\\r\\n        uint256 totalPoints;\\r\\n        mapping(uint256 =\\u003e bool) votedTopics;\\r\\n    }\\r\\n    \\r\\n    mapping(address =\\u003e CustomerRecord) public customerRecords;\\r\\n\\r\\n    event Voted(address indexed voter, uint256 topicId, bool vote);\\r\\n\\r\\n    struct VoteRecord {\\r\\n        uint256 startDate;\\r\\n        uint256 endDate;\\r\\n        uint256 totalYes;\\r\\n        uint256 totalNo;\\r\\n        bool finish;\\r\\n    }\\r\\n\\r\\n\\r\\n    mapping(uint256 =\\u003e VoteRecord) public voteRecords;\\r\\n\\r\\n    constructor(address _usdtToken) {\\r\\n        usdtToken = IERC20(_usdtToken);\\r\\n        tokenContract = address(this);\\r\\n    }\\r\\n\\r\\n\\r\\n    function BuyNFT(uint256 _amount) external {\\r\\n        require(_amount \\u003e 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(_amount % 100 == 0 ,\\\"Amount must be multiple of 100\\\");\\r\\n        usdtToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        balances[msg.sender] += _amount;\\r\\n        customerRecords[msg.sender].TotalNFTStaking += _amount;\\r\\n        lastUpdateTime[msg.sender] = block.timestamp;\\r\\n        VoltTransfer(_amount);\\r\\n        emit Staked(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function Check_Claim_Amount(address staked) public  view returns (uint256 reward){\\r\\n        require(!FreezClaim,\\\"At a movement claim is stop by the deployer\\\");\\r\\n        require(balances[staked] * 3 \\u003e= mintingTokens[staked]);\\r\\n        uint256 stakedAmount = balances[staked];\\r\\n        if(stakedAmount == 0){\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 add;\\r\\n        uint256 stakingDays = (block.timestamp - lastUpdateTime[staked]) /\\r\\n            1 days;\\r\\n        uint256 rewards = (stakedAmount * 5) / 1000;\\r\\n\\r\\n        if (block.timestamp - lastUpdateTime[staked] \\u003e 1 days) {\\r\\n            for (uint256 i = 0; i \\u003c stakingDays; i++) {\\r\\n                add += rewards;\\r\\n                add += (add * 5) / 1000;\\r\\n                if (balances[staked] * 3 \\u003c= add) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            return add *  rate;\\r\\n        } else if (block.timestamp - lastUpdateTime[staked] == 1 days) {\\r\\n            return rewards * rate;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\nfunction claim() external {\\r\\n    require(!FreezClaim,\\\"At a movement claim is stop by the deployer\\\");\\r\\n    uint256 stakedAmount = balances[msg.sender];\\r\\n    require(stakedAmount \\u003e 0, \\\"No staked amount\\\");\\r\\n    require( balances[msg.sender] * 3 \\u003e= mintingTokens[msg.sender], \\\"Already received 3x rewards\\\");\\r\\n    require( block.timestamp - lastUpdateTime[msg.sender] \\u003e= 1 days, \\\"Can only claim once per day\\\");\\r\\n\\r\\n\\r\\n        IERC20(tokenContract).mint(msg.sender,Check_Claim_Amount(msg.sender), getKey(),Check_Claim_Amount(msg.sender)/rate);\\r\\n\\r\\n\\r\\n        lastUpdateTime[msg.sender] = block.timestamp;\\r\\n        emit claim_(msg.sender, stakedAmount,Check_Claim_Amount(msg.sender));\\r\\n    }\\r\\n\\r\\n\\r\\n    function createVote(uint256 _voteId,uint256 _startDate, uint256 _endDate ) external {\\r\\n        require(msg.sender == Owner(), \\\"Only the owner can create votes\\\");\\r\\n        voteRecords[_voteId].startDate = _startDate;\\r\\n        voteRecords[_voteId].endDate = _endDate;\\r\\n        voteRecords[_voteId].finish = false;\\r\\n    }\\r\\n\\r\\n    function setFinishVote(uint256 _voteId, bool setFinish) external {\\r\\n        require(msg.sender == Owner(),\\\"Only Owner can wants to finish the voting\\\");\\r\\n        voteRecords[_voteId].finish = setFinish;\\r\\n    }\\r\\n\\r\\n    function vote(uint256 _voteId, bool _vote) external {\\r\\n        require(!voteRecords[_voteId].finish, \\\"Owner already finish the voting\\\");\\r\\n        require(  block.timestamp \\u003e= voteRecords[_voteId].startDate, \\\"Voting has not started\\\");\\r\\n        require(block.timestamp \\u003c= voteRecords[_voteId].endDate,\\\"Voting has ended\\\" );\\r\\n        require(balances[msg.sender] \\u003e= 100 * 10**18,\\\"Insufficient balance to vote\\\" );\\r\\n        require( !customerRecords[msg.sender].votedTopics[_voteId], \\\"Already voted for this topic\\\" );\\r\\n        uint256 usdtBalance = balances[msg.sender];\\r\\n        uint256 points = usdtBalance / (100 * 10**18);\\r\\n        customerRecords[msg.sender].totalVotes += 1;\\r\\n        customerRecords[msg.sender].totalPoints += points;\\r\\n        customerRecords[msg.sender].votedTopics[_voteId] = _vote;\\r\\n        if (_vote) {\\r\\n            voteRecords[_voteId].totalYes += points;\\r\\n        } \\r\\n        else {\\r\\n            voteRecords[_voteId].totalNo += points;\\r\\n        }\\r\\n        emit Voted(msg.sender, _voteId, _vote);\\r\\n    }\\r\\n\\r\\n    function getCustomerRecord(address _customer) external view returns (uint256 totalVotes,uint256 totalPoints,uint256 totalStaked,bool Staking)\\r\\n    {\\r\\n        totalVotes = customerRecords[_customer].totalVotes;\\r\\n        totalPoints = customerRecords[_customer].totalPoints;\\r\\n        totalStaked = customerRecords[_customer].TotalNFTStaking;\\r\\n        uint256 amount = customerRecords[_customer].TotalNFTStaking;\\r\\n        if(amount \\u003e 0 ) {\\r\\n          Staking = true;\\r\\n        }\\r\\n        else {\\r\\n            \\r\\n             Staking = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getVoteRecord(uint256 _voteId) external view  returns ( uint256 startDate, uint256 endDate,uint256 totalYes, uint256 totalNo\\r\\n        )\\r\\n    {\\r\\n        startDate = voteRecords[_voteId].startDate;\\r\\n        endDate = voteRecords[_voteId].endDate;\\r\\n        totalYes = voteRecords[_voteId].totalYes;\\r\\n        totalNo = voteRecords[_voteId].totalNo;\\r\\n    }\\r\\n\\r\\n   function setVoltAddress(address volt1,address volt2) external onlyOwner{\\r\\n       volt1Address = volt1;\\r\\n       volt2Address = volt2;\\r\\n}\\r\\n\\r\\n    function setVoltpercentage(uint256  _volt1, uint256 _volt2) external  onlyOwner{  \\r\\n        require( msg.sender == Owner(),\\\"Only owner can set the percentage of volt\\\");\\r\\n        require( _volt1 \\u003c 100 \\u0026\\u0026 _volt2 \\u003c 100,\\\"Percentage must be under the value of 100\\\");\\r\\n        require( _volt1 + _volt2 == 100,\\\"Provide the valid percentage of volt1 and volt2 both sum equal to 100\\\");\\r\\n        Volt1Percentage = _volt1;\\r\\n        Volt2Percentage = _volt2;\\r\\n    }\\r\\n\\r\\n\\r\\n    function VoltTransfer(uint256 amount) internal {\\r\\n        uint256 voli1Amount = (amount * Volt1Percentage) / 100;\\r\\n        uint256 voli2Amount = (amount * Volt2Percentage) / 100;\\r\\n        usdtToken.transfer(volt1Address, voli1Amount);\\r\\n        usdtToken.transfer(volt2Address, voli2Amount);\\r\\n    }\\r\\n    function _FreezClaim(bool status)external onlyOwner{\\r\\n        FreezClaim = status;\\r\\n\\r\\n    }\\r\\n}\"},\"Records.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; \\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    function Owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(Owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Records is Ownable{\\r\\n     uint256 private key;\\r\\n     mapping(address =\\u003e uint256) public balances;\\r\\n     mapping(address =\\u003e uint256) public mintingTokens;\\r\\n\\r\\n     function setKey(uint256 _key)external onlyOwner{\\r\\n    key = _key;\\r\\n     }\\r\\n\\r\\n    function getKey()internal view returns(uint256) {\\r\\n        return key;\\r\\n\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topicId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"claim_\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staked\",\"type\":\"address\"}],\"name\":\"Check_Claim_Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FreezClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setrate\",\"type\":\"uint256\"}],\"name\":\"SetRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StrkingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Volt1Percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Volt2Percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"_FreezClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Dollor\",\"type\":\"uint256\"}],\"name\":\"called\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endDate\",\"type\":\"uint256\"}],\"name\":\"createVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"customerRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalNFTStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customer\",\"type\":\"address\"}],\"name\":\"getCustomerRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Staking\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"}],\"name\":\"getVoteRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Dollor\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setAdr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setFinish\",\"type\":\"bool\"}],\"name\":\"setFinishVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"setKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setStrakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"volt1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"volt2\",\"type\":\"address\"}],\"name\":\"setVoltAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_volt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volt2\",\"type\":\"uint256\"}],\"name\":\"setVoltpercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voteRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNo\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finish\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTStraking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1b39df644b6813746b58489f83832c5200cba765f92d17962e2b80942b3583d6"}