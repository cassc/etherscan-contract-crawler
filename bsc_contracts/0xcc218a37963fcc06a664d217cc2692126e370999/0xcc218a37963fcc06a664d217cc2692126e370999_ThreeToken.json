{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity =0.8.19;\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferUSDT(address to, uint256 amount) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n}\r\n\r\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\naddress constant GalaxyX = 0x61b9FfF841759c699528a6c69A8D09fE6eD13991;\r\naddress constant DISCOVER = 0xbA773a1D26b2be5F2D923E8D5a5B31717FEB3991;\r\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\nuint256 constant lpfee = 19; //lp\u5206\u7ea2\u624b\u7eed\u8d39\r\nuint256 constant marketFee = 11; //\u8425\u9500\u624b\u7eed\u8d39\r\nuint256 constant burnFee = 9; //\u9500\u6bc1\u624b\u7eed\u8d39\r\n\r\naddress constant marketAddr1 = 0x4Ef4313cEd28C83fb62F44b1681cB3a10950AF43; //\u8425\u9500\u5730\u5740\r\naddress constant marketAddr2 = 0x1EA748e1ba6BFFEcad7f13bAe6fbdcf29c70462B; //\u8425\u9500\u5730\u5740\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ExcludedFromFeeList is Ownable {\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(\r\n        address[] calldata accounts\r\n    ) public onlyOwner {\r\n        uint256 len = uint256(accounts.length);\r\n        for (uint256 i = 0; i < len; ) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        balanceOf[from] -= amount;\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ncontract Distributor {\r\n    function transferUSDT(address to, uint256 amount) external {\r\n        IERC20(USDT).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract DexBaseUSDT {\r\n    bool public inisSwap;\r\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\r\n    address public immutable uniswapV2Pair;\r\n    Distributor public immutable distributor;\r\n    modifier isSwap() {\r\n        inisSwap = true;\r\n        _;\r\n        inisSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            USDT\r\n        );\r\n        distributor = new Distributor();\r\n    }\r\n}\r\n\r\nabstract contract LpFee is Ownable, DexBaseUSDT, ERC20 {\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isInShareholders;\r\n    uint256 public minPeriod = 5 minutes;\r\n    uint256 public lastLPFeefenhongTime;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 distributorGasForLp = 600000;\r\n    address[] public shareholders;\r\n    uint256 currentIndex;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public liqValue;\r\n    uint256 public minDistribution;\r\n\r\n    uint256 public numTokensSellToAddToLiquidity = 0.9 ether;\r\n\r\n    constructor(uint256 _minDistribution) {\r\n        minDistribution = _minDistribution;\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n        IERC20(USDT).approve(address(uniswapV2Router), type(uint256).max);\r\n    }\r\n\r\n    function excludeFromDividend(address account) external onlyOwner {\r\n        isDividendExempt[account] = true;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setDistributorGasForLp(uint256 _distributorGasForLp) external {\r\n        distributorGasForLp = _distributorGasForLp;\r\n    }\r\n\r\n    function _takelpFee(\r\n        address sender,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 lpAmount = (amount * (lpfee + burnFee + marketFee)) / 1000;\r\n        super._transfer(sender, address(this), lpAmount);\r\n        return lpAmount;\r\n    }\r\n\r\n    function setToUsersLp(address sender, address recipient) internal {\r\n        if (fromAddress == address(0)) fromAddress = sender;\r\n        if (toAddress == address(0)) toAddress = recipient;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)\r\n            setShare(fromAddress);\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)\r\n            setShare(toAddress);\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n    }\r\n\r\n    function dividendToUsersLp(address sender) internal {\r\n        if (\r\n            IERC20(DISCOVER).balanceOf(address(this)) >= minDistribution &&\r\n            sender != address(this) &&\r\n            lastLPFeefenhongTime + minPeriod <= block.timestamp\r\n        ) {\r\n            processLp(distributorGasForLp);\r\n            lastLPFeefenhongTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (isInShareholders[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n        } else {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n            addShareholder(shareholder);\r\n            isInShareholders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        address lastLPHolder = shareholders[shareholders.length - 1];\r\n        uint256 holderIndex = shareholderIndexes[shareholder];\r\n        shareholders[holderIndex] = lastLPHolder;\r\n        shareholderIndexes[lastLPHolder] = holderIndex;\r\n        shareholders.pop();\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        isInShareholders[shareholder] = false;\r\n    }\r\n\r\n    function processLp(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(DISCOVER).balanceOf(address(this));\r\n        uint256 nowbananc2 = IERC20(GalaxyX).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            address theHolder = shareholders[currentIndex];\r\n            uint256 amount;\r\n            uint256 amount2;\r\n            uint256 percent = (100_000 *\r\n                (IERC20(uniswapV2Pair).balanceOf(theHolder))) /\r\n                theLpTotalSupply;\r\n            unchecked {\r\n                amount = (nowbanance * percent) / 100_000;\r\n                amount2 = (nowbananc2 * percent) / 100_000;\r\n            }\r\n            if (amount > 0) {\r\n                IERC20(DISCOVER).transfer(theHolder, amount);\r\n            }\r\n            if (amount2 > 0) {\r\n                IERC20(GalaxyX).transfer(theHolder, amount2);\r\n            }\r\n            unchecked {\r\n                ++currentIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n    }\r\n\r\n    function shouldSwapAndLiquify(address sender) internal view returns (bool) {\r\n        uint256 contractTokenBalance = balanceOf[address(this)];\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (overMinTokenBalance && !inisSwap && sender != uniswapV2Pair) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractToken) internal isSwap {\r\n        swapTokensForUSDT(contractToken);\r\n    }\r\n\r\n    function swapTokensForUSDT(uint256 tokenAmount) internal {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(USDT);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(distributor),\r\n            block.timestamp\r\n        );\r\n        uint256 amount = IERC20(USDT).balanceOf(address(distributor));\r\n\r\n        // split the contract balance into halves\r\n        uint256 totalFee = (lpfee + burnFee + marketFee);\r\n        uint256 contractToMarket = (amount * marketFee) / totalFee;\r\n        uint256 contractToLast = amount - contractToMarket;\r\n\r\n        uint256 toM1 = contractToMarket / 2;\r\n        uint256 toM2 = contractToMarket - toM1;\r\n        (distributor).transferUSDT(marketAddr1, toM1);\r\n        (distributor).transferUSDT(marketAddr2, toM2);\r\n        (distributor).transferUSDT(address(this), contractToLast);\r\n    }\r\n\r\n    function swapTokensForGalaxyX(uint256 tokenAmount) internal {\r\n        uint256 balanceBefore = IERC20(GalaxyX).balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(USDT);\r\n        path[1] = address(GalaxyX);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 balanceNow = IERC20(GalaxyX).balanceOf(address(this));\r\n        uint256 swapAmount = balanceNow - balanceBefore;\r\n        uint256 toBurn = swapAmount / 3;\r\n        IERC20(GalaxyX).transfer(address(0xdead), toBurn);\r\n    }\r\n\r\n    function swapTokensForDISCOVER(uint256 tokenAmount) internal {\r\n        uint256 balanceBefore = IERC20(DISCOVER).balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(USDT);\r\n        path[1] = address(DISCOVER);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint256 balanceNow = IERC20(DISCOVER).balanceOf(address(this));\r\n        uint256 swapAmount = balanceNow - balanceBefore;\r\n        uint256 toBurn = swapAmount / 3;\r\n        IERC20(DISCOVER).transfer(address(0xdead), toBurn);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract MaxHave is Ownable {\r\n    uint256 public _maxHavAmount = type(uint256).max;\r\n    mapping(address => bool) public isHavLimitExempt;\r\n\r\n    constructor(uint256 _maxHav) {\r\n        _maxHavAmount = _maxHav;\r\n        isHavLimitExempt[msg.sender] = true;\r\n        isHavLimitExempt[address(this)] = true;\r\n        isHavLimitExempt[address(0)] = true;\r\n        isHavLimitExempt[address(0xdead)] = true;\r\n    }\r\n\r\n    function setMaxHavAmount() external onlyOwner {\r\n        _maxHavAmount = type(uint256).max;\r\n    }\r\n\r\n    function setIsHavLimitExempt(\r\n        address holder,\r\n        bool havExempt\r\n    ) external onlyOwner {\r\n        isHavLimitExempt[holder] = havExempt;\r\n    }\r\n}\r\n\r\ncontract ThreeToken is ExcludedFromFeeList, LpFee, MaxHave {\r\n    uint256 private constant _totalSupply = 999 ether;\r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTimestamp;\r\n    uint256 public minHave = 1 ether;\r\n    uint256 public minAddLiq = 1 ether;\r\n    uint256 public minSellAmount = 100 ether;\r\n\r\n    function setminSellAmount(uint256 _minSellAmount) external onlyOwner {\r\n        minSellAmount = _minSellAmount;\r\n    }\r\n\r\n    function setminAddLiq(uint256 _minAddLiq) external onlyOwner {\r\n        minAddLiq = _minAddLiq;\r\n    }\r\n\r\n    constructor() ERC20(\"MGS\", \"MGS\", 18) LpFee(0.01 ether) MaxHave(4 ether) {\r\n        require(USDT < address(this));\r\n        isHavLimitExempt[uniswapV2Pair] = true;\r\n        _mint(msg.sender, _totalSupply);\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n    }\r\n\r\n    function shouldTakeFee(\r\n        address sender,\r\n        address recipient\r\n    ) internal view returns (bool) {\r\n        if (recipient == uniswapV2Pair || sender == uniswapV2Pair) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _isAddLiquidity(\r\n        address _sender\r\n    ) internal view returns (bool isAdd) {\r\n        if (_sender == uniswapV2Pair) {\r\n            return false;\r\n        }\r\n        ISwapPair mainPair = ISwapPair(uniswapV2Pair);\r\n        (uint r0, , ) = mainPair.getReserves();\r\n        uint bal = IERC20(USDT).balanceOf(address(mainPair));\r\n        isAdd = bal >= (r0 + minAddLiq);\r\n    }\r\n\r\n    function _isRemoveLiquidity(\r\n        address _recipient\r\n    ) internal view returns (bool isRemove) {\r\n        if (_recipient == uniswapV2Pair) {\r\n            return false;\r\n        }\r\n        ISwapPair mainPair = ISwapPair(uniswapV2Pair);\r\n        (uint r0, , ) = mainPair.getReserves();\r\n        uint bal = IERC20(USDT).balanceOf(address(mainPair));\r\n        isRemove = r0 > bal;\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 divLp = _takelpFee(sender, amount);\r\n        return amount - divLp;\r\n    }\r\n\r\n    function launched() internal view returns (bool) {\r\n        return launchedAt != 0;\r\n    }\r\n\r\n    function launch() internal {\r\n        require(launchedAt == 0, \"Already launched boi\");\r\n        launchedAt = block.number;\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        //swap to dividend\r\n        if (inisSwap) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        if (launchedAt == 0 && recipient == uniswapV2Pair) {\r\n            require(_isExcludedFromFee[sender]);\r\n            launch();\r\n        }\r\n\r\n        setToUsersLp(sender, recipient);\r\n\r\n        if (!_isExcludedFromFee[recipient]) {\r\n            require(\r\n                balanceOf[recipient] + amount <= _maxHavAmount ||\r\n                    isHavLimitExempt[recipient],\r\n                \"HAV Limit Exceeded\"\r\n            );\r\n        }\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender);\r\n            return;\r\n        }\r\n\r\n        if (_isAddLiquidity(sender)) {\r\n            require(msg.sender == ROUTER, \"only router\");\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender);\r\n            liqValue[sender] += amount;\r\n            return;\r\n        }\r\n\r\n        if (_isRemoveLiquidity(recipient)) {\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender);\r\n            liqValue[recipient] -= amount;\r\n            return;\r\n        }\r\n\r\n        if (sender != uniswapV2Pair) {\r\n            require(balanceOf[sender] >= minHave, \"at least 1 coin\");\r\n            if (amount > balanceOf[sender] - minHave)\r\n                amount = balanceOf[sender] - minHave;\r\n        }\r\n\r\n        if (shouldSwapAndLiquify(msg.sender)) {\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n        }\r\n\r\n        if (shouldTakeFee(sender, recipient)) {\r\n            uint256 transferAmount = takeFee(sender, amount);\r\n            super._transfer(sender, recipient, transferAmount);\r\n            //dividend token\r\n            dividendToUsersLp(sender);\r\n            airdrop(sender, recipient, transferAmount);\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n            dividendToUsersLp(sender);\r\n            return;\r\n        }\r\n    }\r\n\r\n    function sellTokenToLpHolders() external {\r\n        if (shouldSwapAndLiquify(msg.sender))\r\n            swapAndLiquify(numTokensSellToAddToLiquidity);\r\n    }\r\n\r\n    function sellUSDTToLpHolders() external {\r\n        uint256 accu = IERC20(USDT).balanceOf(address(this));\r\n        if (accu >= minSellAmount) {\r\n            uint256 half = minSellAmount / 2;\r\n            swapTokensForGalaxyX(half);\r\n            swapTokensForDISCOVER(half);\r\n        }\r\n    }\r\n\r\n    function airdrop(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 num = 3;\r\n        uint256 seed = (uint160(block.timestamp)) ^\r\n            (uint160(sender) ^ uint160(recipient)) ^\r\n            (uint160(amount));\r\n\r\n        address airdropAddress;\r\n        for (uint256 i; i < num; ) {\r\n            airdropAddress = address(uint160(seed));\r\n            unchecked {\r\n                balanceOf[airdropAddress] += 1;\r\n            }\r\n            emit Transfer(address(0), airdropAddress, 1);\r\n            unchecked {\r\n                ++i;\r\n                seed = seed >> 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    struct Users {\r\n        address account;\r\n        uint256 bal;\r\n    }\r\n\r\n    function multiTransfer(Users[] calldata users) external onlyOwner {\r\n        address from = msg.sender;\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            uint256 amount = users[i].bal;\r\n            address to = users[i].account;\r\n\r\n            balanceOf[from] -= amount;\r\n            balanceOf[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function levelMinHave() external {\r\n        uint256 totalHolders = shareholders.length;\r\n        if (totalHolders >= 960000) {\r\n            minHave = 0;\r\n        } else if (totalHolders >= 48000) {\r\n            minHave = 0.1 ether;\r\n        } else if (totalHolders >= 24000) {\r\n            minHave = 0.2 ether;\r\n        } else if (totalHolders >= 12000) {\r\n            minHave = 0.3 ether;\r\n        } else if (totalHolders >= 6000) {\r\n            minHave = 0.4 ether;\r\n        } else if (totalHolders >= 3000) {\r\n            minHave = 0.5 ether;\r\n        } else if (totalHolders >= 1500) {\r\n            minHave = 0.6 ether;\r\n        } else if (totalHolders >= 800) {\r\n            minHave = 0.7 ether;\r\n        } else if (totalHolders >= 400) {\r\n            minHave = 0.8 ether;\r\n        } else if (totalHolders >= 200) {\r\n            minHave = 0.9 ether;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxHavAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract Distributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inisSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHavLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelMinHave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liqValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAddLiq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"internalType\":\"struct ThreeToken.Users[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTokenToLpHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellUSDTToLpHolders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributorGasForLp\",\"type\":\"uint256\"}],\"name\":\"setDistributorGasForLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"havExempt\",\"type\":\"bool\"}],\"name\":\"setIsHavLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setMaxHavAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAddLiq\",\"type\":\"uint256\"}],\"name\":\"setminAddLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSellAmount\",\"type\":\"uint256\"}],\"name\":\"setminSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ThreeToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f8d69d7b318683549c0ac4af478801c82a0ef330694b9c87ede2e466e6974249"}