{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/weedminer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@****/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*****@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*******@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&*******@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@/**@@@@@@@@@@@@@@********(@@@@@@@@@@@@@@**%@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@******@@@@@@@@@@*********@@@@@@@@@&*****(@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@&*******%@@@@@@********/@@@@@@(/******@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@*********@@@@(*******%@@@@*********@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@*********@@@*******@@@*********@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@*********@*******@*********@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*********************@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@***************@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@/*******************************************\\\\@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@%*********************************************&@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*****%@*@%****\\\\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/*****@@@@*@@@@*****\\\\@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@/****@@@@@@@*@@@@@@@****\\\\@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@/@@@@@@@@@@@@*@@@@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@|@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ncontract WeedMiner {\\r\\n\\r\\n\\r\\n    address constant public addressReceive = 0x086420BDc1196BbD54c0d8c432df2857C30a90e5;\\r\\n    address constant public dev = 0x1111e93fEb785B4f4e3DB8a0280929605f20D7C9;\\r\\n    // constants\\r\\n    uint constant WeedMiner_TO_BREEDING_BREEDER = 1080000;\\r\\n    uint constant PSN = 10000;\\r\\n    uint constant PSNH = 5000;\\r\\n\\r\\n    // attributes\\r\\n    uint public marketWeedMiner;\\r\\n    uint public startTime = 6666666666;\\r\\n    address public owner;\\r\\n\\r\\n    mapping (address => uint) private lastBreeding;\\r\\n    mapping (address => uint) private breedingBreeders;\\r\\n    mapping (address => uint) private claimedWeedMiner;\\r\\n    mapping (address => uint) private tempClaimedWeedMiner;\\r\\n    mapping (address => address) private referrals;\\r\\n    mapping (address => ReferralData) private referralData;\\r\\n\\r\\n    // structs\\r\\n    struct ReferralData {\\r\\n        address[] invitees;\\r\\n        uint rebates;\\r\\n    }\\r\\n\\r\\n    // modifiers\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner, \\\"not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOpen {\\r\\n        require(block.timestamp > startTime, \\\"not open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyStartOpen {\\r\\n        require(marketWeedMiner > 0, \\\"not start open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // events\\r\\n    event Create(address indexed sender, uint indexed amount);\\r\\n    event Merge(address indexed sender, uint indexed amount);\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // Create WeedMiner\\r\\n    function createWeedMiner(address _ref) external payable onlyStartOpen {\\r\\n        require(msg.value >= 0.1 ether,\\\"Input value too low\\\");\\r\\n        uint WeedMinerDivide = calculateWeedMinerDivide(msg.value, address(this).balance - msg.value);\\r\\n        WeedMinerDivide -= devFee(WeedMinerDivide);\\r\\n        uint fee = devFee(msg.value);\\r\\n\\r\\n        // dev fee\\r\\n        (bool ownerSuccess, ) = addressReceive.call{value: fee * 80 / 100}(\\\"\\\");\\r\\n        require(ownerSuccess, \\\"owner pay failed\\\");\\r\\n        (bool address2Success, ) = dev.call{value: fee * 20 / 100}(\\\"\\\");\\r\\n        require(address2Success, \\\"address2 pay failed\\\");\\r\\n\\r\\n        claimedWeedMiner[msg.sender] += WeedMinerDivide;\\r\\n        divideWeedMiner(_ref);\\r\\n\\r\\n        emit Create(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    // Divide WeedMiner\\r\\n    function divideWeedMiner(address _ref) public onlyStartOpen {\\r\\n        if (_ref == msg.sender || _ref == address(0) || breedingBreeders[_ref] == 0) {\\r\\n            _ref = dev;\\r\\n        }\\r\\n\\r\\n        if (referrals[msg.sender] == address(0)) {\\r\\n            referrals[msg.sender] = _ref;\\r\\n            referralData[_ref].invitees.push(msg.sender);\\r\\n        }\\r\\n\\r\\n        uint WeedMinerUsed = getMyWeedMiner(msg.sender);\\r\\n        uint newBreeders = WeedMinerUsed / WeedMiner_TO_BREEDING_BREEDER;\\r\\n        breedingBreeders[msg.sender] += newBreeders;\\r\\n        claimedWeedMiner[msg.sender] = 0;\\r\\n        lastBreeding[msg.sender] = block.timestamp > startTime ? block.timestamp : startTime;\\r\\n\\r\\n        // referral rebate\\r\\n        uint WeedMinerRebate = WeedMinerUsed * 10 / 100;\\r\\n        if (referrals[msg.sender] == dev) {\\r\\n            claimedWeedMiner[addressReceive] += WeedMinerRebate * 80 / 100;\\r\\n            claimedWeedMiner[dev] += WeedMinerRebate * 20 / 100;\\r\\n            tempClaimedWeedMiner[addressReceive] += WeedMinerRebate * 80 / 100;\\r\\n            tempClaimedWeedMiner[dev] += WeedMinerRebate * 20 / 100;\\r\\n        } else {\\r\\n            claimedWeedMiner[referrals[msg.sender]] += WeedMinerRebate;\\r\\n            tempClaimedWeedMiner[referrals[msg.sender]] += WeedMinerRebate;\\r\\n        }\\r\\n\\r\\n        marketWeedMiner += WeedMinerUsed / 5;\\r\\n    }\\r\\n\\r\\n    // Merge WeedMiner\\r\\n    function mergeWeedMiner() external onlyOpen {\\r\\n        uint hasWeedMiner = getMyWeedMiner(msg.sender);\\r\\n        uint WeedMinerValue = calculateWeedMinerMerge(hasWeedMiner);\\r\\n        uint fee = devFee(WeedMinerValue);\\r\\n        uint realReward = WeedMinerValue - fee;\\r\\n\\r\\n        if (tempClaimedWeedMiner[msg.sender] > 0) {\\r\\n            referralData[msg.sender].rebates += calculateWeedMinerMerge(tempClaimedWeedMiner[msg.sender]);\\r\\n        }\\r\\n\\r\\n        // dev fee\\r\\n        (bool ownerSuccess, ) = addressReceive.call{value: fee * 80 / 100}(\\\"\\\");///change to receive\\r\\n        require(ownerSuccess, \\\"owner pay failed\\\");\\r\\n        (bool address2Success, ) = dev.call{value: fee * 20 / 100}(\\\"\\\");\\r\\n        require(address2Success, \\\"address2 pay failed\\\");\\r\\n\\r\\n        claimedWeedMiner[msg.sender] = 0;\\r\\n        tempClaimedWeedMiner[msg.sender] = 0;\\r\\n        lastBreeding[msg.sender] = block.timestamp;\\r\\n        marketWeedMiner += hasWeedMiner;\\r\\n\\r\\n        realReward = (realReward/8) * 5;\\r\\n\\r\\n        (bool success1, ) = msg.sender.call{value: realReward}(\\\"\\\");\\r\\n        require(success1, \\\"msg.sender pay failed\\\");\\r\\n\\r\\n        emit Merge(msg.sender, realReward);\\r\\n    }\\r\\n\\r\\n    //only owner\\r\\n    function seedMarket() external payable onlyOwner {\\r\\n        require(marketWeedMiner == 0);\\r\\n        startTime = TimeCheck() + 1 days * 7;\\r\\n        marketWeedMiner = 108000000000;\\r\\n    }\\r\\n\\r\\n    function TimeCheck() public view returns(uint256){\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function WeedMinerRewards(address _address) public view returns(uint) {\\r\\n        return calculateWeedMinerMerge(getMyWeedMiner(_address));\\r\\n    }\\r\\n\\r\\n    function getMyWeedMiner(address _address) public view returns(uint) {\\r\\n        return claimedWeedMiner[_address] + getWeedMinerSinceLastDivide(_address);\\r\\n    }\\r\\n\\r\\n    function getClaimWeedMiner(address _address) public view returns(uint) {\\r\\n        return claimedWeedMiner[_address];\\r\\n    }\\r\\n\\r\\n    function getWeedMinerSinceLastDivide(address _address) public view returns(uint) {\\r\\n        if (block.timestamp > startTime) {\\r\\n            uint secondsPassed = min(WeedMiner_TO_BREEDING_BREEDER, block.timestamp - lastBreeding[_address]);\\r\\n            return secondsPassed * breedingBreeders[_address];\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTempClaimWeedMiner(address _address) public view returns(uint) {\\r\\n        return tempClaimedWeedMiner[_address];\\r\\n    }\\r\\n\\r\\n    function getPoolAmount() public view returns(uint) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getBreedingBreeders(address _address) public view returns(uint) {\\r\\n        return breedingBreeders[_address];\\r\\n    }\\r\\n\\r\\n    function getReferralData(address _address) public view returns(ReferralData memory) {\\r\\n        return referralData[_address];\\r\\n    }\\r\\n\\r\\n    function getReferralAllRebate(address _address) public view returns(uint) {\\r\\n        return referralData[_address].rebates;\\r\\n    }\\r\\n\\r\\n    function getReferralAllInvitee(address _address) public view returns(uint) {\\r\\n       return referralData[_address].invitees.length;\\r\\n    }\\r\\n\\r\\n    function calculateWeedMinerDivide(uint _eth,uint _contractBalance) private view returns(uint) {\\r\\n        return calculateTrade(_eth, _contractBalance, marketWeedMiner);\\r\\n    }\\r\\n\\r\\n    function calculateWeedMinerMerge(uint weedMiner) public view returns(uint) {\\r\\n        return (calculateTrade(weedMiner, marketWeedMiner, address(this).balance)/8)*5;\\r\\n    }\\r\\n\\r\\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) private pure returns(uint) {\\r\\n        return (PSN * bs) / (PSNH + ((PSN * rs + PSNH * rt) / rt));\\r\\n\\r\\n    }\\r\\n\\r\\n    function devFee(uint _amount) private pure returns(uint) {\\r\\n        return _amount * 6 / 100;\\r\\n    }\\r\\n\\r\\n    function min(uint a, uint b) private pure returns (uint) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Merge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TimeCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"WeedMinerRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressReceive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weedMiner\",\"type\":\"uint256\"}],\"name\":\"calculateWeedMinerMerge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"createWeedMiner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"}],\"name\":\"divideWeedMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getBreedingBreeders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getClaimWeedMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMyWeedMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferralAllInvitee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferralAllRebate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getReferralData\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"invitees\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"rebates\",\"type\":\"uint256\"}],\"internalType\":\"struct WeedMiner.ReferralData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTempClaimWeedMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWeedMinerSinceLastDivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketWeedMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mergeWeedMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WeedMiner", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}