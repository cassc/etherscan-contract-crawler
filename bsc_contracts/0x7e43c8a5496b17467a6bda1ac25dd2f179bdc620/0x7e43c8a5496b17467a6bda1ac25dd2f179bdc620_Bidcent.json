{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.19;\r\n\r\ncontract Bidcent{\r\n    address public owner;\r\n    address signer;\r\n    mapping(address => uint) public balance;\r\n    mapping(address => uint) public left_balance;\r\n    mapping(address => uint) public right_balance;\r\n    mapping(uint => address) left_balance_index;\r\n    mapping(uint => address) right_balance_index;\r\n    uint left_balance_count;\r\n    uint right_balance_count;\r\n    uint left_bid_total;\r\n    uint right_bid_total;\r\n    \r\n    enum GameStatus{Start, Live, Payout, End}\r\n    enum Side{None, Left, Right}\r\n    uint game_number;\r\n    GameStatus game_status;\r\n    uint countdown;\r\n    uint countdown_end;\r\n    uint delay;\r\n    uint fee_num;\r\n    uint immutable max_countdown;\r\n    uint immutable max_delay;\r\n    uint immutable fee_den;\r\n    uint immutable max_fee_num;\r\n    uint min_bid_value;\r\n    uint min_bid_total;\r\n    uint new_countdown;\r\n    uint new_countdown_end;\r\n    uint new_delay;\r\n    uint new_fee_num;\r\n    uint new_min_bid_value;\r\n    uint new_min_bid_total;\r\n    uint bid_time;\r\n    uint payout_time;\r\n    uint chunk_number;\r\n\r\n    struct Game{\r\n        uint game_number;\r\n        GameStatus game_status;\r\n        GameConfig game_config;       \r\n        BidStats bidstats;\r\n        BalanceStats balancestats;\r\n        uint bid_time;\r\n        uint payout_time;\r\n    }\r\n\r\n    struct GameConfig{\r\n        uint countdown;\r\n        uint countdown_end;\r\n        uint delay;\r\n        uint fee_num;\r\n        uint min_bid_value;\r\n        uint min_bid_total;\r\n    }\r\n\r\n    struct BidStats{\r\n        uint left_bid_total;\r\n        uint right_bid_total;\r\n    }\r\n\r\n    struct BalanceStats{\r\n        uint left_balance_count;\r\n        uint right_balance_count;\r\n        uint chunk_number;\r\n    }\r\n\r\n    struct User{\r\n        address sender;\r\n        uint balance;\r\n        uint left_balance;\r\n        uint right_balance;\r\n    }\r\n\r\n    event DepositEvent(\r\n        uint time,\r\n        address indexed sender,\r\n        uint value,\r\n        uint balance\r\n    );\r\n\r\n    event WithdrawEvent(\r\n        uint time,\r\n        address indexed sender,\r\n        uint value,\r\n        uint balance\r\n    );\r\n\r\n    event BidEvent(\r\n        uint time,\r\n        address indexed sender,\r\n        uint value,\r\n        Side side,\r\n        uint fee,\r\n        uint indexed game_number,\r\n        GameStatus game_status,\r\n        BidStats bidstats,\r\n        User user\r\n    );\r\n\r\n    event CancelEvent(\r\n        uint time,\r\n        uint indexed game_number,\r\n        address indexed sender,\r\n        uint value,\r\n        uint balance\r\n    );\r\n\r\n    event PayEvent(\r\n        uint time,\r\n        address indexed sender,\r\n        uint value,\r\n        uint balance,\r\n        uint indexed game_number\r\n    );\r\n\r\n    event PreparePayoutEvent(\r\n        uint time,\r\n        uint indexed game_number,\r\n        address sender,\r\n        uint value\r\n    );\r\n\r\n    event PayoutEvent(\r\n        uint time,\r\n        uint indexed game_number,\r\n        BidStats bidstats\r\n    );\r\n\r\n    event ChunkPayoutEvent(\r\n        uint time,\r\n        uint indexed game_number,\r\n        BidStats bidstats,\r\n        uint chunk_number,\r\n        uint new_chunk_number\r\n    );\r\n\r\n    event NewGameEvent(\r\n        uint time,\r\n        uint indexed game_number\r\n    );\r\n\r\n    event GameConfigEvent(\r\n        uint time,\r\n        uint countdown,\r\n        uint countdown_end,\r\n        uint delay,\r\n        uint fee_num,\r\n        uint min_bid_value,\r\n        uint min_bid_total\r\n    );\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        signer = 0xC3905e354d22430F114177FEeB03e82A27ba258F;\r\n        game_number = 1;\r\n        game_status = GameStatus.Start;\r\n        countdown = 60; // 1 minute\r\n        countdown_end = 60; // 1 minute\r\n        delay = 20; // 20 seconds\r\n        fee_num = 50; // numerator\r\n        fee_den = 100; // denominator\r\n        max_countdown = 86400; // 1 day\r\n        max_delay = 300; // 5 minutes\r\n        max_fee_num = 100; // Max 1% Fee\r\n        min_bid_value = 1e16; // 0.01\r\n        min_bid_total = 5e17; // 0.5\r\n        new_countdown = countdown;\r\n        new_countdown_end = countdown_end;\r\n        new_delay = delay;\r\n        new_fee_num = fee_num;\r\n        new_min_bid_value = min_bid_value;\r\n        new_min_bid_total = min_bid_total;\r\n\r\n        left_balance_count = 1;\r\n        right_balance_count = 1;\r\n        left_bid_total = 1;\r\n        right_bid_total = 1;\r\n        chunk_number = 1;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address new_owner) public {\r\n        require(msg.sender == signer, 'Only signer');\r\n        owner = new_owner;\r\n    }\r\n\r\n    function getGame() public view returns (Game memory){\r\n        GameConfig memory game_config = GameConfig(countdown, countdown_end, delay, fee_num, min_bid_value, min_bid_total);\r\n        BidStats memory bidstats = BidStats(left_bid_total, right_bid_total);\r\n        BalanceStats memory balancestats = BalanceStats(left_balance_count, right_balance_count, chunk_number);\r\n        Game memory game = Game(game_number, game_status, game_config, bidstats, balancestats, bid_time, payout_time); \r\n        return game;\r\n    }\r\n\r\n    function getUser(address sender) public view returns(User memory){\r\n        User memory user = User(sender, balance[sender], left_balance[sender], right_balance[sender]);\r\n        return user;\r\n    }\r\n\r\n    function deposit() public payable{\r\n        uint time = block.timestamp;\r\n        address sender = msg.sender;\r\n        uint value = msg.value;\r\n        if(balance[sender]==0){\r\n            balance[sender] += value + 1;\r\n        }else{\r\n             balance[sender] += value;           \r\n        }\r\n\r\n        emit DepositEvent(time, sender, value, balance[sender]);\r\n    }\r\n\r\n    function withdraw(uint value) public{\r\n        require(balance[msg.sender] > value, 'Insufficient Balance');\r\n        uint time = block.timestamp;\r\n        address payable sender = payable(msg.sender);\r\n        balance[sender] -= value;\r\n        sender.transfer(value);\r\n\r\n        emit WithdrawEvent(time, sender, value, balance[sender]);\r\n    }\r\n\r\n    function bid(uint _game_number, Side side, uint value) public{\r\n        require(game_number == _game_number, 'Game Number mismatch');\r\n        require(side==Side.Left || side==Side.Right, 'Left or Right');\r\n        require(value >= min_bid_value, 'Less than min bid value');  \r\n        GameStatus _game_status = game_status;\r\n        require(_game_status== GameStatus.Start || _game_status==GameStatus.Live, 'Countdown has end');\r\n        uint fee = (fee_num*value)/(fee_den*100);\r\n        uint balance_sender = balance[msg.sender];\r\n        require(balance_sender > value + fee, 'Insufficient Balance');\r\n\r\n        uint time = block.timestamp;\r\n        address sender = msg.sender;    \r\n        \r\n        uint left_balance_sender = left_balance[sender];\r\n        uint right_balance_sender = right_balance[sender];\r\n\r\n        balance[sender] = balance_sender - value - fee;\r\n        balance[owner] += fee;\r\n        \r\n        if(side==Side.Left){\r\n            left_bid_total += value;\r\n            if(left_balance_sender == 0){\r\n                left_balance_index[left_balance_count] = sender;\r\n                left_balance_count++;\r\n                left_balance[sender] += value + 1;\r\n            }else if(left_balance_sender == 1){\r\n                left_balance_index[left_balance_count] = sender;\r\n                left_balance_count++;\r\n                left_balance[sender] += value;\r\n            }else{\r\n                left_balance[sender] += value;\r\n            }\r\n        }else if(side==Side.Right){\r\n            right_bid_total += value;\r\n            if(right_balance_sender == 0){\r\n                right_balance_index[right_balance_count] = sender;\r\n                right_balance_count++;\r\n                right_balance[sender] += value + 1;\r\n            }else if(right_balance_sender == 1){\r\n                right_balance_index[right_balance_count] = sender;\r\n                right_balance_count++;\r\n                right_balance[sender] += value;\r\n            }else{\r\n                right_balance[sender] += value;\r\n            }      \r\n        }\r\n        User memory user = User(sender, balance[sender], left_balance[sender], right_balance[sender]);\r\n        BidStats memory bidstats = BidStats(left_bid_total, right_bid_total);\r\n        bid_time = time;\r\n\r\n        if(_game_status==GameStatus.Start && left_bid_total + right_bid_total >= min_bid_total && left_bid_total > 1 && right_bid_total > 1){\r\n            _game_status=GameStatus.Live;\r\n            game_status = _game_status;\r\n        }\r\n\r\n        emit BidEvent(time, sender, value, side, fee, _game_number, _game_status, bidstats, user);\r\n    }\r\n\r\n    function cancelBid() public{\r\n        require(game_status == GameStatus.Start, 'Game status not Start');\r\n        address sender = msg.sender;\r\n        uint left_balance_sender = left_balance[sender];\r\n        uint right_balance_sender = right_balance[sender];        \r\n        require(left_balance_sender > 1 || right_balance_sender > 1, 'No bids');\r\n        uint value;\r\n    \r\n        if(left_balance_sender > 1){\r\n            left_balance[sender] = 1;\r\n            left_bid_total = left_bid_total - left_balance_sender + 1;\r\n            value += left_balance_sender - 1;\r\n        }\r\n        \r\n        if(right_balance_sender > 1){\r\n            right_balance[sender] = 1;\r\n            right_bid_total = right_bid_total - right_balance_sender + 1;\r\n            value += right_balance_sender - 1;\r\n        }\r\n        balance[sender] += value;\r\n\r\n        emit CancelEvent(block.timestamp, game_number, sender, value, balance[sender]);\r\n    }\r\n\r\n    function preparePayout() public onlyOwner{\r\n        require(game_status == GameStatus.Live, 'Game status not Live');\r\n        require(left_bid_total != right_bid_total, 'Draw game');\r\n        require(block.timestamp >= bid_time + countdown, 'Not yet time to payout');\r\n        game_status = GameStatus.Payout;\r\n        \r\n        uint owner_balance = balance[owner] - 1;\r\n        balance[owner] = 1;\r\n        payable(owner).transfer(owner_balance);\r\n        \r\n        emit PreparePayoutEvent(block.timestamp, game_number, owner, owner_balance);\r\n    }\r\n\r\n    function payout() public onlyOwner{\r\n        require(game_status == GameStatus.Payout, 'Game status not Payout');\r\n        address sender;\r\n        uint sender_bid_total;\r\n        uint win_amount;\r\n        uint pay_amount;\r\n\r\n        if(left_bid_total > right_bid_total){\r\n            for(uint i = 1; i < left_balance_count;){\r\n                sender = left_balance_index[i]; \r\n                sender_bid_total = left_balance[sender];\r\n                if(sender_bid_total > 1){\r\n                    win_amount = ((sender_bid_total - 1) * (right_bid_total - 1)) / (left_bid_total - 1);\r\n                    pay_amount = sender_bid_total - 1 + win_amount;\r\n                    left_balance[sender] = 1;\r\n                    balance[sender] += pay_amount;\r\n                    emit PayEvent(block.timestamp, sender, pay_amount, balance[sender], game_number);\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n            for(uint i=1; i < right_balance_count;){\r\n                sender = right_balance_index[i];\r\n                right_balance[sender] = 1;\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }else if(left_bid_total < right_bid_total){\r\n            for(uint i = 1; i < right_balance_count;){\r\n                sender = right_balance_index[i]; \r\n                sender_bid_total = right_balance[sender];\r\n                if(sender_bid_total > 1){\r\n                    win_amount = ((sender_bid_total - 1)* (left_bid_total - 1)) / (right_bid_total - 1) ;\r\n                    pay_amount = sender_bid_total - 1 + win_amount;\r\n                    balance[sender] += pay_amount;\r\n                    right_balance[sender] = 1;\r\n\r\n                    emit PayEvent(block.timestamp, sender, pay_amount, balance[sender], game_number);\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n            for(uint i=1; i < left_balance_count;){\r\n                sender = left_balance_index[i];\r\n                left_balance[sender] = 1;\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        left_balance_count = 1;\r\n        right_balance_count = 1;\r\n        game_status = GameStatus.End;\r\n\r\n        BidStats memory bidstats = BidStats(left_bid_total, right_bid_total);\r\n        payout_time = block.timestamp;\r\n\r\n        emit PayoutEvent(block.timestamp, game_number, bidstats); \r\n    }\r\n\r\n    function cashout() public{\r\n        require(game_status == GameStatus.Live || game_status == GameStatus.Payout, 'Game status not Live or Payout');\r\n        require(left_bid_total != right_bid_total, 'Draw game');\r\n        require(block.timestamp >= bid_time + countdown + delay,'Not yet time to cashout');\r\n        address sender = msg.sender;\r\n        uint sender_bid_total;\r\n        uint win_amount;\r\n        uint pay_amount;\r\n        if(left_bid_total > right_bid_total){\r\n            require(left_balance[sender] > 1, 'No winning bids');\r\n            sender_bid_total = left_balance[sender];\r\n            win_amount = ((sender_bid_total - 1) * (right_bid_total - 1)) / (left_bid_total - 1);\r\n            pay_amount = sender_bid_total - 1 + win_amount;\r\n            left_balance[sender] = 1;\r\n            balance[sender] += pay_amount;\r\n        }else if(left_bid_total < right_bid_total){\r\n            require(right_balance[sender] > 1, 'No winning bids');\r\n            sender_bid_total = right_balance[sender];\r\n            win_amount = ((sender_bid_total - 1) * (left_bid_total - 1)) / (right_bid_total - 1);\r\n            pay_amount = sender_bid_total - 1 + win_amount;\r\n            right_balance[sender] = 1;\r\n            balance[sender] += pay_amount;\r\n        }\r\n        emit PayEvent(block.timestamp, sender, pay_amount, balance[sender], game_number);\r\n\r\n        if(game_status == GameStatus.Live){\r\n            game_status = GameStatus.Payout;\r\n            uint owner_balance = balance[owner] - 1;\r\n            balance[owner] = 1;\r\n            payable(owner).transfer(owner_balance);\r\n        \r\n            emit PreparePayoutEvent(block.timestamp, game_number, owner, owner_balance);\r\n        }\r\n    }\r\n\r\n    function chunkPayout(uint n) public onlyOwner{\r\n        require(game_status == GameStatus.Payout, 'Game not in payout status');        \r\n        require(n > 0, 'Minimum n is 1');\r\n        //uint start_index = chunk_number;\r\n        uint time = block.timestamp;\r\n        address sender;\r\n        uint sender_bid_total;\r\n        uint win_amount;\r\n        uint pay_amount;\r\n\r\n        uint new_chunk_number = chunk_number + n;\r\n        uint _left_balance_count = new_chunk_number;\r\n        uint _right_balance_count = new_chunk_number;\r\n        if(new_chunk_number > left_balance_count){\r\n            _left_balance_count = left_balance_count;\r\n        }\r\n        if(new_chunk_number > right_balance_count){\r\n            _right_balance_count = right_balance_count;\r\n        }\r\n        if(left_bid_total > right_bid_total){\r\n            for(uint i = chunk_number; i < _left_balance_count;){\r\n                sender = left_balance_index[i]; \r\n                sender_bid_total = left_balance[sender];\r\n                if(sender_bid_total > 1){\r\n                    win_amount = ((sender_bid_total - 1) * (right_bid_total - 1)) / (left_bid_total - 1);\r\n                    pay_amount = sender_bid_total - 1 + win_amount;\r\n                    left_balance[sender] = 1;\r\n                    balance[sender] += pay_amount;\r\n                    emit PayEvent(time, sender, pay_amount, balance[sender], game_number);\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n            for(uint i=chunk_number; i < _right_balance_count;){\r\n                sender = right_balance_index[i];\r\n                right_balance[sender] = 1;\r\n                \r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }else if(left_bid_total < right_bid_total){\r\n            for(uint i = chunk_number; i < _right_balance_count;){\r\n                sender = right_balance_index[i]; \r\n                sender_bid_total = right_balance[sender];\r\n                if(sender_bid_total > 1){\r\n                    win_amount = ((sender_bid_total - 1)* (left_bid_total - 1)) / (right_bid_total - 1) ;\r\n                    pay_amount = sender_bid_total - 1 + win_amount;\r\n                    balance[sender] += pay_amount;\r\n                    right_balance[sender] = 1;\r\n\r\n                    emit PayEvent(time, sender, pay_amount, balance[sender], game_number);\r\n                }\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n            for(uint i = chunk_number; i < _left_balance_count;){\r\n                sender = left_balance_index[i];\r\n                left_balance[sender] = 1;\r\n                unchecked {\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        BidStats memory bidstats = BidStats(left_bid_total, right_bid_total);\r\n        if(new_chunk_number >= left_balance_count && new_chunk_number >= right_balance_count){\r\n            chunk_number = 1;\r\n            left_balance_count = 1;\r\n            right_balance_count = 1;\r\n            game_status = GameStatus.End;\r\n            payout_time = time;\r\n\r\n            emit PayoutEvent(time, game_number, bidstats); \r\n        }else{\r\n            emit ChunkPayoutEvent(time, game_number, bidstats, chunk_number, new_chunk_number);\r\n            chunk_number = new_chunk_number;\r\n        }\r\n    }\r\n\r\n    function startNewGame() public onlyOwner{\r\n        require(game_status==GameStatus.End, 'Game has not ended');\r\n        game_number += 1;\r\n        game_status = GameStatus.Start;\r\n        countdown = new_countdown;\r\n        countdown_end = new_countdown_end;\r\n        delay = new_delay;\r\n        fee_num = new_fee_num;\r\n        min_bid_value = new_min_bid_value;\r\n        min_bid_total = new_min_bid_total;\r\n\r\n        left_bid_total = 1;\r\n        right_bid_total = 1;\r\n\r\n        emit NewGameEvent(block.timestamp, game_number);\r\n    }\r\n\r\n    function setGameConfig(uint _new_countdown, uint _new_countdown_end, uint _new_delay, uint _new_fee_num, uint _new_min_bid_value, uint _new_min_bid_total) public onlyOwner{\r\n        require(_new_fee_num <= max_fee_num, 'New fee is more than max fee');\r\n        require(_new_countdown <= max_countdown, 'Countdown cannot be more than max countdown');\r\n        require(_new_delay <= max_delay, 'Delay cannot be more than max delay');\r\n        \r\n        new_countdown = _new_countdown;\r\n        new_countdown_end = _new_countdown_end;\r\n        new_delay = _new_delay;\r\n        new_fee_num = _new_fee_num;\r\n        new_min_bid_value = _new_min_bid_value;\r\n        new_min_bid_total = _new_min_bid_total;\r\n\r\n        emit GameConfigEvent(block.timestamp, new_countdown, new_countdown_end, new_delay, new_fee_num, new_min_bid_value, new_min_bid_total);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Bidcent.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Bidcent.GameStatus\",\"name\":\"game_status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"left_bid_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_bid_total\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Bidcent.BidStats\",\"name\":\"bidstats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Bidcent.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"BidEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"CancelEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"left_bid_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_bid_total\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Bidcent.BidStats\",\"name\":\"bidstats\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chunk_number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_chunk_number\",\"type\":\"uint256\"}],\"name\":\"ChunkPayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countdown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"countdown_end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee_num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min_bid_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min_bid_total\",\"type\":\"uint256\"}],\"name\":\"GameConfigEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"}],\"name\":\"NewGameEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"}],\"name\":\"PayEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"left_bid_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_bid_total\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Bidcent.BidStats\",\"name\":\"bidstats\",\"type\":\"tuple\"}],\"name\":\"PayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PreparePayoutEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_game_number\",\"type\":\"uint256\"},{\"internalType\":\"enum Bidcent.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"chunkPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGame\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"game_number\",\"type\":\"uint256\"},{\"internalType\":\"enum Bidcent.GameStatus\",\"name\":\"game_status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"countdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countdown_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bid_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bid_total\",\"type\":\"uint256\"}],\"internalType\":\"struct Bidcent.GameConfig\",\"name\":\"game_config\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"left_bid_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_bid_total\",\"type\":\"uint256\"}],\"internalType\":\"struct Bidcent.BidStats\",\"name\":\"bidstats\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"left_balance_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_balance_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chunk_number\",\"type\":\"uint256\"}],\"internalType\":\"struct Bidcent.BalanceStats\",\"name\":\"balancestats\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"bid_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payout_time\",\"type\":\"uint256\"}],\"internalType\":\"struct Bidcent.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"left_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"right_balance\",\"type\":\"uint256\"}],\"internalType\":\"struct Bidcent.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"left_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preparePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"right_balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_countdown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_countdown_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_fee_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_min_bid_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_new_min_bid_total\",\"type\":\"uint256\"}],\"name\":\"setGameConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bidcent", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://11e406f1642417ec212e66a981b955414c4ab89e57673b59d0d88a97d4c8eee0"}