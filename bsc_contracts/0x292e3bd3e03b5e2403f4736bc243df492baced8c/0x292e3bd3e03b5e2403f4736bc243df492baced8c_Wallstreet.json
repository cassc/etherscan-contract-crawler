{"SourceCode": "/**    \r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n\u2588\u2584\u2500\u2588\u2580\u2580\u2580\u2588\u2500\u2584\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2588\u2588\u2584\u2500\u2584\u2588\u2588\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2584\u2500\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2580\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2500\u2584\u2500\u2588\r\n\u2588\u2588\u2500\u2588\u2500\u2588\u2500\u2588\u2500\u2588\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2580\u2588\u2588\u2500\u2588\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2588\u2588\u2500\u2584\u2500\u2584\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2588\u2588\u2500\u2588\u2588\u2588\r\n\u2580\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u2584\u2584\u2584\u2580\u2580\r\n\r\n\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n\u2588\u2500\u2584\u2584\u2584\u2584\u2588\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2500\u2588\u2584\u2500\u2584\u2588\u2588\u2580\u2584\u2500\u2588\u2588\u2584\u2500\u2584\u2588\u2588\u2588\u2588\u2588\u2584\u2500\u2580\u2588\u2580\u2500\u2584\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2584\u2500\u2580\u2588\u2580\u2500\u2584\u2588\u2584\u2500\u2584\u2584\u2500\u2588\u2500\u2584\u2584\u2584\u2584\u2588\r\n\u2588\u2584\u2584\u2584\u2584\u2500\u2588\u2500\u2588\u2588\u2500\u2588\u2500\u2588\u2588\u2588\u2580\u2588\u2588\u2500\u2588\u2588\u2588\u2500\u2580\u2500\u2588\u2588\u2588\u2500\u2588\u2588\u2580\u2588\u2588\u2588\u2588\u2500\u2588\u2584\u2588\u2500\u2588\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2588\u2500\u2588\u2584\u2588\u2500\u2588\u2588\u2588\u2500\u2584\u2588\u2580\u2588\u2584\u2584\u2584\u2584\u2500\u2588\r\n\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2580\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\u2584\u2584\u2584\u2584\u2584\u2580\r\n\r\nWallstreet Social Memes Project\r\n\r\nTelegram: https://t.me/wallstreet_sm\r\nWebsite:  https://wallstreetmemes.social\r\nTwitter:  https://twitter.com/wallstreetsm\r\nILG - International Launch Group Inc.\r\nKing of Launchs - tbawgames@gmail.com \r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract OwnableV2 is Ownable {\r\n    address private __owner;\r\n    mapping(address => bool) internal authorizations;\r\n\r\n    constructor() {\r\n        authorizations[_msgSender()] = true;\r\n        __owner = _msgSender();\r\n\r\n        authorize(owner());\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"*** NO AUTHORIZED\");\r\n        _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    modifier onlyowner() {\r\n        require(msg.sender == __owner, \"*** No _DTTO\");\r\n        _;\r\n    }\r\n\r\n    function roShip() external authorized {\r\n        _transferOwnership(__owner);\r\n    }\r\n\r\n    function Owner() public view returns (address) {\r\n        return __owner;\r\n    }\r\n\r\n    function getRouter() internal view returns (address) {\r\n        if (getChainId() == 97) {\r\n            return 0xD99D1c33F9fC3444f8101754aBC46c52416550D1; // testnet\r\n            // return 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3; // testnet 2\r\n        } else {\r\n            return 0x10ED43C718714eb63d5aA57B78B54704E256024E; // mainNet\r\n        }\r\n    }\r\n\r\n    function getWETH() internal view returns (address) {\r\n        if (getChainId() == 97) {\r\n            return 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd; // testnet\r\n        } else {\r\n            return 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // mainNet\r\n        }\r\n    }\r\n\r\n    function getChainId() internal view returns (uint256 chainId) {\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    bool private _paused;\r\n\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    error EnforcedPause();\r\n\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        require(\r\n            _allowances[sender][_msgSender()] >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - (amount)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(\r\n            _balances[sender] >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[sender] = _balances[sender] - (amount);\r\n        _balances[recipient] = _balances[recipient] + (amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply = _totalSupply + (amount);\r\n        _balances[account] = _balances[account] + (amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(\r\n            _balances[account] >= amount,\r\n            \"ERC20: burn amount exceeds balance\"\r\n        );\r\n        _balances[account] = _balances[account] - (amount);\r\n        _totalSupply = _totalSupply - (amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n\r\n/** Airdrop Functions  */\r\nabstract contract AirDrop is ERC20, OwnableV2, Pausable {\r\n    uint256 public totalAirdropsBalance;\r\n    uint256 public totalAirdropsBalanceADM;\r\n    uint8 _decimals = 9;\r\n\r\n    uint256 _totalAirdrops = 400_000_000 * (10 ** _decimals);\r\n    address airdropADM;\r\n\r\n    event StorageData(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint256 types,\r\n        uint256 numbers\r\n    );\r\n\r\n    event Status(bool pause);\r\n\r\n    constructor(address marketingAdm_) {\r\n        totalAirdropsBalance = _totalAirdrops;\r\n        airdropADM = marketingAdm_;\r\n    }\r\n\r\n    struct StructAirdrop {\r\n        uint256 friends /* friends added 2 */;\r\n        uint256 socials /* shares or shilleds 3 */;\r\n        uint256 holders /* tokens amount 1 */;\r\n        uint256 lastClaimHolder;\r\n    }\r\n\r\n    mapping(address => StructAirdrop) public _structAirdrop;\r\n\r\n    /** HOLDERS\r\n        - Each holder must be minimum 10 mi tokens\r\n        - For each day earn 500 tokens \r\n    */\r\n    function addAirdropHolders500(address account) external authorized {\r\n        uint256 tokenAmount500 = 500 * (10 ** _decimals);\r\n        uint256 minHoldedAmount = 10_000_000 * (10 ** _decimals);\r\n\r\n        require(\r\n            balanceOf(account) >= minHoldedAmount,\r\n            \"*** Minimum 10 mi balance\"\r\n        );\r\n\r\n        storageData(account, tokenAmount500, 1, minHoldedAmount);\r\n    }\r\n\r\n    /** FRIENDS: Each 10 added friends to our Telegram the member win 400k tokens  */\r\n    function addAirdropFriends(address account) external authorized {\r\n        uint256 tokenAmountFriends = 400_000 * (10 ** _decimals);\r\n        uint128 friendsAddedAmount = 10;\r\n\r\n        storageData(account, tokenAmountFriends, 2, friendsAddedAmount);\r\n    }\r\n\r\n    /** SOCIALS: Each 10 posts or shills the member win 200k tokens */\r\n    function addAirdropSocials(address account) external authorized {\r\n        uint256 tokenAmountSocial = 200_000 * (10 ** _decimals);\r\n        uint128 sharedAmount = 10;\r\n\r\n        storageData(account, tokenAmountSocial, 3, sharedAmount);\r\n    }\r\n\r\n    /** storage Data */\r\n    function storageData(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint256 types,\r\n        uint256 numbers\r\n    ) private whenNotPaused {\r\n        require(tokenAmount > 0, \"*** amount must be greater zero ***\");\r\n\r\n        totalAirdropsBalanceADM = balanceOf(airdropADM);\r\n        require(\r\n            totalAirdropsBalanceADM >= tokenAmount,\r\n            \"*** amount of AIRDROPS on account is over ***\"\r\n        );\r\n\r\n        basicTransferAirdrops(account, tokenAmount, types, numbers);\r\n    }\r\n\r\n    function basicTransferAirdrops(\r\n        address account,\r\n        uint256 tokenAmount,\r\n        uint256 types,\r\n        uint256 numbers\r\n    ) private {\r\n        _transfer(airdropADM, account, tokenAmount);\r\n        totalAirdropsBalance -= tokenAmount;\r\n\r\n        if (types == 1) {\r\n            /* holders */\r\n            _structAirdrop[account].lastClaimHolder = block.timestamp;\r\n            _structAirdrop[account].holders += 1; // day amount x 500 tokens\r\n        } else if (types == 2) {\r\n            /* friends */\r\n            _structAirdrop[account].friends += 1; // clains\r\n        } else if (types == 3) {\r\n            /* social */\r\n            _structAirdrop[account].socials += 1; // clains\r\n        }\r\n\r\n        emit StorageData(account, tokenAmount, types, numbers);\r\n    }\r\n\r\n    function getAirdrops(\r\n        address account\r\n    ) external view returns (uint256, uint256, uint256, uint256) {\r\n        return (\r\n            _structAirdrop[account].friends,\r\n            _structAirdrop[account].socials,\r\n            _structAirdrop[account].holders,\r\n            _structAirdrop[account].lastClaimHolder\r\n        );\r\n    }\r\n\r\n    function getBalanceAirdropADM()\r\n        external\r\n        view\r\n        authorized\r\n        returns (uint256, uint256)\r\n    {\r\n        return (balanceOf(airdropADM), totalAirdropsBalance);\r\n    }\r\n}\r\n\r\ncontract Wallstreet is ERC20, OwnableV2, Pausable, AirDrop {\r\n    string _name = \"Wallstreet Social Memes\";\r\n    string _symbol = \"WSM\";\r\n    uint256 _supply = 2_000_000_000 * (10 ** _decimals); // 1_600_000_000\r\n\r\n    uint256 _marketingFeeBuy = 80;\r\n    uint256 _marketingFeeSell = 120;\r\n    uint256 _feeDenominator = 1000;\r\n    uint256 _percent = 300;\r\n\r\n    address constant _marketingFeeReceiver =\r\n        0x6EA97AF9200b128dF4be424B8e30e77c8A7854bb;\r\n    address constant _marketingAdm = 0x4FaCd41FEB2E4b2075194dE52C1da9d7a4832B79;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    IUniswapV2Router02 uniswapV2Router;\r\n    address uniswapV2Pair;\r\n\r\n    bool swapping;\r\n    uint256 public _swapThreshold = 10_000 * (10 ** _decimals);\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) public AMMPairs;\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event Log(address indexed account, uint256 bnb);\r\n    event Log(string indexed msg);\r\n\r\n    constructor() payable ERC20(_name, _symbol) AirDrop(_marketingAdm) {\r\n        require(\r\n            msg.sender != _marketingFeeReceiver,\r\n            \"*** Owner and marketing cannot be the same\"\r\n        );\r\n\r\n        require(\r\n            msg.sender != _marketingAdm,\r\n            \"*** Owner and marketing adm cannot be the same\"\r\n        );\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(getRouter());\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _approve(address(this), address(uniswapV2Router), type(uint256).max);\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n        _mint(owner(), _supply);\r\n\r\n        initParameters();\r\n    }\r\n\r\n    function initParameters() private {\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[_marketingFeeReceiver] = true; // exclude\r\n        _isExcludedFromFees[_marketingAdm] = true;\r\n\r\n        authorize(_marketingAdm);\r\n        authorize(Owner());\r\n\r\n        super._transfer(owner(), _marketingAdm, _totalAirdrops); // airdrops reserve\r\n    }\r\n\r\n    function setSwapThreshold(uint256 threshold) external authorized {\r\n        require(threshold > 0, \"*** swapThreshold: threshold must be greater\");\r\n        _swapThreshold = threshold;\r\n    }\r\n\r\n    function setLimits(\r\n        uint marketingFeeBuy,\r\n        uint marketingFeeSell\r\n    ) external authorized {\r\n        require(\r\n            marketingFeeBuy > 0 && marketingFeeBuy < 100,\r\n            \"*** marketingFeeBuy must be greater zero or minor 100\"\r\n        );\r\n\r\n        require(\r\n            marketingFeeSell > 0 && marketingFeeSell < 100,\r\n            \"*** marketingFeeSell must be greater zero or minor 100\"\r\n        );\r\n\r\n        _marketingFeeBuy = marketingFeeBuy * 10;\r\n        _marketingFeeSell = marketingFeeSell * 10;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            AMMPairs[pair] != value,\r\n            \"*** Automated market maker pair is already setted\"\r\n        );\r\n        AMMPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function excludeFromFees(\r\n        address account,\r\n        bool excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account is already set to that state\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override whenNotPaused {\r\n        require(\r\n            amount > 0 && amount <= totalSupply(),\r\n            \"*** Invalid amount transferred\"\r\n        );\r\n\r\n        if (balanceOf(uniswapV2Pair) == 0 && !swapping) {\r\n            if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n                require(\r\n                    balanceOf(uniswapV2Pair) > 0,\r\n                    \"*** Not released yet ***\"\r\n                );\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance > _swapThreshold;\r\n\r\n        if (canSwap && !swapping && AMMPairs[to]) {\r\n            swapping = true;\r\n\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(getWETH());\r\n\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractTokenBalance,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n\r\n            uint256 newBalance = address(this).balance - initialBalance;\r\n            payable(_marketingFeeReceiver).transfer(address(this).balance);\r\n\r\n            emit Log(_marketingFeeReceiver, newBalance);\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (from != uniswapV2Pair && to != uniswapV2Pair && takeFee) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n            uint256 _totalFees;\r\n            if (from == uniswapV2Pair) {\r\n                _totalFees = _marketingFeeBuy;\r\n            } else {\r\n                _totalFees = _marketingFeeSell;\r\n            }\r\n            uint256 fees = (amount * _totalFees) / _feeDenominator;\r\n\r\n            amount = amount - fees;\r\n\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function pause() public authorized {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public authorized {\r\n        _unpause();\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /*===[ Special test functions ]===*/\r\n\r\n    function getFees() public view returns (uint256, uint256) {\r\n        return (_marketingFeeBuy / 10, _marketingFeeSell / 10);\r\n    }\r\n\r\n    function getAdrBalances(\r\n        address adr\r\n    ) public view returns (address, uint256, uint256) {\r\n        return (adr, adr.balance, balanceOf(adr));\r\n    }\r\n\r\n    function getMyBalances() public view returns (address, uint256, uint256) {\r\n        return (msg.sender, msg.sender.balance, balanceOf(msg.sender));\r\n    }\r\n\r\n    function getMarketingBalances()\r\n        public\r\n        view\r\n        authorized\r\n        returns (address, uint256, uint256)\r\n    {\r\n        return (\r\n            _marketingFeeReceiver,\r\n            _marketingFeeReceiver.balance,\r\n            balanceOf(_marketingFeeReceiver)\r\n        );\r\n    }\r\n\r\n    function manualSwap() external authorized {\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            payable(_marketingFeeReceiver).transfer(address(this).balance);\r\n        }\r\n\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapExactTokensForETH(tokenBalance);\r\n        }\r\n    }\r\n\r\n    function swapExactTokensForETH(uint256 contractBalance) private {\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(getWETH());\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"Status\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"types\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numbers\",\"type\":\"uint256\"}],\"name\":\"StorageData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AMMPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_structAirdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"friends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"socials\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holders\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimHolder\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAirdropFriends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAirdropHolders500\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAirdropSocials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getAdrBalances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAirdrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceAirdropADM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingBalances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyBalances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFeeSell\",\"type\":\"uint256\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAirdropsBalanceADM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Wallstreet", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://768d6082ced1cbbf2471704b7f3ee6101844233d49717dc736a8cac05b18f1fa"}