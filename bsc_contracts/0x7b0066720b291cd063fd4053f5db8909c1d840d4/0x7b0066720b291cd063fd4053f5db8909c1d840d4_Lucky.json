{"SourceCode": "//\r\n/* --------------------------------------------------------------------------- */\r\n/*                 This is a simple and interesting contract !                 */\r\n/*       You only need to hold 1,000,000 Lucky(initial value 0.01 BNB)         */\r\n/*       You have a chance to get 1 BNB when contract tax reaches 1 BNB        */\r\n/*                            Initial tax = 30                                 */\r\n/*                After openTrading() 5 minute removeLimit(), Tax = 5          */\r\n/*                    Initial Everyone MaxTotal = 1,000,000                    */\r\n/*                After removeLimit(), MaxTotal = 10,000,000                   */\r\n/*        4/5 Tax to contract, It converts taxes to BNB when anyone sells      */\r\n/*               1/5 Tax to Dev, Will be used to promote the token             */\r\n/*                              100% to LP                                     */    \r\n/*                        Good Lucky Exeryone !!!                              */    \r\n/* --------------------------------------------------------------------------- */\r\n/*                         twitter.com/0xLuckyCoin                             */\r\n/*                            t.me/xLucky_Coin                                 */\r\n/*                             0xLuckyCoin.com                                 */    \r\n/* --------------------------------------------------------------------------- */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Lucky is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                  contract                                  */\r\n    /* -------------------------------------------------------------------------- */\r\n    string private constant _name = unicode\"Lucky Coin\";\r\n    string private constant _symbol = unicode\"LUCKY\";\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => bool) public isLuckyHolder;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address payable private _devWallet;\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 100000000 * 10**_decimals;  //Anyone max hold 10000000 Lucky\r\n    uint256 private constant _MaxTotal = 10000001 * 10**_decimals;      //Anyone max hold 10000000 Lucky\r\n    uint256 private constant _limitMaxTotal = 1000001 * 10**_decimals;   //Anyone max hold 1000000 Lucky before removeLomit()\r\n    uint256 private constant _luckySupply = 1000000 * 10**_decimals;      //Hold 1% and have the opportunity to participate  \r\n    uint256 private constant tokenToETHMINThreshold = 10000 * 10**_decimals;  \r\n    uint256 private constant tokenToETHMAXThreshold = 1000000 * 10**_decimals;  \r\n    uint256 private constant ONE_BNB = 1 * 10**_decimals;                   //Lucky holder reward\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 swapState                                  */\r\n    /* -------------------------------------------------------------------------- */\r\n    uint256 private maxTxAmount;\r\n    bool private tradingOpen = false;\r\n    uint8 private Tax;\r\n    bool private inSwap = false;\r\n    bool private inDraw = false;\r\n    uint256 firstBlock;\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   uniswapV2                                */\r\n    /* -------------------------------------------------------------------------- */\r\n    IPancakeRouter02 private pancakeRouter02;\r\n    address private pancakeV2Pair;\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   events                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event Log(uint256 amount, uint256 gas);\r\n    event received(address sender, uint256 value);\r\n    event fallbackCalled(address sender, uint256 value, bytes data);\r\n\r\n    constructor () {\r\n        Tax = 30;\r\n        maxTxAmount = _limitMaxTotal;\r\n        CurrentRound = 0;\r\n\r\n        _devWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[pancakeV2Pair] = true;\r\n        _isExcludedFromFee[_devWallet] = true;\r\n\r\n        emit MaxTxAmountUpdated(maxTxAmount);\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier lockTheDraw {\r\n        inDraw = true;\r\n        _;\r\n        inDraw = false;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from,address to,uint256 amount) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (!tradingOpen && (from != owner() && from != address(this) && to != owner())) {\r\n            revert(\"Trading not enabled\");\r\n        }\r\n\r\n        uint256 taxAmount = 0;\r\n        uint256 devAmount = 0;//   1/5 taxAmount to dev\r\n        uint256 contractAmount = 0;//   4/5 taxAmount to contract\r\n        if (from != owner() && to != owner()) {\r\n            //buy\r\n            if (from == pancakeV2Pair && to != address(pancakeRouter02) && !_isExcludedFromFee[to] ) {\r\n                require(amount <= maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n                taxAmount = amount.mul(Tax).div(100);\r\n                if (firstBlock + 3  > block.number) {\r\n                    require(!isContract(to));\r\n                }\r\n            }\r\n            //transfer\r\n            if (to != pancakeV2Pair && !_isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n                taxAmount = amount.mul(Tax).div(100);\r\n            }\r\n            //sell\r\n            if(to == pancakeV2Pair && !_isExcludedFromFee[from]){\r\n                taxAmount = amount.mul(Tax).div(100);\r\n            }\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == pancakeV2Pair && tradingOpen && contractTokenBalance > tokenToETHMINThreshold ) {\r\n                uint256 sellAmount = (min(amount,min(contractTokenBalance,tokenToETHMAXThreshold)));\r\n                swapTokensForBNB(sellAmount);   \r\n                updateProgress();\r\n            }\r\n        }\r\n        if(taxAmount > 0){\r\n            devAmount = taxAmount.div(5);//   1/5 taxAmount to dev\r\n            contractAmount = taxAmount.div(5).mul(4);//   4/5 taxAmount to contract\r\n            //transfer Tax to dev\r\n            _balances[_devWallet] = _balances[_devWallet].add(devAmount);\r\n            emit Transfer(from, _devWallet, devAmount);\r\n            //Transfer Tax to contracts\r\n            _balances[address(this)] = _balances[address(this)].add(contractAmount);\r\n            emit Transfer(from, address(this), contractAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n            \r\n        checkHolders(from, to);\r\n\r\n        removeInvalidAddress();\r\n\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter02.WETH();\r\n        _approve((address(this)),address(pancakeRouter02),type(uint256).max);\r\n        pancakeRouter02.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        pancakeRouter02 = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pancakeV2Pair = IPancakeFactory(pancakeRouter02.factory()).createPair(address(this), pancakeRouter02.WETH());\r\n        _approve(address(this), address(pancakeRouter02), type(uint).max);\r\n        pancakeRouter02.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(pancakeV2Pair).approve(address(pancakeRouter02), type(uint).max);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        firstBlock = block.number;\r\n        RoundStartMoney = getContractBNBBalance();\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function removeLimit() public onlyOwner {\r\n        require(tradingOpen == true, \"Must open trading before\");\r\n        Tax = 5;\r\n        maxTxAmount = _MaxTotal;\r\n        emit MaxTxAmountUpdated(maxTxAmount);\r\n    }\r\n\r\n    function getContractBNBBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function devWithdraw(uint256 bnb) public payable {\r\n        require(_msgSender() == _devWallet, \"Only dev\");\r\n        if (address(this).balance >= bnb) {\r\n            payable(_devWallet).transfer(bnb);\r\n\r\n            if (RoundStartMoney > bnb) {\r\n                RoundStartMoney -= bnb;\r\n            } else {\r\n                RoundStartMoney = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    function devWithdrawToken(uint256 token) public {\r\n        require(_msgSender() == _devWallet, \"Only dev\");\r\n        if (balanceOf(address(this)) >= token) {\r\n            _balances[_msgSender()] += token;\r\n            _balances[address(this)] -= token;\r\n            emit Transfer(address(this), _devWallet, token);\r\n        }\r\n    }\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                    lucky                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    uint256 Round;\r\n    address WinnerAddress;\r\n    uint256 drawTime;\r\n    uint256 CurrentRound;\r\n    uint256 RoundStartMoney;\r\n    uint256 progress;\r\n    address[] luckyHolders;\r\n    address[] tempAddress;\r\n\r\n    function checkHolders(address from, address to) private {\r\n        if(from != pancakeV2Pair && from != address(this) && from != address(0)){\r\n            if(_balances[from] <= _luckySupply && isLuckyHolder[from] == true) {\r\n                luckyHolders = removeAddressFromluckyHolders(luckyHolders,from);\r\n                isLuckyHolder[from] = false;\r\n            }\r\n        }\r\n        if(to != pancakeV2Pair && to != address(this) && to != address(0)){\r\n            if(_balances[to] >= _luckySupply && isLuckyHolder[to] == false) {\r\n                luckyHolders.push(to);\r\n                isLuckyHolder[to] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkluckyHolders(\r\n        address[] memory array,\r\n        address checkAddress\r\n    ) private pure returns (bool) {\r\n        uint256 length = array.length;\r\n        bool inLuckyHolders = false;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (array[i] == checkAddress) {\r\n                inLuckyHolders = true;\r\n            }\r\n        }\r\n        return inLuckyHolders;\r\n    }\r\n\r\n    function removeAddressFromluckyHolders(\r\n        address[] memory array,\r\n        address addressToRemove\r\n    ) private pure returns (address[] memory) {\r\n        uint256 length = array.length;\r\n        address[] memory tempHolds = new address[](length);\r\n        uint256 resultIndex = 0;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (array[i] != addressToRemove) {\r\n                tempHolds[resultIndex] = array[i];\r\n                resultIndex++;\r\n            }\r\n        }\r\n\r\n        return tempHolds;\r\n    }\r\n\r\n    function removeInvalidAddress() private {\r\n        uint256 length = luckyHolders.length;\r\n        tempAddress = new address[](length);\r\n        uint256 validAddressIndex = 0;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (luckyHolders[i] != address(0) && luckyHolders[i] != pancakeV2Pair && luckyHolders[i] != address(0x000000000000000000000000000000000000dEaD)) {\r\n                tempAddress[validAddressIndex] = luckyHolders[i];\r\n                validAddressIndex++;\r\n            }\r\n        }\r\n\r\n        for (uint256 d = 0; d < length - validAddressIndex; d++) {\r\n            tempAddress.pop();\r\n        }  \r\n        luckyHolders = tempAddress;\r\n    }\r\n\r\n\r\n\r\n    function whoIsWinner()external view returns (uint256, uint256, address){\r\n        return (Round, drawTime, WinnerAddress);\r\n    }\r\n\r\n    function updateProgress() private returns (uint256) {\r\n        progress = getContractBNBBalance().sub(RoundStartMoney).mul(10000).div(ONE_BNB);\r\n        if (progress > 10000) progress = 10000;\r\n        return (progress);\r\n    }\r\n\r\n    function showProgress() public view returns (uint256) {\r\n        return (progress);\r\n    }\r\n\r\n    function showHolds() public view returns (address[] memory Holds) {\r\n        return (luckyHolders);\r\n    }    \r\n\r\n    function getWinner() private view returns (address) {\r\n        uint256 randomNumber = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp,\r\n                    msg.sender,\r\n                    luckyHolders.length\r\n                )\r\n            )\r\n        );\r\n        uint256 LuckyNum = randomNumber % luckyHolders.length;\r\n        return luckyHolders[LuckyNum];\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                               Draw !!!                                     */\r\n    /*                When progress = 10000 and Tax to BNB > 1BNB                 */\r\n    /*                        Anyone can active Draw()                            */\r\n    /*   The contract will randomly select a holder( >=1% total) and send 1BNB    */\r\n    /* -------------------------------------------------------------------------- */\r\n    function Draw() public payable lockTheDraw returns (uint256, address) {\r\n        require(luckyHolders.length > 0,\"Lucky holders is empty\");\r\n\r\n        if (progress >= 10000 && getContractBNBBalance() > ONE_BNB) {\r\n            removeInvalidAddress();\r\n            Round = CurrentRound + 1;\r\n            WinnerAddress = getWinner();\r\n            drawTime = block.timestamp;\r\n            //send 1 BNB\r\n            payable(WinnerAddress).transfer(ONE_BNB);\r\n\r\n            RoundStartMoney = getContractBNBBalance();\r\n            progress = 0;\r\n\r\n            return (Round, WinnerAddress);\r\n        } else return (Round, WinnerAddress);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit Log(msg.value, gasleft());\r\n    }\r\n\r\n    fallback() external payable {\r\n        emit fallbackCalled(_msgSender(), msg.value, msg.data);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fallbackCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"received\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"Draw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"devWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"devWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBNBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLuckyHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showHolds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"Holds\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"showProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whoIsWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Lucky", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://26f9c1bbcb3cb8e961c1f35340ea6dd2dd2c5a4d2dea80206cbc98412002229b"}