{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-06-23\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract HoneyXLiquidity is Ownable {\r\n    IERC20 private _honeyx;\r\n\r\n    constructor(IERC20 honeyx, address owner) {\r\n        _honeyx = honeyx;\r\n        transferOwnership(owner);\r\n    }\r\n\r\n    function withdrawLiquidityTax(uint256 amount) public onlyOwner {\r\n        _honeyx.transfer(owner(), amount);\r\n    }\r\n}\r\n\r\ncontract HoneyX is Ownable, IERC20, IERC20Metadata {\r\n    using Address for address;\r\n\r\n    uint256 private _liquidityFee;\r\n    uint256 private _maxTransferAmount;\r\n    bool private _tokenIsInitialized;\r\n\r\n    mapping(address => uint256) private _holders;\r\n    mapping(uint256 => address) private _holdersPosition;\r\n    uint256 private _lastHoldersPosition = 0;\r\n\r\n    IUniswapV2Router02 _uniswapV2Router =\r\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //pancakeswap v2 router\r\n    address private _pairAddress;\r\n    HoneyXLiquidity _liquidityTaxAddress;\r\n\r\n    mapping(address => uint8) private _devPosition;\r\n    mapping(uint8 => address) private _dev;\r\n    // mapping(uint8 => uint256) private _totalAmountClaimAbleByDevPosition;\r\n    // mapping(uint8 => uint256[2][]) private _claimableAmountForDevByPosition;\r\n    mapping(address => bool) private _disableTaxForAddress;\r\n    bool private _is_init_dev = false;\r\n\r\n    struct ClaimableTokenByDev {\r\n        uint256 timestampStart;\r\n        uint256 timestamp;\r\n        uint8 fornightlyCount;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct DevAndAmount {\r\n        address devAddress;\r\n        uint256 totalAmountClaimableByDev;\r\n        uint256 totalSentFirst;\r\n    }\r\n    DevAndAmount[] private devAddressesx;\r\n\r\n    mapping(uint8 => ClaimableTokenByDev) private _claimableTokenByDev;\r\n    uint256 claimableTimestamp = 1209600;\r\n\r\n    uint8 private _maxDev = 35;\r\n\r\n    uint256 private _airdropTotal;\r\n    bool private _disableTax;\r\n    bool private _isTaxing;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    event StringFailure(string stringFailure);\r\n    event BytesFailure(bytes bytesFailure);\r\n\r\n    string private _name = \"HoneyX\";\r\n    string private _symbol = \"HONEYX\";\r\n\r\n    constructor() {\r\n        _mint(address(this), 100000000000 * 10**decimals());\r\n        _tokenIsInitialized = false;\r\n\r\n        _liquidityFee = 10;\r\n        _setMaxTransferAmount(2);\r\n\r\n        // Create a uniswap pair for this new token\r\n        _pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            _uniswapV2Router.WETH()\r\n        );\r\n        _tokenIsInitialized = false;\r\n        _init1();\r\n    }\r\n\r\n    function _init1() private onlyOwner {\r\n        require(!_tokenIsInitialized, \"you can only initialize once\");\r\n        _liquidityTaxAddress = new HoneyXLiquidity(this, owner());\r\n        _airdropTotal = (_totalSupply * 600) / 10000;\r\n        _disableTax = true;\r\n        _disableTaxForAddress[owner()] = true;\r\n\r\n        _transfer_without_tax(\r\n            address(this),\r\n            0x0b967f76D15aBf9Fd32f584c905E96Ac38eE69Fd, // marketing\r\n            (_totalSupply * 700) / 10000\r\n        );\r\n        _transfer_without_tax(\r\n            address(this),\r\n            0x7379F33676A47F3C1DB2aA16C0fd5c89D255826d, // product development\r\n            (_totalSupply * 700) / 10000\r\n        );\r\n        _transfer_without_tax(\r\n            address(this),\r\n            0x6520a4bEB513B96f9b2081874BC777229AeA0A5b, // liquidity\r\n            (_totalSupply * 6000) / 10000\r\n        );\r\n        _disableTaxForAddress[\r\n            0x6520a4bEB513B96f9b2081874BC777229AeA0A5b\r\n        ] = true;\r\n\r\n        //devs\r\n\r\n        uint256 totalAmountClaimableByDev = (_totalSupply * 150) / 10000;\r\n        uint256 amountSentFirst = (totalAmountClaimableByDev * 2500) / 10000;\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0xD1257dd8e2b87338f1618BF04Bba37a1C477cC78,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //William\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x2D570751c74D6367B79F97934AA4eDFAf83ebEa9,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //Ashwin\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x75e521Ed7A25f1432CA0a4BB6dE6Bfd6af40954A,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //Andrew\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x8E78C3659758f287118A29D72049BD128e122548,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //John Li\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0xd8d875805a4d0A06eFFCBcCb573c28fAA56DD53B,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //John C\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0xBe2A4C9b224DBc8730e06FEC727a1709d1641bdB,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //Jarrad\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0xaDcF9f66D95a757eF8a740c597973c5c02049F6E,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //Perry\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x1aEB746f7b22C19DdA2f53eE00e2d6e5352930fc,\r\n                totalAmountClaimableByDev,\r\n                amountSentFirst\r\n            ) //Christina\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x3439439F4Cc4F96106688Cb98aca45C4ad3f4C0C,\r\n                (_totalSupply * 50) / 10000,\r\n                0\r\n            ) //Anthony\r\n        );\r\n        //placeholder 1.5%\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000001,\r\n                (_totalSupply * 150) / 10000,\r\n                0\r\n            ) //placeholder James\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000002,\r\n                (_totalSupply * 150) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n        //end-placeholder 1.5%\r\n\r\n        //placeholder 0.5%\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000003,\r\n                (_totalSupply * 50) / 10000,\r\n                0\r\n            ) //placeholder Sam\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000004,\r\n                (_totalSupply * 50) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000005,\r\n                (_totalSupply * 50) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n        //end-placeholder 0.5%\r\n\r\n        //placeholder 0.25%\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000006,\r\n                (_totalSupply * 25) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000007,\r\n                (_totalSupply * 25) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000008,\r\n                (_totalSupply * 25) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000009,\r\n                (_totalSupply * 25) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000010,\r\n                (_totalSupply * 25) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000011,\r\n                (_totalSupply * 25) / 10000,\r\n                0\r\n            ) //placeholder Hire\r\n        );\r\n\r\n        //end-placeholder 0.25%\r\n\r\n        //placeholder 0.10%\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000012,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000013,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000014,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000015,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000016,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000017,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000018,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000019,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000020,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000021,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000022,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000023,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000024,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000025,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        devAddressesx.push(\r\n            DevAndAmount(\r\n                0x0000000000000000000000000000000000000026,\r\n                (_totalSupply * 10) / 10000,\r\n                0\r\n            ) //placeholder brand ambasador\r\n        );\r\n        //end-placeholder 0.10%\r\n\r\n        //end-devs\r\n\r\n        _disableTax = false;\r\n        _tokenIsInitialized = true;\r\n    }\r\n\r\n    function _init_dev() public onlyOwner {\r\n        require(!_is_init_dev, \"you can only call init_dev once\");\r\n        for (uint8 i = 0; i < devAddressesx.length; i++) {\r\n            uint8 position = i + 1;\r\n            _dev[position] = devAddressesx[i].devAddress;\r\n            _devPosition[devAddressesx[i].devAddress] = position;\r\n            if (devAddressesx[i].totalSentFirst > 0) {\r\n                _transfer_without_tax(\r\n                    address(this),\r\n                    devAddressesx[i].devAddress,\r\n                    devAddressesx[i].totalSentFirst\r\n                );\r\n            }\r\n\r\n            _claimableTokenByDev[position] = ClaimableTokenByDev({\r\n                timestampStart: block.timestamp,\r\n                timestamp: block.timestamp + claimableTimestamp,\r\n                fornightlyCount: 1,\r\n                amount: (devAddressesx[i].totalAmountClaimableByDev -\r\n                    devAddressesx[i].totalSentFirst) / 24\r\n            });\r\n        }\r\n        _is_init_dev = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (\r\n            !_disableTax && sender != address(this) && recipient != _pairAddress\r\n        ) {\r\n            require(\r\n                amount < _maxTransferAmount,\r\n                \"Max transfer amount is exceeded\"\r\n            );\r\n        }\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        if (_disableTaxForAddress[recipient] || _disableTaxForAddress[sender]) {\r\n            _disableTax = true;\r\n        }\r\n\r\n        if (_disableTax == false) {\r\n            if (recipient == _pairAddress) {\r\n                // buy\r\n                _disableTax = true;\r\n\r\n                uint256 amountToLiquidity = (amount * _liquidityFee * 10**2) /\r\n                    10000;\r\n\r\n                _transfer_without_tax(sender, address(this), amountToLiquidity);\r\n                _sendTaxToLiquidity(amountToLiquidity);\r\n\r\n                unchecked {\r\n                    _balances[sender] = senderBalance - amount;\r\n                }\r\n                _balances[recipient] += amount - amountToLiquidity;\r\n\r\n                emit Transfer(sender, recipient, amount - amountToLiquidity);\r\n                _disableTax = false;\r\n            } else {\r\n                if (sender == _pairAddress) {\r\n                    // sell\r\n                    _disableTax = true;\r\n\r\n                    unchecked {\r\n                        _balances[sender] = senderBalance - amount;\r\n                    }\r\n                    _balances[recipient] += amount;\r\n\r\n                    emit Transfer(sender, recipient, amount);\r\n\r\n                    uint256 amountToLiquidity = (amount *\r\n                        _liquidityFee *\r\n                        10**2) / 10000;\r\n                    _transfer_without_tax(\r\n                        recipient,\r\n                        address(this),\r\n                        amountToLiquidity\r\n                    );\r\n\r\n                    _sendTaxToLiquidity(amountToLiquidity);\r\n                    _disableTax = false;\r\n                } else {\r\n                    unchecked {\r\n                        _balances[sender] = senderBalance - amount;\r\n                    }\r\n                    _balances[recipient] += amount;\r\n\r\n                    emit Transfer(sender, recipient, amount);\r\n                }\r\n            }\r\n        } else {\r\n            unchecked {\r\n                _balances[sender] = senderBalance - amount;\r\n            }\r\n            _balances[recipient] += amount;\r\n\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        _disableTax = false;\r\n    }\r\n\r\n    function _transfer_without_tax(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n\r\n    function _sendTaxToLiquidity(uint256 amount) private {\r\n        _transfer_without_tax(\r\n            address(this),\r\n            address(_liquidityTaxAddress),\r\n            amount\r\n        );\r\n    }\r\n\r\n    function setLiquidityFee(uint256 fee) public onlyOwner {\r\n        require(fee > 0, \"must not be 0\");\r\n        _liquidityFee = fee;\r\n    }\r\n\r\n    function getTotalHolders() public view returns (uint256) {\r\n        return _lastHoldersPosition;\r\n    }\r\n\r\n    function setMaxTransferAmount(uint256 percent) public onlyOwner {\r\n        require(percent > 0, \"must not be 0\");\r\n        _setMaxTransferAmount(percent);\r\n    }\r\n\r\n    function _setMaxTransferAmount(uint256 percent) private {\r\n        _maxTransferAmount = (_totalSupply * percent * 10**2) / 10000;\r\n    }\r\n\r\n    function maxTransferAmount() public view returns (uint256) {\r\n        return _maxTransferAmount;\r\n    }\r\n\r\n    function claimTokenForDev() public {\r\n        uint8 yourPosition = _devPosition[_msgSender()];\r\n        require(yourPosition > 0, \"You cannot claim the token !\");\r\n        require(\r\n            _claimableTokenByDev[yourPosition].fornightlyCount <= 24,\r\n            \"You can't claim anymore\"\r\n        );\r\n        require(\r\n            block.timestamp >= _claimableTokenByDev[yourPosition].timestamp,\r\n            \"You can't claim yet\"\r\n        );\r\n        _transfer_without_tax(\r\n            address(this),\r\n            _msgSender(),\r\n            _claimableTokenByDev[yourPosition].amount\r\n        );\r\n        _claimableTokenByDev[yourPosition].fornightlyCount =\r\n            _claimableTokenByDev[yourPosition].fornightlyCount +\r\n            1;\r\n        _claimableTokenByDev[yourPosition].timestamp =\r\n            _claimableTokenByDev[yourPosition].timestampStart +\r\n            (claimableTimestamp *\r\n                _claimableTokenByDev[yourPosition].fornightlyCount);\r\n        if (_claimableTokenByDev[yourPosition].fornightlyCount > 24) {\r\n            _claimableTokenByDev[yourPosition].amount = 0;\r\n        }\r\n    }\r\n\r\n    function getClaimableTokenAmount(address devAddress)\r\n        public\r\n        view\r\n        returns (ClaimableTokenByDev memory)\r\n    {\r\n        uint8 devPosition = _devPosition[devAddress];\r\n        require(devPosition > 0, \"You cannot claim the token !\");\r\n        return _claimableTokenByDev[devPosition];\r\n    }\r\n\r\n    function replaceDev(address previousAddress, address newDevAddress)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            _devPosition[previousAddress] > 0,\r\n            \"Dev not exist or already removed\"\r\n        );\r\n        require(\r\n            _devPosition[newDevAddress] == 0,\r\n            \"Dev address is already exist\"\r\n        );\r\n        uint8 lastDevPosition = _devPosition[previousAddress];\r\n        _dev[lastDevPosition] = newDevAddress;\r\n        _devPosition[newDevAddress] = lastDevPosition;\r\n        _claimableTokenByDev[lastDevPosition].timestampStart = block.timestamp;\r\n    }\r\n\r\n    function airdrop(\r\n        address[] memory airdropAddresses,\r\n        uint256[] memory amounts\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < airdropAddresses.length; i++) {\r\n            require(_airdropTotal > 0, \"empty airdrop amount\");\r\n            _transfer_without_tax(\r\n                address(this),\r\n                airdropAddresses[i],\r\n                amounts[i]\r\n            );\r\n            _airdropTotal = _airdropTotal - amounts[i];\r\n        }\r\n    }\r\n\r\n    function liquidityFee() public view returns (uint256) {\r\n        return _liquidityFee;\r\n    }\r\n\r\n    function airdropTotal() public view returns (uint256) {\r\n        return _airdropTotal;\r\n    }\r\n\r\n    function getDevPosition(address devAddress) public view returns (uint8) {\r\n        return _devPosition[devAddress];\r\n    }\r\n\r\n    function withdrawAnyToken(IERC20 tokenAddress, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            tokenAddress.balanceOf(address(this)) > 0,\r\n            \"token balance is 0\"\r\n        );\r\n        SafeERC20.safeTransfer(tokenAddress, owner(), amount);\r\n    }\r\n\r\n    function withdrawEth(uint256 amount) public onlyOwner {\r\n        require(address(this).balance > 0, \"eth balance is 0\");\r\n        Address.sendValue(payable(owner()), amount);\r\n    }\r\n\r\n    function liquidityTaxAddress() public view returns (address) {\r\n        return address(_liquidityTaxAddress);\r\n    }\r\n\r\n    function disableTaxForAddress(address theAddress) public onlyOwner {\r\n        _disableTaxForAddress[theAddress] = true;\r\n    }\r\n\r\n    function enableTaxForAddress(address theAddress) public onlyOwner {\r\n        _disableTaxForAddress[theAddress] = false;\r\n    }\r\n\r\n    function devAddresses() public view returns (DevAndAmount[] memory) {\r\n        return devAddressesx;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bytesFailure\",\"type\":\"bytes\"}],\"name\":\"BytesFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"stringFailure\",\"type\":\"string\"}],\"name\":\"StringFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_init_dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"airdropAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokenForDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountClaimableByDev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSentFirst\",\"type\":\"uint256\"}],\"internalType\":\"struct HoneyX.DevAndAmount[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"disableTaxForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"enableTaxForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"getClaimableTokenAmount\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestampStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fornightlyCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct HoneyX.ClaimableTokenByDev\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"}],\"name\":\"getDevPosition\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTaxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevAddress\",\"type\":\"address\"}],\"name\":\"replaceDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxTransferAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HoneyX", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://39a45e2091d2e5046681bf647c24433415324bfc6d3916672f0e737ff376c510"}