{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.19;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\t \r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t\t  \r\n        _owner = newOwner;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  \r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        assembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n        return size > 0;\r\n    }\r\n\r\n    \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage)internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\tfunction verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                \r\n\r\n\t\t\t\tassembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\t\t\t\t \r\n\t\t\t\t\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\t\t\t\t \r\n\t\t\t\t\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \t\t\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\t\t\t\t \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t \r\n\t\t\t\t\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\t\t\t\t \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t \r\n\t\t\t\t\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        \r\n        \r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            \r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface CommonInterface {\r\n\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n}\r\n\r\nstruct Plan {\r\n  uint256 minAmount;\r\n  uint256 maxAmount;\r\n  uint256 lockDuration;\r\n  uint16 discountPromille;\r\n  uint8 monthlyPercent;\r\n  uint8 referralPromille;\r\n}\r\n\r\nstruct Purchase {\r\n  uint8 planIdx;\r\n  uint256 boughtTokens;\r\n  uint256 buyPrice;\r\n  uint256 tokensReceived;\r\n  uint256 time;\r\n  uint8 monthlyRewardsReceived;\r\n\r\n  bool monthlyRewardsClaimed;\r\n  bool isClaimed;\r\n}\r\n\r\nstruct RefStats {\r\n  uint256 referralsNumber;\r\n  mapping(address => bool) isReferral;\r\n  uint256 referralReward;\r\n}\r\n\r\ncontract TokenVestingSale is Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  address public ADMIN_ADDRESS  = 0x0000000000000000000000000000000000000000;\r\n  address public ORACLE_ADDRESS = 0x0000000000000000000000000000000000000000;\r\n\r\n\r\n  address public defRefAddress;\r\n  address public tokenContractAddress;\r\n\r\n  Plan[] public plans;\r\n  uint256 public tokenPrice = 333333333333; \r\n\r\n  mapping(address => Purchase[]) purchases;\r\n\r\n  uint256 public constant CLAIMING_PERIOD = 30 days;\r\n\r\n  mapping(address => RefStats) public refStats;\r\n\r\n  event TokenPriceChanged(address indexed initiator, uint256 price, uint256 time);\r\n\r\n  event TokensBought(address indexed buyer, uint8 indexed planIdx, uint256 indexed purchaseIdx, uint256 tokensAmount, uint256 tokenPrice, uint256 time);\r\n  event MonthlyClaimReceived(address indexed recipient, uint256 indexed purchaseIdx, uint256 rewardsNumber, uint256 tokensAmount, uint256 time);\r\n  event ClaimReceived(address indexed recipient, uint256 indexed purchaseIdx, uint256 tokensAmount, uint256 time);\r\n  event ReferralRewardReceived(address indexed buyer, address indexed referrer, uint8 indexed planIdx, uint256 rewardAmount, uint256 time);\r\n\r\n  constructor(address _defRefAddress, address _tokenContractAddress) {\r\n    defRefAddress = _defRefAddress;\r\n    tokenContractAddress = _tokenContractAddress;\r\n\r\n    uint256 SHORT_DURATION = 180 * 24 * 3600;\r\n    uint256 LONG_DURATION = 2 * SHORT_DURATION;\r\n  \r\n\r\n    plans.push(Plan({\r\n      minAmount: 0.05e18, maxAmount: 5e18, lockDuration: SHORT_DURATION, discountPromille: 30, monthlyPercent: 10, referralPromille: 30\r\n    }));\r\n    plans.push(Plan({\r\n      minAmount: 5e18, maxAmount: 25e18, lockDuration: SHORT_DURATION, discountPromille: 50, monthlyPercent: 10, referralPromille: 40\r\n    }));\r\n    plans.push(Plan({\r\n      minAmount: 25e18, maxAmount: 250e18, lockDuration: SHORT_DURATION, discountPromille: 70, monthlyPercent: 10, referralPromille: 50\r\n    }));\r\n    plans.push(Plan({\r\n      minAmount: 0.05e18, maxAmount: 5e18, lockDuration: LONG_DURATION, discountPromille: 90, monthlyPercent: 5, referralPromille: 30\r\n    }));\r\n    plans.push(Plan({\r\n      minAmount: 5e18, maxAmount: 25e18, lockDuration: LONG_DURATION, discountPromille: 120, monthlyPercent: 5, referralPromille: 40\r\n    }));    \r\n    plans.push(Plan({\r\n      minAmount: 25e18, maxAmount: 250e18, lockDuration: LONG_DURATION, discountPromille: 150, monthlyPercent: 5, referralPromille: 50\r\n    }));\r\n    plans.push(Plan({\r\n      minAmount: 0.05e18, maxAmount: 250e18, lockDuration: 90 * 24 * 3600, discountPromille: 0, monthlyPercent: 5, referralPromille: 50\r\n    }));\r\n    plans.push(Plan({\r\n      minAmount: 0.05e18, maxAmount: 250e18, lockDuration: 60 * 24 * 3600, discountPromille: 0, monthlyPercent: 10, referralPromille: 30\r\n    }));\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n  }\r\n\r\n  function buy(uint8 planIdx, address referrer) external payable {\r\n    \r\n    require(planIdx < plans.length, \"Invalid plan Idx\");\r\n    require(msg.value >= plans[planIdx].minAmount, \"BNB amount too low\");\r\n    require(msg.value < plans[planIdx].maxAmount || (msg.value == plans[planIdx].maxAmount && (planIdx >= 5 || planIdx == 2) ), \"BNB amount too high\");\r\n\r\n    payable(owner()).transfer(msg.value);\r\n    \r\n    uint256 tokensAmount = msg.value * 1e18 * 1000 / (1000 - plans[planIdx].discountPromille) / tokenPrice;\r\n    purchases[msg.sender].push(Purchase({\r\n      planIdx: planIdx,\r\n      boughtTokens: tokensAmount,\r\n      buyPrice: tokenPrice,\r\n      tokensReceived: 0,\r\n      time: block.timestamp,\r\n      monthlyRewardsReceived: 0,\r\n\r\n      monthlyRewardsClaimed: false,\r\n      isClaimed: false\r\n    }));\r\n\r\n    CommonInterface(tokenContractAddress).transferFrom(owner(), address(this), tokensAmount);\r\n\r\n    emit TokensBought(msg.sender, planIdx, purchases[msg.sender].length - 1, tokensAmount, tokenPrice, block.timestamp);\r\n\r\n\t\r\n    if (referrer == address(0x0)) {\r\n      referrer = defRefAddress;\r\n    }\r\n\r\n    if (referrer != address(0x0) && referrer != msg.sender && referrer != owner()) {\r\n      uint256 refReward = tokensAmount * plans[planIdx].referralPromille / 1000;\r\n\r\n      CommonInterface(tokenContractAddress).transferFrom(owner(), referrer, refReward);\r\n\r\n      emit ReferralRewardReceived(msg.sender, referrer, planIdx, refReward, block.timestamp);\r\n\r\n      if (!refStats[referrer].isReferral[msg.sender]) {\r\n        refStats[referrer].isReferral[msg.sender] = true;\r\n        refStats[referrer].referralsNumber++;\r\n      }\r\n      refStats[referrer].referralReward+= refReward;\r\n    }\r\n  }\r\n\r\n  function claimMonthlyTokens() private {\r\n    uint256 totalTokensAmount;\r\n\r\n    for (uint256 purchaseIdx = 0; purchaseIdx < purchases[msg.sender].length; purchaseIdx++) {\r\n      if (purchases[msg.sender][purchaseIdx].monthlyRewardsClaimed || purchases[msg.sender][purchaseIdx].isClaimed) {\r\n        continue;\r\n      }\r\n      if (purchases[msg.sender][purchaseIdx].tokensReceived >= purchases[msg.sender][purchaseIdx].boughtTokens) {\r\n        continue;\r\n      }\r\n\r\n      Plan memory plan = plans[purchases[msg.sender][purchaseIdx].planIdx];\r\n\r\n      uint256 finalTime = block.timestamp;\r\n      if (finalTime > purchases[msg.sender][purchaseIdx].time + plan.lockDuration) {\r\n        finalTime = purchases[msg.sender][purchaseIdx].time + plan.lockDuration;\r\n      }\r\n      uint8 months = uint8((finalTime - purchases[msg.sender][purchaseIdx].time) / CLAIMING_PERIOD);\r\n      if (months > purchases[msg.sender][purchaseIdx].monthlyRewardsReceived) {\r\n        uint8 rewardsNumber = months - purchases[msg.sender][purchaseIdx].monthlyRewardsReceived;\r\n        if (rewardsNumber == 0) {\r\n          continue;\r\n        }\r\n\r\n        uint256 percent = plan.monthlyPercent * rewardsNumber;\r\n        uint256 tokensAmount = purchases[msg.sender][purchaseIdx].boughtTokens * percent / 100;\r\n\r\n        if (purchases[msg.sender][purchaseIdx].tokensReceived + tokensAmount > purchases[msg.sender][purchaseIdx].boughtTokens) {\r\n          tokensAmount = purchases[msg.sender][purchaseIdx].boughtTokens - purchases[msg.sender][purchaseIdx].tokensReceived;\r\n\r\n          purchases[msg.sender][purchaseIdx].monthlyRewardsClaimed = true;\r\n          purchases[msg.sender][purchaseIdx].isClaimed = true;\r\n        }\r\n\r\n        purchases[msg.sender][purchaseIdx].monthlyRewardsReceived+= rewardsNumber;\r\n        purchases[msg.sender][purchaseIdx].tokensReceived+= tokensAmount;\r\n        totalTokensAmount+= tokensAmount;\r\n\r\n        if (block.timestamp >= purchases[msg.sender][purchaseIdx].time + plan.lockDuration) {\r\n          purchases[msg.sender][purchaseIdx].monthlyRewardsClaimed = true;\r\n        }\r\n\r\n        emit MonthlyClaimReceived(msg.sender, purchaseIdx, rewardsNumber, tokensAmount, block.timestamp);\r\n      }\r\n    }\r\n\r\n    if (totalTokensAmount > 0) {\r\n      IERC20(tokenContractAddress).safeTransfer(msg.sender, totalTokensAmount);\r\n    }\r\n  }\r\n\r\n  function claimTokens() external {\r\n    claimMonthlyTokens();\r\n\r\n    uint256 totalTokensAmount;\r\n\r\n    for (uint256 purchaseIdx = 0; purchaseIdx < purchases[msg.sender].length; purchaseIdx++) {\r\n      if (purchases[msg.sender][purchaseIdx].isClaimed) {\r\n        continue;\r\n      }\r\n      if (purchases[msg.sender][purchaseIdx].tokensReceived >= purchases[msg.sender][purchaseIdx].boughtTokens) {\r\n        continue;\r\n      }\r\n\r\n      Plan memory plan = plans[purchases[msg.sender][purchaseIdx].planIdx];\r\n\r\n      if (block.timestamp >= purchases[msg.sender][purchaseIdx].time + plan.lockDuration) {\r\n        uint256 tokensAmount = purchases[msg.sender][purchaseIdx].boughtTokens - purchases[msg.sender][purchaseIdx].tokensReceived;\r\n        if (tokensAmount  == 0) {\r\n          continue;\r\n        }\r\n\r\n        purchases[msg.sender][purchaseIdx].tokensReceived= purchases[msg.sender][purchaseIdx].boughtTokens;\r\n        totalTokensAmount+= tokensAmount;\r\n\r\n        purchases[msg.sender][purchaseIdx].monthlyRewardsClaimed = true;\r\n        purchases[msg.sender][purchaseIdx].isClaimed = true;\r\n\r\n        emit ClaimReceived(msg.sender, purchaseIdx, tokensAmount, block.timestamp);\r\n      }\r\n    }\r\n\r\n    if (totalTokensAmount > 0) {\r\n      IERC20(tokenContractAddress).safeTransfer(msg.sender, totalTokensAmount);\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  modifier onlyFromList(address[3] memory _addresses) {\r\n    bool isInList = false;\r\n    for (uint8 i = 0; i < 3; i++) {\r\n      if (msg.sender == _addresses[i] && _addresses[i] != address(0x0)) {\r\n        isInList = true;\r\n        break;\r\n      }\r\n    }\r\n    require(isInList, \"Only permitted address can call this method\");\r\n    _;\r\n  }\r\n\r\n  function changeTokenPrice(uint256 price) external onlyFromList([owner(), ADMIN_ADDRESS, ORACLE_ADDRESS]) {\r\n    require(price > 1e9, \"Set token price in wei\");\r\n\r\n    tokenPrice = price;\r\n\r\n    emit TokenPriceChanged(msg.sender, tokenPrice, block.timestamp);\r\n  }\r\n\r\n  function setAdminAddress(address adminAddress) external onlyOwner {\r\n    require(adminAddress != address(0x0), \"Invalid admin adderess\");\r\n\r\n    ADMIN_ADDRESS = adminAddress;\r\n  }\r\n\r\n  function setOracleAddress(address oracleAddress) external onlyOwner {\r\n    require(oracleAddress != address(0x0), \"Invalid oracle adderess\");\r\n\r\n    ORACLE_ADDRESS = oracleAddress;\r\n  }\r\n\r\n  function changeDiscountPromille(uint8 planIdx, uint16 discountPromille) external onlyOwner {\r\n    require(planIdx < 8, \"Invalid plan idx\");\r\n    require(discountPromille < 1000, \"Invalid discount\");\r\n\r\n    plans[planIdx].discountPromille = discountPromille;\r\n  }\r\n\r\n  function changeMonthlyPercent(uint8 planIdx, uint8 monthlyPercent) external onlyOwner {\r\n    require( planIdx > 6 && planIdx < 9, \"Invalid plan idx\");\r\n    require(monthlyPercent <= 100, \"Invalid percent\");\r\n\r\n    plans[planIdx].monthlyPercent = monthlyPercent;\r\n  }\r\n\r\n  function changeReferralPromille(uint8 planIdx, uint8 referralPromille) external onlyOwner {\r\n    require( planIdx > 6 && planIdx < 9, \"Invalid plan idx\");\r\n    require(referralPromille <= 100, \"Invalid promile\");\r\n\r\n    plans[planIdx].referralPromille = referralPromille;\r\n  }\r\n\r\nfunction changeLockDuration(uint8 planIdx, uint256 lockDuration) external onlyOwner {\r\n    require( planIdx > 6 && planIdx < 9, \"Invalid plan idx\");\r\n    require(lockDuration <= 180 * 24 * 3600, \"Invalid duration\");\r\n\r\n    plans[planIdx].lockDuration = lockDuration;\r\n  }\r\n\r\n  function retrieveTokens(address _tokenAddress, uint256 _amount) external onlyOwner {\r\n    require(_amount > 0, \"Invalid amount\");\r\n    require(_tokenAddress != tokenContractAddress, \"You can't retrieve BNDR tokens\");\r\n\r\n    IERC20(_tokenAddress).safeTransfer(owner(), _amount);\r\n  }\r\n\r\n  function viewUserPurchases(address userAddress) view external returns (Purchase[] memory ){\r\n     return purchases[userAddress];\r\n  }\r\n\r\n  function viewAllPlans() view external returns (Plan[] memory){\r\n    Plan[] memory allPlans = new Plan[](plans.length);\r\n    for(uint8 i = 0; i < plans.length; i++){\r\n      allPlans[i] = plans[i];\r\n    }\r\n    return allPlans;\r\n\r\n  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defRefAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MonthlyClaimReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokenPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIMING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"discountPromille\",\"type\":\"uint16\"}],\"name\":\"changeDiscountPromille\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"changeLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"monthlyPercent\",\"type\":\"uint8\"}],\"name\":\"changeMonthlyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referralPromille\",\"type\":\"uint8\"}],\"name\":\"changeReferralPromille\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defRefAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"discountPromille\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"monthlyPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referralPromille\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referralsNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewAllPlans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"discountPromille\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"monthlyPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"referralPromille\",\"type\":\"uint8\"}],\"internalType\":\"struct Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"viewUserPurchases\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"planIdx\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"boughtTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"monthlyRewardsReceived\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"monthlyRewardsClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenVestingSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000086adc8c85b3f7bee2f5dc0315c82fd22976c80b8000000000000000000000000384b520ff25fec300cb612f0dddab92cb491c870", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f2f3d783891483c42c64ac9b0bef9c07c58dd5eb2314ede6c100b29008d67425"}