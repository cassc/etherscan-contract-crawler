{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n/**\r\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\r\n */\r\ninterface IAccessControlEnumerable is IAccessControl {\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\r\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\r\n */\r\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\r\n        return _roleMembers[role].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\r\n        return _roleMembers[role].length();\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_grantRole} to track enumerable memberships\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual override {\r\n        super._grantRole(role, account);\r\n        _roleMembers[role].add(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload {_revokeRole} to track enumerable memberships\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual override {\r\n        super._revokeRole(role, account);\r\n        _roleMembers[role].remove(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides a function to batch together multiple calls in a single external call.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract Multicall {\r\n    /**\r\n     * @dev Receives and executes a batch of function calls on this contract.\r\n     */\r\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\r\n        results = new bytes[](data.length);\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\r\n        }\r\n        return results;\r\n    }\r\n}\r\n\r\ncontract KeeperBase {\r\n  error OnlySimulatedBackend();\r\n\r\n  /**\r\n   * @notice method that allows it to be simulated via eth_call by checking that\r\n   * the sender is the zero address.\r\n   */\r\n  function preventExecution() internal view {\r\n    if (tx.origin != address(0)) {\r\n      revert OnlySimulatedBackend();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice modifier that allows it to be simulated via eth_call by checking\r\n   * that the sender is the zero address.\r\n   */\r\n  modifier cannotExecute() {\r\n    preventExecution();\r\n    _;\r\n  }\r\n}\r\n\r\ninterface KeeperCompatibleInterface {\r\n  /**\r\n   * @notice method that is simulated by the keepers to see if any work actually\r\n   * needs to be performed. This method does does not actually need to be\r\n   * executable, and since it is only ever simulated it can consume lots of gas.\r\n   * @dev To ensure that it is never called, you may want to add the\r\n   * cannotExecute modifier from KeeperBase to your implementation of this\r\n   * method.\r\n   * @param checkData specified in the upkeep registration so it is always the\r\n   * same for a registered upkeep. This can easily be broken down into specific\r\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\r\n   * same contract and easily differentiated by the contract.\r\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n   * performUpkeep or not.\r\n   * @return performData bytes that the keeper should call performUpkeep with, if\r\n   * upkeep is needed. If you would like to encode data to decode later, try\r\n   * `abi.encode`.\r\n   */\r\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\r\n\r\n  /**\r\n   * @notice method that is actually executed by the keepers, via the registry.\r\n   * The data returned by the checkUpkeep simulation will be passed into\r\n   * this method to actually be executed.\r\n   * @dev The input to this method should not be trusted, and the caller of the\r\n   * method should not even be restricted to any single registry. Anyone should\r\n   * be able call it, and the input should be validated, there is no guarantee\r\n   * that the data passed in is the performData returned from checkUpkeep. This\r\n   * could happen due to malicious keepers, racing keepers, or simply a state\r\n   * change while the performUpkeep transaction is waiting for confirmation.\r\n   * Always validate the data passed in.\r\n   * @param performData is the data which was passed back from the checkData\r\n   * simulation. If it is encoded, it can easily be decoded into other types by\r\n   * calling `abi.decode`. This data should not be trusted, and should be\r\n   * validated against the contract's current state.\r\n   */\r\n  function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\r\n\r\ninterface IGame {\r\n    function hasPendingBets(address token) external view returns (bool);\r\n\r\n    function withdrawTokensVRFFees(address token) external;\r\n}\r\n\r\n// import \"hardhat/console.sol\";\r\n\r\n/// @title BetSwirl's Bank\r\n/// @author Romuald Hog\r\n/// @notice The Bank contract holds the casino's funds,\r\n/// whitelist the games betting tokens,\r\n/// define the max bet amount based on a risk,\r\n/// payout the bet profit to user and collect the loss bet amount from the game's contract,\r\n/// split and allocate the house edge taken from each bet (won or loss).\r\n/// The admin role is transfered to a Timelock that execute administrative tasks,\r\n/// only the Games could payout the bet profit from the bank, and send the loss bet amount to the bank.\r\n/// @dev All rates are in basis point.\r\ncontract Bank is AccessControlEnumerable, KeeperCompatibleInterface, Multicall {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Enum to identify the Chainlink Upkeep registration.\r\n    enum UpkeepActions {\r\n        DistributePartnerHouseEdge,\r\n        DistributeOwnHouseEdge\r\n    }\r\n\r\n    /// @notice Token's house edge allocations struct.\r\n    /// The games house edge is split into several allocations.\r\n    /// The allocated amounts stays in the bank until authorized parties withdraw. They are subtracted from the balance.\r\n    /// @param bank Rate to be allocated to the bank, on bet payout.\r\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\r\n    /// @param partner Rate to be allocated to the partner, on bet payout.\r\n    /// @param treasury Rate to be allocated to the treasury, on bet payout.\r\n    /// @param team Rate to be allocated to the team, on bet payout.\r\n    /// @param dividendAmount The number of tokens to be sent as staking rewards.\r\n    /// @param partnerAmount The number of tokens to be sent to the partner.\r\n    /// @param treasuryAmount The number of tokens to be sent to the treasury.\r\n    /// @param teamAmount The number of tokens to be sent to the team.\r\n    struct HouseEdgeSplit {\r\n        uint16 bank;\r\n        uint16 dividend;\r\n        uint16 partner;\r\n        uint16 treasury;\r\n        uint16 team;\r\n        uint256 dividendAmount;\r\n        uint256 partnerAmount;\r\n        uint256 treasuryAmount;\r\n        uint256 teamAmount;\r\n    }\r\n\r\n    /// @notice Token struct.\r\n    /// List of tokens to bet on games.\r\n    /// @param allowed Whether the token is allowed for bets.\r\n    /// @param paused Whether the token is paused for bets.\r\n    /// @param balanceRisk Defines the maximum bank payout, used to calculate the max bet amount.\r\n    /// @param VRFSubId Chainlink VRF v2 subscription ID.\r\n    /// @param partner Address of the partner to manage the token and receive the house edge.\r\n    /// @param minBetAmount Minimum bet amount.\r\n    /// @param minHouseEdgeWithdrawAmount The minimum amount of token to trigger the distribution of the house edge.\r\n    /// @param houseEdgeSplit House edge allocations.\r\n    struct Token {\r\n        bool allowed;\r\n        bool paused;\r\n        uint16 balanceRisk;\r\n        uint64 VRFSubId;\r\n        address partner;\r\n        uint256 minBetAmount;\r\n        uint256 minHouseEdgeWithdrawAmount;\r\n        HouseEdgeSplit houseEdgeSplit;\r\n    }\r\n\r\n    /// @notice Token's metadata struct. It contains additional information from the ERC20 token.\r\n    /// @dev Only used on the `getTokens` getter for the front-end.\r\n    /// @param decimals Number of token's decimals.\r\n    /// @param tokenAddress Contract address of the token.\r\n    /// @param name Name of the token.\r\n    /// @param symbol Symbol of the token.\r\n    /// @param token Token data.\r\n    struct TokenMetadata {\r\n        uint8 decimals;\r\n        address tokenAddress;\r\n        string name;\r\n        string symbol;\r\n        Token token;\r\n    }\r\n\r\n    /// @notice Number of tokens added.\r\n    uint8 private _tokensCount;\r\n\r\n    /// @notice Treasury multi-sig wallet.\r\n    address public immutable treasury;\r\n\r\n    /// @notice Team wallet.\r\n    address public teamWallet;\r\n\r\n    /// @notice Role associated to Games smart contracts.\r\n    bytes32 public constant GAME_ROLE = keccak256(\"GAME_ROLE\");\r\n\r\n    /// @notice Role associated to harvester smart contract.\r\n    bytes32 public constant HARVESTER_ROLE = keccak256(\"HARVESTER_ROLE\");\r\n\r\n    /// @notice Maps tokens addresses to token configuration.\r\n    mapping(address => Token) public tokens;\r\n\r\n    /// @notice Maps tokens indexes to token address.\r\n    mapping(uint8 => address) private _tokensList;\r\n\r\n    /// @notice Emitted after the team wallet is set.\r\n    /// @param teamWallet The team wallet address.\r\n    event SetTeamWallet(address teamWallet);\r\n\r\n    /// @notice Emitted after a token is added.\r\n    /// @param token Address of the token.\r\n    event AddToken(address token);\r\n\r\n    /// @notice Emitted after the balance risk is set.\r\n    /// @param balanceRisk Rate defining the balance risk.\r\n    event SetBalanceRisk(address indexed token, uint16 balanceRisk);\r\n\r\n    /// @notice Emitted after a token is allowed.\r\n    /// @param token Address of the token.\r\n    /// @param allowed Whether the token is allowed for betting.\r\n    event SetAllowedToken(address indexed token, bool allowed);\r\n\r\n    /// @notice Emitted after the minimum bet amount is set for a token.\r\n    /// @param token Address of the token.\r\n    /// @param minBetAmount Minimum bet amount.\r\n    event SetTokenMinBetAmount(address indexed token, uint256 minBetAmount);\r\n\r\n    /// @notice Emitted after the token's VRF subscription ID is set.\r\n    /// @param token Address of the token.\r\n    /// @param subId Subscription ID.\r\n    event SetTokenVRFSubId(address indexed token, uint64 subId);\r\n\r\n    /// @notice Emitted after a token is paused.\r\n    /// @param token Address of the token.\r\n    /// @param paused Whether the token is paused for betting.\r\n    event SetPausedToken(address indexed token, bool paused);\r\n\r\n    /// @notice Emitted after the Upkeep minimum transfer amount is set.\r\n    /// @param token Address of the token.\r\n    /// @param minHouseEdgeWithdrawAmount Minimum amount of token to allow transfer.\r\n    event SetMinHouseEdgeWithdrawAmount(\r\n        address indexed token,\r\n        uint256 minHouseEdgeWithdrawAmount\r\n    );\r\n\r\n    /// @notice Emitted after a token partner is set.\r\n    /// @param token Address of the token.\r\n    /// @param partner Address of the partner.\r\n    event SetTokenPartner(address indexed token, address partner);\r\n\r\n    /// @notice Emitted after a token deposit.\r\n    /// @param token Address of the token.\r\n    /// @param amount The number of token deposited.\r\n    event Deposit(address indexed token, uint256 amount);\r\n\r\n    /// @notice Emitted after a token withdrawal.\r\n    /// @param token Address of the token.\r\n    /// @param amount The number of token withdrawn.\r\n    event Withdraw(address indexed token, uint256 amount);\r\n\r\n    /// @notice Emitted after the token's house edge allocations for bet payout is set.\r\n    /// @param token Address of the token.\r\n    /// @param bank Rate to be allocated to the bank, on bet payout.\r\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\r\n    /// @param partner Rate to be allocated to the partner, on bet payout.\r\n    /// @param treasury Rate to be allocated to the treasury, on bet payout.\r\n    /// @param team Rate to be allocated to the team, on bet payout.\r\n    event SetTokenHouseEdgeSplit(\r\n        address indexed token,\r\n        uint16 bank,\r\n        uint16 dividend,\r\n        uint16 partner,\r\n        uint16 treasury,\r\n        uint16 team\r\n    );\r\n\r\n    /// @notice Emitted after the token's treasury and team allocations are distributed.\r\n    /// @param token Address of the token.\r\n    /// @param treasuryAmount The number of tokens sent to the treasury.\r\n    /// @param teamAmount The number of tokens sent to the team.\r\n    event HouseEdgeDistribution(\r\n        address indexed token,\r\n        uint256 treasuryAmount,\r\n        uint256 teamAmount\r\n    );\r\n    /// @notice Emitted after the token's partner allocation is distributed.\r\n    /// @param token Address of the token.\r\n    /// @param partnerAmount The number of tokens sent to the partner.\r\n    event HouseEdgePartnerDistribution(\r\n        address indexed token,\r\n        uint256 partnerAmount\r\n    );\r\n\r\n    /// @notice Emitted after the token's dividend allocation is distributed.\r\n    /// @param token Address of the token.\r\n    /// @param amount The number of tokens sent to the Harvester.\r\n    event HarvestDividend(address indexed token, uint256 amount);\r\n\r\n    /// @notice Emitted after the token's house edge is allocated.\r\n    /// @param token Address of the token.\r\n    /// @param bank The number of tokens allocated to bank.\r\n    /// @param dividend The number of tokens allocated as staking rewards.\r\n    /// @param partner The number of tokens allocated to the partner.\r\n    /// @param treasury The number of tokens allocated to the treasury.\r\n    /// @param team The number of tokens allocated to the team.\r\n    event AllocateHouseEdgeAmount(\r\n        address indexed token,\r\n        uint256 bank,\r\n        uint256 dividend,\r\n        uint256 partner,\r\n        uint256 treasury,\r\n        uint256 team\r\n    );\r\n\r\n    /// @notice Emitted after the bet profit amount is sent to the user.\r\n    /// @param token Address of the token.\r\n    /// @param newBalance New token balance.\r\n    /// @param profit Bet profit amount sent.\r\n    event Payout(address indexed token, uint256 newBalance, uint256 profit);\r\n\r\n    /// @notice Emitted after the bet amount is collected from the game smart contract.\r\n    /// @param token Address of the token.\r\n    /// @param newBalance New token balance.\r\n    /// @param amount Bet amount collected.\r\n    event CashIn(address indexed token, uint256 newBalance, uint256 amount);\r\n\r\n    /// @notice Reverting error when trying to add an existing token.\r\n    error TokenExists();\r\n    /// @notice Reverting error when setting the house edge allocations, but the sum isn't 100%.\r\n    /// @param splitSum Sum of the house edge allocations rates.\r\n    error WrongHouseEdgeSplit(uint16 splitSum);\r\n    /// @notice Reverting error when sender isn't allowed.\r\n    error AccessDenied();\r\n    /// @notice Reverting error when team wallet or treasury is the zero address.\r\n    error WrongAddress();\r\n    /// @notice Reverting error when withdrawing a non paused token.\r\n    error TokenNotPaused();\r\n    /// @notice Reverting error when token has pending bets on a game.\r\n    error TokenHasPendingBets();\r\n\r\n    /// @notice Modifier that checks that an account is allowed to interact with a token.\r\n    /// @param role The required role.\r\n    /// @param token The token address.\r\n    modifier onlyTokenOwner(bytes32 role, address token) {\r\n        address partner = tokens[token].partner;\r\n        if (partner == address(0)) {\r\n            _checkRole(role, msg.sender);\r\n        } else if (msg.sender != partner) {\r\n            revert AccessDenied();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize the contract's admin role to the deployer, and state variables.\r\n    /// @param treasuryAddress Treasury multi-sig wallet.\r\n    /// @param teamWalletAddress Team wallet.\r\n    constructor(address treasuryAddress, address teamWalletAddress) {\r\n        if (treasuryAddress == address(0)) {\r\n            revert WrongAddress();\r\n        }\r\n\r\n        treasury = treasuryAddress;\r\n\r\n        // The ownership should then be transfered to a multi-sig.\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        setTeamWallet(teamWalletAddress);\r\n    }\r\n\r\n    /// @notice Transfers a specific amount of token to an address.\r\n    /// Uses native transfer or ERC20 transfer depending on the token.\r\n    /// @dev The 0x address is considered the gas token.\r\n    /// @param user Address of destination.\r\n    /// @param token Address of the token.\r\n    /// @param amount Number of tokens.\r\n    function _safeTransfer(\r\n        address user,\r\n        address token,\r\n        uint256 amount\r\n    ) private {\r\n        if (_isGasToken(token)) {\r\n            Address.sendValue(payable(user), amount);\r\n        } else {\r\n            IERC20(token).safeTransfer(user, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Check if the token has the 0x address.\r\n    /// @param token Address of the token.\r\n    /// @return Whether the token's address is the 0x address.\r\n    function _isGasToken(address token) private pure returns (bool) {\r\n        return token == address(0);\r\n    }\r\n\r\n    /// @notice Deposit funds in the bank to allow gamers to win more.\r\n    /// ERC20 token allowance should be given prior to deposit.\r\n    /// @param token Address of the token.\r\n    /// @param amount Number of tokens.\r\n    function deposit(address token, uint256 amount)\r\n        external\r\n        payable\r\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\r\n    {\r\n        if (_isGasToken(token)) {\r\n            amount = msg.value;\r\n        } else {\r\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\r\n        }\r\n        emit Deposit(token, amount);\r\n    }\r\n\r\n    /// @notice Withdraw funds from the bank. Token has to be paused and no pending bet resolution on games.\r\n    /// @param token Address of the token.\r\n    /// @param amount Number of tokens.\r\n    function withdraw(address token, uint256 amount)\r\n        public\r\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\r\n    {\r\n        uint256 balance = getBalance(token);\r\n        if (balance != 0) {\r\n            if (!tokens[token].paused) {\r\n                revert TokenNotPaused();\r\n            }\r\n\r\n            uint256 roleMemberCount = getRoleMemberCount(GAME_ROLE);\r\n            for (uint256 i; i < roleMemberCount; i++) {\r\n                if (IGame(getRoleMember(GAME_ROLE, i)).hasPendingBets(token)) {\r\n                    revert TokenHasPendingBets();\r\n                }\r\n            }\r\n\r\n            if (amount > balance) {\r\n                amount = balance;\r\n            }\r\n            _safeTransfer(msg.sender, token, amount);\r\n            emit Withdraw(token, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the new token balance risk.\r\n    /// @param token Address of the token.\r\n    /// @param balanceRisk Risk rate.\r\n    function setBalanceRisk(address token, uint16 balanceRisk)\r\n        external\r\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\r\n    {\r\n        tokens[token].balanceRisk = balanceRisk;\r\n        emit SetBalanceRisk(token, balanceRisk);\r\n    }\r\n\r\n    /// @notice Adds a new token that'll be enabled for the games' betting.\r\n    /// Token shouldn't exist yet.\r\n    /// @param token Address of the token.\r\n    function addToken(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        if (_tokensCount != 0) {\r\n            for (uint8 i; i < _tokensCount; i++) {\r\n                if (_tokensList[i] == token) {\r\n                    revert TokenExists();\r\n                }\r\n            }\r\n        }\r\n        _tokensList[_tokensCount] = token;\r\n        _tokensCount += 1;\r\n        emit AddToken(token);\r\n    }\r\n\r\n    /// @notice Changes the token's bet permission.\r\n    /// @param token Address of the token.\r\n    /// @param allowed Whether the token is enabled for bets.\r\n    function setAllowedToken(address token, bool allowed)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        tokens[token].allowed = allowed;\r\n        emit SetAllowedToken(token, allowed);\r\n    }\r\n\r\n    /// @notice Changes the token's paused status.\r\n    /// @param token Address of the token.\r\n    /// @param paused Whether the token is paused.\r\n    function setPausedToken(address token, bool paused)\r\n        external\r\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\r\n    {\r\n        tokens[token].paused = paused;\r\n        emit SetPausedToken(token, paused);\r\n    }\r\n\r\n    /// @notice Changes the token's Upkeep min transfer amount.\r\n    /// @param token Address of the token.\r\n    /// @param minHouseEdgeWithdrawAmount Minimum amount of token to allow transfer.\r\n    function setMinHouseEdgeWithdrawAmount(\r\n        address token,\r\n        uint256 minHouseEdgeWithdrawAmount\r\n    ) external onlyTokenOwner(DEFAULT_ADMIN_ROLE, token) {\r\n        tokens[token].minHouseEdgeWithdrawAmount = minHouseEdgeWithdrawAmount;\r\n        emit SetMinHouseEdgeWithdrawAmount(token, minHouseEdgeWithdrawAmount);\r\n    }\r\n\r\n    /// @notice Changes the token's partner address.\r\n    /// It withdraw the available balance, the partner allocation, and the games' VRF fees.\r\n    /// @param token Address of the token.\r\n    /// @param partner Address of the partner.\r\n    function setTokenPartner(address token, address partner)\r\n        external\r\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\r\n    {\r\n        uint256 roleMemberCount = getRoleMemberCount(GAME_ROLE);\r\n        for (uint256 i; i < roleMemberCount; i++) {\r\n            IGame(getRoleMember(GAME_ROLE, i)).withdrawTokensVRFFees(token);\r\n        }\r\n        withdrawPartnerAmount(token);\r\n        withdraw(token, getBalance(token));\r\n        tokens[token].partner = partner;\r\n        emit SetTokenPartner(token, partner);\r\n    }\r\n\r\n    /// @notice Sets the token's house edge allocations for bet payout.\r\n    /// @param token Address of the token.\r\n    /// @param bank Rate to be allocated to the bank, on bet payout.\r\n    /// @param dividend Rate to be allocated as staking rewards, on bet payout.\r\n    /// @param partner Rate to be allocated to the partner, on bet payout.\r\n    /// @param _treasury Rate to be allocated to the treasury, on bet payout.\r\n    /// @param team Rate to be allocated to the team, on bet payout.\r\n    /// @dev `bank`, `dividend`, `_treasury` and `team` rates sum must equals 10000.\r\n    function setHouseEdgeSplit(\r\n        address token,\r\n        uint16 bank,\r\n        uint16 dividend,\r\n        uint16 partner,\r\n        uint16 _treasury,\r\n        uint16 team\r\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        uint16 splitSum = bank + dividend + team + partner + _treasury;\r\n        if (splitSum != 10000) {\r\n            revert WrongHouseEdgeSplit(splitSum);\r\n        }\r\n\r\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\r\n        tokenHouseEdge.bank = bank;\r\n        tokenHouseEdge.dividend = dividend;\r\n        tokenHouseEdge.partner = partner;\r\n        tokenHouseEdge.treasury = _treasury;\r\n        tokenHouseEdge.team = team;\r\n\r\n        emit SetTokenHouseEdgeSplit(\r\n            token,\r\n            bank,\r\n            dividend,\r\n            partner,\r\n            _treasury,\r\n            team\r\n        );\r\n    }\r\n\r\n    /// @notice Sets the minimum bet amount for a specific token.\r\n    /// @param token Address of the token.\r\n    /// @param tokenMinBetAmount Minimum bet amount.\r\n    function setTokenMinBetAmount(address token, uint256 tokenMinBetAmount)\r\n        external\r\n        onlyTokenOwner(DEFAULT_ADMIN_ROLE, token)\r\n    {\r\n        tokens[token].minBetAmount = tokenMinBetAmount;\r\n        emit SetTokenMinBetAmount(token, tokenMinBetAmount);\r\n    }\r\n\r\n    /// @notice Sets the Chainlink VRF subscription ID for a specific token.\r\n    /// @param token Address of the token.\r\n    /// @param subId Subscription ID.\r\n    function setTokenVRFSubId(address token, uint64 subId)\r\n        external\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        tokens[token].VRFSubId = subId;\r\n        emit SetTokenVRFSubId(token, subId);\r\n    }\r\n\r\n    /// @notice Harvests tokens dividends.\r\n    function harvestDividends() external onlyRole(HARVESTER_ROLE) {\r\n        for (uint8 i; i < _tokensCount; i++) {\r\n            address tokenAddress = _tokensList[i];\r\n            Token storage token = tokens[tokenAddress];\r\n            uint256 dividendAmount = token.houseEdgeSplit.dividendAmount;\r\n            if (dividendAmount != 0) {\r\n                delete token.houseEdgeSplit.dividendAmount;\r\n                _safeTransfer(msg.sender, tokenAddress, dividendAmount);\r\n                emit HarvestDividend(tokenAddress, dividendAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Splits the house edge fees and allocates them as dividends, to the partner, the bank, the treasury, and team.\r\n    /// @param token Address of the token.\r\n    /// @param fees Bet amount and bet profit fees amount.\r\n    function _allocateHouseEdge(address token, uint256 fees) private {\r\n        HouseEdgeSplit storage tokenHouseEdge = tokens[token].houseEdgeSplit;\r\n\r\n        uint256 partnerAmount;\r\n        if (tokenHouseEdge.partner != 0) {\r\n            partnerAmount = ((fees * tokenHouseEdge.partner) / 10000);\r\n            tokenHouseEdge.partnerAmount += partnerAmount;\r\n        }\r\n\r\n        uint256 dividendAmount = (fees * tokenHouseEdge.dividend) / 10000;\r\n        tokenHouseEdge.dividendAmount += dividendAmount;\r\n\r\n        // The bank also get allocated a share of the house edge.\r\n        uint256 bankAmount = (fees * tokenHouseEdge.bank) / 10000;\r\n\r\n        uint256 treasuryAmount = (fees * tokenHouseEdge.treasury) / 10000;\r\n        tokenHouseEdge.treasuryAmount += treasuryAmount;\r\n\r\n        uint256 teamAmount = (fees * tokenHouseEdge.team) / 10000;\r\n        tokenHouseEdge.teamAmount += teamAmount;\r\n\r\n        emit AllocateHouseEdgeAmount(\r\n            token,\r\n            bankAmount,\r\n            dividendAmount,\r\n            partnerAmount,\r\n            treasuryAmount,\r\n            teamAmount\r\n        );\r\n    }\r\n\r\n    /// @notice Payouts a winning bet, and allocate the house edge fee.\r\n    /// @param user Address of the gamer.\r\n    /// @param token Address of the token.\r\n    /// @param profit Number of tokens to be sent to the gamer.\r\n    /// @param fees Bet amount and bet profit fees amount.\r\n    function payout(\r\n        address user,\r\n        address token,\r\n        uint256 profit,\r\n        uint256 fees\r\n    ) external payable onlyRole(GAME_ROLE) {\r\n        _allocateHouseEdge(token, fees);\r\n\r\n        // Pay the user\r\n        _safeTransfer(user, token, profit);\r\n        emit Payout(token, getBalance(token), profit);\r\n    }\r\n\r\n    /// @notice Accounts a loss bet.\r\n    /// @dev In case of an ERC20, the bet amount should be transfered prior to this tx.\r\n    /// @dev In case of the gas token, the bet amount is sent along with this tx.\r\n    /// @param tokenAddress Address of the token.\r\n    /// @param amount Loss bet amount.\r\n    /// @param fees Bet amount and bet profit fees amount.\r\n    function cashIn(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        uint256 fees\r\n    ) external payable onlyRole(GAME_ROLE) {\r\n        if (fees != 0) {\r\n            _allocateHouseEdge(tokenAddress, fees);\r\n        }\r\n\r\n        emit CashIn(tokenAddress, getBalance(tokenAddress), amount);\r\n    }\r\n\r\n    /// @notice Executed by Chainlink Keepers when `upkeepNeeded` is true.\r\n    /// @param performData Data which was passed back from `checkUpkeep`.\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        (UpkeepActions upkeepAction, address tokenAddress) = abi.decode(\r\n            performData,\r\n            (UpkeepActions, address)\r\n        );\r\n        Token memory token = tokens[tokenAddress];\r\n\r\n        if (\r\n            upkeepAction == UpkeepActions.DistributePartnerHouseEdge &&\r\n            token.houseEdgeSplit.partnerAmount >\r\n            token.minHouseEdgeWithdrawAmount\r\n        ) {\r\n            withdrawPartnerAmount(tokenAddress);\r\n        } else if (\r\n            upkeepAction == UpkeepActions.DistributeOwnHouseEdge &&\r\n            token.houseEdgeSplit.treasuryAmount +\r\n                token.houseEdgeSplit.teamAmount >\r\n            token.minHouseEdgeWithdrawAmount\r\n        ) {\r\n            withdrawHouseEdgeAmount(tokenAddress);\r\n        }\r\n    }\r\n\r\n    /// @dev For the front-end\r\n    function getTokens() external view returns (TokenMetadata[] memory) {\r\n        TokenMetadata[] memory _tokens = new TokenMetadata[](_tokensCount);\r\n        for (uint8 i; i < _tokensCount; i++) {\r\n            address tokenAddress = _tokensList[i];\r\n            Token memory token = tokens[tokenAddress];\r\n            if (_isGasToken(tokenAddress)) {\r\n                _tokens[i] = TokenMetadata({\r\n                    decimals: 18,\r\n                    tokenAddress: tokenAddress,\r\n                    name: \"ETH\",\r\n                    symbol: \"ETH\",\r\n                    token: token\r\n                });\r\n            } else {\r\n                IERC20Metadata erc20Metadata = IERC20Metadata(tokenAddress);\r\n                _tokens[i] = TokenMetadata({\r\n                    decimals: erc20Metadata.decimals(),\r\n                    tokenAddress: tokenAddress,\r\n                    name: erc20Metadata.name(),\r\n                    symbol: erc20Metadata.symbol(),\r\n                    token: token\r\n                });\r\n            }\r\n        }\r\n        return _tokens;\r\n    }\r\n\r\n    /// @notice Gets the token's min bet amount.\r\n    /// @param token Address of the token.\r\n    /// @return minBetAmount Min bet amount.\r\n    /// @dev The min bet amount should be at least 10000 cause of the `getMaxBetAmount` calculation.\r\n    function getMinBetAmount(address token)\r\n        external\r\n        view\r\n        returns (uint256 minBetAmount)\r\n    {\r\n        minBetAmount = tokens[token].minBetAmount;\r\n        if (minBetAmount < 10000) {\r\n            minBetAmount = 10000;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the max bet amount based on the token balance, the balance risk, and the game multiplier.\r\n    /// @param token Address of the token.\r\n    /// @param multiplier The bet amount leverage determines the user's profit amount. 10000 = 100% = no profit.\r\n    /// @return Maximum bet amount for the token.\r\n    /// @dev The multiplier should be at least 10000.\r\n    function getMaxBetAmount(address token, uint256 multiplier)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (getBalance(token) * tokens[token].balanceRisk) / multiplier;\r\n    }\r\n\r\n    /// @notice Gets the token's allow status used on the games smart contracts.\r\n    /// @param tokenAddress Address of the token.\r\n    /// @return Whether the token is enabled for bets.\r\n    function isAllowedToken(address tokenAddress) external view returns (bool) {\r\n        Token memory token = tokens[tokenAddress];\r\n        return token.allowed && !token.paused;\r\n    }\r\n\r\n    /// @notice Runs by Chainlink Keepers at every block to determine if `performUpkeep` should be called.\r\n    /// @param checkData Fixed and specified at Upkeep registration.\r\n    /// @return upkeepNeeded Boolean that when True will trigger the on-chain performUpkeep call.\r\n    /// @return performData Bytes that will be used as input parameter when calling performUpkeep.\r\n    /// @dev `checkData` and `performData` are encoded with types (uint8, address).\r\n    function checkUpkeep(bytes calldata checkData)\r\n        external\r\n        view\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory performData)\r\n    {\r\n        (UpkeepActions upkeepAction, address tokenAddressData) = abi.decode(\r\n            checkData,\r\n            (UpkeepActions, address)\r\n        );\r\n\r\n        Token memory token = tokens[tokenAddressData];\r\n        if (\r\n            (upkeepAction == UpkeepActions.DistributePartnerHouseEdge &&\r\n                token.houseEdgeSplit.partnerAmount >\r\n                token.minHouseEdgeWithdrawAmount) ||\r\n            (upkeepAction == UpkeepActions.DistributeOwnHouseEdge &&\r\n                token.houseEdgeSplit.treasuryAmount +\r\n                    token.houseEdgeSplit.teamAmount >\r\n                token.minHouseEdgeWithdrawAmount)\r\n        ) {\r\n            upkeepNeeded = true;\r\n            performData = abi.encode(upkeepAction, tokenAddressData);\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the token's Chainlink VRF v2 Subscription ID.\r\n    /// @param token Address of the token.\r\n    /// @return Chainlink VRF v2 Subscription ID.\r\n    function getVRFSubId(address token) external view returns (uint64) {\r\n        return tokens[token].VRFSubId;\r\n    }\r\n\r\n    /// @notice Gets the token's owner.\r\n    /// @param token Address of the token.\r\n    /// @return Address of the owner.\r\n    function getTokenOwner(address token) external view returns (address) {\r\n        address partner = tokens[token].partner;\r\n        if (partner == address(0)) {\r\n            return getRoleMember(DEFAULT_ADMIN_ROLE, 0);\r\n        } else {\r\n            return partner;\r\n        }\r\n    }\r\n\r\n    /// @notice Sets the new team wallet.\r\n    /// @param _teamWallet The team wallet address.\r\n    function setTeamWallet(address _teamWallet)\r\n        public\r\n        onlyRole(DEFAULT_ADMIN_ROLE)\r\n    {\r\n        if (_teamWallet == address(0)) {\r\n            revert WrongAddress();\r\n        }\r\n        teamWallet = _teamWallet;\r\n        emit SetTeamWallet(teamWallet);\r\n    }\r\n\r\n    /// @notice Distributes the token's treasury and team allocations amounts.\r\n    /// @param tokenAddress Address of the token.\r\n    function withdrawHouseEdgeAmount(address tokenAddress) public {\r\n        HouseEdgeSplit storage tokenHouseEdge = tokens[tokenAddress]\r\n            .houseEdgeSplit;\r\n        uint256 treasuryAmount = tokenHouseEdge.treasuryAmount;\r\n        uint256 teamAmount = tokenHouseEdge.teamAmount;\r\n        if (treasuryAmount != 0) {\r\n            delete tokenHouseEdge.treasuryAmount;\r\n            _safeTransfer(treasury, tokenAddress, treasuryAmount);\r\n        }\r\n        if (teamAmount != 0) {\r\n            delete tokenHouseEdge.teamAmount;\r\n            _safeTransfer(teamWallet, tokenAddress, teamAmount);\r\n        }\r\n        if (treasuryAmount != 0 || teamAmount != 0) {\r\n            emit HouseEdgeDistribution(\r\n                tokenAddress,\r\n                treasuryAmount,\r\n                teamAmount\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Distributes the token's partner amount.\r\n    /// @param tokenAddress Address of the token.\r\n    function withdrawPartnerAmount(address tokenAddress) public {\r\n        Token storage token = tokens[tokenAddress];\r\n        uint256 partnerAmount = token.houseEdgeSplit.partnerAmount;\r\n        if (partnerAmount != 0 && token.partner != address(0)) {\r\n            delete token.houseEdgeSplit.partnerAmount;\r\n            _safeTransfer(token.partner, tokenAddress, partnerAmount);\r\n            emit HouseEdgePartnerDistribution(tokenAddress, partnerAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Gets the token's balance.\r\n    /// The token's house edge allocation amounts are subtracted from the balance.\r\n    /// @param token Address of the token.\r\n    /// @return The amount of token available for profits.\r\n    function getBalance(address token) public view returns (uint256) {\r\n        uint256 balance;\r\n        if (_isGasToken(token)) {\r\n            balance = address(this).balance;\r\n        } else {\r\n            balance = IERC20(token).balanceOf(address(this));\r\n        }\r\n        HouseEdgeSplit memory tokenHouseEdgeSplit = tokens[token]\r\n            .houseEdgeSplit;\r\n        return\r\n            balance -\r\n            tokenHouseEdgeSplit.dividendAmount -\r\n            tokenHouseEdgeSplit.partnerAmount -\r\n            tokenHouseEdgeSplit.treasuryAmount -\r\n            tokenHouseEdgeSplit.teamAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenHasPendingBets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"splitSum\",\"type\":\"uint16\"}],\"name\":\"WrongHouseEdgeSplit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bank\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partner\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"AllocateHouseEdgeAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CashIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestDividend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"name\":\"HouseEdgeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partnerAmount\",\"type\":\"uint256\"}],\"name\":\"HouseEdgePartnerDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SetAllowedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"}],\"name\":\"SetBalanceRisk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"SetMinHouseEdgeWithdrawAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"SetPausedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"}],\"name\":\"SetTeamWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"SetTokenHouseEdgeSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"name\":\"SetTokenMinBetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"SetTokenPartner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"SetTokenVRFSubId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVESTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"cashIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getMaxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"VRFSubId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Bank.HouseEdgeSplit\",\"name\":\"houseEdgeSplit\",\"type\":\"tuple\"}],\"internalType\":\"struct Bank.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"internalType\":\"struct Bank.TokenMetadata[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getVRFSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isAllowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"}],\"name\":\"setBalanceRisk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"}],\"name\":\"setHouseEdgeSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"setMinHouseEdgeWithdrawAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPausedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenMinBetAmount\",\"type\":\"uint256\"}],\"name\":\"setTokenMinBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"setTokenPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"setTokenVRFSubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"balanceRisk\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"VRFSubId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHouseEdgeWithdrawAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"bank\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"dividend\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partner\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"dividendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Bank.HouseEdgeSplit\",\"name\":\"houseEdgeSplit\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawHouseEdgeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawPartnerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bank", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fd457f3a94c1852bb318ff14072c4dd6afa85803000000000000000000000000fd457f3a94c1852bb318ff14072c4dd6afa85803", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://afe883557748d964b52535c2cffe9a89be92f7e5a6aea714d2df3c9f2e4fa902"}