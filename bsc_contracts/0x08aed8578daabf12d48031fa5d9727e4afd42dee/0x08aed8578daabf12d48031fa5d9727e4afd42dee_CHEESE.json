{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity 0.8.13;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\t\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner call this function\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n  \r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused, \"Contract is paused right now\");\r\n\t\t_;\r\n\t}\r\n  \r\n\tmodifier whenPaused() {\r\n\t\trequire(paused, \"Contract is not paused right now\");\r\n\t\t_;\r\n\t}\r\n  \r\n\tfunction pause() onlyOwner whenNotPaused public {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\t\r\n\tfunction unpause() onlyOwner whenPaused public {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\tevent Burn(address indexed burner, uint256 value);\r\n\t\r\n\tevent AddToWhiteList(address _address);\r\n    event RemovedFromWhiteList(address _address);\r\n\tevent AddedBlackList(address _address);\r\n    event RemovedBlackList(address _address);\r\n    event ExcludedFromFee(address _address);\r\n\tevent IncludeInFee(address _address);\r\n\tevent SwapEnable(bool _type);\r\n\tevent SetDevelopmentFee(uint256 _fee);\r\n\tevent SetMarketingFee(uint256 _fee);\r\n\tevent SetDevelopmentWallet(address _address);\r\n\tevent SetMarketingWallet(address _address);\r\n\tevent SetSwapingThreshold(uint256 _amount);\r\n\tevent SetStakingAddress(address _address, bool _type);\r\n\tevent LockToken(uint256 _amount, address _user, address _contract);\r\n\tevent UnLockToken(uint256 _amount, address _user, address _contract);\r\n\tevent OwnershipTransfer(address _address);\r\n\t\r\n\tevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n}\r\n\r\ninterface IPancakeSwapV2Router01 {\r\n   function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IPancakeSwapV2Router02 is IPancakeSwapV2Router01 {\r\n   function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ncontract CHEESE is IBEP20, Pausable {\r\n   IPancakeSwapV2Router02 public immutable pancakeSwapV2Router;\r\n   string public constant name = \"CHEESE\";\r\n   string public constant symbol = \"CHEESE\";\r\n   uint8 public constant decimals = 18;\r\n   uint256 totalSupply_;\r\n   \r\n   uint256 public developmentFee = 40;\r\n   uint256 public marketingFee = 400;\r\n   uint256 public swapingThreshold = 1000000 * (10**18);\r\n   \r\n   address public developmentWallet = 0xe301726297c6f7A517DfdB945c05F8DbC9CA5376;\r\n   address public marketingWallet = 0xdc1336bFDAd88B6ea989c189062BD7239c8Ed3aB; \r\n   address public constant BTCB = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c; \r\n   \r\n   bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n   bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n   uint256 developmentFeeTotal;\r\n   uint256 marketingFeeTotal;\r\n   \r\n   bool public swapEnable = true;\t\r\n   bool inSwapping;\r\n   \r\n   modifier lockTheSwap {\r\n\t inSwapping = true;\r\n\t _;\r\n\t inSwapping = false;\r\n   }\r\n   \r\n   mapping (address => uint256) balances;\r\n   mapping (address => bool) public isBlackListed;\r\n   mapping (address => mapping (address => uint256)) allowed;\r\n   mapping (address => bool) public isWhiteListed;\r\n   mapping (address => bool) public isExcludedFromFee;\r\n   mapping (address => bool) public isStakingAddress;\r\n   mapping (address => uint256) public lockedAmount;\r\n   mapping (address => mapping(address => uint256)) public lockedAmountPerContract;\r\n   \r\n   mapping (address => address) internal _delegates;\r\n   mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n   mapping (address => uint32) public numCheckpoints;\r\n   mapping (address => uint) public nonces;\r\n\t\r\n   struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint256 votes;\r\n   }\r\n   \r\n   constructor(){\r\n       IPancakeSwapV2Router02 _pancakeSwapV2Router = IPancakeSwapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n       pancakeSwapV2Router = _pancakeSwapV2Router;\r\n\t   \r\n\t   owner = msg.sender;\r\n\t   isExcludedFromFee[owner] = true;\r\n\t   isExcludedFromFee[address(this)] = true;\r\n\t   __mint(owner, 1000000000000 * (10**18));\r\n\t   \r\n   }\r\n   \r\n   function __mint(address _to, uint256 _amount) internal {\r\n       totalSupply_ = totalSupply_ + _amount;\r\n       balances[_to] = balances[_to] + _amount;\r\n\t   \r\n\t   _moveDelegates(address(0), _delegates[_to], _amount);\r\n       emit Transfer(address(0), _to, _amount);\r\n   }\r\n   \r\n   function totalSupply() public override view returns (uint256) {\r\n       return totalSupply_;\r\n   }\r\n   \r\n   function burn(uint256 _value) public {\r\n\t    require(!isBlackListed[msg.sender], \r\n\t\t\t'sender is blacklisted'\r\n\t\t);\r\n        require(_value <= balances[msg.sender], \r\n\t\t\t'burn amount exceeds balance'\r\n\t\t);\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner] - _value;\r\n        totalSupply_ = totalSupply_ - _value;\r\n\t\t\r\n\t\t_moveDelegates(_delegates[burner], address(0), _value);\r\n\t\t\r\n        emit Burn(burner, _value);\r\n        emit Transfer(burner, address(0), _value);\r\n    }\r\n\t\r\n\tfunction mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\r\n\t    require(_to != address(0), \r\n\t\t\t\"transfer to the zero-address\"\r\n\t\t);\r\n\t\trequire(_amount > 0, \r\n\t\t\t\"amount is zero\"\r\n\t\t);\r\n        totalSupply_ = totalSupply_ + _amount;\r\n        balances[_to] = balances[_to] + _amount;\r\n\t\t\r\n\t\t_moveDelegates(address(0), _delegates[_to], _amount);\r\n\t\t\r\n        emit Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n   \r\n   function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n   }\r\n   \r\n   function transfer(address receiver, uint256 numTokens) public override returns (bool) {\r\n\t    require(\r\n\t\t\t!isBlackListed[msg.sender],\r\n\t\t\t\"Sender address is blacklisted\"\r\n\t\t);\r\n\t\trequire(receiver != address(0), \r\n\t\t\t\"transfer to the zero-address\"\r\n\t\t);\r\n        require(\r\n\t\t\tnumTokens <= balances[msg.sender] - lockedAmount[msg.sender], \r\n\t\t\t\"transfer amount exceeds balance\"\r\n\t\t);\r\n        balances[msg.sender] = balances[msg.sender] - numTokens;\r\n\t\t\r\n\t\tif(paused) \r\n\t\t{\r\n\t\t    require(isWhiteListed[msg.sender], \"sender not whitelist to transfer\");\r\n\t\t}\r\n\t\t\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\t\tbool canSwap = contractTokenBalance >= swapingThreshold;\r\n\t\t\r\n\t\tif (canSwap && swapEnable && !inSwapping) \r\n\t\t{\r\n\t\t    uint256 tokenToDevelopment = developmentFeeTotal;\r\n\t\t\tuint256 tokenToMarketing = marketingFeeTotal;\r\n\t\t\t\r\n\t\t\tswapTokensForBTCB(tokenToDevelopment, developmentWallet);\r\n\t\t\tswapTokensForBTCB(tokenToMarketing, marketingWallet);\r\n\t\t\t\r\n\t\t\tdevelopmentFeeTotal = developmentFeeTotal - tokenToDevelopment;\r\n\t\t\tmarketingFeeTotal = marketingFeeTotal - tokenToMarketing;\r\n\t\t}\r\n\t\t\r\n\t\tif(isExcludedFromFee[msg.sender] || isExcludedFromFee[receiver])\r\n\t\t{\r\n\t\t\tbalances[receiver] = balances[receiver] + numTokens;\r\n\t\t\t_moveDelegates(_delegates[msg.sender], _delegates[receiver], numTokens);\r\n\t\t\t\r\n\t\t\temit Transfer(msg.sender, receiver, numTokens);\r\n        }\r\n\t\telse\r\n\t\t{\r\n\t\t\tuint256 developmentTax = (numTokens * developmentFee) / 10000;\r\n\t\t\tuint256 marketingTax = (numTokens * marketingFee) / 10000;\r\n\t\t\t\r\n\t\t\tbalances[address(this)] = balances[address(this)] + developmentTax + marketingTax;\r\n\t\t\tbalances[receiver] = balances[receiver] + (numTokens - developmentTax - marketingTax);\r\n\t\t\t\r\n\t\t\tdevelopmentFeeTotal = developmentFeeTotal + developmentTax;\r\n\t\t\tmarketingFeeTotal = marketingFeeTotal + marketingTax;\r\n\t\t\t\r\n\t\t\t_moveDelegates(_delegates[msg.sender], _delegates[receiver], numTokens - developmentTax - marketingTax);\r\n\t\t\t_moveDelegates(_delegates[msg.sender], _delegates[address(this)], developmentTax + marketingTax);\r\n\t\t\t\r\n\t\t\temit Transfer(msg.sender, receiver, numTokens - developmentTax - marketingTax);\r\n\t\t\temit Transfer(msg.sender, address(this), developmentTax + marketingTax);\r\n\t\t}\r\n        return true;\r\n    }\r\n\t\r\n\tfunction transferFrom(address sender, address receiver, uint256 numTokens) public override returns (bool) {\r\n        require(\r\n\t\t\t!isBlackListed[sender],\r\n\t\t\t\"Sender address is blacklisted\"\r\n\t\t);\r\n\t\trequire(receiver != address(0), \r\n\t\t\t\"transfer to the zero-address\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tnumTokens <= balances[sender] + lockedAmount[msg.sender],\r\n\t\t\t\"transfer amount exceeds balance\"\r\n\t\t);\r\n        require(\r\n\t\t\tnumTokens <= allowed[sender][msg.sender],\r\n\t\t\t\"transfer amount exceeds allowed amount\"\r\n\t\t);\r\n\t\tif(paused)\r\n\t\t{\r\n\t\t   require(\r\n\t\t\t  isWhiteListed[sender], \r\n\t\t\t  \"sender not whitelist to transfer\"\r\n\t\t   );\r\n\t\t}\r\n        balances[sender] = balances[sender] - numTokens;\r\n        allowed[sender][msg.sender] = allowed[sender][msg.sender] - numTokens;\r\n\t\t\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n\t\tbool canSwap = contractTokenBalance >= swapingThreshold;\r\n\t\t\r\n\t\tif (canSwap && swapEnable && !inSwapping) \r\n\t\t{\r\n\t\t    uint256 tokenToDevelopment = developmentFeeTotal;\r\n\t\t\tuint256 tokenToMarketing = marketingFeeTotal;\r\n\r\n\t\t\tif(tokenToDevelopment > 0 ){\r\n\t\t\t   swapTokensForBTCB(tokenToDevelopment, developmentWallet);\r\n\t\t\t   developmentFeeTotal = developmentFeeTotal - tokenToDevelopment;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(tokenToMarketing > 0 )\r\n\t\t\t{\r\n\t\t\t   swapTokensForBTCB(tokenToMarketing, marketingWallet);\r\n\t\t\t   marketingFeeTotal = marketingFeeTotal - tokenToMarketing;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(isExcludedFromFee[sender] || isExcludedFromFee[receiver])\r\n\t\t{\r\n\t\t\tbalances[receiver] = balances[receiver] + numTokens;\r\n\t\t\t\r\n\t\t\t_moveDelegates(_delegates[sender], _delegates[receiver], numTokens);\r\n\t\t\temit Transfer(sender, receiver, numTokens);\r\n        }\r\n\t\telse\r\n\t\t{\r\n\t\t\tuint256 developmentTax = (numTokens * developmentFee) / 10000;\r\n\t\t\tuint256 marketingTax = (numTokens * marketingFee) / 10000;\r\n\t\t\t\r\n\t\t\tbalances[address(this)] = balances[address(this)] + developmentTax + marketingTax;\r\n\t\t\tbalances[receiver] = balances[receiver] + (numTokens - developmentTax - marketingTax);\r\n\t\t\t\r\n\t\t\tdevelopmentFeeTotal = developmentFeeTotal + developmentTax;\r\n\t\t\tmarketingFeeTotal = marketingFeeTotal + marketingTax;\r\n\t\t\t\r\n\t\t\t_moveDelegates(_delegates[sender], _delegates[receiver], numTokens - developmentTax - marketingTax);\r\n\t\t\t_moveDelegates(_delegates[sender], _delegates[address(this)], developmentTax + marketingTax);\r\n\t\t\t\r\n\t\t\temit Transfer(sender, receiver, numTokens - developmentTax - marketingTax);\r\n\t\t\temit Transfer(sender, address(this), developmentTax + marketingTax);\r\n\t\t}\r\n\t\treturn true;\r\n    }\r\n\r\n    function approve(address spender, uint256 numTokens) public override returns (bool) {\r\n\t    require(spender != address(0), \r\n\t\t\t\"spender is the zero address\"\r\n\t\t);\r\n        allowed[msg.sender][spender] = numTokens;\r\n        emit Approval(msg.sender, spender, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public override view returns (uint) {\r\n        return allowed[owner][spender];\r\n    }\r\n\t\r\n\tfunction getBlackListStatus(address _maker) external view returns (bool) {\r\n        return isBlackListed[_maker];\r\n    }\r\n\t\r\n\tfunction addBlackList(address _evilUser) external onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n        emit AddedBlackList(_evilUser);\r\n    }\r\n\r\n    function removeBlackList (address _clearedUser) external onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n        emit RemovedBlackList(_clearedUser);\r\n    }\r\n\t\r\n\tfunction getWhiteListStatus(address _address) external view returns (bool) {\r\n        return isWhiteListed[_address];\r\n\t}\r\n\t\r\n\tfunction whiteListAddress(address _address) external onlyOwner{\r\n\t   isWhiteListed[_address] = true;\r\n\t   emit AddToWhiteList(_address);\r\n    }\r\n\t\r\n\tfunction removeWhiteListAddress (address _address) external onlyOwner{\r\n\t   isWhiteListed[_address] = false;\r\n\t   emit RemovedFromWhiteList(_address);\r\n\t}\r\n\t\r\n\tfunction excludeFromFee(address account) external onlyOwner {\r\n        isExcludedFromFee[account] = true;\r\n\t\temit ExcludedFromFee(account);\r\n    }\r\n\t\r\n\tfunction includeInFee(address account) external onlyOwner {\r\n        isExcludedFromFee[account] = false;\r\n\t\temit IncludeInFee(account);\r\n    }\r\n\t\r\n\tfunction transferTokens(address tokenAddress, address to, uint256 amount) external onlyOwner {\r\n        IBEP20(tokenAddress).transfer(to, amount);\r\n    }\r\n\t\r\n\tfunction withdrawalTokens(address to, uint256 amount) external onlyOwner {\r\n        IBEP20(address(this)).transfer(to, amount);\r\n    }\r\n\t\r\n\tfunction setSwapEnable(bool _enabled) external onlyOwner {\r\n        swapEnable = _enabled;\r\n\t\temit SwapEnable(_enabled);\r\n    }\r\n\t\r\n\tfunction setDevelopmentFee(uint256 newFee) external onlyOwner {\r\n\t    require(newFee <= 2000, \"fee can't be more than 2000\");\r\n\t\tdevelopmentFee = newFee;\r\n\t\temit SetDevelopmentFee(newFee);\r\n\t}\r\n\t\r\n\tfunction setMarketingFee(uint256 newFee) external onlyOwner {\r\n\t    require(newFee <= 2000, \"fee can't be more than 2000\");\r\n\t\tmarketingFee = newFee;\r\n\t\temit SetMarketingFee(newFee);\r\n\t}\r\n\t\r\n\tfunction setDevelopmentWallet(address payable newWallet) external onlyOwner{\r\n        require(newWallet != address(0), \"zero-address not allowed\");\r\n\t    developmentWallet = newWallet;\r\n\t\temit SetDevelopmentWallet(newWallet);\r\n    }\r\n\t\r\n\tfunction setMarketingWallet(address payable newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"zero-address not allowed\");\r\n\t    marketingWallet = newWallet;\r\n\t\temit SetMarketingWallet(newWallet);\r\n    }\r\n\t\r\n\tfunction setSwapingThreshold(uint256 amount) external onlyOwner {\r\n  \t     require(amount <= totalSupply_, \"amount cannot be over the total supply.\");\r\n\t\t swapingThreshold = amount;\r\n\t\t emit SetSwapingThreshold(amount);\r\n  \t}\r\n\t\r\n\tfunction swapTokensForBTCB(uint256 tokenAmount, address receiver) private lockTheSwap{\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = pancakeSwapV2Router.WETH();\r\n\t\tpath[2] = BTCB;\r\n\t\t\r\n        approve(address(pancakeSwapV2Router), tokenAmount);\r\n        pancakeSwapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\t\r\n\tfunction setStakingAddress(address stakingAddress, bool _value) external onlyOwner {\r\n       require(isStakingAddress[stakingAddress] != _value, \"account is already the value of '_value'\");\r\n\t   require(isContract(stakingAddress), \"call to non-contract\");\r\n\t   \r\n       isStakingAddress[stakingAddress] = _value;\r\n\t   emit SetStakingAddress(stakingAddress, _value);\r\n    }\r\n\t\r\n\tfunction lockToken(uint256 amount, address user) public {\r\n\t   require(isStakingAddress[msg.sender], \"sender not allowed\");\r\n\t   \r\n\t   uint256 unlockBalance = balances[user] - lockedAmount[user];\r\n\t   require(unlockBalance >= amount, \"locking amount exceeds balance\");\r\n\t   lockedAmount[user] = lockedAmount[user] + amount;\r\n\t   \r\n\t   lockedAmountPerContract[user][msg.sender] = lockedAmountPerContract[user][msg.sender] + amount;\r\n\t   \r\n\t   emit LockToken(amount, user, msg.sender);\r\n    }\r\n\t\r\n\tfunction unlockToken(address user) public {\r\n\t   require(isStakingAddress[msg.sender], \"sender not allowed\");\r\n\t   require(lockedAmountPerContract[user][msg.sender] > 0, \"staking amount not found\");\r\n\t   \r\n\t   lockedAmount[user] = lockedAmount[user] - lockedAmountPerContract[user][msg.sender];\r\n\t   lockedAmountPerContract[user][msg.sender] = 0;\r\n\t   \r\n\t   emit UnLockToken(lockedAmountPerContract[user][msg.sender], user, msg.sender);\r\n    }\r\n\t\r\n\tfunction transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"new owner can't be zero-address\");\r\n        owner = newOwner;\r\n\t\temit OwnershipTransfer(newOwner);\r\n    }\r\n\t\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\t\r\n\tfunction delegates(address delegator) external view returns (address){\r\n        return _delegates[delegator];\r\n    }\r\n\r\n    function delegate(address delegatee) external {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\t\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"delegateBySig: invalid nonce\");\r\n        require(block.timestamp <= expiry, \"delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\t\r\n    function getCurrentVotes(address account) external view returns (uint256) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\t\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint256){\r\n        require(blockNumber < block.number, \"getPriorVotes: not yet determined\");\r\n\t\t\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\t\t\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\t\t\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\t\t\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2;\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\t\r\n    function _delegate(address delegator, address delegatee) internal{\r\n        address currentDelegate = _delegates[delegator];\r\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying FSTABLEs (not scaled);\r\n        _delegates[delegator] = delegatee;\r\n\t\t\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n               \r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint256 srcRepNew = srcRepOld - amount;\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint256 dstRepNew = dstRepOld + amount;\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal{\r\n        uint32 blockNumber = safe32(block.number, \"_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\t\r\n    function getChainId() internal view returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddToWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"IncludeInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"LockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"OwnershipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"RemovedFromWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetDevelopmentFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetDevelopmentWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"SetStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetSwapingThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_type\",\"type\":\"bool\"}],\"name\":\"SwapEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"UnLockToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTCB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWhiteListStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakingAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmountPerContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapingThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapingThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whiteListAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CHEESE", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fb22a174a0872c608c0670b8b9abe1174cb3dd564979557a3150efe2ad8c53f4"}