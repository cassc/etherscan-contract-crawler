{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Define the minimal interface for ERC20 tokens.\r\n// This is a subset of the full ERC20 interface,\r\n// containing only the methods we need for this contract.\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient,uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\npragma solidity ^0.8.19;\r\n\r\ncontract BNBethBridge {\r\n    // Events\r\n    // Event emitted when a deposit is made\r\n    event Deposit(address indexed _from, bytes seed, uint _value);\r\n\r\n    // State variables\r\n    // Address of the contract owner\r\n    address public owner;\r\n    IERC20 public tokenAddress;\r\n\r\n    // Constructor\r\n    // Initializes the contract setting the contract deployer as the owner\r\n    // and setting the initial auth address.\r\n    constructor(IERC20 _tokenAddress) {\r\n        owner = msg.sender;\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n\r\n    // Mappings\r\n    // Mapping to keep track of used seeds\r\n    mapping(bytes => bool) public isSeedUsed;\r\n\r\n    // Mapping to keep track of deposits made by specific users\r\n    mapping(address => uint) public userDeposits;\r\n\r\n    // Function to deposit funds into the contract\r\n    function deposit(bytes calldata seed,uint256 amount) public {\r\n\r\n        // Ensure that the user is sending a valid amount of tokens\r\n        require(amount > 0, \"Must send a positive amount of tokens\");\r\n        \r\n        // Ensure that the seed hasn't been used before\r\n        require(!isSeedUsed[seed], \"Seed already exists\");\r\n\r\n        // Transfer the tokens from the user to the contract\r\n        bool success = tokenAddress.transferFrom(msg.sender, address(this), amount);\r\n        require(success, \"Token transfer failed\");\r\n\r\n\r\n        // Update the user's deposit amount\r\n        userDeposits[msg.sender] += amount;\r\n\r\n        // Update the seed status\r\n        isSeedUsed[seed] = true;\r\n\r\n        // Emit the Deposit event\r\n        emit Deposit(msg.sender, seed, amount);\r\n    }\r\n\r\n    // Function to allow the contract owner to withdraw all funds from the contract\r\n    function withdrawAll() public {\r\n        // Ensure only the owner can call this function\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can withdraw all funds\"\r\n        );\r\n\r\n        // Transfer all funds in the contract to the owner\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    // Function to withdraw ERC20 tokens from the contract.\r\n    // Can be called only by the owner.\r\n    // _tokenAddress: The ERC20 token contract address.\r\n    // _to: The address where the tokens will be sent.\r\n    // _amount: The amount of tokens to send.\r\n    function withdrawTokens(\r\n        address _tokenAddress,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public {\r\n        // Ensure only the owner can call this function\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can set the auth address\"\r\n        );\r\n        // Validate the _to address and the _amount.\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n\r\n        // Create an instance of the ERC20 token contract.\r\n        IERC20 token = IERC20(_tokenAddress);\r\n\r\n        // Check the contract's token balance.\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n\r\n        // Make sure the contract has enough tokens.\r\n        require(contractBalance >= _amount, \"Not enough tokens in contract\");\r\n\r\n        // Perform the token transfer.\r\n        bool success = token.transfer(_to, _amount);\r\n\r\n        // Make sure the transfer was successful.\r\n        require(success, \"Token transfer failed\");\r\n    }\r\n\r\n    // function to transfer ownership of the contract\r\n    function transferOwnership(address _newOwner) external {\r\n        // Ensure only the owner can call this function\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can call this function\"\r\n        );\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // function to set rapidEthTokenAddress\r\n    function setTokenAddress(address _address) external {\r\n        require(_address != address(0));\r\n        // Ensure only the owner can call this function\r\n        require(\r\n            msg.sender == owner,\r\n            \"Only the contract owner can call this function\"\r\n        );\r\n        tokenAddress = IERC20(_address);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"seed\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"seed\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"isSeedUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BNBethBridge", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f8", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ab8df8acdb6f2b9d494f848bdb6e810f3ea17d79eb84a310add32594b48668fa"}