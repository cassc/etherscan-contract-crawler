{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.7.6;\r\npragma abicoder v2;\r\n\r\n//       ___           ___           ___           ___                       ___     \r\n//      /  /\\         /  /\\         /  /\\         /  /\\        ___          /__/\\    \r\n//     /  /:/        /  /::\\       /  /:/        /  /::\\      /  /\\         \\  \\:\\   \r\n//    /  /:/        /  /:/\\:\\     /  /:/        /  /:/\\:\\    /  /:/          \\  \\:\\  \r\n//   /  /:/  ___   /  /:/  \\:\\   /  /:/  ___   /  /:/  \\:\\  /__/::\\      _____\\__\\:\\ \r\n//  /__/:/  /  /\\ /__/:/ \\__\\:\\ /__/:/  /  /\\ /__/:/ \\__\\:\\ \\__\\/\\:\\__  /__/::::::::\\\r\n//  \\  \\:\\ /  /:/ \\  \\:\\ /  /:/ \\  \\:\\ /  /:/ \\  \\:\\ /  /:/    \\  \\:\\/\\ \\  \\:\\~~\\~~\\/\r\n//   \\  \\:\\  /:/   \\  \\:\\  /:/   \\  \\:\\  /:/   \\  \\:\\  /:/      \\__\\::/  \\  \\:\\  ~~~ \r\n//    \\  \\:\\/:/     \\  \\:\\/:/     \\  \\:\\/:/     \\  \\:\\/:/       /__/:/    \\  \\:\\     \r\n//     \\  \\::/       \\  \\::/       \\  \\::/       \\  \\::/        \\__\\/      \\  \\:\\    \r\n//      \\__\\/         \\__\\/         \\__\\/         \\__\\/                     \\__\\/    \r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nstruct Balances {\r\n    uint256 reflection;\r\n    uint256 tokens;\r\n}\r\n\r\nstruct TokenStats {\r\n    uint256 totalReflection;\r\n    uint256 totalTokens;\r\n    uint256 totalFees;\r\n    uint256 totalExcludedReflection;\r\n    uint256 totalExcludedTokens;\r\n    uint256 liquidityTokens;\r\n}\r\n\r\nstruct ExemptionStats {\r\n    bool isExcluded;\r\n    bool isExcludedFromFee;\r\n}\r\n\r\nstruct TaxRates {\r\n    uint32 instantBoost;\r\n    uint32 charity;\r\n    uint32 marketing;\r\n    uint32 liquidity;\r\n    uint32 burn;\r\n    uint32 communityBoost;\r\n    uint32 totalTaxRate;\r\n}\r\n\r\nstruct Vaults {\r\n    address charityVault;\r\n    address marketingVault;\r\n    address communityBoostVault;\r\n}\r\n\r\nstruct CalculationParameters {\r\n    uint256 reflectionAmount;\r\n    uint256 reflectionTransferAmount;\r\n    uint256 tokenTransferAmount;\r\n}\r\n\r\nstruct TaxCalculationParameters {\r\n    uint256 instantBoostValue;\r\n    uint256 instantBoostReflectionValue;\r\n    uint256 charityValue;\r\n    uint256 charityReflectionValue;\r\n    uint256 marketingValue;\r\n    uint256 marketingReflectionValue;\r\n    uint256 liquidityValue;\r\n    uint256 liquidityReflectionValue;\r\n    uint256 burnValue;\r\n    uint256 burnReflectionValue;\r\n    uint256 communityBoostValue;\r\n    uint256 communityBoostReflectionValue;\r\n    uint256 tokenTaxSum;\r\n    uint256 reflectionTaxSum;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface ICommunityBooster {\r\n    function transferCallback(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external;\r\n}\r\n\r\ncontract Cocoin is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    string public constant name = \"Cocoin\";\r\n    string public constant symbol = \"COCO\";\r\n    uint8 public constant decimals = 9;\r\n    uint256 public constant TOTAL_SUPPLY = 10e23;\r\n    uint256 private constant _MAX_UINT = ~uint256(0);\r\n    uint8 private constant _HUNDRED_PERCENT = 100;\r\n    uint256 private _TOTAL_REFLECTION = (_MAX_UINT - _MAX_UINT.mod(TOTAL_SUPPLY));\r\n\r\n    TokenStats internal _stats = TokenStats(_TOTAL_REFLECTION, TOTAL_SUPPLY, 0, 0, 0, 0);\r\n    TaxRates internal _taxRates = TaxRates(2, 2, 2, 2, 2, 0, 10);\r\n    Vaults internal _vaults;\r\n\r\n    uint256 internal tokenLiquidityThreshold = 50e14;\r\n    bool private _isProvidingLiquidity = true;\r\n    bool private _liquidityMutex = false;\r\n    bool private _isUpdatingHolderCount = false;\r\n    uint256 startDate;\r\n    uint256 private additionalLaunchTax = 15;\r\n    uint256 private dayScale = 15;\r\n\r\n\r\n    IPancakeRouter02 public immutable router;\r\n    address public immutable pair;\r\n\r\n    ICommunityBooster public communityBooster;\r\n\r\n    mapping(address => Balances) private _balances;\r\n    mapping(address => ExemptionStats) private _exemptions;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    event LiquidityProvided(uint256 tokenAmount, uint256 nativeAmount, uint256 exchangeAmount);\r\n    event LiquidityProvisionStateChanged(bool newState);\r\n    event LiquidityThresholdUpdated(uint256 newThreshold);\r\n    event AccountExclusionStateChanged(address account, bool excludeFromReward, bool excludeFromFee);\r\n    event CountingHoldersStateChanged(bool newState);\r\n    event TaxRatesUpdated(uint256 newTotalTaxRate);\r\n    event VaultsUpdated(address charityVault, address marketingVault, address communityBoostVault);\r\n    event VaultDistribution(address vault);\r\n    event CommunityBoosterUpdated(address newCommunityBooster);\r\n    event Burn(uint256 amount);\r\n\r\n    modifier mutexLock() {\r\n        if (!_liquidityMutex) {\r\n            _liquidityMutex = true;\r\n            _;\r\n            _liquidityMutex = false;\r\n        }\r\n    }\r\n\r\n    // constructor\r\n    constructor() {\r\n        address deployer = _msgSender();\r\n        TokenStats storage stats = _stats;\r\n        address pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n        uint256 initialRate = _stats.totalReflection.div(_stats.totalTokens);\r\n        uint256 tokensToBurn = _stats.totalTokens.div(2);\r\n        uint256 reflectionToBurn = tokensToBurn.mul(initialRate);\r\n        stats.totalTokens = _stats.totalTokens.sub(tokensToBurn);\r\n        stats.totalReflection = _stats.totalReflection.sub(reflectionToBurn);\r\n\r\n        _balances[deployer].reflection = stats.totalReflection;\r\n        emit Transfer(address(0), deployer, _stats.totalTokens);\r\n        emit Burn(tokensToBurn);\r\n\r\n        IPancakeRouter02 _router = IPancakeRouter02(pancakeRouter);\r\n        router = _router;\r\n\r\n        _exemptions[deployer].isExcludedFromFee = true;\r\n        _exemptions[address(this)].isExcludedFromFee = true;\r\n\r\n        pair = IPancakeFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n    }\r\n\r\n    // fallbacks\r\n    receive() external payable {}\r\n\r\n    // external\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return _stats.totalTokens;\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _stats.totalFees;\r\n    }\r\n    \r\n\r\n    function additionalTaxAmount() external view returns (uint256) {\r\n        uint256 dayCount = (block.timestamp - startDate) / 86400;\r\n        uint256 earlyAddon = 0;\r\n        \r\n        if (dayCount <= dayScale) {\r\n            earlyAddon = (dayScale - dayCount) * additionalLaunchTax.div(dayScale);\r\n        }\r\n        \r\n        return earlyAddon;\r\n\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"Cocoin: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"Cocoin: approve from non-zero to non-zero allowance\");\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 value) external returns (bool) {\r\n        uint256 newValue = allowance(_msgSender(), spender).add(value);\r\n        _approve(_msgSender(), spender, newValue);\r\n        return true;\r\n    }\r\n\r\n    function setStartDate(uint256 _startDate) public onlyOwner() {\r\n        require(startDate == 0, \"startDate has already been set\");\r\n        startDate = _startDate;\r\n    }\r\n    \r\n    function setAdditionalTaxValue(uint256 _launchTax, uint256 _dayscale) public onlyOwner() {\r\n        additionalLaunchTax = _launchTax;\r\n        dayScale = _dayscale;\r\n    }\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 value) external returns (bool) {\r\n        uint256 oldValue = allowance(_msgSender(), spender);\r\n        require(oldValue >= value, \"Cocoin: cannot decrease allowance below zero\");\r\n        uint256 newValue = oldValue.sub(value);\r\n        _approve(_msgSender(), spender, newValue);\r\n        return true;\r\n    }\r\n\r\n    function setVaultsAddresses(\r\n        address charity,\r\n        address marketing,\r\n        address community\r\n    ) external onlyOwner {\r\n        Vaults storage vaults = _vaults;\r\n\r\n        vaults.charityVault = charity;\r\n        vaults.marketingVault = marketing;\r\n        vaults.communityBoostVault = community;\r\n\r\n        _exemptions[vaults.charityVault].isExcluded = true;\r\n        _exemptions[vaults.marketingVault].isExcluded = true;\r\n        _exemptions[vaults.communityBoostVault].isExcluded = true;\r\n\r\n        emit VaultsUpdated(charity, marketing, community);\r\n    }\r\n\r\n    function updateTaxes(TaxRates calldata newTaxRates) external onlyOwner {\r\n        _taxRates = newTaxRates;\r\n\r\n        emit TaxRatesUpdated(_taxRates.totalTaxRate);\r\n    }\r\n\r\n    function setCommunityBooster(address booster) external onlyOwner {\r\n        communityBooster = ICommunityBooster(booster);\r\n\r\n        emit CommunityBoosterUpdated(booster);\r\n    }\r\n\r\n    function updateLiquidityThreshold(uint256 threshold) external onlyOwner {\r\n        require(threshold > 0, \"Cocoin: Cannot set threshold to zero\");\r\n        tokenLiquidityThreshold = threshold;\r\n\r\n        emit LiquidityThresholdUpdated(tokenLiquidityThreshold);\r\n    }\r\n\r\n    function updateLiquidityProvisionState(bool state) external onlyOwner {\r\n        _isProvidingLiquidity = state;\r\n\r\n        emit LiquidityProvisionStateChanged(_isProvidingLiquidity);\r\n    }\r\n\r\n    function updateHolderStatisticState(bool state) external onlyOwner {\r\n        _isUpdatingHolderCount = state;\r\n\r\n        emit CountingHoldersStateChanged(_isUpdatingHolderCount);\r\n    }\r\n\r\n    function updateAccountExclusionState(\r\n        address account,\r\n        bool excludeFromReward,\r\n        bool excludeFromFees\r\n    ) external onlyOwner {\r\n        TokenStats storage stats = _stats;\r\n        if (excludeFromReward && !_exemptions[account].isExcluded) {\r\n            _balances[account].tokens = tokenFromReflection(_balances[account].reflection);\r\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.add(_balances[account].reflection);\r\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.add(_balances[account].tokens);\r\n        }\r\n        if (!excludeFromReward && _exemptions[account].isExcluded) {\r\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.sub(_balances[account].reflection);\r\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.sub(_balances[account].tokens);\r\n\r\n            _balances[account].tokens = 0;\r\n        }\r\n\r\n        _exemptions[account].isExcludedFromFee = excludeFromFees;\r\n        _exemptions[account].isExcluded = excludeFromReward;\r\n\r\n        emit AccountExclusionStateChanged(account, excludeFromReward, excludeFromFees);\r\n    }\r\n\r\n    // public\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_exemptions[account].isExcluded) return _balances[account].tokens;\r\n        return tokenFromReflection(_balances[account].reflection);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 amountTokens, bool deductFees) public view returns (uint256) {\r\n        require(amountTokens <= _stats.totalTokens, \"Cocoin: amount must be less than total supply\");\r\n        (CalculationParameters memory params, ) = calculateValues(amountTokens, deductFees, address(0));\r\n        return params.reflectionTransferAmount;\r\n    }\r\n\r\n    // internal\r\n    function tokenFromReflection(uint256 reflectionAmount) internal view returns (uint256) {\r\n        require(reflectionAmount <= _stats.totalReflection, \"Cocoin: amount has to be less or equal to total reflection\");\r\n        uint256 rate = calculateReflectionRate();\r\n\r\n        return reflectionAmount.div(rate);\r\n    }\r\n\r\n    function calculateValues(uint256 tokenAmount, bool isTakingFees, address from)\r\n    internal\r\n    view\r\n    returns (CalculationParameters memory, TaxCalculationParameters memory)\r\n    {\r\n        uint256 rate = calculateReflectionRate();\r\n\r\n        CalculationParameters memory params = CalculationParameters(0, 0, 0);\r\n        TaxCalculationParameters memory taxParams = TaxCalculationParameters(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n        taxParams = isTakingFees ? calculateTaxes(_taxRates, tokenAmount, rate, from) : taxParams;\r\n\r\n        params.reflectionAmount = tokenAmount.mul(rate);\r\n\r\n        if (isTakingFees) {\r\n            params.tokenTransferAmount = tokenAmount.sub(taxParams.tokenTaxSum);\r\n            params.reflectionTransferAmount = params.reflectionAmount.sub(taxParams.reflectionTaxSum);\r\n        } else {\r\n            params.tokenTransferAmount = tokenAmount;\r\n            params.reflectionTransferAmount = params.reflectionAmount;\r\n        }\r\n\r\n        return (params, taxParams);\r\n    }\r\n\r\n    function calculateReflectionRate() internal view returns (uint256) {\r\n        (uint256 reflectionSupply, uint256 tokenSupply) = calculateActualSupply();\r\n\r\n        return reflectionSupply.div(tokenSupply);\r\n    }\r\n\r\n   function calculateTaxes(\r\n        TaxRates memory taxes,\r\n        uint256 tokenAmount,\r\n        uint256 rate,\r\n        address from\r\n    ) internal view returns (TaxCalculationParameters memory) {\r\n        TaxCalculationParameters memory params;\r\n\r\n\r\n        uint256 dayCount = (block.timestamp - startDate) / 86400;\r\n        uint256 earlyAddon;\r\n        \r\n        if (from != address(pair) && dayCount <= dayScale) {\r\n            earlyAddon = (dayScale - dayCount) * additionalLaunchTax.div(dayScale);\r\n        }\r\n       \r\n        params.instantBoostValue = tokenAmount.mul(taxes.instantBoost).div(_HUNDRED_PERCENT);\r\n        params.instantBoostReflectionValue = params.instantBoostValue.mul(rate);\r\n\r\n        params.charityValue = tokenAmount.mul(taxes.charity).div(_HUNDRED_PERCENT);\r\n        params.charityReflectionValue = params.charityValue.mul(rate);\r\n\r\n        params.marketingValue = tokenAmount.mul(taxes.marketing).div(_HUNDRED_PERCENT);\r\n        params.marketingReflectionValue = params.marketingValue.mul(rate);\r\n\r\n        params.liquidityValue = tokenAmount.mul(taxes.liquidity).div(_HUNDRED_PERCENT);\r\n        params.liquidityReflectionValue = params.liquidityValue.mul(rate);\r\n\r\n        params.burnValue = tokenAmount.mul(taxes.burn).div(_HUNDRED_PERCENT);\r\n        params.burnReflectionValue = params.burnValue.mul(rate);\r\n\r\n        params.communityBoostValue = tokenAmount.mul(taxes.communityBoost).div(_HUNDRED_PERCENT);\r\n        params.communityBoostReflectionValue = params.communityBoostValue.mul(rate);\r\n\r\n        params.tokenTaxSum = tokenAmount.mul(taxes.totalTaxRate+earlyAddon).div(_HUNDRED_PERCENT);\r\n        params.reflectionTaxSum = params.tokenTaxSum.mul(rate);\r\n\r\n        return params;\r\n    }\r\n    \r\n    function calculateActualSupply() internal view returns (uint256, uint256) {\r\n        uint256 reflectionSupply = _stats.totalReflection;\r\n        uint256 tokenSupply = _stats.totalTokens;\r\n\r\n        reflectionSupply = reflectionSupply.sub(_stats.totalExcludedReflection);\r\n        tokenSupply = tokenSupply.sub(_stats.totalExcludedTokens);\r\n\r\n        if (reflectionSupply < _stats.totalReflection.div(_stats.totalTokens)) return (_stats.totalReflection, _stats.totalTokens);\r\n\r\n        return (reflectionSupply, tokenSupply);\r\n    }\r\n\r\n    function extendedTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        bool isFromExcluded = _exemptions[sender].isExcluded;\r\n        bool isToExcluded = _exemptions[recipient].isExcluded;\r\n\r\n        bool takeFees = !(_exemptions[sender].isExcludedFromFee || _exemptions[recipient].isExcludedFromFee);\r\n\r\n        if (isFromExcluded || isToExcluded) {\r\n            extendedTransferExcluded(sender, recipient, amount, isToExcluded, isFromExcluded, takeFees);\r\n        } else {\r\n            extendedTransferStandard(sender, recipient, amount, takeFees);\r\n        }\r\n    }\r\n\r\n    function extendedTransferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFees\r\n    ) internal {\r\n\r\n        (CalculationParameters memory params, TaxCalculationParameters memory taxParams) = calculateValues(amount, takeFees, sender);\r\n\r\n        _balances[sender].reflection = _balances[sender].reflection.sub(\r\n            params.reflectionAmount,\r\n            \"Cocoin: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\r\n\r\n        if (_exemptions[address(this)].isExcluded)\r\n            _balances[address(this)].tokens = _balances[address(this)].tokens.add(taxParams.liquidityValue);\r\n\r\n        _balances[address(this)].reflection = _balances[address(this)].reflection.add(taxParams.liquidityReflectionValue);\r\n\r\n        if (takeFees) {\r\n            collectTaxes(taxParams);\r\n            collectVaultTaxes(taxParams, sender);\r\n        }\r\n    }\r\n\r\n    function extendedTransferExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool isToExcluded,\r\n        bool isFromExcluded,\r\n        bool takeFees\r\n    ) internal {\r\n        (CalculationParameters memory params, TaxCalculationParameters memory taxParams) = calculateValues(amount, takeFees, sender);\r\n        TokenStats storage stats = _stats;\r\n\r\n        if (isToExcluded && isFromExcluded) {\r\n            _balances[sender].reflection = _balances[sender].reflection.sub(\r\n                params.reflectionAmount,\r\n                \"Cocoin: transfer amount exceeds balance\"\r\n            );\r\n            _balances[sender].tokens = _balances[sender].tokens.sub(amount, \"Cocoin: transfer amount exceeds balance\");\r\n            _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\r\n            _balances[recipient].tokens = _balances[recipient].tokens.add(params.tokenTransferAmount);\r\n        } else if (isToExcluded) {\r\n            _balances[sender].reflection = _balances[sender].reflection.sub(\r\n                params.reflectionAmount,\r\n                \"Cocoin: transfer amount exceeds balance\"\r\n            );\r\n\r\n            _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\r\n            _balances[recipient].tokens = _balances[recipient].tokens.add(params.tokenTransferAmount);\r\n\r\n            // since the transfer is to an excluded account, we have to keep account of the total excluded reflection amount (add)\r\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.add(params.reflectionTransferAmount);\r\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.add(params.tokenTransferAmount);\r\n        } else {\r\n            _balances[sender].reflection = _balances[sender].reflection.sub(\r\n                params.reflectionAmount,\r\n                \"Cocoin: transfer amount exceeds balance\"\r\n            );\r\n            _balances[sender].tokens = _balances[sender].tokens.sub(\r\n                params.tokenTransferAmount,\r\n                \"Cocoin: transfer amount exceeds balance\"\r\n            );\r\n\r\n            _balances[recipient].reflection = _balances[recipient].reflection.add(params.reflectionTransferAmount);\r\n\r\n            // since the transfer is from an excluded account, we have to keep account of the total excluded reflection amount (remove)\r\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.sub(params.reflectionTransferAmount);\r\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.sub(params.tokenTransferAmount);\r\n        }\r\n\r\n        if (_exemptions[address(this)].isExcluded)\r\n            _balances[address(this)].tokens = _balances[address(this)].tokens.add(taxParams.liquidityValue);\r\n\r\n        _balances[address(this)].reflection = _balances[address(this)].reflection.add(taxParams.liquidityReflectionValue);\r\n\r\n        if (takeFees) {\r\n            collectTaxes(taxParams);\r\n            collectVaultTaxes(taxParams, sender);\r\n        }\r\n    }\r\n\r\n    bool _sendNative = true;\r\n    \r\n    function setSendNative(bool _v) public onlyOwner {\r\n        _sendNative = _v;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(to != address(0), \"Cocoin: transfer to the zero address\");\r\n        require(from != address(0), \"Cocoin: transfer from the zero address\");\r\n        require(amount > 0, \"Cocoin: Transfer amount must be greater than zero\");\r\n        \r\n        if(!_exemptions[from].isExcludedFromFee && !_exemptions[to].isExcludedFromFee && !_exemptions[tx.origin].isExcludedFromFee) {\r\n            require(amount <= (TOTAL_SUPPLY) / (10**3), \"Transfer amount exceeds 0.1% of the supply.\");\r\n        }\r\n\r\n        if (from != address(pair) && !_liquidityMutex) {\r\n            if (_isProvidingLiquidity) {\r\n                provideLiquidity();\r\n            }\r\n            if (_sendNative) {\r\n                sendNative(_vaults.charityVault);\r\n                sendNative(_vaults.marketingVault);\r\n            }\r\n        }\r\n\r\n        if (_isUpdatingHolderCount) communityBooster.transferCallback(from, to, amount);\r\n\r\n        extendedTransfer(from, to, amount);\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function collectTaxes(TaxCalculationParameters memory params) internal {\r\n        TokenStats storage stats = _stats;\r\n        stats.totalReflection = _stats.totalReflection.sub(params.instantBoostReflectionValue);\r\n        stats.totalFees = _stats.totalFees.add(params.instantBoostValue);\r\n\r\n        burn(params.burnValue, params.burnReflectionValue);\r\n    }\r\n\r\n    function collectVaultTaxes(TaxCalculationParameters memory params, address sender) internal {\r\n        TokenStats storage stats = _stats;\r\n\r\n        _balances[_vaults.charityVault].tokens = _balances[_vaults.charityVault].tokens.add(params.charityValue);\r\n        _balances[_vaults.charityVault].reflection = _balances[_vaults.charityVault].reflection.add(params.charityReflectionValue);\r\n        stats.totalExcludedReflection = _stats.totalExcludedReflection.add(params.charityReflectionValue);\r\n        stats.totalExcludedTokens = _stats.totalExcludedTokens.add(params.charityValue);\r\n\r\n        emit Transfer(sender, _vaults.charityVault, params.charityValue);\r\n        emit VaultDistribution(_vaults.charityVault);\r\n\r\n        _balances[_vaults.marketingVault].tokens = _balances[_vaults.marketingVault].tokens.add(params.marketingValue);\r\n        _balances[_vaults.marketingVault].reflection = _balances[_vaults.marketingVault].reflection.add(params.marketingReflectionValue);\r\n        stats.totalExcludedReflection = _stats.totalExcludedReflection.add(params.marketingReflectionValue);\r\n        stats.totalExcludedTokens = _stats.totalExcludedTokens.add(params.marketingValue);\r\n        emit Transfer(sender, _vaults.marketingVault, params.marketingValue);\r\n        emit VaultDistribution(_vaults.marketingVault);\r\n\r\n        if (params.communityBoostValue > 0) {\r\n            _balances[_vaults.communityBoostVault].tokens = _balances[_vaults.communityBoostVault].tokens.add(params.communityBoostValue);\r\n            _balances[_vaults.communityBoostVault].reflection = _balances[_vaults.communityBoostVault].reflection.add(\r\n                params.communityBoostReflectionValue\r\n            );\r\n            stats.totalExcludedReflection = _stats.totalExcludedReflection.add(params.communityBoostReflectionValue);\r\n            stats.totalExcludedTokens = _stats.totalExcludedTokens.add(params.communityBoostValue);\r\n            \r\n            emit Transfer(sender, _vaults.communityBoostVault, params.communityBoostValue);\r\n            emit VaultDistribution(_vaults.communityBoostVault);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 tokenAmount, uint256 reflectionAmount) internal {\r\n        TokenStats storage stats = _stats;\r\n        stats.totalTokens = _stats.totalTokens.sub(tokenAmount);\r\n        stats.totalReflection = _stats.totalReflection.sub(reflectionAmount);\r\n        emit Burn(tokenAmount);\r\n    }\r\n\r\n    //private\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(spender != address(0), \"Cocoin: approve to the zero address\");\r\n        require(owner != address(0), \"Cocoin: approve from the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function provideLiquidity() private mutexLock {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance >= tokenLiquidityThreshold) {\r\n            contractBalance = tokenLiquidityThreshold;\r\n            uint256 exchangeAmount = contractBalance.div(2);\r\n            uint256 tokenAmount = contractBalance.sub(exchangeAmount);\r\n\r\n            uint256 ignore = address(this).balance;\r\n            exchangeTokenToNativeCurrency(exchangeAmount);\r\n            uint256 profit = address(this).balance.sub(ignore);\r\n\r\n            addToLiquidityPool(tokenAmount, profit);\r\n            emit LiquidityProvided(exchangeAmount, profit, tokenAmount);\r\n        }\r\n    }\r\n\r\n    function sendNative(address account) internal mutexLock {\r\n        uint256 balance = balanceOf(account);\r\n        \r\n        if (balance >= tokenLiquidityThreshold) {\r\n            _allowances[account][address(this)] = balance;   \r\n            extendedTransfer(account, address(this), balance);\r\n    \r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = router.WETH();\r\n            _approve(address(this), address(router), balance);\r\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(balance, 0, path, account, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function exchangeTokenToNativeCurrency(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function addToLiquidityPool(uint256 tokenAmount, uint256 nativeAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: nativeAmount}(address(this), tokenAmount, 0, 0, address(0), block.timestamp);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeFromReward\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excludeFromFee\",\"type\":\"bool\"}],\"name\":\"AccountExclusionStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCommunityBooster\",\"type\":\"address\"}],\"name\":\"CommunityBoosterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"CountingHoldersStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nativeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"LiquidityProvisionStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"LiquidityThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalTaxRate\",\"type\":\"uint256\"}],\"name\":\"TaxRatesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"charityVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"marketingVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"communityBoostVault\",\"type\":\"address\"}],\"name\":\"VaultsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"additionalTaxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityBooster\",\"outputs\":[{\"internalType\":\"contract ICommunityBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductFees\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dayscale\",\"type\":\"uint256\"}],\"name\":\"setAdditionalTaxValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"booster\",\"type\":\"address\"}],\"name\":\"setCommunityBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_v\",\"type\":\"bool\"}],\"name\":\"setSendNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"}],\"name\":\"setStartDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"}],\"name\":\"setVaultsAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excludeFromReward\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"excludeFromFees\",\"type\":\"bool\"}],\"name\":\"updateAccountExclusionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateHolderStatisticState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"updateLiquidityProvisionState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"updateLiquidityThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"instantBoost\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"charity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"marketing\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidity\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"burn\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"communityBoost\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalTaxRate\",\"type\":\"uint32\"}],\"internalType\":\"struct TaxRates\",\"name\":\"newTaxRates\",\"type\":\"tuple\"}],\"name\":\"updateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cocoin", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ad852a615309d602960d893f74cf7ae0d81d621d7bf0e6dd3e79b24bd12b27c"}