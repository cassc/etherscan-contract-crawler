{"SourceCode": "pragma solidity ^0.5.16; \r\n\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * > Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * `IERC20.balanceOf` and `IERC20.transfer`.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract's constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * > It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// https://docs.synthetix.io/contracts/Owned\r\ncontract Owned {\r\n    address public owner;\r\n    address public nominatedOwner;\r\n\r\n    constructor(address _owner) public {\r\n        require(_owner != address(0), \"Owner address cannot be 0\");\r\n        owner = _owner;\r\n        emit OwnerChanged(address(0), _owner);\r\n    }\r\n\r\n    function nominateNewOwner(address _owner) external onlyOwner {\r\n        nominatedOwner = _owner;\r\n        emit OwnerNominated(_owner);\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n        emit OwnerChanged(owner, nominatedOwner);\r\n        owner = nominatedOwner;\r\n        nominatedOwner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n        _;\r\n    }\r\n\r\n    event OwnerNominated(address newOwner);\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n}\r\n\r\n// Inheritance\r\n// https://docs.synthetix.io/contracts/Pausable\r\ncontract Pausable is Owned {\r\n    uint public lastPauseTime;\r\n    bool public paused;\r\n\r\n    constructor() internal {\r\n        // This contract is abstract, and thus cannot be instantiated directly\r\n        require(owner != address(0), \"Owner must be set\");\r\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\r\n    }\r\n\r\n    /**\r\n     * @notice Change the paused state of the contract\r\n     * @dev Only the contract owner may call this.\r\n     */\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        // Ensure we're actually changing the state before we do anything\r\n        if (_paused == paused) {\r\n            return;\r\n        }\r\n\r\n        // Set our paused state.\r\n        paused = _paused;\r\n\r\n        // If applicable, set the last pause time.\r\n        if (paused) {\r\n            lastPauseTime = now;\r\n        }\r\n\r\n        // Let everyone know that our pause state has changed.\r\n        emit PauseChanged(paused);\r\n    }\r\n\r\n    event PauseChanged(bool isPaused);\r\n\r\n    modifier notPaused {\r\n        require(!paused, \"This action cannot be performed while the contract is paused\");\r\n        _;\r\n    }\r\n}\r\n\r\n// Inheritance\r\ncontract StakingRewards is Owned, ReentrancyGuard, Pausable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /* ========== UTIL FUNCTIONS ========== */\r\n\r\n    function getTime() internal view returns (uint256) {\r\n        // current block timestamp as seconds since unix epoch\r\n        // Used to mock time changes in tests\r\n        return now;\r\n    }\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // IERC20 public rewardsToken;\r\n    IERC20 public stakingToken;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address => uint256) private _stakedBalance;\r\n    mapping(address => uint256) private _stakedTime;\r\n    mapping(address => uint256) private _unstakingBalance;\r\n    mapping(address => uint256) private _unstakingTime;\r\n    mapping(address => uint256) private _rewardBalance;\r\n\r\n    // Added for looping over addresses in event of APR change\r\n    mapping(address => uint256) private _addressToIndex;\r\n    address[] public allAddress;\r\n\r\n\r\n    uint256 private rewardDistributorBalance = 1000000*1e18;\r\n    uint256 internal rewardInterval = 86400 * 1; // 1 day\r\n    uint256 internal unstakingInterval = 86400 * 7; // 7 day\r\n\r\n    uint256 public rewardPerIntervalDivider = 822;\r\n\r\n    uint256 private _convertDecimalTokenBalance = 10**18;\r\n\r\n    uint256 public minStakeBalance = 1 * _convertDecimalTokenBalance;\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor(\r\n        address _owner,\r\n        address _stakingToken\r\n    ) public Owned(_owner) {\r\n        stakingToken = IERC20(_stakingToken);\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    // How much Token is in the contract total?\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // How much Token has address staked?\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _stakedBalance[account];\r\n    }\r\n\r\n    // When did user stake?\r\n    function stakeTime(address account) external view returns (uint256) {\r\n        return _stakedTime[account];\r\n    }\r\n\r\n    // How much Token is unstaking in the address's current unstaking procedure?\r\n    function unstakingBalanceOf(address account) external view returns (uint256) {\r\n        return  _unstakingBalance[account];\r\n    }\r\n\r\n    // How much time is left in the address's current unstaking procedure?\r\n    function unstakingTimeOf(address account) external view returns (uint256) {\r\n        return _unstakingTime[account];\r\n    }\r\n\r\n    // How much have the address earned?\r\n    function rewardBalanceOf(address account) external view returns (uint256) {\r\n        return _rewardBalance[account];\r\n    }\r\n\r\n    // How much Token is available to distribute from reward disributor address? (Controlled by Mantra council)\r\n    function rewardDistributorBalanceOf() external view returns (uint256) {\r\n        return rewardDistributorBalance;\r\n    }\r\n\r\n    // When is the address's next reward going to become unstakable? \r\n    function nextRewardApplicableTime(address account) external view returns (uint256) {\r\n        require(_stakedTime[account] != 0, \"You dont have a stake in progress\");\r\n        require(_stakedTime[account] <= getTime(), \"Your stake takes 24 hours to become available to interact with\");\r\n        uint256 secondsRemaining = (getTime() - _stakedTime[account]).mod(rewardInterval);\r\n        return secondsRemaining;\r\n    }\r\n\r\n    // How much has account earned? Account's potential rewards ready to begin unstaking. \r\n    function earned(address account) public view returns (uint256) {\r\n        uint256 perIntervalReward = perIntervalRewardOf(account);\r\n        uint256 intervalsStaked = stakedIntervalsCountOf(account);\r\n        return perIntervalReward.mul(intervalsStaked);\r\n    }\r\n\r\n    function perIntervalRewardOf(address account) public view returns (uint256) {\r\n        return _stakedBalance[account].div(rewardPerIntervalDivider);\r\n    }\r\n\r\n    function stakedIntervalsCountOf(address account) public view returns (uint256) {\r\n        if (_stakedTime[account] == 0) return 0;\r\n        uint256 diffTime = getTime().sub(_stakedTime[account]);\r\n        return diffTime.div(rewardInterval);\r\n    }\r\n\r\n    // Address loop\r\n\r\n    function getAddresses(uint256 i) public view returns (address) {\r\n        return allAddress[i];\r\n    }\r\n\r\n    function getAddressesLength() public view returns (uint256) {\r\n        return allAddress.length;\r\n    }\r\n\r\n    \r\n\r\n    // \r\n\r\n    /* ========== END OF VIEWS ========== */\r\n\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //  STAKE ()\r\n    // \r\n    //      #require() amount is greater than ZERO\r\n    //      #require() address that is staking is not the contract address\r\n    // \r\n    //      Insert : token balance to user stakedBalances[address]\r\n    //      Insert : current block timestamp timestamp to stakeTime[address]\r\n    //      Add : token balance to total supply\r\n    //      Transfer : token balance from user to this contract\r\n    // \r\n    //  EXIT\r\n    //  \r\n\r\n    function stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {\r\n        \r\n        require(amount > 0, \"Cannot stake 0\");\r\n        uint256 newStakedBalance = _stakedBalance[msg.sender].add(amount);\r\n        require(newStakedBalance >= minStakeBalance, \"Staked balance is less than minimum stake balance\");\r\n        uint256 currentTimestamp = getTime();\r\n        _stakedBalance[msg.sender] = newStakedBalance;\r\n        _stakedTime[msg.sender] = currentTimestamp;\r\n        _totalSupply = _totalSupply.add(amount);\r\n\r\n\r\n        // \r\n            if (_addressToIndex[msg.sender] > 0) {\r\n               \r\n            } else {\r\n                allAddress.push(msg.sender);\r\n                uint256 index = allAddress.length;\r\n                _addressToIndex[msg.sender] = index;\r\n            }\r\n        // \r\n\r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   UNSTAKE () \r\n    // \r\n    //      initiate by running updateReward() to push the system forward\r\n    //  \r\n    //      #require() that the amount of tokens specified to unstake is above ZERO    \r\n    //      #require() that the user has a current stakedBalance[address] above ZERO\r\n    //      #require() that the amount of tokens specified to unstake is equal or less than thier current stakedBalance[] \r\n    //      #require() that the address staking is not the contract address\r\n    //   \r\n    //      MODIFY : subtract token balance from stakedBalance[address]\r\n    // \r\n    //      if (stakedBalance == 0)\r\n    //          Update : stake timestamp to ZERO stakeTime[address] // exit the system\r\n    //      Else ()\r\n    //          #require() that the updates stake balance is above minimum stake value\r\n    //          Update : stake timestamp to now stakeTime[address] // for that address still remains in the system\r\n\r\n    //      MODIFY : token balance to user  _unstakingBalance[address]\r\n    //      MODIFY : (time + unstakingInterval) timestamp to stakeTime[address]\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function unstake(uint256 amount) public updateReward(msg.sender) {\r\n        _unstake(msg.sender, amount);\r\n    }\r\n\r\n    // Allows user to unstake tokens without (or with partial) rewards in case of empty reward distribution pool\r\n    function exit() public {\r\n        uint256 reward = Math.min(earned(msg.sender), rewardDistributorBalance);\r\n        require(reward > 0 || _rewardBalance[msg.sender] > 0 || _stakedBalance[msg.sender] > 0, \"No tokens to exit\");\r\n        _addReward(msg.sender, reward);\r\n        _stakedTime[msg.sender] = 0;\r\n        if (_rewardBalance[msg.sender] > 0) withdrawReward();\r\n        if (_stakedBalance[msg.sender] > 0) _unstake(msg.sender, _stakedBalance[msg.sender]);\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   WITHDRAW UNSTAKED BALANCE (uint256 amount) \r\n    // \r\n    //      updateReward()\r\n    //  \r\n    //      #require() that the amount of tokens specified to unstake is above ZERO    \r\n    //      #require() that the user has a current unstakingBalance[address] above amount specified to withdraw\r\n    //      #require() that the current block time is greater than their unstaking end date (their unstaking or vesting period has finished)\r\n    //   \r\n    //      MODIFY :  _unstakingBalance[address] to  _unstakingBalance[address] minus amount\r\n    //      MODIFY : _totalSupply to _totalSupply[address] minus amount\r\n    //      \r\n    //      TRANSFER : amount to address that called the function\r\n    // \r\n    //   \r\n    //   EXIT\r\n    //  \r\n    \r\n    function withdrawUnstakedBalance(uint256 amount) public nonReentrant updateReward(msg.sender) {\r\n\r\n        require(amount > 0, \"Account does not have an unstaking balance\");\r\n        require(_unstakingBalance[msg.sender] >= amount, \"Account does not have that much balance unstaked\");\r\n        require(_unstakingTime[msg.sender] <= getTime(), \"Unstaking period has not finished yet\");\r\n\r\n         _unstakingBalance[msg.sender] =  _unstakingBalance[msg.sender].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        stakingToken.safeTransfer(msg.sender, amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   LOCK IN REWARD () \r\n    // \r\n    //      updateReward()\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function lockInReward() public updateReward(msg.sender) {}\r\n\r\n    function lockInRewardOnBehalf(address _address) private updateReward(_address) {}\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   WITHDRAW REWARD ()\r\n    // \r\n    //      updateReward()\r\n    //  \r\n    //      #require() that the reward balance of the user is above ZERO\r\n    //   \r\n    //      TRANSFER : transfer reward balance to address that called the function\r\n    // \r\n    //      MODIFY : update rewardBalance to ZERO\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function withdrawReward() public updateReward(msg.sender) {\r\n        uint256 reward = _rewardBalance[msg.sender];\r\n        require(reward > 0, \"You have not earned any rewards yet\");\r\n        _rewardBalance[msg.sender] = 0;\r\n        _unstakingBalance[msg.sender] = _unstakingBalance[msg.sender].add(reward);\r\n        _unstakingTime[msg.sender] = getTime() + unstakingInterval;\r\n        emit RewardWithdrawn(msg.sender, reward);\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   STAKE REWARD ()\r\n    // \r\n    //      updateReward()\r\n    //  \r\n    //      #require() that the reward balance of the user is above ZERO\r\n    //   \r\n    //      MODIFY : update stakedBalances[address] = (stakedBalances[address] + _rewardBalance[msg.sender])\r\n    // \r\n    //      MODIFY : update rewardBalance to ZERO\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function stakeReward() public updateReward(msg.sender) {\r\n        require(_rewardBalance[msg.sender] > 0, \"You have not earned any rewards yet\");\r\n        _stakedBalance[msg.sender] = _stakedBalance[msg.sender].add(_rewardBalance[msg.sender]);\r\n        _rewardBalance[msg.sender] = 0;\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   ADD REWARD SUPPLY () \r\n    // \r\n    //      #require() that the amount of tokens being added is above ZERO\r\n    //      #require() that the user\r\n    //   \r\n    //      MODIFY : update rewardDistributorBalance = rewardDistributorBalance + amount\r\n    //      MODIFY : update _totalSupply = _totalSupply + amount\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function addRewardSupply(uint256 amount) external onlyOwner {\r\n        require(amount > 0, \"Cannot add 0 tokens\");\r\n        \r\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n        rewardDistributorBalance = rewardDistributorBalance.add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   REMOVE REWARD SUPPLY | ONLY OWNER\r\n    // \r\n    //      #require() that the amount of tokens being removed is above ZERO\r\n    //      #require() that the amount is equal to or below the rewardDistributorBalance\r\n    //      #require() that the amount is equal to or below the totalSupply of tokens in the contract\r\n    //  \r\n    //      TRANSFER: amount of tokens from contract\r\n    //  \r\n    //      MODIFY : update rewardDistributorBalance = rewardDistributorBalance - amount\r\n    //      MODIFY : update _totalSupply = _totalSupply - amount\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function removeRewardSupply(uint256 amount) external onlyOwner nonReentrant {\r\n        require(amount > 0, \"Cannot withdraw 0\");\r\n        require(amount <= rewardDistributorBalance, \"rewardDistributorBalance has less tokens than requested\");\r\n        require(amount <= _totalSupply, \"Amount is greater that total supply\");\r\n        stakingToken.safeTransfer(owner, amount);\r\n        rewardDistributorBalance = rewardDistributorBalance.sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n    }\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   SET REWARDS INTERVAL () ONLY OWNER\r\n    // \r\n    //      #require() that reward interval sullpied as argument is greater than 1 and less than 365 inclusive\r\n    //   \r\n    //      MODIFY : rewardInterval to supplied _rewardInterval\r\n    // \r\n    //      EMIT : update reward interval\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function setRewardsInterval(uint256 _rewardInterval) external onlyOwner {\r\n        require(\r\n            _rewardInterval >= 1 && _rewardInterval <= 365,\r\n            \"Staking reward interval must be between 1 and 365 inclusive\"\r\n        );\r\n        rewardInterval = _rewardInterval * 1 days;\r\n        emit RewardsDurationUpdated(rewardInterval);\r\n    }\r\n\r\n    // ------ FUNCTION -------#\r\n    // \r\n    //   SET REWARDS DIVIDER () ONLY OWNER\r\n    // \r\n    //      #require() that reward divider sullpied as argument is greater than original divider\r\n    //   \r\n    //      MODIFY : rewardIntervalDivider to supplied _rewardInterval\r\n    //   \r\n    //   EXIT\r\n    //  \r\n\r\n    function updateChunkUsersRewards(uint256 startIndex, uint256 endIndex) external onlyOwner {\r\n\r\n        uint256 length = allAddress.length;\r\n        require(endIndex <= length, \"Cant end on index greater than length of addresses\");\r\n        require(endIndex > startIndex, \"Nothing to iterate over\");\r\n        \r\n\r\n        for (uint i = startIndex; i < endIndex; i++) {\r\n            lockInRewardOnBehalf(allAddress[i]);\r\n        }\r\n    }\r\n\r\n    function setRewardsDivider(uint256 _rewardPerIntervalDivider) external onlyOwner {\r\n        require(\r\n            _rewardPerIntervalDivider >= 411,\r\n            \"Reward can only be lowered, divider must be greater than 410\"\r\n        );\r\n        rewardPerIntervalDivider = _rewardPerIntervalDivider;\r\n    }\r\n\r\n    // Keep in mind, that this method receives value in wei.\r\n    // It means, that if owner wants to set min staking balance to 2 \r\n    // he needs to pass 2000000000000000000 as argument (if BEP20's decimals is 18).\r\n    function setMinStakeBalance(uint256 _minStakeBalance) external onlyOwner {\r\n        minStakeBalance = _minStakeBalance;\r\n    }\r\n    \r\n  /* ========== MODIFIERS ========== */\r\n\r\n    // ------ FUNCTION -------\r\n    // \r\n    //   UPDATE REWARD (address) INTERNAL\r\n    // \r\n    //      IF (stakeTime[address] > 0)\r\n    //      \r\n    //          VAR reward = 0;\r\n    //          VAR diffTime : Take current block timestamp and subtract the users stakedTime entry (timestamp)\r\n    //          VAR perIntervalReward : current staked balance divided by APR variable divider. Calculate the reward they should earn per interval that have occured since inital stake or last call of updateReward()\r\n    //          VAR intervalsStaked : diffTime calculation divided by the rewardInterval (24 hours)\r\n    //          reward : reward earned per interval based on current stake multiplied by how many intervals you have not calimed a reward for.\r\n    //          \r\n    // \r\n    //          #require() that reward user is about to receive is not greater than the rewardDistributorBalance\r\n    // \r\n    //          IF (the reward is greater than ZERO)  \r\n    // \r\n    //              MODIFY : rewardDistributorBalance to rewardDistributorBalance minus the reward paid\r\n    //              MODIFY : _totalSupply to _totalSupply minus the reward paid\r\n    //              MODIFY : _stakedTime[address] to now(timestamp)\r\n    //              MODIFY : _rewardBalance[address] to _rewardBalance[address] plus reward\r\n    // \r\n    //              EMIT : rewardPaid to the address calling the function (reward)\r\n    // \r\n    //          ELSE\r\n    //              NOTHING : user has nothing to claim. ignore and EXIT.\r\n    //      ELSE\r\n    //          NOTHING : user has nothing to claim. ignore and EXIT.\r\n    //   \r\n    //      EXIT\r\n    // \r\n\r\n    function _addReward(address account, uint256 amount) private {\r\n        if (amount == 0) return;\r\n        // Update stake balance to unstaking balance\r\n        rewardDistributorBalance = rewardDistributorBalance.sub(amount);\r\n        _rewardBalance[account] = _rewardBalance[account].add(amount);\r\n        emit RewardPaid(account, amount);\r\n    }\r\n\r\n    function _unstake(address account, uint256 amount) private {\r\n        require(_stakedBalance[account] > 0, \"Account does not have a balance staked\");\r\n        require(amount > 0, \"Cannot unstake Zero\");\r\n        require(amount <= _stakedBalance[account], \"Attempted to withdraw more than balance staked\");\r\n        _stakedBalance[account] = _stakedBalance[account].sub(amount);\r\n        if (_stakedBalance[account] == 0) _stakedTime[account] = 0;\r\n        else {\r\n            require(\r\n                _stakedBalance[account] >= minStakeBalance,\r\n                \"Your remaining staked balance would be under the minimum stake. Either leave at least 10  in the staking pool or withdraw all your Token\"\r\n            );\r\n        }\r\n        _unstakingBalance[account] = _unstakingBalance[account].add(amount);\r\n        _unstakingTime[account] = getTime() + unstakingInterval;\r\n        emit Unstaked(account, amount);\r\n    }\r\n\r\n    modifier updateReward(address account) {\r\n        // If their _stakeTime is 0, this means they arent active in the system\r\n        if (_stakedTime[account] > 0) {\r\n            uint256 stakedIntervals = stakedIntervalsCountOf(account);\r\n            uint256 perIntervalReward = perIntervalRewardOf(account);\r\n            uint256 reward = stakedIntervals.mul(perIntervalReward);\r\n            require(reward <= rewardDistributorBalance, \"Rewards pool is extinguished\");\r\n            _addReward(account, reward);\r\n            _stakedTime[account] = _stakedTime[account].add(rewardInterval.mul(stakedIntervals));\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* ========== END OF MODIFIERS ========== */\r\n\r\n\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(uint256 reward);\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardWithdrawn(address indexed user, uint256 reward);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event RewardsDurationUpdated(uint256 newDuration);\r\n    event Recovered(address token, uint256 amount);\r\n\r\n    /* ========== END EVENTS ========== */\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"lockInReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"nextRewardApplicableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"perIntervalRewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeRewardSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rewardBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDistributorBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardPerIntervalDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeBalance\",\"type\":\"uint256\"}],\"name\":\"setMinStakeBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerIntervalDivider\",\"type\":\"uint256\"}],\"name\":\"setRewardsDivider\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardInterval\",\"type\":\"uint256\"}],\"name\":\"setRewardsInterval\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stakeReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakedIntervalsCountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstakingBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unstakingTimeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"updateChunkUsersRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnstakedBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cdf58c44dbb466339f651711de51cd34c2a4115a000000000000000000000000854f7cd3677737241e3eed0dc3d7f33dfaf72bc4", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://65ca82e2b6988f8fe0ebdd53a6eaae3b62cd7cbfc83e4e766817ad7fadfd1aaa"}