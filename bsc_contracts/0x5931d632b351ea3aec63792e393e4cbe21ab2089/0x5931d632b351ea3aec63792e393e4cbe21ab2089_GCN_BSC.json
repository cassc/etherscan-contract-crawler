{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n     constructor ()  {\r\n        address msgSender = payable(_msgSender());\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n        \r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n  \r\n}\r\n\r\ncontract GCN_BSC is Ownable {\r\n   \r\n    address public Owner;\r\n    IERC20 public MyToken;\r\n    IERC20 public USDT;\r\n    uint256 public price;\r\n    uint256 public priceStable;\r\n    mapping(address=>uint) public balances;\r\n    \r\n    event BuyToken(address _sender,uint256 calculateToken,address MyToken, string tokenType);\r\n    event Withdrawal(address sender, address _to,uint256 amount, string widrwalType);\r\n    event PriceChanged(uint256 _newPrice, address sender);\r\n\r\n    constructor (address _tokenAddress, address StableCoin) {   \r\n        MyToken = IERC20(_tokenAddress);\r\n        USDT = IERC20(StableCoin);\r\n        Owner = msg.sender;\r\n        price = 10**18;\r\n        priceStable = 10**18;\r\n    }\r\n\r\n    function withdrawalCoin(address payable _to, uint256 amount) external onlyOwner{ // Owner Withdraw Native Coin From Contract\r\n        _to.transfer(amount);\r\n        emit Withdrawal(msg.sender, _to, amount,\"withdrawalCoin\");\r\n    }\r\n    function withdrawalToken(address payable _to, uint256 amount) external onlyOwner{// Owner Withdraw Token From Contract\r\n        MyToken.transfer(_to,amount);\r\n        emit Withdrawal(msg.sender, _to, amount,\"withdrawalToken\");\r\n    }\r\n    function withdrawalStableCoin(address payable _to, uint256 amount) external onlyOwner{// Owner Withdraw Token From Contract\r\n    USDT.transfer(_to,amount);\r\n    emit Withdrawal(msg.sender, _to, amount,\"withdrawalToken\");\r\n    }\r\n\r\n    function changePrice(uint newPrice)  public onlyOwner  {  // Update Price of Token\r\n        require(newPrice >0,\"SHOULD_NOT_ZERO\");\r\n        price = newPrice;\r\n        emit PriceChanged(newPrice,msg.sender);\r\n    } \r\n    function changeStablePrice(uint newPrice)  public onlyOwner  {  // Update Price of Token\r\n    require(newPrice >0,\"SHOULD_NOT_ZERO\");\r\n    priceStable = newPrice;\r\n    emit PriceChanged(newPrice,msg.sender);\r\n    } \r\n\r\n    function swapToToken() public payable {\r\n        require(msg.value >= 0,\"VALUE_SHOULD_NOT_ZERO\");\r\n        uint256 calculateToken = (msg.value * price)/10**18;\r\n        MyToken.transfer(msg.sender,calculateToken);\r\n        \r\n        emit BuyToken(msg.sender,calculateToken, address(MyToken),\"swapToToken\");\r\n    } \r\n\r\n    function swapToCoin(uint amount) public {\r\n        require(amount >= 0,\"VALUE_SHOULD_NOT_ZERO\");\r\n        \r\n        uint256 calculateToken = (amount *10**18) / price;\r\n        require(MyToken.allowance(msg.sender, address(this)) >= amount);\r\n        MyToken.transferFrom(msg.sender, address(this), amount);\r\n        uint256 calAmount = (amount *10**18) / price;\r\n        payable(msg.sender).transfer(calAmount);\r\n        emit BuyToken(msg.sender,calculateToken, address(MyToken),\"swapToCoin\");\r\n    } \r\n\r\n    function StableToToken(uint amount) public{ // Convert Stable coin to Token Give amount of Stable coin that want to convert into Token\r\n        require(amount >= 0,\"VALUE_SHOULD_NOT_ZERO\");\r\n        uint256 calculateToken = (amount * priceStable)/10**18;\r\n        require(USDT.allowance(msg.sender, address(this)) >= amount,\"NOT_ENOUGH_ALLOWNCE\");\r\n        USDT.transferFrom(msg.sender, address(this), amount);\r\n        MyToken.transfer(msg.sender,calculateToken);\r\n        emit BuyToken(msg.sender,calculateToken, address(MyToken),\"StableToToken\");\r\n    }\r\n    function TokenToStable(uint amount) public{  // Convert Token to Stable coin Give Amount of Token and get Back Stable Coin\r\n        require(amount >= 0,\"VALUE_SHOULD_NOT_ZERO\");\r\n        uint256 calculateToken = (amount *10**18) / priceStable;\r\n        require(MyToken.allowance(msg.sender, address(this)) >= amount,\"NOT_ENOUGH_ALLOWNCE\");\r\n        MyToken.transferFrom(msg.sender, address(this), amount);\r\n        USDT.transfer(msg.sender,calculateToken);\r\n        emit BuyToken(msg.sender,calculateToken, address(MyToken),\"swapToCoin\");\r\n    }\r\n    \r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"StableCoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"calculateToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"MyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"widrwalType\",\"type\":\"string\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StableToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenToStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeStablePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapToCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GCN_BSC", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c85a264c7f6dab30ab0b58542fae8561cc90623700000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://abc80d55e926ad333a2006e7dfa316eb3db745f603ff3c39bb9046bed24cfa5b"}