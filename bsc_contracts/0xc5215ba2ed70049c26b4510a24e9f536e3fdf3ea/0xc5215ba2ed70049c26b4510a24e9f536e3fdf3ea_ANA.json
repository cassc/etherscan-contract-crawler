{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract ANA is IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Pair pair;\r\n\r\n    mapping(address => uint256) private _balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _escapeFee;\r\n\r\n    mapping(address => bool) private _whiteList;\r\n\r\n    address[] public _activeAddressArray;\r\n\r\n    mapping(address => uint256) public _activeAddressMap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal;\r\n\r\n    uint256 private _mintRatio = 10;\r\n\r\n    uint256 private _startTime = 0;\r\n\r\n    uint256 private _timeLimit = 0;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    uint256 public _transferFee = 20;\r\n\r\n    uint256 public _backflowFee = 10;\r\n\r\n    uint256 public _destroyFee = 20;\r\n\r\n    uint256 public _liquidityFee = 10;\r\n\r\n    uint256 public _liquidityBackflowFee = 20;\r\n\r\n    uint256 public _inviterFee = 30;\r\n\r\n    uint256 private _specialFee = 3;\r\n\r\n    mapping(address => address) public inviter;\r\n\r\n    address public pancakeV2Pair;\r\n\r\n    address public mintControlAddress;\r\n\r\n    address public _backflowAddress = address(0x9bc245d4812FAAb955C216D0027664c3E69bAd9C);\r\n\r\n    address private _destroyAddress = address(0x0000000000000000000000000000000000000000);\r\n\r\n    address public _liquidityAddress = address(0x0F3303a62FC68d83bA7CdACA4Fd2aDf8661415c8);\r\n\r\n    address public _liquidityBackflowAddress = address(0xaf109A97D6cf91a0Ea45870825Df0636B03dF677);\r\n\r\n    address public _airdropAddress = address(0xD1cC7FC67571E37bddc4f392ce6Bdc08EECFCd05);\r\n\r\n    address private _specialAddress = address(0x3B6Eff339c5bD4Ccc70Cb8097c02e86a7B1eAdb3);\r\n\r\n    address private _specialAddress2 = address(0x7928bcA87F88C45dCF25c39b044EC07709d411A1);\r\n\r\n    uint256 public _leftMintTotal;\r\n\r\n    uint256 public _mintedTotal;\r\n\r\n    uint256 public _airdropTotal;\r\n\r\n    uint256 public _swapLimit = 50000000 * 10**18;\r\n\r\n    constructor(address tokenOwner) {\r\n        _name = \"ANA\";\r\n        _symbol = \"ANA\";\r\n        _decimals = 18;\r\n\r\n        _tTotal = 30000000000 * 10**_decimals;\r\n        _airdropTotal = 10000000000 * 10**_decimals;\r\n        _leftMintTotal = 60000000000 * 10**_decimals;\r\n\r\n        _balanceOf[tokenOwner] = _tTotal;\r\n        _balanceOf[_airdropAddress] = _airdropTotal;\r\n\r\n        // escape owner and this contract from fee\r\n        _escapeFee[tokenOwner] = true;\r\n        _escapeFee[address(this)] = true;\r\n\r\n        transferOwnership(tokenOwner);\r\n        emit Transfer(address(0), tokenOwner, _tTotal);\r\n        emit Transfer(address(0), _airdropAddress, _airdropTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function getInviter(address account) public view returns (address) {\r\n        return inviter[account];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balanceOf[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        if(msg.sender == pancakeV2Pair){\r\n            _transfer(msg.sender, recipient, amount);\r\n        }else{\r\n            _tokenOnlyTransfer(msg.sender, recipient, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n\r\n        if(recipient == pancakeV2Pair){\r\n            _transfer(sender, recipient, amount);\r\n        }else{\r\n            _tokenOnlyTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        _approve(\r\n\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //to recieve ETH from pancakeV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function claimTokens() public onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= _swapLimit, \"Transfer amount must be less than upper limit\");\r\n        require(!_whiteList[from], \"Transfer amount must be greater than zero\");\r\n        require(!_whiteList[to], \"Transfer amount must be greater than zero\");\r\n\r\n        if(_activeAddressMap[from] == 0 && from != pancakeV2Pair){\r\n            _activeAddressMap[from] = 1;\r\n            _activeAddressArray.push(from);\r\n        }\r\n\r\n        if(_activeAddressMap[to] == 0 && to != pancakeV2Pair){\r\n            _activeAddressMap[to] = 1;\r\n            _activeAddressArray.push(to);\r\n        }\r\n\r\n        //indicates if fee should be deducted from transfer\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _escapeFee account then remove the fee\r\n        if (_escapeFee[from] || _escapeFee[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balanceOf[sender] = _balanceOf[sender].sub(tAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            // backflow\r\n            _takeTransfer(\r\n                sender,\r\n                _backflowAddress,\r\n                tAmount.div(1000).mul(_backflowFee)\r\n            );\r\n\r\n            // destroy less than 90000000000\r\n            if(_balanceOf[_destroyAddress] <= 90000000000 * 10**_decimals){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _destroyAddress,\r\n                    tAmount.div(1000).mul(_destroyFee)\r\n                );\r\n                _tTotal = _tTotal.sub(tAmount.div(1000).mul(_destroyFee));\r\n            }\r\n\r\n            // lp profit\r\n            _takeTransfer(\r\n                sender,\r\n                _liquidityAddress,\r\n                tAmount.div(1000).mul(_liquidityFee)\r\n            );\r\n\r\n            uint256 liquidityBackflow = tAmount.div(1000).mul(_liquidityBackflowFee);\r\n            _balanceOf[_liquidityBackflowAddress] = _balanceOf[_liquidityBackflowAddress].add(liquidityBackflow);\r\n\r\n            uint256 special = tAmount.div(1000).mul(_specialFee);\r\n            _balanceOf[_specialAddress] = _balanceOf[_specialAddress].add(special);\r\n\r\n            // inviter bonus\r\n            _takeInviterFee(sender, recipient, tAmount);\r\n\r\n            rate =_backflowFee + _destroyFee + _liquidityFee + _liquidityBackflowFee + _inviterFee + _specialFee;\r\n        }\r\n\r\n        // recipient\r\n        uint256 recipientRate = 1000 - rate;\r\n        _balanceOf[recipient] = _balanceOf[recipient].add(\r\n            tAmount.div(1000).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(1000).mul(recipientRate));\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenOnlyTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        require(!_whiteList[sender], \"Transfer amount must be greater than zero\");\r\n        require(!_whiteList[recipient], \"Transfer amount must be greater than zero\");\r\n        if(inviter[recipient] == address(0)){\r\n            inviter[recipient] = sender;\r\n        }\r\n        _balanceOf[sender] = _balanceOf[sender].sub(tAmount);\r\n\r\n        uint256 recipientRate = 1000 - _transferFee;\r\n\r\n        if (_escapeFee[sender] || _escapeFee[recipient]) {\r\n            recipientRate = 1000;\r\n        }\r\n        _balanceOf[recipient] = _balanceOf[recipient].add(tAmount.div(1000).mul(recipientRate));\r\n\r\n        _tTotal = _tTotal.sub(tAmount - (tAmount.div(1000).mul(recipientRate)));\r\n        emit Transfer(sender, recipient, tAmount);\r\n        emit Transfer(recipient , _destroyAddress, tAmount - (tAmount.div(1000).mul(recipientRate)));\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balanceOf[to] = _balanceOf[to].add(tAmount);\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        address cur;\r\n        if (sender == pancakeV2Pair) {\r\n            cur = recipient;\r\n        } else {\r\n            cur = sender;\r\n        }\r\n        uint256 leftRate = 30;\r\n        for (int256 i = 0; i < 10; i++) {\r\n            uint256 rate = 2;\r\n            if(i == 0){\r\n                rate = 8;\r\n            }else if(i == 1){\r\n                rate = 5;\r\n            }else if(i == 2){\r\n                rate = 3;\r\n            }\r\n            cur = inviter[cur];\r\n            if (cur == address(0)) {\r\n                break;\r\n            }\r\n            leftRate = leftRate - rate;\r\n            uint256 curTAmount = tAmount.div(1000).mul(rate);\r\n            _balanceOf[cur] = _balanceOf[cur].add(curTAmount);\r\n            emit Transfer(sender, cur, curTAmount);\r\n        }\r\n        if(leftRate > 0 && leftRate < 30){\r\n            uint256 leftTAmount = tAmount.div(1000).mul(leftRate);\r\n            _balanceOf[_backflowAddress] = _balanceOf[_backflowAddress].add(leftTAmount);\r\n        } else if(leftRate == 30){\r\n            uint256 leftTAmount = tAmount.div(1000).mul(leftRate);\r\n            _balanceOf[_specialAddress2] = _balanceOf[_specialAddress2].add(leftTAmount);\r\n        }\r\n    }\r\n\r\n    function liquidityMintAll() public returns (uint256){\r\n        require(msg.sender == mintControlAddress, \"run with the dream\");\r\n\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 subTime = nowTime - _startTime;\r\n        uint256 dayMint = (600000000 * 10**_decimals).mul(_mintRatio).div(365);\r\n\r\n        if(subTime > 86000 || _timeLimit == 1){\r\n            pair = IUniswapV2Pair(pancakeV2Pair);\r\n\r\n            uint256 lpTotal = pair.totalSupply();\r\n\r\n            if(dayMint <= _leftMintTotal){\r\n                for (uint256 i = 0; i < _activeAddressArray.length; i++) {\r\n                    address mint = _activeAddressArray[i];\r\n                    uint256 weight = pair.balanceOf(mint);\r\n                    if(weight > 0){\r\n                        uint256 amount = weight.mul(dayMint).div(lpTotal);\r\n                        _balanceOf[mint] = _balanceOf[mint].add(amount);\r\n                        emit Transfer(_destroyAddress, mint, amount);\r\n                    }\r\n                }\r\n                _leftMintTotal = _leftMintTotal.sub(dayMint);\r\n                _mintedTotal = _mintedTotal.add(dayMint);\r\n                _tTotal = _tTotal.add(dayMint);\r\n            }\r\n        }\r\n        _startTime = nowTime;\r\n        return dayMint;\r\n    }\r\n\r\n    function liquidityMintSingle(address mint) public returns (uint256){\r\n\r\n        require(msg.sender == mintControlAddress, \"run with the dream\");\r\n        pair = IUniswapV2Pair(pancakeV2Pair);\r\n\r\n        uint256 lpTotal = pair.totalSupply();\r\n        uint256 dayMint = (600000000 * 10**_decimals).mul(_mintRatio).div(365);\r\n\r\n        uint256 weight = pair.balanceOf(mint);\r\n        uint256 amount = weight.mul(dayMint).div(lpTotal);\r\n\r\n        _balanceOf[mint] = _balanceOf[mint].add(amount);\r\n        emit Transfer(_destroyAddress, mint, amount);\r\n\r\n        _leftMintTotal = _leftMintTotal.sub(dayMint);\r\n        _mintedTotal = _mintedTotal.add(dayMint);\r\n        _tTotal = _tTotal.add(dayMint);\r\n        return dayMint;\r\n    }\r\n\r\n    function liquidityMintRatio(uint256 ratio) public onlyOwner {\r\n        require(msg.sender == mintControlAddress, \"run with the dream\");\r\n        _mintRatio = ratio;\r\n    }\r\n\r\n    function changeRouter(address router) public onlyOwner {\r\n        pancakeV2Pair = router;\r\n    }\r\n\r\n    function changeMintControl(address control) public onlyOwner {\r\n        mintControlAddress = control;\r\n    }\r\n\r\n    function setEscapeFee(address escape) public onlyOwner {\r\n        _escapeFee[escape] = true;\r\n    }\r\n\r\n    function setWhiteList(address whiteList) public onlyOwner {\r\n        _whiteList[whiteList] = true;\r\n    }\r\n\r\n    function setTimeLimit() public onlyOwner {\r\n        _timeLimit = 1;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_activeAddressArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_activeAddressMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_airdropTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_backflowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_backflowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_leftMintTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityBackflowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityBackflowFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"control\",\"type\":\"address\"}],\"name\":\"changeMintControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMintAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"liquidityMintRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mint\",\"type\":\"address\"}],\"name\":\"liquidityMintSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintControlAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escape\",\"type\":\"address\"}],\"name\":\"setEscapeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whiteList\",\"type\":\"address\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ANA", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005d37d54390ae20a250f7c7c8276147bffaa5ab09", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f3899a08e07a691afa25d4931c83d91c7254b6c11ead7a6e82dc3d93db8233c"}