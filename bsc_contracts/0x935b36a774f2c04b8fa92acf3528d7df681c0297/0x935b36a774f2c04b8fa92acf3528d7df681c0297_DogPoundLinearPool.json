{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DogPoundLinearPool.sol\": {\r\n      \"content\": \"import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IRewardsVault.sol\\\";\\n\\ninterface Pool {\\n    \\n    struct UserInfo {\\n        uint256 totalStaked;\\n        uint256 bnbRewardDebt;\\n        uint256 totalBNBCollected;\\n    } \\n\\n    function userInfo(address key) view external returns (UserInfo memory);\\n\\n    function accDepositBNBRewardPerShare (  ) external view returns ( uint256 );\\n    \\n    function bnbRewardBalance (  ) external view returns ( uint256 );\\n\\n    function totalDeposited (  ) external view returns ( uint256 );\\n\\n    function totalBNBCollected (  ) external view returns ( uint256 );\\n\\n}\\n\\ncontract DogPoundLinearPool is Ownable, ReentrancyGuard {\\n    uint256 public accDepositBNBRewardPerShare = 0;\\n    uint256 public totalDeposited = 0;\\n    uint256 public bnbRewardBalance = 0;\\n    uint256 public totalBNBCollected = 0;\\n    bool public vaultPay = false;\\n    bool public initializeUnpaused = true;\\n    bool public managerNotLocked = true;\\n    IERC20 public DogsToken;\\n    IRewardsVault public rewardsVault;\\n\\n    address public DogPoundManger;\\n\\n    struct UserInfo {\\n        uint256 totalStaked;\\n        uint256 bnbRewardDebt;\\n        uint256 totalBNBCollected;\\n    }\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    receive() external payable {}\\n\\n    // Modifiers\\n    modifier onlyDogPoundManager() {\\n        require(DogPoundManger == msg.sender, \\\"manager only\\\");\\n        _;\\n    }\\n\\n    constructor(address _DogPoundManger, address _rewardsVaultAddress) {\\n        rewardsVault = IRewardsVault(_rewardsVaultAddress);\\n        DogPoundManger = _DogPoundManger;\\n    }\\n\\n    function initializeVars(DogPoundLinearPool _pool) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundLinearPool pool = DogPoundLinearPool(_pool);\\n        accDepositBNBRewardPerShare = pool.accDepositBNBRewardPerShare();\\n        totalDeposited =  pool.totalDeposited();\\n        bnbRewardBalance = pool.bnbRewardBalance();\\n        totalBNBCollected = pool.totalBNBCollected();\\n    }\\n\\n    function initialize(DogPoundLinearPool _pool, address [] memory _users) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundLinearPool pool = DogPoundLinearPool(_pool);\\n        for(uint i = 0; i < _users.length; i++){\\n            (uint256 totalStaked, uint256 bnbRewardDebt, uint256 _totalBNBCollected ) =  pool.userInfo(_users[i]);\\n            userInfo[_users[i]].totalStaked =  totalStaked;\\n            userInfo[_users[i]].bnbRewardDebt =  bnbRewardDebt;\\n            userInfo[_users[i]].totalBNBCollected =  _totalBNBCollected;\\n        }\\n    }\\n\\n\\n    function initializeM(DogPoundLinearPool _pool, address [] memory _users, UserInfo [] memory _info) onlyOwner public {\\n        require(initializeUnpaused);\\n        DogPoundLinearPool pool = DogPoundLinearPool(_pool);\\n        accDepositBNBRewardPerShare = pool.accDepositBNBRewardPerShare();\\n        for(uint i = 0; i <= _users.length; i++){\\n            userInfo[_users[i]] = _info[i];\\n        }\\n    }\\n\\n\\n    function deposit(address _user, uint256 _amount)\\n        external\\n        onlyDogPoundManager\\n        nonReentrant\\n    {\\n        if (vaultPay) {\\n            rewardsVault.payoutDivs();\\n        }\\n        UserInfo storage user = userInfo[_user];\\n        updatePool();\\n        uint256 bnbPending = payPendingBNBReward(_user);\\n        totalDeposited += _amount;\\n        user.totalBNBCollected += bnbPending;\\n        user.totalStaked += _amount;\\n        user.bnbRewardDebt = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24);\\n        if (bnbPending > 0) {\\n            payable(_user).transfer(bnbPending);\\n        }\\n    }\\n\\n    function withdraw(address _user, uint256 _amount)\\n        external\\n        onlyDogPoundManager\\n        nonReentrant\\n    {\\n        if (vaultPay) {\\n            rewardsVault.payoutDivs();\\n        }\\n        UserInfo storage user = userInfo[_user];\\n        updatePool();\\n        uint256 bnbPending = payPendingBNBReward(_user);\\n        DogsToken.transfer(address(DogPoundManger), _amount); // must handle receiving in DogPoundManger\\n        user.totalBNBCollected += bnbPending;\\n        user.totalStaked -= _amount;\\n        totalDeposited -= _amount;\\n        user.bnbRewardDebt = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24);\\n        if (bnbPending > 0) {\\n            payable(_user).transfer(bnbPending);\\n        }\\n    }\\n\\n    function updatePool() public {\\n        if (totalDeposited > 0) {\\n            uint256 bnbReceived = checkBNBRewardsReceived();\\n            if (bnbReceived > 0) {\\n                accDepositBNBRewardPerShare =\\n                    accDepositBNBRewardPerShare +\\n                    ((bnbReceived * 1e24) / totalDeposited);\\n                totalBNBCollected += bnbReceived;\\n            }\\n        }\\n    }\\n\\n    // Pay pending BNB from the DOGS staking reward scheme.\\n    function payPendingBNBReward(address _user) internal returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 bnbPending = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24) - user.bnbRewardDebt;\\n        if (bnbRewardBalance < bnbPending) {\\n            bnbPending = bnbRewardBalance;\\n            bnbRewardBalance = 0;\\n        } else if (bnbPending > 0) {\\n            bnbRewardBalance = bnbRewardBalance - bnbPending;\\n        }\\n        return bnbPending;\\n    }\\n\\n    function pendingBNBReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 bnbPending = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24) - user.bnbRewardDebt;\\n        return bnbPending;\\n    }\\n\\n    function claim() public nonReentrant {\\n        if (vaultPay) {\\n            rewardsVault.payoutDivs();\\n        }\\n        updatePool();\\n        uint256 bnbPending = payPendingBNBReward(msg.sender);\\n        UserInfo storage user = userInfo[msg.sender];\\n        user.totalBNBCollected += bnbPending;\\n        user.bnbRewardDebt = ((user.totalStaked * accDepositBNBRewardPerShare) /\\n            1e24);\\n        if (bnbPending > 0) {\\n            payable(msg.sender).transfer(bnbPending);\\n        }\\n    }\\n\\n    function checkBNBRewardsReceived() internal returns (uint256) {\\n        uint256 totalBNBBalance = address(this).balance;\\n        if (totalBNBBalance == 0) {\\n            return 0;\\n        }\\n\\n        uint256 bnbReceived = totalBNBBalance - bnbRewardBalance;\\n        bnbRewardBalance = totalBNBBalance;\\n\\n        return bnbReceived;\\n    }\\n\\n    function setVaultPay(bool _bool) external onlyOwner {\\n        vaultPay = _bool;\\n    }\\n\\n    function switchRewardVault(address _newvault) external onlyOwner {\\n        rewardsVault = IRewardsVault(_newvault);\\n    }\\n\\n    function pauseInitialize() external onlyOwner {\\n        initializeUnpaused = false;\\n    }\\n\\n    function setDogsToken(address _address) public onlyOwner {\\n        DogsToken = IERC20(_address);\\n    }\\n    \\n    function lockDogPoundManager() external onlyOwner{\\n        managerNotLocked = false;\\n    }\\n\\n    function setDogPoundManager(address _address) public onlyOwner {\\n        require(managerNotLocked);\\n        DogPoundManger = _address;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsVault {\\n\\n    function payoutDivs()\\n    external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DogPoundManger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsVaultAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DogPoundManger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DogsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accDepositBNBRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbRewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DogPoundLinearPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DogPoundLinearPool\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBNBCollected\",\"type\":\"uint256\"}],\"internalType\":\"struct DogPoundLinearPool.UserInfo[]\",\"name\":\"_info\",\"type\":\"tuple[]\"}],\"name\":\"initializeM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeUnpaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DogPoundLinearPool\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initializeVars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDogPoundManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerNotLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseInitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBNBReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsVault\",\"outputs\":[{\"internalType\":\"contract IRewardsVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDogPoundManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDogsToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setVaultPay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newvault\",\"type\":\"address\"}],\"name\":\"switchRewardVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnbRewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBNBCollected\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DogPoundLinearPool", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006da8227bc7b576781ffcac69437e17b8d4f4ae410000000000000000000000004c004c4fb925be396f902de262f2817deebc22ec", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}