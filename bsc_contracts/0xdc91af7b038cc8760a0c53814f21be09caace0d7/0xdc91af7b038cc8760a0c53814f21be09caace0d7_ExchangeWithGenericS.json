{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libs/LibUnitConverter.sol\\\";\\nimport \\\"./libs/LibValidator.sol\\\";\\nimport \\\"./libs/LibExchange.sol\\\";\\nimport \\\"./libs/MarginalFunctionality.sol\\\";\\nimport \\\"./libs/SafeTransferHelper.sol\\\";\\nimport \\\"./OrionVault.sol\\\";\\n\\n/**\\n * @title Exchange\\n * @dev Exchange contract for the Orion Protocol\\n * @author @wafflemakr\\n */\\n\\n/*\\n\\n  Overflow safety:\\n  We do not use SafeMath and control overflows by\\n  not accepting large ints on input.\\n\\n  Balances inside contract are stored as int192.\\n\\n  Allowed input amounts are int112 or uint112: it is enough for all\\n  practically used tokens: for instance if decimal unit is 1e18, int112\\n  allow to encode up to 2.5e15 decimal units.\\n  That way adding/subtracting any amount from balances won't overflow, since\\n  minimum number of operations to reach max int is practically infinite: ~1e24.\\n\\n  Allowed prices are uint64. Note, that price is represented as\\n  price per 1e8 tokens. That means that amount*price always fit uint256,\\n  while amount*price/1e8 not only fit int192, but also can be added, subtracted\\n  without overflow checks: number of malicious operations to overflow ~1e13.\\n*/\\ncontract Exchange is OrionVault {\\n\\tusing LibValidator for LibValidator.Order;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tstruct UpdateOrderBalanceData {\\n\\t\\tuint buyType;\\n\\t\\tuint sellType;\\n\\t\\tint buyIn;\\n\\t\\tint sellIn;\\n\\t}\\n\\n\\t//  Flags for updateOrders\\n\\t//  All flags are explicit\\n\\tuint8 constant kSell = 0;\\n\\tuint8 constant kBuy = 1; //  if 0 - then sell\\n\\tuint8 constant kCorrectMatcherFeeByOrderAmount = 2;\\n\\n\\t// EVENTS\\n\\tevent NewAssetTransaction(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed assetAddress,\\n\\t\\tbool isDeposit,\\n\\t\\tuint112 amount,\\n\\t\\tuint64 timestamp\\n\\t);\\n\\n\\tevent NewTrade(\\n\\t\\taddress indexed buyer,\\n\\t\\taddress indexed seller,\\n\\t\\taddress baseAsset,\\n\\t\\taddress quoteAsset,\\n\\t\\tuint64 filledPrice,\\n\\t\\tuint192 filledAmount,\\n\\t\\tuint192 amountQuote\\n\\t);\\n\\n\\terror IncorrectPosition();\\n    error OnlyMatcher();\\n\\terror AlreadyFilled();\\n\\terror Fallback();\\n\\terror Overflow();\\n    error EthDepositRejected();\\n\\terror NotCollateralAsset();\\n\\n    modifier onlyMatcher() {\\n        if(msg.sender != _allowedMatcher) revert OnlyMatcher();\\n        _;\\n    }\\n\\n\\t// MAIN FUNCTIONS\\n\\n\\t/**\\n\\t * @dev Since Exchange will work behind the Proxy contract it can not have constructor\\n\\t */\\n\\tfunction initialize() public payable initializer {\\n\\t\\tOwnableUpgradeable.__Ownable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @dev set marginal settings\\n\\t * @param _collateralAssets - list of addresses of assets which may be used as collateral\\n\\t * @param _stakeRisk - risk coefficient for staked orion as uint8 (0=0, 255=1)\\n\\t * @param _liquidationPremium - premium for liquidator as uint8 (0=0, 255=1)\\n\\t * @param _priceOverdue - time after that price became outdated\\n\\t * @param _positionOverdue - time after that liabilities became overdue and may be liquidated\\n\\t */\\n\\n\\tfunction updateMarginalSettings(\\n\\t\\taddress[] calldata _collateralAssets,\\n\\t\\tuint8 _stakeRisk,\\n\\t\\tuint8 _liquidationPremium,\\n\\t\\tuint64 _priceOverdue,\\n\\t\\tuint64 _positionOverdue\\n\\t) public onlyOwner {\\n\\t\\tcollateralAssets = _collateralAssets;\\n\\t\\tstakeRisk = _stakeRisk;\\n\\t\\tliquidationPremium = _liquidationPremium;\\n\\t\\tpriceOverdue = _priceOverdue;\\n\\t\\tpositionOverdue = _positionOverdue;\\n\\t}\\n\\n\\t/**\\n\\t * @dev set risk coefficients for collateral assets\\n\\t * @param assets - list of assets\\n\\t * @param risks - list of risks as uint8 (0=0, 255=1)\\n\\t */\\n\\tfunction updateAssetRisks(address[] calldata assets, uint8[] calldata risks) public onlyOwner {\\n\\t\\tfor (uint256 i; i < assets.length; i++) assetRisks[assets[i]] = risks[i];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposit ERC20 tokens to the exchange contract\\n\\t * @dev User needs to approve token contract first\\n\\t * @param amount asset amount to deposit in its base unit\\n\\t */\\n\\tfunction depositAsset(address assetAddress, uint112 amount) external nonReentrant {\\n\\t\\tuint256 actualAmount = IERC20(assetAddress).balanceOf(address(this));\\n\\t\\tIERC20(assetAddress).safeTransferFrom(msg.sender, address(this), uint256(amount));\\n\\t\\tactualAmount = IERC20(assetAddress).balanceOf(address(this)) - actualAmount;\\n\\t\\tif (actualAmount < amount) revert NotEnoughBalance();\\n\\t\\tgeneralDeposit(assetAddress, uint112(actualAmount));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Deposit ETH to the exchange contract\\n\\t * @dev deposit event will be emitted with the amount in decimal format (10^8)\\n\\t * @dev balance will be stored in decimal format too\\n\\t */\\n\\tfunction deposit() external payable nonReentrant {\\n\\t\\tgeneralDeposit(address(0), uint112(msg.value));\\n\\t}\\n\\n\\t/**\\n\\t * @dev internal implementation of deposits\\n\\t */\\n\\tfunction generalDeposit(address assetAddress, uint112 amount) internal {\\n\\t\\taddress user = msg.sender;\\n\\t\\tbool wasLiability = assetBalances[user][assetAddress] < 0;\\n\\t\\tuint112 safeAmountDecimal = LibUnitConverter.baseUnitToDecimal(assetAddress, amount);\\n\\t\\tassetBalances[user][assetAddress] += int192(uint192(safeAmountDecimal));\\n\\t\\tif (amount > 0) emit NewAssetTransaction(user, assetAddress, true, safeAmountDecimal, uint64(block.timestamp));\\n\\t\\tif (wasLiability)\\n\\t\\t\\tMarginalFunctionality.updateLiability(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tassetAddress,\\n\\t\\t\\t\\tliabilities,\\n\\t\\t\\t\\tuint112(safeAmountDecimal),\\n\\t\\t\\t\\tassetBalances[user][assetAddress]\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdrawal of remaining funds from the contract back to the address\\n\\t * @param assetAddress address of the asset to withdraw\\n\\t * @param amount asset amount to withdraw in its base unit\\n\\t */\\n\\tfunction withdraw(address assetAddress, uint112 amount) external nonReentrant {\\n\\t\\tuint112 safeAmountDecimal = LibUnitConverter.baseUnitToDecimal(assetAddress, amount);\\n\\t\\taddress user = msg.sender;\\n\\n\\t\\tassetBalances[user][assetAddress] -= int192(uint192(safeAmountDecimal));\\n\\t\\tif (assetBalances[user][assetAddress] < 0) revert NotEnoughBalance(); //TODO\\n\\t\\tif (!checkPosition(user)) revert IncorrectPosition(); //TODO\\n\\n\\t\\tif (assetAddress == address(0)) {\\n\\t\\t\\t(bool success, ) = user.call{value: amount}(\\\"\\\");\\n\\t\\t\\tif (!success) revert NotEnoughBalance();\\n\\t\\t} else {\\n\\t\\t\\tIERC20(assetAddress).safeTransfer(user, amount);\\n\\t\\t}\\n\\n\\t\\temit NewAssetTransaction(user, assetAddress, false, safeAmountDecimal, uint64(block.timestamp));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Get asset balance for a specific address\\n\\t * @param assetAddress address of the asset to query\\n\\t * @param user user address to query\\n\\t */\\n\\tfunction getBalance(address assetAddress, address user) public view returns (int192) {\\n\\t\\treturn assetBalances[user][assetAddress];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Batch query of asset balances for a user\\n\\t * @param assetsAddresses array of addresses of the assets to query\\n\\t * @param user user address to query\\n\\t */\\n\\tfunction getBalances(\\n\\t\\taddress[] memory assetsAddresses,\\n\\t\\taddress user\\n\\t) public view returns (int192[] memory balances) {\\n\\t\\tbalances = new int192[](assetsAddresses.length);\\n\\t\\tfor (uint256 i; i < assetsAddresses.length; i++) {\\n\\t\\t\\tbalances[i] = assetBalances[user][assetsAddresses[i]];\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Batch query of asset liabilities for a user\\n\\t * @param user user address to query\\n\\t */\\n\\tfunction getLiabilities(\\n\\t\\taddress user\\n\\t) public view returns (MarginalFunctionality.Liability[] memory liabilitiesArray) {\\n\\t\\treturn liabilities[user];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Return list of assets which can be used for collateral\\n\\t */\\n\\tfunction getCollateralAssets() public view returns (address[] memory) {\\n\\t\\treturn collateralAssets;\\n\\t}\\n\\n\\t/**\\n\\t * @dev get filled amounts for a specific order\\n\\t */\\n\\tfunction getFilledAmounts(\\n\\t\\tbytes32 orderHash,\\n\\t\\tLibValidator.Order memory order\\n\\t) public view returns (int192 totalFilled, int192 totalFeesPaid) {\\n\\t\\ttotalFilled = int192(filledAmounts[orderHash]); //It is safe to convert here: filledAmounts is result of ui112 additions\\n\\t\\ttotalFeesPaid = int192(\\n\\t\\t\\tuint192((uint256(order.matcherFee) * uint256(uint192(totalFilled))) / uint256(order.amount))\\n\\t\\t); //matcherFee is u64; safe multiplication here\\n\\t}\\n\\n\\tfunction updateFilledAmount(LibValidator.Order memory order, uint112 filledBase) internal {\\n\\t\\tbytes32 orderHash = LibValidator.getTypeValueHash(order);\\n\\t\\tuint192 total_amount = filledAmounts[orderHash];\\n\\t\\ttotal_amount += filledBase; //it is safe to add ui112 to each other to get i192\\n\\t\\tif (total_amount > order.amount) revert AlreadyFilled();\\n\\t\\tfilledAmounts[orderHash] = total_amount;\\n\\t}\\n\\n\\t/**\\n     * @notice Settle a trade with two orders, filled price and amount\\n     * @dev 2 orders are submitted, it is necessary to match them:\\n        check conditions in orders for compliance filledPrice, filledAmount\\n        change balances on the contract respectively with buyer, seller, matcher\\n     * @param buyOrder structure of buy side order\\n     * @param sellOrder structure of sell side order\\n     * @param filledPrice price at which the order was settled\\n     * @param filledAmount amount settled between orders\\n     */\\n\\tfunction fillOrders(\\n\\t\\tLibValidator.Order memory buyOrder,\\n\\t\\tLibValidator.Order memory sellOrder,\\n\\t\\tuint64 filledPrice,\\n\\t\\tuint112 filledAmount\\n\\t) public nonReentrant {\\n\\t\\t// --- VARIABLES --- //\\n\\t\\t// Amount of quote asset\\n\\t\\tuint256 _amountQuote = (uint256(filledAmount) * filledPrice) / (10 ** 8);\\n\\t\\tif (_amountQuote >= type(uint112).max) revert Overflow();\\n\\t\\tuint112 amountQuote = uint112(_amountQuote);\\n\\n\\t\\t// --- VALIDATIONS --- //\\n\\n\\t\\t// Validate signatures using eth typed sign V1\\n\\t\\tLibValidator.checkOrdersInfo(\\n\\t\\t\\tbuyOrder,\\n\\t\\t\\tsellOrder,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tfilledAmount,\\n\\t\\t\\tfilledPrice,\\n\\t\\t\\tblock.timestamp,\\n\\t\\t\\t_allowedMatcher\\n\\t\\t);\\n\\n\\t\\t// --- UPDATES --- //\\n\\n\\t\\t//updateFilledAmount\\n\\t\\tupdateFilledAmount(buyOrder, filledAmount);\\n\\t\\tupdateFilledAmount(sellOrder, filledAmount);\\n\\n\\t\\t// Update User's balances\\n\\t\\tUpdateOrderBalanceData memory data;\\n\\t\\t(data.buyType, data.buyIn) = LibExchange.updateOrderBalanceDebit(\\n\\t\\t\\tbuyOrder,\\n\\t\\t\\tfilledAmount,\\n\\t\\t\\tamountQuote,\\n\\t\\t\\tkBuy | kCorrectMatcherFeeByOrderAmount,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\t\\t(data.sellType, data.sellIn) = LibExchange.updateOrderBalanceDebit(\\n\\t\\t\\tsellOrder,\\n\\t\\t\\tfilledAmount,\\n\\t\\t\\tamountQuote,\\n\\t\\t\\tkSell | kCorrectMatcherFeeByOrderAmount,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\n\\t\\tLibExchange.creditUserAssets(\\n\\t\\t\\tdata.buyType,\\n\\t\\t\\tbuyOrder.senderAddress,\\n\\t\\t\\tdata.buyIn,\\n\\t\\t\\tbuyOrder.baseAsset,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\t\\tLibExchange.creditUserAssets(\\n\\t\\t\\tdata.sellType,\\n\\t\\t\\tsellOrder.senderAddress,\\n\\t\\t\\tdata.sellIn,\\n\\t\\t\\tsellOrder.quoteAsset,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\n\\t\\tif (!checkPosition(buyOrder.senderAddress)) revert IncorrectPosition();\\n\\t\\tif (!checkPosition(sellOrder.senderAddress)) revert IncorrectPosition();\\n\\n\\t\\temit NewTrade(\\n\\t\\t\\tbuyOrder.senderAddress,\\n\\t\\t\\tsellOrder.senderAddress,\\n\\t\\t\\tbuyOrder.baseAsset,\\n\\t\\t\\tbuyOrder.quoteAsset,\\n\\t\\t\\tfilledPrice,\\n\\t\\t\\tfilledAmount,\\n\\t\\t\\tamountQuote\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev wrapper for LibValidator methods, may be deleted.\\n\\t */\\n\\tfunction validateOrder(LibValidator.Order memory order) public pure returns (bool isValid) {\\n\\t\\tisValid = LibValidator.validateV3(order);\\n\\t}\\n\\n\\t/**\\n\\t * @dev check user marginal position (compare assets and liabilities)\\n\\t * @return isPositive - boolean whether liabilities are covered by collateral or not\\n\\t */\\n\\tfunction checkPosition(address user) public view returns (bool) {\\n\\t\\tif (liabilities[user].length == 0) return true;\\n\\t\\treturn calcPosition(user).state == MarginalFunctionality.PositionState.POSITIVE;\\n\\t}\\n\\n\\t/**\\n\\t * @dev internal methods which collect all variables used by MarginalFunctionality to one structure\\n\\t * @param user user address to query\\n\\t * @return UsedConstants - MarginalFunctionality.UsedConstants structure\\n\\t */\\n\\tfunction getConstants(address user) internal view returns (MarginalFunctionality.UsedConstants memory) {\\n\\t\\treturn\\n\\t\\t\\tMarginalFunctionality.UsedConstants(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\t_oracleAddress,\\n\\t\\t\\t\\taddress(_orionToken),\\n\\t\\t\\t\\tpositionOverdue,\\n\\t\\t\\t\\tpriceOverdue,\\n\\t\\t\\t\\tstakeRisk,\\n\\t\\t\\t\\tliquidationPremium\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev calc user marginal position (compare assets and liabilities)\\n\\t * @param user user address to query\\n\\t * @return position - MarginalFunctionality.Position structure\\n\\t */\\n\\tfunction calcPosition(address user) public view returns (MarginalFunctionality.Position memory) {\\n\\t\\tMarginalFunctionality.UsedConstants memory constants = getConstants(user);\\n\\n\\t\\treturn MarginalFunctionality.calcPosition(collateralAssets, liabilities, assetBalances, assetRisks, constants);\\n\\t}\\n\\n\\t/**\\n     * @dev method to cover some of overdue broker liabilities and get ORN in exchange\\n            same as liquidation or margin call\\n     * @param broker - broker which will be liquidated\\n     * @param redeemedAsset - asset, liability of which will be covered\\n\\t * @param collateralAsset - asset, with which liability will be covered\\n     * @param amount - amount of covered asset\\n     */\\n\\tfunction partiallyLiquidate(address broker, address redeemedAsset, address collateralAsset, uint112 amount) public {\\n\\t\\tbool isCollateralAsset = false;\\n\\t\\tfor (uint i = 0; i < collateralAssets.length; ++i) {\\n\\t\\t\\tif (collateralAssets[i] == collateralAsset) {\\n\\t\\t\\t\\tisCollateralAsset = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (!isCollateralAsset) revert NotCollateralAsset();\\n\\t\\tMarginalFunctionality.UsedConstants memory constants = getConstants(broker);\\n\\t\\tMarginalFunctionality.partiallyLiquidate(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants,\\n\\t\\t\\tredeemedAsset,\\n\\t\\t\\tcollateralAsset,\\n\\t\\t\\tamount\\n\\t\\t);\\n\\t}\\n\\n    receive() external payable {\\n        if (msg.sender == tx.origin) revert EthDepositRejected();\\n    }\\n\\n\\t/**\\n\\t *  @dev  revert on fallback function\\n\\t */\\n\\tfallback() external {\\n\\t\\trevert Fallback();\\n\\t}\\n\\n\\t/* Error Codes\\n        E1: Insufficient Balance, flavor S - stake, L - liabilities, P - Position, B,S - buyer, seller\\n        E2: Invalid Signature, flavor B,S - buyer, seller\\n        E3: Invalid Order Info, flavor G - general, M - wrong matcher, M2 unauthorized matcher, As - asset mismatch,\\n            AmB/AmS - amount mismatch (buyer,seller), PrB/PrS - price mismatch(buyer,seller), D - direction mismatch,\\n            U - Unit Converter Error, C - caller mismatch\\n        E4: Order expired, flavor B,S - buyer,seller\\n        E5: Contract not active,\\n        E6: Transfer error\\n        E7: Incorrect state prior to liquidation\\n        E8: Liquidator doesn't satisfy requirements\\n        E9: Data for liquidation handling is outdated\\n        E10: Incorrect state after liquidation\\n        E11: Amount overflow\\n        E12: Incorrect filled amount, flavor G,B,S: general(overflow), buyer order overflow, seller order overflow\\n        E14: Authorization error, sfs - seizeFromStake\\n        E15: Wrong passed params\\n        E16: Underlying protection mechanism error, flavor: R, I, O: Reentrancy, Initialization, Ownable\\n    */\\n}\\n\"\r\n    },\r\n    \"contracts/ExchangeStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libs/MarginalFunctionality.sol\\\";\\n\\n// Base contract which contain state variable of the first version of Exchange\\n// deployed on mainnet. Changes of the state variables should be introduced\\n// not in that contract but down the inheritance chain, to allow safe upgrades\\n// More info about safe upgrades here:\\n// https://blog.openzeppelin.com/the-state-of-smart-contract-upgrades/#upgrade-patterns\\n\\ncontract ExchangeStorage {\\n\\t//order -> filledAmount\\n\\tmapping(bytes32 => uint192) public filledAmounts;\\n\\n\\t// Get user balance by address and asset address\\n\\tmapping(address => mapping(address => int192)) internal assetBalances;\\n\\t// List of assets with negative balance for each user\\n\\tmapping(address => MarginalFunctionality.Liability[]) public liabilities;\\n\\t// List of assets which can be used as collateral and risk coefficients for them\\n\\taddress[] internal collateralAssets;\\n\\tmapping(address => uint8) public assetRisks;\\n\\t// Risk coefficient for locked ORN\\n\\tuint8 public stakeRisk;\\n\\t// Liquidation premium\\n\\tuint8 public liquidationPremium;\\n\\t// Delays after which price and position become outdated\\n\\tuint64 public priceOverdue;\\n\\tuint64 public positionOverdue;\\n\\n\\t// Base orion tokens (can be locked on stake)\\n\\tIERC20 _orionToken;\\n\\t// Address of price oracle contract\\n\\taddress _oracleAddress;\\n\\t// Address from which matching of orders is allowed\\n\\taddress _allowedMatcher;\\n    //Adding gap_ due to previous OwnableUpgradeable implementation\\n    uint256[48] private gap_;\\n}\"\r\n    },\r\n    \"contracts/ExchangeWithAtomic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"./Exchange.sol\\\";\\nimport \\\"./libs/LibAtomic.sol\\\";\\n\\ncontract ExchangeWithAtomic is Exchange {\\n\\tuint256[2] private gap;\\n\\taddress public WETH;\\n\\tmapping(bytes32 => LibAtomic.LockInfo) public atomicSwaps;\\n\\tmapping(bytes32 => bool) public secrets;\\n\\n\\tevent AtomicLocked(address sender, address asset, bytes32 secretHash);\\n\\tevent AtomicRedeemed(address sender, address receiver, address asset, bytes secret);\\n\\tevent AtomicClaimed(address receiver, address asset, bytes secret);\\n\\tevent AtomicRefunded(address receiver, address asset, bytes32 secretHash);\\n\\n\\tfunction setBasicParams(\\n\\t\\taddress orionToken,\\n\\t\\taddress priceOracleAddress,\\n\\t\\taddress allowedMatcher,\\n\\t\\taddress WETH_\\n\\t) public onlyOwner {\\n\\t\\t_orionToken = IERC20(orionToken);\\n\\t\\t_oracleAddress = priceOracleAddress;\\n\\t\\t_allowedMatcher = allowedMatcher;\\n\\t\\tWETH = WETH_;\\n\\t}\\n\\n\\tfunction fillAndLockAtomic(\\n\\t\\tLibAtomic.CrossChainOrder memory userOrder,\\n\\t\\tLibValidator.Order memory brokerOrder,\\n\\t\\tuint64 filledPrice,\\n\\t\\tuint64 filledAmount,\\n\\t\\tuint64 lockOrderExpiration\\n\\t) public onlyMatcher {\\n\\t\\taddress lockAsset;\\n\\t\\tuint64 lockAmount;\\n\\t\\tif (userOrder.limitOrder.buySide == 1) {\\n\\t\\t\\tfillOrders(userOrder.limitOrder, brokerOrder, filledPrice, filledAmount);\\n\\t\\t\\tlockAsset = userOrder.limitOrder.baseAsset;\\n\\t\\t\\tlockAmount = filledAmount;\\n\\t\\t} else {\\n\\t\\t\\tfillOrders(brokerOrder, userOrder.limitOrder, filledPrice, filledAmount);\\n\\t\\t\\tlockAsset = userOrder.limitOrder.quoteAsset;\\n\\t\\t\\tlockAmount = (filledAmount * filledPrice) / 10 ** 8;\\n\\t\\t}\\n\\n\\t\\tLibAtomic.LockOrder memory lockOrder = LibAtomic.LockOrder({\\n\\t\\t\\tsender: userOrder.limitOrder.matcherAddress,\\n\\t\\t\\tasset: lockAsset,\\n\\t\\t\\tamount: lockAmount,\\n\\t\\t\\texpiration: lockOrderExpiration,\\n\\t\\t\\ttargetChainId: userOrder.chainId,\\n\\t\\t\\tsecretHash: userOrder.secretHash\\n\\t\\t});\\n\\n\\t\\t_lockAtomic(userOrder.limitOrder.senderAddress, lockOrder);\\n\\t}\\n\\n\\tfunction lockAtomicByMatcher(address account, LibAtomic.LockOrder memory lockOrder) external onlyMatcher {\\n\\t\\t_lockAtomic(account, lockOrder);\\n\\t}\\n\\n\\tfunction _lockAtomic(address account, LibAtomic.LockOrder memory lockOrder) internal nonReentrant {\\n\\t\\tLibAtomic.doLockAtomic(account, lockOrder, atomicSwaps, assetBalances, liabilities);\\n\\n\\t\\tif (!checkPosition(account)) revert IncorrectPosition();\\n\\n\\t\\temit AtomicLocked(lockOrder.sender, lockOrder.asset, lockOrder.secretHash);\\n\\t}\\n\\n\\tfunction lockAtomic(LibAtomic.LockOrder memory swap) public payable {\\n\\t\\t_lockAtomic(msg.sender, swap);\\n\\t}\\n\\n\\tfunction redeemAtomic(LibAtomic.RedeemOrder calldata order, bytes calldata secret) public {\\n\\t\\tLibAtomic.doRedeemAtomic(order, secret, secrets, assetBalances, liabilities);\\n\\t\\tif (!checkPosition(order.sender)) revert IncorrectPosition();\\n\\n\\t\\temit AtomicRedeemed(order.sender, order.receiver, order.asset, secret);\\n\\t}\\n\\n\\tfunction redeem2Atomics(\\n\\t\\tLibAtomic.RedeemOrder calldata order1,\\n\\t\\tbytes calldata secret1,\\n\\t\\tLibAtomic.RedeemOrder calldata order2,\\n\\t\\tbytes calldata secret2\\n\\t) public {\\n\\t\\tredeemAtomic(order1, secret1);\\n\\t\\tredeemAtomic(order2, secret2);\\n\\t}\\n\\n\\tfunction claimAtomic(address receiver, bytes calldata secret, bytes calldata matcherSignature) public {\\n\\t\\tLibAtomic.LockInfo storage swap = LibAtomic.doClaimAtomic(\\n\\t\\t\\treceiver,\\n\\t\\t\\tsecret,\\n\\t\\t\\tmatcherSignature,\\n\\t\\t\\t_allowedMatcher,\\n\\t\\t\\tatomicSwaps,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\n\\t\\temit AtomicClaimed(receiver, swap.asset, secret);\\n\\t}\\n\\n\\tfunction refundAtomic(bytes32 secretHash) public {\\n\\t\\tLibAtomic.LockInfo storage swap = LibAtomic.doRefundAtomic(secretHash, atomicSwaps, assetBalances, liabilities);\\n\\n\\t\\temit AtomicRefunded(swap.sender, swap.asset, secretHash);\\n\\t}\\n\\n\\t/* Error Codes\\n        E1: Insufficient Balance, flavor A - Atomic, PA - Position Atomic\\n        E17: Incorrect atomic secret, flavor: U - used, NF - not found, R - redeemed, E/NE - expired/not expired, ETH\\n   */\\n}\\n\"\r\n    },\r\n    \"contracts/ExchangeWithGenericSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"./ExchangeWithAtomic.sol\\\";\\nimport \\\"./libs/LibGenericSwap.sol\\\";\\nimport \\\"./interfaces/IAggregationExecutor.sol\\\";\\n\\ncontract ExchangeWithGenericSwap is ExchangeWithAtomic {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeTransferHelper for IERC20;\\n\\n\\terror InsufficientBalance();\\n\\terror ZeroReturnAmount();\\n\\n\\t/// @notice Fills user's limit order through pools, delegating all calls encoded in `data` to `executor`. See tests for usage examples\\n\\t/// @param order User signed limit order\\n\\t/// @param executor Aggregation executor that executes calls described in `data`\\n\\t/// @param desc Swap description\\n\\t/// @param data Encoded calls that `caller` should execute in between of swaps\\n\\tfunction fillThroughPools(\\n\\t\\tuint112 filledAmount,\\n\\t\\tLibValidator.Order calldata order,\\n\\t\\tIAggregationExecutor executor,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata permit,\\n\\t\\tbytes calldata data\\n\\t) external nonReentrant {\\n\\t\\tLibValidator.checkOrderSingleMatch(order, desc, filledAmount, block.timestamp);\\n\\t\\tLibGenericSwap.transferToInitialSource(order.senderAddress, desc, permit, assetBalances, liabilities);\\n\\t\\tpayMatcherFee(order);\\n\\t\\tLibGenericSwap.fillThroughPools(order.senderAddress, executor, desc, data);\\n\\t\\tupdateFilledAmount(order, filledAmount);\\n\\t}\\n\\n\\t/// @notice Performs a swap, delegating all calls encoded in `data` to `executor`. See tests for usage examples\\n\\t/// @param executor Aggregation executor that executes calls described in `data`\\n\\t/// @param desc Swap description\\n\\t/// @param data Encoded calls that `caller` should execute in between of swaps\\n\\t/// @return returnAmount Resulting token amount\\n\\t/// @return spentAmount Source token amount\\n\\t/// @return gasLeft Gas left\\n\\tfunction swap(\\n\\t\\tIAggregationExecutor executor,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata permit,\\n\\t\\tbytes calldata data\\n\\t) public payable nonReentrant returns (uint256 returnAmount, uint256 spentAmount, uint256 gasLeft) {\\n\\t\\tif (desc.minReturnAmount == 0) revert ZeroReturnAmount();\\n\\t\\tLibGenericSwap.transferToInitialSource(msg.sender, desc, permit, assetBalances, liabilities);\\n\\t\\t(returnAmount, spentAmount, gasLeft) = LibGenericSwap.swap(msg.sender, executor, desc, data);\\n\\t}\\n\\n\\tfunction payMatcherFee(LibValidator.Order memory order) internal {\\n\\t\\tLibExchange._updateBalance(\\n\\t\\t\\torder.senderAddress,\\n\\t\\t\\torder.matcherFeeAsset,\\n\\t\\t\\t-int(uint(order.matcherFee)),\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\t\\tif (assetBalances[order.senderAddress][order.matcherFeeAsset] < 0) revert InsufficientBalance();\\n\\t\\tLibExchange._updateBalance(\\n\\t\\t\\torder.matcherAddress,\\n\\t\\t\\torder.matcherFeeAsset,\\n\\t\\t\\tint(uint(order.matcherFee)),\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tliabilities\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/RevertReasonForwarder.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAggregationExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n/// @title Interface for making arbitrary calls during swap\\ninterface IAggregationExecutor {\\n\\t/// @notice Make calls on `msgSender` with specified data\\n\\tfunction callBytes(address msgSender, bytes calldata data) external payable; // 0x2636f7f8\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n/// @title Interface for DAI-style permits\\ninterface IDaiLikePermit {\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Simple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20Simple {\\n    function balanceOf(address account) external view returns (uint256);\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n    function balanceOf(address account) external view returns(uint256);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibAtomic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./LibExchange.sol\\\";\\nimport \\\"./LibValidator.sol\\\";\\n\\nlibrary LibAtomic {\\n\\tusing ECDSA for bytes32;\\n\\n    struct LockOrder {\\n        address sender;\\n        uint64 expiration;\\n        address asset;\\n        uint64 amount;\\n        uint24 targetChainId;\\n        bytes32 secretHash;\\n    }\\n\\n\\tstruct LockInfo {\\n\\t\\taddress sender;\\n\\t\\tuint64 expiration;\\n\\t\\tbool used;\\n\\t\\taddress asset;\\n\\t\\tuint64 amount;\\n\\t\\tuint24 targetChainId;\\n\\t}\\n\\n\\tstruct ClaimOrder {\\n\\t\\taddress receiver;\\n\\t\\tbytes32 secretHash;\\n\\t}\\n\\n\\tstruct RedeemOrder {\\n\\t\\taddress sender;\\n\\t\\taddress receiver;\\n\\t\\taddress claimReceiver;\\n\\t\\taddress asset;\\n\\t\\tuint64 amount;\\n\\t\\tuint64 expiration;\\n\\t\\tbytes32 secretHash;\\n\\t\\tbytes signature;\\n\\t}\\n\\n    struct CrossChainOrder {\\n        LibValidator.Order limitOrder;\\n        uint24 chainId;\\n        bytes32 secretHash;\\n    }\\n\\n\\tfunction doLockAtomic(\\n        address account,\\n\\t\\tLockOrder memory swap,\\n\\t\\tmapping(bytes32 => LockInfo) storage atomicSwaps,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) public {\\n\\t\\trequire(swap.expiration / 1000 >= block.timestamp, \\\"E17E\\\");\\n\\t\\trequire(atomicSwaps[swap.secretHash].sender == address(0), \\\"E17R\\\");\\n\\n\\t\\tint remaining = int(uint(swap.amount));\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\trequire(swap.asset == address(0), \\\"E17ETH\\\");\\n\\t\\t\\tuint eth_sent = uint(LibUnitConverter.baseUnitToDecimal(address(0), msg.value));\\n\\t\\t\\tif (eth_sent < swap.amount) {\\n\\t\\t\\t\\tremaining = int(uint(swap.amount)) - int(eth_sent);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tswap.amount = uint64(eth_sent);\\n\\t\\t\\t\\tremaining = 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (remaining > 0) {\\n\\t\\t\\tLibExchange._updateBalance(account, swap.asset, -1 * remaining, assetBalances, liabilities);\\n\\t\\t\\trequire(assetBalances[account][swap.asset] >= 0, \\\"E1A\\\");\\n\\t\\t}\\n\\n\\t\\tatomicSwaps[swap.secretHash] = LockInfo(\\n\\t\\t\\tswap.sender,\\n\\t\\t\\tswap.expiration,\\n\\t\\t\\tfalse,\\n\\t\\t\\tswap.asset,\\n\\t\\t\\tswap.amount,\\n\\t\\t\\tswap.targetChainId\\n\\t\\t);\\n\\t}\\n\\n\\tfunction doRedeemAtomic(\\n\\t\\tLibAtomic.RedeemOrder calldata order,\\n\\t\\tbytes calldata secret,\\n\\t\\tmapping(bytes32 => bool) storage secrets,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) public {\\n\\t\\trequire(!secrets[order.secretHash], \\\"E17R\\\");\\n\\t\\trequire(getEthSignedAtomicOrderHash(order).recover(order.signature) == order.sender, \\\"E2\\\");\\n\\t\\trequire(order.expiration / 1000 >= block.timestamp, \\\"E4A\\\");\\n\\t\\trequire(order.secretHash == keccak256(secret), \\\"E17\\\");\\n\\t\\tsecrets[order.secretHash] = true;\\n\\n\\t\\tLibExchange._updateBalance(order.sender, order.asset, -1 * int(uint(order.amount)), assetBalances, liabilities);\\n\\n\\t\\tLibExchange._updateBalance(order.receiver, order.asset, int(uint(order.amount)), assetBalances, liabilities);\\n\\t}\\n\\n\\tfunction doClaimAtomic(\\n\\t\\taddress receiver,\\n\\t\\tbytes calldata secret,\\n\\t\\tbytes calldata matcherSignature,\\n\\t\\taddress allowedMatcher,\\n\\t\\tmapping(bytes32 => LockInfo) storage atomicSwaps,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) public returns (LockInfo storage swap) {\\n\\t\\tbytes32 secretHash = keccak256(secret);\\n\\t\\tbytes32 coHash = getEthSignedClaimOrderHash(ClaimOrder(receiver, secretHash));\\n\\t\\trequire(coHash.recover(matcherSignature) == allowedMatcher, \\\"E2\\\");\\n\\n\\t\\tswap = atomicSwaps[secretHash];\\n\\t\\trequire(swap.sender != address(0), \\\"E17NF\\\");\\n\\t\\t//  require(swap.expiration/1000 >= block.timestamp, \\\"E17E\\\");\\n\\t\\trequire(!swap.used, \\\"E17U\\\");\\n\\n\\t\\tswap.used = true;\\n\\t\\tLibExchange._updateBalance(receiver, swap.asset, int(uint(swap.amount)), assetBalances, liabilities);\\n\\t}\\n\\n\\tfunction doRefundAtomic(\\n\\t\\tbytes32 secretHash,\\n\\t\\tmapping(bytes32 => LockInfo) storage atomicSwaps,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) public returns (LockInfo storage swap) {\\n\\t\\tswap = atomicSwaps[secretHash];\\n\\t\\trequire(swap.sender != address(0x0), \\\"E17NF\\\");\\n\\t\\trequire(swap.expiration / 1000 < block.timestamp, \\\"E17NE\\\");\\n\\t\\trequire(!swap.used, \\\"E17U\\\");\\n\\n\\t\\tswap.used = true;\\n\\t\\tLibExchange._updateBalance(swap.sender, swap.asset, int(uint(swap.amount)), assetBalances, liabilities);\\n\\t}\\n\\n\\tfunction getEthSignedAtomicOrderHash(RedeemOrder calldata _order) internal view returns (bytes32) {\\n\\t\\tuint256 chId;\\n\\t\\tassembly {\\n\\t\\t\\tchId := chainid()\\n\\t\\t}\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"atomicOrder\\\",\\n\\t\\t\\t\\t\\tchId,\\n\\t\\t\\t\\t\\t_order.sender,\\n\\t\\t\\t\\t\\t_order.receiver,\\n\\t\\t\\t\\t\\t_order.claimReceiver,\\n\\t\\t\\t\\t\\t_order.asset,\\n\\t\\t\\t\\t\\t_order.amount,\\n\\t\\t\\t\\t\\t_order.expiration,\\n\\t\\t\\t\\t\\t_order.secretHash\\n\\t\\t\\t\\t)\\n\\t\\t\\t).toEthSignedMessageHash();\\n\\t}\\n\\n\\tfunction getEthSignedClaimOrderHash(ClaimOrder memory _order) internal view returns (bytes32) {\\n\\t\\tuint256 chId;\\n\\t\\tassembly {\\n\\t\\t\\tchId := chainid()\\n\\t\\t}\\n\\t\\treturn\\n\\t\\t\\tkeccak256(abi.encodePacked(\\\"claimOrder\\\", chId, _order.receiver, _order.secretHash))\\n\\t\\t\\t\\t.toEthSignedMessageHash();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MarginalFunctionality.sol\\\";\\nimport \\\"./LibUnitConverter.sol\\\";\\nimport \\\"./LibValidator.sol\\\";\\nimport \\\"./SafeTransferHelper.sol\\\";\\n\\nlibrary LibExchange {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t//  Flags for updateOrders\\n\\t//      All flags are explicit\\n\\tuint8 public constant kSell = 0;\\n\\tuint8 public constant kBuy = 1; //  if 0 - then sell\\n\\tuint8 public constant kCorrectMatcherFeeByOrderAmount = 2;\\n\\n\\tevent NewTrade(\\n\\t\\taddress indexed buyer,\\n\\t\\taddress indexed seller,\\n\\t\\taddress baseAsset,\\n\\t\\taddress quoteAsset,\\n\\t\\tuint64 filledPrice,\\n\\t\\tuint192 filledAmount,\\n\\t\\tuint192 amountQuote\\n\\t);\\n\\n\\tfunction _updateBalance(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tint amount,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal returns (uint tradeType) {\\n\\t\\t// 0 - in contract, 1 - from wallet\\n\\t\\tint beforeBalance = int(assetBalances[user][asset]);\\n\\t\\tint afterBalance = beforeBalance + amount;\\n\\t\\trequire((amount >= 0 && afterBalance >= beforeBalance) || (amount < 0 && afterBalance < beforeBalance), \\\"E11\\\");\\n\\n\\t\\tif (amount > 0 && beforeBalance < 0) {\\n\\t\\t\\tMarginalFunctionality.updateLiability(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tasset,\\n\\t\\t\\t\\tliabilities,\\n\\t\\t\\t\\tuint112(uint256(amount)),\\n\\t\\t\\t\\tint192(afterBalance)\\n\\t\\t\\t);\\n\\t\\t} else if (beforeBalance >= 0 && afterBalance < 0) {\\n\\t\\t\\tif (asset != address(0)) {\\n\\t\\t\\t\\tafterBalance += int(_tryDeposit(asset, uint(-1 * afterBalance), user));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we failed to deposit balance is still negative then we move user into liability\\n\\t\\t\\tif (afterBalance < 0) {\\n\\t\\t\\t\\tsetLiability(user, asset, int192(afterBalance), liabilities);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttradeType = beforeBalance > 0 ? 0 : 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (beforeBalance != afterBalance) {\\n\\t\\t\\trequire(afterBalance >= type(int192).min && afterBalance <= type(int192).max, \\\"E11\\\");\\n\\t\\t\\tassetBalances[user][asset] = int192(afterBalance);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to add liability\\n\\t * @param user - user which created liability\\n\\t * @param asset - liability asset\\n\\t * @param balance - current negative balance\\n\\t */\\n\\tfunction setLiability(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tint192 balance,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal {\\n\\t\\tliabilities[user].push(\\n\\t\\t\\tMarginalFunctionality.Liability({\\n\\t\\t\\t\\tasset: asset,\\n\\t\\t\\t\\ttimestamp: uint64(block.timestamp),\\n\\t\\t\\t\\toutstandingAmount: uint192(-balance)\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _tryDeposit(address asset, uint amount, address user) internal returns (uint) {\\n\\t\\tuint256 amountInBase = uint256(LibUnitConverter.decimalToBaseUnit(asset, amount));\\n\\n\\t\\t// Query allowance before trying to transferFrom\\n\\t\\tif (\\n\\t\\t\\tIERC20(asset).balanceOf(user) >= amountInBase &&\\n\\t\\t\\tIERC20(asset).allowance(user, address(this)) >= amountInBase\\n\\t\\t) {\\n\\t\\t\\tSafeERC20.safeTransferFrom(IERC20(asset), user, address(this), amountInBase);\\n\\t\\t\\treturn amount;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction creditUserAssets(\\n\\t\\tuint tradeType,\\n\\t\\taddress user,\\n\\t\\tint amount,\\n\\t\\taddress asset,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal {\\n\\t\\tint beforeBalance = int(assetBalances[user][asset]);\\n\\t\\tint remainingAmount = amount + beforeBalance;\\n\\t\\trequire(\\n\\t\\t\\t(amount >= 0 && remainingAmount >= beforeBalance) || (amount < 0 && remainingAmount < beforeBalance),\\n\\t\\t\\t\\\"E11\\\"\\n\\t\\t);\\n\\t\\tint sentAmount = 0;\\n\\n\\t\\tif (tradeType == 0 && asset == address(0) && user.balance < 1e16) {\\n\\t\\t\\ttradeType = 1;\\n\\t\\t}\\n\\n\\t\\tif (tradeType == 1 && amount > 0 && remainingAmount > 0) {\\n\\t\\t\\tuint amountInBase = uint(LibUnitConverter.decimalToBaseUnit(asset, uint(amount)));\\n\\t\\t\\tuint contractBalance = asset == address(0) ? address(this).balance : IERC20(asset).balanceOf(address(this));\\n\\t\\t\\tif (contractBalance >= amountInBase) {\\n\\t\\t\\t\\tSafeTransferHelper.safeTransferTokenOrETH(asset, user, amountInBase);\\n\\t\\t\\t\\tsentAmount = amount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tint toUpdate = amount - sentAmount;\\n\\t\\tif (toUpdate != 0) {\\n\\t\\t\\t_updateBalance(user, asset, toUpdate, assetBalances, liabilities);\\n\\t\\t}\\n\\t}\\n\\n\\tstruct SwapBalanceChanges {\\n\\t\\tint amountOut;\\n\\t\\taddress assetOut;\\n\\t\\tint amountIn;\\n\\t\\taddress assetIn;\\n\\t}\\n\\n\\t/**\\n\\t *  @notice update user balances and send matcher fee\\n\\t *  @param flags uint8, see constants for possible flags of order\\n\\t */\\n\\tfunction updateOrderBalanceDebit(\\n\\t\\tLibValidator.Order memory order,\\n\\t\\tuint112 amountBase,\\n\\t\\tuint112 amountQuote,\\n\\t\\tuint8 flags,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal returns (uint tradeType, int actualIn) {\\n\\t\\tbool isSeller = (flags & kBuy) == 0;\\n\\n\\t\\t{\\n\\t\\t\\t//  Stack too deep\\n\\t\\t\\tbool isCorrectFee = ((flags & kCorrectMatcherFeeByOrderAmount) != 0);\\n\\n\\t\\t\\tif (isCorrectFee) {\\n\\t\\t\\t\\t// matcherFee: u64, filledAmount u128 => matcherFee*filledAmount fit u256\\n\\t\\t\\t\\t// result matcherFee fit u64\\n\\t\\t\\t\\torder.matcherFee = uint64((uint256(order.matcherFee) * amountBase) / order.amount); //rewrite in memory only\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (amountBase > 0) {\\n\\t\\t\\tSwapBalanceChanges memory swap;\\n\\n\\t\\t\\t(swap.amountOut, swap.amountIn) = isSeller\\n\\t\\t\\t\\t? (-1 * int(uint(amountBase)), int(uint(amountQuote)))\\n\\t\\t\\t\\t: (-1 * int(uint(amountQuote)), int(uint(amountBase)));\\n\\n\\t\\t\\t(swap.assetOut, swap.assetIn) = isSeller\\n\\t\\t\\t\\t? (order.baseAsset, order.quoteAsset)\\n\\t\\t\\t\\t: (order.quoteAsset, order.baseAsset);\\n\\n\\t\\t\\tuint feeTradeType = 1;\\n\\t\\t\\tif (order.matcherFeeAsset == swap.assetOut) {\\n\\t\\t\\t\\tswap.amountOut -= int(uint(order.matcherFee));\\n\\t\\t\\t} else if (order.matcherFeeAsset == swap.assetIn) {\\n\\t\\t\\t\\tswap.amountIn -= int(uint(order.matcherFee));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfeeTradeType = _updateBalance(\\n\\t\\t\\t\\t\\torder.senderAddress,\\n\\t\\t\\t\\t\\torder.matcherFeeAsset,\\n\\t\\t\\t\\t\\t-1 * int256(uint256(order.matcherFee)),\\n\\t\\t\\t\\t\\tassetBalances,\\n\\t\\t\\t\\t\\tliabilities\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\ttradeType =\\n\\t\\t\\t\\tfeeTradeType &\\n\\t\\t\\t\\t_updateBalance(order.senderAddress, swap.assetOut, swap.amountOut, assetBalances, liabilities);\\n\\n\\t\\t\\tactualIn = swap.amountIn;\\n\\n\\t\\t\\t_updateBalance(\\n\\t\\t\\t\\torder.matcherAddress,\\n\\t\\t\\t\\torder.matcherFeeAsset,\\n\\t\\t\\t\\tint256(uint256(order.matcherFee)),\\n\\t\\t\\t\\tassetBalances,\\n\\t\\t\\t\\tliabilities\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibGenericSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./LibValidator.sol\\\";\\nimport \\\"./LibExchange.sol\\\";\\nimport \\\"../interfaces/IAggregationExecutor.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\nlibrary LibGenericSwap {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeTransferHelper for IERC20;\\n\\n\\tuint256 private constant _USE_EXCHANGE_BALANCE = 1 << 255;\\n\\tevent OrionPoolSwap(\\n\\t\\taddress sender,\\n\\t\\taddress st,\\n\\t\\taddress rt,\\n\\t\\tuint256 st_r,\\n\\t\\tuint256 st_a,\\n\\t\\tuint256 rt_r,\\n\\t\\tuint256 rt_a,\\n\\t\\taddress f\\n\\t);\\n\\n\\terror EthDepositRejected();\\n\\terror InsufficientReturnAmount();\\n\\terror InsufficientBalance();\\n\\n\\tfunction fillThroughPools(\\n\\t\\taddress senderAddress,\\n\\t\\tIAggregationExecutor executor,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata data\\n\\t) external {\\n\\t\\t(uint256 returnAmount, uint256 spentAmount, ) = swap(senderAddress, executor, desc, data);\\n\\n\\t\\tuint112 filledAmount = LibUnitConverter.baseUnitToDecimal(address(desc.srcToken), spentAmount);\\n\\t\\tuint112 quoteAmount = LibUnitConverter.baseUnitToDecimal(address(desc.dstToken), returnAmount);\\n\\t\\tuint64 filledPrice = uint64((quoteAmount * 1e8) / filledAmount);\\n\\n\\t\\temit LibExchange.NewTrade(\\n\\t\\t\\tsenderAddress,\\n\\t\\t\\taddress(this),\\n\\t\\t\\taddress(desc.srcToken),\\n\\t\\t\\taddress(desc.dstToken),\\n\\t\\t\\tfilledPrice,\\n\\t\\t\\tfilledAmount,\\n\\t\\t\\tquoteAmount\\n\\t\\t);\\n\\t}\\n\\n\\tfunction swap(\\n\\t\\taddress sender,\\n\\t\\tIAggregationExecutor executor,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata data\\n\\t) public returns (uint256 returnAmount, uint256 spentAmount, uint256 gasLeft) {\\n\\t\\t(uint112 amount, uint112 minReturnAmount) = (\\n\\t\\t\\tLibUnitConverter.decimalToBaseUnit(address(desc.srcToken), desc.amount),\\n\\t\\t\\tLibUnitConverter.decimalToBaseUnit(address(desc.dstToken), desc.minReturnAmount)\\n\\t\\t);\\n\\t\\taddress payable dstReceiver = (desc.dstReceiver == address(0)) ? payable(sender) : desc.dstReceiver;\\n\\n\\t\\treturnAmount = desc.dstToken.uniBalanceOf(dstReceiver);\\n\\t\\t_execute(sender, executor, data);\\n\\t\\treturnAmount = desc.dstToken.uniBalanceOf(dstReceiver) - returnAmount;\\n\\n\\t\\tif (returnAmount < minReturnAmount) revert InsufficientReturnAmount();\\n\\n\\t\\tgasLeft = gasleft();\\n\\t\\tspentAmount = amount;\\n\\n\\t\\temit OrionPoolSwap(\\n\\t\\t\\tsender,\\n\\t\\t\\taddress(desc.srcToken),\\n\\t\\t\\taddress(desc.dstToken),\\n\\t\\t\\tspentAmount,\\n\\t\\t\\tspentAmount,\\n\\t\\t\\treturnAmount,\\n\\t\\t\\treturnAmount,\\n\\t\\t\\taddress(0xA6E4Ce17474d790fb25E779F9317c55963D2cbdf)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction transferToInitialSource(\\n\\t\\taddress sender,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata permit,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) external {\\n\\t\\tbool srcETH = SafeTransferHelper.isETH(desc.srcToken);\\n\\t\\tbool useExchangeBalance = desc.flags & _USE_EXCHANGE_BALANCE != 0;\\n\\t\\tuint112 amount = LibUnitConverter.decimalToBaseUnit(address(desc.srcToken), desc.amount);\\n\\n\\t\\tif (!srcETH) {\\n\\t\\t\\tif (permit.length > 0) {\\n\\t\\t\\t\\tdesc.srcToken.safePermit(permit);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (useExchangeBalance) {\\n\\t\\t\\tif ((srcETH && (msg.value >= amount)) || (!srcETH && (msg.value != 0))) revert Errors.InvalidMsgValue();\\n\\n\\t\\t\\tint updateAmount = -int(desc.amount);\\n\\t\\t\\tif (srcETH) {\\n\\t\\t\\t\\tuint112 valueInDecimal = LibUnitConverter.baseUnitToDecimal(address(0), msg.value);\\n\\t\\t\\t\\tupdateAmount += int(uint(valueInDecimal));\\n\\t\\t\\t}\\n\\t\\t\\tLibExchange._updateBalance(sender, address(desc.srcToken), updateAmount, assetBalances, liabilities);\\n\\t\\t\\tif (assetBalances[msg.sender][address(desc.srcToken)] < 0) revert InsufficientBalance();\\n\\n\\t\\t\\tdesc.srcToken.safeTransfer(desc.srcReceiver, amount);\\n\\t\\t} else {\\n\\t\\t\\tif (msg.value != (srcETH ? amount : 0)) revert Errors.InvalidMsgValue();\\n\\n\\t\\t\\tif (!srcETH) {\\n\\t\\t\\t\\tdesc.srcToken.safeTransferFrom(sender, desc.srcReceiver, amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _execute(address srcTokenOwner, IAggregationExecutor executor, bytes calldata data) private {\\n\\t\\tbytes4 callBytesSelector = executor.callBytes.selector;\\n\\t\\tassembly {\\n\\t\\t\\t// solhint-disable-line no-inline-assembly\\n\\t\\t\\tlet ptr := mload(0x40)\\n\\t\\t\\tmstore(ptr, callBytesSelector)\\n\\t\\t\\tmstore(add(ptr, 0x04), srcTokenOwner)\\n\\t\\t\\tcalldatacopy(add(ptr, 0x24), data.offset, data.length)\\n\\n\\t\\t\\tif iszero(call(gas(), executor, callvalue(), ptr, add(0x24, data.length), 0, 0)) {\\n\\t\\t\\t\\treturndatacopy(ptr, 0, returndatasize())\\n\\t\\t\\t\\trevert(ptr, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibUnitConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IERC20Simple.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary LibUnitConverter {\\n\\tusing SafeMath for uint;\\n\\n\\t/**\\n        @notice convert asset amount from8 decimals (10^8) to its base unit\\n     */\\n\\tfunction decimalToBaseUnit(address assetAddress, uint amount) internal view returns (uint112 baseValue) {\\n\\t\\tuint256 result;\\n\\n\\t\\tif (assetAddress == address(0)) {\\n\\t\\t\\tresult = amount.mul(1 ether).div(10 ** 8); // 18 decimals\\n\\t\\t} else {\\n\\t\\t\\tuint decimals = IERC20Simple(assetAddress).decimals();\\n\\n\\t\\t\\tresult = amount.mul(10 ** decimals).div(10 ** 8);\\n\\t\\t}\\n\\n\\t\\trequire(result < uint112(type(int112).max), \\\"E3U\\\");\\n\\t\\tbaseValue = uint112(result);\\n\\t}\\n\\n\\t/**\\n        @notice convert asset amount from its base unit to 8 decimals (10^8)\\n     */\\n\\tfunction baseUnitToDecimal(address assetAddress, uint amount) internal view returns (uint112 decimalValue) {\\n\\t\\tuint256 result;\\n\\n\\t\\tif (assetAddress == address(0)) {\\n\\t\\t\\tresult = amount.mul(10 ** 8).div(1 ether);\\n\\t\\t} else {\\n\\t\\t\\tuint decimals = IERC20Simple(assetAddress).decimals();\\n\\n\\t\\t\\tresult = amount.mul(10 ** 8).div(10 ** decimals);\\n\\t\\t}\\n\\t\\trequire(result < uint112(type(int112).max), \\\"E3U\\\");\\n\\t\\tdecimalValue = uint112(result);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nlibrary LibValidator {\\n\\tusing ECDSA for bytes32;\\n\\n\\tstring public constant DOMAIN_NAME = \\\"Orion Exchange\\\";\\n\\tstring public constant DOMAIN_VERSION = \\\"1\\\";\\n\\tuint256 public constant CHAIN_ID = 56;\\n\\tbytes32 public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\n\\n\\tbytes32 public constant EIP712_DOMAIN_TYPEHASH =\\n\\t\\tkeccak256(abi.encodePacked(\\\"EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)\\\"));\\n\\tbytes32 public constant ORDER_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\tbytes32 public constant DOMAIN_SEPARATOR =\\n\\t\\tkeccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tEIP712_DOMAIN_TYPEHASH,\\n\\t\\t\\t\\tkeccak256(bytes(DOMAIN_NAME)),\\n\\t\\t\\t\\tkeccak256(bytes(DOMAIN_VERSION)),\\n\\t\\t\\t\\tCHAIN_ID,\\n\\t\\t\\t\\tDOMAIN_SALT\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\tstruct Order {\\n\\t\\taddress senderAddress;\\n\\t\\taddress matcherAddress;\\n\\t\\taddress baseAsset;\\n\\t\\taddress quoteAsset;\\n\\t\\taddress matcherFeeAsset;\\n\\t\\tuint64 amount;\\n\\t\\tuint64 price;\\n\\t\\tuint64 matcherFee;\\n\\t\\tuint64 nonce;\\n\\t\\tuint64 expiration;\\n\\t\\tuint8 buySide; // buy or sell\\n\\t\\tbytes signature;\\n\\t}\\n\\n    struct SwapDescription {\\n\\t\\tIERC20 srcToken;\\n\\t\\tIERC20 dstToken;\\n\\t\\taddress payable srcReceiver;\\n\\t\\taddress payable dstReceiver;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 minReturnAmount;\\n\\t\\tuint256 flags;\\n\\t}\\n\\n\\t/**\\n\\t * @dev validate order signature\\n\\t */\\n\\tfunction validateV3(Order memory order) public pure returns (bool) {\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, getTypeValueHash(order)));\\n\\n\\t\\treturn digest.recover(order.signature) == order.senderAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @return hash order\\n\\t */\\n\\tfunction getTypeValueHash(Order memory _order) internal pure returns (bytes32) {\\n\\t\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tORDER_TYPEHASH,\\n\\t\\t\\t\\t\\t_order.senderAddress,\\n\\t\\t\\t\\t\\t_order.matcherAddress,\\n\\t\\t\\t\\t\\t_order.baseAsset,\\n\\t\\t\\t\\t\\t_order.quoteAsset,\\n\\t\\t\\t\\t\\t_order.matcherFeeAsset,\\n\\t\\t\\t\\t\\t_order.amount,\\n\\t\\t\\t\\t\\t_order.price,\\n\\t\\t\\t\\t\\t_order.matcherFee,\\n\\t\\t\\t\\t\\t_order.nonce,\\n\\t\\t\\t\\t\\t_order.expiration,\\n\\t\\t\\t\\t\\t_order.buySide\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev basic checks of matching orders against each other\\n\\t */\\n\\tfunction checkOrdersInfo(\\n\\t\\tOrder memory buyOrder,\\n\\t\\tOrder memory sellOrder,\\n\\t\\taddress sender,\\n\\t\\tuint256 filledAmount,\\n\\t\\tuint256 filledPrice,\\n\\t\\tuint256 currentTime,\\n\\t\\taddress allowedMatcher\\n\\t) public pure {\\n\\t\\trequire(validateV3(buyOrder), \\\"E2B\\\");\\n\\t\\trequire(validateV3(sellOrder), \\\"E2S\\\");\\n\\n\\t\\t// Same matcher address\\n\\t\\trequire(buyOrder.matcherAddress == sender && sellOrder.matcherAddress == sender, \\\"E3M\\\");\\n\\n\\t\\tif (allowedMatcher != address(0)) {\\n\\t\\t\\trequire(buyOrder.matcherAddress == allowedMatcher, \\\"E3M2\\\");\\n\\t\\t}\\n\\n\\t\\t// Check matching assets\\n\\t\\trequire(buyOrder.baseAsset == sellOrder.baseAsset && buyOrder.quoteAsset == sellOrder.quoteAsset, \\\"E3As\\\");\\n\\n\\t\\t// Check order amounts\\n\\t\\trequire(filledAmount <= buyOrder.amount, \\\"E3AmB\\\");\\n\\t\\trequire(filledAmount <= sellOrder.amount, \\\"E3AmS\\\");\\n\\n\\t\\t// Check Price values\\n\\t\\trequire(filledPrice <= buyOrder.price, \\\"E3\\\");\\n\\t\\trequire(filledPrice >= sellOrder.price, \\\"E3\\\");\\n\\n\\t\\t// Check Expiration Time. Convert to seconds first\\n\\t\\trequire(buyOrder.expiration / 1000 >= currentTime, \\\"E4B\\\");\\n\\t\\trequire(sellOrder.expiration / 1000 >= currentTime, \\\"E4S\\\");\\n\\n\\t\\trequire(buyOrder.buySide == 1 && sellOrder.buySide == 0, \\\"E3D\\\");\\n\\t}\\n\\n\\tfunction getEthSignedOrderHash(Order memory _order) public pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"order\\\",\\n\\t\\t\\t\\t\\t_order.senderAddress,\\n\\t\\t\\t\\t\\t_order.matcherAddress,\\n\\t\\t\\t\\t\\t_order.baseAsset,\\n\\t\\t\\t\\t\\t_order.quoteAsset,\\n\\t\\t\\t\\t\\t_order.matcherFeeAsset,\\n\\t\\t\\t\\t\\t_order.amount,\\n\\t\\t\\t\\t\\t_order.price,\\n\\t\\t\\t\\t\\t_order.matcherFee,\\n\\t\\t\\t\\t\\t_order.nonce,\\n\\t\\t\\t\\t\\t_order.expiration,\\n\\t\\t\\t\\t\\t_order.buySide\\n\\t\\t\\t\\t)\\n\\t\\t\\t).toEthSignedMessageHash();\\n\\t}\\n\\n\\tfunction checkOrderSingleMatch(\\n\\t\\tOrder memory order,\\n        SwapDescription memory desc,\\n\\t\\tuint256 filledAmount,\\n\\t\\tuint256 currentTime\\n\\t) internal pure {\\n \\t\\trequire(validateV3(order), \\\"E2B\\\");\\n\\n        uint256 amountQuote = uint256(filledAmount) * order.price / 10**8;\\n\\n        uint256 amount_spend;\\n        uint256 amount_receive;\\n\\t\\tif (order.buySide == 1) {\\n\\t\\t\\trequire(order.quoteAsset == address(desc.srcToken) && order.baseAsset == address(desc.dstToken), \\\"E3As\\\");\\n            (amount_spend, amount_receive) = (amountQuote, filledAmount);\\n\\t\\t} else {\\n\\t\\t\\trequire(order.baseAsset == address(desc.srcToken) && order.quoteAsset == address(desc.dstToken), \\\"E3As\\\");\\n            (amount_spend, amount_receive) = (filledAmount, amountQuote);\\n\\t\\t}\\n\\n        require(order.senderAddress == desc.dstReceiver, \\\"IncorrectReceiver\\\");\\n        require(amount_spend == desc.amount, \\\"IncorrectAmount\\\");\\n        require(amount_receive >= desc.minReturnAmount, \\\"IncorrectAmount\\\");\\n\\t\\trequire(filledAmount <= order.amount, \\\"E3AmB\\\");\\n\\t\\trequire(order.expiration / 1000 >= currentTime, \\\"E4B\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/MarginalFunctionality.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\npragma experimental ABIEncoderV2;\\nimport \\\"../PriceOracleInterface.sol\\\";\\n\\nlibrary MarginalFunctionality {\\n\\t// We have the following approach: when liability is created we store\\n\\t// timestamp and size of liability. If the subsequent trade will deepen\\n\\t// this liability or won't fully cover it timestamp will not change.\\n\\t// However once outstandingAmount is covered we check whether balance on\\n\\t// that asset is positive or not. If not, liability still in the place but\\n\\t// time counter is dropped and timestamp set to `now`.\\n\\tstruct Liability {\\n\\t\\taddress asset;\\n\\t\\tuint64 timestamp;\\n\\t\\tuint192 outstandingAmount;\\n\\t}\\n\\n\\tenum PositionState {\\n\\t\\tPOSITIVE,\\n\\t\\tNEGATIVE, // weighted position below 0\\n\\t\\tOVERDUE, // liability is not returned for too long\\n\\t\\tNOPRICE, // some assets has no price or expired\\n\\t\\tINCORRECT // some of the basic requirements are not met: too many liabilities, no locked stake, etc\\n\\t}\\n\\n\\tstruct Position {\\n\\t\\tPositionState state;\\n\\t\\tint256 weightedPosition; // sum of weighted collateral minus liabilities\\n\\t\\tint256 totalPosition; // sum of unweighted (total) collateral minus liabilities\\n\\t\\tint256 totalLiabilities; // total liabilities value\\n\\t}\\n\\n\\t// Constants from Exchange contract used for calculations\\n\\tstruct UsedConstants {\\n\\t\\taddress user;\\n\\t\\taddress _oracleAddress;\\n\\t\\taddress _orionTokenAddress;\\n\\t\\tuint64 positionOverdue;\\n\\t\\tuint64 priceOverdue;\\n\\t\\tuint8 stakeRisk;\\n\\t\\tuint8 liquidationPremium;\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to multiply numbers with uint8 based percent numbers\\n\\t */\\n\\tfunction uint8Percent(int192 _a, uint8 _b) internal pure returns (int192 c) {\\n\\t\\tint a = int256(_a);\\n\\t\\tint b = int256(uint256(_b));\\n\\t\\tint d = 255;\\n\\t\\tc = int192((a > 65536) ? (a / d) * b : (a * b) / d);\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to fetch asset prices in ORN tokens\\n\\t */\\n\\tfunction getAssetPrice(address asset, address oracle) internal view returns (uint64 price, uint64 timestamp) {\\n\\t\\tPriceOracleInterface.PriceDataOut memory assetPriceData = PriceOracleInterface(oracle).assetPrices(asset);\\n\\t\\t(price, timestamp) = (assetPriceData.price, assetPriceData.timestamp);\\n\\t}\\n\\n\\t/**\\n     * @dev method to calc weighted and absolute collateral value\\n     * @notice it only count for assets in collateralAssets list, all other\\n               assets will add 0 to position.\\n     * @return outdated whether any price is outdated\\n     * @return weightedPosition in ORN\\n     * @return totalPosition in ORN\\n     */\\n\\tfunction calcAssets(\\n\\t\\taddress[] storage collateralAssets,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => uint8) storage assetRisks,\\n\\t\\taddress user,\\n\\t\\taddress orionTokenAddress,\\n\\t\\taddress oracleAddress,\\n\\t\\tuint64 priceOverdue\\n\\t) internal view returns (bool outdated, int192 weightedPosition, int192 totalPosition) {\\n\\t\\tuint256 collateralAssetsLength = collateralAssets.length;\\n\\t\\tfor (uint256 i = 0; i < collateralAssetsLength; i++) {\\n\\t\\t\\taddress asset = collateralAssets[i];\\n\\t\\t\\tif (assetBalances[user][asset] < 0) continue; // will be calculated in calcLiabilities\\n\\t\\t\\t(uint64 price, uint64 timestamp) = (1e8, 0xfffffff000000000);\\n\\n\\t\\t\\tif (asset != orionTokenAddress) {\\n\\t\\t\\t\\t(price, timestamp) = getAssetPrice(asset, oracleAddress);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// balance: i192, price u64 => balance*price fits i256\\n\\t\\t\\t// since generally balance <= N*maxInt112 (where N is number operations with it),\\n\\t\\t\\t// assetValue <= N*maxInt112*maxUInt64/1e8.\\n\\t\\t\\t// That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n\\n\\t\\t\\tuint8 specificRisk = assetRisks[asset];\\n\\t\\t\\tint192 balance = assetBalances[user][asset];\\n\\t\\t\\tint256 _assetValue = (int256(balance) * int256(uint256(price))) / 1e8;\\n\\t\\t\\tint192 assetValue = int192(_assetValue);\\n\\n\\t\\t\\t// Overflows logic holds here as well, except that N is the number of\\n\\t\\t\\t// operations for all assets\\n\\n\\t\\t\\tif (assetValue > 0) {\\n\\t\\t\\t\\tweightedPosition += uint8Percent(assetValue, specificRisk);\\n\\t\\t\\t\\ttotalPosition += assetValue;\\n\\t\\t\\t\\toutdated = outdated || ((timestamp + priceOverdue) < block.timestamp);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (outdated, weightedPosition, totalPosition);\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to calc liabilities\\n\\t * @return outdated whether any price is outdated\\n\\t * @return overdue whether any liability is overdue\\n\\t * @return weightedPosition weightedLiability == totalLiability in ORN\\n\\t * @return totalPosition totalLiability in ORN\\n\\t */\\n\\tfunction calcLiabilities(\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\taddress user,\\n\\t\\taddress oracleAddress,\\n\\t\\tuint64 positionOverdue,\\n\\t\\tuint64 priceOverdue\\n\\t) internal view returns (bool outdated, bool overdue, int192 weightedPosition, int192 totalPosition) {\\n\\t\\tuint256 liabilitiesLength = liabilities[user].length;\\n\\n\\t\\tfor (uint256 i = 0; i < liabilitiesLength; i++) {\\n\\t\\t\\tLiability storage liability = liabilities[user][i];\\n\\t\\t\\tint192 balance = assetBalances[user][liability.asset];\\n\\t\\t\\t(uint64 price, uint64 timestamp) = getAssetPrice(liability.asset, oracleAddress);\\n\\t\\t\\t// balance: i192, price u64 => balance*price fits i256\\n\\t\\t\\t// since generally balance <= N*maxInt112 (where N is number operations with it),\\n\\t\\t\\t// assetValue <= N*maxInt112*maxUInt64/1e8.\\n\\t\\t\\t// That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n\\n\\t\\t\\tint192 liabilityValue = int192((int256(balance) * int256(uint256(price))) / 1e8);\\n\\t\\t\\tweightedPosition += liabilityValue; //already negative since balance is negative\\n\\t\\t\\ttotalPosition += liabilityValue;\\n\\t\\t\\toverdue = overdue || ((liability.timestamp + positionOverdue) < block.timestamp);\\n\\t\\t\\toutdated = outdated || ((timestamp + priceOverdue) < block.timestamp);\\n\\t\\t}\\n\\n\\t\\treturn (outdated, overdue, weightedPosition, totalPosition);\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to calc Position\\n\\t * @return result position structure\\n\\t */\\n\\tfunction calcPosition(\\n\\t\\taddress[] storage collateralAssets,\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => uint8) storage assetRisks,\\n\\t\\tUsedConstants memory constants\\n\\t) public view returns (Position memory result) {\\n\\t\\t(bool outdatedPrice, int192 weightedPosition, int192 totalPosition) = calcAssets(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants.user,\\n\\t\\t\\tconstants._orionTokenAddress,\\n\\t\\t\\tconstants._oracleAddress,\\n\\t\\t\\tconstants.priceOverdue\\n\\t\\t);\\n\\n\\t\\t(bool _outdatedPrice, bool overdue, int192 _weightedPosition, int192 _totalPosition) = calcLiabilities(\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tconstants.user,\\n\\t\\t\\tconstants._oracleAddress,\\n\\t\\t\\tconstants.positionOverdue,\\n\\t\\t\\tconstants.priceOverdue\\n\\t\\t);\\n\\n\\t\\tweightedPosition += _weightedPosition;\\n\\t\\ttotalPosition += _totalPosition;\\n\\t\\toutdatedPrice = outdatedPrice || _outdatedPrice;\\n\\t\\tif (_totalPosition < 0) {\\n\\t\\t\\tresult.totalLiabilities = _totalPosition;\\n\\t\\t}\\n\\t\\tif (weightedPosition < 0) {\\n\\t\\t\\tresult.state = PositionState.NEGATIVE;\\n\\t\\t}\\n\\t\\tif (outdatedPrice) {\\n\\t\\t\\tresult.state = PositionState.NOPRICE;\\n\\t\\t}\\n\\t\\tif (overdue) {\\n\\t\\t\\tresult.state = PositionState.OVERDUE;\\n\\t\\t}\\n\\t\\tresult.weightedPosition = weightedPosition;\\n\\t\\tresult.totalPosition = totalPosition;\\n\\t}\\n\\n\\t/**\\n\\t * @dev method removes liability\\n\\t */\\n\\tfunction removeLiability(address user, address asset, mapping(address => Liability[]) storage liabilities) public {\\n\\t\\tuint256 length = liabilities[user].length;\\n\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\tif (liabilities[user][i].asset == asset) {\\n\\t\\t\\t\\tif (length > 1) {\\n\\t\\t\\t\\t\\tliabilities[user][i] = liabilities[user][length - 1];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tliabilities[user].pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev method update liability\\n\\t * @notice implement logic for outstandingAmount (see Liability description)\\n\\t */\\n\\tfunction updateLiability(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tuint112 depositAmount,\\n\\t\\tint192 currentBalance\\n\\t) internal {\\n\\t\\tif (currentBalance >= 0) {\\n\\t\\t\\tremoveLiability(user, asset, liabilities);\\n\\t\\t} else {\\n\\t\\t\\tuint256 i;\\n\\t\\t\\tuint256 liabilitiesLength = liabilities[user].length;\\n\\t\\t\\tfor (; i < liabilitiesLength - 1; i++) {\\n\\t\\t\\t\\tif (liabilities[user][i].asset == asset) break;\\n\\t\\t\\t}\\n\\t\\t\\tLiability storage liability = liabilities[user][i];\\n\\t\\t\\tif (depositAmount >= liability.outstandingAmount) {\\n\\t\\t\\t\\tliability.outstandingAmount = uint192(-currentBalance);\\n\\t\\t\\t\\tliability.timestamp = uint64(block.timestamp);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tliability.outstandingAmount -= depositAmount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev partially liquidate, that is cover some asset liability to get\\n            ORN from misbehavior broker\\n     */\\n\\tfunction partiallyLiquidate(\\n\\t\\taddress[] storage collateralAssets,\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => uint8) storage assetRisks,\\n\\t\\tUsedConstants memory constants,\\n\\t\\taddress redeemedAsset,\\n\\t\\taddress collateralAsset,\\n\\t\\tuint112 amount\\n\\t) public {\\n\\t\\t//Note: constants.user - is broker who will be liquidated\\n\\t\\tPosition memory initialPosition = calcPosition(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tinitialPosition.state == PositionState.NEGATIVE || initialPosition.state == PositionState.OVERDUE,\\n\\t\\t\\t\\\"E7\\\"\\n\\t\\t);\\n\\t\\taddress liquidator = msg.sender;\\n\\t\\trequire(assetBalances[liquidator][redeemedAsset] >= int192(uint192(amount)), \\\"E8\\\");\\n\\t\\trequire(assetBalances[constants.user][redeemedAsset] < 0, \\\"E15\\\");\\n\\t\\tassetBalances[liquidator][redeemedAsset] -= int192(uint192(amount));\\n\\t\\tassetBalances[constants.user][redeemedAsset] += int192(uint192(amount));\\n\\n\\t\\tif (assetBalances[constants.user][redeemedAsset] >= 0)\\n\\t\\t\\tremoveLiability(constants.user, redeemedAsset, liabilities);\\n\\n\\t\\t(uint64 price, uint64 ts1) = getAssetPrice(redeemedAsset, constants._oracleAddress);\\n\\t\\trequire(ts1 + constants.priceOverdue > block.timestamp, \\\"E9\\\"); //Price is outdated\\n\\n\\t\\tif (collateralAsset != constants._orionTokenAddress) { //\\n\\t\\t\\t(uint64 collateralPrice, uint64 ts2) = getAssetPrice(collateralAsset, constants._oracleAddress);\\n\\t\\t\\trequire(ts2 + constants.priceOverdue > block.timestamp, \\\"E9\\\"); //Price is outdated\\n\\t\\t\\tprice = (price * 1e8) / collateralPrice;\\n\\t\\t}\\n\\n\\t\\treimburseLiquidator(\\n\\t\\t\\tamount,\\n\\t\\t\\tprice,\\n\\t\\t\\tcollateralAsset,\\n\\t\\t\\tliquidator,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tconstants.liquidationPremium,\\n\\t\\t\\tconstants.user\\n\\t\\t);\\n\\n\\t\\tPosition memory finalPosition = calcPosition(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuint(finalPosition.state) < 3 && //POSITIVE,NEGATIVE or OVERDUE\\n\\t\\t\\t\\t(finalPosition.weightedPosition > initialPosition.weightedPosition),\\n\\t\\t\\t\\\"E10\\\"\\n\\t\\t); //Incorrect state position after liquidation\\n\\t\\tif (finalPosition.state == PositionState.POSITIVE)\\n\\t\\t\\trequire(finalPosition.weightedPosition < 10e8, \\\"Can not liquidate to very positive state\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev reimburse liquidator with collateral: first from stake, than from broker balance\\n\\t */\\n\\tfunction reimburseLiquidator(\\n\\t\\tuint112 amount,\\n\\t\\tuint64 price,\\n\\t\\taddress collateralAsset,\\n\\t\\taddress liquidator,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tuint8 liquidationPremium,\\n\\t\\taddress user\\n\\t) internal {\\n\\t\\tint192 collateralAmount = int192((int256(uint256(amount)) * int256(uint256(price))) / 1e8);\\n\\t\\tcollateralAmount += uint8Percent(collateralAmount, liquidationPremium); //Liquidation premium\\n\\n\\t\\tint192 onBalanceCollateral = assetBalances[user][collateralAsset];\\n\\n\\t\\trequire(onBalanceCollateral >= collateralAmount, \\\"E10\\\");\\n\\t\\tassetBalances[user][collateralAsset] -= collateralAmount;\\n\\t\\tassetBalances[liquidator][collateralAsset] += collateralAmount;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeTransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../helpers/RevertReasonForwarder.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\n\\n\\nlibrary SafeTransferHelper {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\terror InsufficientBalance();\\n\\terror ForceApproveFailed();\\n\\terror ApproveCalledOnETH();\\n\\terror NotEnoughValue();\\n\\terror FromIsNotSender();\\n\\terror ToIsNotThis();\\n\\terror ETHTransferFailed();\\n\\terror SafePermitBadLength();\\n\\n\\tuint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\tIERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\tIERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\\n\\n\\t/// @dev Returns true if `token` is ETH.\\n\\tfunction isETH(IERC20 token) internal pure returns (bool) {\\n\\t\\treturn (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n\\t}\\n\\n\\t/// @dev Returns `account` ERC20 `token` balance.\\n\\tfunction uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n\\t\\tif (isETH(token)) {\\n\\t\\t\\treturn account.balance;\\n\\t\\t} else {\\n\\t\\t\\treturn token.balanceOf(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev `token` transfer `to` `amount`.\\n\\t/// Note that this function does nothing in case of zero amount.\\n\\t/// @dev `token` transfer `to` `amount`.\\n\\t/// Note that this function does nothing in case of zero amount.\\n\\tfunction uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tif (isETH(token)) {\\n\\t\\t\\t\\tif (address(this).balance < amount) revert InsufficientBalance();\\n\\t\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t\\t(bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) revert ETHTransferFailed();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttoken.safeTransfer(to, amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\\n\\tfunction uniApprove(IERC20 token, address to, uint256 amount) internal {\\n\\t\\tif (isETH(token)) revert ApproveCalledOnETH();\\n\\n\\t\\tforceApprove(token, to, amount);\\n\\t}\\n\\n\\t/// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n\\tfunction forceApprove(IERC20 token, address spender, uint256 value) internal {\\n\\t\\tif (!_makeCall(token, token.approve.selector, spender, value)) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!_makeCall(token, token.approve.selector, spender, 0) ||\\n\\t\\t\\t\\t!_makeCall(token, token.approve.selector, spender, value)\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert ForceApproveFailed();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeAutoTransferFrom(address weth, address token, address from, address to, uint value) internal {\\n\\t\\tif (isETH(IERC20(token))) {\\n\\t\\t\\trequire(from == address(this), \\\"TransferFrom: this\\\");\\n\\t\\t\\tIWETH(weth).deposit{value: value}();\\n\\t\\t\\tassert(IWETH(weth).transfer(to, value));\\n\\t\\t} else {\\n\\t\\t\\tif (from == address(this)) {\\n\\t\\t\\t\\tSafeERC20.safeTransfer(IERC20(token), to, value);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tSafeERC20.safeTransferFrom(IERC20(token), from, to, value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeAutoTransferTo(address weth, address token, address to, uint value) internal {\\n\\t\\tif (address(this) != to) {\\n\\t\\t\\tif (isETH(IERC20(token))) {\\n\\t\\t\\t\\tIWETH(weth).withdraw(value);\\n\\t\\t\\t\\tAddress.sendValue(payable(to), value);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tSafeERC20.safeTransfer(IERC20(token), to, value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeTransferTokenOrETH(address token, address to, uint value) internal {\\n\\t\\tif (value > 0) {\\n\\t\\t\\tif (isETH(IERC20(token))) {\\n\\t\\t\\t\\tif (address(this).balance < value) revert InsufficientBalance();\\n\\t\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t\\t(bool success, ) = to.call{value: value, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) revert ETHTransferFailed();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(token).safeTransfer(to, value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safePermit(IERC20 token, bytes calldata permit) internal {\\n\\t\\tbool success;\\n\\t\\tif (permit.length == 32 * 7) {\\n\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\tsuccess = _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\\n\\t\\t} else if (permit.length == 32 * 8) {\\n\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\tsuccess = _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\\n\\t\\t} else {\\n\\t\\t\\trevert SafePermitBadLength();\\n\\t\\t}\\n\\n\\t\\tif (!success) {\\n\\t\\t\\tRevertReasonForwarder.reRevert();\\n\\t\\t}\\n\\t}\\n\\n    function _makeCall(IERC20 token, bytes4 selector, address to, uint256 amount) private returns (bool success) {\\n\\t\\tassembly (\\\"memory-safe\\\") {\\n\\t\\t\\t// solhint-disable-line no-inline-assembly\\n\\t\\t\\tlet data := mload(0x40)\\n\\n\\t\\t\\tmstore(data, selector)\\n\\t\\t\\tmstore(add(data, 0x04), to)\\n\\t\\t\\tmstore(add(data, 0x24), amount)\\n\\t\\t\\tsuccess := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n\\t\\t\\tif success {\\n\\t\\t\\t\\tswitch returndatasize()\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\tsuccess := gt(extcodesize(token), 0)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\tsuccess := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _makeCalldataCall(IERC20 token, bytes4 selector, bytes calldata args) private returns (bool done) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// solhint-disable-line no-inline-assembly\\n\\t\\t\\tlet len := add(4, args.length)\\n\\t\\t\\tlet data := mload(0x40)\\n\\n\\t\\t\\tmstore(data, selector)\\n\\t\\t\\tcalldatacopy(add(data, 0x04), args.offset, args.length)\\n\\t\\t\\tlet success := call(gas(), token, 0, data, len, 0x0, 0x20)\\n\\t\\t\\tdone := and(success, or(iszero(returndatasize()), and(gt(returndatasize(), 31), eq(mload(0), 1))))\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/OrionVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./ExchangeStorage.sol\\\";\\n\\nabstract contract OrionVault is ExchangeStorage, ReentrancyGuard, OwnableUpgradeable {\\n    error NotEnoughBalance();\\n\\tenum StakePhase {\\n\\t\\tNOTSTAKED,\\n\\t\\tLOCKED,\\n\\t\\tRELEASING,\\n\\t\\tREADYTORELEASE,\\n\\t\\tFROZEN\\n\\t}\\n\\n\\tstruct Stake {\\n\\t\\tuint64 amount; // 100m ORN in circulation fits uint64\\n\\t\\tStakePhase phase;\\n\\t\\tuint64 lastActionTimestamp;\\n\\t}\\n\\n\\tuint64 constant releasingDuration = 3600 * 24;\\n\\tmapping(address => Stake) private stakingData;\\n\\n\\t/**\\n\\t * @dev Returns locked or frozen stake balance only\\n\\t * @param user address\\n\\t */\\n\\tfunction getLockedStakeBalance(address user) public view returns (uint256) {\\n\\t\\treturn stakingData[user].amount;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Request stake unlock for msg.sender\\n\\t * @dev If stake phase is LOCKED, that changes phase to RELEASING\\n\\t * @dev If stake phase is READYTORELEASE, that withdraws stake to balance\\n\\t * @dev Note, both unlock and withdraw is impossible if user has liabilities\\n\\t */\\n\\tfunction requestReleaseStake() public {\\n\\t\\taddress user = _msgSender();\\n\\t\\tStake storage stake = stakingData[user];\\n\\t\\tassetBalances[user][address(_orionToken)] += int192(uint192(stake.amount));\\n\\t\\tstake.amount = 0;\\n\\t\\tstake.phase = StakePhase.NOTSTAKED;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Lock some orions from exchange balance sheet\\n\\t * @param amount orions in 1e-8 units to stake\\n\\t */\\n\\tfunction lockStake(uint64 amount) public {\\n\\t\\taddress user = _msgSender();\\n\\t\\tif (assetBalances[user][address(_orionToken)] < int192(uint192(amount))) revert NotEnoughBalance();\\n\\t\\tStake storage stake = stakingData[user];\\n\\n\\t\\tassetBalances[user][address(_orionToken)] -= int192(uint192(amount));\\n\\t\\tstake.amount += amount;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracleDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface PriceOracleDataTypes {\\n\\tstruct PriceDataOut {\\n\\t\\tuint64 price;\\n\\t\\tuint64 timestamp;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceOracleDataTypes.sol\\\";\\n\\ninterface PriceOracleInterface is PriceOracleDataTypes {\\n\\tfunction assetPrices(address) external view returns (PriceDataOut memory);\\n\\n\\tfunction givePrices(address[] calldata assetAddresses) external view returns (PriceDataOut[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nlibrary Errors {\\n\\terror ReturnAmountIsNotEnough();\\n\\terror InvalidMsgValue();\\n\\terror ERC20TransferFailed();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libs/LibAtomic.sol\": {\r\n        \"LibAtomic\": \"0x01c9bc0e2421b6522ace0d0e1ce5d71f6e41fc95\"\r\n      },\r\n      \"contracts/libs/LibGenericSwap.sol\": {\r\n        \"LibGenericSwap\": \"0x4a7aa0fcf9b35d87b4125c90484497bb2e050e85\"\r\n      },\r\n      \"contracts/libs/LibValidator.sol\": {\r\n        \"LibValidator\": \"0xdcf1445537e5c72f04ce92def962e55e8e1936ba\"\r\n      },\r\n      \"contracts/libs/MarginalFunctionality.sol\": {\r\n        \"MarginalFunctionality\": \"0xe8c2ac36f9e689f0b4b7c52d80b42fdfbd664567\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyFilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fallback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCollateralAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMatcher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReturnAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"secret\",\"type\":\"bytes\"}],\"name\":\"AtomicClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"AtomicLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"secret\",\"type\":\"bytes\"}],\"name\":\"AtomicRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"AtomicRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"NewAssetTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"filledPrice\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"filledAmount\",\"type\":\"uint192\"},{\"indexed\":false,\"internalType\":\"uint192\",\"name\":\"amountQuote\",\"type\":\"uint192\"}],\"name\":\"NewTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetRisks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"atomicSwaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint24\",\"name\":\"targetChainId\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calcPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"enum MarginalFunctionality.PositionState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"weightedPosition\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalPosition\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"totalLiabilities\",\"type\":\"int256\"}],\"internalType\":\"struct MarginalFunctionality.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"checkPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"secret\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"matcherSignature\",\"type\":\"bytes\"}],\"name\":\"claimAtomic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"depositAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"limitOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint24\",\"name\":\"chainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibAtomic.CrossChainOrder\",\"name\":\"userOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"brokerOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"filledPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"filledAmount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockOrderExpiration\",\"type\":\"uint64\"}],\"name\":\"fillAndLockAtomic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"buyOrder\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"sellOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"filledPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint112\",\"name\":\"filledAmount\",\"type\":\"uint112\"}],\"name\":\"fillOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"filledAmount\",\"type\":\"uint112\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct LibValidator.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fillThroughPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filledAmounts\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assetsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"int192[]\",\"name\":\"balances\",\"type\":\"int192[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"getFilledAmounts\",\"outputs\":[{\"internalType\":\"int192\",\"name\":\"totalFilled\",\"type\":\"int192\"},{\"internalType\":\"int192\",\"name\":\"totalFeesPaid\",\"type\":\"int192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLiabilities\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"outstandingAmount\",\"type\":\"uint192\"}],\"internalType\":\"struct MarginalFunctionality.Liability[]\",\"name\":\"liabilitiesArray\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLockedStakeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liabilities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint192\",\"name\":\"outstandingAmount\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationPremium\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint24\",\"name\":\"targetChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibAtomic.LockOrder\",\"name\":\"swap\",\"type\":\"tuple\"}],\"name\":\"lockAtomic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint24\",\"name\":\"targetChainId\",\"type\":\"uint24\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct LibAtomic.LockOrder\",\"name\":\"lockOrder\",\"type\":\"tuple\"}],\"name\":\"lockAtomicByMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"lockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"partiallyLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionOverdue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOverdue\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAtomic.RedeemOrder\",\"name\":\"order1\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"secret1\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAtomic.RedeemOrder\",\"name\":\"order2\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"secret2\",\"type\":\"bytes\"}],\"name\":\"redeem2Atomics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAtomic.RedeemOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"secret\",\"type\":\"bytes\"}],\"name\":\"redeemAtomic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"refundAtomic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestReleaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"secrets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"orionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedMatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"WETH_\",\"type\":\"address\"}],\"name\":\"setBasicParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRisk\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"executor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"internalType\":\"struct LibValidator.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"risks\",\"type\":\"uint8[]\"}],\"name\":\"updateAssetRisks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_collateralAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"_stakeRisk\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidationPremium\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_priceOverdue\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_positionOverdue\",\"type\":\"uint64\"}],\"name\":\"updateMarginalSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"matcherFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"matcherFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiration\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"buySide\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct LibValidator.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"validateOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ExchangeWithGenericSwap", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}