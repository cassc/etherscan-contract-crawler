{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-12-21\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// File: contracts/IAward.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\ninterface IAward {\r\n    function drawToken(address userAddr_, uint256 sum_) external;\r\n}\r\n// File: contracts/ISwapRouter.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\ninterface ISwapRouter {\r\n\r\n    function swapEstimate(address[2] calldata path,bool status_b,uint256 amount_) external view returns (uint256,uint256,uint256);\r\n\r\n    function swap(address[2] calldata path,bool status_b,uint256 amount_) external;\r\n\r\n    //\u6dfb\u52a0LP\r\n    function addLP(address[2] calldata path,uint256 tokenAmount_, uint256 uAmount_) external;\r\n    \r\n    //\u63d0\u53d6LP\r\n    function extractLP(address[2] calldata path) external;\r\n\r\n    //\u83b7\u53d6\u4ef7\u683c\r\n    function priceOf(address[2] calldata path) external view returns (uint256);\r\n}\r\n// File: contracts/ILP.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\ninterface ILP {\r\n\r\n    //\u6dfb\u52a0LP\r\n    function addLP(uint256 tokenAmount_, address msg_sender_) external;\r\n    \r\n    //\u63d0\u53d6LP\r\n    function extractLP(uint256 tokenAmount_, address msg_sender_) external;\r\n\r\n    //\u83b7\u53d6LP\r\n    function getLP(address msg_sender_) external view returns (uint256[2] memory);\r\n\r\n    //\u83b7\u53d6\u5956\u52b1\r\n    function getAward(address msg_sender_) external view returns (uint256[3] memory);\r\n\r\n    //\u9886\u53d6\u5956\u52b1\r\n    function drawAward(address msg_sender_) external;\r\n}\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function _setOwner(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/LPSet.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract LPSet is Ownable{\r\n    address public _factory;//\u5de5\u5382\u5408\u7ea6\r\n    address public _awardPair;//\u50a8\u84c4\u5f52\u96c6\u5408\u7ea6\r\n    address public _tokenA;//\u4ee3\u5e01\r\n    address public _tokenB;//\u4ee3\u5e01\r\n\r\n    uint256 public _LPU;//\u603bLP-USDT\r\n\r\n    uint256 public _rewardLimits;//\u5956\u52b1\u9650\u5236\r\n\r\n    mapping(address => uint256[2]) public _LP;//LP\uff1a\u7528\u6237\u5730\u5740 => [token,usdt]\r\n\r\n    address[] public users; //\u603b\u7528\u6237\r\n\r\n    mapping(address => bool) public _userTr; //\u603b\u7528\u6237\r\n\r\n    mapping(address => uint256[3]) public _award;//\u5956\u52b1\uff1a\u7528\u6237\u5730\u5740 => [\u603b\u5956\u52b1,\u5df2\u9886\u53d6\u5956\u52b1\uff0c\u5f85\u9886\u53d6\u5956\u52b1]\r\n\r\n    //\u8bbe\u7f6e\u5de5\u5382\u5408\u7ea6\r\n    function setFactory(address factory) public onlyOwner{\r\n        _factory = factory;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ee3\u5e01A\r\n    function setTokenA(address tokenA) public onlyOwner{\r\n        _tokenA = tokenA;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ee3\u5e01B\r\n    function setTokenB(address tokenB) public onlyOwner{\r\n        _tokenB = tokenB;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u5956\u52b1\u9650\u5236\r\n    function setRewardLimits(uint256 val) public onlyOwner{\r\n        _rewardLimits = val;\r\n    }\r\n\r\n    //\u8bbe\u7f6eLP\r\n    function setLP(address userAddr,uint256 tokenASum,uint256 tokenBSum) public onlyOwner{\r\n        _LP[userAddr][0] = tokenASum;\r\n        _LP[userAddr][1] = tokenBSum;\r\n    }\r\n\r\n    //\u8bbe\u7f6eAward\r\n    function setAward(address userAddr,uint256 val1,uint256 val2,uint256 val3) public onlyOwner{\r\n        _award[userAddr][0] = val1;\r\n        _award[userAddr][1] = val2;\r\n        _award[userAddr][2] = val3;\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n// File: contracts/IFactory.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFactory{\r\n    function getPairAddr(address tokenA, address tokenB) external view returns(address);\r\n    function getTokenAddr(address pairAddr) external view returns(address[2] memory);\r\n    function getLPRouter() external view returns (address);\r\n    function getUniswap() external view returns (IUniswapV2Router02);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/Award.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract Award is Ownable,IAward{\r\n    address public _factory;//\u5de5\u5382\u5408\u7ea6\r\n    address public _tokenA;//\u4ee3\u5e01\r\n    address public _tokenB;//\u4ee3\u5e01\r\n\r\n    //\u8bbe\u7f6e\u5de5\u5382\u5408\u7ea6\r\n    function setFactory(address factory) public onlyOwner{\r\n        _factory = factory;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ee3\u5e01A\r\n    function setTokenA(address tokenA) public onlyOwner{\r\n        _tokenA = tokenA;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u4ee3\u5e01B\r\n    function setTokenB(address tokenB) public onlyOwner{\r\n        _tokenB = tokenB;\r\n    }\r\n\r\n    function drawToken(address userAddr_, uint256 sum_) external override onlyOwner{\r\n        IERC20(_tokenA).transfer(userAddr_,sum_);\r\n    }\r\n\r\n\r\n}\r\n// File: contracts/AwardPair.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract AwardPair is Award{\r\n    constructor() {\r\n        _factory = msg.sender;\r\n    }\r\n    \r\n\r\n    function initialize( \r\n        address tokenA,\r\n        address tokenB,\r\n        address _owner) external {\r\n        require(msg.sender == _factory, 'Pair: Not Factory');\r\n        _tokenA = tokenA;\r\n        _tokenB = tokenB;\r\n        _setOwner(_owner);\r\n    }\r\n}\r\n// File: contracts/LP.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract LP is LPSet,ILP{\r\n\r\n    modifier permission(address msg_sender_) {\r\n        require(msg_sender_ == msg.sender || msg.sender == IFactory(_factory).getLPRouter(),\"LP: No operation permission\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * type  1\uff1aADDLP\uff0c2\uff1aEXTRACTLP\r\n    **/\r\n\r\n    //ADDLP\r\n    event ADDLP(uint256 type_,address userAddr,uint256 tokenSum,uint256 usdtSum,address pairAddr,address tokenA,address tokenB,uint256 time);\r\n\r\n    //EXTRACTLP\r\n    event EXTRACTLP(uint256 type_,address userAddr,uint256 tokenSum,uint256 usdtSum,address pairAddr,address tokenA,address tokenB,uint256 time);\r\n\r\n    function getTokenPrice() public view returns (uint256 tokenPrice){\r\n        address[] memory path = new address[](2);\r\n        path[0] = _tokenA;\r\n        path[1] = _tokenB;\r\n        tokenPrice = IFactory(_factory).getUniswap().getAmountsOut(1000000000000000000,path)[1];\r\n        return tokenPrice;\r\n    }\r\n\r\n    //\u6dfb\u52a0\u6d41\u52a8\u6027\r\n    function addLP(uint256 tokenAmount_, address msg_sender_) external permission(msg_sender_) override{\r\n        require(tokenAmount_ > uint256(0),\"LP: Amount exceeds limit\");\r\n        uint256 balance = IERC20(_tokenA).balanceOf(address(this));\r\n        require(IERC20(_tokenA).allowance(msg_sender_,address(this)) >= tokenAmount_,\"LP: Insufficient authorization balance\");\r\n        require(IERC20(_tokenA).balanceOf(msg_sender_) >= tokenAmount_,\"LP: Insufficient balance\");\r\n        IERC20(_tokenA).transferFrom(msg_sender_, address(this), tokenAmount_);\r\n        uint256 newBalance = IERC20(_tokenA).balanceOf(address(this));\r\n        tokenAmount_ = newBalance - balance;\r\n        uint256 uAmount = getTokenPrice() * tokenAmount_  / (10 ** 18);\r\n        IERC20(_tokenB).transferFrom(msg_sender_, address(this), uAmount);\r\n        _LP[msg_sender_][0] += tokenAmount_;\r\n        _LP[msg_sender_][1] += uAmount;\r\n        _LPU += uAmount;\r\n        addToSet(msg_sender_);\r\n        emit ADDLP(1,msg_sender_,tokenAmount_,uAmount,address(this),_tokenA,_tokenB,block.timestamp);\r\n    }\r\n\r\n    \r\n\r\n    //\u63d0\u53d6\u6d41\u52a8\u6027\r\n    function extractLP(uint256 tokenAmount_,address msg_sender_) external permission(msg_sender_) override{\r\n        require(tokenAmount_ > uint256(0) && tokenAmount_ <= _LP[msg_sender_][0],\"LP: Amount exceeds limit\");\r\n        uint256 usdt_amount = tokenAmount_ * _LP[msg_sender_][1] / _LP[msg_sender_][0];\r\n        _LP[msg_sender_][0] -= tokenAmount_;\r\n        _LP[msg_sender_][1] -= usdt_amount;\r\n        IERC20(_tokenA).transfer(msg_sender_, tokenAmount_);\r\n        IERC20(_tokenB).transfer(msg_sender_, usdt_amount);\r\n        _LPU-=usdt_amount;\r\n        emit EXTRACTLP(2,msg_sender_,tokenAmount_,usdt_amount,address(this),_tokenA,_tokenB,block.timestamp);\r\n    }\r\n\r\n    function drawToken(address tokenAddr_, address userAddr_, uint256 sum_) public onlyOwner{\r\n        IERC20(tokenAddr_).transfer(userAddr_,sum_);\r\n    }\r\n\r\n\r\n    function addToSet(address _value) internal {\r\n\r\n        if(_userTr[_value] == false){\r\n            _userTr[_value] = true;\r\n            users.push(_value);\r\n        }\r\n    }\r\n\r\n    //\u53d1\u653e\u5956\u52b1\r\n    function grantAward(uint256 startSub,uint256 stopSub,uint256 awardSum) public onlyOwner{\r\n        require(awardSum > uint256(0),\"LP: Amount exceeds limit\");\r\n        for(uint256 i = startSub;i<stopSub;i++){\r\n            if(_LP[users[i]][1] >= _rewardLimits){\r\n                uint256 aw = _LP[users[i]][1] * awardSum / _LPU;\r\n                _award[users[i]][2] += aw;\r\n                _award[users[i]][0] += aw;\r\n            }\r\n        }\r\n    }\r\n\r\n    //\u9886\u53d6\u5956\u52b1\r\n    function drawAward(address msg_sender_) external permission(msg_sender_) override{\r\n        require(_award[msg_sender_][2] > 0,\"LP: Amount exceeds limit\");\r\n        _award[msg_sender_][1] += _award[msg_sender_][2];\r\n        uint256 a = _award[msg_sender_][2];\r\n        _award[msg_sender_][2] = 0;\r\n        IERC20(_tokenA).transfer(msg_sender_, a);\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u7528\u6237\r\n    function setUsers(address val) public onlyOwner{\r\n        addToSet(val);\r\n    }\r\n\r\n    //\u83b7\u53d6LP\r\n    function getLP(address msg_sender_) external view returns (uint256[2] memory){\r\n        return _LP[msg_sender_];\r\n    }\r\n\r\n    //\u83b7\u53d6\u603b\u4eba\u6570\r\n    function getUserSum() public view returns (uint256){\r\n        return users.length;\r\n    }\r\n\r\n    //\u83b7\u53d6\u5956\u52b1\r\n    function getAward(address msg_sender_) external view returns (uint256[3] memory){\r\n        return _award[msg_sender_];\r\n    }\r\n}\r\n// File: contracts/LPPair.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract LPPair is LP{\r\n    constructor() {\r\n        _factory = msg.sender;\r\n    }\r\n    \r\n\r\n    function initialize( \r\n        address tokenA,\r\n        address tokenB,\r\n        address awardPair,\r\n        address _owner) external {\r\n        require(msg.sender == _factory, 'Pair: Not Factory');\r\n        _tokenA = tokenA;\r\n        _tokenB = tokenB;\r\n        _awardPair = awardPair;\r\n        _rewardLimits = 100000000000000000000;\r\n        _setOwner(_owner);\r\n    }\r\n}\r\n// File: contracts/Factory.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\ncontract Factory is Ownable,IFactory{\r\n    mapping(address => mapping(address => address)) private getPair; // \u901a\u8fc7\u4e24\u4e2a\u4ee3\u5e01\u5730\u5740\u67e5Pair\u5730\u5740\r\n    address[] private allPairs; // \u4fdd\u5b58\u6240\u6709Pair\u5730\u5740\r\n    mapping(address => bool) private isGroundPair; //\u662f\u5426\u4e0a\u67b6\r\n    mapping(address => address[2]) private getToken; // \u901a\u8fc7Pair\u5730\u5740\u67e5\u4e24\u4e2a\u4ee3\u5e01\u5730\u5740\r\n    mapping(address => address) private pairOwner;\r\n    mapping(address => address) public awardPairs;\r\n    IUniswapV2Router02 uniswap;\r\n    address public _LPRouter = 0xe81c081752B822AcE9749b73B3248A9a079DafA7;\r\n    // BSC-MainNet\r\n    address private constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    constructor(){\r\n        _setOwner(msg.sender);\r\n        uniswap = IUniswapV2Router02(ROUTER);\r\n    }\r\n\r\n    struct PairInfo {\r\n        address pairAddr;\r\n        address awardPair;\r\n        address tokenA;\r\n        address tokenB;\r\n        bool flang;\r\n    }\r\n\r\n    struct PairInfos {\r\n        PairInfo[10] pairInfo;\r\n        bool flang;\r\n    }\r\n\r\n    event CreatePair(uint256 type_,address pairAddr);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) public onlyOwner returns (address pairAddr) {\r\n        require(getPairAddr(tokenA,tokenB) == address(0),\"Factory: repeat createPair\");\r\n        AwardPair aPair = new AwardPair();\r\n        aPair.initialize(tokenA,tokenB,msg.sender);\r\n        address aPairAddr = address(aPair);\r\n        LPPair pair = new LPPair();\r\n        // \u8c03\u7528\u65b0\u5408\u7ea6\u7684initialize\u65b9\u6cd5\r\n        pair.initialize(tokenA,tokenB,aPairAddr,msg.sender);\r\n        // \u66f4\u65b0\u5730\u5740map\r\n        pairAddr = address(pair);\r\n        allPairs.push(pairAddr);\r\n        isGroundPair[pairAddr] = true;\r\n        getPair[tokenA][tokenB] = pairAddr;\r\n        getPair[tokenB][tokenA] = pairAddr;\r\n        getToken[pairAddr] = [tokenA,tokenB];\r\n        pairOwner[pairAddr] = msg.sender;\r\n        awardPairs[pairAddr] = aPairAddr;\r\n        emit CreatePair(5,pairAddr);\r\n        return pairAddr;\r\n    }\r\n\r\n    //\u901a\u8fc7\u4e24\u4e2a\u4ee3\u5e01\u5730\u5740\u67e5Pair\u5730\u5740\r\n    function getPairAddr(address tokenA, address tokenB) public override view returns(address){\r\n        return getPair[tokenA][tokenB];\r\n    }\r\n\r\n    //\u67e5\u6240\u6709Pair\u5730\u5740\r\n    function getAllPairAddr() public view returns(address[] memory){\r\n        return allPairs;\r\n    }\r\n\r\n    //\u4e0a\u4e0b\u67b6\r\n    function setPairGround(address pairAddr_,bool ground_) public{\r\n        require(pairOwner[pairAddr_] == msg.sender,\"0\");\r\n        isGroundPair[pairAddr_] = ground_;\r\n    }\r\n\r\n    //\u67e5allGroundPair\r\n    function getAllGroundPair(uint256 page) public view returns(PairInfos memory){\r\n        page = page * 10;\r\n        uint pageSize = page + 10;\r\n        bool flang = true;\r\n        if(pageSize >= allPairs.length){\r\n            pageSize = allPairs.length;\r\n            flang = false;\r\n        }\r\n        PairInfos memory pairInfos;\r\n        PairInfo[10] memory ppp;\r\n        for(uint256 i = 0;i<page + 10;i++){\r\n            if(i < pageSize){\r\n                address pair = allPairs[page + i];\r\n                address[2] memory tokens = getTokenAddr(pair);\r\n                address awardPair = awardPairs[pair];\r\n                if(isGroundPair[pair]){\r\n                    PairInfo memory p = PairInfo(pair,awardPair,tokens[0],tokens[1],true);\r\n                    ppp[i] = p;\r\n                }else {\r\n                    PairInfo memory p = PairInfo(pair,awardPair,tokens[0],tokens[1],false);\r\n                    ppp[i] = p;\r\n                }\r\n            }else {\r\n                PairInfo memory p = PairInfo(address(0),address(0),address(0),address(0),false);\r\n                ppp[i] = p;\r\n            }\r\n            \r\n        }\r\n        pairInfos.pairInfo = ppp;\r\n        pairInfos.flang = flang;\r\n        return (pairInfos);\r\n    }\r\n\r\n    //\u6839\u636epairAddr\u83b7\u53d6\u4e24\u4e2atoken\u5730\u5740\r\n    function getTokenAddr(address pairAddr) public override view returns(address[2] memory){\r\n        return getToken[pairAddr];\r\n    }\r\n\r\n    function getUniswap() external override view returns (IUniswapV2Router02){\r\n        return uniswap;\r\n    }\r\n\r\n\r\n    function getLPRouter() external override view returns (address){\r\n        return _LPRouter;\r\n    }\r\n\r\n    function setLPRouter(address val) public onlyOwner{\r\n        _LPRouter = val;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ADDLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtSum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"EXTRACTLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_LP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LPU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_award\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_awardPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_userTr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msg_sender_\",\"type\":\"address\"}],\"name\":\"addLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msg_sender_\",\"type\":\"address\"}],\"name\":\"drawAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddr_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sum_\",\"type\":\"uint256\"}],\"name\":\"drawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msg_sender_\",\"type\":\"address\"}],\"name\":\"extractLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msg_sender_\",\"type\":\"address\"}],\"name\":\"getAward\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msg_sender_\",\"type\":\"address\"}],\"name\":\"getLP\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startSub\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopSub\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awardSum\",\"type\":\"uint256\"}],\"name\":\"grantAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"awardPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val3\",\"type\":\"uint256\"}],\"name\":\"setAward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenASum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBSum\",\"type\":\"uint256\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setRewardLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"}],\"name\":\"setTokenA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"setTokenB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"setUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LPPair", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ebbc87953ef512d3d29fa5e5a6d202c54f2badc02a9862134de171f4e737a32"}