{"SourceCode": "pragma solidity 0.5.4;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender)\r\n  external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value)\r\n  external returns (bool);\r\n  \r\n  function transferFrom(address from, address to, uint256 value)\r\n  external returns (bool);\r\n  function burn(uint256 value)\r\n  external returns (bool);\r\n  event Transfer(address indexed from,address indexed to,uint256 value);\r\n  event Approval(address indexed owner,address indexed spender,uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n   \r\ncontract LAROSTAKING  \r\n{\r\n     using SafeMath for uint256;\r\n\r\n    struct User {\r\n        uint id;\r\n        uint256 totalRelies;\r\n        uint256 lasttrdate;\r\n        uint256 currentReliesAmt;\r\n        uint256 perMonthAmount;\r\n        uint256 balanceAmt;\r\n     }\r\n   \r\n    mapping(address => User) public users;\r\n    mapping(uint => address) public idToAddress;\r\n   \r\n    uint public lastUserId = 2;\r\n \taddress public owner;\r\n    \r\n    IBEP20 private LARO; \r\n\r\n    event UserReg(address indexed user,uint256 totalAmt,uint256 balanceAmt,uint256 monthlyAmt);\r\n    event withDrawal(address indexed user,uint256 withAmt);\r\n    constructor(address ownerAddress, IBEP20 _LARO) public \r\n    {\r\n        owner = ownerAddress;\r\n        LARO = _LARO;\r\n        User memory user = User({\r\n            id:1,\r\n            totalRelies: uint(0),\r\n            lasttrdate: uint(0),\r\n            currentReliesAmt:uint(0),\r\n            perMonthAmount:uint(0),\r\n            balanceAmt:uint(0)\r\n        });\r\n        \r\n        users[ownerAddress] = user;\r\n        idToAddress[1] = ownerAddress;\r\n        \r\n    }\r\n    \r\n     \r\n    function setHoldingWallet(address holderAddress,uint256 totalReliesAmt,uint256 monthlyAmount) public payable \r\n    {\r\n        require(msg.sender==owner,\"Only Owner\");\r\n        require(!isUserExists(holderAddress), \"Wallet exists\");\r\n       uint32 size;\r\n        assembly {\r\n            size := extcodesize(holderAddress)\r\n        }\r\n        \r\n        require(size == 0, \"cannot be a contract\");\r\n        \r\n        User memory user = User({\r\n            id: lastUserId,\r\n            totalRelies: 0,\r\n            lasttrdate: block.timestamp,\r\n            currentReliesAmt:totalReliesAmt,\r\n            perMonthAmount:monthlyAmount,\r\n            balanceAmt:totalReliesAmt\r\n        });\r\n        \r\n\r\n        users[holderAddress] = user;\r\n        idToAddress[lastUserId] = holderAddress;\r\n        lastUserId++;\r\n\r\n       emit UserReg( holderAddress,totalReliesAmt,totalReliesAmt,monthlyAmount);\r\n      \r\n    }\r\n\r\n    function withtoken() public payable\r\n\t{\r\n\t    require(isUserExists(msg.sender), \"Holders not exists\");\r\n\t    uint256 lastdt=users[msg.sender].lasttrdate;\r\n        uint256 currentdt=block.timestamp;\r\n        uint256 getdate=lastdt+30 days;\r\n        require(currentdt>getdate,\"Transaction Not Allow\");\r\n        uint256 amountPerSlot=users[msg.sender].perMonthAmount;\r\n        uint256 balanceAmt=users[msg.sender].balanceAmt;\r\n        if(currentdt>getdate && balanceAmt>=amountPerSlot)\r\n        {\r\n            LARO.transfer(msg.sender,amountPerSlot);\r\n            users[msg.sender].lasttrdate=block.timestamp;\r\n            users[msg.sender].totalRelies+=amountPerSlot;\r\n            users[msg.sender].balanceAmt-=amountPerSlot;\r\n            emit withDrawal(msg.sender,amountPerSlot);\r\n        }\r\n\t } \r\n\r\n    function reliseowner(uint256 tokenQty) public payable\r\n\t{\r\n\t    require(msg.sender==owner,\"Only Owner\");\r\n         LARO.transfer(owner,tokenQty);\r\n\t} \r\n \r\n\tfunction isUserExists(address user) public view returns (bool) \r\n    {\r\n        return (users[user].id != 0);\r\n    }\r\n\t\r\n    function isContract(address _address) public view returns (bool _isContract)\r\n    {\r\n          uint32 size;\r\n          assembly {\r\n            size := extcodesize(_address)\r\n          }\r\n          return (size > 0);\r\n    }    \r\n         \r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"name\":\"_isContract\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenQty\",\"type\":\"uint256\"}],\"name\":\"reliseowner\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holderAddress\",\"type\":\"address\"},{\"name\":\"totalReliesAmt\",\"type\":\"uint256\"},{\"name\":\"monthlyAmount\",\"type\":\"uint256\"}],\"name\":\"setHoldingWallet\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"totalRelies\",\"type\":\"uint256\"},{\"name\":\"lasttrdate\",\"type\":\"uint256\"},{\"name\":\"currentReliesAmt\",\"type\":\"uint256\"},{\"name\":\"perMonthAmount\",\"type\":\"uint256\"},{\"name\":\"balanceAmt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withtoken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ownerAddress\",\"type\":\"address\"},{\"name\":\"_LARO\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"balanceAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"monthlyAmt\",\"type\":\"uint256\"}],\"name\":\"UserReg\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"withAmt\",\"type\":\"uint256\"}],\"name\":\"withDrawal\",\"type\":\"event\"}]", "ContractName": "LAROSTAKING", "CompilerVersion": "v0.5.4+commit.9549d8ff", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d4cbbb154f54611ab1b94268ec021e1210a10674000000000000000000000000c279c59301b9278022c5a271e4c185b03c193713", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://1f246f4e1e345dc1eebf8508d8de86b68db6f6c6e442508023fdf352f9dc1727"}