{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n\r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {// Equivalent to contains(set, value)\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1;\r\n            // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function sync() external;\r\n}\r\n\r\n\r\ncontract XHToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _tTotal = 10000000000000;\r\n\r\n    string private _name = \"SFD\";\r\n    string private _symbol = \"SFD\";\r\n\r\n    uint public _lpFee = 28;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    bool inSwapAndLiquify;\r\n    address public uniswapV2Pair;\r\n    address public token;\r\n    address  holder;\r\n    uint public swapStartTime;\r\n\r\n    struct Interest {\r\n        uint256 index;\r\n        uint256 period;\r\n        uint256 lastSendTime;\r\n        uint minAward;\r\n        uint award;\r\n        uint award30;\r\n        uint sendCount;\r\n        IERC20 token;\r\n        EnumerableSet.AddressSet tokenHolder;\r\n        uint256[] feihongdetail;\r\n        mapping(address => uint256) userfeihongIndex;\r\n        uint256 maxfenhong;\r\n    }\r\n\r\n    address  fromAddress;\r\n    address  toAddress;\r\n    Interest internal lpInterest;\r\n\r\n    struct LpAwardCondition {\r\n        uint lpHoldAmount;\r\n        uint balHoldAmount;\r\n    }\r\n\r\n    LpAwardCondition public lpAwardCondition;\r\n\r\n    uint public addPriceTokenAmount = 1e14;\r\n    uint256 idays;\r\n    mapping(address => address) internal referaddress;\r\n\r\n    mapping(address => address[]) internal sendermead;\r\n    mapping(address => uint256) private sendertime;\r\n    mapping(address=>bool) private isinclude;\r\n    address private award30ad;\r\n    address private chendianad;\r\n\r\n\r\n    address private top100ad;\r\n\r\n    uint256 private testcount;\r\n\r\n    constructor () public {\r\n        address _holder = 0x2D016a75a7051f2663D1cc4cCC704C861937103C;\r\n        // address _holder=0x9DFFAd17Ee20bbf877730E0c4216596AE063C615;\r\n        address _token = 0x55d398326f99059fF775485246999027B3197955;\r\n        \r\n        testcount=10;\r\n\r\n        lpAwardCondition = LpAwardCondition(1e8, 1e8);\r\n        holder = _holder;\r\n        _tOwned[holder] = _tTotal;\r\n        token = _token;\r\n        _isExcludedFromFee[_holder] = true;\r\n       \r\n        sendertime[holder] = block.timestamp;\r\n        uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this), token);\r\n\r\n        ammPairs[uniswapV2Pair] = true;\r\n\r\n        _owner = msg.sender;\r\n        lpInterest.token = IERC20(uniswapV2Pair);\r\n        lpInterest.lastSendTime = block.timestamp;\r\n        lpInterest.minAward = 1e3;\r\n        lpInterest.period = 3600;\r\n        lpInterest.sendCount = 50;\r\n        lpInterest.maxfenhong = 20 * 1e9;\r\n        emit Transfer(address(0), _holder, _tTotal);\r\n     \r\n        setAward30ad(0xa0937073dA4497B34E6a3f005823e73Fe2Cd904b);\r\n        settop100ad(0x4FF4E684A33677C69d567B862E33274ba7C3806B);\r\n        setChendianad(0x623634cA65aEB08dc47A48762FF78a7754D8B9B7);\r\n\r\n        _isExcludedFromFee[0xa0937073dA4497B34E6a3f005823e73Fe2Cd904b] = true;\r\n        _isExcludedFromFee[0x4FF4E684A33677C69d567B862E33274ba7C3806B] = true;\r\n        _isExcludedFromFee[0x623634cA65aEB08dc47A48762FF78a7754D8B9B7] = true;\r\n        _isExcludedFromFee[uniswapV2Pair] = true;\r\n\r\n    }\r\n\r\n    function setAddPriceTokenAmount(uint _addPriceTokenAmount) external onlyOwner {\r\n        addPriceTokenAmount = _addPriceTokenAmount;\r\n    }\r\n\r\n    function setlpAwardCondition(uint lpHoldAmount, uint balHoldAmount) external onlyOwner {\r\n        lpAwardCondition.lpHoldAmount = lpHoldAmount;\r\n        lpAwardCondition.balHoldAmount = balHoldAmount;\r\n    }\r\n\r\n    struct InterestInfo {\r\n        uint period;\r\n        uint lastSendTime;\r\n        uint award;\r\n        uint count;\r\n        uint sendNum;\r\n        uint award30;\r\n        uint256[] feihongdetail;\r\n    }\r\n\r\n    function getInterestInfo() external view returns (InterestInfo memory lpI){\r\n        lpI.period = lpInterest.period;\r\n        lpI.lastSendTime = lpInterest.lastSendTime;\r\n        lpI.award = lpInterest.award;\r\n        lpI.award30 = lpInterest.award30;\r\n        lpI.count = lpInterest.feihongdetail.length;\r\n        lpI.sendNum = lpInterest.sendCount;\r\n        lpI.feihongdetail = lpInterest.feihongdetail;\r\n    }\r\n\r\n    function setswapStartTime(uint _swapStartTime) external onlyOwner {\r\n        swapStartTime = _swapStartTime;\r\n    }\r\n\r\n    function tongsuo(address ad, uint256 iidays) private {\r\n        uint256 tmp;\r\n        uint256 tmp_balance;\r\n        uint256 tmp_tonsuo;\r\n        tmp = _tOwned[ad];\r\n        tmp_balance = tmp * (85 ** iidays) / (100 ** iidays);\r\n        tmp_tonsuo = tmp.sub(tmp_balance);\r\n        _tOwned[ad] = tmp_balance;\r\n\r\n        _tOwned[top100ad] = _tOwned[top100ad].add(tmp_tonsuo);\r\n        emit Transfer(ad, top100ad, tmp_tonsuo);\r\n        sendertime[ad] = sendertime[ad] + iidays * 60*60*4;\r\n    \r\n    }\r\n    function settop100ad(address _ad) public onlyOwner{\r\n        _isExcludedFromFee[_ad] = true;\r\n        top100ad=_ad;\r\n    }\r\n    function setAmmPair(address pair, bool hasPair) external onlyOwner {\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n        }\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue, address from, address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    struct Param {\r\n        bool takeFee;\r\n        uint tTransferAmount;\r\n        uint tLp;\r\n        uint tAward;\r\n    }\r\n\r\n    function _initParam(uint256 tAmount, Param memory param, bool flags) private pure {\r\n        uint tFee = 0;\r\n        if (flags == true) {\r\n            if (param.takeFee) {\r\n                tFee = tAmount * 30 / 1000;\r\n                param.tLp = tAmount * 10 / 1000;\r\n                param.tAward = 0;\r\n            }\r\n            param.tTransferAmount = tAmount.sub(tFee);\r\n        } else {\r\n            if (param.takeFee) {\r\n                tFee = tAmount * 50 / 1000;\r\n                param.tLp = 0;\r\n                param.tAward = tAmount * 30 / 1000;\r\n            }\r\n            param.tTransferAmount = tAmount.sub(tFee);\r\n        }\r\n    }\r\n\r\n    function setupline(address sender, address recipient, uint256 amount) internal {\r\n        if (amount == 1e7) {\r\n            sendermead[recipient].push(sender);\r\n        } else if (amount == 9 * 1e6) {\r\n            if (referaddress[sender] == address(0)) {\r\n                for (uint256 i = 0; i < sendermead[sender].length; i++) {\r\n                    if (sendermead[sender][i] == recipient) {\r\n                        referaddress[sender] = recipient;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setlimit(uint256 _amount) public onlyOwner {\r\n        lpInterest.maxfenhong = _amount;\r\n    }\r\n\r\n    function setAward30ad(address _ad) public onlyOwner {\r\n        _isExcludedFromFee[_ad] = true;\r\n        award30ad = _ad;\r\n    }\r\n\r\n    function setChendianad(address _ad) public onlyOwner {\r\n        chendianad = _ad;\r\n    }\r\n\r\n  \r\n  \r\n\r\n\r\n    function _takeFee(Param memory param, address from) private {\r\n        if (param.tLp > 0) {\r\n            _take(param.tLp, from, top100ad);\r\n        }\r\n        if (param.tAward > 0) {\r\n            _take(param.tAward, from, award30ad);\r\n            // lpInterest.award30 = lpInterest.award30 + param.tAward;\r\n        }\r\n    }\r\n\r\n\r\n    function _doTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    function _isLiquidity(address from, address to) internal view returns (bool isAdd, bool isDel, bool isSell, bool isBuy){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n\r\n        if (ammPairs[to]) {\r\n            if (token0 != address(this) && bal0 > r0) {\r\n                isAdd = bal0 - r0 > addPriceTokenAmount;\r\n            }\r\n            if (!isAdd) {\r\n                isSell = true;\r\n            }\r\n        }\r\n        if (ammPairs[from]) {\r\n            if (token0 != address(this) && bal0 < r0) {\r\n                isDel = r0 - bal0 > 0;\r\n            }\r\n            if (!isDel) {\r\n                isBuy = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if (lpInterest.feihongdetail.length == 0) {\r\n            lpInterest.feihongdetail.push(0);\r\n        }\r\n\r\n        bool isAdd;\r\n        bool isDel;\r\n        bool isSell;\r\n        bool isBuy;\r\n        (isAdd, isDel, isSell, isBuy) = _isLiquidity(from, to);\r\n        \r\n        if (block.timestamp < swapStartTime && (ammPairs[from] || ammPairs[to])) {\r\n            require(false, \"swap no start\");\r\n        }\r\n\r\n        Param memory param;\r\n        if (sendertime[from] == 0) {\r\n            sendertime[from] = block.timestamp;\r\n        }\r\n        if (ammPairs[from] == false && _tOwned[from] > 0 && _isExcludedFromFee[from] == false) {\r\n\r\n            idays = (block.timestamp - sendertime[from]) / (60*60*4);\r\n            require(amount <= _tOwned[from] * (85 ** idays) / (100 ** idays), \"Transfer amount is not enough\");\r\n            \r\n            if (idays > 0) {\r\n                if (idays>=testcount){\r\n                    idays=testcount;\r\n                }\r\n\r\n                tongsuo(from, idays);\r\n            }\r\n        }\r\n\r\n        if (sendertime[to] == 0) {\r\n            sendertime[to] = block.timestamp;\r\n        }\r\n        if (ammPairs[to] == false && _tOwned[to] > 0 && _isExcludedFromFee[to] == false) {\r\n            idays = (block.timestamp - sendertime[to]) / (60*60*4);\r\n            if (idays > 0) {\r\n                if (idays>=testcount){\r\n                    idays=testcount;\r\n                }\r\n                tongsuo(to, idays);\r\n            }\r\n        }\r\n\r\n        address userad = from;\r\n        bool initflag;\r\n        if (isAdd || isDel || isSell || isBuy) {\r\n            param.takeFee = true;\r\n            if (isAdd) {\r\n                userad = from;\r\n                initflag = true;\r\n            }\r\n            if (isDel) {\r\n                userad = to;\r\n                initflag = false;\r\n            }\r\n            if (isSell) {\r\n                userad = from;\r\n                initflag = false;\r\n            }\r\n            if (isBuy) {\r\n                userad = to;\r\n                initflag = true;\r\n            }\r\n            if (_isExcludedFromFee[userad]) {\r\n                param.takeFee = false;\r\n            }\r\n            _initParam(amount, param, initflag);\r\n\r\n        } else {\r\n            setupline(from, to, amount);\r\n            param.tTransferAmount = amount;\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, param, userad);\r\n\r\n       \r\n    }\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, Param memory param, address userad) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if (param.takeFee) {\r\n            _takeFee(param, sender);\r\n\r\n            address upline = referaddress[userad];\r\n            uint256 restfee;\r\n            for (uint256 i = 0; i < 5; i++) {\r\n                if (upline != address(0)) {\r\n                    _tOwned[upline] = _tOwned[upline].add(tAmount.mul(4).div(1000));\r\n                    emit Transfer(sender, upline, tAmount.mul(4).div(1000));\r\n                } else {\r\n                    restfee = restfee.add(tAmount.mul(4).div(1000));\r\n                }\r\n                upline = referaddress[upline];\r\n            }\r\n            if (restfee > 0) {\r\n                _tOwned[chendianad] = _tOwned[chendianad].add(restfee);\r\n                emit Transfer(sender, chendianad, restfee);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function getuserindex(address _ad)public view returns(uint256,bool){\r\n        return (lpInterest.userfeihongIndex[_ad],isinclude[_ad]);\r\n    }\r\n\r\n    function gettoken01() public view returns (address, address, bool){\r\n        return (IUniswapV2Pair(address(uniswapV2Pair)).token0(), address(this), IUniswapV2Pair(address(uniswapV2Pair)).token0() < address(this));\r\n    }\r\n   \r\n    function getRefer(address _ad) public view returns (address){\r\n        return referaddress[_ad];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterestInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSendTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sendNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award30\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"feihongdetail\",\"type\":\"uint256[]\"}],\"internalType\":\"struct XHToken.InterestInfo\",\"name\":\"lpI\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"getRefer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"getuserindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAwardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpHoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balHoldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addPriceTokenAmount\",\"type\":\"uint256\"}],\"name\":\"setAddPriceTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"setAward30ad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"setChendianad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setlimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpHoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balHoldAmount\",\"type\":\"uint256\"}],\"name\":\"setlpAwardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapStartTime\",\"type\":\"uint256\"}],\"name\":\"setswapStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ad\",\"type\":\"address\"}],\"name\":\"settop100ad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XHToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://17d66a8cc576ce072a4b09cbfcbeed20f21d476563ed64f1154980faba94a1f5"}