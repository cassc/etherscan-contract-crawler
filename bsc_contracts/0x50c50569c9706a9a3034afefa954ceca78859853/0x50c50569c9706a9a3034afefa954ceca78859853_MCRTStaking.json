{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./IPoints.sol\\\";\\n\\ncontract MCRTStaking is OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IERC20Upgradeable public stakingToken;\\n\\n    event Stake(uint256 stakeId, address staker);\\n    event Unstake(uint256 stakeId, address unstaker);\\n\\n    struct StakingInfo {\\n        uint256 id;\\n        address owner;\\n        uint256 timeToUnlock;\\n        uint256 stakingTime;\\n        uint256 tokensStaked;\\n        uint256 tokensStakedWithBonus;\\n        bool option; // false: Bonus, true: NFT Point\\n        bool withdrawnPoint;\\n    }\\n    mapping(address => uint256) public balances;\\n    mapping(address => uint256) public pBalances;\\n    mapping(address => uint256) public stakingNonce;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => mapping(uint256 => uint256)) public rewards;\\n    mapping(uint256 => uint256) public bonusTokenMultiplier;\\n    mapping(address => uint256) public tokensStakedByAddress;\\n    mapping(address => uint256) public tokensStakedWithBonusByAddress;\\n    mapping(address => mapping(uint256 => StakingInfo)) public stakingInfoForAddress;\\n\\n    mapping(uint256 => uint256[3]) public pointRewards;\\n    mapping(uint256 => uint256) public minStakeTokensForPoint;\\n\\n    bool public stakingEnabled;\\n    uint256 public rewardRate; // 1 tokens per sec = 86400 tokens per day\\n    uint256 private constant DIVISOR = 1e11;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public uniqueAddressesStaked;\\n    uint256 public totalTokensStaked;\\n    uint256 public pTotalTokensStaked;\\n    uint256 public totalTokensStakedWithBonusTokens;\\n    uint256 public totalRewardsLeft;\\n\\n    address public pointAddress;\\n\\n    uint256[50] private __gap;\\n\\n    /** Initializes the staking contract\\n    @param tokenAddress_ the token address that will be staked\\n    @param pointAddress_ the point address for giving NFT point\\n    @param rewardRate_ reward rate per second\\n     */\\n    function initialize(\\n        address tokenAddress_,\\n        address pointAddress_,\\n        uint256 rewardRate_\\n    ) external initializer {\\n        __Ownable_init();\\n\\n        stakingToken = IERC20Upgradeable(tokenAddress_);\\n        pointAddress = pointAddress_;\\n        stakingEnabled = true;\\n        rewardRate = rewardRate_;\\n    }\\n\\n    /** Computes the reward per token\\n     */\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalTokensStakedWithBonusTokens == 0) {\\n            return 0;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((block.timestamp - lastUpdateTime) * rewardRate * 1e18) /\\n                totalTokensStakedWithBonusTokens);\\n    }\\n\\n    /** Computes the earned amount thus far by the address\\n    @param account_ account to get the earned ammount for\\n    @param stakeId_ stake id for account\\n     */\\n    function earned(address account_, uint256 stakeId_) public view returns (uint256) {\\n        return\\n            ((stakingInfoForAddress[account_][stakeId_].tokensStakedWithBonus *\\n                (rewardPerToken() - userRewardPerTokenPaid[account_])) / 1e18) +\\n            rewards[account_][stakeId_];\\n    }\\n\\n    /** modifier that updates and computes the correct internal variables\\n    @param account_ the account called for\\n     */\\n    modifier updateReward(address account_) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = block.timestamp;\\n\\n        for (uint256 i = 0; i < stakingNonce[account_]; i++) {\\n            if (stakingInfoForAddress[account_][i].tokensStakedWithBonus != 0)\\n                rewards[account_][i] = earned(account_, i);\\n        }\\n        userRewardPerTokenPaid[account_] = rewardPerTokenStored;\\n\\n        _;\\n    }\\n\\n    /** Staking function\\n    @param amount_ the amount to stake\\n    @param lockTime_ the lock time to lock the stake for\\n     */\\n    function stake(\\n        uint256 amount_,\\n        uint256 lockTime_,\\n        bool option_\\n    ) external updateReward(msg.sender) {\\n        require(stakingEnabled, \\\"STAKING_DISABLED\\\");\\n        require(amount_ != 0, \\\"CANNOT_STAKE_0\\\");\\n        require(bonusTokenMultiplier[lockTime_] != 0, \\\"LOCK_TIME_ERROR\\\");\\n\\n        if (stakingNonce[msg.sender] == 0) {\\n            uniqueAddressesStaked++;\\n        }\\n\\n        if (!option_) {\\n            uint256 tokensWithBonus = (amount_ * bonusTokenMultiplier[lockTime_]) / DIVISOR;\\n\\n            totalTokensStaked += amount_;\\n            totalTokensStakedWithBonusTokens += tokensWithBonus;\\n            balances[msg.sender] += tokensWithBonus;\\n            tokensStakedByAddress[msg.sender] += amount_;\\n            tokensStakedWithBonusByAddress[msg.sender] += tokensWithBonus;\\n\\n            StakingInfo storage data = stakingInfoForAddress[msg.sender][stakingNonce[msg.sender]];\\n            data.owner = msg.sender;\\n            data.stakingTime = block.timestamp;\\n            data.tokensStaked = amount_;\\n            data.timeToUnlock = block.timestamp + lockTime_;\\n            data.tokensStakedWithBonus = tokensWithBonus;\\n            data.id = stakingNonce[msg.sender];\\n\\n            stakingNonce[msg.sender]++;\\n        } else {\\n            require(\\n                minStakeTokensForPoint[lockTime_] != 0 &&\\n                    amount_ >= minStakeTokensForPoint[lockTime_],\\n                \\\"Not enough token to stake for Point\\\"\\n            );\\n            pBalances[msg.sender] += amount_;\\n            pTotalTokensStaked += amount_;\\n            tokensStakedByAddress[msg.sender] += amount_;\\n\\n            StakingInfo storage data = stakingInfoForAddress[msg.sender][stakingNonce[msg.sender]];\\n            data.owner = msg.sender;\\n            data.stakingTime = block.timestamp;\\n            data.tokensStaked = amount_;\\n            data.timeToUnlock = block.timestamp + lockTime_;\\n            data.tokensStakedWithBonus = 0;\\n            data.id = stakingNonce[msg.sender];\\n            data.option = true;\\n\\n            stakingNonce[msg.sender]++;\\n        }\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount_);\\n        emit Stake(stakingNonce[msg.sender], msg.sender);\\n    }\\n\\n    /** Unstake function\\n    @param stakeId_ the stake id to unstake\\n     */\\n    function unstake(uint256 stakeId_) external updateReward(msg.sender) {\\n        StakingInfo storage info = stakingInfoForAddress[msg.sender][stakeId_];\\n        require(info.timeToUnlock <= block.timestamp, \\\"Not reached to timeToUnlock yet\\\");\\n        require(info.owner != address(0), \\\"Already unstaked\\\");\\n\\n        if (!info.option) {\\n            getRewardInternal(stakeId_);\\n\\n            totalTokensStaked -= info.tokensStaked;\\n            totalTokensStakedWithBonusTokens -= info.tokensStakedWithBonus;\\n            balances[msg.sender] -= info.tokensStakedWithBonus;\\n            tokensStakedByAddress[msg.sender] -= info.tokensStaked;\\n            tokensStakedWithBonusByAddress[msg.sender] -= info.tokensStakedWithBonus;\\n        } else {\\n            pTotalTokensStaked -= info.tokensStaked;\\n            pBalances[msg.sender] -= info.tokensStaked;\\n            tokensStakedByAddress[msg.sender] -= info.tokensStaked;\\n\\n            if (!info.withdrawnPoint) getPointInternal(info.id);\\n        }\\n\\n        uint256 tokensTotal = info.tokensStaked;\\n\\n        delete stakingInfoForAddress[msg.sender][stakeId_];\\n\\n        emit Unstake(stakeId_, msg.sender);\\n\\n        stakingToken.safeTransfer(msg.sender, tokensTotal);\\n    }\\n\\n    /** batch Unstake function\\n    @param stakeIds_ the stake id to unstake\\n     */\\n    function batchUnstake(uint256[] memory stakeIds_) external updateReward(msg.sender) {\\n        require(stakeIds_.length != 0, \\\"Invalid stake id array\\\");\\n\\n        for (uint256 i = 0; i < stakeIds_.length; i++) {\\n            StakingInfo storage info = stakingInfoForAddress[msg.sender][stakeIds_[i]];\\n            require(info.timeToUnlock <= block.timestamp, \\\"Not reached to timeToUnlock yet\\\");\\n            require(info.owner != address(0), \\\"Already unstaked\\\");\\n\\n            if (!info.option) {\\n                getRewardInternal(stakeIds_[i]);\\n\\n                totalTokensStaked -= info.tokensStaked;\\n                totalTokensStakedWithBonusTokens -= info.tokensStakedWithBonus;\\n                balances[msg.sender] -= info.tokensStakedWithBonus;\\n                tokensStakedByAddress[msg.sender] -= info.tokensStaked;\\n                tokensStakedWithBonusByAddress[msg.sender] -= info.tokensStakedWithBonus;\\n            } else {\\n                pTotalTokensStaked -= info.tokensStaked;\\n                pBalances[msg.sender] -= info.tokensStaked;\\n                tokensStakedByAddress[msg.sender] -= info.tokensStaked;\\n\\n                if (!info.withdrawnPoint) getPointInternal(info.id);\\n            }\\n\\n            uint256 tokensTotal = info.tokensStaked;\\n\\n            delete stakingInfoForAddress[msg.sender][stakeIds_[i]];\\n\\n            emit Unstake(stakeIds_[i], msg.sender);\\n\\n            stakingToken.safeTransfer(msg.sender, tokensTotal);\\n        }\\n    }\\n\\n    /** The function called to get the reward for user's stake\\n    @param stakeId_ the stake id to unstake\\n     */\\n    function getPointReward(uint256 stakeId_) external {\\n        StakingInfo memory info = stakingInfoForAddress[msg.sender][stakeId_];\\n        require(info.option, \\\"Invalid staking option\\\");\\n        require(!info.withdrawnPoint, \\\"Already withdrawn\\\");\\n\\n        getPointInternal(stakeId_);\\n    }\\n\\n    /** The function called to get the reward for user's stake\\n    @param stakeIds_ the stake id to unstake\\n     */\\n    function batchGetPointReward(uint256[] memory stakeIds_) external {\\n        require(stakeIds_.length != 0, \\\"Invalid stake id array\\\");\\n\\n        for (uint256 i = 0; i < stakeIds_.length; i++) {\\n            StakingInfo memory info = stakingInfoForAddress[msg.sender][stakeIds_[i]];\\n            require(info.option, \\\"Invalid staking option\\\");\\n            require(!info.withdrawnPoint, \\\"Already withdrawn\\\");\\n\\n            getPointInternal(stakeIds_[i]);\\n        }\\n    }\\n\\n    /** The function called to get the reward for user's stake\\n    @param stakeId_ the stake id to unstake\\n     */\\n    function getRewardInternal(uint256 stakeId_) internal {\\n        uint256 reward = rewards[msg.sender][stakeId_];\\n        require(reward <= totalRewardsLeft, \\\"Not enough reward token remains\\\");\\n\\n        rewards[msg.sender][stakeId_] = 0;\\n        totalRewardsLeft -= reward;\\n        stakingToken.safeTransfer(msg.sender, reward);\\n    }\\n\\n    /** The function called to get the point for user's stake\\n    @param stakeId_ the stake id to unstake\\n     */\\n    function getPointInternal(uint256 stakeId_) internal {\\n        StakingInfo storage info = stakingInfoForAddress[msg.sender][stakeId_];\\n        info.withdrawnPoint = true;\\n\\n        uint256 timelock = info.timeToUnlock - info.stakingTime;\\n\\n        IPoints(pointAddress).mintPoints(\\n            msg.sender,\\n            pointRewards[timelock][0],\\n            pointRewards[timelock][1],\\n            pointRewards[timelock][2]\\n        );\\n    }\\n\\n    /** \\n    @dev Sets the bonus multipliers and the allowed locking durations\\n    @param durations_ an array of the allowed staking durations\\n    @param mutiplier_ the multiplier dor all staking durations\\n     */\\n    function setBonusMultiplier(uint256[] calldata durations_, uint256[] calldata mutiplier_)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < durations_.length; i++) {\\n            require(mutiplier_[i] >= DIVISOR, \\\"Invalid multiplier\\\");\\n            bonusTokenMultiplier[durations_[i]] = mutiplier_[i];\\n        }\\n    }\\n\\n    /** \\n    @dev Sets the point rewards and the allowed locking durations\\n    @param durations_ an array of the allowed staking durations\\n    @param rewardsPoints_ the multiplier dor all staking durations\\n     */\\n    function setPointReward(uint256 durations_, uint256[3] calldata rewardsPoints_)\\n        external\\n        onlyOwner\\n    {\\n        pointRewards[durations_] = [rewardsPoints_[0], rewardsPoints_[1], rewardsPoints_[2]];\\n    }\\n\\n    /** \\n    @dev Sets the min stake token for point and the allowed locking durations\\n    @param durations_ an array of the allowed staking durations\\n    @param amounts_ the multiplier dor all staking durations\\n     */\\n    function setMinStakeTokensForPoint(uint256[] calldata durations_, uint256[] calldata amounts_)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < durations_.length; i++) {\\n            minStakeTokensForPoint[durations_[i]] = amounts_[i];\\n        }\\n    }\\n\\n    /** \\n    @dev Sets the staking enabled flag\\n    @param stakingEnabled_ weather or not staking should be enabled\\n    */\\n    function setStakingEnabled(bool stakingEnabled_) external onlyOwner {\\n        stakingEnabled = stakingEnabled_;\\n    }\\n\\n    /** \\n    @dev Sets the new reward rate\\n    @param rewardRate_ the reward rate to set up\\n    */\\n    function setRewardRate(uint256 rewardRate_) external onlyOwner {\\n        require(rewardRate_ != 0, \\\"Cannot have reward Rate 0\\\");\\n        rewardRate = rewardRate_;\\n    }\\n\\n    /** \\n    @dev Transfer Point contract ownership\\n    @param newOwner_ new owner address\\n    */\\n    function transferPointOwnership(address newOwner_) external onlyOwner {\\n        require(newOwner_ != address(0), \\\"Cannot be address(0)\\\");\\n        IPoints(pointAddress).transferOwnership(newOwner_);\\n    }\\n\\n    /** \\n    @dev Add token rewards to contract\\n    @param amount_ the token amount for reward\\n    */\\n    function addTokenRewards(uint256 amount_) external {\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount_);\\n        totalRewardsLeft += amount_;\\n    }\\n\\n    /**\\n    @dev Returns all the user stakes\\n    @param userAddress_ returns all the user stakes\\n     */\\n    function getAllAddressStakes(address userAddress_) public view returns (StakingInfo[] memory) {\\n        StakingInfo[] memory stakings = new StakingInfo[](stakingNonce[userAddress_]);\\n        for (uint256 i = 0; i < stakingNonce[userAddress_]; i++) {\\n            StakingInfo memory staking = stakingInfoForAddress[userAddress_][i];\\n            if (staking.tokensStaked != 0) {\\n                stakings[i] = staking;\\n            }\\n        }\\n        return stakings;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/IPoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IPoints {\\n    function totalPoints() external view returns (uint256[3] memory);\\n\\n    function pointsOf(address account) external view returns (uint256[3] memory);\\n\\n    function transferPoints(\\n        address to,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external returns (bool);\\n\\n    function allowancePoints(address owner, address spender)\\n        external\\n        view\\n        returns (uint256[3] memory);\\n\\n    function approvePoints(\\n        address spender,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external returns (bool);\\n\\n    function mintPoints(\\n        address account,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external;\\n\\n    function burnPoints(\\n        address account,\\n        uint256 _itemPoints,\\n        uint256 _characterPoints,\\n        uint256 _landPoints\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"addTokenRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds_\",\"type\":\"uint256[]\"}],\"name\":\"batchGetPointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeIds_\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonusTokenMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeId_\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress_\",\"type\":\"address\"}],\"name\":\"getAllAddressStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeToUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensStakedWithBonus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"option\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawnPoint\",\"type\":\"bool\"}],\"internalType\":\"struct MCRTStaking.StakingInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId_\",\"type\":\"uint256\"}],\"name\":\"getPointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pointAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minStakeTokensForPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pTotalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pointRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"durations_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mutiplier_\",\"type\":\"uint256[]\"}],\"name\":\"setBonusMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"durations_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"setMinStakeTokensForPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durations_\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"rewardsPoints_\",\"type\":\"uint256[3]\"}],\"name\":\"setPointReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate_\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"stakingEnabled_\",\"type\":\"bool\"}],\"name\":\"setStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"option_\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingInfoForAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeToUnlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensStakedWithBonus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"option\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawnPoint\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStakedByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensStakedWithBonusByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensStakedWithBonusTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferPointOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueAddressesStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MCRTStaking", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}