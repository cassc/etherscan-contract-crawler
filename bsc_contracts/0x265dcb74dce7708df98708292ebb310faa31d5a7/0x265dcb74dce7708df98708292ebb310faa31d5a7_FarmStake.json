{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract FarmStake is Ownable {\r\n    // The CAKE TOKEN!\r\n    address public immutable lpToken;\r\n    address public immutable we2netToken;\r\n    address public immutable usdtToken;\r\n\r\n    // CAKE tokens created per day.\r\n    uint256 public rewardPerDay;\r\n    // Secends per day.\r\n    uint256 private constant secendsPerDay = 24*60*60;\r\n\r\n    // Info of pool.\r\n    uint256 public lastRewardTime; // Last reward time that CAKEs distribution occurs.\r\n    uint256 public accCakePerShare; // Accumulated CAKEs per share, times 1e12. See below.\r\n    uint256 private constant mathCalc = 1e12;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(address => uint256) public userAmount;// How many LP tokens the user has provided.\r\n    mapping(address => uint256) public userRewardDebt;\r\n    uint256 public totalStakedAmount;\r\n    // The timestamp when CAKE mining starts.\r\n    uint256 public startTime;\r\n    // The timestamp when CAKE mining ends.\r\n    uint256 public bonusEndTime;\r\n    //Allow to deposit.\r\n    bool public canDeposit = true;\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LiquidityHub: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    event Deposit(address indexed user, uint256 amount);\r\n    event ClaimReward(address indexed user, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 amount);\r\n    event ChangeDeposit(address indexed owner, bool canDeposit);\r\n    event AddLiquidity(address indexed user, uint256 we2netAmount, uint256 usdtAmount, uint256 lpAmount);\r\n    event RemoveLiquidity(address indexed user, uint256 we2netAmount, uint256 usdtAmount, uint256 lpAmount);\r\n\r\n    constructor(\r\n        address _lpToken,\r\n        address _we2netToken,\r\n        address _usdtToken,\r\n        uint256 _rewardPerDay,\r\n        uint256 _startTime,\r\n        uint256 _bonusEndTime\r\n    ) {\r\n        lpToken = _lpToken;\r\n        we2netToken = _we2netToken;\r\n        usdtToken = _usdtToken;\r\n        rewardPerDay = _rewardPerDay;\r\n        startTime = _startTime;\r\n        lastRewardTime = _startTime;\r\n        bonusEndTime = _bonusEndTime;\r\n    }\r\n\r\n    function setPoolInfo(uint256 _rewardPerDay, uint256 _bonusEndTime, bool _updatePoolOrNot) public onlyOwner {\r\n        require(lastRewardTime < _bonusEndTime, \"FarmStake: set bonusEndTime error.\");\r\n        if(_updatePoolOrNot) updatePool();\r\n        rewardPerDay = _rewardPerDay;\r\n        bonusEndTime = _bonusEndTime;\r\n    }\r\n\r\n    function setRewardPerDay(uint256 _rewardPerDay) public onlyOwner {\r\n        updatePool();\r\n        rewardPerDay = _rewardPerDay;\r\n    }\r\n\r\n    function setRewardEndTime(uint256 _bonusEndTime) public onlyOwner {\r\n        require(lastRewardTime < _bonusEndTime, \"FarmStake: set bonusEndTime error.\");\r\n        updatePool();\r\n        bonusEndTime = _bonusEndTime;\r\n    }\r\n\r\n    //Annualized Return:  12095 ==> 120.95%\r\n    function getAnnualizedReturn() public view returns (uint256)\r\n    {\r\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\r\n        uint256 we2netPool = IERC20(we2netToken).balanceOf(lpToken);\r\n        uint256 mathValue = totalStakedAmount * we2netPool * 2; // poolStakeValue = mathValue / totalSupply;\r\n        if(mathValue == 0) return 0;\r\n        uint256 rate = rewardPerDay * 3650000 * totalSupply / mathValue;\r\n        return rate;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256)\r\n    {\r\n        if(_to <= bonusEndTime) {\r\n            return (_to - _from);\r\n        } else if(_from >= bonusEndTime) {\r\n            return 0;\r\n        } else {\r\n            return (bonusEndTime - _from);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the farm's pool to be up-to-date.\r\n    function updatePool() public {\r\n        uint256 timestamp = block.timestamp;\r\n        if(timestamp <= lastRewardTime) {\r\n            return;\r\n        }\r\n        if(totalStakedAmount == 0) {\r\n            lastRewardTime = timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(lastRewardTime, timestamp);\r\n        uint256 cakeReward = multiplier * rewardPerDay / secendsPerDay;\r\n        accCakePerShare += cakeReward * mathCalc / totalStakedAmount;\r\n        lastRewardTime = timestamp;\r\n    }\r\n\r\n    // View function to see pending Reward on frontend.\r\n    function pendingReward(address _user) external view returns (uint256) {\r\n        uint256 cakePerShareCalc = accCakePerShare;\r\n        uint256 timestamp = block.timestamp;\r\n        if(timestamp > lastRewardTime && totalStakedAmount > 0) {\r\n            uint256 multiplier = getMultiplier(lastRewardTime, timestamp);\r\n            uint256 cakeReward = multiplier * rewardPerDay / secendsPerDay;\r\n            cakePerShareCalc += cakeReward * mathCalc / totalStakedAmount;\r\n        }\r\n        return (userAmount[_user] * cakePerShareCalc / mathCalc - userRewardDebt[_user]);\r\n    }\r\n\r\n    // Stake lp tokens to FarmStake contract\r\n    function deposit(uint256 _amount) public {\r\n        require(canDeposit, \"FarmStake: can not deposit.\");\r\n\r\n        updatePool();\r\n        if(userAmount[msg.sender] > 0) {\r\n            uint256 pending = userAmount[msg.sender] * accCakePerShare / mathCalc - userRewardDebt[msg.sender];\r\n            if(pending > 0) {\r\n                TransferHelper.safeTransfer(we2netToken, msg.sender, pending);\r\n                emit ClaimReward(msg.sender, pending);\r\n            }\r\n        }\r\n        if(_amount > 0) {\r\n            TransferHelper.safeTransferFrom(lpToken, msg.sender, address(this), _amount);\r\n            userAmount[msg.sender] += _amount;\r\n            totalStakedAmount += _amount;\r\n        }\r\n        userRewardDebt[msg.sender] = userAmount[msg.sender] * accCakePerShare / mathCalc;\r\n\r\n        emit Deposit(msg.sender, _amount);\r\n    }\r\n\r\n    function calcUsdt(address account) public view returns (uint256) {\r\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\r\n        uint256 usdtPool = IERC20(usdtToken).balanceOf(lpToken);\r\n        uint256 usdtAmount = (userAmount[account] * usdtPool * 2) / totalSupply;\r\n        return usdtAmount;\r\n    }\r\n\r\n    function calcTotalUsdt() public view returns (uint256) {\r\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\r\n        uint256 usdtPool = IERC20(usdtToken).balanceOf(lpToken);\r\n        uint256 usdtAmount = (totalStakedAmount * usdtPool * 2) / totalSupply;\r\n        return usdtAmount;\r\n    }\r\n\r\n    function calcOwnLpUsdt(address account) public view returns (uint256) {\r\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\r\n        uint256 usdtPool = IERC20(usdtToken).balanceOf(lpToken);\r\n        uint256 ownLpAmount = IERC20(lpToken).balanceOf(account);\r\n        uint256 usdtAmount = (ownLpAmount * usdtPool * 2) / totalSupply;\r\n        return usdtAmount;\r\n    }\r\n\r\n    function calcLpUsdt(uint256 lpAmount) public view returns (uint256) {\r\n        uint256 totalSupply = IERC20(lpToken).totalSupply();\r\n        uint256 usdtPool = IERC20(usdtToken).balanceOf(lpToken);\r\n        uint256 usdtAmount = (lpAmount * usdtPool * 2) / totalSupply;\r\n        return usdtAmount;\r\n    }\r\n\r\n    function changeDepositState(bool _canDeposit) public onlyOwner{\r\n        canDeposit = _canDeposit;\r\n\r\n        emit ChangeDeposit(msg.sender, _canDeposit);\r\n    }\r\n\r\n    function claimReward() public {\r\n        updatePool();\r\n        uint256 pending = userAmount[msg.sender] * accCakePerShare / mathCalc - userRewardDebt[msg.sender];\r\n        require(pending > 0, \"FarmStake: reward is null.\");\r\n        TransferHelper.safeTransfer(we2netToken, msg.sender, pending);\r\n        userRewardDebt[msg.sender] = userAmount[msg.sender] * accCakePerShare / mathCalc;\r\n\r\n        emit ClaimReward(msg.sender, pending);\r\n    }\r\n\r\n    // Withdraw SYRUP tokens from STAKING.\r\n    function withdraw(uint256 _amount) public {\r\n        require(userAmount[msg.sender] >= _amount, \"FarmStake: staking amount is not enough.\");\r\n        updatePool();\r\n        uint256 pending = userAmount[msg.sender] * accCakePerShare / mathCalc - userRewardDebt[msg.sender];\r\n        userAmount[msg.sender] -= _amount;\r\n        userRewardDebt[msg.sender] = userAmount[msg.sender] * accCakePerShare / mathCalc;\r\n        if(pending > 0) {\r\n            TransferHelper.safeTransfer(we2netToken, msg.sender, pending);\r\n            emit ClaimReward(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            TransferHelper.safeTransfer(lpToken, msg.sender, _amount);\r\n            totalStakedAmount -= _amount;\r\n        }\r\n\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() public {\r\n        uint256 trans_amount = userAmount[msg.sender];\r\n        require(trans_amount > 0, \"FarmStake: staking amount is null.\");\r\n        delete userAmount[msg.sender];\r\n        delete userRewardDebt[msg.sender];\r\n        totalStakedAmount -= trans_amount;\r\n        TransferHelper.safeTransfer(lpToken, msg.sender, trans_amount);\r\n\r\n        emit EmergencyWithdraw(msg.sender, trans_amount);\r\n    }\r\n\r\n    // Withdraw when EMERGENCY ONLY.\r\n    function emergencyWithdraw(address tokenAddr, uint256 amount) public onlyOwner {\r\n        if(tokenAddr == lpToken) {\r\n            require(amount <= IERC20(lpToken).balanceOf(address(this)) - totalStakedAmount, \"FarmStake: Permission Denied.\");\r\n        }\r\n        TransferHelper.safeTransfer(tokenAddr, msg.sender, amount);\r\n    }\r\n\r\n    function addLiquidity(\r\n        uint256 we2netDesired,\r\n        uint256 usdtDesired,\r\n        uint256 we2netMin,\r\n        uint256 usdtMin,\r\n        address to\r\n    ) public lock returns (uint256 lpAmount) {\r\n        (uint256 we2netAmount, uint256 usdtAmount) = calcAddLiquidityAmount(we2netDesired, usdtDesired, we2netMin, usdtMin);\r\n\r\n        TransferHelper.safeTransferFrom(we2netToken, msg.sender, address(this), we2netAmount);\r\n        TransferHelper.safeTransfer(we2netToken, lpToken, we2netAmount);\r\n        TransferHelper.safeTransferFrom(usdtToken, msg.sender, lpToken, usdtAmount);\r\n\r\n        lpAmount = IPancakePair(lpToken).mint(to);\r\n\r\n        emit AddLiquidity(msg.sender, we2netAmount, usdtAmount, lpAmount);\r\n    }\r\n\r\n    function removeLiquidity(uint256 amount) public lock {\r\n        require(IERC20(lpToken).balanceOf(msg.sender) >= amount, \"FarmStake: liquidity is not enough.\");\r\n\r\n        TransferHelper.safeTransferFrom(lpToken, msg.sender, lpToken, amount); // send liquidity to pair\r\n        (uint256 amount0, uint256 amount1) = IPancakePair(lpToken).burn(address(this));\r\n        if(we2netToken < usdtToken) {\r\n            TransferHelper.safeTransfer(we2netToken, msg.sender, amount0);\r\n            TransferHelper.safeTransfer(usdtToken, msg.sender, amount1);\r\n            emit RemoveLiquidity(msg.sender, amount0, amount1, amount);\r\n        } else {\r\n            TransferHelper.safeTransfer(we2netToken, msg.sender, amount1);\r\n            TransferHelper.safeTransfer(usdtToken, msg.sender, amount0);\r\n            emit RemoveLiquidity(msg.sender, amount1, amount0, amount);\r\n        }\r\n    }\r\n\r\n    function calcAddLiquidityAmount(\r\n        uint256 we2netDesired,\r\n        uint256 usdtDesired,\r\n        uint256 we2netMin,\r\n        uint256 usdtMin\r\n    ) public view returns (uint256 we2netAmount, uint256 usdtAmount) {\r\n        require(we2netDesired > 0 && usdtDesired > 0, \"FarmStake: INSUFFICIENT_AMOUNT\");\r\n\r\n        (uint112 reserveA, uint112 reserveB, ) = IPancakePair(lpToken).getReserves();\r\n        uint256 we2netReserve;\r\n        uint256 usdtReserve;\r\n        if(we2netToken < usdtToken) {\r\n            (we2netReserve, usdtReserve) = (reserveA, reserveB);\r\n        } else {\r\n            (we2netReserve, usdtReserve) = (reserveB, reserveA);\r\n        }\r\n        if(reserveA == 0 && reserveB == 0) {\r\n            (we2netAmount, usdtAmount) = (we2netDesired, usdtDesired);\r\n        } else {\r\n            require(reserveA > 0 && reserveB > 0, \"FarmStake: INSUFFICIENT_LIQUIDITY\");\r\n            uint256 usdtOptimal = we2netDesired * usdtReserve / we2netReserve;\r\n            if (usdtOptimal <= usdtDesired) {\r\n                require(usdtOptimal >= usdtMin, \"FarmStake: INSUFFICIENT_B_AMOUNT\");\r\n                (we2netAmount, usdtAmount) = (we2netDesired, usdtOptimal);\r\n            } else {\r\n                uint256 we2netOptimal = usdtDesired * we2netReserve / usdtReserve;\r\n                assert(we2netOptimal <= we2netDesired);\r\n                require(we2netOptimal >= we2netMin, \"FarmStake: INSUFFICIENT_A_AMOUNT\");\r\n                (we2netAmount, usdtAmount) = (we2netOptimal, usdtDesired);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_we2netToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"we2netAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"canDeposit\",\"type\":\"bool\"}],\"name\":\"ChangeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"we2netAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accCakePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"we2netDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"we2netMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"we2netDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"we2netMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtMin\",\"type\":\"uint256\"}],\"name\":\"calcAddLiquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"we2netAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"calcLpUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcOwnLpUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcTotalUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canDeposit\",\"type\":\"bool\"}],\"name\":\"changeDepositState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAnnualizedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_updatePoolOrNot\",\"type\":\"bool\"}],\"name\":\"setPoolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusEndTime\",\"type\":\"uint256\"}],\"name\":\"setRewardEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerDay\",\"type\":\"uint256\"}],\"name\":\"setRewardPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"we2netToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FarmStake", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000120053708799457bdfaa301f0278da5460c32624000000000000000000000000572c9ab47977d7d909572f3b8bce076a858a876300000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000021e19e0c9bab240000000000000000000000000000000000000000000000000000000000000644f01000000000000000000000000000000000000000000000000000000000066318600", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://defa1a6826156a4be71a44862c923053ed74267d23dd6e0529b936d51e15a20b"}