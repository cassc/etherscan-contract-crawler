{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-26\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract LDPToken is IERC20 {\r\n    string public name = \"LDP\";\r\n    string public symbol = \"LDP\";\r\n    uint8 public decimals = 18;\r\n    uint256 public fee = 6; \r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    address public pancakeAddress = 0xB5C8051A9387d163B952C01C8b279af3C617a8Cf;\r\n    address public feeAddress = 0xB5C8051A9387d163B952C01C8b279af3C617a8Cf;\r\n    address public owne;\r\n    address public recipient_address;\r\n    \r\n    constructor(uint256 initialSupply,address _zoology) {\r\n        _totalSupply = initialSupply * (10 ** uint256(decimals));\r\n        _balances[_zoology] = _totalSupply;    // 100%give zoology\r\n        owne = msg.sender;\r\n    }\r\n    \r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) external view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function _transfer(address _from, address recipient, uint256 _value) internal {\r\n        address sender =_from;\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_balances[sender] >= _value, \"ERC20: transfer amount exceeds balance\");\r\n        recipient_address = recipient;\r\n      if(pancakeAddress == recipient){\r\n           uint256 feeprice = 0;\r\n           uint256 account = 0;\r\n           feeprice = _value*fee/100;\r\n           account = _value - feeprice;\r\n          _transferFree(sender,feeAddress,feeprice);\r\n          _transferFree(sender,recipient,account);\r\n        } else {\r\n          _balances[sender] -= _value;\r\n          _balances[recipient] += _value;\r\n          emit Transfer(sender, recipient, _value);\r\n        }\r\n    }\r\n    function transfer(address recipient, uint256 _value) external override returns (bool) {\r\n        address sender = msg.sender;\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_balances[sender] >= _value, \"ERC20: transfer amount exceeds balance\");\r\n       _transfer(sender, recipient, _value);\r\n       return true;\r\n    }\r\n    \r\n    function _transferFree(address _from, address _to, uint _value) internal {\r\n        require(_balances[_from] >= _value, \"ERC20: transfer amount exceeds balance\");\r\n        require(_balances[_to] + _value >= _balances[_to]);\r\n        uint previousBalances = _balances[_from] + _balances[_to];\r\n        _balances[_from] -= _value;\r\n        _balances[_to] += _value;\r\n        assert(_balances[_from] + _balances[_to] == previousBalances);   \r\n        emit Transfer(_from, _to, _value);\r\n    \r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        address owner = msg.sender;\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        address owner = sender;\r\n        require(owner != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_balances[owner] >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(_allowances[owner][msg.sender] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function transferAddress(address _pancake) public returns (bool success) {\r\n        require(msg.sender == owne); \r\n        pancakeAddress = _pancake;\r\n        return true;\r\n    }\r\n    function onlyAdmin() public returns (bool success) {\r\n        require(msg.sender == owne); \r\n        owne = 0x0000000000000000000000000000000000000000;\r\n        return true;\r\n    }\r\n    function transferArray(address[] calldata _to, uint256[] calldata _value) public returns (bool success) {\r\n        address sender = msg.sender;\r\n        for(uint256 i = 0; i < _to.length; i++){\r\n            require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n            require(_balances[sender] >= _value[i], \"ERC20: transfer amount exceeds balance\");\r\n            _transfer(msg.sender, _to[i], _value[i]);\r\n        }\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_zoology\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancake\",\"type\":\"address\"}],\"name\":\"transferAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"transferArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LDPToken", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000001406f40000000000000000000000000e1f7c02565ce6b4f472bd1e42a9a332dc244f496", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://173f35e568d5fef8756c55ed7dadcdc956cdbbcc44a0b4c9221360e2f144a1c6"}