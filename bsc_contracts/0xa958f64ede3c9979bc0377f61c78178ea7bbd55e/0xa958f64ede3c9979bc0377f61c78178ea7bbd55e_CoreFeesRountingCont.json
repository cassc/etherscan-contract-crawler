{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Cfrc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"./Nft.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\n\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n   \\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n        \\r\\n}\\r\\n\\r\\ncontract CoreFeesRountingContract is IERC721Receiver,Context,Ownable,ReentrancyGuard{\\r\\n   \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // pancakeswap\\r\\n    IPancakeRouter01 private pancakeV2Router;\\r\\n    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n    address public targetToken; \\r\\n    \\r\\n\\r\\n    uint public platformFee = 15; \\r\\n    uint public carbonPlatformFee = 10;\\r\\n    uint public  resale_platfromFee = 3; // the fee percentage on sales \\r\\n    uint256 public resale_royaltyFee = 5; // Percentage of sale price to be taken as royalty by the original creator of the NFT\\r\\n    uint public itemCount;\\r\\n\\r\\n\\r\\n    uint public totalPlatformFee; \\r\\n    bool public platformFeeFlag = true;\\r\\n    \\r\\n    address public platformFeeWallet;\\r\\n    address public cccWallet;\\r\\n\\r\\n    address public carbonAddress;\\r\\n\\r\\n\\r\\n    mapping (address => bool) public Tokens;\\r\\n\\r\\n    BCCarbonCredit CarbonCredit;\\r\\n\\r\\n    \\r\\n    mapping(address => bool) private _isBlacklisted;\\r\\n\\r\\n    mapping (address => bool) public whitelistedNftContracts; \\r\\n\\r\\n\\r\\n\\r\\n    bool public _directTransferFlag = true ;\\r\\n    bool public _orderPaymentFlag = true;\\r\\n\\r\\n\\r\\n    // transaction details \\r\\n    struct OrderDetails { \\r\\n            uint product_id;\\r\\n            address from_address;\\r\\n            address to_address;\\r\\n            uint amount;\\r\\n            uint plantform_fee;\\r\\n    }\\r\\n\\r\\n    struct OrderCarbonDetails { \\r\\n            uint project_id;\\r\\n            address cpo_address;\\r\\n            address buyer_address;\\r\\n            uint total_amount;\\r\\n            uint platform_fee;\\r\\n            uint platfrom_fee_amount;\\r\\n            uint tonnes;\\r\\n            uint no_of_nft;\\r\\n            uint price;\\r\\n            bool new_item;\\r\\n            uint item_id;\\r\\n            bool mintDelayFlag;\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    mapping(string => OrderCarbonDetails[]) private mintLaterOrderDetails;\\r\\n    \\r\\n    \\r\\n    struct WithoutWalletOrderCarbonDetails { \\r\\n            uint project_id;\\r\\n            address cpo_address;\\r\\n            uint buyer_id;\\r\\n            address buyer_address;\\r\\n            uint total_tonnes;\\r\\n            uint no_of_nft;\\r\\n            uint tonnes_for_specified_nft;\\r\\n            uint no_of_nft_for_specified_tonnes;\\r\\n            uint total_specified_tonnes;\\r\\n            uint remaining_tonnes;\\r\\n            bool is_minted;\\r\\n    }\\r\\n    mapping(string => WithoutWalletOrderCarbonDetails[]) private withoutWalletMintLaterOrderDetails;\\r\\n\\r\\n    // mint without wallet \\r\\n\\r\\n    mapping(uint256 => address)  private userWallet ;\\r\\n\\r\\n     // Function to set a user's wallet address\\r\\n    event setUserWalletEvent(uint256 userId, address walletAddress);\\r\\n\\r\\n    function setUserWallet(uint256 userId, address walletAddress) public onlyOwner{\\r\\n        userWallet[userId] = walletAddress;\\r\\n        emit setUserWalletEvent(userId,walletAddress);\\r\\n    }\\r\\n\\r\\n    // Function to get a user's wallet address\\r\\n    function getUserWallet(uint256 userId) public view returns (address) {\\r\\n        return userWallet[userId];\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => uint256) private nftUser;\\r\\n\\r\\n    // Function to associate a user with an NFT token ID\\r\\n    event setUserNftEvent(uint256 tokenId, uint256 userId);\\r\\n\\r\\n    function setUserOfNFT(uint256 tokenId, uint256 userId) public onlyOwner {\\r\\n        nftUser[tokenId] = userId;\\r\\n        emit setUserNftEvent(tokenId,userId);\\r\\n    }\\r\\n\\r\\n    // Function to retrieve the user associated with an NFT token ID\\r\\n    function getUserOfNFT(uint256 tokenId) public view returns (uint256) {\\r\\n        return nftUser[tokenId];\\r\\n    }\\r\\n\\r\\n\\r\\n    // #########################################\\r\\n\\r\\n\\r\\n\\r\\n    struct Item {\\r\\n        uint itemId;\\r\\n        IERC721 nft;\\r\\n        uint tokenId;\\r\\n        uint price;\\r\\n        address payable seller;\\r\\n        address payable owner;\\r\\n        address payable cpo;\\r\\n        bool sold;\\r\\n    }\\r\\n\\r\\n    // itemId -> Item\\r\\n    mapping(uint => Item) public items;\\r\\n\\r\\n    event Offered(uint itemId,address indexed nft,uint tokenId,uint price,address indexed seller);\\r\\n\\r\\n    event RevokeOffered(uint itemId,address indexed nft,uint tokenId,uint price,address indexed seller);\\r\\n \\r\\n    event Bought(uint itemId,address indexed nft,uint tokenId,uint price,address indexed seller,address indexed buyer);\\r\\n\\r\\n    event OrderDetailsToWalletEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 value_after_convertion,uint256 platformfee_value,uint256 value_after_platformfee,OrderDetails order_details);\\r\\n    event OrderDetailsToBagEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 value_after_convertion,uint256 platformfee_value,uint256 value_after_platformfee,OrderDetails order_details);\\r\\n\\r\\n    event OrderCarbonDetailsToWalletEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 value_after_convertion,uint256 royalty_value,uint256 platformfee_value,uint256 value_after_platformfee,OrderCarbonDetails order_details);\\r\\n    event OrderCarbonDetailsToBagEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 value_after_convertion,uint256 royalty_value,uint256 platformfee_value,uint256 value_after_platformfee,OrderCarbonDetails order_details);\\r\\n    event RetairCarbonNftEvent(address indexed nft,uint tokenId,address indexed owner);\\r\\n\\r\\n    event NftRecevied(address operator,address from,uint256 tokenId);\\r\\n\\r\\n\\r\\n    // ################\\r\\n    address public treasury = 0xd3163724D1AB51468c1917CCf8B66E6C4d3c580A;\\r\\n\\r\\n\\r\\n    \\r\\n    \\r\\n    \\r\\n    \\r\\n    event TransferAllTokenToTreasuryEvent(address indexed token,address indexed treasury, uint256 value,uint256 timestamp);\\r\\n\\r\\n    event DirectTransferEvent(address indexed token,address indexed from, address indexed to,uint256 actual_value ,uint256 value_after_deduction,uint256 value_after_platformfee,uint256 platformfee_value);\\r\\n    event DirectTransferEvent2(address indexed token,address indexed from, address indexed to,uint256 actual_value ,uint256 value_after_platformfee,uint256 platformfee_value);\\r\\n\\r\\n    event MintNowEvent(string order_id,uint project_id);\\r\\n\\r\\n    event addMintLaterEvent(string order_id,OrderCarbonDetails order);\\r\\n    event MintNftEvent(uint256[] nftId);\\r\\n\\r\\n\\r\\n  \\r\\n    constructor(address token,address _platformFeeWallet, address _cccWallet,address _carbonAddress){\\r\\n        targetToken = token;\\r\\n        platformFeeWallet = _platformFeeWallet;\\r\\n        cccWallet = _cccWallet;\\r\\n        carbonAddress = _carbonAddress;\\r\\n        whitelistedNftContracts[carbonAddress] = true;\\r\\n        CarbonCredit = BCCarbonCredit(_carbonAddress);\\r\\n        Tokens[targetToken] = true;\\r\\n        pancakeV2Router = IPancakeRouter01(routerAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n      // whitlist nft contract address \\r\\n    function whitelistNftContract(address _contractAddress,bool _flag) public onlyOwner {\\r\\n        whitelistedNftContracts[_contractAddress] = _flag;\\r\\n    }\\r\\n\\r\\n    function setRoyaltyFee(uint256 _fee) public onlyOwner {\\r\\n        require(_fee < 100, \\\"Royalty fee cannot be greater than 100%.\\\");\\r\\n        resale_royaltyFee = _fee;\\r\\n    }\\r\\n\\r\\n     function setResalePlatformFeePercentage(uint _platfromFee) external onlyOwner{\\r\\n        require(_platfromFee < 100, \\\"platform fee cannot be greater than 100%.\\\");\\r\\n        resale_platfromFee = _platfromFee;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function setPlatformFeeWalletAddress(address _platformFeeWallet) external onlyOwner {\\r\\n        platformFeeWallet = _platformFeeWallet;\\r\\n    }\\r\\n\\r\\n    function setCccWalletAddress(address _cccWallet) external onlyOwner {\\r\\n        cccWallet = _cccWallet;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setCarbonAddress(address _carbonAddress) external onlyOwner {\\r\\n        carbonAddress = _carbonAddress;\\r\\n        CarbonCredit = BCCarbonCredit(_carbonAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function setTargetAddress(address target_adr) external onlyOwner {\\r\\n        targetToken = target_adr;\\r\\n        Tokens[targetToken] = true;\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    modifier AllowedTokenCheck(IBEP20 _token){\\r\\n        require(Tokens[address(_token)],'This Token is not allowed to deposit and withdraw.');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setPlatformFee(uint _platformFee) external onlyOwner {\\r\\n        platformFee = _platformFee;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function setPlatformFeeFlag(bool _platformFeeFlag) external onlyOwner {\\r\\n        platformFeeFlag = _platformFeeFlag;\\r\\n    }\\r\\n    \\r\\n    function setDirectTransferFlag(bool _bool) external onlyOwner {\\r\\n        _directTransferFlag = _bool;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setOrderPaymentFlagFlag(bool _bool) external onlyOwner {\\r\\n        _orderPaymentFlag = _bool;\\r\\n    }\\r\\n\\r\\n    function setAddressIsBlackListed(address _address, bool _bool) external onlyOwner {\\r\\n        _isBlacklisted[_address] = _bool;\\r\\n    }\\r\\n\\r\\n    function viewIsBlackListed(address _address) public view returns(bool) {\\r\\n        return _isBlacklisted[_address];\\r\\n    }\\r\\n\\r\\n    function allowedTokens(address _token,bool _flag) public onlyOwner{\\r\\n        Tokens[_token] = _flag;\\r\\n    }\\r\\n    \\r\\n    function TransferAllTokenToTreasury(IBEP20 _token) public onlyOwner AllowedTokenCheck(_token){\\r\\n\\r\\n        uint _contract_balance = _token.balanceOf(address(this));\\r\\n        require(_contract_balance > 0, \\\"Contract not have any token balance to transfer.\\\");\\r\\n        \\r\\n        _token.transfer(treasury, _contract_balance);\\r\\n        emit TransferAllTokenToTreasuryEvent(address(_token),treasury, _contract_balance,block.timestamp);\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n    function swapTokenForTargetToken(IBEP20 from_token,uint amountIn) private {\\r\\n     \\r\\n        address[] memory path;\\r\\n\\r\\n\\r\\n        if (address(from_token) == pancakeV2Router.WETH()) {\\r\\n            path = new address[](2);\\r\\n            path[0] = address(from_token);\\r\\n            path[1] = address(targetToken);\\r\\n        \\r\\n        pancakeV2Router.swapExactETHForTokens{value: amountIn}(0,path,address(this),block.timestamp);\\r\\n        } else {\\r\\n            path = new address[](3); \\r\\n            path[0] = address(from_token);\\r\\n            path[1] = pancakeV2Router.WETH();\\r\\n            path[2] = address(targetToken);\\r\\n\\r\\n        from_token.transferFrom(msg.sender,address(this), amountIn);\\r\\n        from_token.approve(address(pancakeV2Router), amountIn);\\r\\n        pancakeV2Router.swapExactTokensForTokens(amountIn,1,path,address(this),block.timestamp);\\r\\n        }\\r\\n   \\r\\n    }\\r\\n\\r\\n    function PaymentTransfer(IBEP20 _token,address _address,uint _amount) public payable AllowedTokenCheck(_token){\\r\\n        require(_amount > 0, \\\"You need at least some tokens\\\");\\r\\n        require(_directTransferFlag,\\\"Direct Transfer is not allowed\\\");\\r\\n        require(!_isBlacklisted[msg.sender],\\\"Your Address is blacklisted\\\");\\r\\n        require(!_isBlacklisted[_address],\\\"Receiver Address is blacklisted\\\");\\r\\n\\r\\n        IBEP20 _target_token = IBEP20(targetToken);\\r\\n        \\r\\n        uint _before_token_balance = _target_token.balanceOf(address(this));\\r\\n\\r\\n        if(targetToken != address(_token)){\\r\\n            swapTokenForTargetToken(_token,_amount);\\r\\n           \\r\\n        }else{\\r\\n        _token.transferFrom(msg.sender,address(this), _amount);\\r\\n        }\\r\\n   \\r\\n\\r\\n        uint _after_token_balance = _target_token.balanceOf(address(this));\\r\\n\\r\\n        uint _new_amount = _after_token_balance.sub(_before_token_balance);\\r\\n        uint _platformfee_value =0;\\r\\n\\r\\n        if(platformFeeFlag){\\r\\n        _platformfee_value = _new_amount.mul(platformFee).div(1000);\\r\\n        totalPlatformFee.add(_platformfee_value);\\r\\n        _target_token.transfer(platformFeeWallet, _platformfee_value);\\r\\n        }\\r\\n        \\r\\n        uint _transfer_value = _new_amount.sub(_platformfee_value);\\r\\n\\r\\n\\r\\n        _target_token.transfer(_address, _transfer_value);  \\r\\n        emit DirectTransferEvent(address(_token),msg.sender,_address,_amount,_new_amount,_transfer_value,_platformfee_value);\\r\\n    }\\r\\n    \\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n\\r\\n       // Make item to offer on the marketplace\\r\\n    function makeItem(IERC721 _nft, uint _tokenId, uint _price,address _cpo) external nonReentrant {\\r\\n        require(whitelistedNftContracts[address(_nft)], \\\"This nft contract is not allowed.\\\");\\r\\n        require(_cpo != address(0), \\\"Cpo address cont be empty\\\");\\r\\n        require(_price > 0, \\\"Price must be greater than zero\\\");\\r\\n        // increment itemCount\\r\\n        itemCount ++;\\r\\n        // transfer nft\\r\\n        _nft.transferFrom(msg.sender, address(this), _tokenId);\\r\\n        // add new item to items mapping\\r\\n        items[itemCount] = Item (\\r\\n            itemCount,\\r\\n            _nft,\\r\\n            _tokenId,\\r\\n            _price,\\r\\n            payable(msg.sender),\\r\\n            payable(address(this)),\\r\\n            payable(_cpo),\\r\\n            false\\r\\n        );\\r\\n        // emit Offered event\\r\\n        emit Offered(\\r\\n            itemCount,\\r\\n            address(_nft),\\r\\n            _tokenId,\\r\\n            _price,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    function revokeItem(uint256 _itemId, uint256 price) public payable nonReentrant {\\r\\n        require(_itemId > 0 && _itemId <= itemCount, \\\"item doesn't exist\\\");\\r\\n        require(\\r\\n            items[_itemId].seller == msg.sender,\\r\\n            \\\"Only item owner can perform this operation\\\"\\r\\n        );\\r\\n        items[_itemId].sold = true;\\r\\n        items[_itemId].price = price;\\r\\n        items[_itemId].seller = payable(msg.sender);\\r\\n        items[_itemId].owner = payable(msg.sender);\\r\\n\\r\\n        // transfer nft\\r\\n        items[_itemId].nft.transferFrom(address(this), msg.sender, items[_itemId].tokenId);\\r\\n\\r\\n        emit RevokeOffered(\\r\\n            _itemId,\\r\\n            address(items[_itemId].nft),\\r\\n            items[_itemId].tokenId,\\r\\n            price,\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\nfunction OrderPaymentToWallet(IBEP20 _token, string memory order_id, OrderDetails[] memory orders) public payable AllowedTokenCheck(_token) {\\r\\n    processOrder(_token, order_id, orders, true);\\r\\n}\\r\\n\\r\\nfunction OrderPaymentToBag(IBEP20 _token, string memory order_id, OrderDetails[] memory orders) public payable AllowedTokenCheck(_token) {\\r\\n    processOrder(_token, order_id, orders, false);\\r\\n}\\r\\n\\r\\nfunction calculateTokenTransferToContract(IBEP20 _target_token,IBEP20 _input_token,uint256 amount) internal returns(uint256){\\r\\n     uint _before_token_balance = _target_token.balanceOf(address(this));\\r\\n\\r\\n        if (targetToken != address(_input_token)) {\\r\\n            swapTokenForTargetToken(_input_token, amount);\\r\\n        } else {\\r\\n            _input_token.transferFrom(msg.sender, address(this), amount);\\r\\n        }\\r\\n\\r\\n        uint _after_token_balance = _target_token.balanceOf(address(this));\\r\\n\\r\\n        uint _new_amount = _after_token_balance.sub(_before_token_balance);\\r\\n\\r\\n        return _new_amount;\\r\\n\\r\\n}\\r\\n\\r\\nfunction processOrder(IBEP20 _token, string memory order_id, OrderDetails[] memory orders, bool toWallet) internal {\\r\\n    require(_orderPaymentFlag, \\\"order payment is not allowed\\\");\\r\\n    require(!_isBlacklisted[msg.sender], \\\"Your Address is blacklisted\\\");\\r\\n\\r\\n    IBEP20 _target_token = IBEP20(targetToken);\\r\\n\\r\\n    for (uint i = 0; i < orders.length; i++) {\\r\\n        \\r\\n\\r\\n        uint _new_amount = calculateTokenTransferToContract(_target_token,_token,orders[i].amount);\\r\\n\\r\\n        uint total_share = 100 + orders[i].plantform_fee;\\r\\n        uint originalPrice = (_new_amount * 100) / total_share;\\r\\n        uint platformFeeAmount = _new_amount - originalPrice;\\r\\n\\r\\n        totalPlatformFee.add(platformFeeAmount);\\r\\n        if (toWallet) {\\r\\n            _target_token.transfer(platformFeeWallet, platformFeeAmount);\\r\\n        } else {\\r\\n            _target_token.transfer(cccWallet, originalPrice);\\r\\n        }\\r\\n\\r\\n        OrderDetails memory order = orders[i];\\r\\n\\r\\n        if (toWallet) {\\r\\n            emit OrderDetailsToWalletEvent(address(_token), msg.sender, orders[i].to_address, order_id, _new_amount, platformFeeAmount, originalPrice, order);\\r\\n        } else {\\r\\n            emit OrderDetailsToBagEvent(address(_token), msg.sender, orders[i].to_address, order_id, _new_amount, platformFeeAmount, originalPrice, order);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction processCarbonOrder(IBEP20 _token,string memory order_id,OrderCarbonDetails[] memory orders,address _target_token,address _platformFeeWallet,bool isBagCarbon) internal {\\r\\n    require(_orderPaymentFlag, \\\"Order payment is not allowed\\\");\\r\\n    require(!_isBlacklisted[msg.sender], \\\"Your Address is blacklisted\\\");\\r\\n\\r\\n    address input_token = address(_token);\\r\\n    string memory _order_id = order_id;\\r\\n\\r\\n    for (uint i = 0; i < orders.length; i++) {\\r\\n\\r\\n        uint _new_amount = calculateTokenTransferToContract(IBEP20(_target_token),_token,orders[i].total_amount);\\r\\n\\r\\n\\r\\n        OrderCarbonDetails memory order = orders[i];\\r\\n\\r\\n        if (order.new_item) {\\r\\n            uint total_share = 100 + carbonPlatformFee;\\r\\n            uint originalPrice = (_new_amount * 100) / total_share;\\r\\n            uint platformFeeAmount = _new_amount - originalPrice;\\r\\n            totalPlatformFee.add(platformFeeAmount);\\r\\n\\r\\n            if (isBagCarbon) {\\r\\n                IBEP20(_target_token).transfer(cccWallet, originalPrice);\\r\\n            } else {\\r\\n                IBEP20(_target_token).transfer(_platformFeeWallet, platformFeeAmount);\\r\\n                IBEP20(_target_token).transfer(order.cpo_address, originalPrice);\\r\\n                if (order.mintDelayFlag) {\\r\\n                    mintLaterOrderDetails[order_id].push(order);\\r\\n                } else {\\r\\n                    CarbonCredit.ContractMint(\\r\\n                        _order_id,\\r\\n                        order.buyer_address,\\r\\n                        order.cpo_address,\\r\\n                        order.project_id,\\r\\n                        order.tonnes,\\r\\n                        order.no_of_nft,\\r\\n                        order.price\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            emit OrderCarbonDetailsToWalletEvent(\\r\\n                input_token,\\r\\n                msg.sender,\\r\\n                order.cpo_address,\\r\\n                _order_id,\\r\\n                _new_amount,\\r\\n                0,\\r\\n                platformFeeAmount,\\r\\n                originalPrice,\\r\\n                order\\r\\n            );\\r\\n        } else {\\r\\n            Item storage item = items[order.item_id];\\r\\n            require(order.item_id > 0 && order.item_id <= itemCount, \\\"Item doesn't exist\\\");\\r\\n            require(!item.sold, \\\"Item already sold\\\");\\r\\n            uint total_share = 100 + resale_royaltyFee + resale_platfromFee;\\r\\n            uint originalPrice = (_new_amount * 100) / total_share;\\r\\n            uint royaltyAmount = (_new_amount * resale_royaltyFee) / total_share;\\r\\n            uint platformFeeAmount = _new_amount - originalPrice - royaltyAmount;\\r\\n            IBEP20(_target_token).transfer(address(item.seller), originalPrice);\\r\\n\\r\\n            if (!isBagCarbon && resale_platfromFee > 0) {\\r\\n                IBEP20(_target_token).transfer(_platformFeeWallet, platformFeeAmount);\\r\\n            }\\r\\n\\r\\n            if (!isBagCarbon && resale_royaltyFee > 0) {\\r\\n                IBEP20(_target_token).transfer(item.cpo, royaltyAmount);\\r\\n            }\\r\\n\\r\\n            item.sold = true;\\r\\n            item.owner = payable(msg.sender);\\r\\n            item.nft.transferFrom(address(this), msg.sender, item.tokenId);\\r\\n            emit Bought(\\r\\n                item.itemId,\\r\\n                address(item.nft),\\r\\n                item.tokenId,\\r\\n                item.price,\\r\\n                item.seller,\\r\\n                msg.sender\\r\\n            );\\r\\n\\r\\n            emit OrderCarbonDetailsToWalletEvent(\\r\\n                input_token,\\r\\n                msg.sender,\\r\\n                item.seller,\\r\\n                _order_id,\\r\\n                _new_amount,\\r\\n                royaltyAmount,\\r\\n                platformFeeAmount,\\r\\n                originalPrice,\\r\\n                order\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction OrderPaymentToWalletCarbon(IBEP20 _token, string memory order_id, OrderCarbonDetails[] memory orders) public payable AllowedTokenCheck(_token) {\\r\\n    processCarbonOrder(_token, order_id, orders, address(targetToken), platformFeeWallet, false);\\r\\n}\\r\\n\\r\\nfunction OrderPaymentToBagCarbon(IBEP20 _token, string memory order_id, OrderCarbonDetails[] memory orders) public payable AllowedTokenCheck(_token) {\\r\\n    processCarbonOrder(_token, order_id, orders, cccWallet, cccWallet, true);\\r\\n}\\r\\n\\r\\n\\r\\nfunction RetireCarbonNft(uint tokenId) public{\\r\\n    CarbonCredit.retire(tokenId);\\r\\n    emit RetairCarbonNftEvent(carbonAddress,tokenId,msg.sender);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function BagOrderPaymentNftTransfer(uint itemId,address _to ) external onlyOwner {\\r\\n        Item storage item = items[itemId];\\r\\n        require(item.itemId > 0 && item.itemId <= itemCount, \\\"item doesn't exist\\\");\\r\\n        require(!item.sold, \\\"item already sold\\\");\\r\\n\\r\\n        // update item to sold\\r\\n        item.sold = true;\\r\\n        // update new owner \\r\\n        item.owner = payable(_to);\\r\\n        // transfer nft to buyer\\r\\n        item.nft.transferFrom(address(this), _to, item.tokenId);\\r\\n        // emit Bought event\\r\\n        emit Bought(\\r\\n            item.itemId,\\r\\n            address(item.nft),\\r\\n            item.tokenId,\\r\\n            item.price,\\r\\n            item.seller,\\r\\n            _to);\\r\\n    }\\r\\n\\r\\n\\r\\n    // Function to get OrderCarbonDetails matching the product_id\\r\\n    function getOrderCarbonDetails(string memory order_id, uint project_id)\\r\\n        public\\r\\n        view\\r\\n        returns (OrderCarbonDetails memory)\\r\\n    {\\r\\n        OrderCarbonDetails[] memory orderDetailsList = mintLaterOrderDetails[order_id];\\r\\n        for (uint i = 0; i < orderDetailsList.length; i++) {\\r\\n            if (orderDetailsList[i].project_id == project_id) {\\r\\n                return orderDetailsList[i];\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Product ID not found in the order\\\");\\r\\n    }\\r\\n\\r\\n    \\r\\n    function addMintLater(string memory order_id,OrderCarbonDetails memory order) external onlyOwner {\\r\\n            mintLaterOrderDetails[order_id].push(order);\\r\\n            emit addMintLaterEvent(order_id,order);\\r\\n    }\\r\\n\\r\\n    event withoutWalletOrderEvent(uint256 user_id,string order_id,uint256 project_id,address to,address cpo_address , uint256 tonnes,uint256 no_of_nft,uint256[] nftList);\\r\\n\\r\\n    function withoutWalletOrder(uint256 user_id,string memory order_id,uint256 project_id,address to,address cpo_address , uint256 tonnes,uint256 no_of_nft)  external onlyOwner{\\r\\n\\r\\n        uint256[] memory nftlist = CarbonCredit.withoutWalletMint(order_id,user_id,to,cpo_address, project_id, tonnes, no_of_nft);\\r\\n        \\r\\n        userWallet[user_id];\\r\\n        for (uint i = 0; i < nftlist.length; i++) {\\r\\n             nftUser[nftlist[i]] = user_id;            \\r\\n        }\\r\\n        emit withoutWalletOrderEvent(user_id,order_id,project_id,to,cpo_address,tonnes,no_of_nft,nftlist);\\r\\n\\r\\n    }\\r\\n\\r\\n    function withoutWalletPostMintingOrder(string memory order_id,WithoutWalletOrderCarbonDetails[] memory orders) external onlyOwner{\\r\\n        for (uint i=0; i<orders.length; i++) {\\r\\n            WithoutWalletOrderCarbonDetails memory order = orders[i];\\r\\n            withoutWalletMintLaterOrderDetails[order_id].push(order);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWithoutWalletOrderCarbonDetails(string memory order_id, uint project_id) public view returns (uint ,WithoutWalletOrderCarbonDetails memory)\\r\\n    {\\r\\n        WithoutWalletOrderCarbonDetails[] memory orderDetailsList = withoutWalletMintLaterOrderDetails[order_id];\\r\\n        for (uint i = 0; i < orderDetailsList.length; i++) {\\r\\n            if (orderDetailsList[i].project_id == project_id) {\\r\\n            return (i, orderDetailsList[i]);\\r\\n            }\\r\\n        }\\r\\n        revert(\\\"Product ID not found in the order\\\");\\r\\n    }\\r\\n    \\r\\n    function withoutWalletMintNow(string memory order_id,uint project_id,uint specific_tonnes_per_nft ,uint no_of_nfts_for_specific,uint remaining_tonnes) public{\\r\\n        require(bytes(order_id).length > 0, \\\"Order ID cannot be empty\\\");\\r\\n        (uint index, WithoutWalletOrderCarbonDetails memory order) = getWithoutWalletOrderCarbonDetails(order_id, project_id);\\r\\n        require(userWallet[order.buyer_id] == msg.sender, \\\"You are not owner of this order\\\");\\r\\n        require(!order.is_minted, \\\"You already minted NFT\\\");\\r\\n        uint no_of_nft  = no_of_nfts_for_specific;\\r\\n        uint total_tonnes_allowed = (specific_tonnes_per_nft * no_of_nfts_for_specific) + remaining_tonnes ;\\r\\n        require(total_tonnes_allowed == order.total_tonnes, \\\"You are not allowed to mint this much of tonnes\\\");\\r\\n        \\r\\n        address user_address  = userWallet[order.buyer_id];\\r\\n        \\r\\n        uint256[] memory nftlist;\\r\\n        nftlist = CarbonCredit.withoutWalletMint(order_id,order.buyer_id,user_address,order.cpo_address, project_id,specific_tonnes_per_nft, no_of_nfts_for_specific);\\r\\n        emit withoutWalletOrderEvent(order.buyer_id,order_id,project_id,user_address,order.cpo_address,specific_tonnes_per_nft,no_of_nfts_for_specific,nftlist);\\r\\n\\r\\n        if(remaining_tonnes > 0){\\r\\n        nftlist = CarbonCredit.withoutWalletMint(order_id,order.buyer_id,user_address,order.cpo_address, project_id,remaining_tonnes, 1);\\r\\n        emit withoutWalletOrderEvent(order.buyer_id,order_id,project_id,user_address,order.cpo_address,remaining_tonnes,1,nftlist);\\r\\n        no_of_nft += 1 ;\\r\\n\\r\\n        }\\r\\n\\r\\n        // update order \\r\\n        WithoutWalletOrderCarbonDetails storage orderUpdate = withoutWalletMintLaterOrderDetails[order_id][index];\\r\\n        orderUpdate.is_minted = true;\\r\\n        orderUpdate.buyer_address = user_address;\\r\\n        orderUpdate.no_of_nft_for_specified_tonnes = no_of_nfts_for_specific;\\r\\n        orderUpdate.tonnes_for_specified_nft = specific_tonnes_per_nft;\\r\\n        orderUpdate.total_specified_tonnes = specific_tonnes_per_nft * no_of_nfts_for_specific;\\r\\n        orderUpdate.remaining_tonnes = remaining_tonnes;\\r\\n        orderUpdate.no_of_nft = no_of_nft;\\r\\n        \\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function MintNow(string memory order_id,uint project_id) public  {\\r\\n        require(bytes(order_id).length > 0, \\\"Order ID cannot be empty\\\");\\r\\n        OrderCarbonDetails memory order = getOrderCarbonDetails(order_id,project_id);\\r\\n\\r\\n        require(order.buyer_address == msg.sender, \\\"You are not owner this order \\\");\\r\\n        \\r\\n        // Call CarbonCredit contract to mint the NFT\\r\\n        CarbonCredit.ContractMint(\\r\\n            order_id,\\r\\n            order.buyer_address,\\r\\n            order.cpo_address,\\r\\n            order.project_id,\\r\\n            order.tonnes,\\r\\n            order.no_of_nft,\\r\\n            order.price\\r\\n        );\\r\\n        \\r\\n        // Emit event\\r\\n        emit MintNowEvent(order_id,project_id);\\r\\n    }\\r\\n\\r\\n     function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {\\r\\n        // Print a \\\"Hello\\\" message\\r\\n        // You can't actually print messages in Solidity,\\r\\n        // so we use an event to log the message\\r\\n        emit NftRecevied(operator,from,tokenId);\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    event withdrawUserNftEvent(uint256 userId,uint256[] tokenIds,address userWalletAddress);\\r\\n\\r\\n    function withdrawUserNft(uint256[] memory tokenIds,uint256 userId) external {\\r\\n        require(userWallet[userId] == msg.sender, \\\"You wallet address not matched\\\");\\r\\n\\r\\n        for (uint i = 0; i < tokenIds.length; i++) {\\r\\n        require(nftUser[tokenIds[i]] == userId, \\\"You are not the owner of nft\\\");\\r\\n        CarbonCredit.transferFrom(address(this), msg.sender, tokenIds[i]);\\r\\n\\r\\n        }\\r\\n        emit withdrawUserNftEvent(userId,tokenIds,msg.sender);\\r\\n    }\\r\\n\\r\\n     \\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/Nft.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unli\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\n\\r\\ncontract BCCarbonCredit is ERC721, ERC721Burnable, Ownable {\\r\\n\\r\\n    uint256 public tokenIdCounter = 0;\\r\\n    address payable public  platfromfeeAccount; // the account that receives fees\\r\\n    uint public  platfromFee = 10; // the fee percentage on sales \\r\\n   \\r\\n    \\r\\n    mapping(uint256 => uint256) public mintPrice;\\r\\n    mapping(address => bool) public whitelistContract;\\r\\n    mapping(uint256 => bool) public retiredTokens;\\r\\n\\r\\n\\r\\n    struct CarbonProject {\\r\\n        uint project_id;\\r\\n        uint tonnes;\\r\\n        uint no_of_nft;\\r\\n        uint price;\\r\\n    }\\r\\n    event publicMinting(\\r\\n        uint order_id,\\r\\n        uint indexed startTokenId,\\r\\n        uint EndTokenId,\\r\\n        uint price,\\r\\n        address indexed cpo,\\r\\n        address indexed buyer,\\r\\n        uint platformfee,\\r\\n        uint platformfeeAmount,\\r\\n        uint cpoAmount,\\r\\n        CarbonProject projectDetails\\r\\n       \\r\\n    );\\r\\n\\r\\n    event privateMinting(\\r\\n        string order_id,\\r\\n        uint startTokenId,\\r\\n        uint endTokenId,\\r\\n        address indexed cpo,\\r\\n        address indexed buyer,\\r\\n        CarbonProject projectDetails\\r\\n    );\\r\\n\\r\\n    event mintAfterDelayEvent(\\r\\n        string order_id,\\r\\n        uint startTokenId,\\r\\n        uint endTokenId,\\r\\n        address indexed cpo,\\r\\n        address indexed buyer,\\r\\n        CarbonProject projectDetails\\r\\n    );\\r\\n\\r\\n    event ContractMinting(\\r\\n        string order_id,\\r\\n        uint startTokenId,\\r\\n        uint endTokenId,\\r\\n        address indexed cpo,\\r\\n        address indexed buyer,\\r\\n        CarbonProject projectDetails,\\r\\n        address contractAddress\\r\\n    );\\r\\n\\r\\n    event withoutWalletMintEvent(\\r\\n        string order_id,\\r\\n        uint project_id,\\r\\n        uint startTokenId,\\r\\n        uint endTokenId,\\r\\n        address indexed cpo,\\r\\n        uint256 indexed userId,\\r\\n        uint tonnes,\\r\\n        address indexed contractAddress\\r\\n    );\\r\\n\\r\\n    constructor() ERC721(\\\"BC Carbon Credit\\\", \\\"BCCC\\\") {}\\r\\n\\r\\n\\r\\n    function addToWhitelist(address _address) external onlyOwner {\\r\\n        whitelistContract[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address _address) external onlyOwner {\\r\\n        whitelistContract[_address] = false;\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address _address) public view returns (bool) {\\r\\n        return whitelistContract[_address];\\r\\n    }\\r\\n\\r\\n\\r\\n        // editable platform Fee and platformFee Account \\r\\n\\r\\n    function setMintPrice(uint256 project_id,uint256 price) external onlyOwner{\\r\\n        mintPrice[project_id] = price;\\r\\n    }\\r\\n\\r\\n    function setPlatformFeeAccount(address _platfromfeeAccount) external onlyOwner{\\r\\n        platfromfeeAccount = payable(_platfromfeeAccount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function setPlatformFeePercentage(uint _platfromFee) external onlyOwner{\\r\\n        require(_platfromFee < 100, \\\"Platform fee cannot be greater than 100%.\\\");\\r\\n        platfromFee = _platfromFee;\\r\\n\\r\\n    }\\r\\n\\r\\n    function _mint(address to, uint256 tokenId) internal override{\\r\\n        require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can transfer tokens\\\");\\r\\n        super._mint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function _safeMint(address to, uint256 tokenId) internal override {\\r\\n        require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can transfer tokens\\\");\\r\\n        super._safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address from,address to,uint256 tokenId,bytes memory data) public override {\\r\\n        require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can transfer tokens\\\");\\r\\n        require(!retiredTokens[tokenId], \\\"retired token can not transfer\\\");\\r\\n        super.safeTransferFrom(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n    ) public override {\\r\\n    require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can transfer tokens\\\");\\r\\n    require(!retiredTokens[tokenId], \\\"retired token can not transfer\\\");\\r\\n\\r\\n    super.safeTransferFrom(from, to, tokenId);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public override {\\r\\n        require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can transfer tokens\\\");\\r\\n        require(!retiredTokens[tokenId], \\\"retired token can not transfer\\\");\\r\\n        super.transferFrom(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function getMintPrice(uint256 project_id) view public returns(uint){\\r\\n        return((mintPrice[project_id]*(100 + platfromFee ))/100);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _baseURI() internal pure override returns (string memory) {\\r\\n        return \\\"https://api.beachcollective.io/nft/\\\";\\r\\n    }\\r\\n\\r\\n    function mint(uint256 order_id,uint256 project_id,uint tonnes,uint no_of_nft,address to,address _cpo) public payable {\\r\\n        uint price = getMintPrice(project_id);\\r\\n        require(price != 0, \\\"Carbon price should be greater then 0\\\");\\r\\n        uint total_price = no_of_nft * tonnes * price;\\r\\n        require(msg.value == total_price, \\\"Incorrect minting price\\\");\\r\\n        require(tonnes != 0, \\\"Carbon Tonnes should be greater then 0\\\");\\r\\n        require(no_of_nft != 0, \\\"Carbon Tonnes should be greater then 0\\\");\\r\\n        uint startTokenId = tokenIdCounter + 1;\\r\\n\\r\\n        for (uint256 i = 0; i < no_of_nft; i++) {\\r\\n            tokenIdCounter++;\\r\\n            _safeMint(to, tokenIdCounter);\\r\\n        }\\r\\n        CarbonProject memory newProject = CarbonProject(project_id,tonnes,no_of_nft,price);\\r\\n        if (platfromFee > 0){\\r\\n            uint platfromFeeAmount = msg.value * platfromFee/100 ;\\r\\n            uint cpoAmount = msg.value - platfromFeeAmount;\\r\\n            payable(_cpo).transfer(cpoAmount);\\r\\n            platfromfeeAccount.transfer(platfromFeeAmount);\\r\\n            emit publicMinting(order_id,startTokenId,tokenIdCounter,price,_cpo,to,platfromFee,platfromFeeAmount,cpoAmount,newProject);\\r\\n        }else{\\r\\n            payable(_cpo).transfer(msg.value);\\r\\n            emit publicMinting(order_id,startTokenId,tokenIdCounter,price,_cpo,to,platfromFee,0,msg.value,newProject);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    function privateMint(string memory order_id,address to,address _cpo,uint project_id,uint tonnes,uint no_of_nft,uint price) public onlyOwner {\\r\\n    uint startTokenId = tokenIdCounter + 1;\\r\\n\\r\\n    for (uint256 i = 0; i < no_of_nft; i++) {\\r\\n        tokenIdCounter++;\\r\\n        _safeMint(to, tokenIdCounter);\\r\\n    }\\r\\n    CarbonProject memory newProject = CarbonProject(project_id,tonnes,no_of_nft,price);\\r\\n\\r\\n    emit privateMinting(\\r\\n        order_id,\\r\\n        startTokenId,\\r\\n        tokenIdCounter,\\r\\n        _cpo,\\r\\n        to,newProject);\\r\\n    }\\r\\n\\r\\n   function ContractMint(string memory order_id,address to,address _cpo,uint project_id,uint tonnes,uint no_of_nft,uint price) public returns(uint) {\\r\\n    require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can mint.\\\");\\r\\n    uint startTokenId = tokenIdCounter + 1;\\r\\n    for (uint256 i = 0; i < no_of_nft; i++) {\\r\\n        tokenIdCounter++;\\r\\n        _safeMint(to, tokenIdCounter);\\r\\n    }\\r\\n    CarbonProject memory newProject = CarbonProject(project_id,tonnes,no_of_nft,price);\\r\\n\\r\\n    emit ContractMinting(\\r\\n        order_id,\\r\\n        startTokenId,\\r\\n        tokenIdCounter,\\r\\n        _cpo,\\r\\n        to,newProject,\\r\\n        address(msg.sender));\\r\\n\\r\\n    return tokenIdCounter;\\r\\n\\r\\n    }\\r\\n\\r\\n    function withoutWalletMint(string memory order_id,uint256 user_id,address to,address _cpo,uint256 project_id,uint256 tonnes,uint256 no_of_nft) public returns(uint256[] memory) {\\r\\n    require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can mint.\\\");\\r\\n    uint startTokenId = tokenIdCounter + 1;\\r\\n    uint256[] memory tokenIdList = new uint256[](no_of_nft);\\r\\n    for (uint256 i = 0; i < no_of_nft; i++) {\\r\\n        tokenIdCounter++;\\r\\n        _safeMint(to, tokenIdCounter);\\r\\n        tokenIdList[i] = tokenIdCounter;\\r\\n    }\\r\\n\\r\\n    emit withoutWalletMintEvent(\\r\\n        order_id,\\r\\n        project_id,\\r\\n        startTokenId,\\r\\n        tokenIdCounter,\\r\\n        _cpo,\\r\\n        user_id,\\r\\n        tonnes,\\r\\n        address(msg.sender));\\r\\n\\r\\n    return tokenIdList;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function retire(uint256 tokenId) public {\\r\\n        require(isWhitelisted(msg.sender), \\\"Only whitelisted addresses can mint.\\\");\\r\\n        require(_exists(tokenId), \\\"Token ID does not exist\\\");\\r\\n        // _burn(tokenId);\\r\\n        retiredTokens[tokenId] = true;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"Token ID does not exist\\\");\\r\\n        return string(abi.encodePacked(_baseURI(), Strings.toString(tokenId)));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function mintAfterDelay(string memory order_id,address to,address _cpo,uint project_id,uint tonnes,uint no_of_nft,uint price) public onlyOwner {\\r\\n    uint startTokenId = tokenIdCounter + 1;\\r\\n    for (uint256 i = 0; i < no_of_nft; i++) {\\r\\n        tokenIdCounter++;\\r\\n\\r\\n        _safeMint(to, tokenIdCounter);\\r\\n    }\\r\\n    CarbonProject memory newProject = CarbonProject(project_id,tonnes,no_of_nft,price);\\r\\n\\r\\n    emit mintAfterDelayEvent(\\r\\n        order_id,\\r\\n        startTokenId,\\r\\n        tokenIdCounter,\\r\\n        _cpo,\\r\\n        to,newProject);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platformFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cccWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_carbonAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actual_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_deduction\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"}],\"name\":\"DirectTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actual_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"}],\"name\":\"DirectTransferEvent2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftId\",\"type\":\"uint256[]\"}],\"name\":\"MintNftEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"}],\"name\":\"MintNowEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftRecevied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"Offered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_convertion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails\",\"name\":\"order_details\",\"type\":\"tuple\"}],\"name\":\"OrderCarbonDetailsToBagEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_convertion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails\",\"name\":\"order_details\",\"type\":\"tuple\"}],\"name\":\"OrderCarbonDetailsToWalletEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_convertion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"product_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plantform_fee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CoreFeesRountingContract.OrderDetails\",\"name\":\"order_details\",\"type\":\"tuple\"}],\"name\":\"OrderDetailsToBagEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_convertion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"product_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plantform_fee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CoreFeesRountingContract.OrderDetails\",\"name\":\"order_details\",\"type\":\"tuple\"}],\"name\":\"OrderDetailsToWalletEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RetairCarbonNftEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"RevokeOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferAllTokenToTreasuryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"addMintLaterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"setUserNftEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setUserWalletEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userWalletAddress\",\"type\":\"address\"}],\"name\":\"withdrawUserNftEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftList\",\"type\":\"uint256[]\"}],\"name\":\"withoutWalletOrderEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"BagOrderPaymentNftTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"}],\"name\":\"MintNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"product_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plantform_fee\",\"type\":\"uint256\"}],\"internalType\":\"struct CoreFeesRountingContract.OrderDetails[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"OrderPaymentToBag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"OrderPaymentToBagCarbon\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"product_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plantform_fee\",\"type\":\"uint256\"}],\"internalType\":\"struct CoreFeesRountingContract.OrderDetails[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"OrderPaymentToWallet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"OrderPaymentToWalletCarbon\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PaymentTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RetireCarbonNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TransferAllTokenToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_directTransferFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_orderPaymentFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"addMintLater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"allowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cccWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"}],\"name\":\"getOrderCarbonDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platform_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platfrom_fee_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"new_item\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"item_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintDelayFlag\",\"type\":\"bool\"}],\"internalType\":\"struct CoreFeesRountingContract.OrderCarbonDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getUserOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"getUserWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"}],\"name\":\"getWithoutWalletOrderCarbonDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyer_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes_for_specified_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft_for_specified_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_specified_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_minted\",\"type\":\"bool\"}],\"internalType\":\"struct CoreFeesRountingContract.WithoutWalletOrderCarbonDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC721\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"cpo\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cpo\",\"type\":\"address\"}],\"name\":\"makeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resale_platfromFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resale_royaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"revokeItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAddressIsBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_carbonAddress\",\"type\":\"address\"}],\"name\":\"setCarbonAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cccWallet\",\"type\":\"address\"}],\"name\":\"setCccWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setDirectTransferFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOrderPaymentFlagFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_platformFeeFlag\",\"type\":\"bool\"}],\"name\":\"setPlatformFeeFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformFeeWallet\",\"type\":\"address\"}],\"name\":\"setPlatformFeeWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platfromFee\",\"type\":\"uint256\"}],\"name\":\"setResalePlatformFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_adr\",\"type\":\"address\"}],\"name\":\"setTargetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"setUserOfNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"setUserWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewIsBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"whitelistNftContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedNftContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"withdrawUserNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"specific_tonnes_per_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nfts_for_specific\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining_tonnes\",\"type\":\"uint256\"}],\"name\":\"withoutWalletMintNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"}],\"name\":\"withoutWalletOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"project_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cpo_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyer_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tonnes_for_specified_nft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"no_of_nft_for_specified_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_specified_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remaining_tonnes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_minted\",\"type\":\"bool\"}],\"internalType\":\"struct CoreFeesRountingContract.WithoutWalletOrderCarbonDetails[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"withoutWalletPostMintingOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoreFeesRountingContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f4543fa5f7fe28a7758ef43fea71d11fccdad5c0000000000000000000000005570b6397b4b7c7d7e2100cae5277b38103f8b1500000000000000000000000093fe7cb7f250e5effe33d87e7ab34134e856fc96000000000000000000000000434b1bb749d99199fa9547ef5e3b0197507ed20d", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}