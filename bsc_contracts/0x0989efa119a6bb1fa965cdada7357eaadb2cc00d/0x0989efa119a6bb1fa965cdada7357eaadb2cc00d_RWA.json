{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RWA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract RWA is IERC20, IERC20Metadata {\\n    string private _name = \\\"Real World Assets\\\";\\n    string private _symbol = \\\"$RWA\\\";\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    mapping(address => address) public inviteAdd; // \u9080\u8bf7\u4eba\\n    mapping(address => bool) public ownerAdd; // \u7ba1\u7406\u5458\u5730\u5740\\n    mapping(address => bool) private _whiteAdd; // \u767d\u540d\u5355\u5730\u5740\\n\\n    address public pair; //\u4ea4\u6613\u6c60\u5730\u5740\\n    address private _dividendAdd = 0x43F0B63076e0df0c4c49A781Bf9c113323FE2a55; //\u5206\u7ea2\u5730\u5740\\n    address private _foundationAdd = 0x89a3EaBfF30b302008add4aDbC9EDE48F5029f65; //\u57fa\u91d1\u5730\u5740\\n    uint256 private _totalSupply;\\n    uint256 private _minTotalSupply = 110000 * 10 ** 18;\\n    uint256 public baseFee = 6;\\n    uint64 public foundationRatio = 1; //\u57fa\u91d1\u6bd4\u4f8b\\n    uint64 public dividendRatio = 1; //\u5206\u7ea2\u6bd4\u4f8b\\n    uint64 public promotionRatio = 3; //\u56e2\u961f\u63a8\u5e7f\u6bd4\u4f8b\\n    uint64 public destructionRatio = 1; // \u9500\u6bc1\u6bd4\u4f8b\\n\\n    event OwnerChange(address indexed add, bool status);\\n    event UpdateWhiteAdd(address indexed whiteAddr, bool whiteOn);\\n\\n    modifier onlyOwner() {\\n        require(ownerAdd[msg.sender] == true, \\\"must owner address\\\");\\n        _;\\n    }\\n\\n    constructor(address owner) {\\n        ownerAdd[owner] = true;\\n        // \u767d\u540d\u5355\\n        _whiteAdd[0x9eaD15FF2A97a18C56d549AF4eF46D67F8A7BE05] = true;\\n        _whiteAdd[0x966285CF957e6933eb8E68A3BafCd570CB5add6A] = true;\\n        _whiteAdd[0x3Cc8B0ed15F85E458EE435b3Fe48E798A42910EE] = true;\\n        _whiteAdd[0x656f43d1B157db07c3873B51A55CCBD323CF63D1] = true;\\n        _whiteAdd[0x78fafFF98fadA85Da0AB500d706d559D021DEA85] = true;\\n        _mint(owner, 210000 * 10 ** 18);\\n        setInfo();\\n    }\\n\\n    function setInfo() private {\\n        setPair(pairFor(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73, address(this), 0x55d398326f99059fF775485246999027B3197955));\\n    }\\n\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address __pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        __pair = address(uint160(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\\n            )))));\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] -= amount);\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] += addedValue\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public returns (bool) {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender] -= subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        // \u4e3aswap\u4ea4\u6613\\n        if (sender == pair || recipient == pair) {\\n            if (_whiteAdd[sender] || _whiteAdd[recipient]) {\\n                _transferExcluded(sender, recipient, amount);\\n            } else {\\n                _balances[sender] -= amount;\\n                (\\n                    uint256 _foundationFeeAmount,\\n                    uint256 _dividendFeeAmount,\\n                    uint256 _promotionFeeAmount,\\n                    uint256 _destroyFeeAmount,\\n                    uint256 _receiveAmount\\n                ) = _getValues(\\n                        amount,\\n                        baseFee,\\n                        foundationRatio,\\n                        dividendRatio,\\n                        promotionRatio,\\n                        destructionRatio\\n                    );\\n                // \u57fa\u91d1\\n                _balances[_foundationAdd] += _foundationFeeAmount;\\n                emit Transfer(sender, _foundationAdd, _foundationFeeAmount);\\n                // \u5206\u7ea2\\n                _balances[_dividendAdd] += _dividendFeeAmount;\\n                emit Transfer(sender, _dividendAdd, _dividendFeeAmount);\\n                // \u56e2\u961f\u63a8\u5e7f\u6536\u76ca\\n                _promotionIncentive(sender, _promotionFeeAmount);\\n                // \u9500\u6bc1\\n                if (_destroyFeeAmount != 0) {\\n                    _totalSupply -= _destroyFeeAmount;\\n                    emit Transfer(sender, address(0), _destroyFeeAmount);\\n                }\\n                // \u63a5\u6536\u8005\\n                _balances[recipient] += _receiveAmount;\\n                emit Transfer(sender, recipient, _receiveAmount);\\n            }\\n        } else {\\n            _transferExcluded(sender, recipient, amount);\\n        }\\n    }\\n\\n    function _getValues(\\n        uint256 amount,\\n        uint256 _baseFee,\\n        uint256 _foundationFee,\\n        uint256 _dividendFee,\\n        uint256 _promotionFee,\\n        uint256 _destroyFee\\n    ) private view returns (uint256, uint256, uint256, uint256, uint256) {\\n        uint256 _amount = amount;\\n        uint256 _totalFeeAmount = (_amount * _baseFee) / 100;\\n\\n        uint256 _foundationFeeAmount = (_totalFeeAmount * _foundationFee) /\\n            _baseFee;\\n        uint256 _dividendFeeAmount = (_totalFeeAmount * _dividendFee) /\\n            _baseFee;\\n        uint256 _promotionFeeAmount = (_totalFeeAmount * _promotionFee) /\\n            _baseFee;\\n        uint256 _destroyFeeAmount = (_totalFeeAmount * _destroyFee) / _baseFee;\\n\\n        if (_totalSupply - _destroyFeeAmount <= _minTotalSupply) {\\n            _destroyFeeAmount = _totalSupply - _minTotalSupply;\\n        }\\n\\n        uint256 _receiveAmount = _amount -\\n            _foundationFeeAmount -\\n            _dividendFeeAmount -\\n            _promotionFeeAmount -\\n            _destroyFeeAmount;\\n        return (\\n            _foundationFeeAmount,\\n            _dividendFeeAmount,\\n            _promotionFeeAmount,\\n            _destroyFeeAmount,\\n            _receiveAmount\\n        );\\n    }\\n\\n    // \u7ed1\u5b9a\u9080\u8bf7\u5173\u7cfb\\n    function bindInviter(address inviter, address invitee) public {\\n        require(msg.sender == invitee);\\n        require(inviteAdd[invitee] == address(0));\\n        inviteAdd[invitee] = inviter;\\n    }\\n\\n    // \u9080\u8bf7\u5956\u52b1\u5206\u53d1\\n    function _promotionIncentive(address sender, uint256 amount) private {\\n        address inviter = inviteAdd[sender];\\n        uint256 total = amount;\\n        uint256 a;\\n        if (inviter != address(0)) {\\n            // \u4e00\u4ee3\u5956\u52b1\\n            a = (amount / 10) * 4;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u4e8c\u4ee3\u5956\u52b1\\n            a = (amount / 25) * 7;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u4e09\u4ee3\u5956\u52b1\\n            a = amount / 10;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u56db\u4ee3\u5956\u52b1\\n            a = (amount / 25) * 2;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u4e94\u4ee3\u5956\u52b1\\n            a = (amount / 50) * 3;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u516d\u4ee3\u5956\u52b1\\n            a = amount / 25;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u4e03\u4ee3\u5956\u52b1\\n            a = amount / 50;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (inviter != address(0)) {\\n            // \u516b\u4ee3\u5956\u52b1\\n            a = amount / 50;\\n            _balances[inviter] += a;\\n            total -= a;\\n            emit Transfer(sender, inviter, a);\\n            inviter = inviteAdd[inviter];\\n        }\\n        if (total != 0) {\\n            emit Transfer(sender, address(0), total);\\n        }\\n    }\\n\\n    // \u7ba1\u7406\u5458\u6539\u53d8\\n    function changeOwner(address to, bool flag) public onlyOwner {\\n        require(ownerAdd[to] != flag);\\n        ownerAdd[to] = flag;\\n        emit OwnerChange(to, flag);\\n    }\\n\\n    // \u4ea4\u6613\u5bf9\u6539\u53d8\\n    function setPair(address _pair) public onlyOwner {\\n        require(pair == address(0) && _pair != address(0));\\n        pair = _pair;\\n    }\\n\\n    function setBaseFee(\\n        uint256 _baseFee,\\n        uint64 _foundationRatio,\\n        uint64 _dividendRatio,\\n        uint64 _promotionRatio,\\n        uint64 _destructionRatio\\n    ) public onlyOwner {\\n        require(\\n            _foundationRatio +\\n                _dividendRatio +\\n                _promotionRatio +\\n                _destructionRatio ==\\n                _baseFee\\n        );\\n        require(_baseFee >= 0 && _baseFee <= 100);\\n        baseFee = _baseFee;\\n        foundationRatio = _foundationRatio;\\n        dividendRatio = _dividendRatio;\\n        promotionRatio = _promotionRatio;\\n        destructionRatio = _destructionRatio;\\n    }\\n\\n    // \u514d\u624b\u7eed\u8d39\u4ea4\u6613\\n    function _transferExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n}\\n\\n\\ninterface IPancakeRouter {\\n    function factory() external pure returns (address);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n}\\ninterface IPancakePair{\\n    function token0() external view returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function sync() external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"OwnerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whiteAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whiteOn\",\"type\":\"bool\"}],\"name\":\"UpdateWhiteAdd\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"invitee\",\"type\":\"address\"}],\"name\":\"bindInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructionRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundationRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteAdd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerAdd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionRatio\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_foundationRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_dividendRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_promotionRatio\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_destructionRatio\",\"type\":\"uint64\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RWA", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000001c0f070460d4500f88e4b7a9fe7a91a13528553", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}