{"SourceCode": "// This is the original token of Sandwich Network (https://sandwich.network)\r\n//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract SandwichNetwork {\r\n    \r\n    address public owner;\r\n    \r\n    mapping(address => uint) private balances;\r\n    mapping(address => mapping(address => uint)) private allowed;\r\n    uint public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    uint public sellingTaxEcosystem;\r\n    uint public sellingTaxMarketing;\r\n    uint public sellingTaxTotal;\r\n    address public fundEcosystem;\r\n    address public fundMarketing;\r\n    bool public transfersAllowed;\r\n    \r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isReceiverTaxed;\r\n    mapping(address => bool) private _isWhitelisted;\r\n\r\n    IERC20 customtoken;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"Only owner can do this!\");\r\n        _;\r\n    }\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n        name = 'Sandwich Network';\r\n        symbol = '$SANDWICH';\r\n        decimals = 18;\r\n        totalSupply = 1000000000 * 10 ** decimals;\r\n        balances[owner] = totalSupply;\r\n        transfersAllowed = true;\r\n        sellingTaxEcosystem = 4;\r\n        sellingTaxMarketing = 1;\r\n        sellingTaxTotal = sellingTaxEcosystem + sellingTaxMarketing;\r\n        \r\n        emit Transfer(address(0), owner, totalSupply);\r\n        \r\n        _isExcludedFromFee[owner] = true;\r\n        _isWhitelisted[owner] = true;\r\n        _isReceiverTaxed[0x10ED43C718714eb63d5aA57B78B54704E256024E] = true; // mainnet router\r\n        fundEcosystem = owner;\r\n        fundMarketing = owner;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public view returns(uint) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        if (!_isWhitelisted[msg.sender]) {\r\n            require(transfersAllowed, 'Transfers are not allowed!');\r\n        }\r\n        require(balances[msg.sender] >= value, 'Balance too low!');\r\n        \r\n        balances[msg.sender] -= value;\r\n\r\n        uint toreceive = value;\r\n\r\n        if (_isReceiverTaxed[to] && sellingTaxTotal > 0 && !_isExcludedFromFee[msg.sender]) {\r\n\r\n            if (sellingTaxMarketing > 0) {\r\n                uint tomarketing = value * sellingTaxMarketing / 100;\r\n                balances[fundMarketing] += tomarketing;\r\n                emit Transfer(msg.sender, fundMarketing, tomarketing);\r\n                toreceive -= tomarketing;\r\n            }\r\n\r\n            if (sellingTaxEcosystem > 0) {\r\n                uint toecosystem = value * sellingTaxEcosystem / 100;\r\n                balances[fundEcosystem] += toecosystem;\r\n                emit Transfer(msg.sender, fundEcosystem, toecosystem);\r\n                toreceive -= toecosystem;\r\n            }\r\n\r\n        }\r\n        \r\n        balances[to] += toreceive;\r\n        emit Transfer(msg.sender, to, toreceive);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        if (!_isWhitelisted[from]) {\r\n            require(transfersAllowed, 'Transfers are not allowed!');\r\n        }\r\n        require(balances[from] >= value, 'Balance too low!');\r\n        require(allowed[from][msg.sender] >= value, 'Allowance too low!');\r\n        \r\n        balances[from] -= value;\r\n        allowed[from][msg.sender] -=value;\r\n\r\n        uint toreceive = value;\r\n\r\n        if (_isReceiverTaxed[to] && sellingTaxTotal > 0 && !_isExcludedFromFee[from]) {\r\n\r\n            if (sellingTaxMarketing > 0) {\r\n                uint tomarketing = value * sellingTaxMarketing / 100;\r\n                balances[fundMarketing] += tomarketing;\r\n                emit Transfer(from, fundMarketing, tomarketing);\r\n                toreceive -= tomarketing;\r\n            }\r\n\r\n            if (sellingTaxEcosystem > 0) {\r\n                uint toecosystem = value * sellingTaxEcosystem / 100;\r\n                balances[fundEcosystem] += toecosystem;\r\n                emit Transfer(from, fundEcosystem, toecosystem);\r\n                toreceive -= toecosystem;\r\n            }\r\n\r\n        }\r\n        \r\n        balances[to] += toreceive;\r\n        emit Transfer(from, to, toreceive);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;   \r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function burn(uint amount) public {\r\n        require(amount <= balances[msg.sender]);\r\n\r\n        totalSupply -= amount;\r\n        balances[msg.sender] -= amount;\r\n        \r\n        emit Transfer(msg.sender, address(0), amount);\r\n    }\r\n\r\n    function burnFrom(address from, uint amount) public {\r\n        require(amount <= balances[from], 'More than the balance!');\r\n        require(amount <= allowed[from][msg.sender], 'More than allowed!');\r\n\r\n        totalSupply -= amount;\r\n        balances[from] -= amount;\r\n        allowed[from][msg.sender] -= amount;\r\n        \r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns(bool) {\r\n        return _isWhitelisted[account];\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isReceiverTaxed(address account) public view returns(bool) {\r\n        return _isReceiverTaxed[account];\r\n    }\r\n\r\n    function addToWhitelist(address account) public isOwner {\r\n        _isWhitelisted[account] = true;\r\n    }\r\n    \r\n    function removeFromWhitelist(address account) public isOwner {\r\n        _isWhitelisted[account] = false;\r\n    }\r\n    \r\n    function excludeFromFee(address account) public isOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public isOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function receiverTaxed(address account) public isOwner {\r\n        _isReceiverTaxed[account] = true;\r\n    }\r\n    \r\n    function receiverNotTaxed(address account) public isOwner {\r\n        _isReceiverTaxed[account] = false;\r\n    }\r\n\r\n    function setFundEcosystem(address _newAddress) public isOwner {\r\n        fundEcosystem = _newAddress;\r\n    }\r\n\r\n    function setFundMarketing(address _newAddress) public isOwner {\r\n        fundMarketing = _newAddress;\r\n    }\r\n\r\n    function setEcosystemTax(uint _newTax) public isOwner {\r\n        sellingTaxEcosystem = _newTax;\r\n    }\r\n\r\n    function setMarketingTax(uint _newTax) public isOwner {\r\n        sellingTaxMarketing = _newTax;\r\n    }\r\n\r\n    function withdrawCustomToken(address _address) public isOwner {\r\n        customtoken = IERC20(_address);\r\n        require(customtoken.balanceOf(address(this)) > 0, \"There is nothing to withdraw!\");\r\n        \r\n        bool sent = customtoken.transfer(owner, customtoken.balanceOf(address(this)));\r\n        require(sent, \"We failed to send tokens\");\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEcosystem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReceiverTaxed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"receiverNotTaxed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"receiverTaxed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingTaxEcosystem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingTaxMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingTaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"setEcosystemTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setFundEcosystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setFundMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"setMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawCustomToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SandwichNetwork", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://36159a1c5560dfcdeb04a3e88953ce1164381e5a17b0d200c4435bea17ac97a3"}