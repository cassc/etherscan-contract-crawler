{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/AssetX.sol\": {\r\n      \"content\": \"/*\\r\\n\\r\\n_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____________________________________________________________/\\\\\\\\\\\\_______/\\\\\\\\\\\\_        \\r\\n ___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_________________________________________________________\\\\///\\\\\\\\\\\\___/\\\\\\\\\\\\/__       \\r\\n  __/\\\\\\\\\\\\/////////\\\\\\\\\\\\______________________________________________/\\\\\\\\\\\\________\\\\///\\\\\\\\\\\\\\\\\\\\\\\\/____      \\r\\n   _\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\\\\\______     \\r\\n    _\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\//////__\\\\/\\\\\\\\\\\\//////____/\\\\\\\\\\\\/////\\\\\\\\\\\\_\\\\////\\\\\\\\\\\\////_______\\\\/\\\\\\\\\\\\\\\\______    \\r\\n     _\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\___________/\\\\\\\\\\\\\\\\\\\\\\\\_____   \\r\\n      _\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\////////\\\\\\\\\\\\_\\\\////////\\\\\\\\\\\\_\\\\//\\\\\\\\///////______\\\\/\\\\\\\\\\\\_/\\\\\\\\_____/\\\\\\\\\\\\////\\\\\\\\\\\\___  \\r\\n       _\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\//\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\/___\\\\///\\\\\\\\\\\\_ \\r\\n        _\\\\///________\\\\///__\\\\//////////__\\\\//////////____\\\\//////////______\\\\/////____\\\\///_______\\\\///__\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\r\\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\r\\nimport './DividendTracker.sol';\\r\\n\\r\\n\\r\\ncontract AssetXTokenStorage {\\r\\n    address private immutable assetX;\\r\\n\\r\\n    constructor() {\\r\\n        assetX = msg.sender;\\r\\n    }\\r\\n\\r\\n    function transfer(IERC20 token) external {\\r\\n        require(assetX == msg.sender, 'No AssetX');\\r\\n        token.transfer(assetX, token.balanceOf(address(this)));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract AssetX is ERC20, Ownable2Step {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IUniswapV2Router02 public uniswapV2Router; // Using current standard DEX Router Interface\\r\\n\\r\\n    bool private swapping;\\r\\n\\r\\n    DividendTracker public dividendTracker;\\r\\n\\r\\n    address constant private deadWallet = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public marketingWallet;\\r\\n    address public liquidityWallet;\\r\\n\\r\\n    address public  RewardToken; //RewardToken\\r\\n\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    \\r\\n\\r\\n    uint256 public RewardTokenFee = 1;\\r\\n    uint256 public liquidityFee = 1;\\r\\n    uint256 public marketingFee = 2;\\r\\n    uint256 public totalFees = RewardTokenFee.add(liquidityFee).add(marketingFee);\\r\\n\\r\\n    bool public swapEnabled = true;\\r\\n    bool public taxEnabled = true;\\r\\n\\r\\n    bool public useEthPair;\\r\\n\\r\\n    AssetXTokenStorage public tokenStorage;\\r\\n\\r\\n    // use by default 300,000 gas to process auto-claiming dividends\\r\\n    uint256 public gasForProcessing = 300_000;\\r\\n\\r\\n     // exlcude from fees and max transaction amount\\r\\n    mapping (address => bool) private _isExcludedFromFees;\\r\\n\\r\\n\\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping (address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    // Binance Account Bound Token\\r\\n    IERC721 public babt;\\r\\n    mapping (address => bool) public whitelisted;\\r\\n    bool public checkWhitelist = true;\\r\\n\\r\\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 tokenBReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    event SwapAndLiquifyETH(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    event SwapAndSendForMarketing(uint256 tokens, address wallet);\\r\\n\\r\\n    event SendDividends(\\r\\n    \\tuint256 tokensSwapped,\\r\\n    \\tuint256 amount\\r\\n    );\\r\\n\\r\\n    event ProcessedDividendTracker(\\r\\n    \\tuint256 iterations,\\r\\n    \\tuint256 claims,\\r\\n        uint256 lastProcessedIndex,\\r\\n    \\tbool indexed automatic,\\r\\n    \\tuint256 gas,\\r\\n    \\taddress indexed processor\\r\\n    );\\r\\n\\r\\n    event RewardTokenFeeUpdated(uint256 indexed newRewardTokenFee);\\r\\n\\r\\n    event LiquidityFeeUpdated(uint256 indexed newLiquidityFee);\\r\\n\\r\\n    event MarketingFeeUpdated(uint256 indexed newMarketingFee);\\r\\n\\r\\n    event SwapEnabled(bool enabled);\\r\\n\\r\\n    event TaxEnabled(bool enabled);\\r\\n\\r\\n    event SetBabt(address babtAddr);\\r\\n\\r\\n    event WhitelistMultipleAccounts(address[] accounts, bool isWhitelisted);\\r\\n\\r\\n    event UpdateCheckWhitelist(bool check);\\r\\n\\r\\n    constructor(address payable _marketingWallet, address _liquidityWallet, address _rewardToken, address _router) ERC20(\\\"Asset Y\\\", \\\"ASY\\\") {\\r\\n\\r\\n        marketingWallet = _marketingWallet;\\r\\n        liquidityWallet = _liquidityWallet;\\r\\n\\r\\n        RewardToken = _rewardToken;\\r\\n\\r\\n    \\tdividendTracker = new DividendTracker();\\r\\n        dividendTracker.updateRewardToken(RewardToken);\\r\\n\\r\\n        tokenStorage = new AssetXTokenStorage();\\r\\n\\r\\n        if (_router != address(0)) {\\r\\n            uniswapV2Router = IUniswapV2Router02(_router);\\r\\n        } else if (getChainId() == 5) { // Goerli\\r\\n            uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        } else {\\r\\n            uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        }\\r\\n         // Create a uniswap pair for this new token\\r\\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\\r\\n            .createPair(address(this), RewardToken);\\r\\n\\r\\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\\r\\n\\r\\n        swapTokensAtAmount = 1000 * (10**18);\\r\\n\\r\\n        // exclude from receiving dividends\\r\\n        dividendTracker.excludeFromDividends(address(dividendTracker));\\r\\n        dividendTracker.excludeFromDividends(address(this));\\r\\n        dividendTracker.excludeFromDividends(owner());\\r\\n        dividendTracker.excludeFromDividends(deadWallet);\\r\\n        dividendTracker.excludeFromDividends(address(0));\\r\\n        dividendTracker.excludeFromDividends(address(_marketingWallet));\\r\\n        dividendTracker.excludeFromDividends(address(uniswapV2Router));\\r\\n\\r\\n        // exclude from paying fees or having max transaction amount\\r\\n        excludeFromFees(owner(), true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(_marketingWallet), true);\\r\\n\\r\\n        /*\\r\\n            _mint is an internal function in ERC20.sol that is only called here,\\r\\n            and CANNOT be called ever again\\r\\n        */\\r\\n        _mint(owner(), 10_000_000 * (10**18));\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n\\r\\n  \\t}\\r\\n\\r\\n    function updateDividendTracker(address newAddress) external onlyOwner {\\r\\n        require(newAddress != address(dividendTracker), \\\"AssetX: The dividend tracker already has that address\\\");\\r\\n\\r\\n        DividendTracker newDividendTracker = DividendTracker(payable(newAddress));\\r\\n\\r\\n        require(newDividendTracker.owner() == address(this), \\\"AssetX: The new dividend tracker must be owned by the AssetX token contract\\\");\\r\\n\\r\\n        newDividendTracker.excludeFromDividends(address(newDividendTracker));\\r\\n        newDividendTracker.excludeFromDividends(address(this));\\r\\n        newDividendTracker.excludeFromDividends(owner());\\r\\n        newDividendTracker.excludeFromDividends(address(uniswapV2Router));\\r\\n        newDividendTracker.excludeFromDividends(deadWallet);\\r\\n        newDividendTracker.excludeFromDividends(address(0));\\r\\n        newDividendTracker.excludeFromDividends(address(marketingWallet));\\r\\n\\r\\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\\r\\n\\r\\n        dividendTracker = newDividendTracker;\\r\\n    }\\r\\n\\r\\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\\r\\n        require(newAddress != address(uniswapV2Router), \\\"AssetX: The router already has that address\\\");\\r\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\r\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\r\\n        dividendTracker.excludeFromDividends(address(uniswapV2Router)); //Not working in constructor\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        require(_isExcludedFromFees[account] != excluded, \\\"AssetX: Account is already the value of 'excluded'\\\");\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n    function excludeMultipleAccountsFromFees(address[] memory accounts, bool excluded) external onlyOwner {\\r\\n        uint256 length = accounts.length;\\r\\n        for(uint256 i = 0; i < length;) {\\r\\n            if (_isExcludedFromFees[accounts[i]] != excluded) {\\r\\n                _isExcludedFromFees[accounts[i]] = excluded;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setRewardTokenFee(uint256 value) external onlyOwner{\\r\\n        require(value.add(liquidityFee).add(marketingFee)<=4,\\\"AssetX: Maximum tax is 4%\\\");\\r\\n        RewardTokenFee = value;\\r\\n        totalFees = RewardTokenFee.add(liquidityFee).add(marketingFee);\\r\\n        emit RewardTokenFeeUpdated(value);\\r\\n    }\\r\\n\\r\\n    function setLiquidityFee(uint256 value) external onlyOwner{\\r\\n        require(RewardTokenFee.add(value).add(marketingFee)<=4,\\\"AssetX: Maximum tax is 4%\\\");\\r\\n        liquidityFee = value;\\r\\n        totalFees = RewardTokenFee.add(liquidityFee).add(marketingFee);\\r\\n        emit LiquidityFeeUpdated(value);\\r\\n    }\\r\\n\\r\\n    function setMarketingFee(uint256 value) external onlyOwner{\\r\\n        require(RewardTokenFee.add(liquidityFee).add(value)<=4,\\\"AssetX: Maximum tax is 4%\\\");\\r\\n        marketingFee = value;\\r\\n        totalFees = RewardTokenFee.add(liquidityFee).add(marketingFee);\\r\\n        emit MarketingFeeUpdated(value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setSwapLimit(uint256 value) external onlyOwner{\\r\\n        swapTokensAtAmount = value*(10**18);\\r\\n    }\\r\\n    \\r\\n \\r\\n    // We are planning to change the reward token on community voting.\\r\\n\\r\\n    function setRewardToken(address _rewardToken) external onlyOwner{\\r\\n        require(_rewardToken != address(0), \\\"AssetX: rewardToken is 0 address\\\");\\r\\n        RewardToken = _rewardToken;\\r\\n        dividendTracker.updateRewardToken(_rewardToken);\\r\\n    }\\r\\n\\r\\n    function setSwapEnabled(bool _enabled) external onlyOwner{\\r\\n        swapEnabled = _enabled;\\r\\n        emit SwapEnabled(_enabled);\\r\\n    }\\r\\n\\r\\n    function setTaxEnabled(bool _enabled) external onlyOwner{\\r\\n        taxEnabled = _enabled;\\r\\n        emit TaxEnabled(_enabled);\\r\\n    }\\r\\n\\r\\n    function setUseEthPair(bool _value) external onlyOwner{\\r\\n        useEthPair = _value;\\r\\n    }\\r\\n\\r\\n    function setWallet(\\r\\n        address payable _marketingWallet,\\r\\n        address payable _liquidityWallet\\r\\n    ) external onlyOwner{\\r\\n        require(_marketingWallet != address(0), \\\"AssetX: marketingWallet is 0 address\\\");\\r\\n        require(_liquidityWallet != address(0), \\\"AssetX: liquidityWallet is 0 address\\\");\\r\\n        marketingWallet = _marketingWallet;\\r\\n        liquidityWallet = _liquidityWallet;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        require(automatedMarketMakerPairs[pair] != value, \\\"AssetX: Automated market maker pair is already set to that value\\\");\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        if(value) {\\r\\n            dividendTracker.excludeFromDividends(pair);\\r\\n        }\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\\r\\n        require(newValue >= 200_000 && newValue <= 500_000, \\\"AssetX: gasForProcessing must be between 200,000 and 500,000\\\");\\r\\n        require(newValue != gasForProcessing, \\\"AssetX: Cannot update gasForProcessing to same value\\\");\\r\\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\\r\\n        gasForProcessing = newValue;\\r\\n    }\\r\\n\\r\\n    function updateMinimumTokenBalanceForDividends(uint256 minimumTokenBalanceForDividends) external onlyOwner {\\r\\n        dividendTracker.updateMinimumTokenBalanceForDividends(minimumTokenBalanceForDividends);\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\\r\\n        dividendTracker.updateClaimWait(claimWait);\\r\\n    }\\r\\n\\r\\n    function getClaimWait() external view returns(uint256) {\\r\\n        return dividendTracker.claimWait();\\r\\n    }\\r\\n\\r\\n    function getTotalDividendsDistributed() external view returns (uint256) {\\r\\n        return dividendTracker.totalDividendsDistributed();\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function withdrawableDividendOf(address account) public view returns(uint256) {\\r\\n    \\treturn dividendTracker.withdrawableDividendOf(account);\\r\\n  \\t}\\r\\n\\r\\n\\tfunction dividendTokenBalanceOf(address account) public view returns (uint256) {\\r\\n\\t\\treturn dividendTracker.balanceOf(account);\\r\\n\\t}\\r\\n\\r\\n\\tfunction excludeFromDividends(address account) external onlyOwner{\\r\\n\\t    dividendTracker.excludeFromDividends(account);\\r\\n\\t}\\r\\n\\r\\n    function setBabt(address babtAddr) external onlyOwner{\\r\\n        require(babtAddr != address(0), \\\"AssetX: babt is 0 address\\\");\\r\\n        babt = IERC721(babtAddr);\\r\\n\\t    emit SetBabt(babtAddr);\\r\\n\\t}\\r\\n\\r\\n    function whitelistMultipleAccounts(address[] calldata accounts, bool isWhitelisted) external onlyOwner{\\r\\n        uint256 length = accounts.length;\\r\\n\\t    for(uint256 i = 0; i < length;) {\\r\\n            if (whitelisted[accounts[i]] != isWhitelisted) {\\r\\n                whitelisted[accounts[i]] = isWhitelisted;\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit WhitelistMultipleAccounts(accounts, isWhitelisted);\\r\\n\\t}\\r\\n\\r\\n    function updateCheckWhitelist(bool check) external onlyOwner{\\r\\n        checkWhitelist = check;\\r\\n\\t    emit UpdateCheckWhitelist(check);\\r\\n\\t}\\r\\n\\r\\n    function getAccountDividendsInfo(address account)\\r\\n        external view returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n        return dividendTracker.getAccount(account);\\r\\n    }\\r\\n\\r\\n\\tfunction getAccountDividendsInfoAtIndex(uint256 index)\\r\\n        external view returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n    \\treturn dividendTracker.getAccountAtIndex(index);\\r\\n    }\\r\\n\\r\\n\\tfunction processDividendTracker(uint256 gas) external {\\r\\n\\t\\t(uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\\r\\n\\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n\\t\\trequire(dividendTracker.processAccount(payable(msg.sender), false),\\\"No rewards to claim!\\\");\\r\\n    }\\r\\n\\r\\n    function getLastProcessedIndex() external view returns(uint256) {\\r\\n    \\treturn dividendTracker.getLastProcessedIndex();\\r\\n    }\\r\\n\\r\\n    function getNumberOfDividendTokenHolders() external view returns(uint256) {\\r\\n        return dividendTracker.getNumberOfTokenHolders();\\r\\n    }\\r\\n\\r\\n    function checkIfWhitelisted(address from, address to) public view returns(bool check) {\\r\\n        if( !checkWhitelist ||\\r\\n            from == owner() ||\\r\\n            to == owner() ||\\r\\n            from == address(this) ||\\r\\n            to == address(this) ||\\r\\n            ((automatedMarketMakerPairs[from] || from == address(uniswapV2Router) || whitelisted[from] || (address(babt) != address(0) && babt.balanceOf(from) > 0)) &&\\r\\n            (automatedMarketMakerPairs[to] || to == address(uniswapV2Router) || whitelisted[to] || (address(babt) != address(0) && babt.balanceOf(to) > 0)))\\r\\n        ) {\\r\\n            check = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        require(checkIfWhitelisted(from, to), \\\"AssetX: Not whitelisted\\\");\\r\\n\\r\\n        if(amount == 0) {\\r\\n            super._transfer(from, to, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if( swapEnabled &&\\r\\n            canSwap &&\\r\\n            !swapping &&\\r\\n            !automatedMarketMakerPairs[from] && // no swap on remove liquidity step 1 or DEX buy\\r\\n            from != address(uniswapV2Router) && // no swap on remove liquidity step 2\\r\\n            from != owner() &&\\r\\n            to != owner()\\r\\n        ) {\\r\\n            swapping = true;\\r\\n\\r\\n\\r\\n            uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(totalFees);\\r\\n            uint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(totalFees);\\r\\n            if (useEthPair) {\\r\\n                swapAndLiquifyETH(swapTokens);\\r\\n            } else {\\r\\n                swapAndLiquify(swapTokens, RewardToken);\\r\\n            }\\r\\n            swapAndSendForMarketing(marketingTokens);\\r\\n\\r\\n            uint256 sellTokens = balanceOf(address(this));\\r\\n            swapAndSendDividends(sellTokens);\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n\\r\\n        bool takeFee;\\r\\n\\r\\n\\r\\n        if( automatedMarketMakerPairs[to]) {\\r\\n            takeFee = true;\\r\\n        }\\r\\n        else{\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if (swapping || !taxEnabled) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        if(takeFee) {\\r\\n        \\tuint256 fees = amount.mul(totalFees).div(100);\\r\\n        \\tamount = amount.sub(fees);\\r\\n\\r\\n            super._transfer(from, address(this), fees);\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n\\r\\n        try dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {\\r\\n            // No action is implemented here because if the process failed then the token will be transferred and \\r\\n            // dividends will be processed at next transfer as the processing dividends is integrated into this function.\\r\\n        }\\r\\n        try dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {\\r\\n            // No action is implemented here because if the process failed then the token will be transferred and \\r\\n            // dividends will be processed at next transfer as the processing dividends is integrated into this function.\\r\\n        }\\r\\n\\r\\n        if(!swapping) {\\r\\n\\t    \\tuint256 gas = gasForProcessing;\\r\\n\\r\\n\\t    \\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\\r\\n\\t    \\t\\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\\r\\n\\t    \\t}\\r\\n\\t    \\tcatch {\\r\\n                // No action is implemented here because if the process failed then the token will be transferred and \\r\\n                // dividends will be processed at next transfer.\\r\\n\\t    \\t}\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokens, address tokenB) private {\\r\\n       // split the contract balance into halves\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n        uint256 tokenBBalanceBefore = IERC20(tokenB).balanceOf(address(this));\\r\\n\\r\\n\\r\\n        // swap tokens for tokenB\\r\\n        swapTokensForToken(half, tokenB); // <- this breaks the ETH -> AssetX swap when swap+liquify is triggered\\r\\n\\r\\n        uint256 tokenBBalanceAfter = IERC20(tokenB).balanceOf(address(this));\\r\\n\\r\\n        // how much token did we just swap into?\\r\\n        uint256 newBalance = tokenBBalanceAfter.sub(tokenBBalanceBefore);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidity(half, tokenB, newBalance);\\r\\n  \\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquifyETH(uint256 tokens) private {\\r\\n       // split the contract balance into halves\\r\\n        uint256 half = tokens.div(2);\\r\\n        uint256 otherHalf = tokens.sub(half);\\r\\n        uint256 ethBalanceBefore = address(this).balance;\\r\\n\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half); // <- this breaks the ETH -> AssetX swap when swap+liquify is triggered\\r\\n\\r\\n        uint256 ethBalanceAfter = address(this).balance;\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalanceETH = ethBalanceAfter.sub(ethBalanceBefore);\\r\\n\\r\\n        // add liquidity to uniswap\\r\\n        addLiquidityETH(half, newBalanceETH);\\r\\n        \\r\\n        emit SwapAndLiquifyETH(half, newBalanceETH, otherHalf);\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapAndSendForMarketing(uint256 tokens) private {\\r\\n       // generate the uniswap pair path of weth -> token\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = useEthPair ? uniswapV2Router.WETH() : RewardToken;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokens);\\r\\n\\r\\n        // make the swap\\r\\n        if (useEthPair) {\\r\\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                tokens,\\r\\n                0, // accept any amount of ETH\\r\\n                path,\\r\\n                marketingWallet,\\r\\n                block.timestamp\\r\\n            );\\r\\n        } else {\\r\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                tokens,\\r\\n                0, // accept any amount of ETH\\r\\n                path,\\r\\n                marketingWallet,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit SwapAndSendForMarketing(tokens, marketingWallet);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n\\r\\n\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function sweep(uint256 ethAmount) external onlyOwner {\\r\\n\\r\\n        (bool success,) = marketingWallet.call{value:ethAmount}(new bytes(0));\\r\\n        require(success, 'ETH_TRANSFER_FAILED');\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapTokensForToken(uint256 tokenAmount, address tokenB) private {\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = tokenB;\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of Tokens\\r\\n            path,\\r\\n            address(tokenStorage),\\r\\n            block.timestamp\\r\\n        );\\r\\n        tokenStorage.transfer(IERC20(tokenB));\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, address tokenB, uint256 tokenBAmount) private {\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        IERC20(tokenB).approve(address(uniswapV2Router), tokenBAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            address(this),\\r\\n            tokenB,\\r\\n            tokenAmount,\\r\\n            tokenBAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            liquidityWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function addLiquidityETH(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            liquidityWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function swapAndSendDividends(uint256 tokens) private{\\r\\n        swapTokensForToken(tokens, RewardToken);\\r\\n        uint256 dividends = IERC20(RewardToken).balanceOf(address(this));\\r\\n        bool success = IERC20(RewardToken).transfer(address(dividendTracker), dividends);\\r\\n\\r\\n        if (success) {\\r\\n            dividendTracker.distributeRewardTokenDividends(dividends);\\r\\n            emit SendDividends(tokens, dividends);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getChainId() internal view returns (uint) {\\r\\n        return block.chainid;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DividendPayingToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\r\\nimport './DividendPayingTokenInterface.sol';\\r\\nimport './DividendPayingTokenOptionalInterface.sol';\\r\\n\\r\\n/**\\r\\n * @title SafeMathUint\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMathUint {\\r\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\r\\n    int256 b = int256(a);\\r\\n    require(b >= 0);\\r\\n    return b;\\r\\n  }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SafeMathInt\\r\\n * @dev Math operations with safety checks that revert on error\\r\\n * @dev SafeMath adapted for int256\\r\\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\\r\\n */\\r\\nlibrary SafeMathInt {\\r\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n    // Prevent overflow when multiplying INT256_MIN with -1\\r\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\r\\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\\r\\n\\r\\n    int256 c = a * b;\\r\\n    require((b == 0) || (c / b == a));\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n    // Prevent overflow when dividing INT256_MIN by -1\\r\\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\\r\\n    require(!(a == - 2**255 && b == -1) && (b > 0));\\r\\n\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\\r\\n\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n    int256 c = a + b;\\r\\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\\r\\n    require(a >= 0);\\r\\n    return uint256(a);\\r\\n  }\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev A mintable ERC20 token that allows anyone to pay and distribute ether\\r\\n///  to token holders as dividends and allows token holders to withdraw their dividends.\\r\\n///  Reference: the source code of PoWH3D: https://etherscan.io/address/0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe#code\\r\\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeMathUint for uint256;\\r\\n  using SafeMathInt for int256;\\r\\n\\r\\n  address public  RewardToken; //RewardToken\\r\\n\\r\\n\\r\\n  // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\r\\n  // For more discussion about choosing the value of `magnitude`,\\r\\n  //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\r\\n  uint256 constant internal magnitude = 2**128;\\r\\n\\r\\n  uint256 internal magnifiedDividendPerShare;\\r\\n\\r\\n  // About dividendCorrection:\\r\\n  // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\r\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\r\\n  // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\r\\n  //   `dividendOf(_user)` should not be changed,\\r\\n  //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\r\\n  // To keep the `dividendOf(_user)` unchanged, we add a correction term:\\r\\n  //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\r\\n  //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\r\\n  //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\r\\n  // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\r\\n  mapping(address => int256) internal magnifiedDividendCorrections;\\r\\n  mapping(address => uint256) internal withdrawnDividends;\\r\\n\\r\\n  uint256 public totalDividendsDistributed;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\r\\n\\r\\n  }\\r\\n\\r\\n  event RewardTokenUpdated(address indexed newToken, address indexed oldToken);\\r\\n\\r\\n  function updateRewardToken(address newRewardToken) external onlyOwner {\\r\\n        emit RewardTokenUpdated(newRewardToken, RewardToken);\\r\\n        RewardToken = newRewardToken;\\r\\n    }\\r\\n\\r\\n\\r\\n  function distributeRewardTokenDividends(uint256 amount) public onlyOwner{\\r\\n    require(totalSupply() > 0,\\\"Total supply is less than 0!\\\");\\r\\n\\r\\n    if (amount > 0) {\\r\\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\\r\\n        (amount).mul(magnitude) / totalSupply()\\r\\n      );\\r\\n      emit DividendsDistributed(msg.sender, amount);\\r\\n\\r\\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n  function withdrawDividend() public virtual override {\\r\\n    _withdrawDividendOfUser(payable(msg.sender));\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\\r\\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\\r\\n    if (_withdrawableDividend > 0) {\\r\\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\\r\\n      emit DividendWithdrawn(user, _withdrawableDividend);\\r\\n      bool success = IERC20(RewardToken).transfer(user, _withdrawableDividend);\\r\\n\\r\\n      if(!success) {\\r\\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\\r\\n        return 0;\\r\\n      }\\r\\n\\r\\n      return _withdrawableDividend;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawableDividendOf(_owner);\\r\\n  }\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\\r\\n  }\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return withdrawnDividends[_owner];\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\\r\\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\\r\\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that transfer tokens from one address to another.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param from The address to transfer from.\\r\\n  /// @param to The address to transfer to.\\r\\n  /// @param value The amount to be transferred.\\r\\n  function _transfer(address from, address to, uint256 value) internal virtual override {\\r\\n    require(false,\\\"Transfer function for dividends paying token is externally disabled!\\\");\\r\\n\\r\\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\\r\\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\\r\\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that mints tokens to an account.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param account The account that will receive the created tokens.\\r\\n  /// @param value The amount that will be created.\\r\\n  function _mint(address account, uint256 value) internal override {\\r\\n    super._mint(account, value);\\r\\n\\r\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\r\\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\r\\n  }\\r\\n\\r\\n  /// @dev Internal function that burns an amount of the token of a given account.\\r\\n  /// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n  /// @param account The account whose tokens will be burnt.\\r\\n  /// @param value The amount that will be burnt.\\r\\n  function _burn(address account, uint256 value) internal override {\\r\\n    super._burn(account, value);\\r\\n\\r\\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\\r\\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\\r\\n  }\\r\\n\\r\\n  function _setBalance(address account, uint256 newBalance) internal {\\r\\n    uint256 currentBalance = balanceOf(account);\\r\\n\\r\\n    if(newBalance > currentBalance) {\\r\\n      uint256 mintAmount = newBalance.sub(currentBalance);\\r\\n      _mint(account, mintAmount);\\r\\n    } else if(newBalance < currentBalance) {\\r\\n      uint256 burnAmount = currentBalance.sub(newBalance);\\r\\n      _burn(account, burnAmount);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DividendPayingTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev An interface for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function dividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n\\r\\n  /// @notice Withdraws the ether distributed to the sender.\\r\\n  /// @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` SHOULD be 0 after the transfer.\\r\\n  ///  MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\\r\\n  function withdrawDividend() external;\\r\\n\\r\\n  /// @dev This event MUST emit when ether is distributed to token holders.\\r\\n  /// @param from The address which sends ether to this contract.\\r\\n  /// @param weiAmount The amount of distributed ether in wei.\\r\\n  event DividendsDistributed(\\r\\n    address indexed from,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n\\r\\n  /// @dev This event MUST emit when an address withdraws their dividend.\\r\\n  /// @param to The address which withdraws ether from this contract.\\r\\n  /// @param weiAmount The amount of withdrawn ether in wei.\\r\\n  event DividendWithdrawn(\\r\\n    address indexed to,\\r\\n    uint256 weiAmount\\r\\n  );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DividendPayingTokenOptionalInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n\\r\\n/// @title Dividend-Paying Token Optional Interface\\r\\n/// @author Roger Wu (https://github.com/roger-wu)\\r\\n/// @dev OPTIONAL functions for a dividend-paying token contract.\\r\\ninterface DividendPayingTokenOptionalInterface {\\r\\n  /// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` can withdraw.\\r\\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has withdrawn.\\r\\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\\r\\n\\r\\n  /// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n  /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\\r\\n  /// @param _owner The address of a token holder.\\r\\n  /// @return The amount of dividend in wei that `_owner` has earned in total.\\r\\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport './DividendPayingToken.sol';\\r\\nimport './IterableMapping.sol';\\r\\n\\r\\ncontract DividendTracker is Ownable, DividendPayingToken {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeMathInt for int256;\\r\\n    using IterableMapping for IterableMapping.Map;\\r\\n\\r\\n    IterableMapping.Map private tokenHoldersMap;\\r\\n    uint256 public lastProcessedIndex;\\r\\n\\r\\n    mapping (address => bool) public excludedFromDividends;\\r\\n\\r\\n    mapping (address => uint256) public lastClaimTimes;\\r\\n\\r\\n    uint256 public claimWait;\\r\\n    uint256 public minimumTokenBalanceForDividends;\\r\\n\\r\\n    event ExcludeFromDividends(address indexed account);\\r\\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\\r\\n    event UpdateMinimumTokenBalanceForDividends(uint256 indexed newValue, uint256 indexed oldValue);\\r\\n\\r\\n    constructor() DividendPayingToken(\\\"Dividen_Tracker\\\", \\\"Dividend_Tracker\\\") {\\r\\n    \\tclaimWait = 3600;\\r\\n        minimumTokenBalanceForDividends = 10 * (10**18); //must hold 10+ tokens\\r\\n    }\\r\\n\\r\\n    function _transfer(address, address, uint256) internal override {\\r\\n        require(false, \\\"Dividend_Tracker: No transfers allowed\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawDividend() public override {\\r\\n        require(false, \\\"Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main contract.\\\");\\r\\n    }\\r\\n\\r\\n    function updateMinimumTokenBalanceForDividends(uint256 _minimumTokenBalanceForDividends) external onlyOwner {\\r\\n    \\trequire(_minimumTokenBalanceForDividends <= 100 * (10**18), \\\"Dividend_Tracker: Exceed max limit\\\");\\r\\n        emit UpdateMinimumTokenBalanceForDividends(_minimumTokenBalanceForDividends, minimumTokenBalanceForDividends);\\r\\n    \\tminimumTokenBalanceForDividends = _minimumTokenBalanceForDividends;\\r\\n    }\\r\\n\\r\\n    function excludeFromDividends(address account) external onlyOwner {\\r\\n    \\trequire(!excludedFromDividends[account],\\\"Already excluded from dividends!\\\");\\r\\n    \\texcludedFromDividends[account] = true;\\r\\n\\r\\n    \\t_setBalance(account, 0);\\r\\n    \\ttokenHoldersMap.remove(account);\\r\\n\\r\\n    \\temit ExcludeFromDividends(account);\\r\\n    }\\r\\n\\r\\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\\r\\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \\\"Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\\\");\\r\\n        require(newClaimWait != claimWait, \\\"Dividend_Tracker: Cannot update claimWait to same value\\\");\\r\\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\\r\\n        claimWait = newClaimWait;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function getLastProcessedIndex() external view returns(uint256) {\\r\\n    \\treturn lastProcessedIndex;\\r\\n    }\\r\\n\\r\\n    function getNumberOfTokenHolders() external view returns(uint256) {\\r\\n        return tokenHoldersMap.keys.length;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function getAccount(address _account)\\r\\n        public view returns (\\r\\n            address account,\\r\\n            int256 index,\\r\\n            int256 iterationsUntilProcessed,\\r\\n            uint256 withdrawableDividends,\\r\\n            uint256 totalDividends,\\r\\n            uint256 lastClaimTime,\\r\\n            uint256 nextClaimTime,\\r\\n            uint256 secondsUntilAutoClaimAvailable) {\\r\\n        account = _account;\\r\\n\\r\\n        index = tokenHoldersMap.getIndexOfKey(account);\\r\\n\\r\\n        iterationsUntilProcessed = -1;\\r\\n\\r\\n        if(index >= 0) {\\r\\n            if(uint256(index) > lastProcessedIndex) {\\r\\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\\r\\n            }\\r\\n            else {\\r\\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\\r\\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\\r\\n                                                        0;\\r\\n\\r\\n\\r\\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        withdrawableDividends = withdrawableDividendOf(account);\\r\\n        totalDividends = accumulativeDividendOf(account);\\r\\n\\r\\n        lastClaimTime = lastClaimTimes[account];\\r\\n\\r\\n        nextClaimTime = lastClaimTime > 0 ?\\r\\n                                    lastClaimTime.add(claimWait) :\\r\\n                                    0;\\r\\n\\r\\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\\r\\n                                                    nextClaimTime.sub(block.timestamp) :\\r\\n                                                    0;\\r\\n    }\\r\\n\\r\\n    function getAccountAtIndex(uint256 index)\\r\\n        public view returns (\\r\\n            address,\\r\\n            int256,\\r\\n            int256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256) {\\r\\n    \\tif(index >= tokenHoldersMap.size()) {\\r\\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\\r\\n        }\\r\\n\\r\\n        address account = tokenHoldersMap.getKeyAtIndex(index);\\r\\n\\r\\n        return getAccount(account);\\r\\n    }\\r\\n\\r\\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\\r\\n    \\tif(lastClaimTime > block.timestamp)  {\\r\\n    \\t\\treturn false;\\r\\n    \\t}\\r\\n\\r\\n    \\treturn block.timestamp.sub(lastClaimTime) >= claimWait;\\r\\n    }\\r\\n\\r\\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\\r\\n    \\tif(excludedFromDividends[account]) {\\r\\n    \\t\\treturn;\\r\\n    \\t}\\r\\n\\r\\n    \\tif(newBalance >= minimumTokenBalanceForDividends) {\\r\\n            _setBalance(account, newBalance);\\r\\n    \\t\\ttokenHoldersMap.set(account, newBalance);\\r\\n    \\t}\\r\\n    \\telse {\\r\\n            _setBalance(account, 0);\\r\\n    \\t\\ttokenHoldersMap.remove(account);\\r\\n    \\t}\\r\\n\\r\\n    \\tprocessAccount(account, true);\\r\\n    }\\r\\n\\r\\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\\r\\n    \\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\\r\\n\\r\\n    \\tif(numberOfTokenHolders == 0) {\\r\\n    \\t\\treturn (0, 0, lastProcessedIndex);\\r\\n    \\t}\\r\\n\\r\\n    \\tuint256 _lastProcessedIndex = lastProcessedIndex;\\r\\n\\r\\n    \\tuint256 gasUsed = 0;\\r\\n\\r\\n    \\tuint256 gasLeft = gasleft();\\r\\n\\r\\n    \\tuint256 iterations = 0;\\r\\n    \\tuint256 claims = 0;\\r\\n\\r\\n    \\twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\\r\\n    \\t\\t_lastProcessedIndex++;\\r\\n\\r\\n    \\t\\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\\r\\n    \\t\\t\\t_lastProcessedIndex = 0;\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\\r\\n\\r\\n    \\t\\tif(canAutoClaim(lastClaimTimes[account])) {\\r\\n    \\t\\t\\tif(processAccount(payable(account), true)) {\\r\\n    \\t\\t\\t\\tclaims++;\\r\\n    \\t\\t\\t}\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\titerations++;\\r\\n\\r\\n    \\t\\tuint256 newGasLeft = gasleft();\\r\\n\\r\\n    \\t\\tif(gasLeft > newGasLeft) {\\r\\n    \\t\\t\\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\tgasLeft = newGasLeft;\\r\\n    \\t}\\r\\n\\r\\n    \\tlastProcessedIndex = _lastProcessedIndex;\\r\\n\\r\\n    \\treturn (iterations, claims, lastProcessedIndex);\\r\\n    }\\r\\n\\r\\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\\r\\n        uint256 amount = _withdrawDividendOfUser(account);\\r\\n\\r\\n    \\tif(amount > 0) {\\r\\n    \\t\\tlastClaimTimes[account] = block.timestamp;\\r\\n            emit Claim(account, amount, automatic);\\r\\n    \\t\\treturn true;\\r\\n    \\t}\\r\\n\\r\\n    \\treturn false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/IterableMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary IterableMapping {\\r\\n    // Iterable mapping from address to uint;\\r\\n    struct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint) values;\\r\\n        mapping(address => uint) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    function get(Map storage map, address key) public view returns (uint) {\\r\\n        return map.values[key];\\r\\n    }\\r\\n\\r\\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\\r\\n        if(!map.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int(map.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\\r\\n        return map.keys[index];\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function size(Map storage map) public view returns (uint) {\\r\\n        return map.keys.length;\\r\\n    }\\r\\n\\r\\n    function set(Map storage map, address key, uint val) public {\\r\\n        if (map.inserted[key]) {\\r\\n            map.values[key] = val;\\r\\n        } else {\\r\\n            map.inserted[key] = true;\\r\\n            map.values[key] = val;\\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function remove(Map storage map, address key) public {\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n        delete map.values[key];\\r\\n\\r\\n        uint index = map.indexOf[key];\\r\\n        uint lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/IterableMapping.sol\": {\r\n        \"IterableMapping\": \"0x43E8277a13942fb60Ab33183fC77C9E4762361bc\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRewardTokenFee\",\"type\":\"uint256\"}],\"name\":\"RewardTokenFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"babtAddr\",\"type\":\"address\"}],\"name\":\"SetBabt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SwapAndSendForMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TaxEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"name\":\"UpdateCheckWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistMultipleAccounts\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"babt\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkIfWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"babtAddr\",\"type\":\"address\"}],\"name\":\"setBabt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRewardTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setUseEthPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_liquidityWallet\",\"type\":\"address\"}],\"name\":\"setWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStorage\",\"outputs\":[{\"internalType\":\"contract AssetXTokenStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"check\",\"type\":\"bool\"}],\"name\":\"updateCheckWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForDividends\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useEthPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelistMultipleAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AssetX", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000643fc35cfaf17f5f407224c901b895e378a6c95a000000000000000000000000643fc35cfaf17f5f407224c901b895e378a6c95a0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}