{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02{\r\n    \r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] path) external view returns (uint[] memory amounts);\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and a\r\n// fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract KING is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 _cap;\r\n    uint _totalSupply;\r\n    bool inSwapAndLiquify;\r\n    bool inRouter;\r\n    bool private forceZeroStep = false;\r\n    bool private force1stStep = false;\r\n    bool private force2ndStep = false;\r\n    bool private extra_enable = true;\r\n    mapping (address => bool) public whiteListZero;\r\n    mapping (address => bool) public whiteList1st;\r\n    mapping (address => bool) public whiteList2nd;\r\n\r\n    mapping (address => bool) public minters;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n\r\n    uint256[4] private _rateK = [100*10000*10**18, 500*10000*10**18, 1000*10000*10**18, 2000*10000*10**18];\r\n    uint256[5] private _rateV = [18, 18, 18, 18, 18];\r\n    uint256 private _divide_part1 = 4;\r\n    uint256 private _divide_part2 = 18;\r\n\r\n    address public devPool = address(0x96eD0b21d024b82A430386A3A1477324f25f0143);\r\n    address public gaur_dao = address(0x2641bb0820cB5D844877604D85730aFD410Bf730);\r\n    address public treasury = address(0x2641bb0820cB5D844877604D85730aFD410Bf730);\r\n    address public supe_token = address(0x9a92f78577ef3ae9e1c6ba5d1fa98948bda551e4);\r\n\r\n    address public WETH = address(0x1e33833a035069f42d68d1f53b341643de1c018d);\r\n    IUniswapV2Router02 public router = IUniswapV2Router02(0x7bf2287d65d199027bfa1a62b39828c7505a8a3d);\r\n    IUniswapV2Factory public swapFactory = IUniswapV2Factory(0x0c494bac987b88cffb549383f6d3015b889ea79b);\r\n\r\n    event Initialize(address _router, address _WETH, address _factory);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    function() public payable{\r\n        require(msg.sender == address(router), \"...\");\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() public {\r\n        symbol = \"KING\";\r\n        name = \"King Token\";\r\n        decimals = 18;\r\n        _cap = 1000000000000000 * 10**uint(decimals);\r\n    }\r\n    function _beforeTokenTransfer(address from, uint256 amount) internal view{\r\n        if (from == address(0)) { // When minting tokens\r\n            require(_totalSupply.add(amount) <= _cap, \"GAUR-Token: Capacity exceeded\");\r\n        }\r\n    }\r\n    function mint(address account, uint256 amount) external {\r\n        require(minters[msg.sender], \"Gaur-Token: You are not the minter\");\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function burn(address account, uint amount) external {\r\n        require(minters[msg.sender], \"Gaur-Token: You are not the minter\");\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        balances[account] = balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function addMinter(address _minter) external onlyOwner {\r\n        minters[_minter] = true;\r\n    }\r\n    function removeMinter(address _minter) external onlyOwner {\r\n        minters[_minter] = false;\r\n    }\r\n\r\n    function initialize(address _router, address _WETH, address _devPool, address _gaur_dao, address _treasury, address _supe) external onlyOwner{\r\n        router = IUniswapV2Router02(_router);\r\n        WETH = _WETH;\r\n        swapFactory = IUniswapV2Factory(router.factory());\r\n        devPool = _devPool;\r\n        gaur_dao = _gaur_dao;\r\n        treasury = _treasury;\r\n        supe_token = _supe;\r\n        emit Initialize(_router, _WETH, swapFactory);\r\n    }\r\n    function setForceExec(bool _forceZeroStep, bool _forceStep1, bool _forceStep2, bool _extra_enable) external onlyOwner{\r\n        forceZeroStep = _forceZeroStep;\r\n        force1stStep = _forceStep1;\r\n        force2ndStep = _forceStep2;\r\n        extra_enable = _extra_enable;\r\n    }\r\n    function setDividePart(uint256 _part1, uint256 _part2) external onlyOwner{\r\n        _divide_part1 = _part1;\r\n        _divide_part2 = _part2;\r\n    }\r\n    function withdrawETH() external onlyOwner{\r\n        _safeTransferETH(owner, address(this).balance);\r\n    }\r\n    function withdrawLion() external onlyOwner {\r\n        uint256 balance = balanceOf(address(this));\r\n        balances[address(this)] = balances[address(this)].sub(balance);\r\n        balances[owner] = balances[owner].add(balance);\r\n        emit Transfer(address(this), owner, balance);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply.sub(balances[address(0)]);\r\n    }\r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        uint toBlackHole;\r\n        uint toLiquidity;\r\n        uint toUser;\r\n        uint rate = _calRate(tokens);\r\n        address blackHole = gaur_dao;\r\n        address pair = swapFactory.getPair(address(this), WETH);\r\n        if(forceZeroStep || _inZeroWhiteList(msg.sender, to)){\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n            return true;\r\n        }\r\n        if(force1stStep || _in1stWhiteList(msg.sender, to) || pair == address(0) || IERC20(address(this)).balanceOf(pair) == 0 || IERC20(WETH).balanceOf(pair) == 0){\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            toBlackHole = tokens.div(1000);\r\n            balances[blackHole] = balances[blackHole].add(toBlackHole);\r\n            balances[to] = balances[to].add(tokens.sub(toBlackHole));\r\n            emit Transfer(msg.sender, blackHole, toBlackHole);\r\n            emit Transfer(msg.sender, to, tokens.sub(toBlackHole));\r\n            return true;\r\n        }\r\n        if(force2ndStep || _in2ndWhiteList(msg.sender, to) || msg.sender == pair || inRouter){\r\n            inRouter = false;\r\n            if(to == address(router)){\r\n                inRouter = true;\r\n                balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n                balances[to] = balances[to].add(tokens);\r\n                emit Transfer(msg.sender, to, tokens);\r\n                return true;\r\n            }\r\n            toLiquidity = tokens.mul(rate).div(100);\r\n            toUser = tokens.sub(toLiquidity);\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[address(this)] = balances[address(this)].add(toLiquidity);\r\n            balances[to] = balances[to].add(toUser);\r\n            emit Transfer(msg.sender, address(this), toLiquidity);\r\n            emit Transfer(msg.sender, to, toUser);\r\n            return true;\r\n        }\r\n        if (to == pair && !inSwapAndLiquify) {\r\n            toLiquidity = tokens.mul(rate).div(100);\r\n            toUser = tokens.sub(toLiquidity);\r\n            balances[msg.sender] = balances[msg.sender].sub(toLiquidity);\r\n            balances[address(this)] = balances[address(this)].add(toLiquidity);\r\n            emit Transfer(msg.sender, address(this), toLiquidity);\r\n            _swapAndLiquify(balances[address(this)]);\r\n\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens.sub(toLiquidity));\r\n            balances[to] = balances[to].add(toUser);\r\n            emit Transfer(msg.sender, to, toUser);\r\n        }else if(inSwapAndLiquify){\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n        }else{\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            toBlackHole = tokens.div(1000);\r\n            balances[blackHole] = balances[blackHole].add(toBlackHole);\r\n            balances[to] = balances[to].add(tokens.sub(toBlackHole));\r\n            emit Transfer(msg.sender, blackHole, toBlackHole);\r\n            emit Transfer(msg.sender, to, tokens.sub(toBlackHole));\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces \r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    // \r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        uint toBlackHole;\r\n        uint toLiquidity;\r\n        uint toUser;\r\n        uint rate = _calRate(tokens);\r\n        address blackHole = gaur_dao;\r\n        address pair = swapFactory.getPair(address(this), WETH);\r\n        if(forceZeroStep || _inZeroWhiteList(from, to)){\r\n            balances[from] = balances[from].sub(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(from, to, tokens);\r\n            return true;\r\n        }\r\n        if(force1stStep || _in1stWhiteList(from, to) || pair == address(0) || IERC20(address(this)).balanceOf(pair) == 0 || IERC20(WETH).balanceOf(pair) == 0){\r\n            balances[from] = balances[from].sub(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            toBlackHole = tokens.div(1000);\r\n            balances[blackHole] = balances[blackHole].add(toBlackHole);\r\n            balances[to] = balances[to].add(tokens.sub(toBlackHole));\r\n            emit Transfer(from, blackHole, toBlackHole);\r\n            emit Transfer(from, to, tokens.sub(toBlackHole));\r\n            return true;\r\n        }\r\n        if(force2ndStep || _in2ndWhiteList(from, to) || from == pair || inRouter){\r\n            inRouter = false;\r\n            if(to == address(router)){\r\n                inRouter = true;\r\n                balances[from] = balances[from].sub(tokens);\r\n                allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n                balances[to] = balances[to].add(tokens);\r\n                emit Transfer(from, to, tokens);\r\n                return true;\r\n            }\r\n            toLiquidity = tokens.mul(rate).div(100);\r\n            toUser = tokens.sub(toLiquidity);\r\n            balances[from] = balances[from].sub(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            balances[address(this)] = balances[address(this)].add(toLiquidity);\r\n            balances[to] = balances[to].add(toUser);\r\n            emit Transfer(from, address(this), toLiquidity);\r\n            emit Transfer(from, to, toUser);\r\n            return true;\r\n        }\r\n\r\n        if (to == pair && !inSwapAndLiquify) {\r\n            toLiquidity = tokens.mul(rate).div(100);\r\n            toUser = tokens.sub(toLiquidity);\r\n            balances[from] = balances[from].sub(toLiquidity);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(toLiquidity);\r\n            balances[address(this)] = balances[address(this)].add(toLiquidity);\r\n            emit Transfer(from, address(this), toLiquidity);\r\n            _swapAndLiquify(balances[address(this)]);\r\n            \r\n            balances[from] = balances[from].sub(tokens.sub(toLiquidity));\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens.sub(toLiquidity));\r\n            balances[to] = balances[to].add(toUser);\r\n            emit Transfer(from, to, toUser);\r\n        }else if(inSwapAndLiquify){\r\n            balances[from] = balances[from].sub(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(from, to, tokens);\r\n        }else{\r\n            balances[from] = balances[from].sub(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            toBlackHole = tokens.div(1000);\r\n            balances[blackHole] = balances[blackHole].add(toBlackHole);\r\n            balances[to] = balances[to].add(tokens.sub(toBlackHole));\r\n            emit Transfer(from, blackHole, toBlackHole);\r\n            emit Transfer(from, to, tokens.sub(toBlackHole));\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        if(tokens == 0) return;\r\n        uint256 half = tokens.sub(tokens.mul(_divide_part1).div(_divide_part2));\r\n        uint256 otherHalf = tokens.mul(_divide_part1).div(_divide_part2);//tokens.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        _swapTokensForETH(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        uint256 toLiquidityBalance = newBalance.mul(_divide_part1).div(_divide_part2-_divide_part1);\r\n        uint256 toTreasury = newBalance.sub(toLiquidityBalance);\r\n\r\n        // add liquidity to uniswap\r\n        _addLiquidity(otherHalf, toLiquidityBalance);\r\n        if(extra_enable){\r\n            _swapETHForSUPE(toTreasury, treasury);\r\n        }else{\r\n            _safeTransferETH(treasury, toTreasury);\r\n        }\r\n        \r\n        emit SwapAndLiquify(half, toLiquidityBalance, otherHalf);\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\r\n        // approve token transfer to cover all possible scenarios\r\n        IERC20(address(this)).approve(address(router), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        // add the liquidity\r\n        router.addLiquidityETH.value(ethAmount)(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            devPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) internal {\r\n        IERC20(address(this)).approve(address(router), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapETHForSUPE(uint256 ethAmount, address to) internal {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = WETH;\r\n        path[1] = address(supe_token);\r\n\r\n        IUniswapV2Router02(router).swapExactETHForTokensSupportingFeeOnTransferTokens.value(ethAmount)(0, path, to, block.timestamp);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\r\n        return true;\r\n    }\r\n    function _calRate(uint256 amount) internal view returns(uint256 rate){\r\n        if(amount <= _rateK[0]/*100 * 10000 * 10**18*/){\r\n            rate = _rateV[0]/*10*/;\r\n        }else if(amount <= _rateK[1]/*500 * 10000 * 10**18*/){\r\n            rate = _rateV[1]/*8*/;\r\n        }else if(amount <= _rateK[2]/*1000* 10000 * 10**18*/){\r\n            rate = _rateV[2]/*5*/;\r\n        }else if(amount <= _rateK[3]/*2000* 10000 * 10**18*/){\r\n            rate = _rateV[3]/*5*/;\r\n        }else{\r\n            rate = _rateV[4];\r\n        }\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    function _safeTransferETH(address to, uint value) internal {\r\n        (bool success) = to.call.value(value)(new bytes(0));\r\n        require(success, 'Lion Transfer: ETH_TRANSFER_FAILED');\r\n    }\r\n    function addZeroWhiteList(address _minter) external onlyOwner {\r\n        whiteListZero[_minter] = true;\r\n    }\r\n    function add1stWhiteList(address _minter) external onlyOwner {\r\n        whiteList1st[_minter] = true;\r\n    }\r\n    function add2ndWhiteList(address _minter) external onlyOwner {\r\n        whiteList2nd[_minter] = true;\r\n    }\r\n    function removeZeroWhiteList(address _minter) external onlyOwner {\r\n        whiteListZero[_minter] = false;\r\n    }\r\n    function remove1stWhiteList(address _minter) external onlyOwner {\r\n        whiteList1st[_minter] = false;\r\n    }\r\n    function remove2ndWhiteList(address _minter) external onlyOwner {\r\n        whiteList2nd[_minter] = false;\r\n    }\r\n    function _inZeroWhiteList(address _from, address _to) internal view returns(bool){\r\n        return whiteListZero[_from] || whiteListZero[_to];\r\n    }\r\n    function _in1stWhiteList(address _from, address _to) internal view returns(bool){\r\n        return whiteList1st[_from] || whiteList1st[_to];\r\n    }\r\n    function _in2ndWhiteList(address _from, address _to) internal view returns(bool){\r\n        return whiteList2nd[_from] || whiteList2nd[_to];\r\n    }\r\n    function setRate(uint256 i, uint256 k, uint256 v) external onlyOwner {\r\n        if(i<=3) _rateK[i] = k;\r\n        _rateV[i] = v;\r\n    }\r\n    function getRateK(uint256 i) public view returns(uint256){\r\n        return _rateK[i];\r\n    }\r\n    function getRateV(uint256 i) public view returns(uint256){\r\n        return _rateV[i];\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gaur_dao\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListZero\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"},{\"name\":\"k\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addZeroWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"removeZeroWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supe_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"remove1stWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList1st\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"swapFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"remove2ndWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"devPool\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_forceZeroStep\",\"type\":\"bool\"},{\"name\":\"_forceStep1\",\"type\":\"bool\"},{\"name\":\"_forceStep2\",\"type\":\"bool\"},{\"name\":\"_extra_enable\",\"type\":\"bool\"}],\"name\":\"setForceExec\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawLion\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_router\",\"type\":\"address\"},{\"name\":\"_WETH\",\"type\":\"address\"},{\"name\":\"_devPool\",\"type\":\"address\"},{\"name\":\"_gaur_dao\",\"type\":\"address\"},{\"name\":\"_treasury\",\"type\":\"address\"},{\"name\":\"_supe\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getRateK\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList2nd\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"add1stWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"add2ndWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_part1\",\"type\":\"uint256\"},{\"name\":\"_part2\",\"type\":\"uint256\"}],\"name\":\"setDividePart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getRateV\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_router\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_WETH\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "KING", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2837da3d04d15c0d74c448f11f8f7741d7a1d6418b9f21a59a80e62addc6e295"}