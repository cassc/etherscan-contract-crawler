{"SourceCode": "// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.3.1\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Manageable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Manageable is Context {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address private _owner;\r\n    mapping(address=>bool) public managers;\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n\r\n     modifier onlyManager(){\r\n        require(managers[_msgSender()], \"NOT_MANAGER\");\r\n        _;\r\n    }\r\n\r\n    function addManager(address _manager) public onlyOwner {\r\n        require(_manager != address(0), \"ZERO_ADDRESS\");\r\n        managers[_manager] = true;\r\n    }\r\n  \r\n    function delManager(address _manager) public onlyOwner {\r\n        require(_manager != address(0), \"ZERO_ADDRESS\");\r\n        managers[_manager] = false;\r\n    }\r\n    \r\n}\r\n\r\n\r\n// File contracts/TokenRelease.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n// TokenRelease is used to release tokens by plans\r\n// There is two phases, as following\r\n// -------------------------------------------------------------------------\r\n//                         startBlock (begin the release)\r\n//                              |\r\n// |----config phase------------|-------------release phase-----------------|\r\n//                              |\r\n//           no release         |              can not config\r\n//\r\n\r\ncontract TokenReleaseMGA is Manageable {\r\n     using SafeERC20 for IERC20;\r\n     using SafeMath for uint256;\r\n\r\n    event EmergencyWithdraw(address indexed token, uint256 balance);\r\n    event SetEmergencyAddress(address indexed emergencyAddress);\r\n    event SetUser(address indexed user, uint256 indexed rid, uint256 amount);\r\n    event WithdrawTge(address indexed _user, uint256 indexed _rid, uint256 pendingAmount);\r\n    event WithdrawRelease(address indexed _user, uint256 indexed _rid, uint256 pendingAmount);\r\n\r\n    enum ReleaseType {\r\n        PRE_SEED,\r\n        SEED,\r\n        PRIVATE_I,\r\n        PRIVATE_II,\r\n        STRATEGY,\r\n        ADVISOR,\r\n        TEAM\r\n    }\r\n\r\n    struct ReleasePlan {\r\n        ReleaseType releaseType;\r\n\r\n        uint256 total;                 // Total MGA\r\n        uint256 tge;                   // TGE percentage\r\n        uint256[] schedules;           // Release percentage each epoch\r\n        uint256 lockPeriod;            // Total lock blocks\r\n        uint256 blocksPerReleaseUnit;  // Blocks in each release epoch\r\n\r\n        uint256 accMGAPerShare;        // Accumulated MGAs per share, times 1e12.\r\n        uint256 lastReleaseBlock;      // \r\n        uint256 totalUserAmount;       // totalUserAmount is the sum of users' amount, totalUserAmount == total\r\n        uint256 totalRelease;          // released amount\r\n        uint256 totalWithdraw;         // user withdrawed amount\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 amount;                // The amount MGA user should get in total, used to calc the percentage of \r\n                                       // tgeAmount+releaseAmount <= amount\r\n        uint256 rewardDebt;            //\r\n        uint256 tgeAmount;             // tge amount already got \r\n        uint256 releaseAmount;         // release amount already got\r\n        uint256 index;\r\n    } \r\n\r\n    ReleasePlan[] public releasePlan;\r\n\r\n    // rid --> user --> UserInfo\r\n    mapping(uint256=>mapping(address=>UserInfo)) public userInfo;\r\n    \r\n    // rid --> users\r\n    mapping(uint256=>address[]) public users;\r\n    mapping(address => uint256[]) public userRidList;\r\n    mapping(address => mapping(uint256=>bool)) public userRidListExit; // user -> rid -> bool\r\n\r\n    mapping(address=>uint256) private user2Rid;\r\n\r\n    mapping(ReleaseType=>uint256) private rt2Rid;\r\n\r\n    address public mga;\r\n\r\n    uint256 public startBlock;\r\n\r\n    uint256 public constant BLOCK_PER_TIME_UNIT = 20 * 60 * 24; //time uint is day, one block every 3 seconds\r\n    //uint256 public constant BLOCK_PER_TIME_UNIT = 5; //time uint is day, one block every 3 seconds\r\n\r\n    address public emergencyAddress;\r\n    bool public emergencyStop;\r\n    \r\n    bool public initialized = false;\r\n\r\n    modifier onlyInitializing() {\r\n        require(initialized == false, \"TokenRelease: INITIALIZED\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyActive(){\r\n        require(!emergencyStop,\"Emergency Stop!\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyInitialized() {\r\n        require(initialized == true, \"TokenRelease: INITIALIZING\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _mga, \r\n        uint256 _startBlock, \r\n        address _emergencyAddress) {\r\n        require(_mga != address(0), \"TokenRelease: ZERO_ADDRESS\");\r\n        require(block.number < _startBlock, \"TokenRelease: INVALID_START\");\r\n        require(_emergencyAddress != address(0), \"TokenRelease: ZERO_ADDRESS\");\r\n\r\n        mga = _mga;\r\n        startBlock = _startBlock;\r\n        emergencyAddress = _emergencyAddress;\r\n    }\r\n\r\n    function setEmergencyStop(bool _isStop) public onlyOwner{\r\n        emergencyStop = _isStop;\r\n    }\r\n    \r\n    function getUsersLength(uint256 _rid) public view returns(uint256) {\r\n        return users[_rid].length;\r\n    }\r\n\r\n    function getReleasePlanLength() public view returns(uint256) {\r\n        return releasePlan.length;\r\n    }\r\n\r\n    function getBlockPerTimeUnit() public pure returns(uint256) {\r\n        return BLOCK_PER_TIME_UNIT;\r\n    }\r\n\r\n    function planTotal() public view returns(uint256) {\r\n        uint256 length = releasePlan.length;\r\n        uint256 total;\r\n\r\n        for(uint256 i=0; i<length; i++) {\r\n            total = total.add(releasePlan[i].total);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function releaseTotal() public view returns(uint256) {\r\n        uint256 length = releasePlan.length;\r\n        uint256 total;\r\n\r\n        for(uint256 i=0; i<length; i++) {\r\n            total = total.add(releasePlan[i].totalRelease);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function withdrawTotal() public view returns(uint256) {\r\n        uint256 length = releasePlan.length;\r\n        uint256 total;\r\n\r\n        for(uint256 i=0; i<length; i++) {\r\n            total = total.add(releasePlan[i].totalWithdraw);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function isBalanceEnough() public view returns(bool) {\r\n        return IERC20(mga).balanceOf(address(this)) >= planTotal().sub(withdrawTotal());\r\n    }\r\n\r\n    function checkSchedules(uint256 _tge, uint256[] memory _schedules) internal pure {\r\n        uint256 sum = _tge;\r\n        for(uint256 i=0; i<_schedules.length; i++) {\r\n            sum = sum.add(_schedules[i]);\r\n        }\r\n        require(sum == 100, \"TokenRelease: INVALID_SCHEDULE\");\r\n    }\r\n\r\n    function  checkPrerequisites() public view {\r\n        // Not Start\r\n        require(initialized == false, \"TokenRelease: INITIALIZED\");\r\n        //All Release Plan Configured\r\n        require(releasePlan.length==7, \"TokenRelease: INVALID_RELEASE\");\r\n        //Balance Is Enough\r\n        require(planTotal() <= IERC20(mga).balanceOf(address(this)), \"TokenRelease: BALANCE_NOT_ENOUGH\");\r\n        //Release Plan: total == totalUserAmount, configured user info\r\n        uint256 length = releasePlan.length;\r\n        for(uint256 i=0; i<length; i++) {\r\n            ReleasePlan storage release = releasePlan[i];\r\n            require(release.total == release.totalUserAmount, \"ToKenRelease: WRONG_USER_AMOUNT\");\r\n        }\r\n\r\n        //require(block.number < startBlock, \"TokenRelease: TIME_OUT\");\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        checkPrerequisites();\r\n        initialized = true;\r\n    }\r\n\r\n    function addRelease(\r\n        ReleaseType _releaseType,\r\n        uint256 _total,\r\n        uint256 _tge,\r\n        uint256[] memory _schedules,\r\n        uint256 _lockDays,\r\n        uint256 _releaseDays) public onlyOwner onlyInitializing  {\r\n        require(!isReleaseExist(_releaseType), \"TokenRelease: ALREADY_EXIST\");\r\n        require(_total > 0,                    \"TokenRelease: INVALID_TOTAL\");\r\n        require(_releaseDays > 0,              \"TokenRelease: INVALID_DAY\");\r\n        checkSchedules(_tge, _schedules);\r\n\r\n        uint256 startPoint = startBlock.add(_lockDays.mul(BLOCK_PER_TIME_UNIT));\r\n\r\n        releasePlan.push(ReleasePlan({\r\n            releaseType             : _releaseType,\r\n            total                   : _total,\r\n            tge                     : _tge,\r\n            schedules               : _schedules,\r\n            lockPeriod              : _lockDays.mul(BLOCK_PER_TIME_UNIT),\r\n            blocksPerReleaseUnit    : _releaseDays.mul(BLOCK_PER_TIME_UNIT),\r\n            accMGAPerShare          : 0,\r\n            lastReleaseBlock        : startPoint,\r\n            totalUserAmount         : 0,\r\n            totalRelease            : _total.mul(_tge).div(100),\r\n            totalWithdraw           : 0\r\n        }));\r\n\r\n        rt2Rid[_releaseType] = releasePlan.length;\r\n    }\r\n\r\n    function setRelease(ReleaseType _releaseType,\r\n        uint256 _total,\r\n        uint256 _tge,\r\n        uint256[] memory _schedules,\r\n        uint256 _lockDays,\r\n        uint256 _releaseDays) public  onlyOwner onlyInitializing {\r\n        require(isReleaseExist(_releaseType),  \"TokenRelease: NOT_EXIST\");\r\n        require(_total > 0,                    \"TokenRelease: INVALID_TOTAL\");\r\n        require(_releaseDays > 0,              \"TokenRelease: INVALID_DAY\");\r\n        checkSchedules(_tge, _schedules);\r\n        uint256 startPoint = startBlock.add(_lockDays.mul(BLOCK_PER_TIME_UNIT));\r\n\r\n        ReleasePlan storage release = releasePlan[getRid(_releaseType)];\r\n        release.total                   = _total;\r\n        release.tge                     = _tge;\r\n        release.schedules               = _schedules;\r\n        release.lockPeriod              = _lockDays.mul(BLOCK_PER_TIME_UNIT);\r\n        release.blocksPerReleaseUnit    = _releaseDays.mul(BLOCK_PER_TIME_UNIT);\r\n        release.lastReleaseBlock        = startPoint;\r\n        release.totalRelease            = _total.mul(_tge).div(100);\r\n    }\r\n\r\n    function isReleaseExist(ReleaseType _releaseType) public view returns(bool) {\r\n        return rt2Rid[_releaseType] != uint256(0);\r\n    }\r\n\r\n    \r\n\r\n    function getRid(ReleaseType _releaseType) public view returns(uint256) {\r\n        require(isReleaseExist(_releaseType), \"TokenRelease: NOT_EXIST\");\r\n        return rt2Rid[_releaseType]-1;\r\n    }\r\n\r\n    function getRid(address _user) public view returns(uint256[] memory) {\r\n        \r\n        return userRidList[_user];\r\n    }\r\n\r\n    function releasePhase(uint256 _rid, uint256 blockNumber) public view returns(uint256) {\r\n        ReleasePlan storage release = releasePlan[_rid];\r\n        if(release.blocksPerReleaseUnit == 0) {\r\n            return 0;\r\n        }\r\n\r\n        if (blockNumber > startBlock.add(release.lockPeriod)) {\r\n            return blockNumber.sub(startBlock).sub(release.lockPeriod).sub(1).div(release.blocksPerReleaseUnit).add(1);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function releaseSpeed(uint256 _rid, uint256 blockNumber) public view returns(uint256) {\r\n        uint256 phase = releasePhase(_rid, blockNumber);\r\n\r\n        if(phase > 0) {\r\n            phase = phase-1;\r\n            ReleasePlan storage release = releasePlan[_rid];\r\n\r\n            if(phase < release.schedules.length ) {\r\n                uint amount = release.total.mul(release.schedules[phase]).div(100);\r\n                return amount.div(release.blocksPerReleaseUnit);\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    //  --------------------------------------------------------------------------------------\r\n    // schedules(x%)          0     | ..............| length-2  |  length-1 | length\r\n    // phase      0     |     1     | ............. | length-1  |  length   | length+1\r\n    //        [X][X][X] | [*][*][*] | ............. | [*][*][*] | [*][*][*] | [X][X][X]\r\n    //\r\n\r\n    function getBlockRelease(uint256 _rid, uint256 _blockNumber) public view returns(uint256) {\r\n        ReleasePlan storage release = releasePlan[_rid];\r\n\r\n        uint256 blockRelease = 0;\r\n        uint256 lastReleaseBlock = release.lastReleaseBlock; \r\n        uint256 lastPhase = releasePhase(_rid, lastReleaseBlock);\r\n        uint256 curPhase  = releasePhase(_rid, _blockNumber);\r\n        uint256 startPoint = startBlock.add(release.lockPeriod);\r\n\r\n        if(release.total == 0                       // Invalid release plan   \r\n          || curPhase <= 0 ) {                      // release not start\r\n            return 0;\r\n        }\r\n\r\n        if(lastPhase > release.schedules.length) {\r\n            // release complete, fix round problem\r\n            if(release.totalRelease < release.total) {\r\n                return release.total.sub(release.totalRelease);\r\n            }\r\n            return 0;\r\n        } \r\n\r\n        if(curPhase > release.schedules.length) {\r\n            curPhase = release.schedules.length;\r\n            _blockNumber = startPoint.add(release.blocksPerReleaseUnit.mul(curPhase));\r\n        }\r\n\r\n        while(lastPhase < curPhase) {\r\n            uint256 endPhaseBlock = startPoint.add(release.blocksPerReleaseUnit.mul(lastPhase));\r\n            blockRelease = blockRelease.add(endPhaseBlock.sub(lastReleaseBlock).mul(releaseSpeed(_rid, endPhaseBlock)));\r\n            lastReleaseBlock = endPhaseBlock;\r\n            lastPhase++;\r\n        }\r\n\r\n        blockRelease = blockRelease.add(_blockNumber.sub(lastReleaseBlock).mul(releaseSpeed(_rid, _blockNumber)));\r\n\r\n        return blockRelease;\r\n    }\r\n\r\n    function setUser(ReleaseType _releaseType, address _user, uint256 _amount) public onlyOwner onlyInitializing {\r\n        //user not exist or user can exist only in one release plan\r\n        \r\n\r\n        uint256 rid = getRid(_releaseType);\r\n        ReleasePlan storage release = releasePlan[rid];\r\n        UserInfo storage user = userInfo[rid][_user];\r\n        \r\n        require(!userRidListExit[_user][rid], \"TokenRelease: USER_EXIST\"); \r\n        \r\n        release.totalUserAmount = release.totalUserAmount.sub(user.amount).add(_amount);\r\n        user.amount = _amount;\r\n        user.rewardDebt = 0;\r\n        \r\n        userRidListExit[_user][rid] = true;\r\n        userRidList[_user].push(rid);\r\n        users[rid].push(_user);\r\n        user.index=users[rid].length - 1;\r\n        \r\n\r\n        emit SetUser(_user, rid, _amount);\r\n    } \r\n\r\n    function delUser(ReleaseType _releaseType, address _user) public onlyOwner onlyInitializing {\r\n        uint256 rid = getRid(_releaseType);\r\n\r\n        ReleasePlan storage release = releasePlan[rid];\r\n        UserInfo storage user = userInfo[rid][_user];\r\n\r\n        address lastUserAddress = users[rid][users[rid].length-1];\r\n        UserInfo storage lastUser =userInfo[rid][lastUserAddress];\r\n\r\n        release.totalUserAmount.sub(user.amount);\r\n\r\n        users[rid][user.index] = lastUserAddress;\r\n        lastUser.index = user.index;\r\n\r\n        users[rid].pop();\r\n        delete userInfo[rid][_user];\r\n        delete user2Rid[_user];\r\n\r\n    }\r\n\r\n    function updateRelease(uint256 _rid) public {\r\n        ReleasePlan storage release = releasePlan[_rid];\r\n\r\n        if(block.number <= release.lastReleaseBlock) {\r\n            return;\r\n        }\r\n\r\n        if(release.total == 0 || release.totalRelease >= release.total) {\r\n            release.lastReleaseBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        uint256 blockRelease = getBlockRelease(_rid, block.number);\r\n        if(blockRelease <= 0) {\r\n            release.lastReleaseBlock = block.number;\r\n            return;\r\n        }\r\n\r\n        //release.totalRelease < release.total && blockRelease > 0\r\n        if(blockRelease.add(release.totalRelease) >= release.total) {\r\n            blockRelease = release.total.sub(release.totalRelease);\r\n        }\r\n\r\n        release.accMGAPerShare = release.accMGAPerShare.add(blockRelease.mul(1e12).div(release.totalUserAmount));\r\n        release.totalRelease=release.totalRelease.add(blockRelease);\r\n        release.lastReleaseBlock = block.number;\r\n    }\r\n\r\n    function withdraw() public onlyInitialized onlyActive{\r\n        withdrawInternal(msg.sender);\r\n    }\r\n\r\n    function withdraw(address _user) public onlyOwner onlyInitialized {\r\n        withdrawInternal(_user); \r\n    }\r\n\r\n    function withdrawInternal(address _user) internal  {\r\n        uint256 rid;\r\n        uint256 len = userRidList[_user].length;\r\n        for(uint256 i = 0 ; i < len; i++){\r\n            rid = userRidList[_user][i];\r\n            updateRelease(rid);\r\n            withdrawTge(rid, _user);\r\n            withdrawRelease(rid, _user);\r\n            \r\n        }\r\n    }\r\n\r\n    function withdrawTge(uint256 _rid, address _user) internal {\r\n        ReleasePlan storage release = releasePlan[_rid];\r\n        UserInfo storage user = userInfo[_rid][_user];\r\n\r\n        if(user.amount > 0 && release.tge > 0 && user.tgeAmount <= 0) {\r\n            uint256 pendingAmount = release.total.mul(release.tge).mul(user.amount).div(100).div(release.totalUserAmount);\r\n            safeTransfer(_user, pendingAmount);\r\n            user.tgeAmount = pendingAmount;\r\n            release.totalWithdraw = release.totalWithdraw.add(pendingAmount);\r\n            emit WithdrawTge(_user, _rid, pendingAmount);\r\n        }\r\n    }\r\n\r\n    function withdrawRelease(uint256 _rid, address _user) internal {\r\n        ReleasePlan storage release = releasePlan[_rid];\r\n        UserInfo storage user = userInfo[_rid][_user];\r\n\r\n        if(user.amount > 0) {\r\n            uint256 userTgeTotal     = release.total.mul(release.tge).mul(user.amount).div(100).div(release.totalUserAmount);\r\n            uint256 userReleaseTotal = user.amount.sub(userTgeTotal);\r\n            uint256 pendingAmount = user.amount.mul(release.accMGAPerShare).div(1e12).sub(user.rewardDebt);\r\n            \r\n            if(release.total == release.totalRelease && user.releaseAmount < userReleaseTotal) {\r\n                pendingAmount = userReleaseTotal.sub(user.releaseAmount);\r\n            } \r\n            \r\n            if(pendingAmount > 0) {\r\n                if(user.releaseAmount < userReleaseTotal ) {\r\n                    if(pendingAmount.add(user.releaseAmount) >= userReleaseTotal) {\r\n                         pendingAmount = userReleaseTotal.sub(user.releaseAmount);\r\n                    }\r\n\r\n                    safeTransfer(_user, pendingAmount);\r\n                    user.releaseAmount = user.releaseAmount.add(pendingAmount);\r\n                    release.totalWithdraw = release.totalWithdraw.add(pendingAmount);\r\n                    emit WithdrawRelease(_user, _rid, pendingAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        user.rewardDebt = user.amount.mul(release.accMGAPerShare).div(1e12);\r\n    }\r\n\r\n    function pending(address _user) public view returns(uint256)  {\r\n        return pendingTge(_user).add(pendingRelease(_user));\r\n    }\r\n\r\n    function pendingTge(address _user) public view returns(uint256) {\r\n        uint256 totalPending;\r\n        uint256 len = userRidList[_user].length;\r\n        for(uint256 i = 0 ; i < len; i++){\r\n            totalPending = totalPending.add(pendingTgeInternal(_user,userRidList[_user][i]));\r\n        }\r\n        \r\n        return totalPending;\r\n    }\r\n    \r\n    function pendingTgeInternal(address _user,uint256 rid) internal view returns(uint256){\r\n        ReleasePlan storage release = releasePlan[rid];\r\n        UserInfo storage user = userInfo[rid][_user];\r\n\r\n        if(user.amount > 0 && release.tge > 0 && user.tgeAmount <= 0) {\r\n            return release.total.mul(release.tge).mul(user.amount).div(100).div(release.totalUserAmount);\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function pendingRelease(address _user) public view returns(uint256) {\r\n        uint256 total;\r\n        uint256 len = userRidList[_user].length;\r\n        for(uint256 i = 0 ; i < len; i++){\r\n            total = total.add(pendingReleaseInternal(_user,userRidList[_user][i]));\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function pendingReleaseInternal(address _user,uint256 rid) public view returns(uint256) {\r\n        ReleasePlan storage release = releasePlan[rid];\r\n        UserInfo storage user = userInfo[rid][_user];\r\n        uint256 accMGAPerShare = release.accMGAPerShare;\r\n\r\n        if(block.number > release.lastReleaseBlock) {\r\n            uint256 blockRelease = getBlockRelease(rid, block.number);\r\n            accMGAPerShare = accMGAPerShare.add(blockRelease.mul(1e12).div(release.totalUserAmount)); \r\n        }\r\n\r\n        return user.amount.mul(accMGAPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function safeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 balance = IERC20(mga).balanceOf(address(this));\r\n        require(balance >= _amount, \"TokenRelease: NOT_ENOUGH\");\r\n\r\n        IERC20(mga).safeTransfer(_to, _amount);\r\n    }\r\n\r\n    function emergencyWithdraw() public onlyOwner {\r\n        uint256 balance = IERC20(mga).balanceOf(address(this));\r\n        require(balance > 0, \"TokenRelease: ZERO_BALANCE\");\r\n        IERC20(mga).safeTransfer(emergencyAddress, balance);\r\n        emit EmergencyWithdraw(mga, balance);\r\n    }\r\n\r\n    function setEmergencyAddress(address _emergencyAddress) external onlyOwner {\r\n        require(_emergencyAddress != address(0), \"TokenRelease: ZERO_ADDRESS\");\r\n        emergencyAddress = _emergencyAddress;\r\n        emit SetEmergencyAddress(_emergencyAddress);\r\n    } \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mga\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_emergencyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"emergencyAddress\",\"type\":\"address\"}],\"name\":\"SetEmergencyAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCK_PER_TIME_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"_releaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tge\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_schedules\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDays\",\"type\":\"uint256\"}],\"name\":\"addRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPrerequisites\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"delManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"_releaseType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"delUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockPerTimeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleasePlanLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getRid\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"_releaseType\",\"type\":\"uint8\"}],\"name\":\"getRid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"}],\"name\":\"getUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBalanceEnough\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"_releaseType\",\"type\":\"uint8\"}],\"name\":\"isReleaseExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mga\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rid\",\"type\":\"uint256\"}],\"name\":\"pendingReleaseInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"planTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"releasePhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releasePlan\",\"outputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"releaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerReleaseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accMGAPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReleaseBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUserAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"releaseSpeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyAddress\",\"type\":\"address\"}],\"name\":\"setEmergencyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStop\",\"type\":\"bool\"}],\"name\":\"setEmergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"_releaseType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tge\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_schedules\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_releaseDays\",\"type\":\"uint256\"}],\"name\":\"setRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TokenReleaseMGA.ReleaseType\",\"name\":\"_releaseType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"}],\"name\":\"updateRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRidList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userRidListExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenReleaseMGA", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000003ac6ab6a9a91a0fcdec7d85b38bdfbb719ec02f0000000000000000000000000000000000000000000000000000000000c78b8f000000000000000000000000f0328e11c6a81bd67f1b873b6dd544474e1b87b4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c2faf0bbf43e98c38044f075609ef58120fc1e3369cd689ac5a69cd4d3aa7dc9"}