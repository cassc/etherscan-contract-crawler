{"SourceCode": "/**\r\n * SPDX-License-Identifier: MIT\r\n */\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    unchecked { require(b <= a, errorMessage); return a - b; }\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) { uint256 size; assembly { size := extcodesize(account) } return size > 0;}\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {return functionCall(target, data, \"Address: low-level call failed\");}\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {return functionCallWithValue(target, data, 0, errorMessage);}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");}\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) { return returndata; } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    function getUnlockTime() external view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n    function lock(uint256 time) external virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    function unlock() external virtual {\r\n        require(_previousOwner == msg.sender, \"Only the previous owner can unlock onwership\");\r\n        require(block.timestamp > _lockTime , \"The contract is still locked\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n        _previousOwner = address(0);\r\n    }\r\n}\r\nabstract contract Manageable is Context {\r\n    address private _manager;\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n    constructor(){\r\n        address msgSender = _msgSender();\r\n        _manager = msgSender;\r\n        emit ManagementTransferred(address(0), msgSender);\r\n    }\r\n    function manager() external view returns(address){ return _manager; }\r\n    modifier onlyManager(){\r\n        require(_manager == _msgSender(), \"Manageable: caller is not the manager\");\r\n        _;\r\n    }\r\n    function transferManagement(address newManager) external virtual onlyManager {\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n    }\r\n}\r\ninterface IPancakeV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IPancakeV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\ninterface IPancakeV2Pair {\r\n    function decimals() external pure returns (uint8);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n/**\r\n * Tokenomics:\r\n *\r\n * Protection       3%\r\n * Liquidity        3%\r\n * Rewarding        2%\r\n * Redistribution   1%\r\n * Burn             1%\r\n */\r\n\r\nabstract contract Tokenomics {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // --------------------- Token Settings ------------------- //\r\n\r\n    string internal constant NAME = \"NSUR\";\r\n    string internal constant SYMBOL = \"NSUR\";\r\n\r\n    uint16 internal constant FEES_DIVISOR = 10**3;\r\n    uint8 internal constant DECIMALS = 6;\r\n    uint256 internal constant ZEROES = 10**DECIMALS;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 internal constant TOTAL_SUPPLY = 200000000000 * ZEROES;\r\n    uint256 internal _reflectedSupply = (MAX - (MAX % TOTAL_SUPPLY));\r\n\r\n    // --------------------- Fees Settings ------------------- //\r\n\r\n    address internal constant ProtectedAddress = 0x85FA6B211f4511656d4B8a1C15752aB8433dd534;\r\n    address internal constant liquidityAddress = 0xD8D90330c9Bfe5b683036c96FD2cb80aac3c8639;\r\n    address internal constant RewardingAddress = 0xBE362Aaa1bBaa6276babA2d43b14F6DcD0350f27;\r\n    address internal constant burnAddress = 0x0000000000000000000000000000000000000001;\r\n\r\n    uint256 internal numberOfTokensToSwapToLiquidity = 50000 ; // Amount in USD\r\n\r\n    enum FeeType { Burn, Liquidity, Rfi, ExternalWithEvent }\r\n    struct Fee {\r\n        FeeType name;\r\n        uint256 value;\r\n        address recipient;\r\n        uint256 total;\r\n    }\r\n\r\n    Fee[] internal fees;\r\n    uint256 internal sumOfFees;\r\n\r\n    constructor() {\r\n        _addFees();\r\n    }\r\n\r\n    function _addFee(FeeType name, uint256 value, address recipient) private {\r\n        fees.push( Fee(name, value, recipient, 0 ) );\r\n        sumOfFees += value;\r\n    }\r\n\r\n    function _addFees() private {\r\n        _addFee(FeeType.ExternalWithEvent, 30, ProtectedAddress );\r\n        _addFee(FeeType.Liquidity, 15, address(this) );\r\n        _addFee(FeeType.ExternalWithEvent, 15, liquidityAddress );\r\n        _addFee(FeeType.ExternalWithEvent, 20, RewardingAddress );\r\n        _addFee(FeeType.Burn, 10, burnAddress );\r\n        _addFee(FeeType.Rfi, 10, address(this) );\r\n    }\r\n\r\n    function _getFeesCount() internal view returns (uint256){ return fees.length; }\r\n\r\n    function _getFeeStruct(uint256 index) private view returns(Fee storage){\r\n        require( index < fees.length, \"FeesSettings._getFeeStruct: Fee index out of bounds\");\r\n        return fees[index];\r\n    }\r\n    function getFee(uint256 index) external view returns (FeeType, uint256, address, uint256){\r\n        return _getFee(index);\r\n    }\r\n    function _getFee(uint256 index) internal view returns (FeeType, uint256, address, uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return ( fee.name, fee.value, fee.recipient, fee.total );\r\n    }\r\n    function _addFeeCollectedAmount(uint256 index, uint256 amount) internal {\r\n        Fee storage fee = _getFeeStruct(index);\r\n        fee.total = fee.total.add(amount);\r\n    }\r\n    function getCollectedFeeTotal(uint256 index) external view returns (uint256){\r\n        Fee memory fee = _getFeeStruct(index);\r\n        return fee.total;\r\n    }\r\n}\r\n\r\nabstract contract BaseRfiToken is IERC20, IERC20Metadata, Ownable, Tokenomics {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) internal _protectedBalances;\r\n    mapping (address => uint256) internal _protectedDcas;\r\n\r\n    mapping (address => uint256) internal _reflectedBalances;\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    mapping (address => bool) internal _isExcludedFromFee;\r\n    mapping (address => bool) internal _isExcludedFromRewards;\r\n    address[] private _excluded;\r\n\r\n    mapping (uint256 => bool) internal _rewardJobs;\r\n\r\n    uint256 holders = 1;\r\n\r\n    constructor(){\r\n\r\n        _reflectedBalances[owner()] = _reflectedSupply;\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        // exclude the owner and this contract from rewards\r\n        _exclude(owner());\r\n\r\n        emit Transfer(address(0), owner(), TOTAL_SUPPLY);\r\n\r\n    }\r\n\r\n    // --------------------- Events ------------------- //\r\n\r\n    event protectedTransferEvent(address indexed recipient, uint256 indexed amount, uint256 indexed protectedPrice);\r\n    event setnumberOfTokensToSwapToLiquidityEvent(uint256 indexed value);\r\n    event excludeFromRewardEvent(address indexed account);\r\n    event includeInRewardEvent(address indexed account);\r\n    event setExcludedFromFeeEvent(address indexed account, bool indexed value);\r\n    event claimRewardEvent(address indexed to, uint256 indexed amount, uint256 indexed rewardId);\r\n\r\n    /** Functions required by IERC20Metadat **/\r\n    function name() external pure override returns (string memory) { return NAME; }\r\n    function symbol() external pure override returns (string memory) { return SYMBOL; }\r\n    function decimals() external pure override returns (uint8) { return DECIMALS; }\r\n    /** Functions required by IERC20Metadat - END **/\r\n\r\n    /** Functions required by IERC20 **/\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256){\r\n        if (_isExcludedFromRewards[account]) return _balances[account];\r\n        return tokenFromReflection(_reflectedBalances[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    /** Functions required by IERC20 - END **/\r\n\r\n    /** Functions required by NSUR **/\r\n    function protectedTransfer(address recipient, uint256 amount, uint256 protectedPrice) external onlyOwner returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        uint256 currentPrice = _getCurrentPrice();\r\n        if(protectedPrice > 0){\r\n            currentPrice = protectedPrice;\r\n        }\r\n        if(_protectedBalances[recipient]>0){\r\n            uint256 b1 = _protectedBalances[recipient];\r\n            uint256 t1 = _protectedDcas[recipient];\r\n            uint256 c1 = b1 / t1;\r\n            uint256 b2 = amount * currentPrice / 1_000_000;\r\n            uint256 t2 = currentPrice;\r\n            uint256 c2 = b2 / t2;\r\n            uint256 dca1 = (b1+b2) / (c1+c2);\r\n            _protectedBalances[recipient] = _protectedBalances[recipient].add(b2);\r\n            _protectedDcas[recipient] = dca1;\r\n        }else{\r\n            _protectedBalances[recipient] = amount * currentPrice / 1_000_000;\r\n            _protectedDcas[recipient] = currentPrice;\r\n        }\r\n        emit protectedTransferEvent(recipient, amount, currentPrice);\r\n        return true;\r\n    }\r\n    function setProtected(address recipient,  uint256 protectedDca, uint256 protectedBalance) external onlyOwner {\r\n        _protectedDcas[recipient] = protectedDca;\r\n        _protectedBalances[recipient] = protectedBalance;\r\n    }\r\n    function getCurrentPrice() external view returns (uint256){\r\n        return _getCurrentPrice();\r\n    }\r\n    function getHolders() external view returns (uint256){\r\n        return holders;\r\n    }\r\n    function getnumberOfTokensToSwapToLiquidity() external view returns (uint256){\r\n        return numberOfTokensToSwapToLiquidity;\r\n    }\r\n    function setnumberOfTokensToSwapToLiquidity(uint256 value) external onlyOwner {\r\n        numberOfTokensToSwapToLiquidity = value;\r\n        emit setnumberOfTokensToSwapToLiquidityEvent(value);\r\n    }\r\n    function getProtectedValue(address account) external view returns (uint256){\r\n        return _protectedBalances[account];\r\n    }\r\n    function getProtectedDca(address account) external view returns (uint256){\r\n        return _protectedDcas[account];\r\n    }\r\n    function setFee(uint256 index, FeeType feename, uint256 value, address recipient) external onlyOwner {\r\n        fees[index] = Fee(feename, value, recipient, 0 );\r\n    }\r\n    /** Functions required by NSUR - END **/\r\n\r\n    /** Functions for Claiming Rewards **/\r\n\r\n    function claimReward(uint256 rewardId, uint256 amount, bytes memory _signature) external returns (bool){\r\n        bytes32 message = keccak256(abi.encodePacked(rewardId, amount));\r\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\r\n        require( owner() == ecrecover(message, v, r, s), \"Message not signed by the owner or invalid values\");\r\n        require( _rewardJobs[rewardId] != true, \"Reward Already Claimed\");\r\n        _rewardJobs[rewardId] = true;\r\n        _transfer(owner(), _msgSender(), amount);\r\n        emit claimRewardEvent(_msgSender(), amount, rewardId);\r\n        return true;\r\n    }\r\n\r\n    function getReward(uint256 rewardId) external view returns (bool){\r\n        return _rewardJobs[rewardId];\r\n    }\r\n\r\n    function splitSignature(bytes memory sig) internal pure returns (uint8 v, bytes32 r, bytes32 s){\r\n        require(sig.length == 65);\r\n        assembly {\r\n            r := mload(add(sig, 32))\r\n            s := mload(add(sig, 64))\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n    }\r\n\r\n    /** End Functions for Claiming Rewards **/\r\n\r\n\r\n    function burn(uint256 amount) external {\r\n\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"BaseRfiToken: burn from the zero address\");\r\n        require(sender != address(burnAddress), \"BaseRfiToken: burn from the burn address\");\r\n\r\n        uint256 balance = balanceOf(sender);\r\n        require(balance >= amount, \"BaseRfiToken: burn amount exceeds balance\");\r\n\r\n        uint256 reflectedAmount = amount.mul(_getCurrentRate());\r\n\r\n        // remove the amount from the sender's balance first\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(reflectedAmount);\r\n        if (_isExcludedFromRewards[sender])\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        _burnTokens( sender, amount, reflectedAmount );\r\n    }\r\n\r\n    function _burnTokens(address sender, uint256 tBurn, uint256 rBurn) internal {\r\n\r\n        /**\r\n         * @dev Do not reduce _totalSupply and/or _reflectedSupply. (soft) burning by sending\r\n         * tokens to the burn address (which should be excluded from rewards) is sufficient\r\n         * in RFI\r\n         */\r\n        _reflectedBalances[burnAddress] = _reflectedBalances[burnAddress].add(rBurn);\r\n        if (_isExcludedFromRewards[burnAddress])\r\n            _balances[burnAddress] = _balances[burnAddress].add(tBurn);\r\n\r\n        /**\r\n         * @dev Emit the event so that the burn address balance is updated (on bscscan)\r\n         */\r\n        emit Transfer(sender, burnAddress, tBurn);\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromRewards[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) external view returns(uint256) {\r\n        require(tAmount <= TOTAL_SUPPLY, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount,0);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount,_getSumOfFees(_msgSender(), tAmount));\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\r\n        require(rAmount <= _reflectedSupply, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getCurrentRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcludedFromRewards[account], \"Account is not included\");\r\n        _exclude(account);\r\n        emit excludeFromRewardEvent(account);\r\n    }\r\n\r\n    function _exclude(address account) internal {\r\n        if(_reflectedBalances[account] > 0) {\r\n            _balances[account] = tokenFromReflection(_reflectedBalances[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcludedFromRewards[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _balances[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n        emit includeInRewardEvent(account);\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool value) external onlyOwner {\r\n        _isExcludedFromFee[account] = value;\r\n        emit setExcludedFromFeeEvent(account, value);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns(bool) { return _isExcludedFromFee[account]; }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BaseRfiToken: approve from the zero address\");\r\n        require(spender != address(0), \"BaseRfiToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"BaseRfiToken: transfer from the zero address\");\r\n        require(recipient != address(0), \"BaseRfiToken: transfer to the zero address\");\r\n        require(sender != address(burnAddress), \"BaseRfiToken: transfer from the burn address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // indicates whether or not feee should be deducted from the transfer\r\n        bool takeFee = true;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){ takeFee = false; }\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount, takeFee);\r\n        _transferTokens(sender, recipient, amount, takeFee);\r\n\r\n    }\r\n\r\n    function _transferTokens(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n\r\n        uint256 sumOfFees = _getSumOfFees(sender, amount);\r\n        if ( !takeFee ){ sumOfFees = 0; }\r\n\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tAmount, uint256 tTransferAmount, uint256 currentRate ) = _getValues(amount, sumOfFees);\r\n\r\n        /*\r\n        Add new Holder to the Contract\r\n        */\r\n        if(balanceOf(recipient) == 0 && amount>0) holders++;\r\n\r\n        /**\r\n         * Sender's and Recipient's reflected balances must be always updated regardless of\r\n         * whether they are excluded from rewards or not.\r\n         */\r\n        _reflectedBalances[sender] = _reflectedBalances[sender].sub(rAmount);\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rTransferAmount);\r\n\r\n        /**\r\n         * Update the true/nominal balances for excluded accounts\r\n         */\r\n        if (_isExcludedFromRewards[sender]){ _balances[sender] = _balances[sender].sub(tAmount); }\r\n        if (_isExcludedFromRewards[recipient] ){ _balances[recipient] = _balances[recipient].add(tTransferAmount); }\r\n\r\n        /**\r\n         * Reduces the Protected Amount on every transfer out\r\n         */\r\n        if (_protectedBalances[sender] > 0) {\r\n            uint256 currentPrice = _getCurrentPrice();\r\n            if (currentPrice < _protectedDcas[sender]) {\r\n                currentPrice = _protectedDcas[sender];\r\n            }\r\n            if (currentPrice > 0) {\r\n                uint256 protectedToDeduct = amount * currentPrice / 1_000_000;\r\n                if (protectedToDeduct > _protectedBalances[sender]) {\r\n                    _protectedBalances[sender] = 0;\r\n                    _protectedDcas[sender] = 0;\r\n                } else {\r\n                    _protectedBalances[sender] = _protectedBalances[sender].sub(amount * currentPrice / 1_000_000);\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        Remove Holders from the contract\r\n        */\r\n        if(balanceOf(sender) == 0) holders--;\r\n\r\n        _takeFees( amount, currentRate, sumOfFees );\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _takeFees(uint256 amount, uint256 currentRate, uint256 sumOfFees ) private {\r\n        if ( sumOfFees > 0 ){\r\n            _takeTransactionFees(amount, currentRate);\r\n        }\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 feesSum) internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n\r\n        uint256 tTotalFees = tAmount.mul(feesSum).div(FEES_DIVISOR);\r\n        uint256 tTransferAmount = tAmount.sub(tTotalFees);\r\n        uint256 currentRate = _getCurrentRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTotalFees = tTotalFees.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTotalFees);\r\n\r\n        return (rAmount, rTransferAmount, tAmount, tTransferAmount, currentRate);\r\n    }\r\n\r\n    function _getCurrentRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _reflectedSupply;\r\n        uint256 tSupply = TOTAL_SUPPLY;\r\n\r\n        /**\r\n         * The code below removes balances of addresses excluded from rewards from\r\n         * rSupply and tSupply, which effectively increases the % of transaction fees\r\n         * delivered to non-excluded holders\r\n         */\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_reflectedBalances[_excluded[i]] > rSupply || _balances[_excluded[i]] > tSupply) return (_reflectedSupply, TOTAL_SUPPLY);\r\n            rSupply = rSupply.sub(_reflectedBalances[_excluded[i]]);\r\n            tSupply = tSupply.sub(_balances[_excluded[i]]);\r\n        }\r\n        if (tSupply == 0 || rSupply < _reflectedSupply.div(TOTAL_SUPPLY)) return (_reflectedSupply, TOTAL_SUPPLY);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) internal virtual;\r\n\r\n    function _getSumOfFees(address sender, uint256 amount) internal view virtual returns (uint256);\r\n\r\n    function _redistribute(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) internal {\r\n        uint256 tFee = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n\r\n        _reflectedSupply = _reflectedSupply.sub(rFee);\r\n        _addFeeCollectedAmount(index, tFee);\r\n    }\r\n\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal virtual;\r\n\r\n    function _getCurrentPrice() internal view virtual returns (uint256);\r\n\r\n}\r\n\r\nabstract contract Liquifier is Ownable, Manageable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private withdrawableBalance;\r\n\r\n    enum Env {Testnet, Mainnet}\r\n    Env internal _env;\r\n\r\n    // PancakeSwap V2\r\n    address private _mainnetRouterV2Address = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    // PancakeSwap Testnet = https://pancake.kiemtienonline360.com/\r\n    address private _testnetRouterAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n\r\n    //PAIRS BNB BUSD\r\n    address internal _BNBBUSD;\r\n    address internal _mainnetBNBBUSD = 0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16;\r\n    address internal _testnetBNBBUSD = 0xe0e92035077c39594793e61802a350347c320cf2;\r\n\r\n    // --------------------- Events ------------------- //\r\n\r\n    event setRouterAddressEvent(address indexed router);\r\n    event withdrawLockedEthEvent(address indexed recipient, uint256 indexed amount);\r\n\r\n    IPancakeV2Router internal _router;\r\n    address internal _pair;\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool private swapAndLiquifyEnabled = true;\r\n\r\n    uint256 private numberOfTokensToSwapToLiquidity;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event RouterSet(address indexed router);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\r\n\r\n    receive() external payable {}\r\n\r\n    function initializeLiquiditySwapper(Env env, uint256 liquifyAmount) internal {\r\n        _env = env;\r\n        if (_env == Env.Mainnet){\r\n            _BNBBUSD = _mainnetBNBBUSD;\r\n            _setRouterAddress(_mainnetRouterV2Address);\r\n        }\r\n        if (_env == Env.Testnet){\r\n            _BNBBUSD = _testnetBNBBUSD;\r\n            _setRouterAddress(_testnetRouterAddress);\r\n        }\r\n        numberOfTokensToSwapToLiquidity = liquifyAmount;\r\n    }\r\n\r\n    function liquify(uint256 contractTokenBalance, address sender) internal {\r\n\r\n        uint256 contractTokenBalanceBUSD = ( contractTokenBalance / 1_000_000 ) * ( _getCurrentPrice() / 1_000_000 );\r\n        bool isOverRequiredTokenBalance = ( contractTokenBalanceBUSD >= numberOfTokensToSwapToLiquidity );\r\n\r\n        /**\r\n         * - first check if the contract has collected enough tokens to swap and liquify\r\n         * - then check swap and liquify is enabled\r\n         * - then make sure not to get caught in a circular liquidity event\r\n         * - finally, don't swap & liquify if the sender is the uniswap pair\r\n         */\r\n        if ( isOverRequiredTokenBalance && swapAndLiquifyEnabled && !inSwapAndLiquify && (sender != _pair) ){\r\n            // TODO check if the `(sender != _pair)` is necessary because that basically\r\n            // stops swap and liquify for all \"buy\" transactions\r\n            _swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n    }\r\n\r\n    function _setRouterAddress(address router) private {\r\n        IPancakeV2Router _newPancakeRouter = IPancakeV2Router(router);\r\n        _pair = IPancakeV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        _router = _newPancakeRouter;\r\n        emit RouterSet(router);\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 amount) private lockTheSwap {\r\n\r\n        // split the contract balance into halves\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for ETH\r\n        _swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        _addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // make the swap\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n        // The minimum amount of output tokens that must be received for the transaction not to revert.\r\n        // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approveDelegate(address(this), address(_router), tokenAmount);\r\n\r\n        // add tahe liquidity\r\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = _router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n        // Bounds the extent to which the WETH/token price can go up before the transaction reverts.\r\n        // Must be <= amountTokenDesired; 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n        // Bounds the extent to which the token/WETH price can go up before the transaction reverts.\r\n        // 0 = accept any amount (slippage is inevitable)\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        // fix the forever locked BNBs as per the certik's audit\r\n        /**\r\n         * The swapAndLiquify function converts half of the contractTokenBalance SafeMoon tokens to BNB.\r\n         * For every swapAndLiquify function call, a small amount of BNB remains in the contract.\r\n         * This amount grows over time with the swapAndLiquify function being called throughout the life\r\n         * of the contract. The Safemoon contract does not contain a method to withdraw these funds,\r\n         * and the BNB will be locked in the Safemoon contract forever.\r\n         */\r\n        withdrawableBalance = address(this).balance;\r\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity);\r\n    }\r\n\r\n    function setRouterAddress(address router) external onlyManager() {\r\n        _setRouterAddress(router);\r\n        emit setRouterAddressEvent(router);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyManager {\r\n        swapAndLiquifyEnabled = enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(swapAndLiquifyEnabled);\r\n    }\r\n\r\n    function withdrawLockedEth(address payable recipient) external onlyManager(){\r\n        require(recipient != address(0), \"Cannot withdraw the ETH balance to the zero address\");\r\n        require(withdrawableBalance > 0, \"The ETH balance must be greater than 0\");\r\n\r\n        // prevent re-entrancy attacks\r\n        uint256 amount = withdrawableBalance;\r\n        withdrawableBalance = 0;\r\n        recipient.transfer(amount);\r\n        emit withdrawLockedEthEvent(recipient, amount);\r\n    }\r\n\r\n    function _approveDelegate(address owner, address spender, uint256 amount) internal virtual;\r\n\r\n    function _getCurrentPrice() internal view virtual returns (uint256);\r\n\r\n}\r\n\r\nabstract contract Token is BaseRfiToken, Liquifier {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    constructor(Env _env){\r\n        initializeLiquiditySwapper(_env, numberOfTokensToSwapToLiquidity);\r\n        // Redistribution only for holders.\r\n        _exclude(_pair);\r\n        _exclude(burnAddress);\r\n    }\r\n\r\n    function _getCurrentPrice() internal view override(BaseRfiToken, Liquifier) returns(uint256) {\r\n        IPancakeV2Pair pairCoinBnb = IPancakeV2Pair(_pair);\r\n        (uint112 reserve0CoinBnb, uint112 reserve1CoinBnb, ) = pairCoinBnb.getReserves();\r\n        if(reserve0CoinBnb == 0 || reserve1CoinBnb == 0){\r\n            return(0);\r\n        }\r\n        address token0CoinBnb = pairCoinBnb.token0();\r\n        uint256 priceinBNB;\r\n        if(token0CoinBnb == _router.WETH()){\r\n            priceinBNB = reserve0CoinBnb/reserve1CoinBnb;\r\n        }else{\r\n            priceinBNB = reserve1CoinBnb/reserve0CoinBnb;\r\n        }\r\n\r\n        IPancakeV2Pair pairBnbBusd = IPancakeV2Pair(_BNBBUSD);\r\n        (uint112 reserve0BnbBusd, uint112 reserve1BnbBusd, ) = pairBnbBusd.getReserves();\r\n        uint256 priceinBNBBUSD;\r\n        if(_env == Env.Testnet){\r\n            priceinBNBBUSD = reserve0BnbBusd/reserve1BnbBusd;\r\n        }else{\r\n            priceinBNBBUSD = reserve1BnbBusd/reserve0BnbBusd;\r\n        }\r\n\r\n        return(priceinBNB * priceinBNBBUSD / 1_000_000);\r\n    }\r\n\r\n    function getPair() external view returns(address,uint256,uint256) {\r\n        IPancakeV2Pair pair = IPancakeV2Pair(_pair);\r\n        (uint112 reserve0,uint112 reserve1,) = pair.getReserves();\r\n        return(_pair,reserve0,reserve1);\r\n    }\r\n\r\n    function _getSumOfFees(address, uint256) internal view override returns (uint256){\r\n        return sumOfFees;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address sender, address , uint256 , bool ) internal override {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        liquify( contractTokenBalance, sender );\r\n    }\r\n\r\n    function _takeTransactionFees(uint256 amount, uint256 currentRate) internal override {\r\n        uint256 feesCount = _getFeesCount();\r\n        for (uint256 index = 0; index < feesCount; index++ ){\r\n            (FeeType name, uint256 value, address recipient,) = _getFee(index);\r\n            // no need to check value < 0 as the value is uint (i.e. from 0 to 2^256-1)\r\n            if ( value == 0 ) continue;\r\n            if ( name == FeeType.Rfi ){\r\n                _redistribute( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.Burn ){\r\n                _burn( amount, currentRate, value, index );\r\n            }\r\n            else if ( name == FeeType.ExternalWithEvent){\r\n                _takeFee( amount, currentRate, value, recipient, index, true );\r\n            }\r\n            else if ( name == FeeType.Liquidity){\r\n                _takeFee( amount, currentRate, value, recipient, index, false );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _burn(uint256 amount, uint256 currentRate, uint256 fee, uint256 index) private {\r\n        uint256 tBurn = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n\r\n        _burnTokens(address(this), tBurn, rBurn);\r\n        _addFeeCollectedAmount(index, tBurn);\r\n    }\r\n\r\n    function _takeFee(uint256 amount, uint256 currentRate, uint256 fee, address recipient, uint256 index, bool emitEvent) private {\r\n\r\n        uint256 tAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n\r\n        _reflectedBalances[recipient] = _reflectedBalances[recipient].add(rAmount);\r\n        if(_isExcludedFromRewards[recipient])\r\n            _balances[recipient] = _balances[recipient].add(tAmount);\r\n\r\n        _addFeeCollectedAmount(index, tAmount);\r\n\r\n        /**\r\n         * @dev Emit the event so that the recipient address balance is updated (on bscscan)\r\n         */\r\n        if (emitEvent) {\r\n            emit Transfer(address(this), recipient, tAmount);\r\n        }\r\n    }\r\n\r\n    function _approveDelegate(address owner, address spender, uint256 amount) internal override {\r\n        _approve(owner, spender, amount);\r\n    }\r\n}\r\n\r\ncontract Nsur is Token{\r\n    constructor() Token(Env.Mainnet){\r\n        // pre-approve the initial liquidity supply (to safe a bit of time)\r\n        _approve(owner(),address(_router), ~uint256(0));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagementTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"claimRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protectedPrice\",\"type\":\"uint256\"}],\"name\":\"protectedTransferEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFeeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouterAddressEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setnumberOfTokensToSwapToLiquidityEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedEthEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCollectedFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"enum Tokenomics.FeeType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getProtectedDca\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getProtectedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getnumberOfTokensToSwapToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectedPrice\",\"type\":\"uint256\"}],\"name\":\"protectedTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum Tokenomics.FeeType\",\"name\":\"feename\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protectedDca\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protectedBalance\",\"type\":\"uint256\"}],\"name\":\"setProtected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setnumberOfTokensToSwapToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"transferManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawLockedEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Nsur", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f9d8c3922f45bbd2d6a98d2d19fddf473b09306cc14cd3f195da5aa52ff0c30"}