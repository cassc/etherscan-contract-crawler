{"SourceCode": "// YieldTopia Finance\r\n// https://yieldtopia.finance\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        return a / b;\r\n    }\r\n\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n     require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n     emit OwnershipTransferred(_owner, newOwner);\r\n     _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract WhitelistedRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender), \"WhitelistedRole: caller does not have the Whitelisted role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyOwner {\r\n        _addWhitelisted(account);\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyOwner {\r\n        _removeWhitelisted(account);\r\n    }\r\n\r\n    function renounceWhitelisted() public {\r\n        _removeWhitelisted(msg.sender);\r\n    }\r\n\r\n    function _addWhitelisted(address account) internal {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function _removeWhitelisted(address account) internal {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n}\r\n\r\ncontract YieldTopia is ERC20Detailed, Ownable, WhitelistedRole {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    // Yield Protocol Settings\r\n    uint256 private constant MAX_REBASE_FREQUENCY = 1800;\r\n    uint256 public rewardYield = 3830800; // APY: 42,069% && DPY: 1.6%\r\n    uint256 public rewardYieldDenominator = 10000000000;\r\n    uint256 public maxSellTransactionAmount = 2500000 * 10 ** 18; \r\n    uint256 public rebaseFrequency = 1800;\r\n    uint256 public nextRebase = 1657870200; \r\n    uint256 public nexthalving = 1657870200 + 2629743; // one month after the approximate launch date & first rebate\r\n    bool public autoRebase = true;\r\n\r\n    // $YIELD Token Settings\r\n    uint256 private constant DECIMALS = 18;\r\n    uint256 private constant MAX_UINT256 = ~uint256(0);\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10 * 10**9 * 10**DECIMALS;\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0);\r\n    bool public liquifyAll = false;\r\n\r\n    // Default Buy Tax Fees = 9%\r\n    uint256 public buyliquidityFee = 2; // $YIELD Liquidity Pool Growth\r\n    uint256 public buyreserveFee = 3; // Insurance: Reserve fee aka insurance fund to make buy-backs with as needed\r\n    uint256 public buytreasuryFee = 3; // Treasury: Marketing & Development [community involvment via GOV]\r\n    uint256 public buyfirepitfee = 1; // Firepit: Used to burn $YIELD tokens out of the supply\r\n    uint256 public totalBuyFee = buyliquidityFee.add(buyreserveFee).add(buytreasuryFee).add(buyfirepitfee);\r\n\r\n    // Default Sell Tax Fees = 13%\r\n    uint256 public sellliquidityFee = 3; // $YIELD Liquidity Pool Growth\r\n    uint256 public sellreserveFee = 5; // Insurance: Reserve fee aka insurance fund to make buy-backs with as needed\r\n    uint256 public selltreasuryFee = 4; // Treasury: Marketing & Development [community involvment via GOV]\r\n    uint256 public sellfirepitfee = 1; // Firepit: Used to burn $YIELD tokens out of the supply\r\n    uint256 public totalSellFee = sellliquidityFee.add(sellreserveFee).add(selltreasuryFee).add(sellfirepitfee);\r\n\r\n    // Default Referral Settings\r\n    uint256 public referee = 1; // $YIELD Liquidity Pool Growth\r\n    uint256 public referrer = 1; // Insurance: Reserve fee aka insurance fund to make buy-backs with as needed\r\n    uint256 public totalReferralFee = referee.add(referrer);\r\n\r\n    // Transaction Tax Fees Settings\r\n    bool public feesOnNormalTransfers = true;\r\n    mapping(address => bool) _isFeeExempt;\r\n    uint256 public constant MAX_FEE_RATE = 20;\r\n    uint256 public feeDenominator = 100;\r\n    uint256 public transferTax = 100; // No transfers in between wallets\r\n\r\n    // Default Fee Receivers Settings\r\n    address public yieldtopiatreasuryReceiver = 0xdd7d29eb51Dd00eAc9e445F7D6f52b654fC235F0;\r\n    address public yieldrewardreservesReceiver = 0xF0B821A558246aFCa77140B8746354Efac65368C;\r\n    address public yieldliquidityReceiver = 0x5f045F69C73322cDC49b50d6Aa5BB5d783302E8e;\r\n    address public yieldfirepit = 0x8421d1560140ad03449df4A66338a7b26Aa380C5;\r\n    address public busdToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address DEADWalletAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address ZEROWalletAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n    // Referral System\r\n    mapping(address => address) public downlineLookupUpline;\r\n\tmapping(address => address[]) public Downlines;\r\n    mapping(address => uint256) public referralTotalFeeReceived;\r\n    mapping(address => uint256) public referralCount;\r\n    mapping(uint256 => address) public uplineList;\r\n    uint256 public iTotalUplines = 0;\r\n    \r\n    function getTotalUpline() public view returns (uint256) {\r\n        return iTotalUplines;\r\n    }\r\n\r\n    function getUplineAddressByIndex(uint256 iIndex) public view returns (address){\r\n        return uplineList[iIndex];\r\n    } \r\n\r\n    function addMember(address uplineAddress, address downlineAddress) external onlyOwner{\r\n        downlineLookupUpline[downlineAddress] = uplineAddress;\r\n    }\r\n\r\n    function approveReferral(address uplineAddress) external {\r\n        require(downlineLookupUpline[msg.sender] == address(0), \"You have already been referred\");\r\n        require(msg.sender != uplineAddress, \"You cannot refer yourself\");\r\n        downlineLookupUpline[msg.sender] = uplineAddress;\r\n\t\tDownlines[uplineAddress].push(msg.sender);\r\n        \r\n        if(referralCount[uplineAddress] == 0)\r\n        {\r\n            uplineList[iTotalUplines] = uplineAddress;\r\n            iTotalUplines += 1;\r\n        }\r\n\r\n        referralCount[uplineAddress] += 1;\r\n    }\r\n    \r\n    function getUpline(address sender) public view returns (address){\r\n        return downlineLookupUpline[sender];\r\n    }\r\n\r\n    function getDownlines(address sender) public view returns (address  [] memory){\r\n        return Downlines[sender];\r\n    }\r\n\t\r\n    function addReferralFee(address receiver, uint256 amount) public {\r\n        referralTotalFeeReceived[receiver] += amount;\r\n    }\r\n\r\n    function getReferralTotalFee(address receiver) public view returns (uint256){\r\n        return referralTotalFeeReceived[receiver];\r\n    }\r\n\r\n\r\n\r\n    // $YIELD LP Settings\r\n    bool public isLiquidityInBnb = true;\r\n    address[] public _markerPairs;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    uint256 targetLiquidity = 50;\r\n    uint256 targetLiquidityDenominator = 100;\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    bool inSwap;\r\n    uint256 public txfee = 1;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    struct user {\r\n        uint256 firstBuy;\r\n        uint256 lastTradeTime;\r\n        uint256 tradeAmount;\r\n    }\r\n\r\n    uint256 public TwentyFourhours = 86400;\r\n\r\n    mapping(address => user) public tradeData;\r\n    \r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 private gonSwapThreshold = TOTAL_GONS / 10000;\r\n\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n    mapping(address => bool) public blacklist;\r\n\r\n    constructor() ERC20Detailed(\"YieldTopia\", \"YIELD\", uint8(DECIMALS)) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\r\n        address pairBusd = IDEXFactory(router.factory()).createPair(address(this), busdToken);\r\n\r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n        _allowedFragments[address(this)][pair] = uint256(-1);\r\n        _allowedFragments[address(this)][address(this)] = uint256(-1);\r\n        _allowedFragments[address(this)][pairBusd] = uint256(-1);\r\n\r\n        setAutomatedMarketMakerPair(pair, true);\r\n        setAutomatedMarketMakerPair(pairBusd, true);\r\n\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n\r\n        _isFeeExempt[yieldtopiatreasuryReceiver] = true;\r\n        _isFeeExempt[yieldrewardreservesReceiver] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[msg.sender] = true;\r\n\r\n        IERC20(busdToken).approve(address(router), uint256(-1));\r\n        IERC20(busdToken).approve(address(pairBusd), uint256(-1));\r\n        IERC20(busdToken).approve(address(this), uint256(-1));\r\n\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n    function setBotBlacklist(address _botAddress, bool _flag) external onlyWhitelisted {\r\n        require(isContract(_botAddress), \"Only contract address, not allowed externally owned account\");\r\n        blacklist[_botAddress] = _flag;    \r\n    }\r\n    \r\n    function noDecimaltotalSupply() external view returns (uint256) {\r\n        return _totalSupply.div(10**DECIMALS);\r\n    }\r\n\r\n    function nodecimalCirculatingSUpply() external view returns (uint256) {\r\n        return getCirculatingSupply().div(10**DECIMALS);\r\n    }\r\n\r\n    function allowance(address owner_, address spender) external view override returns (uint256){\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold.div(_gonsPerFragment);\r\n    }\r\n\r\n    function shouldRebase() internal view returns (bool) {\r\n        return nextRebase <= block.timestamp;\r\n    }\r\n\r\n    function shouldTakeFee(address from, address to) internal view returns (bool) {\r\n        if(_isFeeExempt[from] || _isFeeExempt[to]){\r\n            return false;\r\n        }else if (feesOnNormalTransfers){\r\n            return true;\r\n        }else{\r\n            return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n        !automatedMarketMakerPairs[msg.sender] &&\r\n        !inSwap && \r\n        totalBuyFee.add(totalSellFee) > 0 &&\r\n        _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (TOTAL_GONS.sub(_gonBalances[DEADWalletAddress]).sub(_gonBalances[ZEROWalletAddress])).div(_gonsPerFragment);\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256){\r\n        uint256 liquidityBalance = 0;\r\n        for(uint i = 0; i < _markerPairs.length; i++){\r\n            liquidityBalance.add(balanceOf(_markerPairs[i]).div(10 ** 9));\r\n        }\r\n        return accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply().div(10 ** 9));\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool){\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function manualSync() public {\r\n        for(uint i = 0; i < _markerPairs.length; i++){\r\n            InterfaceLP(_markerPairs[i]).sync();\r\n        }\r\n    }\r\n\r\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool){\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!blacklist[sender] && !blacklist[recipient], \"in_blacklist\");\r\n        bool excludedAccount = _isFeeExempt[sender] || _isFeeExempt[recipient];\r\n        if (\r\n            automatedMarketMakerPairs[recipient] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxSellTransactionAmount, \"Error amount\");\r\n\r\n            uint blkTime = block.timestamp;\r\n          \r\n            uint256 onePercent = balanceOf(sender).mul(txfee).div(100); \r\n            require(amount <= onePercent, \"ERR: Can't sell more than set 1%-20%\");\r\n\r\n            if( blkTime >= tradeData[sender].lastTradeTime + TwentyFourhours) {\r\n                tradeData[sender].lastTradeTime = blkTime;\r\n                tradeData[sender].tradeAmount = amount;\r\n            }\r\n            else if( (blkTime <= tradeData[sender].lastTradeTime + TwentyFourhours) && (( blkTime >= tradeData[sender].lastTradeTime)) ){\r\n                require(tradeData[sender].tradeAmount + amount <= onePercent, \"ERR: Can't sell more than set 1%-20% in One day\");\r\n                tradeData[sender].tradeAmount = tradeData[sender].tradeAmount + amount;\r\n            }\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, gonAmount) : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            gonAmountReceived.div(_gonsPerFragment)\r\n        );\r\n\r\n        if(shouldRebase() && autoRebase) {\r\n            _rebase();\r\n\r\n            if(!automatedMarketMakerPairs[sender] && !automatedMarketMakerPairs[recipient]){\r\n                manualSync();\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\r\n            msg.sender\r\n            ].sub(value, \"Insufficient Allowance\");\r\n        }\r\n\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        if(isLiquidityInBnb){\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            _swapTokensForBNB(half, address(this));\r\n\r\n            uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n            _addLiquidity(otherHalf, newBalance);\r\n\r\n            emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        }else{\r\n            uint256 initialBalance = IERC20(busdToken).balanceOf(address(this));\r\n\r\n            _swapTokensForBusd(half, address(this));\r\n\r\n            uint256 newBalance = IERC20(busdToken).balanceOf(address(this)).sub(initialBalance);\r\n\r\n            _addLiquidityBusd(otherHalf, newBalance);\r\n\r\n            emit SwapAndLiquifyBusd(half, newBalance, otherHalf);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            yieldliquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidityBusd(uint256 tokenAmount, uint256 busdAmount) private {\r\n        router.addLiquidity(\r\n            address(this),\r\n            busdToken,\r\n            tokenAmount,\r\n            busdAmount,\r\n            0,\r\n            0,\r\n            yieldliquidityReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForBNB(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapTokensForBusd(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        path[2] = busdToken;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 realTotalFee = totalBuyFee.add(totalSellFee);\r\n\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : buyliquidityFee;\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(_gonsPerFragment);\r\n\r\n        if(!liquifyAll && contractTokenBalance > gonSwapThreshold.div(_gonsPerFragment)){\r\n        \tcontractTokenBalance = gonSwapThreshold.div(_gonsPerFragment);\r\n        }\r\n\r\n        uint256 amountToLiquify = contractTokenBalance.mul(dynamicLiquidityFee.mul(2)).div(realTotalFee);\r\n        uint256 amountToReserve = contractTokenBalance.mul(buyreserveFee.add(sellreserveFee)).div(realTotalFee);\r\n        uint256 amountToFirepit = contractTokenBalance.mul(buyfirepitfee.add(sellfirepitfee)).div(realTotalFee);\r\n        uint256 amountToTreasury = contractTokenBalance.sub(amountToLiquify).sub(amountToReserve).sub(amountToFirepit);\r\n\r\n    \r\n        if(amountToLiquify > 0){\r\n            _swapAndLiquify(amountToLiquify);\r\n        }\r\n\r\n        if(amountToReserve > 0){\r\n            _swapTokensForBusd(amountToReserve, yieldrewardreservesReceiver);\r\n        }\r\n\r\n        if(amountToTreasury > 0){\r\n            _swapTokensForBNB(amountToTreasury, yieldtopiatreasuryReceiver);\r\n        }\r\n\r\n         if(amountToFirepit > 0){\r\n            _swapTokensForBNB(amountToFirepit, yieldfirepit);\r\n        }\r\n\r\n        emit SwapBack(contractTokenBalance, amountToLiquify, amountToReserve, amountToTreasury, amountToFirepit);\r\n    }\r\n \r\n    function takeFee(address sender, address recipient, uint256 gonAmount) internal returns (uint256){\r\n        uint256 _realFee = totalBuyFee;\r\n        uint256 _buytreasuryFee = buytreasuryFee;\r\n        uint256 _selltreasuryFee = selltreasuryFee;\r\n\r\n        if(automatedMarketMakerPairs[recipient]) _realFee = totalSellFee;\r\n\r\n        uint256 feeAmount = gonAmount.mul(_realFee).div(feeDenominator);\r\n\r\n        if(!automatedMarketMakerPairs[sender] && !automatedMarketMakerPairs[recipient]) {\r\n\t\t\trequire(transferTax <= 99, \"Wallet to wallet transfer disabled\");\r\n\t\t\tfeeAmount = gonAmount.mul(transferTax).div(100);\t\t\t\r\n        }\r\n\r\n        // referrals\r\n        if (automatedMarketMakerPairs[sender]) {\r\n            address UplineAddressBuyer = getUpline(recipient);\r\n            if (UplineAddressBuyer != address(0))\r\n            {      \r\n                _buytreasuryFee -= totalReferralFee;\r\n                uint256 _uplineBuyerReward = gonAmount.div(feeDenominator).mul(referrer);\r\n                feeAmount = gonAmount.div(feeDenominator).mul(_realFee - referee);\r\n                _gonBalances[UplineAddressBuyer] = _gonBalances[UplineAddressBuyer].add(\r\n                _uplineBuyerReward\r\n                );\r\n                addReferralFee(UplineAddressBuyer, _uplineBuyerReward.div(_gonsPerFragment) );  \r\n            }      \r\n        }\r\n        else if (automatedMarketMakerPairs[recipient]) {\r\n            address UplineAddress = getUpline(sender);\r\n\r\n            if (UplineAddress != address(0))\r\n            {\r\n                _selltreasuryFee -= totalReferralFee;\r\n                uint256 _uplineReward = gonAmount.div(feeDenominator).mul(referrer);\r\n                feeAmount = gonAmount.div(feeDenominator).mul(_realFee - referee);\r\n                _gonBalances[UplineAddress] = _gonBalances[UplineAddress].add(\r\n                    _uplineReward\r\n                );\r\n                addReferralFee(UplineAddress, _uplineReward.div(_gonsPerFragment) );\r\n            }    \r\n        }\r\n\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool){\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\r\n                subtractedValue\r\n            );\r\n        }\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool){\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\r\n        spender\r\n        ].add(addedValue);\r\n        emit Approval(\r\n            msg.sender,\r\n            spender,\r\n            _allowedFragments[msg.sender][spender]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external override returns (bool){\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function _rebase() private {\r\n        if(!inSwap) {\r\n            uint256 circulatingSupply = getCirculatingSupply();\r\n            int256 supplyDelta = int256(circulatingSupply.mul(rewardYield).div(rewardYieldDenominator));\r\n\r\n            coreRebase(supplyDelta);\r\n        }\r\n    }\r\n\r\n    function coreRebase(int256 supplyDelta) private returns (uint256) {\r\n        uint256 epoch = block.timestamp;\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n        if (supplyDelta < 0) {\r\n            _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\r\n        } else {\r\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n        }\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n\r\n        if (block.timestamp >= nexthalving) {\r\n            rewardYield = rewardYield.div(10).mul(9);\r\n            nexthalving = block.timestamp + 2629743;\r\n        }\r\n        \r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        nextRebase = epoch + rebaseFrequency;\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n\r\n    function manualRebase() external onlyWhitelisted{\r\n        require(!inSwap, \"Try again\");\r\n        require(nextRebase <= block.timestamp, \"Not in time\");\r\n\r\n        uint256 circulatingSupply = getCirculatingSupply();\r\n        int256 supplyDelta = int256(circulatingSupply.mul(rewardYield).div(rewardYieldDenominator));\r\n\r\n        coreRebase(supplyDelta);\r\n        manualSync();\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address _pair, bool _value) public onlyOwner {\r\n        require(automatedMarketMakerPairs[_pair] != _value, \"Value already set\");\r\n\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n\r\n        if(_value){\r\n            _markerPairs.push(_pair);\r\n        }else{\r\n            require(_markerPairs.length > 1, \"Required 1 pair\");\r\n            for (uint256 i = 0; i < _markerPairs.length; i++) {\r\n                if (_markerPairs[i] == _pair) {\r\n                    _markerPairs[i] = _markerPairs[_markerPairs.length - 1];\r\n                    _markerPairs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n \r\n    function setFeeExempt(address _addr, bool _value) external onlyOwner {\r\n        require(_isFeeExempt[_addr] != _value, \"Not changed\");\r\n        _isFeeExempt[_addr] = _value;\r\n    }\r\n\r\n    function setTxFee(uint _addr) external onlyOwner {\r\n        txfee = _addr;\r\n    }\r\n\r\n    function setTransferTax(uint256 _transferTAX) external onlyOwner {\r\n        transferTax = _transferTAX;\r\n    }\r\n\r\n    function setTwentyFourhours(uint256 _time) external onlyOwner {\r\n        TwentyFourhours = _time;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 target, uint256 accuracy) external onlyOwner {\r\n        targetLiquidity = target;\r\n        targetLiquidityDenominator = accuracy;\r\n    }\r\n \r\n\r\n    function setSwapBackSettings_liquifyAll(bool _enabled) external onlyOwner {\r\n        liquifyAll = _enabled;\r\n    }\r\n\r\n    // Set Wallet & Contract Addresses To Receieve Transaction Tax Fees\r\n    function setFeeReceivers(address _yieldliquidityReceiver, address _yieldtopiatreasuryReceiver, address _yieldrewardreservesReceiver, address _yieldfirepit) external onlyOwner {\r\n        yieldliquidityReceiver = _yieldliquidityReceiver;\r\n        yieldtopiatreasuryReceiver = _yieldtopiatreasuryReceiver;\r\n        yieldrewardreservesReceiver = _yieldrewardreservesReceiver;\r\n        yieldfirepit = _yieldfirepit;\r\n    }\r\n\r\n\r\n    // Set Stablecoin (default: BUSD, optional to switch to USDY or other stablecoin in the future)\r\n    function setStableCoin(address _stablecoin) external onlyOwner {\r\n        busdToken = _stablecoin;\r\n    }\r\n\r\n\r\n    // Set Referral Fee Settings (The portion that's deducted from treasury in case of a referral)\r\n    function setReferralSettings(uint256 _referee, uint256 _referrer, uint256 _feeDenominator) external onlyOwner {\r\n        require(\r\n            _referee.add(_referrer) <= buytreasuryFee, // checking that the referral fee is not higher than the treasury fee\r\n            \"wrong\"\r\n        );\r\n        referee = _referee;\r\n        referrer = _referrer;\r\n        totalReferralFee = referee.add(referrer);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalReferralFee < feeDenominator / 4);\r\n    }\r\n\r\n    // Set Buy Transactions Tax Fees\r\n    function setBuyFees(uint256 _buyliquidityFee, uint256 _buyreserveFee, uint256 _buytreasuryFee, uint256 _buyfirepitfee, uint256 _feeDenominator) external onlyOwner {\r\n        require(\r\n            _buyliquidityFee <= MAX_FEE_RATE && // $YIELD Liquidity Pool Growth\r\n            _buyfirepitfee <= MAX_FEE_RATE && // $YIELD Liquidity Pool Growth\r\n            _buyreserveFee <= MAX_FEE_RATE && // Yield Protocol Reward Reserves\r\n            _buytreasuryFee <= MAX_FEE_RATE, // Funding Marketing & Development\r\n            \"wrong\"\r\n        );\r\n        buyliquidityFee = _buyliquidityFee;\r\n        buyreserveFee = _buyreserveFee;\r\n        buytreasuryFee = _buytreasuryFee;\r\n        buyfirepitfee = _buyfirepitfee;\r\n        totalBuyFee = buyliquidityFee.add(buytreasuryFee).add(buyreserveFee).add(buyfirepitfee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalBuyFee < feeDenominator / 4);\r\n    }\r\n\r\n    // Set Sell Transactions Tax Fees\r\n     function setSellFees(uint256 _sellliquidityFee, uint256 _sellreserveFee, uint256 _selltreasuryFee, uint256 _sellfirepitfee, uint256 _feeDenominator) external onlyOwner {\r\n        require(\r\n            _sellliquidityFee <= MAX_FEE_RATE && // $YIELD Liquidity Pool Growth\r\n            _sellfirepitfee <= MAX_FEE_RATE && // $YIELD Liquidity Pool Growth\r\n            _sellreserveFee <= MAX_FEE_RATE && // Yield Protocol Reward Reserves\r\n            _selltreasuryFee <= MAX_FEE_RATE, // Funding Marketing & Development\r\n            \"wrong\"\r\n        );\r\n        sellfirepitfee = _sellfirepitfee;\r\n        sellliquidityFee = _sellliquidityFee;\r\n        sellreserveFee = _sellreserveFee;\r\n        selltreasuryFee = _selltreasuryFee;\r\n        totalSellFee = sellliquidityFee.add(sellreserveFee).add(selltreasuryFee).add(sellfirepitfee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalSellFee < feeDenominator / 4);\r\n    }\r\n    // Rescue Tokens Stuck In Contract\r\n    function clearStuckBalance(address _receiver) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(_receiver).transfer(balance);\r\n    }\r\n\r\n    // Rescue Token Stuck In Contract\r\n    function rescueToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success){\r\n\t\tif(tokens == 0){\r\n            tokens = ERC20Detailed(tokenAddress).balanceOf(address(this));\r\n        }\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n    \r\n    function setAutoRebase(bool _autoRebase) external onlyOwner {\r\n        require(autoRebase != _autoRebase, \"Not changed\");\r\n        autoRebase = _autoRebase;\r\n    }\r\n\r\n    function setRebaseFrequency(uint256 _rebaseFrequency) external onlyOwner {\r\n        require(_rebaseFrequency <= MAX_REBASE_FREQUENCY, \"Too high\");\r\n        rebaseFrequency = _rebaseFrequency;\r\n    }\r\n\r\n    function setRewardYield(uint256 _rewardYield, uint256 _rewardYieldDenominator) external onlyOwner {\r\n        rewardYield = _rewardYield;\r\n        rewardYieldDenominator = _rewardYieldDenominator;\r\n    }\r\n\r\n    function setFeesOnNormalTransfers(bool _enabled) external onlyOwner {\r\n        require(feesOnNormalTransfers != _enabled, \"Not changed\");\r\n        feesOnNormalTransfers = _enabled;\r\n    }\r\n\r\n    function setIsLiquidityInBnb(bool _value) external onlyOwner {\r\n        require(isLiquidityInBnb != _value, \"Not changed\");\r\n        isLiquidityInBnb = _value;\r\n    }\r\n\r\n    function setNextRebase(uint256 _nextRebase) external onlyOwner {\r\n        nextRebase = _nextRebase;\r\n    }\r\n\r\n    // Set the max sell transaction - must be above the minimum amount\r\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n        require(_maxTxn >= (2500000 * (10 ** 18)), \"The max sell amount should be above the minimum amount\");\r\n        maxSellTransactionAmount = _maxTxn;\r\n    }\r\n\r\n    event SwapBack(uint256 contractTokenBalance,uint256 amountToLiquify,uint256 amountToReserve,uint256 amountToTreasury,uint256 amountToFirepit);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\r\n    event SwapAndLiquifyBusd(uint256 tokensSwapped, uint256 busdReceived, uint256 tokensIntoLiqudity);\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"busdReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyBusd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToReserve\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToFirepit\",\"type\":\"uint256\"}],\"name\":\"SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Downlines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TwentyFourhours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_markerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"downlineAddress\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"uplineAddress\",\"type\":\"address\"}],\"name\":\"approveReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyfirepitfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyreserveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buytreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"downlineLookupUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getDownlines\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"getReferralTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUpline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iIndex\",\"type\":\"uint256\"}],\"name\":\"getUplineAddressByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iTotalUplines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityInBnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexthalving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noDecimaltotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodecimalCirculatingSUpply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralTotalFeeReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellfirepitfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellliquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellreserveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selltreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoRebase\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyreserveFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buytreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyfirepitfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldliquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldtopiatreasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldrewardreservesReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldfirepit\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsLiquidityInBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextRebase\",\"type\":\"uint256\"}],\"name\":\"setNextRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseFrequency\",\"type\":\"uint256\"}],\"name\":\"setRebaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setReferralSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardYieldDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellliquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellreserveFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_selltreasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellfirepitfee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings_liquifyAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferTAX\",\"type\":\"uint256\"}],\"name\":\"setTransferTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setTwentyFourhours\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addr\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTradeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uplineList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldfirepit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldliquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldrewardreservesReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldtopiatreasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YieldTopia", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://00a222203b40d771475864c7da224cd61b01e84f1f323ac38ca63d55361ef73e"}