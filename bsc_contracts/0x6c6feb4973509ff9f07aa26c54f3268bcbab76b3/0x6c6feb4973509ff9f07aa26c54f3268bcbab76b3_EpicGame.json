{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.7;\r\n\r\ncontract EpicGame{\r\n    address public _owner;\r\n    bool locked;\r\n    modifier onlyOwner()\r\n    {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    modifier noReentrancy()\r\n    {\r\n        require(!locked, \"No Reentrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n    struct Ref{\r\n        uint regTime;\r\n        uint totalBnb;\r\n        uint id;\r\n    }\r\n    struct Account{\r\n        bool isReg;\r\n        bool isFilled;\r\n        mapping(uint8 => uint64[]) matrixFills;\r\n        mapping(address => Ref) reffMap;\r\n        address[] refs;\r\n        uint32 id;\r\n        uint256 deps;\r\n        uint256 totalDeps;\r\n        address firstRefferr;\r\n        address secondRefferr;\r\n        uint32 reffCount;\r\n        uint refBonus;\r\n        mapping(uint8 => bool) isLevelBought;\r\n        mapping(uint8 => uint256) pullPlace;\r\n        mapping(uint8 => uint256) startPullPlace;\r\n        mapping(uint8 => bool) isLevelActivated;\r\n    }\r\n    address payable public refWallet;\r\n    mapping(address => Account) public Accounts;\r\n    uint32 public lastId;\r\n    mapping(uint8 => uint32) public levelsIds;\r\n    mapping(uint => address) public idToAddress;\r\n    mapping(uint8 => uint32[]) public levelQueueIds;\r\n    mapping(uint8 => uint32) public iterations;\r\n    uint64[] public matrixsFill;\r\n    uint256[17] public levelTimeToOpen;\r\n\r\n    event RecievAward(address indexed to, uint amount, uint32 indexed id, uint8 level, uint date);\r\n    event Registr(address indexed who, uint32 indexed id, uint date);\r\n    event RefAward(address indexed to, uint32 indexed id, uint8 level, uint amount, uint date);\r\n    event ActivateLevel(address indexed who, uint32 indexed  id, uint8 level, uint date);\r\n\r\n    mapping(uint8 => uint) public levelPrice;\r\n    uint256 public RegFee;\r\n    uint256 public RegFeeTotal;\r\n    uint256 public RegFeeAviable;\r\n    uint256 public unusedRefVal;\r\n    uint256 public transactions;\r\n\r\n    uint public BASIC_PRICE;\r\n    uint8 public LAST_LEVEL;\r\n    address public test;\r\n    uint public firstItteration = 0;\r\n    uint public itterrationsBlock = 0;\r\n    uint public lastBlock;\r\n\r\n    uint public totalBought;\r\n\r\n    constructor(address payable wallet){\r\n        _owner = msg.sender;\r\n        refWallet = wallet;\r\n        RegFee = 45600000000000000;\r\n        LAST_LEVEL = 16;\r\n        Account storage user = Accounts[msg.sender];\r\n        user.id = 1;\r\n        user.isReg = true;\r\n        lastId = 1;\r\n        idToAddress[1] = msg.sender;\r\n        iterations[1] = 0;\r\n        \r\n\r\n        BASIC_PRICE = 100000000000000000;\r\n\r\n        levelPrice[1] = BASIC_PRICE;\r\n        levelPrice[2] = 170000000000000000;\r\n        levelPrice[3] = 310000000000000000;\r\n        levelPrice[4] = 410000000000000000;\r\n        levelPrice[5] = 520000000000000000;\r\n        levelPrice[6] = 740000000000000000;\r\n        levelPrice[7] = 980000000000000000;\r\n        levelPrice[8] = 1100000000000000000;\r\n\r\n        levelPrice[9] = 1700000000000000000;\r\n        levelPrice[10] = 2300000000000000000;\r\n        levelPrice[11] = 3100000000000000000;\r\n        levelPrice[12] = 4500000000000000000;\r\n        levelPrice[13] = 7800000000000000000;\r\n        levelPrice[14] = 10000000000000000000;\r\n        levelPrice[15] = 12000000000000000000;\r\n        levelPrice[16] = 16000000000000000000;\r\n\r\n        levelTimeToOpen[1] = 1666872000;\r\n        levelTimeToOpen[2] = 1666872000 + 12 hours;\r\n        levelTimeToOpen[3] = 1666872000 + 24 hours;\r\n        levelTimeToOpen[4] = 1666872000 + 36 hours;\r\n        levelTimeToOpen[5] = 1666872000 + 48 hours;\r\n        levelTimeToOpen[6] = 1666872000 + 72 hours;\r\n        levelTimeToOpen[7] = 1666872000 + 96 hours;\r\n        levelTimeToOpen[8] = 1666872000 + 120 hours;\r\n        levelTimeToOpen[9] = 1666872000 + 144 hours;\r\n        levelTimeToOpen[10] = 1666872000 + 192 hours;\r\n        levelTimeToOpen[11] = 1666872000 + 240 hours;\r\n        levelTimeToOpen[12] = 1666872000 + 288 hours;\r\n        levelTimeToOpen[13] = 1666872000 + 336 hours;\r\n        levelTimeToOpen[14] = 1666872000 + 408 hours;\r\n        levelTimeToOpen[15] = 1666872000 + 480 hours;\r\n        levelTimeToOpen[16] = 1666872000;\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            levelsIds[i] = 1;\r\n            levelQueueIds[i].push(1);\r\n            user.isLevelBought[i] = true;\r\n            user.pullPlace[i] = 1;\r\n            user.isLevelActivated[i] = true;\r\n            //user.startPullPlace[i] = 1;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function reg() public payable {\r\n        require(!Accounts[msg.sender].isReg, \"User Already Reg\");\r\n        require(msg.value >= RegFee, \"Wrong Value\");\r\n        address user = msg.sender;\r\n        Account storage account = Accounts[user];\r\n        account.id = lastId + 1;\r\n        account.isReg = true;\r\n        account.firstRefferr = address(0);\r\n        account.secondRefferr = address(0);\r\n        account.reffCount = 0;\r\n        idToAddress[lastId + 1] = user;\r\n        lastId++;\r\n        RegFeeTotal += msg.value;\r\n        // RegFeeAviable += msg.value;\r\n        refWallet.transfer(msg.value);\r\n        transactions++;\r\n                   if(firstItteration == 0)\r\n           {\r\n                lastBlock = block.number;\r\n                firstItteration = 1;\r\n           }\r\n           if(itterrationsBlock >= 10)\r\n           {\r\n                lastBlock = block.number;\r\n                itterrationsBlock= 0;\r\n           }\r\n        emit Registr(user, account.id, block.timestamp);\r\n    }\r\n\r\n    function changeRegWallet(address payable  newWallet) public onlyOwner{\r\n        refWallet = newWallet;\r\n    }\r\n\r\n    function refReg(address reffreral) public payable {\r\n        require(!Accounts[msg.sender].isReg, \"User Already Reg\");\r\n        require(msg.value >= RegFee, \"Wrong Value\");\r\n        if(msg.sender == reffreral)\r\n        {\r\n            reffreral = refWallet;\r\n        }\r\n        address user = msg.sender;\r\n        Account storage account = Accounts[user];\r\n        account.id = lastId + 1;\r\n        account.isReg = true;\r\n        idToAddress[lastId + 1] = user;\r\n        lastId++;\r\n        transactions++;\r\n        if(Accounts[reffreral].isReg)\r\n        {\r\n            account.firstRefferr = reffreral;\r\n            Accounts[reffreral].reffCount++;\r\n            Accounts[reffreral].refs.push(msg.sender);\r\n            Accounts[reffreral].reffMap[msg.sender].regTime = block.timestamp;\r\n            Accounts[reffreral].reffMap[msg.sender].id = account.id;\r\n        }\r\n\r\n        if(Accounts[reffreral].firstRefferr !=address(0))\r\n        {\r\n            account.secondRefferr = Accounts[reffreral].firstRefferr;\r\n            Accounts[Accounts[reffreral].firstRefferr].reffCount++;\r\n            Accounts[Accounts[reffreral].firstRefferr].refs.push(msg.sender);\r\n            Accounts[Accounts[reffreral].firstRefferr].reffMap[msg.sender].regTime = block.timestamp;\r\n            Accounts[Accounts[reffreral].firstRefferr].reffMap[msg.sender].id = account.id;\r\n        }\r\n        else{\r\n            account.secondRefferr = address(0);\r\n        }\r\n                           if(firstItteration == 0)\r\n           {\r\n                lastBlock = block.number;\r\n                firstItteration = 1;\r\n           }\r\n           if(itterrationsBlock >= 10)\r\n           {\r\n                lastBlock = block.number;\r\n                itterrationsBlock= 0;\r\n           }\r\n        RegFeeTotal += msg.value;\r\n        // RegFeeAviable += msg.value;\r\n        refWallet.transfer(msg.value);\r\n        emit Registr(user, account.id, block.timestamp);\r\n\r\n    }\r\n    function getLevelStart() public view returns (uint[17] memory levelTime)\r\n    {\r\n        return levelTimeToOpen;\r\n    }\r\n    function getInPull(uint8 level) public payable \r\n    {\r\n        address user = msg.sender;\r\n        require(Accounts[user].isReg, \"User is not registred\");\r\n        require(msg.value >= levelPrice[level], \"Wrong value\");\r\n        if(level > 1)\r\n        {\r\n            require(Accounts[user].isLevelBought[level-1] == true, \"Level isn't aviable for you now\");\r\n        }\r\n        uint32 lastLvlId = levelsIds[level];\r\n        address lastLvlAddress = idToAddress[lastLvlId];\r\n        Accounts[lastLvlAddress].matrixFills[level].push(Accounts[user].id);\r\n        levelQueueIds[level].push(Accounts[msg.sender].id);\r\n        Accounts[user].pullPlace[level] = levelQueueIds[level].length;\r\n        Accounts[user].isLevelBought[level] = true;\r\n        Accounts[user].isLevelActivated[level] = true;\r\n        Accounts[user].startPullPlace[level] = Accounts[lastLvlAddress].pullPlace[level];\r\n        totalBought += msg.value;\r\n        emit ActivateLevel(msg.sender, Accounts[user].id, level, block.timestamp);\r\n        transactions++;\r\n        if(firstItteration == 0)\r\n           {\r\n                lastBlock = block.number;\r\n                firstItteration = 1;\r\n           }\r\n           if(itterrationsBlock >= 10)\r\n           {\r\n                lastBlock = block.number;\r\n                itterrationsBlock= 0;\r\n           }\r\n        if(Accounts[lastLvlAddress].matrixFills[level].length >= 2)\r\n        {\r\n            setPayments(level);\r\n            payReffer(level);\r\n            iterations[level] = iterations[level] + 1;\r\n            levelsIds[level] = levelQueueIds[level][iterations[level]];\r\n            Accounts[lastLvlAddress].isLevelActivated[level] = false;\r\n            delete Accounts[lastLvlAddress].matrixFills[level];\r\n        }\r\n    }\r\n\r\n    function getMatrixFills(uint8 level, uint64 id) public{\r\n        uint32 lastLvlId = levelsIds[level];\r\n        address lastLvlAddress = idToAddress[lastLvlId];\r\n        matrixsFill.push(Accounts[lastLvlAddress].matrixFills[level][id]);\r\n    }\r\n    function getPullPlace(uint8 level, address user) public view returns(uint place)\r\n    {\r\n        uint places = Accounts[user].pullPlace[level];\r\n        return places;\r\n    }\r\n\r\n    function setPayments(uint8 level) private returns(bool success)\r\n    {\r\n        uint32 lastLvlId = levelsIds[level];\r\n        address lastLvlAddress = idToAddress[lastLvlId];\r\n        uint mainPercent = levelPrice[level] * 150 / 100;\r\n\r\n        Accounts[lastLvlAddress].deps += mainPercent;\r\n        Accounts[lastLvlAddress].totalDeps += mainPercent;\r\n        emit RecievAward(lastLvlAddress, mainPercent, lastLvlId, level, block.timestamp);\r\n                           if(firstItteration == 0)\r\n           {\r\n                lastBlock = block.number;\r\n                firstItteration = 1;\r\n           }\r\n           if(itterrationsBlock >= 10)\r\n           {\r\n                lastBlock = block.number;\r\n                itterrationsBlock= 0;\r\n           }\r\n    }\r\n\r\n    function payReffer(uint8 level) private returns(bool success)\r\n    {\r\n        uint32 lastLvlId = levelsIds[level];\r\n        address lastLvlAddress = idToAddress[lastLvlId];\r\n        uint firstPercent = levelPrice[level] * 10 / 100;\r\n        uint secondPercent = levelPrice[level] * 5 / 100;\r\n        uint RefVal = levelPrice[level] * 50 / 100;\r\n\r\n        if(Accounts[lastLvlAddress].firstRefferr!=address(0))\r\n        {\r\n            test = Accounts[lastLvlAddress].firstRefferr;\r\n            Accounts[Accounts[lastLvlAddress].firstRefferr].deps+= firstPercent;\r\n            Accounts[Accounts[lastLvlAddress].firstRefferr].totalDeps+= firstPercent;\r\n            Accounts[Accounts[lastLvlAddress].firstRefferr].reffMap[lastLvlAddress].totalBnb += firstPercent;\r\n            Accounts[Accounts[lastLvlAddress].firstRefferr].refBonus +=firstPercent;\r\n            uint32 id = Accounts[Accounts[lastLvlAddress].firstRefferr].id;\r\n            emit RefAward(Accounts[lastLvlAddress].firstRefferr, id, level, firstPercent, block.timestamp);\r\n                               if(firstItteration == 0)\r\n           {\r\n                lastBlock = block.number;\r\n                firstItteration = 1;\r\n           }\r\n           if(itterrationsBlock >= 10)\r\n           {\r\n                lastBlock = block.number;\r\n                itterrationsBlock= 0;\r\n           }\r\n            RefVal = RefVal - firstPercent;\r\n        }\r\n        if(Accounts[lastLvlAddress].secondRefferr!=address(0))\r\n        {\r\n            Accounts[Accounts[lastLvlAddress].secondRefferr].deps+=secondPercent;\r\n            Accounts[Accounts[lastLvlAddress].secondRefferr].totalDeps+=secondPercent;\r\n            Accounts[Accounts[lastLvlAddress].secondRefferr].reffMap[lastLvlAddress].totalBnb += secondPercent;\r\n            Accounts[Accounts[lastLvlAddress].secondRefferr].refBonus += secondPercent;\r\n            uint32 id = Accounts[Accounts[lastLvlAddress].secondRefferr].id;\r\n            emit RefAward(Accounts[lastLvlAddress].secondRefferr, id, level, secondPercent, block.timestamp);\r\n                               if(firstItteration == 0)\r\n           {\r\n                lastBlock = block.number;\r\n                firstItteration = 1;\r\n           }\r\n           if(itterrationsBlock >= 10)\r\n           {\r\n                lastBlock = block.number;\r\n                itterrationsBlock= 0;\r\n           }\r\n            RefVal = RefVal - secondPercent;\r\n        }\r\n        unusedRefVal += RefVal;\r\n    }\r\n\r\n    function getRefsData(address user) public view returns(uint[] memory regTimes, uint[] memory totalBnbs, uint[] memory ids, address[] memory refsReturn)\r\n    {\r\n        Account storage userGet = Accounts[user];\r\n        uint[] memory regTime = new uint[](userGet.reffCount);\r\n        uint[] memory totalBnb = new uint[](userGet.reffCount);\r\n        uint[] memory id = new uint[](userGet.reffCount);\r\n        address[] memory refs = new address[](userGet.reffCount);\r\n        for (uint8 i = 0; i <  userGet.reffCount; i+=1)\r\n        {\r\n            address ref = userGet.refs[i];\r\n            refs[i] = ref;\r\n            regTime[i] = userGet.reffMap[ref].regTime;\r\n            totalBnb[i] = userGet.reffMap[ref].totalBnb;\r\n            id[i] = (userGet.reffMap[ref].id);\r\n        }\r\n        return (regTime, totalBnb, id, refs);\r\n    }\r\n    function getUserFullPullsInfo(address user) public view returns (uint[] memory pullPlaces, bool[] memory isLevelBoughts, uint[] memory currPullPlaces, bool[] memory isLevelActivateds, uint[] memory _levelPrices, uint[] memory _levelTimeToOpens, uint[] memory startPullPlaces)\r\n    {\r\n        Account storage userGet = Accounts[user];\r\n        uint[] memory pullPlace = new uint[](LAST_LEVEL+1);\r\n        bool[] memory isLevelBought = new bool[](LAST_LEVEL+1);\r\n        uint[] memory currPullPlace = new uint[](LAST_LEVEL+1);\r\n        bool[] memory isLevelActivated = new bool[](LAST_LEVEL+1);\r\n        uint[] memory _levelPrice = new uint[](LAST_LEVEL+1);\r\n        uint[] memory _levelTimeToOpen = new uint[](LAST_LEVEL+1);\r\n        uint[] memory startPullPlace = new uint[](LAST_LEVEL+1);\r\n        for(uint8 i = 1; i <= LAST_LEVEL; i++)\r\n        {\r\n            uint32 lastLvlId = levelsIds[i];\r\n            address lastLvlAddress = idToAddress[lastLvlId];\r\n            pullPlace[i] = userGet.pullPlace[i];\r\n            isLevelBought[i] = userGet.isLevelBought[i];\r\n            currPullPlace[i] = Accounts[lastLvlAddress].pullPlace[i];\r\n            isLevelActivated[i] = userGet.isLevelActivated[i];\r\n            _levelPrice[i] = levelPrice[i];\r\n            _levelTimeToOpen[i] = levelTimeToOpen[i];\r\n            startPullPlace[i] = userGet.startPullPlace[i];\r\n        }\r\n        return(pullPlace, isLevelBought, currPullPlace, isLevelActivated, _levelPrice, _levelTimeToOpen, startPullPlace);\r\n    }\r\n\r\n    function Claim(address payable to) public payable noReentrancy\r\n    {\r\n        Account storage account = Accounts[msg.sender];\r\n        require(account.isReg, \"User is not registred\");\r\n        require(msg.sender == to, \"Diffirent address\");\r\n        require(account.deps <= address(this).balance, \"insufficient balance\");\r\n        transactions++;\r\n        uint value = account.deps;\r\n        account.deps = 0;\r\n        to.transfer(value);\r\n    }\r\n\r\n    function setTimeToStart(uint time, uint8 level) public {\r\n        levelTimeToOpen[level] = time;\r\n    }\r\n\r\n    function ClaimRegFeeAdr(address payable to) public payable onlyOwner{\r\n        if(RegFeeAviable >= address(this).balance)\r\n        {\r\n            uint refBalance = address(this).balance;\r\n            (bool success, ) = (to).call{value: refBalance}('');\r\n        }\r\n        else\r\n        {\r\n            (bool success, ) = (to).call{value: RegFeeAviable}('');\r\n        }\r\n    }\r\n    function ClaimRegFeeAdr() public payable onlyOwner {\r\n        if(RegFeeAviable >=address(this).balance)\r\n        {\r\n            uint refBalance = address(this).balance;\r\n            (bool success, ) = (_owner).call{value: refBalance}('');\r\n        }\r\n        else \r\n        {\r\n            (bool success, ) = (_owner).call{value: RegFeeAviable}('');\r\n        }\r\n    }\r\n\r\n    function Withdraw() public payable onlyOwner{\r\n        uint balance = address(this).balance;\r\n        (bool success, ) = (_owner).call{value: balance}('');\r\n    }\r\n\r\n    function ClaimUnusedRef() public payable onlyOwner{\r\n        (bool success, ) = (_owner).call{value: unusedRefVal}('');\r\n    }\r\n\r\n    function ChangeOwnership(address newOwner) public onlyOwner{\r\n        _owner = newOwner;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"ActivateLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"RecievAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"RefAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Registr\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Accounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReg\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFilled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"deps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"firstRefferr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondRefferr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"reffCount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimRegFeeAdr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimRegFeeAdr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimUnusedRef\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RegFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RegFeeAviable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RegFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeRegWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstItteration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"getInPull\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelStart\",\"outputs\":[{\"internalType\":\"uint256[17]\",\"name\":\"levelTime\",\"type\":\"uint256[17]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"getMatrixFills\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPullPlace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"place\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRefsData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"regTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalBnbs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"refsReturn\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFullPullsInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pullPlaces\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isLevelBoughts\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currPullPlaces\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"isLevelActivateds\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_levelPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_levelTimeToOpens\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startPullPlaces\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"iterations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itterrationsBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelQueueIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelTimeToOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelsIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrixsFill\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reffreral\",\"type\":\"address\"}],\"name\":\"refReg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reg\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"setTimeToStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unusedRefVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "EpicGame", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000012435028a2cebdcaa7a19c0fc0f9a15d1519727e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://562b950cbff5a3b61dc7ae1ccce1f857c59a9e776f16db658f738b1789a2275f"}