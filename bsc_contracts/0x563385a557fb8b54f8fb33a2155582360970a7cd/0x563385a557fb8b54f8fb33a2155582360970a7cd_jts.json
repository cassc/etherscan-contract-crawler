{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ninterface ISwapRouter {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals; \r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal; \r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address fundA = 0xF98D595B1096d2a0d5447488ebF1599E7C264b06;\r\n    address fundB = 0x98dc323422cE5E360573Dbe207bEfb0E3416626a;\r\n    address fundC = 0x901874eD580C36E94Ed1E7b50FE9Ecf564EbB68E;\r\n\r\n\r\n    address wbnbAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    uint256 public startTradeBlock;\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _swapPairList;\r\n    address public immutable _mainPair;\r\n    ISwapRouter public immutable _swapRouter;\r\n\r\n    uint256 public numTokensSellToFund = 1 * 10 ** 18;\r\n\r\n     address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    TokenDistributor public token_distributor;\r\n\r\n\r\n    constructor(string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address RouterAddress\r\n        ) \r\n        {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n\r\n        address bnbPair;\r\n        bnbPair = ISwapFactory(swapRouter.factory()).createPair(address(this), wbnbAddress);\r\n\r\n        _swapPairList[bnbPair] = true;\r\n        _mainPair = bnbPair;\r\n\r\n        _feeWhiteList[fundA] = true;\r\n        _feeWhiteList[fundB] = true;\r\n        _feeWhiteList[fundC] = true;\r\n        _feeWhiteList[0xB331ddA2419919b755cd6937cc695CD0a0694d81] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[DEAD] = true;\r\n\r\n        excludeHolder[_mainPair] = true;\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[DEAD] = true;\r\n\r\n        token_distributor = new TokenDistributor(wbnbAddress);\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n        IERC20(wbnbAddress).approve(address(_swapRouter), MAX);\r\n\r\n\r\n        _tTotal = Supply * 10 ** _decimals;\r\n        _balances[fundA] = _tTotal;\r\n        emit Transfer(address(0), tx.origin, _tTotal);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(msgSender == fundA || msgSender == fundB || msgSender == fundC || msgSender == owner(), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public RewardCondition = 0.1 ether;\r\n    uint256 public holderCondition = 60000 ether;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 1;\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 wbnbToekn = IERC20(wbnbAddress);\r\n        if (wbnbToekn.balanceOf(address(this)) < RewardCondition) {\r\n            return;\r\n        }\r\n\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = balanceOf(shareHolder);\r\n            if (!excludeHolder[shareHolder] && tokenBalance >= holderCondition) {\r\n                amount = RewardCondition * tokenBalance / _tTotal;\r\n                if (amount > 0) {\r\n                    wbnbToekn.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n        progressRewardBlock = blockNum;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n\r\n        bool takeFee;\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            takeFee = true;\r\n\r\n            require(0 < startTradeBlock);\r\n            if (block.number < startTradeBlock + 3) {\r\n                _funTransfer(from, to, amount, 99);\r\n                return;\r\n            }\r\n            uint256 maxSellAmount = balance * 9999 / 10000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n        \r\n\r\n        _tokenTransfer(from, to, amount,takeFee);\r\n\r\n        if (takeFee) {\r\n                processReward(_rewardGas);\r\n            }\r\n    }\r\n\r\n\r\n\r\n    uint256 _feeForFund = 10;\r\n    uint256 _feeForDead = 17;\r\n    uint256 _feeForReturn = 17;\r\n    uint256 _feeForReward = 6;\r\n\r\n    address private lastAirdropAddress;\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n\r\n        uint256 feeAmount;\r\n        uint256 feeForFund;\r\n        uint256 feeForDead;\r\n        uint256 feeForReturn;\r\n        uint256 feeForReward;\r\n        uint256 feeForAirdrop;\r\n        if (takeFee){\r\n            feeForFund = tAmount * _feeForFund / 1000;\r\n            feeForDead = tAmount * _feeForDead / 1000;\r\n            feeForReturn = tAmount * _feeForReturn / 1000;\r\n            feeForReward = tAmount * _feeForReward / 1000;\r\n\r\n            _takeTransfer(sender, DEAD, feeForDead);\r\n            _takeTransfer(sender, address(this), feeForReturn + feeForReward);\r\n\r\n\r\n            feeAmount = feeForFund + feeForDead + feeForReturn + feeForReward;\r\n            // buy\r\n            if(_swapPairList[sender]){\r\n                _takeTransfer(sender, fundA, feeForFund);\r\n            }\r\n\r\n            // sell\r\n            else if (_swapPairList[recipient]){\r\n                _takeTransfer(sender, fundB, feeForFund);\r\n\r\n                // airdrop\r\n                feeForAirdrop = feeAmount / 100000;\r\n                if (feeForAirdrop > 0) {\r\n                    uint256 seed = (uint160(lastAirdropAddress) | block.number) ^ uint160(recipient);\r\n                    feeAmount += feeForAirdrop;\r\n                    uint256 airdropAmount = feeForAirdrop / 2;\r\n                    address airdropAddress;\r\n                    for (uint256 i; i < 2;) {\r\n                        airdropAddress = address(uint160(seed | tAmount));\r\n                        _takeTransfer(sender, airdropAddress, airdropAmount);\r\n                    unchecked{\r\n                        ++i;\r\n                        seed = seed >> 1;\r\n                    }\r\n                    }\r\n                    lastAirdropAddress = airdropAddress;\r\n                }\r\n            }\r\n            //transfer\r\n            else{\r\n\r\n                _takeTransfer(sender, fundA, feeForFund);\r\n            }\r\n        }\r\n        uint256 contract_balance = balanceOf(address(this));\r\n        bool need_sell = contract_balance >= numTokensSellToFund;\r\n        if (need_sell && !inSwap && _swapPairList[recipient]) {\r\n            SwapTokenToFund(contract_balance);\r\n        }\r\n        _takeTransfer(sender,recipient, tAmount-feeAmount);\r\n        }\r\n\r\n    function SwapTokenToFund(uint256 amount) private lockTheSwap {\r\n        uint256 totalFee = _feeForReward + _feeForReturn;\r\n        uint256 lpAmount = amount * _feeForReturn / totalFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = wbnbAddress;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount - lpAmount,\r\n            0,\r\n            path,\r\n            address(token_distributor),\r\n            block.timestamp\r\n        );\r\n        uint256 wbnb_amount;\r\n        wbnb_amount = IERC20(wbnbAddress).balanceOf(address(token_distributor));\r\n        IERC20(wbnbAddress).transferFrom(\r\n            address(token_distributor),\r\n            address(this),\r\n            wbnb_amount\r\n        );\r\n\r\n        uint256 lpWbnbAmount = wbnb_amount * _feeForReturn / totalFee;\r\n        if (lpWbnbAmount > 0 && lpAmount > 0) {\r\n            _swapRouter.addLiquidity(address(this), wbnbAddress, lpAmount, lpWbnbAmount, 0, 0, fundC, block.timestamp);\r\n        }\r\n\r\n    }\r\n\r\n     function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        if (_balances[to] >= holderCondition){\r\n            addHolder(to);\r\n        }\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n        uint256 feeAmount = tAmount / 100 * fee;\r\n        if (feeAmount > 0) {\r\n            _takeTransfer(sender, fundA, feeAmount);\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setRewardPrams(uint256 newRewardCondition,uint256 newHolderCondition,uint256 newProgressRewardBlockDebt) external onlyWhiteList {\r\n        RewardCondition = newRewardCondition;\r\n        holderCondition = newHolderCondition;\r\n        progressRewardBlockDebt = newProgressRewardBlockDebt;\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 newNum) external onlyWhiteList {\r\n        numTokensSellToFund = newNum;\r\n    }\r\n\r\n    function withDrawToken(address tokenAddr) external onlyWhiteList {\r\n        uint256 token_num = IERC20(tokenAddr).balanceOf(address(this));\r\n        IERC20(tokenAddr).transfer(msg.sender, token_num);\r\n    }\r\n\r\n    function withDrawEth() external onlyWhiteList {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setFundAddress(address newfundA,address newfundB,address newfundC) external onlyWhiteList {\r\n        fundA = newfundA;\r\n        fundB = newfundB;\r\n        fundC = newfundC;\r\n        _feeWhiteList[newfundA] = true;\r\n        _feeWhiteList[newfundB] = true;\r\n        _feeWhiteList[newfundC] = true;\r\n\r\n    }\r\n\r\n\r\n    function setTax(uint256 feeForFund,uint256 feeForDead,uint256 feeForReturn,uint256 feeForReward) external onlyWhiteList {\r\n        _feeForFund = feeForFund;\r\n        _feeForDead = feeForDead;\r\n        _feeForReturn  = feeForReturn;\r\n        _feeForReward = feeForReward;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n\r\ncontract jts is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            \"JTS\",\r\n            \"JTS\",\r\n            18,\r\n            81910000,\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        ){}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newfundA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newfundB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newfundC\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHolderCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProgressRewardBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setRewardPrams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeForFund\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForDead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForReward\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_distributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "jts", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7066c7c6d8cb5a75562635eca42263a7eacbfd8b6e884de1c75a665b1c220be0"}