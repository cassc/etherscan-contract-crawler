{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/META.sol\": {\r\n      \"content\": \"\\n\\npragma solidity ^0.8.6;\\n\\n// SPDX-License-Identifier: Unlicensed\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nabstract contract Ownable {\\n    address private _owner;\\n    address private _previousOwner;\\n    uint256 private _lockTime;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor ()  {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }   \\n    \\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ncontract META is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping (address => bool) isDividendExempt;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _updated;\\n\\n    // mapping(address => bool) private _isBlacklist;\\n    mapping(address => bool) private _isSenderBlacklist;\\n    mapping(address => bool) private _isRecipientBlacklist;\\n   \\n\\n    uint256 private _tFeeTotal;\\n\\n    uint256 private _tLPFeeTotal;\\n\\n    uint256 private _tFounderFeeTotal;\\n\\n    string private _name = \\\"META\\\";\\n    string private _symbol = \\\"Meta-DAO\\\";\\n    uint8 private _decimals = 18;\\n\\n    uint256 public _burnFee = 100;\\n    uint256 private _previousburnFee;\\n\\n    uint256 public _LPFee = 300;\\n    uint256 private _previousLPFee;\\n\\n    uint256 public _marketFee = 50;\\n    uint256 private _previousMarketFee;\\n\\n    uint256 public _founderFee = 50;\\n    uint256 private _previousFounderFee;\\n\\n    uint256 currentIndex;  \\n    uint256 private _tTotal = 8888 * 10**18;\\n    uint256 distributorGas = 500000;\\n    uint256 public minPeriod = 20 minutes;\\n    uint256 public LPFeefenhong;\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n    address private fromAddress;\\n    address public marketAddress;\\n    address public usdtAddress;\\n    address public oskAddress;\\n    address private toAddress;\\n    uint256 private constant MAX = ~uint256(0);\\n    address _baseToken = address(0x55d398326f99059fF775485246999027B3197955); //bsc\\n    // address _baseToken = address(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684); //bsctest\\n\\n    address public pinkSaleAddr =\\n        address(0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE);\\n\\n    address public pinkSaleChangeAddr =\\n        address(0xFeF021CC92943b15fef091d2444a87e02733e56c);\\n\\n    address[] shareholders;\\n    mapping (address => uint256) shareholderIndexes;\\n\\n    address[] public partners;\\n\\n    bool public amountLimit = false;\\n    \\n\\n    constructor() {\\n        _tOwned[msg.sender] = _tTotal;\\n       \\n        \\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\n        );\\n\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\n        //     0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\n        // );\\n\\n        // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), address(_baseToken));\\n        // uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n        //     .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        // set the rest of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        marketAddress = address(0x4987A882C81F31A44AE0b71EEC8bA87e7aa49664);\\n        usdtAddress = address(0x55d398326f99059fF775485246999027B3197955); //bsc\\n        // usdtAddress = address(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684); //bsctest\\n\\n        oskAddress = address(0xC5db5aFee4C55DfAD5F2b8226C6ac882E6956a0A); //bsc\\n        // oskAddress = address(0x7c0CC929b365183817C737Fb05C062176Ce746F0); //bsctest\\n\\n        // _approve(address(this), address(uniswapV2Router), MAX);\\n        _allowances[address(this)][address(_uniswapV2Router)] = MAX;\\n        IERC20(usdtAddress).approve(address(_uniswapV2Router), MAX);\\n        IERC20(_uniswapV2Router.WETH()).approve(address(_uniswapV2Router), MAX);\\n\\n\\n        address founderAddress1 = address(0x428C62b1dB4265f99C9816986A2A897672288f29);\\n        partners.push(founderAddress1);\\n\\n        //exclude owner and this contract from fee\\n        _isExcludedFromFee[msg.sender] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        isDividendExempt[address(this)] = true;\\n        isDividendExempt[address(0)] = true;\\n        \\n        emit Transfer(address(0), msg.sender, _tTotal);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _tOwned[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            msg.sender,\\n            _allowances[sender][msg.sender].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            msg.sender,\\n            spender,\\n            _allowances[msg.sender][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n   function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n    function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n\\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n\\n    //blacklist\\n    // function isBlacklist(address account) public view returns (bool) {\\n    //     return _isBlacklist[account];\\n    // }\\n    // function includeInBlacklist(address account) public onlyOwner {\\n    //     _isBlacklist[account] = true;\\n    // }\\n\\n    // function excludeFromBlacklist(address account) public onlyOwner {\\n    //     _isBlacklist[account] = false;\\n    // }\\n    //senderBlacklist\\n    function isSenderBlacklist(address account) public view returns (bool) {\\n        return _isSenderBlacklist[account];\\n    }\\n    function includeInSenderBlacklist(address account) public onlyOwner {\\n        _isSenderBlacklist[account] = true;\\n    }\\n\\n    function excludeFromSenderBlacklist(address account) public onlyOwner {\\n        _isSenderBlacklist[account] = false;\\n    }\\n    //recipientBlacklist\\n    function isRecipientBlacklist(address account) public view returns (bool) {\\n        return _isRecipientBlacklist[account];\\n    }\\n    function includeInRecipientBlacklist(address account) public onlyOwner {\\n        _isRecipientBlacklist[account] = true;\\n    }\\n\\n    function excludeFromRecipientBlacklist(address account) public onlyOwner {\\n        _isRecipientBlacklist[account] = false;\\n    }\\n\\n    //to recieve ETH from uniswapV2Router when swaping\\n    receive() external payable {}\\n\\n    function removeAllFee() private {\\n        _previousburnFee = _burnFee;\\n        _previousLPFee = _LPFee;\\n        _previousMarketFee = _marketFee;\\n        _previousFounderFee = _founderFee;\\n\\n        _burnFee = 0;\\n        _LPFee = 0;\\n        _marketFee = 0;\\n        _founderFee = 0;\\n\\n    }\\n\\n    function restoreAllFee() private {\\n        _burnFee = _previousburnFee;\\n        _LPFee = _previousLPFee;\\n        _marketFee = _previousMarketFee;\\n        _founderFee = _previousFounderFee;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        //senderBlacklist\\n        if (_isSenderBlacklist[from]) {\\n            require(!_isSenderBlacklist[from], \\\"the sender address is blacklist\\\");\\n        }\\n        //toBlacklist\\n        if (_isRecipientBlacklist[to]) {\\n            require(!_isRecipientBlacklist[to], \\\"the recipient address is blacklist\\\");\\n        }\\n\\n        if (from == uniswapV2Pair) {\\n            require(amount <= 50 * 10**18 || amountLimit, \\\"buy must less than 50!\\\");\\n        }\\n\\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = false;\\n\\n        if (from == uniswapV2Pair || to == uniswapV2Pair) {\\n            takeFee = true;\\n        }\\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            takeFee = false;\\n        }\\n\\n        //transfer amount, it will take tax, burn, liquidity fee\\n        _tokenTransfer(from, to, amount, takeFee);\\n\\n        \\n        if(fromAddress == address(0) )fromAddress = from;\\n        if(toAddress == address(0) )toAddress = to;  \\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) setShare(fromAddress);\\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) setShare(toAddress);\\n        \\n        fromAddress = from;\\n        toAddress = to;  \\n        if(balanceOf(address(this)) > 0 && from !=address(this) && LPFeefenhong.add(minPeriod) <= block.timestamp) {\\n             process(distributorGas) ;\\n             LPFeefenhong = block.timestamp;\\n        }\\n    }\\n    \\n    function process(uint256 gas) private {\\n        uint256 shareholderCount = shareholders.length;\\n\\n        if (shareholderCount == 0) return;\\n        uint256 nowbanance = _tLPFeeTotal;\\n        uint256 gasUsed = 0;\\n        uint256 gasLeft = gasleft();\\n\\n        uint256 iterations = 0;\\n\\n        while (gasUsed < gas && iterations < shareholderCount) {\\n            if (currentIndex >= shareholderCount) {\\n                currentIndex = 0;\\n            }\\n\\n            uint256 amount = nowbanance\\n                .mul(\\n                    IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])\\n                )\\n                .div(\\n                    IERC20(uniswapV2Pair).totalSupply()\\n                );\\n            if (amount < 1 * 10**8) {\\n                currentIndex++;\\n                iterations++;\\n                return;\\n            }\\n            if (balanceOf(address(this)) < amount) return;\\n\\n            distributeDividend(shareholders[currentIndex], amount);\\n\\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\\n            gasLeft = gasleft();\\n            currentIndex++;\\n            iterations++;\\n        }\\n    }\\n\\n   \\n\\n    function distributeDividend(address shareholder, uint256 amount) internal {\\n        _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\\n\\n        if (shareholder == pinkSaleAddr) {\\n            shareholder = pinkSaleChangeAddr;\\n        }\\n        _tOwned[shareholder] = _tOwned[shareholder].add(amount);\\n\\n         if (_tLPFeeTotal > amount) {\\n            _tLPFeeTotal = _tLPFeeTotal.sub(amount);\\n         } else {\\n            _tLPFeeTotal = 0;\\n         }\\n        \\n        emit Transfer(address(this), shareholder, amount);\\n    }\\n\\n    function setShare(address shareholder) private {\\n        if(_updated[shareholder] ){      \\n            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              \\n            return;  \\n        }\\n        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \\n        addShareholder(shareholder);\\n        _updated[shareholder] = true;\\n        \\n    }\\n\\n    function addShare(address shareholder) public onlyOwner {\\n        if(_updated[shareholder] ){      \\n            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);              \\n            return;  \\n        }\\n        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \\n        addShareholder(shareholder);\\n        _updated[shareholder] = true;\\n        \\n    }\\n    function addShareholder(address shareholder) internal {\\n        shareholderIndexes[shareholder] = shareholders.length;\\n        shareholders.push(shareholder);\\n    }\\n    function quitShare(address shareholder) private {\\n           removeShareholder(shareholder);   \\n           _updated[shareholder] = false; \\n      }\\n    function removeShareholder(address shareholder) internal {\\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\\n        shareholders.pop();\\n    }\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool takeFee\\n    ) private {\\n        if (!takeFee) removeAllFee();\\n\\n        _transferStandard(sender, recipient, amount);\\n\\n        if (!takeFee) restoreAllFee();\\n    }\\n\\n    function _takeburnFee(\\n        address sender,\\n        uint256 tAmount\\n    ) private {\\n        if (_burnFee == 0) return;\\n        _tOwned[address(0)] = _tOwned[address(0)].add(tAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n        emit Transfer(sender, address(0), tAmount);\\n    }\\n\\n    function _takeLPFee(address sender,uint256 tAmount) private {\\n        if (_LPFee == 0 ) return;\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\\n        _tLPFeeTotal = _tLPFeeTotal.add(tAmount);\\n        if (sender != uniswapV2Pair) {\\n            swapTokensForCake(_tFounderFeeTotal, address(this));\\n            _tFounderFeeTotal = 0;\\n            uint256 oskAmount = IERC20(oskAddress).balanceOf(address(this));\\n            uint256 len = partners.length;\\n            for (uint256 i = 0; i < len; i++) {\\n                IERC20(oskAddress).transfer(partners[i], oskAmount.div(len));\\n            }\\n\\n            // if (oskAmount > 10 * 10**18) {\\n            //     uint256 len = partners.length;\\n            //     for (uint256 i = 0; i < len; i++) {\\n            //         IERC20(oskAddress).transfer(partners[i], oskAmount.div(len));\\n            //     }\\n            // }\\n        }\\n        // if (sender != uniswapV2Pair) {\\n        //     uint256 len = partners.length;\\n        //     for (uint256 i = 0; i < len; i++) {\\n        //         swapTokensForCake(_tFounderFeeTotal.div(len), partners[i]);\\n        //     }\\n        //     _tFounderFeeTotal = 0;\\n        // }\\n        emit Transfer(sender, address(this), tAmount);\\n    }\\n\\n    function _takeMarketFee(address sender,uint256 tAmount) private {\\n        if (_marketFee ==0) return;\\n        _tOwned[marketAddress] = _tOwned[marketAddress].add(tAmount);\\n        emit Transfer(sender, marketAddress, tAmount);\\n    }\\n\\n    function _takeFounderFee(address sender,uint256 tAmount) private {\\n        if (_founderFee ==0) return;\\n        _tOwned[address(this)] = _tOwned[address(this)].add(tAmount);\\n        _tFounderFeeTotal = _tFounderFeeTotal.add(tAmount);\\n        emit Transfer(sender, address(this), tAmount);\\n    }\\n\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n       \\n        _takeburnFee(sender, tAmount.div(10000).mul(_burnFee));      \\n    \\n        _takeMarketFee(sender, tAmount.div(10000).mul(_marketFee));\\n        \\n        _takeFounderFee(sender, tAmount.div(10000).mul(_founderFee));\\n\\n        _takeLPFee(sender, tAmount.div(10000).mul(_LPFee));\\n\\n       \\n        uint256 recipientRate = 10000 -\\n            _burnFee -\\n            _LPFee -\\n            _marketFee -\\n            _founderFee;\\n        _tOwned[recipient] = _tOwned[recipient].add(\\n            tAmount.div(10000).mul(recipientRate)\\n        );\\n        emit Transfer(sender, recipient, tAmount.div(10000).mul(recipientRate));\\n    }  \\n\\n    function setAmountLimit(bool boolAmountLimit) public onlyOwner {\\n        amountLimit = boolAmountLimit;\\n    }\\n\\n    function setMarket(address account) public onlyOwner {\\n        marketAddress = account;\\n    }\\n\\n    function setPartners(address[] memory newPartners) public onlyOwner {\\n        partners = newPartners;\\n    }\\n\\n    function pushPartners(address newPartner) public onlyOwner {\\n        partners.push(newPartner);\\n    }\\n\\n    function popPartners() public onlyOwner {\\n        partners.pop();\\n    }\\n\\n    function getPartners() public view returns (address[] memory) {\\n        return partners;\\n    }\\n\\n    function setPinkSaleAddr(address newpinkSaleAddr) public onlyOwner {\\n        pinkSaleAddr = newpinkSaleAddr;\\n    }\\n\\n    function setPinkSaleChangeAddr(address newpinkSaleChangeAddr) public onlyOwner {\\n        pinkSaleChangeAddr = newpinkSaleChangeAddr;\\n    }\\n\\n    function modifyBurnFee(uint256 fee) public onlyOwner {\\n        _burnFee = fee;\\n    }\\n\\n    function modifyLPFee(uint256 fee) public onlyOwner {\\n        _LPFee = fee;\\n    }\\n\\n    function modifyMarketFee(uint256 fee) public onlyOwner {\\n        _marketFee = fee;\\n    }\\n\\n    function modifyFounderFee(uint256 fee) public onlyOwner {\\n        _founderFee = fee;\\n    }\\n\\n    function rescueToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) public onlyOwner {\\n        IERC20(token).transfer(recipient, amount);\\n    }\\n\\n    function swapTokensForCake(uint256 tokenAmount, address to) private {\\n        address[] memory path = new address[](3);\\n        path[0] = address(this);\\n        path[1] = usdtAddress;\\n        // path[1] = uniswapV2Router.WETH();\\n        // path[2] = usdtAddress;\\n        path[2] = oskAddress;\\n        // _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        // IERC20(usdtAddress).approve(address(uniswapV2Router), 1000000 * 10**18);\\n        // IERC20(uniswapV2Router.WETH()).approve(address(uniswapV2Router), 1000000 * 10**18);\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0,\\n            path,\\n            to,\\n            block.timestamp\\n        );\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_founderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"addShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromRecipientBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromSenderBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInRecipientBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInSenderBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRecipientBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSenderBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyFounderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"modifyMarketFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oskAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkSaleAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkSaleChangeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popPartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPartner\",\"type\":\"address\"}],\"name\":\"pushPartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"boolAmountLimit\",\"type\":\"bool\"}],\"name\":\"setAmountLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newPartners\",\"type\":\"address[]\"}],\"name\":\"setPartners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newpinkSaleAddr\",\"type\":\"address\"}],\"name\":\"setPinkSaleAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newpinkSaleChangeAddr\",\"type\":\"address\"}],\"name\":\"setPinkSaleChangeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "META", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}