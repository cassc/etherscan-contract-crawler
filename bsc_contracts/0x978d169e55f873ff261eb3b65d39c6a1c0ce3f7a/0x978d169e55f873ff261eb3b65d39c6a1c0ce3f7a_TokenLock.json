{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary console {\\r\\n    address constant CONSOLE_ADDRESS =\\r\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\r\\n\\r\\n    function _sendLogPayload(bytes memory payload) private view {\\r\\n        uint256 payloadLength = payload.length;\\r\\n        address consoleAddress = CONSOLE_ADDRESS;\\r\\n        assembly {\\r\\n            let payloadStart := add(payload, 32)\\r\\n            let r := staticcall(\\r\\n                gas(),\\r\\n                consoleAddress,\\r\\n                payloadStart,\\r\\n                payloadLength,\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function log() internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\r\\n    }\\r\\n\\r\\n    function logInt(int p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logUint(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logString(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBool(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logAddress(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes(bytes memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logByte(bytes1 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes1(bytes1 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes2(bytes2 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes3(bytes3 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes4(bytes4 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes5(bytes5 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes6(bytes6 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes7(bytes7 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes8(bytes8 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes9(bytes9 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes10(bytes10 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes11(bytes11 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes12(bytes12 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes13(bytes13 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes14(bytes14 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes15(bytes15 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes16(bytes16 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes17(bytes17 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes18(bytes18 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes19(bytes19 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes20(bytes20 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes21(bytes21 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes22(bytes22 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes23(bytes23 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes24(bytes24 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes25(bytes25 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes26(bytes26 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes27(bytes27 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes28(bytes28 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes29(bytes29 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes30(bytes30 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes31(bytes31 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes32(bytes32 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        uint p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        bool p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        uint p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        bool p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/tokenlock/interfaces/ILock.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0;\\r\\n\\r\\ninterface ILock {\\r\\n    struct LockedToken {\\r\\n        uint256 locked;\\r\\n        uint256 lockTime;\\r\\n        int256 unlocked;\\r\\n    }\\r\\n\\r\\n    function upgradeLockedTokens(\\r\\n        address _sender\\r\\n    ) external returns (LockedToken memory);\\r\\n\\r\\n    function available(address _account) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/tokenlock/lock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./interfaces/ILock.sol\\\";\\r\\nimport \\\"contracts/console.sol\\\";\\r\\n\\r\\ncontract TokenLock {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public UPGRADE_LOCK_DURATION;\\r\\n\\r\\n    mapping(address => LockedToken) public upgradeLockedTokens;\\r\\n\\r\\n    IERC20 public lockToken;\\r\\n    address public oldLock;\\r\\n    address public owner;\\r\\n\\r\\n    struct LockedToken {\\r\\n        uint256 locked;\\r\\n        uint256 lockTime;\\r\\n        int256 unlocked;\\r\\n    }\\r\\n\\r\\n    event Locking(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n\\r\\n    constructor(IERC20 _lockToken) {\\r\\n        lockToken = _lockToken;\\r\\n        UPGRADE_LOCK_DURATION = 365 days;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    function locking(address account, uint256 _lock) external {\\r\\n        lockToken.safeTransferFrom(msg.sender, address(this), _lock);\\r\\n        LockedToken storage lt = upgradeLockedTokens[account];\\r\\n        uint256 _now = block.timestamp;\\r\\n        if (_now < lt.lockTime + UPGRADE_LOCK_DURATION) {\\r\\n            uint256 amount = (lt.locked * (_now - lt.lockTime)) /\\r\\n                UPGRADE_LOCK_DURATION;\\r\\n            lt.locked = lt.locked - amount + _lock;\\r\\n            lt.unlocked += int256(amount);\\r\\n        } else {\\r\\n            lt.unlocked += int256(lt.locked);\\r\\n            lt.locked = _lock;\\r\\n        }\\r\\n        lt.lockTime = _now;\\r\\n\\r\\n        emit Locking(account, _lock);\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        LockedToken storage lt = upgradeLockedTokens[msg.sender];\\r\\n        int256 unlocked = lt.unlocked;\\r\\n        uint256 _now = block.timestamp;\\r\\n\\r\\n        if (_now < lt.lockTime + UPGRADE_LOCK_DURATION) {\\r\\n            unlocked += int256(\\r\\n                (lt.locked * (_now - lt.lockTime)) / UPGRADE_LOCK_DURATION\\r\\n            );\\r\\n        } else {\\r\\n            unlocked += int256(lt.locked);\\r\\n        }\\r\\n\\r\\n        require(unlocked > 0, \\\"no token available\\\");\\r\\n\\r\\n        lt.unlocked -= unlocked;\\r\\n\\r\\n        lockToken.safeTransfer(msg.sender, uint256(unlocked));\\r\\n\\r\\n        emit Withdraw(msg.sender, uint256(unlocked));\\r\\n    }\\r\\n\\r\\n    function available(address _account) public view returns (uint256) {\\r\\n        LockedToken memory lt = upgradeLockedTokens[_account];\\r\\n        int256 unlocked = lt.unlocked;\\r\\n        uint256 _now = block.timestamp;\\r\\n\\r\\n        if (_now < lt.lockTime + UPGRADE_LOCK_DURATION) {\\r\\n            unlocked += int256(\\r\\n                (lt.locked * (_now - lt.lockTime)) / UPGRADE_LOCK_DURATION\\r\\n            );\\r\\n        } else {\\r\\n            unlocked += int256(lt.locked);\\r\\n        }\\r\\n        return uint256(unlocked);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lockToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"locking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"unlocked\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenLock", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fe0f9a1b5a8b5610288fa16a42eda9f41a3f35be", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}