{"SourceCode": "pragma solidity ^0.8.9;\r\n// SPDX-License-Identifier: MIT\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\ninterface IPancakeV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\ninterface IPancakeV2Router02 is IPancakeV2Router01 {\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    \r\n}\r\n\r\ncontract BEP20 is Context, IBEP20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit onOwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n    // Protocol by BloctechSolutions.com\r\n\r\ncontract SPIN_ADA_Token is BEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IPancakeV2Router02 public pancakeV2Router;\r\n    address public pancakeV2Pair;\r\n\r\n    uint256 public fee1stPhaseBuyMarketing     = 3;\r\n    uint256 public fee1stPhaseBuyDevelopment   = 2;\r\n    uint256 public fee1stPhaseBuyStaking       = 0;\r\n    uint256 public fee1stPhaseSellMarketing     = 4;\r\n    uint256 public fee1stPhaseSellDevelopment   = 3;\r\n    uint256 public fee1stPhaseSellStaking       = 0;\r\n\r\n    uint256 public fee2ndPhaseBuyMarketing     = 2;\r\n    uint256 public fee2ndPhaseBuyDevelopment   = 1;\r\n    uint256 public fee2ndPhaseBuyStaking       = 2;\r\n    uint256 public fee2ndPhaseSellMarketing     = 2;\r\n    uint256 public fee2ndPhaseSellDevelopment   = 2;\r\n    uint256 public fee2ndPhaseSellStaking       = 3;\r\n\r\n    uint256 public fee3rdPhaseBuyMarketing     = 1;\r\n    uint256 public fee3rdPhaseBuyDevelopment   = 0;\r\n    uint256 public fee3rdPhaseBuyStaking       = 4;\r\n    uint256 public fee3rdPhaseSellMarketing     = 1;\r\n    uint256 public fee3rdPhaseSellDevelopment   = 0;\r\n    uint256 public fee3rdPhaseSellStaking       = 6;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n\r\n    uint256 public _totalSupply = 100000000 * (10**18);\r\n\r\n    address public walletMarketing;\r\n    address public walletDevelopment;\r\n    address public walletStakingReward;\r\n\r\n    uint256 public launchTime;\r\n    \r\n    bool inSwapAndLiquify;   \r\n    bool public swapAndLiquifyEnabled; \r\n    uint256 private numTokensSellToMarketingAndDevelopment = 10000 * 10**18;\r\n    uint256 accumulatedForMarketing;\r\n    uint256 accumulatedForDev;\r\n    uint256 accumulatedForStake;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor () BEP20(\"SPINADA\", \"SPIN\") {\r\n        IPancakeV2Router02 _pancakeV2Router = IPancakeV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancake Mainnet\r\n        //IPancakeV2Router02 _pancakeV2Router = IPancakeV2Router02(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); //Pancake Testnet\r\n        // Create a pancake pair for this new token\r\n        address _pancakeV2Pair = IPancakeV2Factory(_pancakeV2Router.factory())\r\n            .createPair(address(this), _pancakeV2Router.WETH());\r\n\r\n        pancakeV2Router = _pancakeV2Router;\r\n        pancakeV2Pair = _pancakeV2Pair;\r\n\r\n        // exclude from paying fees\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        walletMarketing = owner();\r\n        walletDevelopment = owner();\r\n        walletStakingReward = owner();\r\n\r\n        _mint(owner(), _totalSupply);\r\n\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setWalletMarketing(address wallet) external onlyOwner() {\r\n        require(wallet != address(0), \"Marketing wallet can't be the zero address\");\r\n        walletMarketing = wallet;\r\n    }\r\n\r\n    function setWalletDevelopment(address wallet) external onlyOwner() {\r\n        require(wallet != address(0), \"Development wallet can't be the zero address\");\r\n        walletDevelopment = wallet;\r\n    }\r\n\r\n    function setWalletStakingReward(address wallet) external onlyOwner() {\r\n        require(wallet != address(0), \"Staking wallet can't be the zero address\");\r\n        walletStakingReward = wallet;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n    \r\n    function includeOrExcludeFromFee(address account, bool value) public onlyOwner {\r\n        _isExcludedFromFees[account] = value;\r\n    }\r\n\r\n    function updateSwapLimit(uint256 value) public onlyOwner {\r\n        numTokensSellToMarketingAndDevelopment = value;\r\n    }\r\n\r\n    function updateSwapAndLiquifyEnabled(bool value) public onlyOwner {\r\n        swapAndLiquifyEnabled = value;\r\n    }\r\n\r\n    function update1stPhaseTax(uint256 buyMarketingFee, uint256 buyDevelopmentFee, uint256 buyStakingRewardFee,\r\n        uint256 sellMarketingFee, uint256 sellDevelopmentFee, uint256 sellStakingRewardFee) public onlyOwner {\r\n        require(buyMarketingFee.add(buyDevelopmentFee).add(buyStakingRewardFee) <=7, \"Total buying tax should less then 8%\");\r\n        require(sellMarketingFee.add(sellDevelopmentFee).add(sellStakingRewardFee) <=7, \"Total selling tax should less then 8%\");\r\n\r\n        fee1stPhaseBuyMarketing     = buyMarketingFee;\r\n        fee1stPhaseBuyDevelopment   = buyDevelopmentFee;\r\n        fee1stPhaseBuyStaking       = buyStakingRewardFee;\r\n\r\n        fee1stPhaseSellMarketing     = sellMarketingFee;\r\n        fee1stPhaseSellDevelopment   = sellDevelopmentFee;\r\n        fee1stPhaseSellStaking       = sellStakingRewardFee;\r\n    }\r\n\r\n    function update2ndPhaseTax(uint256 buyMarketingFee, uint256 buyDevelopmentFee, uint256 buyStakingRewardFee,\r\n        uint256 sellMarketingFee, uint256 sellDevelopmentFee, uint256 sellStakingRewardFee) public onlyOwner {\r\n        require(buyMarketingFee.add(buyDevelopmentFee).add(buyStakingRewardFee) <=7, \"Total buying tax should less then 8%\");\r\n        require(sellMarketingFee.add(sellDevelopmentFee).add(sellStakingRewardFee) <=7, \"Total selling tax should less then 8%\");\r\n\r\n        fee2ndPhaseBuyMarketing     = buyMarketingFee;\r\n        fee2ndPhaseBuyDevelopment   = buyDevelopmentFee;\r\n        fee2ndPhaseBuyStaking       = buyStakingRewardFee;\r\n\r\n        fee2ndPhaseSellMarketing     = sellMarketingFee;\r\n        fee2ndPhaseSellDevelopment   = sellDevelopmentFee;\r\n        fee2ndPhaseSellStaking       = sellStakingRewardFee;\r\n    }\r\n\r\n    function update3rdPhaseTax(uint256 buyMarketingFee, uint256 buyDevelopmentFee, uint256 buyStakingRewardFee,\r\n        uint256 sellMarketingFee, uint256 sellDevelopmentFee, uint256 sellStakingRewardFee) public onlyOwner {\r\n        require(buyMarketingFee.add(buyDevelopmentFee).add(buyStakingRewardFee) <=7, \"Total buying tax should less then 8%\");\r\n        require(sellMarketingFee.add(sellDevelopmentFee).add(sellStakingRewardFee) <=7, \"Total selling tax should less then 8%\");\r\n\r\n        fee3rdPhaseBuyMarketing     = buyMarketingFee;\r\n        fee3rdPhaseBuyDevelopment   = buyDevelopmentFee;\r\n        fee3rdPhaseBuyStaking       = buyStakingRewardFee;\r\n\r\n        fee3rdPhaseSellMarketing     = sellMarketingFee;\r\n        fee3rdPhaseSellDevelopment   = sellDevelopmentFee;\r\n        fee3rdPhaseSellStaking       = sellStakingRewardFee;\r\n    }\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(launchTime == 0){\r\n            require(from == owner(), \"Only owner can transfer before launching\");\r\n        }\r\n        \r\n        uint256 swapAmount = balanceOf(address(this));\r\n        bool overMinTokenBalance = swapAmount >= numTokensSellToMarketingAndDevelopment;\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            from != pancakeV2Pair &&\r\n            overMinTokenBalance &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            swapTokensForEth(swapAmount);\r\n            uint256 balance = address(this).balance;\r\n            uint256 marketingAmount = balance.mul(accumulatedForMarketing).div(swapAmount);\r\n            uint256 stakeAmount = balance.mul(accumulatedForStake).div(swapAmount);\r\n            uint256 devAmount = balance.sub(marketingAmount).sub(stakeAmount);\r\n\r\n            accumulatedForMarketing = 0;\r\n            accumulatedForStake = 0;\r\n            accumulatedForDev = 0;\r\n\r\n            payable(walletMarketing).transfer(marketingAmount);\r\n            payable(walletStakingReward).transfer(stakeAmount);\r\n            payable(walletDevelopment).transfer(devAmount);\r\n        }\r\n\r\n        bool takeFee = true;\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if(takeFee) {\r\n            uint256 feeMarketing;\r\n            uint256 feeDevelop;\r\n            uint256 feeStaking;\r\n\r\n            if(block.timestamp <= launchTime.add(30 days)){\r\n                if(to == pancakeV2Pair){ //SELLING\r\n                    feeMarketing    = fee1stPhaseSellMarketing;\r\n                    feeDevelop      = fee1stPhaseSellDevelopment;\r\n                    feeStaking      = fee1stPhaseSellStaking;\r\n                }else{\r\n                    feeMarketing    = fee1stPhaseBuyMarketing;\r\n                    feeDevelop      = fee1stPhaseBuyDevelopment;\r\n                    feeStaking      = fee1stPhaseBuyStaking;\r\n                }\r\n            } else if(block.timestamp > launchTime.add(30 days) && block.timestamp <= launchTime.add(90 days)){\r\n                if(to == pancakeV2Pair){ //SELLING\r\n                    feeMarketing    = fee2ndPhaseSellMarketing;\r\n                    feeDevelop      = fee2ndPhaseSellDevelopment;\r\n                    feeStaking      = fee2ndPhaseSellStaking;\r\n                }else{\r\n                    feeMarketing    = fee2ndPhaseBuyMarketing;\r\n                    feeDevelop      = fee2ndPhaseBuyDevelopment;\r\n                    feeStaking      = fee2ndPhaseBuyStaking;\r\n                }\r\n            } else {\r\n                if(to == pancakeV2Pair){ //SELLING\r\n                    feeMarketing    = fee3rdPhaseSellMarketing;\r\n                    feeDevelop      = fee3rdPhaseSellDevelopment;\r\n                    feeStaking      = fee3rdPhaseSellStaking;\r\n                }else{\r\n                    feeMarketing    = fee3rdPhaseBuyMarketing;\r\n                    feeDevelop      = fee3rdPhaseBuyDevelopment;\r\n                    feeStaking      = fee3rdPhaseBuyStaking;\r\n                }\r\n            }\r\n\r\n            uint256 feeAmountMarketing      = amount.mul(feeMarketing).div(100);\r\n            uint256 feeAmountDevelopment    = amount.mul(feeDevelop).div(100);\r\n            uint256 feeAmountStakingReward  = amount.mul(feeStaking).div(100);\r\n\r\n            accumulatedForMarketing = accumulatedForMarketing.add(feeAmountMarketing);\r\n            accumulatedForStake = accumulatedForStake.add(feeAmountStakingReward);\r\n            accumulatedForDev = accumulatedForDev.add(feeAmountDevelopment);\r\n            \r\n            uint256 fee = feeAmountMarketing.add(feeAmountDevelopment).add(feeAmountStakingReward);\r\n            super._transfer(from, address(this), fee);\r\n\r\n            amount = amount.sub(fee);\r\n        }\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap{\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeV2Router.WETH();\r\n\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    //Recover token\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        IBEP20(_tokenAddress).transfer(address(msg.sender), _tokenAmount);\r\n    }\r\n\r\n    //Recover bnb\r\n    function recoverBnb(uint256 _tokenAmount) external onlyOwner {\r\n        payable(msg.sender).transfer(_tokenAmount);\r\n    }\r\n\r\n    //Launch, let others to trade\r\n    function launch() external onlyOwner {\r\n        launchTime = block.timestamp;\r\n        swapAndLiquifyEnabled = true;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1stPhaseBuyDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1stPhaseBuyMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1stPhaseBuyStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1stPhaseSellDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1stPhaseSellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee1stPhaseSellStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2ndPhaseBuyDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2ndPhaseBuyMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2ndPhaseBuyStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2ndPhaseSellDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2ndPhaseSellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee2ndPhaseSellStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3rdPhaseBuyDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3rdPhaseBuyMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3rdPhaseBuyStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3rdPhaseSellDevelopment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3rdPhaseSellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee3rdPhaseSellStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeOrExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletDevelopment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setWalletStakingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyStakingRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellStakingRewardFee\",\"type\":\"uint256\"}],\"name\":\"update1stPhaseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyStakingRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellStakingRewardFee\",\"type\":\"uint256\"}],\"name\":\"update2ndPhaseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyStakingRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellDevelopmentFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellStakingRewardFee\",\"type\":\"uint256\"}],\"name\":\"update3rdPhaseTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDevelopment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletStakingReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SPIN_ADA_Token", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c4572724a4d3d4d5ea3cded12f685aa4a7a66872d5f413eecfa0154281ba2857"}