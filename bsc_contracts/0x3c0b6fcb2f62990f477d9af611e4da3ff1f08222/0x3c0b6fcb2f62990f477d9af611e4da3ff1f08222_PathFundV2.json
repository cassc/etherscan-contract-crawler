{"SourceCode": "//SPDX-License-Identifier: KK\r\n/* o/\r\n\r\n /$$$$$$$             /$$     /$$       /$$$$$$$$                        /$$\r\n| $$__  $$           | $$    | $$      | $$_____/                       | $$\r\n| $$  \\ $$ /$$$$$$  /$$$$$$  | $$$$$$$ | $$    /$$   /$$ /$$$$$$$   /$$$$$$$\r\n| $$$$$$$/|____  $$|_  $$_/  | $$__  $$| $$$$$| $$  | $$| $$__  $$ /$$__  $$\r\n| $$____/  /$$$$$$$  | $$    | $$  \\ $$| $$__/| $$  | $$| $$  \\ $$| $$  | $$\r\n| $$      /$$__  $$  | $$ /$$| $$  | $$| $$   | $$  | $$| $$  | $$| $$  | $$\r\n| $$     |  $$$$$$$  |  $$$$/| $$  | $$| $$   |  $$$$$$/| $$  | $$|  $$$$$$$\r\n|__/      \\_______/   \\___/  |__/  |__/|__/    \\______/ |__/  |__/ \\_______/                                                                            \r\nWritten by Katowice (@Katerina_978)  \r\n*/\r\npragma solidity 0.8.0;\r\n//interfaces\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n// contracts\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\ncontract PathFundV2 is ERC20, Ownable {\r\n//custom\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n//bool\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public sendToMarketing = true;\r\n    bool public sendToDevelopment = true;\r\n    bool public sendToBuyBack = true;\r\n    bool public sendToLiq = true;\r\n    bool public marketActive = false; \r\n    bool public maxWalletActive = false;\r\n    bool public blockMultiBuys = false;\r\n    bool public limitSells = false;\r\n    bool public limitBuys = false;\r\n    bool public feeStatus = true;\r\n    bool public buyFeeStatus = true;\r\n    bool public sellFeeStatus = true;\r\n    bool public onlyTransfers = false;\r\n    bool public blacklistActive = true;\r\n    bool private isInternalTransaction = false;\r\n//address\r\n    address public uniswapV2Pair;\r\n    address public marketingAddress = 0xA68cb5A1bc9f6397Cb13f806a87858FC5e9c8236;\r\n    address public developmentAddress = 0x98B102DF4ACEd6Fd4d3c6cAf8e3aEBaE9d340068;\r\n    address public buybackAddress = 0xcc7163EC7da906D02eB348a26bE0C8f9F8462385;\r\n    address public LPtokenReciver = 0x00F65796aB084131c809eB5aA44461739d2bD8b3;\r\n    address public airDropAddress;\r\n//uint\r\n    uint public total_supply;\r\n    uint public buyMarketingFee = 2;\r\n    uint public sellMarketingFee= 2;\r\n    uint public buyDevelopmentFee= 2;\r\n    uint public sellDevelopmentFee= 2;\r\n    uint public buyLiqFee= 3;\r\n    uint public sellLiqFee= 3;\r\n    uint public buyBuyBackFee= 2;\r\n    uint public sellBuyBackFee= 2;\r\n    uint public totalBuyFee = buyMarketingFee + buyDevelopmentFee + buyLiqFee + buyBuyBackFee;\r\n    uint public totalSellFee = sellMarketingFee + sellDevelopmentFee + sellLiqFee + sellBuyBackFee;\r\n    uint public maxBuyTxAmount = 300000*10**9; \r\n    uint public maxSellTxAmount = 300000_0*10**9;\r\n    uint public maxWallet = 3000000*10**9; \r\n    uint public minimumTokensBeforeSwap = 60000*10**9;\r\n    uint public tokensToSwap = minimumTokensBeforeSwap; \r\n    uint public intervalSecondsForSwap = 120;\r\n    uint public secMultiBuy;\r\n    uint private startTimeForSwap;\r\n    uint private marketActiveAt;\r\n    uint private lenBlacklist;\r\n    uint private lenPremarket;\r\n    uint private lenExcludedFee;\r\n\r\n//struct\r\n    struct userData {uint lastBuyTime;}\r\n//mapping & list\r\n    mapping (address => bool) public blacklistAddress;\r\n    address[] public listBlackListAddress;\r\n    mapping (address => bool) public premarketUser;\r\n    address[] public listPremarketUser;\r\n    mapping (address => bool) public excludedFromFees;\r\n    address[] public listExcludedFromFees;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => userData) public userLastTradeData;\r\n//event\r\n    event MarketingCollected(uint256 amount);\r\n    event DevelopmentCollected(uint256 amount);\r\n    event LiquidityAdded(uint256 bnbAmount, uint256 tokenAmount);\r\n    event BuyBackCollected (uint256 amount);\r\n// constructor\r\n    constructor() ERC20(\"PathFundV2\", \"PATH\") {\r\n        total_supply = 100_000_000 * 10 ** decimals();\r\n        // set gvars\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        //spawn pair\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n        // mappings\r\n        excludedFromFees[marketingAddress] = true;\r\n        excludedFromFees[developmentAddress] = true;\r\n        excludedFromFees[buybackAddress] = true;\r\n        excludedFromFees[address(this)] = true;\r\n        excludedFromFees[owner()] = true;\r\n        premarketUser[owner()] = true;\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n        _mint(msg.sender, total_supply); // mint is used only here\r\n    }\r\n    // accept bnb for autoswap\r\n    receive() external payable {}\r\n\r\n// utility functions\r\n      function kkAirDrop(address[] memory _address, uint256[] memory _amount) external { \r\n        require(msg.sender == owner() || msg.sender == airDropAddress); \r\n        for(uint i=0; i< _amount.length; i++){\r\n            address adr = _address[i];\r\n            uint amnt = _amount[i] *10**decimals();\r\n            super._transfer(msg.sender, adr, amnt); \r\n        }\r\n    }\r\n\r\n    function setairDropAddress(address adr) public onlyOwner { \r\n        airDropAddress = adr;  \r\n    }\r\n\r\n    function updateUniswapV2Router(address newRouterAddress, bool create, address pair) external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(newRouterAddress);\r\n        if(create) {\r\n            address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), uniswapV2Router.WETH());\r\n            uniswapV2Pair = _uniswapV2Pair;\r\n            automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n        } else {\r\n            uniswapV2Pair = pair;\r\n            automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n        }\r\n    }\r\n    function transferForeignToken(address _token, address _to, uint _value) external onlyOwner returns(bool _sent){\r\n        if(_value == 0) {\r\n            _value = IERC20(_token).balanceOf(address(this));\r\n        } \r\n        _sent = IERC20(_token).transfer(_to, _value);\r\n    }\r\n    function sweep() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n//switch functions\r\n    function switchMarketActive(bool _state, bool _onlytransfers) external onlyOwner {\r\n        marketActive = _state;\r\n        if(_state) {\r\n            marketActiveAt = block.timestamp;\r\n            onlyTransfers = _onlytransfers;\r\n        }\r\n        else{\r\n            onlyTransfers = _onlytransfers;\r\n        }\r\n    }\r\n    function switchBlockMultiBuys(bool _state, uint sec) external onlyOwner {\r\n        blockMultiBuys = _state;\r\n        if(_state){secMultiBuy = sec;}\r\n        \r\n    }\r\n    function switchLimitSells(bool _state) external onlyOwner {\r\n        limitSells = _state;\r\n    }\r\n    function switchLimitBuys(bool _state) external onlyOwner {\r\n        limitBuys = _state;\r\n    }\r\n//set functions\r\n    function setsendFee(bool marketing, bool development, bool liq, bool bback) external onlyOwner {\r\n        sendToMarketing = marketing;\r\n        sendToLiq = liq;\r\n        sendToDevelopment = development;\r\n        sendToBuyBack = bback;\r\n    }\r\n\r\n    function setFeesAddress(address marketing, address development, address lptokRec, address bback) public onlyOwner {\r\n        marketingAddress = marketing;\r\n        developmentAddress = development;\r\n        buybackAddress = bback;\r\n        LPtokenReciver = lptokRec;\r\n        excludedFromFees[developmentAddress] = true;\r\n        excludedFromFees[marketingAddress] = true;\r\n        excludedFromFees[buybackAddress] = true;\r\n    }\r\n    function setbuybackAddress(address _adr) external onlyOwner {\r\n        buybackAddress = _adr;\r\n        excludedFromFees[buybackAddress] = true;\r\n    }\r\n    function setmarketingAddress(address _adr) external onlyOwner {\r\n        marketingAddress = _adr;\r\n        excludedFromFees[marketingAddress] = true;\r\n    }\r\n    function setdevelopmentAddress(address _adr) external onlyOwner {\r\n        developmentAddress = _adr;\r\n        excludedFromFees[developmentAddress] = true;\r\n    }\r\n    function setLPtokenReciver(address _adr) external onlyOwner {\r\n        LPtokenReciver = _adr;\r\n    }\r\n    function betterTransferOwnership(address newowner) public onlyOwner {\r\n        require(newowner != owner());\r\n        excludedFromFees[owner()] = false;\r\n        premarketUser[owner()] = false;\r\n        transferOwnership(newowner);\r\n        excludedFromFees[newowner] = true;\r\n        premarketUser[newowner] = true;\r\n        emit OwnershipTransferred(owner(), newowner);\r\n    }\r\n    function setMaxSellTxAmount(uint _value) external onlyOwner {\r\n        require(_value >= ( total_supply * 1 /1000) /(10**decimals()), \"MaxSell Tx too low\");\r\n        maxSellTxAmount = _value*10**decimals();\r\n    }\r\n    function setMaxBuyTxAmount(uint _value) external onlyOwner {\r\n        require(_value >= ( total_supply * 1 /1000) /(10**decimals()), \"MaxBuy Tx too low\");\r\n        maxBuyTxAmount = _value*10**decimals();\r\n    }\r\n    function setMaxWallet(bool status, uint max) external onlyOwner {\r\n        require(max >=  (total_supply * 5 /1000)/(10**decimals()), \"MaxWallet too low\");\r\n        maxWalletActive = status;\r\n        maxWallet = max*10**decimals();\r\n    }\r\n    function setFee(bool is_buy, uint marketing, uint development, uint liq, uint buyback) public onlyOwner {\r\n        uint totFee = marketing+development+liq;\r\n        require(totFee <= 45, \"Fee too high!\" );\r\n        if(is_buy) {\r\n            buyDevelopmentFee = development;\r\n            buyMarketingFee = marketing;\r\n            buyLiqFee = liq;\r\n            buyBuyBackFee = buyback;\r\n            totalBuyFee = buyMarketingFee + buyDevelopmentFee + buyLiqFee + buyBuyBackFee;\r\n        } else {\r\n            sellDevelopmentFee = development;\r\n            sellMarketingFee = marketing;\r\n            sellLiqFee = liq;\r\n            sellBuyBackFee = buyback;\r\n            totalSellFee = sellMarketingFee + sellDevelopmentFee + sellLiqFee + sellBuyBackFee;\r\n        }\r\n    }\r\n    function setFeeStatus(bool buy, bool sell, bool _state) external onlyOwner {\r\n        feeStatus = _state;\r\n        buyFeeStatus = buy;\r\n        sellFeeStatus = sell;\r\n    }\r\n    function setSwapAndLiquify(bool _state, uint _intervalSecondsForSwap, uint _minimumTokensBeforeSwap, uint _tokensToSwap) public onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        intervalSecondsForSwap = _intervalSecondsForSwap;\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap*10**decimals();\r\n        tokensToSwap = _tokensToSwap*10**decimals();\r\n    }\r\n    function set_allFees(uint bbback, uint sbback, uint bMarketing, uint sMarketing, uint bDevelopment, uint sDevelopment, uint bLiq, uint sLiq) public onlyOwner {\r\n        require(bMarketing+bDevelopment+bLiq+bbback <= 45 && sMarketing+sDevelopment+sLiq+sbback <= 45, \"Fee too high!\" );\r\n        setFee(true, bMarketing, bDevelopment, bLiq, bbback);\r\n        setFee(false, sMarketing, sDevelopment, sLiq, sbback);\r\n    }\r\n    function set_maxLimits(uint maxbuy, uint maxsell, uint maxWall) public onlyOwner {\r\n        require(maxbuy >= (total_supply * 1 /1000)/(10**decimals()) && maxsell >= (total_supply * 1 /1000)/(10**decimals()), \"MaxTx buy and/or sell too low!\");\r\n        require(maxWall >= (total_supply * 5 /1000)/(10**decimals()), \"MaxWallet too low!\");\r\n        maxBuyTxAmount = maxbuy*10**decimals();\r\n        maxSellTxAmount = maxsell*10**decimals();\r\n        maxWallet = maxWall*10**decimals();\r\n    }\r\n    function disableBlacklistState() external onlyOwner {\r\n        // there is no coming back after disabling blacklist.\r\n        blacklistActive = false;\r\n    }\r\n// mappings functions\r\n    function editPremarketUser(address _target, bool _status) external onlyOwner {\r\n        premarketUser[_target] = _status;\r\n        if(_status){\r\n            listPremarketUser.push(_target);\r\n            lenPremarket+=1;\r\n        }else{\r\n            uint idx = findIndex(listPremarketUser, _target);\r\n            delete listPremarketUser[idx];\r\n            lenPremarket-=1;\r\n        }\r\n    }\r\n    function editExcludedFromFees(address _target, bool _status) external onlyOwner {\r\n        excludedFromFees[_target] = _status;\r\n        if(_status){\r\n            listExcludedFromFees.push(_target);\r\n            lenExcludedFee+=1;\r\n        }else{\r\n            uint idx = findIndex(listExcludedFromFees, _target);\r\n            delete listExcludedFromFees[idx];\r\n            lenExcludedFee-=1;\r\n        }\r\n    }\r\n    function excludeMultipleAccountsFromFees(address[] memory accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            excludedFromFees[accounts[i]] = excluded;\r\n            if(excluded){\r\n                listExcludedFromFees.push(accounts[i]);\r\n                lenExcludedFee+=1;\r\n            }else{\r\n                uint idx = findIndex(listExcludedFromFees, accounts[i]);\r\n                delete listExcludedFromFees[idx];\r\n                lenExcludedFee-=1;\r\n            }\r\n        }\r\n    }\r\n    function editAutomatedMarketMakerPairs(address _target, bool _status) external onlyOwner {\r\n        automatedMarketMakerPairs[_target] = _status;\r\n    }\r\n    function blacklistAccount(address _target, bool _status) external onlyOwner {\r\n        blacklistAddress[_target] = _status;\r\n        if(_status){\r\n            listBlackListAddress.push(_target);\r\n            lenBlacklist += 1;\r\n        }\r\n        else{\r\n            uint idx = findIndex(listBlackListAddress, _target);\r\n            delete listBlackListAddress[idx];\r\n            lenBlacklist-=1;\r\n        }\r\n    }\r\n    function blacklistMultipleAccounts(address[] calldata _targets, bool _state) external onlyOwner {\r\n        for(uint256 i = 0; i < _targets.length; i++) {\r\n            blacklistAddress[_targets[i]] = _state;\r\n            if(_state){\r\n                listBlackListAddress.push(_targets[i]);\r\n                lenBlacklist += 1;\r\n            }else{\r\n                uint idx = findIndex(listBlackListAddress, _targets[i]);\r\n                delete listBlackListAddress[idx];\r\n                lenBlacklist-=1;\r\n            }\r\n        }\r\n    }\r\n// operational functions\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            LPtokenReciver,\r\n            block.timestamp\r\n        );\r\n    }\r\n    modifier FastTx() {\r\n        isInternalTransaction = true;\r\n        _;\r\n        isInternalTransaction = false;\r\n    }\r\n    function distributeLiquifiedToken(uint tokenToLiq) private{\r\n    // fees redistribution\r\n        uint256 caBalance = address(this).balance;\r\n        //liquidity add\r\n        if(sendToLiq){\r\n            uint256 liqPart = (caBalance * sellLiqFee / totalSellFee);\r\n            addLiquidity(tokenToLiq, liqPart/2);\r\n            emit LiquidityAdded(liqPart/2, tokenToLiq);\r\n        }\r\n        //marketing\r\n        if(sendToMarketing) {\r\n            uint256 marketingPart = caBalance * sellMarketingFee / totalSellFee;\r\n            (bool success,) = address(marketingAddress).call{value: marketingPart}(\"\");\r\n            if(success) {\r\n                emit MarketingCollected(marketingPart);\r\n            }\r\n        }\r\n        //development\r\n        if(sendToDevelopment) {\r\n            uint256 developmentPart = caBalance * sellDevelopmentFee / totalSellFee;\r\n            (bool success,) = address(developmentAddress).call{value: developmentPart}(\"\");\r\n            if(success) {\r\n                emit DevelopmentCollected(developmentPart);\r\n            }\r\n        }\r\n        //buyback\r\n        if(sendToBuyBack) {\r\n            uint256 buybackPart = caBalance * sellBuyBackFee / totalSellFee;\r\n            (bool success,) = address(buybackAddress).call{value: buybackPart}(\"\");\r\n            if(success) {\r\n                emit BuyBackCollected(buybackPart);\r\n            }\r\n        }\r\n    }\r\n    function swapAndLiquify(uint256 amount) private FastTx {\r\n        uint256 tokenToLiq = ((tokensToSwap * sellLiqFee) / totalSellFee)/2; \r\n        swapTokensForEth(amount - tokenToLiq);\r\n        distributeLiquifiedToken(tokenToLiq);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        uint trade_type = 0;\r\n        bool overMinimumTokenBalance = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n    // market status flag\r\n        if(!marketActive) {\r\n            if(onlyTransfers){\r\n                require(trade_type == 0);\r\n            }else{\r\n                require(premarketUser[from],\"cannot trade before the market opening\");}\r\n        }\r\n    // normal transaction\r\n        if(!isInternalTransaction) {\r\n        // tx limits\r\n            //buy\r\n            if(automatedMarketMakerPairs[from]) {\r\n                trade_type = 1;\r\n                // limits\r\n                if(!excludedFromFees[to]) {\r\n                    // tx limit\r\n                    if(limitBuys) {\r\n                        require(amount <= maxBuyTxAmount, \"maxBuyTxAmount Limit Exceeded\");\r\n                    }\r\n                    // multi-buy limit\r\n                    if(blockMultiBuys) {\r\n                        require(userLastTradeData[to].lastBuyTime + secMultiBuy <= block.timestamp,\"Multi-buy orders disabled.\");\r\n                        userLastTradeData[to].lastBuyTime = block.timestamp;\r\n                    }\r\n                }\r\n            }\r\n            //sell\r\n            else if(automatedMarketMakerPairs[to]) {\r\n                trade_type = 2;\r\n                // marketing auto-bnb\r\n                if (swapAndLiquifyEnabled && balanceOf(uniswapV2Pair) > 0) {\r\n                    if (overMinimumTokenBalance && startTimeForSwap + intervalSecondsForSwap <= block.timestamp) {\r\n                        startTimeForSwap = block.timestamp;\r\n                        // sell to bnb\r\n                        swapAndLiquify(tokensToSwap);\r\n                    }\r\n                }\r\n                // limits\r\n                if(!excludedFromFees[from]) {\r\n                    // tx limit\r\n                    if(limitSells) {\r\n                    require(amount <= maxSellTxAmount, \"maxSellTxAmount Limit Exceeded\");\r\n                    }\r\n                }\r\n            }\r\n            \r\n        // maxWallet\r\n            if(maxWalletActive) {\r\n                if(!excludedFromFees[from] && !excludedFromFees[to] && (trade_type == 1 || trade_type == 0)) {\r\n                    require(amount + balanceOf(to) <= maxWallet, \"maxWallet Limit Exceeded\");\r\n                }\r\n            }\r\n        // fees management\r\n            if(feeStatus) {\r\n                if(blacklistActive) {\r\n                    if(trade_type == 0 || trade_type == 2) {\r\n                        require(!blacklistAddress[from],\"your account is locked\");\r\n                    }\r\n                }\r\n                // buy\r\n                if(trade_type == 1 && buyFeeStatus && !excludedFromFees[to]) {\r\n                \tuint txFees = amount * totalBuyFee / 100;\r\n                \tamount -= txFees;\r\n                    super._transfer(from, address(this), txFees);\r\n                }\r\n                //sell\r\n                if(trade_type == 2 && sellFeeStatus && !excludedFromFees[from]) {\r\n                \tuint txFees = amount * totalSellFee / 100;\r\n                \tamount -= txFees;\r\n                    super._transfer(from, address(this), txFees);\r\n                }\r\n                // no wallet to wallet tax\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n    function findIndex(address[] memory aList, address indexToFind) private pure returns(uint){\r\n        for(uint i=0; i<aList.length; i++){\r\n            if(aList[i] == indexToFind){\r\n                return i;\r\n            }\r\n        }revert(\"can't delete an address from a list if it doesn't exist\");\r\n    }\r\n    function retunList_blacklist() public view returns(address[] memory){\r\n        address[] memory l_adrs = new address[](lenBlacklist);\r\n        l_adrs = listBlackListAddress;\r\n        return l_adrs;\r\n    }\r\n    function retunList_premarket() public view returns(address[] memory){\r\n        address[] memory l_adrs = new address[](lenPremarket);\r\n        l_adrs = listPremarketUser;\r\n        return l_adrs;\r\n    }\r\n    function retunList_excludedFee() public view returns(address[] memory){\r\n        address[] memory l_adrs = new address[](lenExcludedFee);\r\n        l_adrs = listExcludedFromFees;\r\n        return l_adrs;\r\n    }\r\n\r\n    function isThisFrom_KKteam() public pure returns(bool) {\r\n        //heheboi.gif\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyBackCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DevelopmentCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MarketingCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPtokenReciver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"betterTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"blacklistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"blacklistMultipleAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockMultiBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBuyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBlacklistState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editAutomatedMarketMakerPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"editPremarketUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalSecondsForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isThisFrom_KKteam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"kkAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSells\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listBlackListAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listExcludedFromFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listPremarketUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"premarketUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retunList_blacklist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retunList_excludedFee\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retunList_premarket\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secMultiBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDevelopmentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiqFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToDevelopment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToLiq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"is_buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lptokRec\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bback\",\"type\":\"address\"}],\"name\":\"setFeesAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setLPtokenReciver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_intervalSecondsForSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bbback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sbback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bDevelopment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sDevelopment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bLiq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sLiq\",\"type\":\"uint256\"}],\"name\":\"set_allFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxbuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxsell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWall\",\"type\":\"uint256\"}],\"name\":\"set_maxLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setairDropAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setbuybackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setdevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"setmarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"marketing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"development\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"liq\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"bback\",\"type\":\"bool\"}],\"name\":\"setsendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sec\",\"type\":\"uint256\"}],\"name\":\"switchBlockMultiBuys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"switchLimitBuys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"switchLimitSells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_onlytransfers\",\"type\":\"bool\"}],\"name\":\"switchMarketActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"create\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastTradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PathFundV2", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6a0df438836390f7deb7568401304fcf128f311088103e65b56549ae07c3720c"}