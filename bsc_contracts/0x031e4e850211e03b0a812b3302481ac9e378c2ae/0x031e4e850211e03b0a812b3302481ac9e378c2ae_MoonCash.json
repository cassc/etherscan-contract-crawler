{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2;\r\n\r\ncontract MoonCash {\r\n    uint256 public MOONERS_FOR_1BNB = 10000;\r\n    uint256 public SECOND_RATE = 347223;\r\n    uint256 public SECOND_RATE_SCALE = 10**10;\r\n    uint256 public REF_RATE = 8;\r\n    uint256 public DECIMALS = 10**18;\r\n    uint256 public WITHDRAW_TERM = 30;\r\n\r\n    bool public initialized = false;\r\n\r\n    address payable public devAddress;\r\n    mapping(address => uint256) public claimedEggs;\r\n    mapping(address => uint256) public lastHatch;\r\n    mapping(address => uint256) public lastCompound;\r\n    mapping(address => uint256) public firstBuy;\r\n    mapping(address => address) public referrals;\r\n\r\n    constructor() {\r\n        devAddress = payable(msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(devAddress == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function buyMooners(address ref) public payable {\r\n        require(initialized, \"Platform is not already active\");\r\n        //calculate mooners\r\n        uint256 eggsBought = calculateEggBuy(msg.value);\r\n        //calculate devFee and trasfer\r\n        uint256 fee = devFee(msg.value);\r\n        devAddress.transfer(fee);\r\n        //check if user already bought\r\n        if (firstBuy[msg.sender] == 0) {\r\n            firstBuy[msg.sender] = block.timestamp;\r\n        }\r\n        //assign mooners to the user\r\n        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender],eggsBought);\r\n        //compound to the referral (if referral not exist send compound to dead wallet)\r\n        uint256 referralEggs = SafeMath.div(SafeMath.mul(eggsBought, REF_RATE),100);\r\n        sendReferralMooners(ref, referralEggs);\r\n    }\r\n\r\n    function getProfitsFromMooners() public {\r\n        require(initialized, \"Platform is not already active\");\r\n        //get numdays of first buy\r\n        uint256 numDays = calculateDaysBuy(msg.sender);\r\n        //check if 30days are passed from the first buy\r\n        require(numDays >= WITHDRAW_TERM, \"You need to wait 30 days from your first buy\");\r\n        //get alla mooners of the user\r\n        uint256 hasEggs = getMyEggs(msg.sender);\r\n        //calculate the profit\r\n        uint256 eggValue = calculateEggSell(hasEggs, msg.sender);\r\n        //calculate devFee and trasfer\r\n        uint256 fee = devFee(eggValue);\r\n        devAddress.transfer(fee);\r\n        //assign the date of the last withdraw\r\n        lastHatch[msg.sender] = block.timestamp;\r\n        //send profits to the user wallet\r\n        payable(msg.sender).transfer(SafeMath.sub(eggValue, fee));\r\n    }\r\n\r\n    function compoundMooners() public {\r\n        require(initialized, \"Platform is not already active\");\r\n\r\n        //calculate new user mooners\r\n        uint256 userEggs = getMyEggs(msg.sender);\r\n        uint256 profitsToCompund = calculateEggSell(userEggs, msg.sender);\r\n        uint256 newMiners = SafeMath.div(SafeMath.mul(profitsToCompund, MOONERS_FOR_1BNB), DECIMALS);\r\n        //store the date of the last compound\r\n        lastCompound[msg.sender] = block.timestamp;\r\n\r\n        //add new Mooners to user wallet\r\n        claimedEggs[msg.sender] = SafeMath.add(claimedEggs[msg.sender],newMiners);\r\n    }\r\n\r\n    function sendReferralMooners(address ref, uint256 value) private {\r\n        uint256 eggs = value;\r\n        claimedEggs[ref] = SafeMath.add(claimedEggs[ref], eggs);\r\n    }\r\n\r\n    function giveMoonersForSponsorship(address ref, uint256 value) public onlyOwner {\r\n        uint256 eggs = value;\r\n        firstBuy[ref] = block.timestamp;\r\n        claimedEggs[ref] = SafeMath.add(claimedEggs[ref], eggs);\r\n    }\r\n\r\n    function initPlatform(bool start) public onlyOwner {\r\n        if (start == true) {\r\n            initialized = true;\r\n        }\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs, address user) public view returns (uint256) {\r\n        //calculate numdays from last user action\r\n        uint256 numSeconds = calculateSeconds(user);\r\n        //calculate number of BNBs related to number of Mooners\r\n        uint256 eth_num = SafeMath.div(SafeMath.mul(eggs, 100), MOONERS_FOR_1BNB);\r\n        //calculate profits to withdraw\r\n        uint256 profits = SafeMath.div(SafeMath.div(SafeMath.div(SafeMath.mul(SafeMath.mul(SafeMath.mul(eth_num, numSeconds), SECOND_RATE), DECIMALS), SECOND_RATE_SCALE),100),100);\r\n\r\n        return profits;\r\n    }\r\n\r\n    function calculateSeconds(address user) public view returns (uint256) {\r\n        //get the date of the last user withdraw\r\n        uint256 last_withdraw = lastHatch[user];\r\n        //check if there was a compound\r\n        if (last_withdraw == 0) {\r\n            last_withdraw = lastCompound[user];\r\n        }\r\n        //check if there was a withdraw or a compound, if not get the buy date\r\n        if (last_withdraw == 0) {\r\n            last_withdraw = firstBuy[user];\r\n        }\r\n        uint256 today_date = block.timestamp;\r\n        //calculate the number of seconds\r\n        uint256 numSeconds = SafeMath.sub(today_date, last_withdraw);\r\n\r\n        return numSeconds;\r\n    }\r\n\r\n    function calculateDaysBuy(address user) public view returns (uint256) {\r\n        //get the date of the last user buy\r\n        uint256 last_buy = firstBuy[user];\r\n        uint256 today_date = block.timestamp;\r\n        //calculate the number of days\r\n        uint256 diff = SafeMath.sub(today_date, last_buy);\r\n        uint256 numDays = SafeMath.div(SafeMath.div(SafeMath.div(diff, 60), 60),24);\r\n\r\n        return numDays;\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth_num) public view returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(eth_num, MOONERS_FOR_1BNB), DECIMALS);\r\n    }\r\n\r\n    function devFee(uint256 amount) public pure returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, 5), 100);\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyEggs(address user) public view returns (uint256) {\r\n        return claimedEggs[user];\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOONERS_FOR_1BNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_RATE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_TERM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyMooners\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateDaysBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_num\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundMooners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfitsFromMooners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"giveMoonersForSponsorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"start\",\"type\":\"bool\"}],\"name\":\"initPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoonCash", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01b9b53e9a8a798140e6f46a223986a9f82871b615bb3377494071ddc240963b"}