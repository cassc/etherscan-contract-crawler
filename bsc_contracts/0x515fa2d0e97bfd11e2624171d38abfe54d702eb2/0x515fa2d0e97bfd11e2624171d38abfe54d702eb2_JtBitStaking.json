{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n     \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\r\n     \u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\r\n     \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \r\n\u2588\u2588   \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551   \r\n\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551   \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551   \r\n \u255a\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d   \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d   \u255a\u2550\u255d   \r\n\r\n*/\r\n\r\npragma solidity >=0.4.22 <0.9.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// Main Contract\r\ncontract JtBitStaking {\r\n    using SafeMath for uint256;\r\n    IBEP20 public token;\r\n    address payable public DEPLOYER;\r\n\r\n    uint256 public MIN_DEPOSIT = 2_000 ether;\r\n    uint256[5] public REF_DEP_PERCENTS = [10_00, 5_00, 3_00, 1_00, 1_00];\r\n    uint256 public constant WITHDRAW_FEE = 10_00;\r\n    uint256 public constant PERCENTS_DIVIDER = 100_00;\r\n    uint256 public TIME_STEP = 1 days;\r\n\r\n    uint256 public totalStaked;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalReinvested;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalUsers;\r\n\r\n    bool public launched;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n    }\r\n\r\n    Plan[] internal plans;\r\n\r\n    struct Deposit {\r\n        uint8 plan;\r\n        uint256 percent;\r\n        uint256 amount;\r\n        uint256 profit;\r\n        uint256 start;\r\n        uint256 finish;\r\n    }\r\n\r\n    struct User {\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        address referrer;\r\n        uint256[5] levels;\r\n        uint256 bonus;\r\n        uint256 debt;\r\n        uint256 totalBonus;\r\n        uint256 totalWithdrawn;\r\n    }\r\n\r\n    mapping(address => User) internal users;\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == DEPLOYER, \"NOT AN OWNER\");\r\n        _;\r\n    }\r\n\r\n    event Newbie(address user);\r\n    event NewDeposit(\r\n        address indexed user,\r\n        uint8 plan,\r\n        uint256 percent,\r\n        uint256 amount,\r\n        uint256 profit,\r\n        uint256 start,\r\n        uint256 finish\r\n    );\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RefBonus(\r\n        address indexed referrer,\r\n        address indexed referral,\r\n        uint256 indexed level,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address _admin, address _token) {\r\n        token = IBEP20(_token);\r\n        DEPLOYER = payable(_admin);\r\n\r\n        plans.push(Plan(365, 1_00));\r\n    }\r\n\r\n    function invest(\r\n        address referrer,\r\n        uint8 plan,\r\n        uint256 amount\r\n    ) public {\r\n        require(launched, \"wait for the launch\");\r\n        require(!isContract(msg.sender));\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n        deposit(msg.sender, referrer, plan, amount);\r\n    }\r\n\r\n    function deposit(\r\n        address userAddress,\r\n        address referrer,\r\n        uint8 plan,\r\n        uint256 amount\r\n    ) internal {\r\n        require(plan <= plans.length, \"Invalid plan\");\r\n        User storage user = users[userAddress];\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (referrer == userAddress) {\r\n                referrer = DEPLOYER;\r\n            }\r\n\r\n            user.referrer = referrer;\r\n\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < REF_DEP_PERCENTS.length; i++) {\r\n                if (upline != address(0)) {\r\n                    users[upline].levels[i] = users[upline].levels[i].add(1);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            for (uint256 i = 0; i < REF_DEP_PERCENTS.length; i++) {\r\n                if (upline != address(0)) {\r\n                    uint256 refAmount = amount.mul(REF_DEP_PERCENTS[i]).div(\r\n                        PERCENTS_DIVIDER\r\n                    );\r\n                    users[upline].bonus = users[upline].bonus.add(refAmount);\r\n                    users[upline].totalBonus = users[upline].totalBonus.add(\r\n                        refAmount\r\n                    );\r\n                    totalRefBonus = totalRefBonus.add(refAmount);\r\n                    emit RefBonus(upline, userAddress, i, refAmount);\r\n                    upline = users[upline].referrer;\r\n                } else break;\r\n            }\r\n        }\r\n\r\n        if (user.deposits.length == 0) {\r\n            totalUsers = totalUsers.add(1);\r\n            user.checkpoint = block.timestamp;\r\n            emit Newbie(userAddress);\r\n        }\r\n\r\n        (uint256 percent, uint256 profit, uint256 finish) = getResult(\r\n            plan,\r\n            amount\r\n        );\r\n        user.deposits.push(\r\n            Deposit(plan, percent, amount, profit, block.timestamp, finish)\r\n        );\r\n\r\n        totalStaked = totalStaked.add(amount);\r\n        emit NewDeposit(\r\n            userAddress,\r\n            plan,\r\n            percent,\r\n            amount,\r\n            profit,\r\n            block.timestamp,\r\n            finish\r\n        );\r\n    }\r\n\r\n    function withdraw() public {\r\n        User storage user = users[msg.sender];\r\n        require(\r\n            block.timestamp >= user.checkpoint.add(TIME_STEP),\r\n            \"wait for next withdraw\"\r\n        );\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender);\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n        if (referralBonus > 0) {\r\n            user.bonus = 0;\r\n            totalAmount = totalAmount.add(referralBonus);\r\n        }\r\n        if (user.debt > 0) {\r\n            totalAmount = totalAmount.add(user.debt);\r\n            user.debt = 0;\r\n        }\r\n        uint256 fee = totalAmount.mul(WITHDRAW_FEE).div(PERCENTS_DIVIDER);\r\n        totalAmount = totalAmount.sub(fee);\r\n\r\n        uint256 contractBalance = token.balanceOf(address(this));\r\n        if (totalAmount > contractBalance) {\r\n            user.debt = user.debt.add(totalAmount.sub(contractBalance));\r\n            totalAmount = contractBalance;\r\n        }\r\n\r\n        user.checkpoint = block.timestamp;\r\n        user.totalWithdrawn = user.totalWithdrawn.add(totalAmount);\r\n        totalWithdrawn = totalWithdrawn.add(totalAmount);\r\n\r\n        token.transfer(msg.sender, totalAmount);\r\n\r\n        emit Withdrawn(msg.sender, totalAmount);\r\n    }\r\n\r\n    function launch() external onlyDeployer {\r\n        require(!launched, \"Already launched\");\r\n        launched = true;\r\n    }\r\n\r\n    function changeDeployer(address payable _new) external onlyDeployer {\r\n        require(!isContract(_new), \"Can't be a contract\");\r\n        DEPLOYER = _new;\r\n    }\r\n\r\n    function changeLimits(uint256 _minDep) external onlyDeployer {\r\n        MIN_DEPOSIT = _minDep;\r\n    }\r\n\r\n    function getPlanInfo(uint8 plan)\r\n        public\r\n        view\r\n        returns (uint256 time, uint256 percent)\r\n    {\r\n        time = plans[plan].time;\r\n        percent = plans[plan].percent;\r\n    }\r\n\r\n    function getResult(uint8 plan, uint256 amount)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 percent,\r\n            uint256 profit,\r\n            uint256 finish\r\n        )\r\n    {\r\n        percent = plans[plan].percent;\r\n\r\n        profit = amount.mul(percent).mul(plans[plan].time).div(100);\r\n\r\n        finish = block.timestamp.add(plans[plan].time.mul(TIME_STEP));\r\n    }\r\n\r\n    function getUserDividends(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        User storage user = users[userAddress];\r\n        uint256 totalAmount;\r\n\r\n        for (uint256 i = 0; i < user.deposits.length; i++) {\r\n            if (user.checkpoint < user.deposits[i].finish) {\r\n                uint256 share = user\r\n                    .deposits[i]\r\n                    .amount\r\n                    .mul(user.deposits[i].percent)\r\n                    .div(PERCENTS_DIVIDER);\r\n                uint256 from = user.deposits[i].start > user.checkpoint\r\n                    ? user.deposits[i].start\r\n                    : user.checkpoint;\r\n                uint256 to = user.deposits[i].finish < block.timestamp\r\n                    ? user.deposits[i].finish\r\n                    : block.timestamp;\r\n                if (from < to) {\r\n                    totalAmount = totalAmount.add(\r\n                        share.mul(to.sub(from)).div(TIME_STEP)\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalAmount;\r\n    }\r\n\r\n    function getUserCheckpoint(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].checkpoint;\r\n    }\r\n\r\n    function getUserReferrer(address userAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return users[userAddress].referrer;\r\n    }\r\n\r\n    function getUserDownlineCount(address userAddress)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 level1,\r\n            uint256 level2,\r\n            uint256 level3,\r\n            uint256 level4,\r\n            uint256 level5\r\n        )\r\n    {\r\n        level1 = users[userAddress].levels[0];\r\n        level2 = users[userAddress].levels[1];\r\n        level3 = users[userAddress].levels[2];\r\n        level4 = users[userAddress].levels[3];\r\n        level5 = users[userAddress].levels[4];\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].bonus;\r\n    }\r\n\r\n    function getUserReferralTotalBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalBonus;\r\n    }\r\n\r\n    function getUserReferralWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n    }\r\n\r\n    function getUserDebt(address userAddress) public view returns (uint256) {\r\n        return users[userAddress].debt;\r\n    }\r\n\r\n    function getUserAvailable(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            getUserReferralBonus(userAddress)\r\n                .add(getUserDividends(userAddress))\r\n                .add(getUserDebt(userAddress));\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        for (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n            amount = amount.add(users[userAddress].deposits[i].amount);\r\n        }\r\n    }\r\n\r\n    function getUserDepositInfo(address userAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (\r\n            uint8 plan,\r\n            uint256 percent,\r\n            uint256 amount,\r\n            uint256 profit,\r\n            uint256 start,\r\n            uint256 finish\r\n        )\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        plan = user.deposits[index].plan;\r\n        percent = user.deposits[index].percent;\r\n        amount = user.deposits[index].amount;\r\n        profit = user.deposits[index].profit;\r\n        start = user.deposits[index].start;\r\n        finish = user.deposits[index].finish;\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalWithdrawn;\r\n    }\r\n\r\n    function isDepositActive(address userAddress, uint256 index)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        User storage user = users[userAddress];\r\n\r\n        return (user.deposits[index].finish > block.timestamp);\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPLOYER\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REF_DEP_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"changeDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDep\",\"type\":\"uint256\"}],\"name\":\"changeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDownlineCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level5\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isDepositActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JtBitStaking", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000499d9ae50c629f71efd1d0ec6d2142fccb42098e000000000000000000000000444c0ca80cd1bfa3aa66ffa25f7c72ffde7b7420", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://46debdfe540f321bd79307dc2c8b37956e65dda454055896519ef0cd7e3aaef6"}