{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Ice Cream Shop Game\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\npragma solidity ^0.8.21;\r\n\r\ncontract IceCreamGame {\r\n    struct Tower {\r\n        uint256 coins;\r\n        uint256 money;\r\n        uint256 money2;\r\n        uint256 yield;\r\n        uint256 timestamp;\r\n        uint256 hrs;\r\n        address ref;\r\n        uint256 refs;\r\n        uint256 refDeps;\r\n        uint8[8] chefs;\r\n    }\r\n    mapping(address => Tower) public towers;\r\n    uint256 public totalChefs;\r\n    uint256 public totalTowers;\r\n    uint256 public totalInvested;\r\n    address public manager = msg.sender;\r\n    address ice = 0x555f61Dc1CfBD108aAf9020cE45246779059ed7f;\r\n\r\n\r\n    function addCoins(address ref, uint256 amount) public {\r\n        ERC20(ice).transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 coins = amount / 2e16;\r\n        require(coins > 0, \"Zero coins\");\r\n        address user = msg.sender;\r\n        totalInvested += amount;\r\n        if (towers[user].timestamp == 0) {\r\n            totalTowers++;\r\n            ref = towers[ref].timestamp == 0 ? manager : ref;\r\n            towers[ref].refs++;\r\n            towers[user].ref = ref;\r\n            towers[user].timestamp = block.timestamp;\r\n        }\r\n        ref = towers[user].ref;\r\n        towers[ref].coins += (coins * 3) / 100;\r\n        towers[ref].money += (coins * 100 * 1) / 100;\r\n        towers[ref].refDeps += coins;\r\n        towers[user].coins += coins;\r\n        ERC20(ice).transfer(manager,(amount * 5) / 100);\r\n    }\r\n\r\n    function withdrawMoney() public {\r\n        address user = msg.sender;\r\n        uint256 money = towers[user].money;\r\n        require (money > 0);\r\n        towers[user].money = 0;\r\n        uint256 amount = money * 2e14;\r\n        if (ERC20(ice).balanceOf(address(this)) > amount) {\r\n        ERC20(ice).transfer(user,amount);\r\n        }\r\n    }\r\n\r\n    function collectMoney() public {\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].hrs = 0;\r\n        towers[user].money += towers[user].money2;\r\n        towers[user].money2 = 0;\r\n    }\r\n\r\n    function upgradeTower(uint256 floorId) public {\r\n        require(floorId < 8, \"Max 8 floors\");\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].chefs[floorId]++;\r\n        totalChefs++;\r\n        uint256 chefs = towers[user].chefs[floorId];\r\n        towers[user].coins -= getUpgradePrice(floorId, chefs);\r\n        towers[user].yield += getYield(floorId, chefs);\r\n    }\r\n\r\n    function getChefs(address addr) public view returns (uint8[8] memory) {\r\n        return towers[addr].chefs;\r\n    }\r\n\r\n    function syncTower(address user) internal {\r\n        require(towers[user].timestamp > 0, \"User is not registered\");\r\n        if (towers[user].yield > 0) {\r\n            uint256 hrs = block.timestamp / 3600 - towers[user].timestamp / 3600;\r\n            if (hrs + towers[user].hrs > 24) {\r\n                hrs = 24 - towers[user].hrs;\r\n            }\r\n            towers[user].money2 += hrs * towers[user].yield;\r\n            towers[user].hrs += hrs;\r\n        }\r\n        towers[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    function getUpgradePrice(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [500, 1500, 4500, 13500, 40500, 120000, 365000, 1000000][floorId];\r\n        if (chefId == 2) return [625, 1800, 5600, 16800, 50600, 150000, 456000, 1200000][floorId];\r\n        if (chefId == 3) return [780, 2300, 7000, 21000, 63000, 187000, 570000, 1560000][floorId];\r\n        if (chefId == 4) return [970, 3000, 8700, 26000, 79000, 235000, 713000, 2000000][floorId];\r\n        if (chefId == 5) return [1200, 3600, 11000, 33000, 98000, 293000, 890000, 2500000][floorId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n\r\n    function getYield(uint256 floorId, uint256 chefId) internal pure returns (uint256) {\r\n        if (chefId == 1) return [41, 130, 399, 1220, 3750, 11400, 36200, 104000][floorId];\r\n        if (chefId == 2) return [52, 157, 498, 1530, 4700, 14300, 45500, 126500][floorId];\r\n        if (chefId == 3) return [65, 201, 625, 1920, 5900, 17900, 57200, 167000][floorId];\r\n        if (chefId == 4) return [82, 264, 780, 2380, 7400, 22700, 72500, 216500][floorId];\r\n        if (chefId == 5) return [103, 318, 995, 3050, 9300, 28700, 91500, 275000][floorId];\r\n        revert(\"Incorrect chefId\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getChefs\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChefs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refDeps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IceCreamGame", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://041f403aecd4cac503e4eea59d148e25a21a71b242138615c76e646f5aa3e55f"}