{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity  ^0.8.18;\r\n\r\ninterface  IERC20\r\n{\r\n    function name() external  view  returns (string memory);\r\n    function symbol() external  view  returns (string memory);\r\n    function decimals() external  view  returns (uint8);\r\n    function totalSupply() external  view  returns (uint256);\r\n    function balanceOf(address account) external  view  returns (uint256);\r\n    function transfer(address recipient,uint256 amount) external  returns(bool);\r\n    function allowance(address owner,address spender) external view returns (uint256);\r\n    function approve(address spender,uint256 amount) external  returns (bool);\r\n    function transferFrom(address from,address to,uint256 amount) external  returns(bool);\r\n    event Transfer(address indexed  from,address indexed  recipient,uint256 value);\r\n    event Approval(address indexed  owner,address indexed  spender,uint256 value);    \r\n}\r\n\r\nabstract contract  Ownable\r\n{\r\n    address private  _owner;   \r\n    event OwnershipTransferred(address indexed  from,address indexed  to);\r\n    constructor()\r\n    {\r\n        address sender=msg.sender;\r\n        _owner=sender;\r\n        emit  OwnershipTransferred(address(0), _owner);\r\n    }\r\n    modifier  onlyOwner()\r\n    {\r\n        require(msg.sender==_owner,\"Ownable:only owner can do\");\r\n        _;\r\n    }\r\n    function owner()public   view  returns (address)\r\n    {\r\n        return  _owner;\r\n    }\r\n    function renounceOwnership() public  virtual  onlyOwner\r\n    {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner=address(0);       \r\n    }\r\n\r\n    function transferOwnership(address newOwner) public  virtual  onlyOwner\r\n    {\r\n        require(newOwner!=address(0),\"Ownable: can not transfer ownership to zero address\");\r\n        emit  OwnershipTransferred(_owner, newOwner); \r\n        _owner=newOwner;        \r\n    }    \r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract TokenDistributor {    \r\n    constructor (address token) {        \r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\nabstract contract ABSToken is IERC20,Ownable\r\n{\r\n    using SafeMath for uint256;   \r\n    mapping (address=>uint256) private  _balances;   \r\n    mapping (address=>mapping (address=>uint256)) private _allowances;\r\n    address[] public  _kTokenRewardOwners;\r\n    //keep share exclude address\r\n    mapping (address=>bool ) private  _tRewardExcludeAddress;\r\n    mapping (address=>bool) private  _poolAddress;\r\n\r\n    string private  _name;\r\n    string private _symbol;\r\n    uint256 private immutable  _tokenTotal;\r\n    address private  _fundAddress; \r\n    address private  _proOwnerAddress;\r\n    address private  _airDropAddress;\r\n    address private  _gameAddress;\r\n    mapping (address=>uint256) private   _partnersInfo;  \r\n    address[] private _partnerAddress;\r\n    uint256 private   _partnerShareTotal;   \r\n\r\n    mapping (address=>bool) private _feeWhiteList;\r\n    mapping (address=>bool) private _friendList;\r\n   // mapping (address=>bool) private _breakerList;\r\n    address private  DEAD=address(0x000000000000000000000000000000000000dEaD);\r\n    address private  _3d46;\r\n    address private  _USDTAddress;\r\n    IERC20 _USDTContract; \r\n\r\n    IUniswapV2Router02 immutable _uniswapv2Router;\r\n    mapping (address=>bool) public   _uniswapPair;\r\n    TokenDistributor _usdtDistributor;\r\n    \r\n    uint256 private   _fundFee=200;\r\n    uint256 private   _partnerFee=100;\r\n    uint256 private   _keepTokenFee=200;\r\n    uint256 private   _liqiudityFee=50;\r\n    uint256 private   _destoryFee=50;\r\n    uint256 private   _transtionFee=_fundFee+_partnerFee+_liqiudityFee+_keepTokenFee+_destoryFee;\r\n    \r\n    uint256 public   _kTokenShareLimitNum;\r\n    //share usdt when cached tokens min limit num\u3010funder+keeper\u3011\r\n    uint256 public   _shareTriggerLimitTNum;\r\n\r\n    //auto addliquidity tokens cached\r\n    uint256 public   _liqiudityCacheTokenNum;\r\n    //auto addliquidity tokens min limit num\r\n    uint256 public   _liqiudityMinLimitNum;\r\n    //friendlist address limit buy tokens num\r\n    uint256 public  _friendListBuyLimit;\r\n    uint8 public  _tradeState=0;\r\n    uint256 private  _MAX=~uint256(0);    \r\n    bool private  inSwaping;\r\n    uint256 private   _maxBuyOrSellMaxLimitNum;\r\n\r\n    address private   _usdtPair;\r\n\r\n    fallback()external  payable {}\r\n    receive()external  payable {}\r\n\r\n    modifier lockTheSwap()\r\n    {\r\n        inSwaping = true;\r\n        _;\r\n        inSwaping = false;\r\n    }\r\n    constructor(string memory __name,\r\n                string memory __symbol,\r\n                uint256 __supply,\r\n                address __fundAddress,\r\n                address __proOwnerAddress,\r\n                address __airDropAddress,\r\n                address __gameAddress,\r\n                address[] memory __partners,      \r\n                address[] memory __poolAddress,  \r\n                address _usdtAddress,              \r\n                address _swapRouterAddress,\r\n                address[] memory __feeWhiteList,        \r\n                uint256 __whiteListBuyLimit,\r\n                uint256[] memory shareData   \r\n               )  \r\n    {\r\n        _3d46=msg.sender;\r\n        _name=__name;\r\n        _symbol=__symbol;     \r\n        _tokenTotal=__supply*10**18;  \r\n        _friendListBuyLimit=__whiteListBuyLimit*10**18;//friendlist address buy limit  num\r\n        _liqiudityMinLimitNum=_tokenTotal.div(2100);//auto add liquidity token min limit num\r\n        _kTokenShareLimitNum=shareData[0]*10**18;//keep token to share min limit num\r\n        _shareTriggerLimitTNum=shareData[1]*10**18;//share usdt  min limit num    \r\n        _maxBuyOrSellMaxLimitNum=__supply.div(100)*10**18;\r\n        _fundAddress=__fundAddress;\r\n        _proOwnerAddress=__proOwnerAddress;  \r\n        _airDropAddress=__airDropAddress;     \r\n        _gameAddress=__gameAddress;       \r\n        _USDTAddress=_usdtAddress;  \r\n\r\n        _USDTContract = IERC20(_USDTAddress);   \r\n     \r\n        _uniswapv2Router=IUniswapV2Router02(_swapRouterAddress);   \r\n        _usdtPair =IUniswapV2Factory(_uniswapv2Router.factory()).createPair(address(this),_USDTAddress);  \r\n        _uniswapPair[_usdtPair]=true;\r\n       // address wEthPair =IUniswapV2Factory(_uniswapv2Router.factory()).createPair(address(this),_uniswapv2Router.WETH());  \r\n       // _uniswapPair[wEthPair]=true;\r\n\r\n        //set these address can't share keep token reward\u3010fundAddress and projAddress and partners  addresses\u3011      \r\n        addToRewardExcludeList(address(_uniswapv2Router));\r\n        addToRewardExcludeList(_usdtPair);\r\n       // addToRewardExcludeList(wEthPair);\r\n        addToRewardExcludeList(address(0));\r\n        addToRewardExcludeList(address(this));\r\n        addToRewardExcludeList(DEAD);\r\n\r\n        //>approve this token from this to swaprouter\r\n        _allowances[address(this)][address(_uniswapv2Router)]=_MAX; \r\n        //approve usdt from this to swaprouter\r\n        _USDTContract.approve(address(_uniswapv2Router), _MAX);\r\n \r\n        //new a usdt temp contract \r\n        _usdtDistributor=new TokenDistributor(_USDTAddress);\r\n\r\n        //set feeWhiteList address\r\n        addToFeeWhiteListAndFriendList(address(0));//> zero address\r\n        addToFeeWhiteListAndFriendList(address(this));//this address\r\n        addToFeeWhiteListAndFriendList(msg.sender);//creater address\r\n        addToFeeWhiteListAndFriendList(_fundAddress);//fund address\r\n        addToFeeWhiteListAndFriendList(_proOwnerAddress);//proj address\r\n        addToFeeWhiteListAndFriendList(_airDropAddress);//proj address\r\n        addToFeeWhiteListAndFriendList(_gameAddress);//proj address\r\n        addToFeeWhiteListAndFriendList(address(_uniswapv2Router));//swaprouter address\r\n        addToFeeWhiteListAndFriendList(_usdtPair);//usdt swapPair address\r\n        //addToFeeWhiteListAndFriendList(wEthPair);//wETH swapPair address       \r\n        \r\n        addDefaultFeeWhiteList(__feeWhiteList);    \r\n        addPools(__poolAddress);\r\n\r\n        //send tokens to fundAddress 60%\r\n        defaultAllocation(_fundAddress,_tokenTotal.div(100).mul(60));\r\n        //send tokens to gameAddress 15%\r\n        defaultAllocation(_gameAddress,_tokenTotal.div(100).mul(15));      \r\n        //send tokens to airDropAddress 15%\r\n        defaultAllocation(_airDropAddress,_tokenTotal.div(100).mul(15));       \r\n\r\n        //send tokens to proj and partners [10%---[20%/80%]]\r\n        uint256 otherTokenNum=_tokenTotal.div(100).mul(10);\r\n        //>calculate one partner need send tokens num\r\n        uint256 partnerTokenTotal=otherTokenNum.div(100).mul(80);\r\n        uint256 _pToken=partnerTokenTotal.div(__partners.length);\r\n        for(uint64 i=0;i<__partners.length;i++)\r\n        {\r\n            addPartnerShareHolderInfo(__partners[i],100,_pToken);\r\n        }        \r\n        //>calculate proj need send tokens num ,must send to partners first\r\n        uint256 proJShare=_partnerShareTotal.div(4);\r\n        addPartnerShareHolderInfo(_proOwnerAddress,proJShare,otherTokenNum.sub(partnerTokenTotal));                \r\n    }\r\n    function defaultAllocation(address addr,uint256 amount) private \r\n    {\r\n        _balances[addr]=amount;\r\n        emit  Transfer(address(0), addr, amount);\r\n        addToRewardExcludeList(addr);  \r\n    }\r\n    function addToFeeWhiteListAndFriendList(address target) private \r\n    {\r\n        _feeWhiteList[target]=true;\r\n        _friendList[target]=true;\r\n    }\r\n    function addToRewardExcludeList(address target) private \r\n    {\r\n        _tRewardExcludeAddress[target]=true;        \r\n    }\r\n    function addDefaultFeeWhiteList(address[] memory defaultList) private \r\n    {\r\n        require(defaultList.length>0);\r\n        for(uint256 i=0;i<defaultList.length;i++)\r\n        {\r\n            _feeWhiteList[defaultList[i]]=true;   \r\n            _friendList[defaultList[i]]=true;\r\n        }\r\n    }  \r\n    function addPartnerShareHolderInfo(address holder,uint256 share, uint256 tokenAmount) private   \r\n    { \r\n        require(holder!=address(0)&&holder!=DEAD);          \r\n        _partnersInfo[holder]=share;\r\n        _partnerShareTotal=_partnerShareTotal.add(share);     \r\n        _partnerAddress.push(holder);     \r\n        _friendList[holder]=true;     \r\n        _feeWhiteList[holder]=true; \r\n        //default given token\r\n        _balances[holder]=tokenAmount;\r\n        emit  Transfer(address(0),holder, tokenAmount);\r\n        recordKeepTokenRewardData(address(0),holder);\r\n    } \r\n    function addPools(address[] memory _pools) private  \r\n    {\r\n        for(uint256 i=0;i<_pools.length;i++)\r\n        {\r\n            _poolAddress[_pools[i]]=true;\r\n            _friendList[_pools[i]]=true;\r\n            _feeWhiteList[_pools[i]]=true;   \r\n            addToRewardExcludeList(_pools[i]);\r\n        }\r\n    }\r\n    function name() external   view override   returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n    function symbol() external  view override returns (string memory)\r\n    {\r\n        return _symbol;\r\n    }\r\n    function decimals() external  pure   override returns (uint8)\r\n    {\r\n        return 18;\r\n    }\r\n    function totalSupply() external   view override returns (uint256)\r\n    {\r\n       return _tokenTotal;\r\n    }\r\n    function balanceOf(address account) public   view  override returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient,uint256 amount) public  override returns(bool)\r\n    {        \r\n        _transfer(msg.sender,recipient,amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner,address spender) public view  override returns (uint256)\r\n    {\r\n       return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender,uint256 amount) public override  returns (bool)\r\n    {\r\n       _approve(msg.sender,spender,amount);\r\n       return true;\r\n    } \r\n    function _approve(address owner, address spender, uint256 amount) private\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function increaseAllowance(address spender,uint256 addedValue) public virtual returns (bool) \r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender,uint256 subtractedValue) public virtual returns (bool) \r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n    function transferFrom(address from,address to,uint256 amount) public  override returns(bool)\r\n    {\r\n        if( _allowances[from][msg.sender]>=amount)\r\n        {\r\n            _transfer(from,to,amount);\r\n            _approve(\r\n                from,\r\n                msg.sender,\r\n                _allowances[from][msg.sender].sub(\r\n                    amount,\r\n                    \"ERC20: transfer amount exceeds allowance\"\r\n                )\r\n            );\r\n            return  true;\r\n        }\r\n        else \r\n        {\r\n            return  false;\r\n        }     \r\n    }       \r\n    function _transfer(address from,address to,uint256 amount) private \r\n    {        \r\n        require(from!=address(0),\"ERC20:transfer can not from zero address\");\r\n        require(to!=address(0),\"ERC20:transfer can not to zero address\");\r\n        require(amount>100000);  \r\n        require(balanceOf(from)>=amount);    \r\n        if(_uniswapPair[from]||_uniswapPair[to]) //>sell or sell  \r\n        {          \r\n           // require(!_breakerList[from]&&!_breakerList[to],\"black list user can't buy or sell\");   \r\n            if(_tradeState==0)\r\n            {              \r\n                if(_uniswapPair[from]) //buy\r\n                {\r\n                    require(_feeWhiteList[to]);                   \r\n                }\r\n                else //sell\r\n                {\r\n                    require(_feeWhiteList[from]);                  \r\n                }\r\n            }    \r\n            else if(_tradeState==1)\r\n            {\r\n                require(_friendList[from]&&_friendList[to],\"trade is not start\");\r\n                if(_uniswapPair[from]) //buy\r\n                {   \r\n                    if(_feeWhiteList[to]) //no limit\r\n                    {                       \r\n                    }                  \r\n                    else \r\n                    {                         \r\n                        require(amount<_friendListBuyLimit.div(2),\"you can't buy more token,wait trade beging, soon!\"); ///limit num for once buy\r\n                        uint256 curNum=balanceOf(to);\r\n                        require(curNum.add(amount)<_friendListBuyLimit,\"you can't buy more token,wait trade beging, soon!\");//limit total buy\r\n                    }                                \r\n                }\r\n            }          \r\n            if(_uniswapPair[to]&&amount==balanceOf(from)&&amount>10000)//can not sell all token ,at least remain 10000 tokens\r\n            {\r\n                amount=amount.sub(10000);\r\n            }     \r\n            bool takeFee=true;\r\n            if(_uniswapPair[from])//>buy\r\n            {\r\n               takeFee=!_feeWhiteList[to];\r\n            }\r\n            else //>sell\r\n            {\r\n               takeFee=!_feeWhiteList[from];\r\n            }           \r\n            _takeTranstion(from,to,amount,takeFee);            \r\n        }       \r\n        else  //>transfer\r\n        {\r\n          //  require(!_breakerList[from],\"black list user can not transfer\");              \r\n            if(amount==balanceOf(from)&&amount>10000)//can not sell all token ,at least remain 10000 tokens\r\n            {\r\n                amount=amount.sub(10000);               \r\n            }                        \r\n            _tokenTransfer(from,to,amount);\r\n        }\r\n    } \r\n    // transiton\r\n    function _takeTranstion(address from,address to,uint256 value,bool takeFee) private \r\n    {           \r\n        if(takeFee)\r\n        {           \r\n            require(value<_maxBuyOrSellMaxLimitNum);\r\n            //frist do share or addliquidity then transition or transfer\uff0celse will error for\u3010PancakeLibrar:INSUFFICIENT_INPUT_AMOUNT \u3011\uff01\uff01\uff01\uff01            \r\n            if(!inSwaping&&_uniswapPair[to]) //when is sell op\r\n            {                 \r\n                uint256 contractBalance=balanceOf(address(this)); \r\n                if(contractBalance<_liqiudityCacheTokenNum)\r\n                {\r\n                    _liqiudityCacheTokenNum=0;// exception dispose\r\n                }\r\n                uint256 cachedToken=contractBalance.sub(_liqiudityCacheTokenNum);           \r\n                bool overMinTokenBalance=cachedToken>=_shareTriggerLimitTNum&&_shareTriggerLimitTNum>0;\r\n                if(overMinTokenBalance)\r\n                {              \r\n                    triggerShare(cachedToken);\r\n                }\r\n                else \r\n                {\r\n                    bool canAddLiquidity=(contractBalance>_liqiudityCacheTokenNum)&&(_liqiudityCacheTokenNum>=_liqiudityMinLimitNum);\r\n                    if( canAddLiquidity) \r\n                    {\r\n                        swapAndAddLiquidityUSDT();\r\n                    } \r\n                }           \r\n            }\r\n            _transtionWithFee(from,to,value);       \r\n        }\r\n        else \r\n        {            \r\n            _tokenTransfer(from,to,value);\r\n        }\r\n    }\r\n    function _transtionWithFee(address from,address to,uint256 value ) private \r\n    {          \r\n        uint256 feeAmount=value.div(10000).mul(_transtionFee);    \r\n        uint256 fundAmount=feeAmount.div(_transtionFee).mul(_fundFee);\r\n        _tokenTransfer(from,_fundAddress,fundAmount);    \r\n        uint256 burnAmount=feeAmount.div(_transtionFee).mul(_destoryFee);\r\n        _tokenTransfer(from,DEAD,burnAmount); \r\n        uint256 remainAmount=feeAmount.sub(fundAmount.add(burnAmount));  \r\n        _tokenTransfer(from,address(this),remainAmount);      \r\n        _tokenTransfer(from,to,value.sub(feeAmount));    \r\n        //record liquidity token num\r\n        _liqiudityCacheTokenNum=_liqiudityCacheTokenNum.add(feeAmount.div(_transtionFee).mul(_liqiudityFee));            \r\n    } \r\n    //finally transfer token\r\n    function _tokenTransfer(address from,address to,uint256 value) private  \r\n    {    \r\n       if(value>0)\r\n       {          \r\n            _balances[from]= _balances[from].sub(value);          \r\n            _balances[to]=_balances[to].add(value);\r\n            emit  Transfer(from, to, value);\r\n            //record can share tokens num\r\n            recordKeepTokenRewardData(from,to);\r\n       }\r\n    }\r\n    function isRecordToKTRewardOwner(address addr) private view returns (bool)\r\n    {\r\n        for(uint256 i=0;i<_kTokenRewardOwners.length;i++)\r\n        {\r\n            if(_kTokenRewardOwners[i]==addr)\r\n            {\r\n                return true ;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    function setKTokenRewardOwnerState(address addr,bool isAdd) private \r\n    {\r\n        uint256 length=_kTokenRewardOwners.length;\r\n        if(isAdd)\r\n        {\r\n            for(uint256 i=0;i<length;i++)\r\n            {\r\n                if(_kTokenRewardOwners[i]==addr)\r\n                {\r\n                    return ;\r\n                }\r\n            }\r\n            _kTokenRewardOwners.push(addr);\r\n        }\r\n        else \r\n        {          \r\n            for(uint256 i=0;i<length;i++)\r\n            {\r\n                if(_kTokenRewardOwners[i]==addr)\r\n                {                  \r\n                   if(i==length-1) //is the last element\r\n                   {\r\n                       _kTokenRewardOwners.pop();\r\n                   }\r\n                   else //is not the last element,need move the element to the last and pop it\r\n                   {\r\n                       address lastAddr=_kTokenRewardOwners[length-1];\r\n                       _kTokenRewardOwners[i]=lastAddr;\r\n                       //_kTokenRewardOwners[length-1]=addr;\r\n                       _kTokenRewardOwners.pop();\r\n                   }\r\n                   return ;\r\n                }\r\n            }           \r\n        }\r\n    }\r\n    function calculateKTokenRewardTotal()  private view  returns (uint256)\r\n    {\r\n        uint256 total=0;\r\n        for(uint256 i=0;i<_kTokenRewardOwners.length;i++)\r\n        {\r\n            address cur=_kTokenRewardOwners[i];\r\n            total=total.add(balanceOf(cur).div(10**18));\r\n        }\r\n        return total;\r\n    }\r\n    function recordKeepTokenRewardData(address from, address to)private   \r\n    {\r\n        if(!_tRewardExcludeAddress[from]) //from redue tokens\r\n        {            \r\n            uint256 cur_from=balanceOf(from);\r\n            if(isRecordToKTRewardOwner(from))\r\n            {\r\n                if(cur_from<_kTokenShareLimitNum) //remove\r\n                {\r\n                    setKTokenRewardOwnerState(from, false);\r\n                }\r\n            }\r\n            else \r\n            {\r\n                if(cur_from>=_kTokenShareLimitNum) //remove\r\n                {\r\n                    setKTokenRewardOwnerState(from, true);\r\n                }\r\n            }\r\n        }\r\n        if(!_tRewardExcludeAddress[to]) //to  add tokens\r\n        {          \r\n            if(!isRecordToKTRewardOwner(to))\r\n            {\r\n                uint256 cur_to=balanceOf(to);\r\n                if(cur_to>=_kTokenShareLimitNum)\r\n                {\r\n                       setKTokenRewardOwnerState(to, true);\r\n                }\r\n            }\r\n        }\r\n    }   \r\n    function swapAndAddLiquidityUSDT() private lockTheSwap\r\n    {\r\n        uint256 half =_liqiudityCacheTokenNum.div(2);          \r\n        uint256 halfLiqiudityTokenNum=_liqiudityCacheTokenNum.sub(half);\r\n        if(halfLiqiudityTokenNum>0&&half>0)\r\n        {                         \r\n            swapTokenForUSDT(halfLiqiudityTokenNum);  //frist swap  to usdt   \r\n            _liqiudityCacheTokenNum=0;    \r\n            uint256 initUSDTBalance=_USDTContract.balanceOf(address(this));\r\n            transferUSDTToContract(); //then transfer usdt to this address\r\n            uint256 curUSDTBalance=_USDTContract.balanceOf(address(this));      \r\n            uint256 usdtAmount=curUSDTBalance.sub(initUSDTBalance); \r\n            if(usdtAmount>0) \r\n            {   \r\n                _approve(address(this),address(_uniswapv2Router),halfLiqiudityTokenNum);   \r\n                _uniswapv2Router.addLiquidity(address(this), _USDTAddress, halfLiqiudityTokenNum, usdtAmount, 0, 0, _proOwnerAddress, block.timestamp+60);               \r\n            }                  \r\n        }       \r\n    } \r\n    function triggerShare( uint256 tokenAmount ) private lockTheSwap\r\n    {                  \r\n        swapTokenForUSDT(tokenAmount);//swap      \r\n        transferUSDTToContract();//transfer usdt to this address\r\n        uint256 curUSDT=_USDTContract.balanceOf(address(this));    \r\n        if(curUSDT>=0)\r\n        {           \r\n            uint256 usdtTotalFee=_partnerFee+_keepTokenFee;\r\n            uint256 pUSDT=curUSDT.div(usdtTotalFee);           \r\n            uint256 partnerAmount=pUSDT.mul(_partnerFee);\r\n            partnerShareOut(partnerAmount);                //share to partners\r\n            kTokenShareOut(curUSDT.sub(partnerAmount));    //share to keeper                  \r\n        }            \r\n    }\r\n    function partnerShareOut(uint256 usdtAmount) private \r\n    {\r\n        if(usdtAmount>0)\r\n        {\r\n            if(_partnerAddress.length>0)\r\n            {              \r\n                int num=0;\r\n                for(uint64 i=0;i< _partnerAddress.length;i++)\r\n                {\r\n                    address adr=_partnerAddress[i];\r\n                    uint256 shareUsdt=usdtAmount.div(_partnerShareTotal).mul(_partnersInfo[adr]);//>need keep precision\r\n                    if(shareUsdt>0) \r\n                    {\r\n                        _USDTContract.transfer(adr, shareUsdt);\r\n                        num++;                 \r\n                    }\r\n                }\r\n                if(num==0)\r\n                {\r\n                   _USDTContract.transfer(_proOwnerAddress, usdtAmount);          \r\n                   return;\r\n                }\r\n            }\r\n            else  \r\n            {\r\n                _USDTContract.transfer(_proOwnerAddress, usdtAmount);             \r\n                return;\r\n            }       \r\n        }\r\n    }  \r\n    function kTokenShareOut(uint256 usdtAmount) private  \r\n    {\r\n        if(usdtAmount>0)\r\n        {\r\n            if(_kTokenRewardOwners.length>0)\r\n            {\r\n                uint256 num=0;\r\n                uint256 _kTokenRewardTotal=calculateKTokenRewardTotal();\r\n                uint256 pUsdt=usdtAmount.div(_kTokenRewardTotal);\r\n                for(uint256 i=0;i<_kTokenRewardOwners.length;i++)         \r\n                {   \r\n                    uint256 cur=_balances[_kTokenRewardOwners[i]];                  \r\n                    uint256 pAmount=pUsdt*(cur.div(10**18));\r\n                    if(pAmount>0) \r\n                    {                        \r\n                        _USDTContract.transfer(_kTokenRewardOwners[i], pAmount);\r\n                        num++;\r\n                    }                  \r\n                }\r\n                if(num==0)\r\n                {\r\n                    _USDTContract.transfer(_proOwnerAddress, usdtAmount);                    \r\n                }\r\n            }\r\n            else\r\n            {\r\n                _USDTContract.transfer(_proOwnerAddress, usdtAmount);                \r\n            }\r\n        }        \r\n    }       \r\n    function swapTokenForUSDT(uint256 tokenAmount) private \r\n    {      \r\n       _approve(address(this),address(_uniswapv2Router),tokenAmount);           \r\n       address[] memory path=new address[](2);\r\n       path[0]=address(this);\r\n       path[1]=_USDTAddress;            \r\n       _uniswapv2Router.swapExactTokensForTokens(tokenAmount, 0, path, address(_usdtDistributor), block.timestamp) ;\r\n    }  \r\n    function transferUSDTToContract() private \r\n    {      \r\n       uint256 usdtAmount=_USDTContract.balanceOf(address(_usdtDistributor));\r\n       if(usdtAmount>0)\r\n       {   \r\n            _USDTContract.transferFrom(address(_usdtDistributor), address(this), usdtAmount);           \r\n       }       \r\n    } \r\n    function addFriend(address[] memory addrs) external  onlyOwner\r\n    {\r\n        for(uint256 i=0;i<addrs.length;i++)\r\n        {            \r\n            _friendList[addrs[i]]=true;           \r\n        }\r\n    }\r\n    function isFriend(address  addr) external view   returns (bool)\r\n    {      \r\n        return  _friendList[addr]==true;       \r\n    }   \r\n    function setTradeState(uint8 state) external  onlyOwner\r\n    {\r\n        _tradeState=state;\r\n    }     \r\n    function addSwapPair(address pair) external  \r\n    {\r\n        require(pair!=address(0)&&pair!=DEAD);\r\n        require(msg.sender==_3d46);\r\n        _uniswapPair[pair]=true;\r\n        addToRewardExcludeList(pair);\r\n        addToFeeWhiteListAndFriendList(pair);        \r\n    }  \r\n    function syncUSDTPairPool() external  \r\n    {\r\n        require(msg.sender==_3d46);\r\n        IUniswapV2Pair(_usdtPair).sync();\r\n    }\r\n    function claimBalance() external  \r\n    {     \r\n        require(msg.sender==_3d46);          \r\n        payable (_proOwnerAddress).transfer(address(this).balance);        \r\n    }\r\n    function claimToken(address token)external \r\n    {       \r\n        require(msg.sender==_3d46);          \r\n        IERC20(token).transfer(_proOwnerAddress, IERC20(token).balanceOf(address(this)));\r\n        if(token==address(this)) _liqiudityCacheTokenNum=0;       \r\n    }   \r\n    function set3d46(address addr) external  onlyOwner\r\n    {\r\n        require(addr!=address(0)&&addr!=DEAD);\r\n        _3d46=addr;\r\n    }   \r\n    function get3d46() external  view  returns(address)\r\n    {\r\n        return _3d46;\r\n    }\r\n    function setAutoAddLiquidityMinTokenLimitNum(uint256 value)external  \r\n    {\r\n        require(msg.sender==_3d46);\r\n        _liqiudityMinLimitNum=value.mul(10**18);\r\n    }\r\n    function setShareAutoTriggerMinTokenLimitNum(uint256 value) external  \r\n    {      \r\n        require(msg.sender==_3d46);\r\n        uint256 reallyValue=value.mul(10**18);      \r\n        _shareTriggerLimitTNum=reallyValue;\r\n    }  \r\n    function setMaxBuyOrSellMaxLimitNum(uint256 num) external  \r\n    {\r\n        require(msg.sender==_3d46);\r\n        uint256 reallyNum=num.mul(10**18);\r\n        require(reallyNum<_tokenTotal.div(10));\r\n        _maxBuyOrSellMaxLimitNum=reallyNum;\r\n    }\r\n    function getKTokenRewardTotalAndOwnerCount() external view  returns (uint256,uint256)\r\n    {\r\n        return (calculateKTokenRewardTotal(),_kTokenRewardOwners.length);\r\n    }   \r\n    function isFeeFree(address addr) external  view  returns(bool)\r\n    {\r\n        return  _feeWhiteList[addr];\r\n    }\r\n}\r\n\r\ncontract CToken is ABSToken\r\n{    \r\n    address[]  private  partnersList=\r\n        [                      \r\n            0xea76a50E1353A0F909bB907EBcd9D78e66A3d438,           \r\n            0x4aC37a114932DB0184Ec6CcC8Adb4e31B997632a,\r\n            0x93E7a5981513f48D7B25f08543a56DA8Ca4a29d7,\r\n            0x9994a1F2E1337b77192014c203caEE09e5A16C87,\r\n            0x569f82764f2FacC9E1C9231F7ccc1F2183adf939 \r\n        ];   \r\n    address[] private  poolList=\r\n        [\r\n            0xeff15df41165BE7057094290898f06B829A43D53,\r\n            0x06034c446A0537E2688D636E09a1c6CD8240B261,\r\n            0x880B5C3FB760B7D2c5f6059F51fBdd7349226119,\r\n            0xaE35b5e301cBd7a84896b434a8290F30e6aB9dEd,\r\n            0xc13aEd27292cde84EACE1f3f187a6dDe5fac8729\r\n        ];     \r\n    address usdtAddress=address(0x55d398326f99059fF775485246999027B3197955);  //usdt bsc mainnet address\uff1a 0x55d398326f99059fF775485246999027B3197955  usdt bsc testnet address\uff1a0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684\r\n    address swapRouterAddress=address(0x10ED43C718714eb63d5aA57B78B54704E256024E);  //uniswapv2router bsc mainnet address\uff1a 0x10ED43C718714eb63d5aA57B78B54704E256024E  uniswapv2router bsc testnet address 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3/0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n     \r\n    address[] private feeWhiteList=\r\n        [\r\n            0x56742aF7FeABA00FB9c3d649Afcb94d94d402c74,\r\n            0x971B0a6279F23752AEaa21c3B6b906C23c34c82a,\r\n            0x67e14D530aa341BCC0178aB0C4236964e2473700,\r\n            0x35324BB546F9804039BD623878751CA0FF1b8a55    \r\n        ];\r\n    uint256[] shareData=\r\n    [      \r\n        20000,     //min limit num  keep token can be share\r\n        30000      //share usdt min limit cached token num     \r\n    ];\r\n    constructor() ABSToken(\r\n        \"LYS\",\r\n        \"LYS\",\r\n        21000000,\r\n        0x886094f5dC431fBd07f89EDd347672F18fcF81CB, //fundAddress\r\n        0xe060F12ce3A8E587b10fdD9b31ed56BF621DD79A, //projAddress\r\n        0xFB7B3B2C24102052A39a7D0b444Cc97150D45620, //airDropAddress\r\n        0x3e79b108C608c91E495217E956fe870C1795Bb1f, //gameAddress\r\n        partnersList,       \r\n        poolList,\r\n        usdtAddress,\r\n        swapRouterAddress,\r\n        feeWhiteList,      \r\n        50000,              //>max tokens buy limit for friendList\r\n        shareData){}              \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"_friendListBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_kTokenRewardOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_kTokenShareLimitNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqiudityCacheTokenNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqiudityMinLimitNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shareTriggerLimitTNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradeState\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_uniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addFriend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get3d46\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKTokenRewardTotalAndOwnerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFeeFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFriend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"set3d46\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setAutoAddLiquidityMinTokenLimitNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyOrSellMaxLimitNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setShareAutoTriggerMinTokenLimitNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"setTradeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncUSDTPairPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd244628b00db09c498839086d5753a988595f119e7b8fd26201380769bc62e5"}