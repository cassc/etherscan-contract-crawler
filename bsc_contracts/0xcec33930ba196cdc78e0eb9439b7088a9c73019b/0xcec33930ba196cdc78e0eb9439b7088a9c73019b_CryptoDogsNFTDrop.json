{"SourceCode": "pragma solidity 0.7.6;\r\n/**\r\n * SPDX-License-Identifier: GPL-3.0-or-later\r\n * Copyright (C) 2021 CryptoDogsClub\r\n * https://www.cryptodogsclub.com\r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n                                                                                \r\n                       @@@@@@                @@@@@@@                            \r\n                  @@@@@//////@@@           @@///////@@@@                        \r\n                @@...../////////@@@@@@@@@@@/////////....@@                      \r\n                  @@@@@  @@////////////////////@@   @@@@                        \r\n                         @@//@@@@@//////@@@@@//@@                               \r\n                         @@//  -  //////  -  //@@                               \r\n                         @@////////////////////@@                               \r\n                       @@///////@@@@@@@@@@@//////@@@                            \r\n                       @@/////////@@@@@@/////////@@@                            \r\n                    @@@/////////////////////////////@@                          \r\n                    @@@    ////////////////////     @@                          \r\n                       @@    @@@           @@    @@@      @@@@@                 \r\n                       @@       @@@@@@@@@@@      @@@      @@///@@               \r\n                         @@@@                @@@@           @@@//@@             \r\n                             @@@@@@@@@@@@@@@@@@             @@@////@@           \r\n                                @@/////////////@@              @@//@@           \r\n                             @@@/////////////////@@@           @@//@@           \r\n                             @@@////////////////////@@         @@//@@           \r\n                           @@/////////////////////////@@       @@//@@          \r\n*/\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\npragma solidity 0.7.6;\r\npragma abicoder v2;\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface ERC721TokenReceiver {\r\n    function onERC721Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n\r\ninterface NFTReferral {\r\n    /**\r\n     * @dev Record referral.\r\n     */\r\n    function recordReferral(address user, address referrer) external;\r\n    \r\n    /**\r\n     * @dev Record referral commission.\r\n     */\r\n    function recordReferralCount(address referrer, uint256 numberOfNfts) external;\r\n\r\n    /**\r\n     * @dev Get the referrer address that referred the user.\r\n     */\r\n    function getReferrer(address user) external view returns (address);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CryptoDogsNFTDrop is IERC721{\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    event Mint(uint256 indexed index, address indexed minter);\r\n\r\n    event DoggyOffered(\r\n        uint256 indexed doggyIndex,\r\n        uint256 minValue,\r\n        address indexed toAddress\r\n    );\r\n    \r\n    event DoggyBidEntered(\r\n        uint256 indexed doggyIndex,\r\n        uint256 value,\r\n        address indexed fromAddress\r\n    );\r\n    event DoggyBidWithdrawn(\r\n        uint256 indexed doggyIndex,\r\n        uint256 value,\r\n        address indexed fromAddress\r\n    );\r\n    event DoggyBought(\r\n        uint256 indexed doggyIndex,\r\n        uint256 saleFee,\r\n        address indexed fromAddress,\r\n        address indexed toAddress\r\n    );\r\n    event DoggyNoLongerForSale(uint256 indexed doggyIndex);\r\n    /**\r\n     * Event emitted when the public sale begins.\r\n     */\r\n    event DropBegins();\r\n    \r\n    // Recover NFT tokens sent by accident\r\n    event NonFungibleTokenRecovery(address indexed token, uint256 indexed tokenId);\r\n    \r\n    // Recover ERC20 tokens sent by accident\r\n    event TokenRecovery(address indexed token, uint256 amount);\r\n    \r\n    // CryptoDogs referral contract address.\t\r\n    \t\r\n    NFTReferral public tokenReferral;\r\n    \r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    uint256 public constant TOKEN_LIMIT = 100000;\r\n\r\n    uint16 public constant MAXIMUM_COMMISSION_RATE = 10;\r\n    \r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    mapping(uint256 => address) internal idToOwner;\r\n\r\n    mapping(uint256 => address) internal idToApproval;\r\n\r\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\r\n    \r\n    mapping(address => uint256[]) internal ownerToIds;\r\n\r\n    mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n    string internal nftName = \"Crypto Dogs Club AirDrop NFTs\";\r\n    string internal nftSymbol = \"DOGGO\";\r\n\r\n    // You can use this hash to verify the image file containing all the doggys\r\n    string public imageHash;\r\n\r\n    uint256 internal numTokens = 0;\r\n    uint256 internal numSales = 0;\r\n\r\n    address payable internal deployer;\r\n    address payable internal developer;\r\n\r\n    bool public publicDrop = false;\r\n    bool public hasEnded = false;\r\n    uint256 public marketFeeRate = 25;\r\n    uint256 public totalMarketFee;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    \r\n    //// Random index assignment\r\n    uint256 internal nonce = 0;\r\n    uint256[TOKEN_LIMIT] internal indices;\r\n\r\n    //// Market\r\n    bool public marketPaused;\r\n    bool public contractSealed;\r\n    mapping(bytes32 => bool) public cancelledOffers;\r\n    \r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployer, \"Only deployer.\");\r\n        _;\r\n    }\r\n\r\n    bool private reentrancyLock = false;\r\n\r\n    /* Prevent a contract function from being reentrant-called. */\r\n    modifier reentrancyGuard() {\r\n        if (reentrancyLock) {\r\n            revert();\r\n        }\r\n        reentrancyLock = true;\r\n        _;\r\n        reentrancyLock = false;\r\n    }\r\n\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender ||\r\n                ownerToOperators[tokenOwner][msg.sender],\r\n            \"Cannot operate.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender ||\r\n                idToApproval[_tokenId] == msg.sender ||\r\n                ownerToOperators[tokenOwner][msg.sender],\r\n            \"Cannot transfer.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0), \"Invalid token.\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _developer, string memory _imageHash, uint256 _startTime, uint256 _endTime) {\r\n        require(\r\n            block.timestamp < _startTime,\r\n            \"Invalid startTime.\"\r\n        );\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\r\n        deployer = msg.sender;\r\n        developer = _developer;\r\n        imageHash = _imageHash;\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n    }\r\n\r\n    function startAirdrop() external onlyDeployer {\r\n        require(!publicDrop);\r\n        publicDrop = true;\r\n        emit DropBegins();\r\n    }\r\n\r\n    function pauseMarket(bool _paused) external onlyDeployer {\r\n        require(!contractSealed, \"Contract sealed.\");\r\n        marketPaused = _paused;\r\n    }\r\n    \r\n    function sealContract() external onlyDeployer {\r\n        contractSealed = true;\r\n    }\r\n    \r\n    function stopAirdrop() external onlyDeployer{\r\n       publicDrop = false;\r\n       hasEnded = true;\r\n       endTime = block.timestamp;\r\n       emit DropBegins();\r\n    }\r\n    \t\t\r\n    // Update the token referral contract address by the owner\t\r\n    function setNFTReferral(NFTReferral _tokenReferral) public onlyDeployer {\t\r\n        tokenReferral = _tokenReferral;\t\r\n    }\r\n    //////////////////////////\r\n    //// ERC 721 and 165  ////\r\n    //////////////////////////\r\n\r\n    function isContract(address _addr)\r\n        internal\r\n        view\r\n        returns (bool addressCheck)\r\n    {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        } // solhint-disable-line\r\n        addressCheck = size > 0;\r\n    }\r\n\r\n    function supportsInterface(bytes4 _interfaceID)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes calldata _data\r\n    ) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external override {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external override canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Wrong from address.\");\r\n        require(_to != address(0), \"Cannot send to 0x0.\");\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    function approve(address _approved, uint256 _tokenId)\r\n        external\r\n        override\r\n        canOperate(_tokenId)\r\n        validNFToken(_tokenId)\r\n    {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    function setApprovalForAll(address _operator, bool _approved)\r\n        external\r\n        override\r\n    {\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        require(_owner != address(0));\r\n        return _getOwnerNFTCount(_owner);\r\n    }\r\n\r\n    function ownerOf(uint256 _tokenId)\r\n        public\r\n        view\r\n        override\r\n        returns (address _owner)\r\n    {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _owner = idToOwner[_tokenId];\r\n    }\r\n\r\n    function getApproved(uint256 _tokenId)\r\n        external\r\n        view\r\n        override\r\n        validNFToken(_tokenId)\r\n        returns (address)\r\n    {\r\n        return idToApproval[_tokenId];\r\n    }\r\n\r\n    function isApprovedForAll(address _owner, address _operator)\r\n        external\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        address from = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n\r\n        _removeNFToken(from, _tokenId);\r\n        _addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(from, _to, _tokenId);\r\n    }\r\n\r\n    function randomIndex() internal returns (uint256) {\r\n        uint256 totalSize = TOKEN_LIMIT - numTokens;\r\n        uint256 index = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    nonce,\r\n                    msg.sender,\r\n                    block.difficulty,\r\n                    block.timestamp\r\n                )\r\n            )\r\n        ) % totalSize;\r\n        uint256 value = 0;\r\n        if (indices[index] != 0) {\r\n            value = indices[index];\r\n        } else {\r\n            value = index;\r\n        }\r\n\r\n        // Move last value to selected position\r\n        if (indices[totalSize - 1] == 0) {\r\n            // Array position not initialized, so use position\r\n            indices[index] = totalSize - 1;\r\n        } else {\r\n            // Array position holds a value so use that\r\n            indices[index] = indices[totalSize - 1];\r\n        }\r\n        nonce++;\r\n        // Don't allow a zero index, start counting at 1\r\n        return value.add(1);\r\n    }\r\n\r\n    function mintsRemaining() public view returns (uint256) {\r\n        return TOKEN_LIMIT.sub(numSales);\r\n    }\r\n\r\n    /**\r\n     * Public Drop minting.\r\n     */\r\n    function claimDrop(address _referrer) external reentrancyGuard {\r\n        require(publicDrop, \"Airdrop not started.\");\r\n        require(\r\n            totalSupply().add(1) <= TOKEN_LIMIT,\r\n            \"Exceeds TOKEN_LIMIT\"\r\n        );\r\n        require(endTime >= block.timestamp, \"Airdrop is finished.\");\r\n        require(\r\n            _getOwnerNFTCount(msg.sender) <1, \r\n            'CryptoDogs: Airdrop already claimed.'\r\n        );\r\n        uint256 numberOfNfts =1;\r\n        if (numberOfNfts > 0 && address(tokenReferral) != address(0) && _referrer != address(0) && _referrer != msg.sender) {\r\n            tokenReferral.recordReferral(msg.sender, _referrer);\r\n            tokenReferral.recordReferralCount(_referrer, numberOfNfts);\r\n        }\r\n        _mint(msg.sender);\r\n    }\r\n    \r\n    function mintForTeam(uint256 numberOfNfts) external reentrancyGuard onlyDeployer {\r\n        require(numberOfNfts > 0, \"numberOfNfts cannot be 0\");\r\n        require(\r\n            numberOfNfts <= 100,\r\n            \"You can not buy more than 100 NFTs at once\"\r\n        );\r\n        require(\r\n            totalSupply().add(numberOfNfts) <= TOKEN_LIMIT,\r\n            \"Exceeds TOKEN_LIMIT\"\r\n        );\r\n        for (uint256 i = 0; i < numberOfNfts; i++) {\r\n            numSales++;\r\n            _mint(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _mint(address _to) internal returns (uint256) {\r\n        require(_to != address(0), \"Cannot mint to 0x0.\");\r\n        require(numTokens < TOKEN_LIMIT, \"Token limit reached.\");\r\n        uint256 id = randomIndex();\r\n\r\n        numTokens = numTokens + 1;\r\n        _addNFToken(_to, id);\r\n\r\n        emit Mint(id, _to);\r\n        emit Transfer(address(0), _to, id);\r\n        return id;\r\n    }\r\n\r\n    function _addNFToken(address _to, uint256 _tokenId) internal {\r\n        require(\r\n            idToOwner[_tokenId] == address(0),\r\n            \"Cannot add, already owned.\"\r\n        );\r\n        idToOwner[_tokenId] = _to;\r\n\r\n        ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = ownerToIds[_to].length.sub(1);\r\n    }\r\n\r\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from, \"Incorrect owner.\");\r\n        delete idToOwner[_tokenId];\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length.sub(1);\r\n\r\n        if (lastTokenIndex != tokenToRemoveIndex) {\r\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        }\r\n\r\n        ownerToIds[_from].pop();\r\n    }\r\n\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\r\n        return ownerToIds[_owner].length;\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) private canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Incorrect owner.\");\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(\r\n                msg.sender,\r\n                _from,\r\n                _tokenId,\r\n                _data\r\n            );\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId,\r\n        bytes memory _data\r\n    ) private validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from, \"Incorrect owner.\");\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(\r\n                msg.sender,\r\n                _from,\r\n                _tokenId,\r\n                _data\r\n            );\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    function _clearApproval(uint256 _tokenId) private {\r\n        if (idToApproval[_tokenId] != address(0)) {\r\n            delete idToApproval[_tokenId];\r\n        }\r\n    }\r\n\r\n    //// Enumerable\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return numTokens;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public pure returns (uint256) {\r\n        require(index >= 0 && index < TOKEN_LIMIT);\r\n        return index + 1;\r\n    }\r\n\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n    \r\n    //// Metadata\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = bytes1(uint8(48 + (temp % 10)));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a descriptive name for a collection of NFTokens.\r\n     * @return _name Representing name.\r\n     */\r\n    function name() external view returns (string memory _name) {\r\n        _name = nftName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an abbreviated name for NFTokens.\r\n     * @return _symbol Representing symbol.\r\n     */\r\n    function symbol() external view returns (string memory _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev A distinct URI (RFC 3986) for a given NFT.\r\n     * @param _tokenId Id for which we want uri.\r\n     * @return _tokenId URI of _tokenId.\r\n     */\r\n    function tokenURI(uint256 _tokenId)\r\n        external\r\n        view\r\n        validNFToken(_tokenId)\r\n        returns (string memory)\r\n    {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    \"https://cryptodogsclub.com/api/dogs/\",\r\n                    toString(_tokenId)\r\n                )\r\n            );\r\n    }\r\n\r\n    //// MARKET\r\n\r\n    struct Offer {\r\n        bool isForSale;\r\n        uint256 doggyIndex;\r\n        address seller;\r\n        uint256 minValue; // in BNB\r\n        address onlySellTo; // specify to sell only to a specific person\r\n    }\r\n\r\n    struct Bid {\r\n        bool hasBid;\r\n        uint256 doggyIndex;\r\n        address bidder;\r\n        uint256 value;\r\n    }\r\n\r\n    // A record of doggys that are offered for sale at a specific minimum value, and perhaps to a specific person\r\n    mapping(uint256 => Offer) public doggysOfferedForSale;\r\n\r\n    // A record of the highest doggy bid\r\n    mapping(uint256 => Bid) public doggyBids;\r\n\r\n    mapping(address => uint256) public pendingWithdrawals;\r\n\r\n    modifier onlyTokenOwner(uint256 _tokenId) {\r\n        require(_tokenId < 100000, \"doggy number is wrong\");\r\n        require(ownerOf(_tokenId) == msg.sender, \"Incorrect owner.\");\r\n        _;\r\n    }\r\n\r\n    function doggyNoLongerForSale(uint256 doggyIndex)\r\n        public\r\n        reentrancyGuard\r\n        onlyTokenOwner(doggyIndex)\r\n    {\r\n        _doggyNoLongerForSale(doggyIndex);\r\n    }\r\n\r\n    function _doggyNoLongerForSale(uint256 doggyIndex) private {\r\n        doggysOfferedForSale[doggyIndex] = Offer(\r\n            false,\r\n            doggyIndex,\r\n            msg.sender,\r\n            0,\r\n            address(0)\r\n        );\r\n        emit DoggyNoLongerForSale(doggyIndex);\r\n    }\r\n\r\n    function offerDoggyForSale(uint256 doggyIndex, uint256 minSalePriceInWei)\r\n        public\r\n        reentrancyGuard\r\n        onlyTokenOwner(doggyIndex)\r\n    {\r\n        require(marketPaused == false, \"Market Paused\");\r\n        doggysOfferedForSale[doggyIndex] = Offer(\r\n            true,\r\n            doggyIndex,\r\n            msg.sender,\r\n            minSalePriceInWei,\r\n            address(0)\r\n        );\r\n        emit DoggyOffered(doggyIndex, minSalePriceInWei, address(0));\r\n    }\r\n\r\n    function offerDoggyForSaleToAddress(\r\n        uint256 doggyIndex,\r\n        uint256 minSalePriceInWei,\r\n        address toAddress\r\n    ) public reentrancyGuard onlyTokenOwner(doggyIndex) {\r\n        require(marketPaused == false, \"Market Paused\");\r\n        doggysOfferedForSale[doggyIndex] = Offer(\r\n            true,\r\n            doggyIndex,\r\n            msg.sender,\r\n            minSalePriceInWei,\r\n            toAddress\r\n        );\r\n        emit DoggyOffered(doggyIndex, minSalePriceInWei, toAddress);\r\n    }\r\n\r\n    function buyDoggy(uint256 doggyIndex) public payable reentrancyGuard {\r\n        require(marketPaused == false, \"Market Paused\");\r\n        require(doggyIndex < 100000, \"doggy number is wrong\");\r\n        Offer memory offer = doggysOfferedForSale[doggyIndex];\r\n        require(offer.isForSale, \"doggy not actually for sale\");\r\n        require(\r\n            offer.onlySellTo == address(0) || offer.onlySellTo == msg.sender,\r\n            \"doggy not supposed to be sold to this user\"\r\n        );\r\n        require(msg.value >= offer.minValue, \"Didn't send enough amount\");\r\n        require(\r\n            ownerOf(doggyIndex) == offer.seller,\r\n            \"Seller no longer owner of doggy\"\r\n        );\r\n        uint256 weiAmount = msg.value; \r\n        uint256 marketFee = weiAmount.div(marketFeeRate);\r\n        uint256 saleFee =weiAmount.sub(marketFee);\r\n        \r\n        developer.transfer(marketFee);\r\n        \r\n        address seller = offer.seller;\r\n\r\n        _safeTransfer(seller, msg.sender, doggyIndex, \"\");\r\n        _doggyNoLongerForSale(doggyIndex);\r\n        \r\n        pendingWithdrawals[seller] += saleFee;  \r\n\r\n        emit DoggyBought(doggyIndex, saleFee, seller, msg.sender);\r\n\r\n        // Check for the case where there is a bid from the new owner and refund it.\r\n        // Any other bid can stay in place.\r\n        Bid memory bid = doggyBids[doggyIndex];\r\n        if (bid.bidder == msg.sender) {\r\n            // Kill bid and refund value\r\n            pendingWithdrawals[msg.sender] += bid.value;\r\n\r\n            doggyBids[doggyIndex] = Bid(false, doggyIndex, address(0), 0);\r\n        }\r\n    }\r\n\r\n    function withdraw() public reentrancyGuard {\r\n        uint256 amount = pendingWithdrawals[msg.sender];\r\n        // Remember to zero the pending refund before\r\n        // sending to prevent re-entrancy attacks\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    function enterBidForDoggy(uint256 doggyIndex) public payable reentrancyGuard {\r\n        require(marketPaused == false, \"Market Paused\");\r\n        require(doggyIndex < 100000, \"doggy number is wrong\");\r\n        require(\r\n            ownerOf(doggyIndex) != msg.sender,\r\n            \"you can not bid on your doggy\"\r\n        );\r\n        require(msg.value > 0, \"bid can not be zero\");\r\n        Bid memory existing = doggyBids[doggyIndex];\r\n        require(\r\n            msg.value > existing.value,\r\n            \"you can not bid lower than last bid\"\r\n        );\r\n        if (existing.value > 0) {\r\n            // Refund the failing bid\r\n\r\n            pendingWithdrawals[existing.bidder] += existing.value;\r\n        }\r\n\r\n        doggyBids[doggyIndex] = Bid(true, doggyIndex, msg.sender, msg.value);\r\n\r\n        emit DoggyBidEntered(doggyIndex, msg.value, msg.sender);\r\n    }\r\n\r\n    function acceptBidForDoggy(uint256 doggyIndex, uint256 minPrice)\r\n        public\r\n        reentrancyGuard\r\n        onlyTokenOwner(doggyIndex)\r\n    {\r\n        require(marketPaused == false, \"Market Paused\");\r\n        address seller = msg.sender;\r\n        Bid memory bid = doggyBids[doggyIndex];\r\n        require(bid.value > 0, \"there is not any bid\");\r\n        require(bid.value >= minPrice, \"bid is lower than min price\");\r\n\r\n        _doggyNoLongerForSale(doggyIndex);\r\n        _safeTransfer(seller, bid.bidder, doggyIndex, \"\");\r\n\r\n        uint256 amount = bid.value;\r\n        uint256 bidFee = amount.div(marketFeeRate);\r\n        uint256 saleFee = amount.sub(bidFee);\r\n        \r\n        totalMarketFee = totalMarketFee.add(bidFee);\r\n        \r\n        doggyBids[doggyIndex] = Bid(false, doggyIndex, address(0), 0);\r\n\r\n        pendingWithdrawals[seller] += saleFee;\r\n        emit DoggyBought(doggyIndex, saleFee, seller, bid.bidder);\r\n    }\r\n    \r\n    function claimPendingRevenue() public reentrancyGuard onlyDeployer{\r\n        uint256 amount = totalMarketFee;\r\n        // sending to prevent re-entrancy attacks\r\n        deployer.transfer(amount);\r\n        // Remember to zero the pending refund before\r\n        totalMarketFee = 0;\r\n    }\r\n    \r\n        // Update the market fee\r\n    function setCommissionRate(uint256 _marketFeeRate) public reentrancyGuard onlyDeployer {\r\n        require(_marketFeeRate >= MAXIMUM_COMMISSION_RATE, \"setCommissionRate: invalid market commission rate basis points\");\r\n        marketFeeRate = _marketFeeRate;\r\n    }\r\n        \r\n        // Claim pending market fee\r\n    function claimPendingCommission() public reentrancyGuard onlyDeployer() {\r\n         address payable _owner = msg.sender;\r\n        // sending to prevent re-entrancy attacks\r\n        _owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    function withdrawBidForDoggy(uint256 doggyIndex) public reentrancyGuard {\r\n        require(doggyIndex < 10000, \"doggy number is wrong\");\r\n        require(ownerOf(doggyIndex) != msg.sender, \"wrong action\");\r\n        require(\r\n            doggyBids[doggyIndex].bidder == msg.sender,\r\n            \"Only bidder can withdraw\"\r\n        );\r\n\r\n        Bid memory bid = doggyBids[doggyIndex];\r\n        emit DoggyBidWithdrawn(doggyIndex, bid.value, msg.sender);\r\n        uint256 amount = bid.value;\r\n        doggyBids[doggyIndex] = Bid(false, doggyIndex, address(0), 0);\r\n        // Refund the bid money\r\n        msg.sender.transfer(amount);\r\n    }\r\n     /**\r\n     * @notice Allows the owner to recover tokens sent to the contract by mistake\r\n     * @param _token: token address\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverFungibleTokens(address _token) external onlyDeployer {\r\n        uint256 amountToRecover = IERC20(_token).balanceOf(address(this));\r\n        require(amountToRecover != 0, \"Operations: No token to recover\");\r\n\r\n        IERC20(_token).safeTransfer(address(msg.sender), amountToRecover);\r\n\r\n        emit TokenRecovery(_token, amountToRecover);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to recover NFTs sent to the contract by mistake\r\n     * @param _token: NFT token address\r\n     * @param _tokenId: tokenId\r\n     * @dev Callable by owner\r\n     */\r\n    function recoverNonFungibleToken(address _token, uint256 _tokenId) external onlyDeployer {\r\n        IERC721(_token).safeTransferFrom(address(this), address(msg.sender), _tokenId);\r\n\r\n        emit NonFungibleTokenRecovery(_token, _tokenId);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_developer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_imageHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"DoggyBidEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"}],\"name\":\"DoggyBidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"DoggyBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"}],\"name\":\"DoggyNoLongerForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"DoggyOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DropBegins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonFungibleTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_COMMISSION_RATE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"}],\"name\":\"acceptBidForDoggy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"}],\"name\":\"buyDoggy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cancelledOffers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"claimDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPendingCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPendingRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doggyBids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"}],\"name\":\"doggyNoLongerForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"doggysOfferedForSale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isForSale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onlySellTo\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"}],\"name\":\"enterBidForDoggy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfNfts\",\"type\":\"uint256\"}],\"name\":\"mintForTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"}],\"name\":\"offerDoggyForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSalePriceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"offerDoggyForSaleToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicDrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverFungibleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverNonFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sealContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketFeeRate\",\"type\":\"uint256\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NFTReferral\",\"name\":\"_tokenReferral\",\"type\":\"address\"}],\"name\":\"setNFTReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReferral\",\"outputs\":[{\"internalType\":\"contract NFTReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"doggyIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawBidForDoggy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CryptoDogsNFTDrop", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000f28866bd5a37d98138cad0427fe3287f45b5d2f0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000616db3770000000000000000000000000000000000000000000000000000000061758300000000000000000000000000000000000000000000000000000000000000002e516d57377839664468716e716353436867684b6e4433567a356b6831316b79444a717a636d506f5754644e685075000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8de8c460bc9ac9b75a4db510c759d12098a4d230aad0bbb1242343ed6f75027"}