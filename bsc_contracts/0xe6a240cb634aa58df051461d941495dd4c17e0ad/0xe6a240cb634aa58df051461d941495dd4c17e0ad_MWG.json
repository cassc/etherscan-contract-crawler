{"SourceCode": "pragma solidity ^0.8.1;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IRefer {\r\n    function hasReferer(address account) external view returns (bool);\r\n\r\n    function referer(address account) external view returns (address);\r\n\r\n    function refereesCount(address account) external view returns (uint256);\r\n\r\n    function referees(address account, uint256 index)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n\r\ncontract Refer is IRefer {\r\n    mapping(address => address) private _referers;\r\n\r\n    mapping(address => address[]) private _referees;\r\n\r\n    event ReferSet(address _referer, address _referee);\r\n\r\n    function hasReferer(address account) public view override returns (bool) {\r\n        return _referers[account] != address(0);\r\n    }\r\n\r\n    function referer(address account) public view override returns (address) {\r\n        return _referers[account];\r\n    }\r\n\r\n    function refereesCount(address account)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _referees[account].length;\r\n    }\r\n\r\n    function referees(address account, uint256 index)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return _referees[account][index];\r\n    }\r\n\r\n    function _setReferer(address _referer, address _referee) internal {\r\n        _beforeSetReferer(_referer, _referee);\r\n        _referers[_referee] = _referer;\r\n        _referees[_referer].push(_referee);\r\n\r\n        emit ReferSet(_referer, _referee);\r\n    }\r\n\r\n    function _beforeSetReferer(address _referer, address _referee)\r\n        internal\r\n        view\r\n        virtual\r\n    {\r\n        require(_referer != address(0), \"Refer: Can not set to 0\");\r\n        require(_referer != _referee, \"Refer: Can not set to self\");\r\n        require(\r\n            referer(_referee) == address(0),\r\n            \"Refer: Already has a referer\"\r\n        );\r\n\r\n        require(refereesCount(_referee) == 0, \"Refer: Already has referees\");\r\n    }\r\n}\r\n\r\ncontract Distributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ninterface IMoon {\r\n    function getSwapPair() external view returns (address);\r\n\r\n    function syncSwapPair() external;\r\n}\r\n\r\ncontract MWG is ERC20, Ownable, Refer {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    struct FeeSet {\r\n        uint256 liquidityFee;\r\n        uint256 lpRewardFee;\r\n        uint256 marketFee;\r\n        uint256 teamFee;\r\n        uint256 burnFee;\r\n        uint256 inviterOneFee;\r\n        uint256 inviterTwoFee;\r\n        uint256 inviterThreeFee;\r\n    }\r\n\r\n    FeeSet private _buyFees =\r\n        FeeSet({\r\n            liquidityFee: 30,\r\n            lpRewardFee: 30,\r\n            marketFee: 15,\r\n            teamFee: 0,\r\n            burnFee: 0,\r\n            inviterOneFee: 5,\r\n            inviterTwoFee: 15,\r\n            inviterThreeFee: 1\r\n        });\r\n\r\n    FeeSet private _sellFees =\r\n        FeeSet({\r\n            liquidityFee: 30,\r\n            lpRewardFee: 30,\r\n            marketFee: 15,\r\n            teamFee: 0,\r\n            burnFee: 0,\r\n            inviterOneFee: 5,\r\n            inviterTwoFee: 15,\r\n            inviterThreeFee: 1\r\n        });\r\n\r\n    FeeSet private _transFees =\r\n        FeeSet({\r\n            liquidityFee: 0,\r\n            lpRewardFee: 0,\r\n            marketFee: 0,\r\n            teamFee: 15,\r\n            burnFee: 0,\r\n            inviterOneFee: 0,\r\n            inviterTwoFee: 0,\r\n            inviterThreeFee: 0\r\n        });\r\n\r\n    mapping(address => bool) public isBlackList;\r\n\r\n    mapping(address => bool) public isFeeExempt;\r\n\r\n    mapping(address => bool) public isWalletLimitExempt;\r\n\r\n    mapping(address => bool) public isSwapLimitExempt;\r\n\r\n    mapping(address => bool) public isSwapExempt;\r\n\r\n    mapping(address => bool) public isSwapPair;\r\n\r\n    mapping(address => uint256) public swapRoundMapsA;\r\n    mapping(address => uint256) public swapRoundMapsB;\r\n    mapping(address => uint256) public swapRoundMapsC;\r\n\r\n    mapping(address => bool) public isTokenHold;\r\n    mapping(uint256 => address) private _tokenHolders;\r\n\r\n    uint256 private _tokenHoldTotal;\r\n\r\n    uint256 public swapRound = 1;\r\n\r\n    uint256 public swapRoundMin = 20 * 10**decimals();\r\n\r\n    bool public isSwap = false;\r\n\r\n    uint256 private _swapMax;\r\n\r\n    uint256 private _walletHoldMax = 50 * 10**decimals();\r\n\r\n    uint256 private _inviteBindMin;\r\n\r\n    uint256 private _inviteRewardMin;\r\n\r\n    uint256 private _minTotalSupply;\r\n\r\n    uint256 private _autoSwapMin = 30 * 10**decimals();\r\n\r\n    uint256 private _priceTime = block.timestamp;\r\n\r\n    uint256 private _priceOld;\r\n\r\n    uint256 private _burnPoolTime = block.timestamp;\r\n\r\n    uint256 private _burnPoolNum = 2;\r\n\r\n    address payable public _lpUnionAddress;\r\n\r\n    address payable public _lpCommunityAddress;\r\n\r\n    address payable public _lpGroupAddress;\r\n\r\n    address payable public _lpGoodAddress;\r\n\r\n    address payable private _marketAddress;\r\n\r\n    address payable private _teamAddress;\r\n\r\n    address public _moonAddress;\r\n\r\n    address private _usdtAddress;\r\n\r\n    address private _uniswapPair;\r\n    IPancakeRouter02 private _uniswapV2Router;\r\n\r\n    Distributor private _distributor;\r\n\r\n    bool _inSwapAndLiquify;\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    bool _inSwapBurn;\r\n    modifier lockBurn() {\r\n        _inSwapBurn = true;\r\n        _;\r\n        _inSwapBurn = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function withdraw() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawToken(IERC20 token) public onlyOwner {\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    constructor() ERC20(\"MWG\", \"MWG\") {\r\n        _usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n        IPancakeRouter02 _swapRouter = IPancakeRouter02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        _uniswapPair = IPancakeFactory(_swapRouter.factory()).createPair(\r\n            address(this),\r\n            address(_usdtAddress)\r\n        );\r\n\r\n        _uniswapV2Router = _swapRouter;\r\n\r\n        isSwapPair[_uniswapPair] = true;\r\n\r\n        isSwapExempt[_uniswapPair] = true;\r\n        isSwapExempt[address(this)] = true;\r\n        isSwapExempt[0x545dEA1F93770546673EF8ce8B12086682A92bcE] = true;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[0x4B4bbBAc750BEc45b2b311275c2Ad847f98268E5] = true;\r\n        isFeeExempt[0x6E8B9C00dBF89cC949A22327AC0e7Af6aEA417C7] = true;\r\n        isFeeExempt[0x545dEA1F93770546673EF8ce8B12086682A92bcE] = true;\r\n\r\n        _lpUnionAddress = payable(0xF52285dA708ccf6f92A8C1d76f89F655B9C13af2);\r\n        _lpCommunityAddress = payable(\r\n            0xa46d5A29140F313b2f2DC453Ec6582137CEBbB84\r\n        );\r\n        _lpGroupAddress = payable(0x9E7c57265ee47Ba06CE172d7844d40F0B4504896);\r\n        _lpGoodAddress = payable(0xE9EC5EB399bBf49cE79b05592fD8Bf0Dbb5E3655);\r\n\r\n        _minTotalSupply = 2100 * 10**(decimals());\r\n\r\n        _marketAddress = payable(0x575C086d78317A886FD0724CB3640E7fbBb3B322);\r\n\r\n        _teamAddress = payable(0x575C086d78317A886FD0724CB3640E7fbBb3B322);\r\n\r\n        _distributor = new Distributor(_usdtAddress);\r\n\r\n        _mint(\r\n            0x4B4bbBAc750BEc45b2b311275c2Ad847f98268E5,\r\n            14700 * 10**decimals()\r\n        );\r\n\r\n        _mint(\r\n            0x6E8B9C00dBF89cC949A22327AC0e7Af6aEA417C7,\r\n            6300 * 10**decimals()\r\n        );\r\n    }\r\n\r\n    function getBuyFees() public view returns (FeeSet memory) {\r\n        return _buyFees;\r\n    }\r\n\r\n    function getSellFees() public view returns (FeeSet memory) {\r\n        return _sellFees;\r\n    }\r\n\r\n    function getTransFees() public view returns (FeeSet memory) {\r\n        return _transFees;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 liquidityFee,\r\n        uint256 lpRewardFee,\r\n        uint256 marketFee,\r\n        uint256 teamFee,\r\n        uint256 burnFee,\r\n        uint256 inviterOneFee,\r\n        uint256 inviterTwoFee,\r\n        uint256 inviterThreeFee,\r\n        uint256 feeType\r\n    ) external onlyOwner {\r\n        FeeSet memory temp = FeeSet({\r\n            liquidityFee: liquidityFee,\r\n            lpRewardFee: lpRewardFee,\r\n            marketFee: marketFee,\r\n            teamFee: teamFee,\r\n            burnFee: burnFee,\r\n            inviterOneFee: inviterOneFee,\r\n            inviterTwoFee: inviterTwoFee,\r\n            inviterThreeFee: inviterThreeFee\r\n        });\r\n        if (feeType == 0) {\r\n            _buyFees = temp;\r\n        } else if (feeType == 1) {\r\n            _sellFees = temp;\r\n        } else if (feeType == 2) {\r\n            _transFees = temp;\r\n        }\r\n    }\r\n\r\n    function setIsBlackList(address account, bool newValue) public onlyOwner {\r\n        isBlackList[account] = newValue;\r\n    }\r\n\r\n    function setIsFeeExempt(address account, bool newValue) public onlyOwner {\r\n        isFeeExempt[account] = newValue;\r\n    }\r\n\r\n    function setIsWalletLimitExempt(address account, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isWalletLimitExempt[account] = newValue;\r\n    }\r\n\r\n    function setIsSwapLimitExempt(address account, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isSwapLimitExempt[account] = newValue;\r\n    }\r\n\r\n    function setIsSwapExempt(address account, bool newValue) public onlyOwner {\r\n        isSwapExempt[account] = newValue;\r\n    }\r\n\r\n    function setIsSwapExemptBatch(address[] memory accounts, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 index = 0; index < accounts.length; index++) {\r\n            address account = accounts[index];\r\n            isSwapExempt[account] = newValue;\r\n        }\r\n    }\r\n\r\n    function setIsSwapPair(address pair, bool newValue) public onlyOwner {\r\n        isSwapPair[pair] = newValue;\r\n    }\r\n\r\n    function getHolder(uint256 index) public view returns (address) {\r\n        return _tokenHolders[index];\r\n    }\r\n\r\n    function getHolderTotal() public view returns (uint256) {\r\n        return _tokenHoldTotal;\r\n    }\r\n\r\n    function setIsSwap(bool swap) public onlyOwner {\r\n        isSwap = swap;\r\n    }\r\n\r\n    function setSwapRound(uint256 dayNo) public onlyOwner {\r\n        swapRound = dayNo;\r\n    }\r\n\r\n    function setSwapRoundMin(uint256 amount) public onlyOwner {\r\n        swapRoundMin = amount;\r\n    }\r\n\r\n    function setBurnPoolNum(uint256 amount) public onlyOwner {\r\n        _burnPoolNum = amount;\r\n    }\r\n\r\n    function getSwapMax() public view returns (uint256) {\r\n        return _swapMax;\r\n    }\r\n\r\n    function setSwapMax(uint256 amount) public onlyOwner {\r\n        _swapMax = amount;\r\n    }\r\n\r\n    function getWalletHoldMax() public view returns (uint256) {\r\n        return _walletHoldMax;\r\n    }\r\n\r\n    function setWalletHoldMax(uint256 amount) public onlyOwner {\r\n        _walletHoldMax = amount;\r\n    }\r\n\r\n    function getInviteBindMin() public view returns (uint256) {\r\n        return _inviteBindMin;\r\n    }\r\n\r\n    function setInviteBindMin(uint256 amount) public onlyOwner {\r\n        _inviteBindMin = amount;\r\n    }\r\n\r\n    function setInviteRewardMin() public view returns (uint256) {\r\n        return _inviteRewardMin;\r\n    }\r\n\r\n    function setInviteRewardMin(uint256 amount) public onlyOwner {\r\n        _inviteRewardMin = amount;\r\n    }\r\n\r\n    function getMinTotalSupply() public view returns (uint256) {\r\n        return _minTotalSupply;\r\n    }\r\n\r\n    function getAutoSwapMin() public view returns (uint256) {\r\n        return _autoSwapMin;\r\n    }\r\n\r\n    function setAutoSwapMin(uint256 amount) public onlyOwner {\r\n        _autoSwapMin = amount;\r\n    }\r\n\r\n    function setSwapPair(address pair) public onlyOwner {\r\n        isSwapPair[_uniswapPair] = false;\r\n        _uniswapPair = pair;\r\n        isSwapPair[pair] = true;\r\n    }\r\n\r\n    function getMarketAddress() public view returns (address) {\r\n        return _marketAddress;\r\n    }\r\n\r\n    function setMarketAddress(address add) public onlyOwner {\r\n        _marketAddress = payable(add);\r\n    }\r\n\r\n    function getMoonAddress() public view returns (address) {\r\n        return _moonAddress;\r\n    }\r\n\r\n    function setMoonAddress(address add) public onlyOwner {\r\n        _moonAddress = add;\r\n    }\r\n\r\n    function getTeamAddress() public view returns (address) {\r\n        return _teamAddress;\r\n    }\r\n\r\n    function setTeamAddress(address add) public onlyOwner {\r\n        _teamAddress = payable(add);\r\n    }\r\n\r\n    function getUsdtAddress() public view returns (address) {\r\n        return _usdtAddress;\r\n    }\r\n\r\n    function getUniSwapPair() public view returns (address) {\r\n        return _uniswapPair;\r\n    }\r\n\r\n    function getDistributor() public view returns (address) {\r\n        return address(_distributor);\r\n    }\r\n\r\n    function getPriceOld() public view returns (uint256) {\r\n        return _priceOld;\r\n    }\r\n\r\n    function setPriceOld(uint256 price) public onlyOwner {\r\n        _priceOld = price;\r\n    }\r\n\r\n    function getPriceUSDT() public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdtAddress;\r\n        return _uniswapV2Router.getAmountsOut(1 * 10**decimals(), path)[1];\r\n    }\r\n\r\n    function getPriceETH() public view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        return _uniswapV2Router.getAmountsOut(1 * 10**decimals(), path)[1];\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBlackList[sender], \"Fail: You're banned\");\r\n\r\n        if (\r\n            _walletHoldMax > 0 &&\r\n            !isFeeExempt[recipient] &&\r\n            !isSwapPair[recipient]\r\n        )\r\n            require(\r\n                balanceOf(recipient).add(amount) <= _walletHoldMax,\r\n                \"Fail: Max Amount\"\r\n            );\r\n\r\n        if (!isTokenHold[recipient]) {\r\n            isTokenHold[recipient] = true;\r\n            _tokenHolders[_tokenHoldTotal] = recipient;\r\n            _tokenHoldTotal = _tokenHoldTotal.add(1);\r\n        }\r\n\r\n        bool isSwapAndLiquify;\r\n        if (\r\n            balanceOf(address(this)) > _autoSwapMin &&\r\n            !isSwapPair[sender] &&\r\n            !_inSwapAndLiquify &&\r\n            !checkPriceDown()\r\n        ) {\r\n            isSwapAndLiquify = swapAndLiquify(\r\n                balanceOf(address(this)).mul(999).div(1000)\r\n            );\r\n        }\r\n\r\n        if (_inSwapAndLiquify) {\r\n            super._transfer(sender, recipient, amount);\r\n        } else if (isSwapPair[sender]) {\r\n            require(isSwap || isSwapExempt[recipient], \"Fail: NoSwap\");\r\n\r\n            require(\r\n                _swapMax == 0 ||\r\n                    isSwapLimitExempt[recipient] ||\r\n                    amount <= _swapMax,\r\n                \"Fail: OverSwapMax\"\r\n            );\r\n\r\n            if (swapRound == 1) {\r\n                require(\r\n                    swapRoundMapsA[recipient].add(amount) <= swapRoundMin,\r\n                    \"Buy Max\"\r\n                );\r\n                swapRoundMapsA[recipient] = swapRoundMapsA[recipient].add(\r\n                    amount\r\n                );\r\n            }\r\n            if (swapRound == 2) {\r\n                require(\r\n                    swapRoundMapsB[recipient].add(amount) <= swapRoundMin,\r\n                    \"Fail: Buy Max\"\r\n                );\r\n                swapRoundMapsB[recipient] = swapRoundMapsB[recipient].add(\r\n                    amount\r\n                );\r\n            }\r\n            if (swapRound == 3) {\r\n                require(\r\n                    swapRoundMapsC[recipient].add(amount) <= swapRoundMin,\r\n                    \"Fail: Buy Max\"\r\n                );\r\n                swapRoundMapsC[recipient] = swapRoundMapsC[recipient].add(\r\n                    amount\r\n                );\r\n            }\r\n\r\n            uint256 amountFainel = takeFee(sender, recipient, amount, 0);\r\n            if (amountFainel > 0) {\r\n                super._transfer(sender, recipient, amountFainel);\r\n            }\r\n        } else if (isSwapPair[recipient]) {\r\n            require(isSwap || isSwapExempt[sender], \"Fail: NoSwap\");\r\n\r\n            require(amount <= balanceOf(sender).mul(9).div(10), \"NotAllSwap\");\r\n\r\n            if (swapRound == 1 && swapRoundMapsA[sender] >= amount) {\r\n                swapRoundMapsA[sender] = swapRoundMapsA[sender].sub(amount);\r\n            }\r\n            if (swapRound == 2 && swapRoundMapsB[sender] >= amount) {\r\n                swapRoundMapsB[sender] = swapRoundMapsB[sender].sub(amount);\r\n            }\r\n            if (swapRound == 3 && swapRoundMapsC[sender] >= amount) {\r\n                swapRoundMapsC[sender] = swapRoundMapsC[sender].sub(amount);\r\n            }\r\n\r\n            uint256 amountFainel = takeFee(sender, recipient, amount, 1);\r\n            if (amountFainel > 0) {\r\n                super._transfer(sender, recipient, amountFainel);\r\n            }\r\n        } else {\r\n            uint256 amountFainel = takeFee(sender, recipient, amount, 2);\r\n            if (amountFainel > 0) {\r\n                super._transfer(sender, recipient, amountFainel);\r\n            }\r\n\r\n            if (\r\n                (!hasReferer(recipient)) &&\r\n                (sender != recipient) &&\r\n                (sender != address(0)) &&\r\n                (recipient != address(0)) &&\r\n                (amount > _inviteBindMin) &&\r\n                refereesCount(recipient) == 0\r\n            ) {\r\n                _setReferer(sender, recipient);\r\n            }\r\n            if (!isSwapAndLiquify && !_inSwapBurn) {\r\n                burnSwapPool();\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkPriceDown() public view returns (bool) {\r\n        return getPriceUSDT() < _priceOld.mul(85).div(100);\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 feeType\r\n    ) private returns (uint256 amountFainel) {\r\n        if (\r\n            isFeeExempt[sender] ||\r\n            isFeeExempt[recipient] ||\r\n            recipient == address(0)\r\n        ) {\r\n            amountFainel = amount;\r\n        } else {\r\n            FeeSet memory feeSet = feeType == 0\r\n                ? _buyFees\r\n                : (feeType == 1 ? _sellFees : _transFees);\r\n\r\n            uint256 amountFee = amount.mul(10).div(100);\r\n\r\n            uint256 usdtAmount = IERC20(_usdtAddress).balanceOf(_uniswapPair);\r\n\r\n            if (feeType != 2 && usdtAmount >= 500_0000 * 10**18) {\r\n                amountFee = amount.mul(5).div(100);\r\n            } else if (feeType != 2 && usdtAmount >= 200_0000 * 10**18) {\r\n                amountFee = amount.mul(7).div(100);\r\n            } else if (feeType != 2 && usdtAmount >= 100_0000 * 10**18) {\r\n                amountFee = amount.mul(8).div(100);\r\n            } else if (feeType != 2 && usdtAmount >= 50_0000 * 10**18) {\r\n                amountFee = amount.mul(9).div(100);\r\n            }\r\n            uint256 amountPrice;\r\n\r\n            if (feeType == 1 && getPriceUSDT() < _priceOld.mul(85).div(100)) {\r\n                amountPrice = amount.mul(30).div(100).sub(amountFee);\r\n            }\r\n\r\n            amountFainel = amount.sub(amountFee).sub(amountPrice);\r\n\r\n            uint256 amountFeeSupply = amountFee;\r\n\r\n            if (amountPrice > 0) {\r\n                super._transfer(sender, _teamAddress, amountPrice);\r\n            }\r\n\r\n            {\r\n                uint256 fee = amountFee\r\n                    .mul(\r\n                        feeSet.liquidityFee.add(feeSet.lpRewardFee).add(\r\n                            feeSet.marketFee\r\n                        )\r\n                    )\r\n                    .div(100);\r\n                if (fee > 0 && amountFeeSupply > 0) {\r\n                    super._transfer(sender, address(this), fee);\r\n                    amountFeeSupply = amountFeeSupply.sub(fee);\r\n                }\r\n            }\r\n\r\n            {\r\n                uint256 feeTeam = amountFee.mul(feeSet.teamFee).div(100);\r\n                if (feeTeam > 0 && amountFeeSupply > 0) {\r\n                    super._transfer(sender, _teamAddress, feeTeam);\r\n                    amountFeeSupply = amountFeeSupply.sub(feeTeam);\r\n                }\r\n            }\r\n\r\n            {\r\n                uint256 feeBurn = amountFee.mul(feeSet.burnFee).div(100);\r\n                if (\r\n                    feeBurn > 0 &&\r\n                    amountFeeSupply > 0 &&\r\n                    totalSupply().sub(feeBurn) >= _minTotalSupply\r\n                ) {\r\n                    super._burn(sender, feeBurn);\r\n                    amountFeeSupply = amountFeeSupply.sub(feeBurn);\r\n                }\r\n            }\r\n\r\n            {\r\n                uint256[] memory feeInvites = new uint256[](7);\r\n                feeInvites[0] = amountFee.mul(feeSet.inviterOneFee).div(100);\r\n                feeInvites[1] = amountFee.mul(feeSet.inviterTwoFee).div(100);\r\n                feeInvites[2] = amountFee.mul(feeSet.inviterThreeFee).div(100);\r\n                feeInvites[3] = amountFee.mul(feeSet.inviterThreeFee).div(100);\r\n                feeInvites[4] = amountFee.mul(feeSet.inviterThreeFee).div(100);\r\n                feeInvites[5] = amountFee.mul(feeSet.inviterThreeFee).div(100);\r\n                feeInvites[6] = amountFee.mul(feeSet.inviterThreeFee).div(100);\r\n                address _referer = !isSwapPair[sender] ? sender : recipient;\r\n                uint256 amountInviteBurn;\r\n                for (uint256 i = 0; i < feeInvites.length; i++) {\r\n                    if (feeInvites[i] > 0 && amountFeeSupply > 0) {\r\n                        if (\r\n                            hasReferer(_referer) &&\r\n                            balanceOf(referer(_referer)) >= _inviteRewardMin\r\n                        ) {\r\n                            _referer = referer(_referer);\r\n                            super._transfer(sender, _referer, feeInvites[i]);\r\n                        } else {\r\n                            amountInviteBurn = amountInviteBurn.add(\r\n                                feeInvites[i]\r\n                            );\r\n                        }\r\n                        amountFeeSupply = amountFeeSupply.sub(feeInvites[i]);\r\n                    }\r\n                }\r\n                if (amountInviteBurn > 0) {\r\n                    if (\r\n                        totalSupply().sub(amountInviteBurn) >= _minTotalSupply\r\n                    ) {\r\n                        super._burn(sender, amountInviteBurn);\r\n                    } else {\r\n                        amountFainel = amountFainel.add(amountInviteBurn);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (amountFeeSupply > 0)\r\n                amountFainel = amountFainel.add(amountFeeSupply);\r\n\r\n            if (block.timestamp > _priceTime.add(86400)) {\r\n                _priceTime = block.timestamp;\r\n                _priceOld = getPriceUSDT();\r\n            }\r\n        }\r\n    }\r\n\r\n    function burnSwapPool() private lockBurn {\r\n        if (block.timestamp > _burnPoolTime.add(86400)) {\r\n            _burnPoolTime = block.timestamp;\r\n            uint256 bn = balanceOf(_uniswapPair).mul(_burnPoolNum).div(1000);\r\n\r\n            if (totalSupply().sub(bn) >= _minTotalSupply) {\r\n                super._burn(_uniswapPair, bn);\r\n\r\n                IPancakePair(_uniswapPair).sync();\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 amount) private lockTheSwap returns (bool) {\r\n        swapTokensForTokens(amount);\r\n\r\n        uint256 amountUsdt = IERC20(_usdtAddress).balanceOf(\r\n            address(_distributor)\r\n        );\r\n        uint256 every = amountUsdt.div(75);\r\n        IERC20 usdt = IERC20(_usdtAddress);\r\n\r\n        usdt.transferFrom(address(_distributor), _lpUnionAddress, every.mul(9));\r\n\r\n        usdt.transferFrom(\r\n            address(_distributor),\r\n            _lpCommunityAddress,\r\n            every.mul(9)\r\n        );\r\n\r\n        usdt.transferFrom(\r\n            address(_distributor),\r\n            _lpGroupAddress,\r\n            every.mul(75).div(10)\r\n        );\r\n\r\n        usdt.transferFrom(\r\n            address(_distributor),\r\n            _lpGoodAddress,\r\n            every.mul(45).div(10)\r\n        );\r\n\r\n        usdt.transferFrom(address(_distributor), _marketAddress, every.mul(15));\r\n\r\n        usdt.transferFrom(\r\n            address(_distributor),\r\n            IMoon(_moonAddress).getSwapPair(),\r\n            every.mul(30)\r\n        );\r\n        IMoon(_moonAddress).syncSwapPair();\r\n        return true;\r\n    }\r\n\r\n    function swapTokensForTokens(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(_usdtAddress);\r\n\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_distributor),\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        IERC20(_usdtAddress).approve(address(_uniswapV2Router), usdtAmount);\r\n        emit AddLiquidity(tokenAmount, usdtAmount);\r\n\r\n        _uniswapV2Router.addLiquidity(\r\n            address(this),\r\n            address(_usdtAddress),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0,\r\n            0,\r\n            _teamAddress,\r\n            block.timestamp + 1200\r\n        );\r\n    }\r\n\r\n    event AddLiquidity(uint256 tokenAmount, uint256 ethAmount);\r\n    event SwapTokensForTokens(uint256 amountIn, address[] path);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"}],\"name\":\"ReferSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lpCommunityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpGoodAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpGroupAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpUnionAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_moonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPriceDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAutoSwapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterOneFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterTwoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterThreeFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MWG.FeeSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInviteBindMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMoonAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterOneFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterTwoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterThreeFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MWG.FeeSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterOneFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterTwoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterThreeFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MWG.FeeSet\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniSwapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWalletHoldMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasReferer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwapExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwapLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"referees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"refereesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"referer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAutoSwapMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBurnPoolNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterOneFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterTwoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviterThreeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeType\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviteBindMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviteRewardMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInviteRewardMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"setIsSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsSwapExemptBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsSwapLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setIsWalletLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setMarketAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setMoonAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPriceOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dayNo\",\"type\":\"uint256\"}],\"name\":\"setSwapRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapRoundMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWalletHoldMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRoundMapsA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRoundMapsB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRoundMapsC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRoundMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MWG", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://933b21db90b5701491aede70456ad6d0d03510c983c5cdfaf94731eee140a6d7"}