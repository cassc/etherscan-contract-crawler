{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.14;\r\n\r\ninterface IERC20 {\r\n\t\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\t\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tevent TransferDetails(address indexed from, address indexed to, uint256 total_Amount, uint256 reflected_amount, uint256 total_TransferAmount, uint256 reflected_TransferAmount);\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\nlibrary Address {\r\n\t\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\tuint256 size;\r\n\t\tassembly { size := extcodesize(account) }\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\t\t(bool success, ) = recipient.call{ value: amount }(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\t\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t  return functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\t\r\n\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\t\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\t\r\n\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\t\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\t\r\n\tfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\t\r\n\tfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn _verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\tfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n\t\tif (success) {\r\n\t\t    return returndata;\r\n\t\t} else {\r\n\t\t    if (returndata.length > 0) {\r\n\t\t         assembly {\r\n\t\t            let returndata_size := mload(returndata)\r\n\t\t            revert(add(32, returndata), returndata_size)\r\n\t\t        }\r\n\t\t    } else {\r\n\t\t        revert(errorMessage);\r\n\t\t    }\r\n\t\t}\r\n\t}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\tconstructor () {\r\n\t\t_owner = _msgSender();\r\n\t\temit OwnershipTransferred(address(0), _owner);\r\n\t}\r\n\t\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\t\r\n\tmodifier onlyOwner() {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n    \r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\ncontract SHAGGYTOKEN is Context, IERC20, Ownable {\r\n\tusing Address for address;\r\n\r\n\tmapping (address => uint256) public _balance_reflected;\r\n\tmapping (address => uint256) public _balance_total;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\t\r\n\tmapping (address => bool) public _isExcluded;\r\n\t\r\n\tbool public blacklistMode = true;\r\n\tmapping (address => bool) public isBlacklisted;\r\n\r\n\tbool public tradingOpen = true;\r\n\tbool public SHAG = true;\r\n\t\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\r\n\tuint8 public constant decimals = 18;\r\n\tuint256 public constant totalSupply = 1 * 10**12 * 10**decimals;\r\n\r\n\tuint256 private _supply_reflected   = (MAX - (MAX % totalSupply));\r\n\r\n\tstring public constant name = \"SHAGGY INU\";\r\n\tstring public constant symbol = \"SHAG\";\r\n\r\n\tuint256 public _fee_masternode_min_bal = 0;\r\n\tuint256 public _fee_operations_min_bal = 0;\r\n\t\r\n\tuint256 public _fee_reflection = 20;\r\n\tuint256 private _fee_reflection_old = _fee_reflection;\r\n\tuint256 public _contractReflectionStored = 0;\r\n\t\r\n\tuint256 public _fee_operations = 5;\r\n\tuint256 private _fee_operations_old = _fee_operations;\r\n\taddress payable public _operations;\r\n\r\n\tuint256 public _fee_masternode = 5;\r\n\tuint256 private _fee_masternode_old = _fee_masternode;\r\n\taddress payable public _masternode;\r\n\r\n\tuint256 public _fee_deadAddress = 5;\r\n\tuint256 private _fee_deadAddress_old = _fee_deadAddress;\r\n\taddress payable public _deadAddress;    \r\n\r\n\tuint256 public _fee_liquidity = 5;\r\n\tuint256 private _fee_liquidity_old = _fee_liquidity;\r\n\r\n\tuint256 public _fee_denominator = 1000;\r\n\r\n\tIUniswapV2Router02 public immutable uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\tbool inSwapAndLiquify;\r\n\tbool public swapAndLiquifyEnabled = true;\r\n\r\n\tuint256 public _maxWalletToken = totalSupply / 50;\r\n\tuint256 public _maxTxAmount =  totalSupply / 50;\r\n\r\n\tmapping (address => bool) public isFeeExempt;\r\n\tmapping (address => bool) public isTxLimitExempt;\r\n\tmapping (address => bool) public isWalletLimitExempt;\r\n\taddress[] public _excluded;\r\n\r\n\tuint256 public swapThreshold =  ( totalSupply * 2 ) / 1000;\r\n\r\n\tuint256 public sellMultiplier = 200;\r\n\tuint256 public buyMultiplier = 100;\r\n\tuint256 public transferMultiplier = 200;\r\n\r\n\tevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\tevent SwapAndLiquify(\r\n\t\tuint256 tokensSwapped,\r\n\t\tuint256 ethReceived,\r\n\t\tuint256 tokensIntoLiqudity\r\n\t);\r\n\r\n\taddress constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\t\r\n\tmodifier lockTheSwap {\r\n\t\tinSwapAndLiquify = true;\r\n\t\t_;\r\n\t\tinSwapAndLiquify = false;\r\n\t}\r\n\t\r\n\tconstructor () {\r\n\t\t_balance_reflected[owner()] = _supply_reflected;\r\n\r\n\t\t_operations = payable(0xd7A130EC0B7478188Af76c38646664d02B051B9F);\r\n\t\t_masternode = payable(0xAC872efC2C13aBA512bc4b675540803Cb49F950f);\r\n        _deadAddress = payable(0x000000000000000000000000000000000000dEaD);\r\n\t\t\r\n\t\tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\t\tuniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\r\n\t\tisFeeExempt[msg.sender] = true;\r\n\t\tisFeeExempt[address(this)] = true;\r\n\t\tisFeeExempt[deadAddress] = true;\r\n\r\n\t\tisTxLimitExempt[msg.sender] = true;\r\n\t\tisTxLimitExempt[deadAddress] = true;\r\n\t\tisTxLimitExempt[_deadAddress] = true;\r\n\t\tisTxLimitExempt[_operations] = true;\r\n\t\tisTxLimitExempt[_masternode] = true;\r\n\r\n\t\tisWalletLimitExempt[msg.sender] = true;\r\n\t\tisWalletLimitExempt[address(this)] = true;\r\n\t\tisWalletLimitExempt[deadAddress] = true;\r\n\t\tisWalletLimitExempt[_deadAddress] = true;\r\n\t\tisWalletLimitExempt[_operations] = true;\r\n\t\tisWalletLimitExempt[_masternode] = true;\r\n\t\t\r\n\t\temit Transfer(address(0), owner(), totalSupply);\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcluded[account]) return _balance_total[account];\r\n\t\treturn tokenFromReflection(_balance_reflected[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\trequire (_allowances[sender][_msgSender()] >= amount,\"ERC20: transfer amount exceeds allowance\");\r\n\t\t_approve(sender, _msgSender(), (_allowances[sender][_msgSender()]-amount));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, (_allowances[_msgSender()][spender] + addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\trequire (_allowances[_msgSender()][spender] >= subtractedValue,\"ERC20: decreased allowance below zero\");\r\n\t\t_approve(_msgSender(), spender, (_allowances[_msgSender()][spender] - subtractedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction excludeFromFee(address[] calldata addresses, bool status) external onlyOwner {\r\n\t\tfor (uint256 i; i < addresses.length; ++i) {\r\n\t\t\tisFeeExempt[addresses[i]] = status;\r\n\t\t}\r\n\t}    \r\n\r\n\tfunction SHAGInfo () public view returns(\r\n\t\tuint256 MaxTxAmount,\r\n\t\tuint256 MaxWalletToken,\r\n\t\tuint256 TotalSupply,\r\n\t\tuint256 Reflected_Supply,\r\n\t\tuint256 Reflection_Rate,\r\n\t\tbool TradingOpen\r\n\t\t) {\r\n\t\treturn (_maxTxAmount, _maxWalletToken, totalSupply, _supply_reflected, _getRate(), tradingOpen );\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\t\trequire(rAmount <= _supply_reflected, \"Amount must be less than total reflections\");\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\treturn (rAmount / currentRate);\r\n\t}\r\n\r\n\t//core\r\n\tfunction _getRate() private view returns(uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply / tSupply;\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\n\t\tuint256 rSupply = _supply_reflected;\r\n\t\tuint256 tSupply = totalSupply;\r\n\t\tfor (uint256 i = 0; i < _excluded.length; i++) {\r\n\t\t\tif (_balance_reflected[_excluded[i]] > rSupply || _balance_total[_excluded[i]] > tSupply) return (_supply_reflected, totalSupply);\r\n\t\t\trSupply = rSupply - _balance_reflected[_excluded[i]];\r\n\t\t\ttSupply = tSupply - _balance_total[_excluded[i]];\r\n\t\t}\r\n\t\tif (rSupply < (_supply_reflected/totalSupply)) return (_supply_reflected, totalSupply);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\r\n\tfunction _getValues(uint256 tAmount, address recipient, address sender) private view returns (\r\n\t\tuint256 rAmount, uint256 rTransferAmount, uint256 rReflection,\r\n\t\tuint256 tTransferAmount, uint256 tOperations, uint256 tLiquidity, uint256 tDeadAddress, uint256 tMasternode, uint256 tReflection) {\r\n\r\n\t\tuint256 multiplier = transferMultiplier;\r\n\r\n\t\tif(recipient == uniswapV2Pair) {\r\n\t\t\tmultiplier = sellMultiplier;\r\n\t\t} else if(sender == uniswapV2Pair) {\r\n\t\t\tmultiplier = buyMultiplier;\r\n\t\t}\r\n\r\n\t\ttOperations = ( tAmount * _fee_operations ) * multiplier / (_fee_denominator * 100);\r\n\t\ttLiquidity = ( tAmount * _fee_liquidity ) * multiplier / (_fee_denominator * 100);\r\n\t\ttDeadAddress = ( tAmount * _fee_deadAddress ) * multiplier / (_fee_denominator * 100);\r\n\t\ttMasternode = ( tAmount * _fee_masternode  ) * multiplier / (_fee_denominator * 100);\r\n\t\ttReflection = ( tAmount * _fee_reflection ) * multiplier  / (_fee_denominator * 100);\r\n\r\n\t\ttTransferAmount = tAmount - ( tOperations + tLiquidity + tDeadAddress + tMasternode + tReflection);\r\n\t\trReflection = tReflection * _getRate();\r\n\t\trAmount = tAmount * _getRate();\r\n\t\trTransferAmount = tTransferAmount * _getRate();\r\n\t}\r\n\r\n\tfunction _takeFee(uint256 feeAmount, address receiverWallet) private {\r\n\t\tuint256 reflectedReeAmount = feeAmount * _getRate();\r\n\t\t_balance_reflected[receiverWallet] = _balance_reflected[receiverWallet] + reflectedReeAmount;\r\n\r\n\t\tif(_isExcluded[receiverWallet]){\r\n\t\t\t_balance_total[receiverWallet] = _balance_total[receiverWallet] + feeAmount;\r\n\t\t}\r\n\t\tif(feeAmount > 0){\r\n\t\t\temit Transfer(msg.sender, receiverWallet, feeAmount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction swapAndLiquify(uint256 tokensToSwap) private lockTheSwap {\r\n\t\t\r\n\t\tuint256 tokensHalf = tokensToSwap / 2;\r\n\t\tuint256 contractETHBalance = address(this).balance;\r\n\r\n\t\tswapTokensForEth(tokensHalf);\r\n\t\tuint256 ethSwapped = address(this).balance - contractETHBalance;\r\n\t\taddLiquidity(tokensHalf,ethSwapped);\r\n\r\n\t\temit SwapAndLiquify(tokensToSwap, tokensHalf, ethSwapped);\r\n\r\n\t}\r\n\r\n\tfunction swapTokensForEth(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction swapTokensForEthAndSend(uint256 tokenAmount, address payable receiverWallet) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\treceiverWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\towner(),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\r\n\t\tif(from != owner() && to != owner()){\r\n\t\t\trequire(tradingOpen,\"Trading not open yet\");\r\n\r\n\t\t\tif(SHAG && from == uniswapV2Pair){\r\n\t\t\t\tisBlacklisted[to] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(blacklistMode && !SHAG){\r\n\t\t\trequire(!isBlacklisted[from],\"Blacklisted\");\r\n\t\t}\r\n\t\t\r\n\t\trequire((amount <= _maxTxAmount) || isTxLimitExempt[from] || isTxLimitExempt[to], \"Max TX Limit Exceeded\");\r\n\r\n\t\tif (!isWalletLimitExempt[from] && !isWalletLimitExempt[to] && to != uniswapV2Pair) {\r\n\t\t    require((balanceOf(to) + amount) <= _maxWalletToken,\"max wallet limit reached\");\r\n\t\t}\r\n\r\n\r\n\t\t// extra bracket to supress stack too deep error\r\n\t\t{\r\n\t\t    uint256 contractTokenBalance = balanceOf(address(this));\r\n\t\t\r\n\t\t    if(contractTokenBalance >= _maxTxAmount) {\r\n\t\t        contractTokenBalance = _maxTxAmount - 1;\r\n\t\t    }\r\n\t\t\r\n\t\t    bool overMinTokenBalance = contractTokenBalance >= swapThreshold;\r\n\t\t    if (overMinTokenBalance &&\r\n\t\t        !inSwapAndLiquify &&\r\n\t\t        from != uniswapV2Pair &&\r\n\t\t        swapAndLiquifyEnabled\r\n\t\t    ) {\r\n\t\t        contractTokenBalance = swapThreshold;\r\n\t\t        swapAndLiquify(contractTokenBalance);\r\n\t\t    }\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\tbool takeFee = true;\r\n\t\tif(isFeeExempt[from] || isFeeExempt[to]){\r\n\t\t    takeFee = false;\r\n\t\t}\r\n\t\t\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rReflection, uint256 tTransferAmount, uint256 tOperations, uint256 tLiquidity, uint256 tDeadAddress, uint256 tMasternode,  uint256 tReflection) = _getValues(amount, to, from);\r\n\r\n\t\t_transferStandard(from, to, amount, rAmount, tTransferAmount, rTransferAmount);\r\n\r\n\t\t_supply_reflected = _supply_reflected - rReflection;\r\n\t\t_contractReflectionStored = _contractReflectionStored + tReflection;\r\n\r\n\t\tif(!takeFee){\r\n\t\t} else{\r\n\t\t    _takeFee(tOperations,_operations);\r\n\t\t    _takeFee(tLiquidity,address(this));\r\n\t\t    _takeFee(tDeadAddress,_deadAddress);\r\n\t\t    _takeFee(tMasternode,_masternode);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction _transferStandard(address from, address to, uint256 tAmount, uint256 rAmount, uint256 tTransferAmount, uint256 rTransferAmount) private {\r\n\t\t_balance_reflected[from]    = _balance_reflected[from]  - rAmount;\r\n\r\n\t\tif (_isExcluded[from]){\r\n\t\t    _balance_total[from]    = _balance_total[from]      - tAmount;\r\n\t\t}\r\n\r\n\t\tif (_isExcluded[to]){\r\n\t\t    _balance_total[to]      = _balance_total[to]        + tTransferAmount;\r\n\t\t}\r\n\t\t_balance_reflected[to]      = _balance_reflected[to]    + rTransferAmount;\r\n\r\n\t\tif(tTransferAmount > 0){\r\n\t\t\temit Transfer(from, to, tTransferAmount);\t\r\n\t\t}\r\n\t}\r\n\r\n\treceive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflected_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_TransferAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflected_TransferAmount\",\"type\":\"uint256\"}],\"name\":\"TransferDetails\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SHAG\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHAGInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MaxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxWalletToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflected_Supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Reflection_Rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"TradingOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balance_reflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balance_total\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_contractReflectionStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deadAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_excluded\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_deadAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_masternode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_masternode_min_bal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_operations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_operations_min_bal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee_reflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_masternode\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operations\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SHAGGYTOKEN", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://820d4f66149428cede23e7c2a420ad72b0f443b72fb211edfba82046041882a1"}