{"SourceCode": "// Dependency file: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/traits/PausableElement.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/security/Pausable.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nabstract contract PausableElement is Ownable, Pausable {\r\n    /// @notice pause contract\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice unpause contract\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/traits/WithdrawalElement.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n// import \"@openzeppelin/contracts/security/Pausable.sol\";\r\n// import \"contracts/v5/binance-vrf/traits/PausableElement.sol\";\r\n\r\nabstract contract WithdrawalElement is PausableElement {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    event WithdrawToken(address token, address recipient, uint256 amount);\r\n    event Withdraw(address recipient, uint256 amount);\r\n\r\n    /// @notice management function. Withdraw all tokens in emergency mode only when contract paused\r\n    function withdrawToken(address _token, address _recipient) external virtual onlyOwner whenPaused {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n\r\n        _withdrawToken(_token, _recipient, amount);\r\n        _afterWithdrawToken(_token, _recipient, amount);\r\n    }\r\n\r\n    /// @notice management function. Withdraw  some tokens in emergency mode only when contract paused\r\n    function withdrawSomeToken(\r\n        address _token,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) public virtual onlyOwner whenPaused {\r\n        _withdrawToken(_token, _recipient, _amount);\r\n        _afterWithdrawToken(_token, _recipient, _amount);\r\n    }\r\n\r\n    ///@notice withdraw all BNB. Withdraw in emergency mode only when contract paused\r\n    function withdraw() external virtual onlyOwner whenPaused {\r\n        _withdraw(_msgSender(), address(this).balance);\r\n    }\r\n\r\n    ///@notice withdraw some BNB. Withdraw in emergency mode only when contract paused\r\n    function withdrawSome(address _recipient, uint256 _amount) external virtual onlyOwner whenPaused {\r\n        _withdraw(_recipient, _amount);\r\n    }\r\n\r\n    function _deliverFunds(\r\n        address _recipient,\r\n        uint256 _value,\r\n        string memory _message\r\n    ) internal {\r\n        (bool sent, ) = payable(_recipient).call{value: _value}(\"\");\r\n\r\n        require(sent, _message);\r\n    }\r\n\r\n    function _deliverTokens(\r\n        address _token,\r\n        address _recipient,\r\n        uint256 _value\r\n    ) internal {\r\n        IERC20(_token).safeTransfer(_recipient, _value);\r\n    }\r\n\r\n    function _withdraw(address _recipient, uint256 _amount) internal virtual {\r\n        require(_recipient != address(0x0), \"CryptoDrop Loto: address is zero\");\r\n        require(_amount <= address(this).balance, \"CryptoDrop Loto: not enought BNB balance\");\r\n\r\n        _afterWithdraw(_recipient, _amount);\r\n\r\n        _deliverFunds(_recipient, _amount, \"CryptoDrop Loto: Can't send BNB\");\r\n        emit Withdraw(_recipient, _amount);\r\n    }\r\n\r\n    function _afterWithdraw(address _recipient, uint256 _amount) internal virtual {}\r\n\r\n    function _withdrawToken(\r\n        address _token,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) internal virtual {\r\n        require(_recipient != address(0x0), \"CryptoDrop Loto: address is zero\");\r\n        require(_amount <= IERC20(_token).balanceOf(address(this)), \"CryptoDrop Loto: not enought token balance\");\r\n\r\n        IERC20(_token).safeTransfer(_recipient, _amount);\r\n\r\n        _afterWithdrawToken(_token, _recipient, _amount);\r\n    }\r\n\r\n    function _afterWithdrawToken(\r\n        address _token,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/traits/JackpotElement.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"contracts/v5/binance-vrf/traits/WithdrawalElement.sol\";\r\n\r\nabstract contract JackpotElement is WithdrawalElement {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    uint256 public jackpotAmount;\r\n\r\n    event Received(address sender, uint256 value);\r\n\r\n    receive() external payable {}\r\n\r\n    /// Receive BNB\r\n    function addJackpot() external payable virtual onlyOwner {\r\n        jackpotAmount += msg.value;\r\n        emit Received(_msgSender(), msg.value);\r\n    }\r\n\r\n    function _afterWithdraw(address _recipient, uint256 _amount) internal override {\r\n        if (_amount > jackpotAmount) {\r\n            jackpotAmount = 0;\r\n        } else {\r\n            jackpotAmount -= _amount;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/traits/MiningElement.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\nabstract contract MiningElement is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public baseToken;\r\n\r\n    bool public isMiningAvailable;\r\n\r\n    uint256 public miningAmount;\r\n\r\n    mapping(address => uint256) public totalMined;\r\n\r\n    mapping(address => mapping(address => uint256)) public miningBalances;\r\n\r\n    event TokenMined(address indexed token, address indexed gamer, uint256 miningAmount);\r\n    event UpdateMiningAmount(uint256 miningAmount);\r\n    event UpdateBaseToken(address _baseToken);\r\n    event SetIsMiningAvailable(bool _isMiningAvailable);\r\n\r\n    function updateMiningAmount(uint256 _miningAmount) external onlyOwner {\r\n        miningAmount = _miningAmount;\r\n        emit UpdateMiningAmount(_miningAmount);\r\n    }\r\n\r\n    function updateBaseToken(address _baseToken) external onlyOwner {\r\n        baseToken = _baseToken;\r\n        isMiningAvailable = false;\r\n        emit UpdateBaseToken(_baseToken);\r\n    }\r\n\r\n    function setIsMiningAvailable(bool _isMiningAvailable) external onlyOwner {\r\n        require(baseToken != address(0x0), \"base token is zero\");\r\n\r\n        isMiningAvailable = _isMiningAvailable;\r\n        emit SetIsMiningAvailable(_isMiningAvailable);\r\n    }\r\n\r\n    function _initMiningElement(\r\n        address _baseToken,\r\n        uint256 _miningAmount,\r\n        bool _isMiningAvailable\r\n    ) internal virtual {\r\n        baseToken = _baseToken;\r\n        miningAmount = _miningAmount;\r\n        isMiningAvailable = _isMiningAvailable;\r\n\r\n        emit UpdateBaseToken(_baseToken);\r\n        emit UpdateMiningAmount(_miningAmount);\r\n        emit SetIsMiningAvailable(_isMiningAvailable);\r\n    }\r\n\r\n    function _mining(address _gamer) internal virtual {\r\n        if (isMiningAvailable && IERC20(baseToken).balanceOf(address(this)) >= miningAmount) {\r\n            IERC20(baseToken).safeTransfer(_gamer, miningAmount);\r\n\r\n            totalMined[baseToken] += miningAmount;\r\n\r\n            miningBalances[baseToken][_gamer] += miningAmount;\r\n\r\n            emit TokenMined(baseToken, _gamer, miningAmount);\r\n        }\r\n    }\r\n\r\n    function checkMiningAvailability() external view virtual returns (bool) {\r\n        return (isMiningAvailable && IERC20(baseToken).balanceOf(address(this)) >= miningAmount);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/binance-oracle/VRFConsumerBase.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/** ****************************************************************************\r\n * @notice Interface for contracts using VRF randomness\r\n * *****************************************************************************\r\n * @dev PURPOSE\r\n *\r\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\r\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\r\n * @dev making his output up to suit himself. Reggie provides Vera a public key\r\n * @dev to which he knows the secret key. Each time Vera provides a seed to\r\n * @dev Reggie, he gives back a value which is computed completely\r\n * @dev deterministically from the seed and the secret key.\r\n *\r\n * @dev Reggie provides a proof by which Vera can verify that the output was\r\n * @dev correctly computed once Reggie tells it to her, but without that proof,\r\n * @dev the output is indistinguishable to her from a uniform random sample\r\n * @dev from the output space.\r\n *\r\n * @dev The purpose of this contract is to make it easy for unrelated contracts\r\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\r\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\r\n * @dev 1. The fulfillment came from the VRFCoordinator\r\n * @dev 2. The consumer contract implements fulfillRandomWords.\r\n * *****************************************************************************\r\n * @dev USAGE\r\n *\r\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\r\n * @dev initialize VRFConsumerBase's attributes in their constructor as\r\n * @dev shown:\r\n *\r\n * @dev   contract VRFConsumer {\r\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\r\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\r\n * @dev         <initialization with other arguments goes here>\r\n * @dev       }\r\n * @dev   }\r\n *\r\n * @dev The oracle will have given you an ID for the VRF keypair they have\r\n * @dev committed to (let's call it keyHash). Create subscription, fund it\r\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\r\n * @dev subscription management functions).\r\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\r\n * @dev callbackGasLimit, numWords),\r\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\r\n *\r\n * @dev Once the VRFCoordinator has received and validated the oracle's response\r\n * @dev to your request, it will call your contract's fulfillRandomWords method.\r\n *\r\n * @dev The randomness argument to fulfillRandomWords is a set of random words\r\n * @dev generated from your requestId and the blockHash of the request.\r\n *\r\n * @dev If your contract could have concurrent requests open, you can use the\r\n * @dev requestId returned from requestRandomWords to track which response is associated\r\n * @dev with which randomness request.\r\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\r\n * @dev if your contract could have multiple requests in flight simultaneously.\r\n *\r\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\r\n * @dev differ.\r\n *\r\n * *****************************************************************************\r\n * @dev SECURITY CONSIDERATIONS\r\n *\r\n * @dev A method with the ability to call your fulfillRandomness method directly\r\n * @dev could spoof a VRF response with any random value, so it's critical that\r\n * @dev it cannot be directly called by anything other than this base contract\r\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\r\n *\r\n * @dev For your users to trust that your contract's random behavior is free\r\n * @dev from malicious interference, it's best if you can write it so that all\r\n * @dev behaviors implied by a VRF response are executed *during* your\r\n * @dev fulfillRandomness method. If your contract must store the response (or\r\n * @dev anything derived from it) and use it later, you must ensure that any\r\n * @dev user-significant behavior which depends on that stored value cannot be\r\n * @dev manipulated by a subsequent VRF request.\r\n *\r\n * @dev Similarly, both miners and the VRF oracle itself have some influence\r\n * @dev over the order in which VRF responses appear on the blockchain, so if\r\n * @dev your contract could have multiple VRF requests in flight simultaneously,\r\n * @dev you must ensure that the order in which the VRF responses arrive cannot\r\n * @dev be used to manipulate your contract's user-significant behavior.\r\n *\r\n * @dev Since the block hash of the block which contains the requestRandomness\r\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\r\n * @dev miner could, in principle, fork the blockchain to evict the block\r\n * @dev containing the request, forcing the request to be included in a\r\n * @dev different block with a different hash, and therefore a different input\r\n * @dev to the VRF. However, such an attack would incur a substantial economic\r\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\r\n * @dev until it calls responds to a request. It is for this reason that\r\n * @dev that you can signal to an oracle you'd like them to wait longer before\r\n * @dev responding to the request (however this is not enforced in the contract\r\n * @dev and so remains effective only in the case of unmodified oracle software).\r\n */\r\nabstract contract VRFConsumerBase {\r\n    address private immutable vrfCoordinator;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     */\r\n    constructor(address _vrfCoordinator) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n    }\r\n\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBase expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomWords the VRF output expanded to the requested number of words\r\n     */\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\r\n        if (msg.sender != vrfCoordinator) {\r\n            revert(\"OnlyCoordinatorCanFulfill\");\r\n        }\r\n        fulfillRandomWords(requestId, randomWords);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/binance-oracle/VRFCoordinatorInterface.sol\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\ninterface VRFCoordinatorInterface {\r\n    /**\r\n     * @notice Get configuration relevant for making requests\r\n     * @return minimumRequestConfirmations global min for request confirmations\r\n     * @return maxGasLimit global max for request gas limit\r\n     * @return s_provingKeyHashes list of registered key hashes\r\n     */\r\n    function getRequestConfig()\r\n        external\r\n        view\r\n        returns (\r\n            uint16,\r\n            uint32,\r\n            bytes32[] memory\r\n        );\r\n\r\n    /**\r\n     * @notice Request a set of random words.\r\n     * @param keyHash - Corresponds to a particular oracle job which uses\r\n     * that key for generating the VRF proof. Different keyHash's have different gas price\r\n     * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n     * @param subId  - The ID of the VRF subscription. Must be funded\r\n     * with the minimum subscription balance required for the selected keyHash.\r\n     * @param minimumRequestConfirmations - How many blocks you'd like the\r\n     * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n     * for why you may want to request more. The acceptable range is\r\n     * [minimumRequestBlockConfirmations, 200].\r\n     * @param callbackGasLimit - How much gas you'd like to receive in your\r\n     * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n     * may be slightly less than this amount because of gas used calling the function\r\n     * (argument decoding etc.), so you may need to request slightly more than you expect\r\n     * to have inside fulfillRandomWords. The acceptable range is\r\n     * [0, maxGasLimit]\r\n     * @param numWords - The number of uint256 random values you'd like to receive\r\n     * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n     * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n     * @return requestId - A unique identifier of the request. Can be used to match\r\n     * a request to a response in fulfillRandomWords.\r\n     */\r\n    function requestRandomWords(\r\n        bytes32 keyHash,\r\n        uint64 subId,\r\n        uint16 minimumRequestConfirmations,\r\n        uint32 callbackGasLimit,\r\n        uint32 numWords\r\n    ) external returns (uint256 requestId);\r\n\r\n    /**\r\n     * @notice Create a VRF subscription.\r\n     * @return subId - A unique subscription id.\r\n     * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n     * @dev Note to fund the subscription, use transferAndCall. For example\r\n     */\r\n    function createSubscription() external returns (uint64 subId);\r\n\r\n    /**\r\n     * @notice Get a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @return balance - BNB balance of the subscription in juels.\r\n     * @return reqCount - number of requests for this subscription, determines fee tier.\r\n     * @return owner - owner of the subscription.\r\n     * @return consumers - list of consumer address which are able to use this subscription.\r\n     */\r\n    function getSubscription(uint64 subId)\r\n        external\r\n        view\r\n        returns (\r\n            uint96 balance,\r\n            uint64 reqCount,\r\n            address owner,\r\n            address[] memory consumers\r\n        );\r\n\r\n    /**\r\n     * @notice Request subscription owner transfer.\r\n     * @param subId - ID of the subscription\r\n     * @param newOwner - proposed new owner of the subscription\r\n     */\r\n    function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n    function deposit(uint64 subId) external payable;\r\n\r\n    /**\r\n     * @notice Request subscription owner transfer.\r\n     * @param subId - ID of the subscription\r\n     * @dev will revert if original owner of subId has\r\n     * not requested that msg.sender become the new owner.\r\n     */\r\n    function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n    /**\r\n     * @notice Add a consumer to a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @param consumer - New consumer which can use the subscription\r\n     */\r\n    function addConsumer(uint64 subId, address consumer) external;\r\n\r\n    /**\r\n     * @notice Remove a consumer from a VRF subscription.\r\n     * @param subId - ID of the subscription\r\n     * @param consumer - Consumer to remove from the subscription\r\n     */\r\n    function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n    /**\r\n     * @notice Cancel a subscription\r\n     * @param subId - ID of the subscription\r\n     * @param to - Where to send the remaining BNB to\r\n     */\r\n    function cancelSubscription(uint64 subId, address to) external;\r\n\r\n    /*\r\n     * @notice Check to see if there exists a request commitment consumers\r\n     * for all consumers and keyhashes for a given sub.\r\n     * @param subId - ID of the subscription\r\n     * @return true if there exists at least one unfulfilled request for the subscription, false\r\n     * otherwise.\r\n     */\r\n    function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/traits/BinanceVRFElement.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import \"@openzeppelin/contracts/utils/Strings.sol\";\r\n// import \"contracts/v5/binance-vrf/traits/JackpotElement.sol\";\r\n// import \"contracts/v5/binance-vrf/traits/MiningElement.sol\";\r\n\r\n// import \"contracts/v5/binance-vrf/binance-oracle/VRFConsumerBase.sol\";\r\n// import \"contracts/v5/binance-vrf/binance-oracle/VRFCoordinatorInterface.sol\";\r\n\r\nabstract contract BinanceVRFElement is JackpotElement, MiningElement, ReentrancyGuard, VRFConsumerBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address public storageAddress;\r\n    address public teamAddress;\r\n    address public committeeAddress;\r\n    address public leaderboardAddress;\r\n\r\n    uint256 public bnbOracleFee = 0.005 ether;\r\n\r\n    uint16 public constant REQUEST_CONFIRMATION = 3;\r\n    uint32 public constant NUM_WORDS = 1;\r\n    uint32 private callbackGasLimit;\r\n\r\n    VRFCoordinatorInterface public COORDINATOR;\r\n    bytes32 private keyHash;\r\n    uint64 private subId;\r\n\r\n    uint32 private numWords;\r\n\r\n    bool initializedVRFElement;\r\n    bool initializedMiningElement;\r\n\r\n    event UpdateStorageAddress(address storageAddress);\r\n    event UpdateTeamAddress(address teamAddress);\r\n    event UpdateCommitteeAddress(address committeeAddress);\r\n    event UpdateLeaderboardAddress(address leaderboardAddress);\r\n    event UpdateKeyHash(bytes32 keyHash);\r\n    event UpdateSubId(uint64 _subId);\r\n    event UpdateBNBOracleFee(uint256 _newFee);\r\n\r\n    function initMiningElement(\r\n        address _baseToken,\r\n        uint256 _miningAmount,\r\n        bool _isMiningAvalable\r\n    ) external onlyOwner {\r\n        require(!initializedMiningElement, \"Mining Element initialized\");\r\n\r\n        _initMiningElement(_baseToken, _miningAmount, _isMiningAvalable);\r\n\r\n        initializedMiningElement = true;\r\n    }\r\n\r\n    function initVRFElement(\r\n        uint64 _subId,\r\n        bytes32 _keyHash,\r\n        uint32 _callbackGasLimit,\r\n        address _storageAddress,\r\n        address _teamAddress,\r\n        address _committeeAddress,\r\n        address _leaderboardAddress\r\n    ) external onlyOwner {\r\n        require(!initializedVRFElement, \"VRF Element initialized\");\r\n\r\n        _initVRFElement(_subId, _keyHash, _callbackGasLimit, _storageAddress, _teamAddress, _committeeAddress, _leaderboardAddress);\r\n\r\n        initializedVRFElement = true;\r\n    }\r\n\r\n    function _initVRFElement(\r\n        uint64 _subId,\r\n        bytes32 _keyHash,\r\n        uint32 _callbackGasLimit,\r\n        address _storageAddress,\r\n        address _teamAddress,\r\n        address _committeeAddress,\r\n        address _leaderboardAddress\r\n    ) internal virtual {\r\n        subId = _subId;\r\n        keyHash = _keyHash;\r\n        callbackGasLimit = _callbackGasLimit;\r\n\r\n        storageAddress = _storageAddress;\r\n        teamAddress = _teamAddress;\r\n        leaderboardAddress = _leaderboardAddress;\r\n        committeeAddress = _committeeAddress;\r\n    }\r\n\r\n    ///@notice update address of storage contract\r\n    ///@param _storageAddress storage contract address\r\n    function updateStorageAddress(address _storageAddress) external onlyOwner {\r\n        storageAddress = _storageAddress;\r\n\r\n        emit UpdateStorageAddress(storageAddress);\r\n    }\r\n\r\n    ///@notice update team address\r\n    ///@param _teamAddress team address\r\n    function updateTeamAddress(address _teamAddress) external onlyOwner {\r\n        teamAddress = _teamAddress;\r\n\r\n        emit UpdateTeamAddress(teamAddress);\r\n    }\r\n\r\n    function updateCommitteeAddress(address _committeeAddress) external onlyOwner {\r\n        committeeAddress = _committeeAddress;\r\n\r\n        emit UpdateCommitteeAddress(committeeAddress);\r\n    }\r\n\r\n    function updateLeaderboardAddress(address _leaderboardAddress) external onlyOwner {\r\n        leaderboardAddress = _leaderboardAddress;\r\n\r\n        emit UpdateLeaderboardAddress(leaderboardAddress);\r\n    }\r\n\r\n    function updateSubId(uint64 _subId) external onlyOwner {\r\n        subId = _subId;\r\n        emit UpdateSubId(_subId);\r\n    }\r\n\r\n    function updateBNBOracleFee(uint256 _newFee) external onlyOwner {\r\n        bnbOracleFee = _newFee;\r\n        emit UpdateBNBOracleFee(_newFee);\r\n    }\r\n\r\n    function _getBlockHash(uint256 _randomness) internal view virtual returns (bytes32 _hash) {\r\n        return keccak256(abi.encode(_randomness));\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual override {}\r\n\r\n    function _requestRandomWords() internal returns (uint256 requestId) {\r\n        address(COORDINATOR).call{value: bnbOracleFee}(abi.encodeWithSignature(\"deposit(uint64)\", subId));\r\n\r\n        // Will revert if subscription is not set and funded.\r\n        requestId = COORDINATOR.requestRandomWords(keyHash, subId, REQUEST_CONFIRMATION, callbackGasLimit, NUM_WORDS);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/v5/binance-vrf/traits/BinanceVRFElementIdBytes16.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"contracts/v5/binance-vrf/traits/BinanceVRFElement.sol\";\r\n\r\nabstract contract BinanceVRFElementIdBytes16 is BinanceVRFElement {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    struct RandomnessRequestData {\r\n        bytes16 betId;\r\n        address gamer;\r\n        uint256 number;\r\n        bool fullfilled;\r\n    }\r\n\r\n    mapping(uint256 => RandomnessRequestData) public randomnessRequests;\r\n\r\n    function _requestRandomness(bytes16 _id, address _gamer) internal returns (uint256 requestId) {\r\n        requestId = _requestRandomWords();\r\n\r\n        RandomnessRequestData memory data = RandomnessRequestData({betId: _id, gamer: _gamer, number: 0, fullfilled: false});\r\n\r\n        randomnessRequests[requestId] = data;\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\r\n        RandomnessRequestData storage data = randomnessRequests[requestId];\r\n        require(!data.fullfilled, \"VRF: request already processed\");\r\n\r\n        data.fullfilled = true;\r\n        data.number = randomWords[0];\r\n\r\n        _processBetWithRandomness(data, data.number);\r\n        _mining(data.gamer);\r\n    }\r\n\r\n    function _processBetWithRandomness(RandomnessRequestData storage _data, uint256 _randomness) internal virtual {}\r\n}\r\n\r\n\r\n// Root file: contracts/v5/games/CryptoDropLotoV5.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// import \"contracts/v5/binance-vrf/traits/BinanceVRFElementIdBytes16.sol\";\r\n\r\n/// @notice CryptoDrop V5\r\ncontract CryptoDropLotoV5 is BinanceVRFElementIdBytes16 {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    uint256 internal constant BET_SIZE = 0.01 ether;\r\n    uint256 internal constant PRECISION = 1 ether;\r\n    uint256 internal constant WIN_SIZE = 0.01 ether; //1% or 0.01\r\n\r\n    uint256 internal constant JACKPOT_PERCENT = 50;\r\n    uint256 internal constant STORAGE_PERCENT = 18;\r\n    uint256 internal constant COMMITTEE_PERCENT = 18;\r\n    uint256 internal constant LEADERBOARD_PERCENT = 7;\r\n    uint256 internal constant TEAM_PERCENT = 7;\r\n\r\n    uint256 internal constant WIN_MATCHES = 6;\r\n    uint256 internal constant PROMO_MATCHES = 5;\r\n\r\n    uint256 public promoPeriod = 86400; //24 hour\r\n    uint256 public lastPromoTime;\r\n\r\n    uint256 public betSize = BET_SIZE;\r\n    uint256 public winSize = WIN_SIZE;\r\n\r\n    struct Bet {\r\n        uint256 requestId;\r\n        uint256 blockNumber;\r\n        uint256 amount;\r\n        uint256 vrfFee;\r\n        uint256 reward;\r\n        bytes6 bet;\r\n        bytes hash;\r\n    }\r\n\r\n    mapping(address => mapping(bytes16 => Bet)) public bets;\r\n    mapping(bytes16 => bool) public tickets;\r\n\r\n    event PayoutBet(bytes16 id, uint256 amount, address gamer);\r\n    event ProcessBet(bytes16 id, address gamer, uint256 amount, uint256 reward, bytes6 bet, bytes hash);\r\n    event SetBetSize(uint256 size);\r\n    event SetWinSize(uint256 size);\r\n    event ActivatedPromo(uint256 lastPromoTime);\r\n    event UpdatePromoPeriod(uint256 promoPeriod);\r\n    event RefundBNB(address gamer, uint256 amount);\r\n\r\n    constructor(address vrfCoordinator) VRFConsumerBase(vrfCoordinator) {\r\n        COORDINATOR = VRFCoordinatorInterface(vrfCoordinator);\r\n    }\r\n\r\n    ///@notice place bet\r\n    ///@param _params, 16 bytes of id, and 6 bytes for places [0...9, A...F]\r\n    function placeBet(bytes22 _params) external payable virtual nonReentrant whenNotPaused {\r\n        require(!_msgSender().isContract(), \"CryptoDrop V5: sender cannot be a contract\");\r\n        require(tx.origin == _msgSender(), \"CryptoDrop V5: msg sender is not original user\");\r\n\r\n        uint256 bSize = betSize + bnbOracleFee;\r\n\r\n        require(msg.value >= bSize, string(abi.encodePacked(\"CryptoDrop V5: Bet amount should be greater \", Strings.toString(bSize), \" WEI\")));\r\n\r\n        if (msg.value > bSize) {\r\n            uint256 refund = msg.value - bSize;\r\n\r\n            _deliverFunds(_msgSender(), refund, \"CryptoDrop V5: failed transfer BNB to Staking Storage\");\r\n\r\n            emit RefundBNB(_msgSender(), refund);\r\n        }\r\n\r\n        require(bytes16(_params) != 0, \"CryptoDrop V5: Id should not be 0\");\r\n\r\n        bytes16 id = bytes16(_params);\r\n\r\n        require(!tickets[id], \"CryptoDrop V5: this ticket already exists\");\r\n\r\n        bytes6 bet = bytes6(_params << 128);\r\n\r\n        _beforeProcessBet();\r\n\r\n        bytes memory b = new bytes(6);\r\n\r\n        Bet memory betStruct = Bet(0, block.number - 1, bSize, bnbOracleFee, 0, bet, b);\r\n\r\n        bets[_msgSender()][id] = betStruct;\r\n\r\n        tickets[id] = true;\r\n\r\n        //process bet\r\n        _processBet(id, _msgSender());\r\n    }\r\n\r\n    ///@notice activate promo period, when win matches == 5 mathes in order\r\n    function activatePromoPeriod() external onlyOwner whenNotPaused {\r\n        lastPromoTime = block.timestamp + promoPeriod;\r\n\r\n        emit ActivatedPromo(lastPromoTime);\r\n    }\r\n\r\n    ///@notice update promo period, default 24 hours\r\n    ///@param _promoPeriod promo period in seconds\r\n    function updatePromoPeriod(uint256 _promoPeriod) external onlyOwner {\r\n        promoPeriod = _promoPeriod;\r\n\r\n        emit UpdatePromoPeriod(promoPeriod);\r\n    }\r\n\r\n    function updateBetSize(uint256 _size) external onlyOwner {\r\n        betSize = _size;\r\n        emit SetBetSize(_size);\r\n    }\r\n\r\n    function updateWinSize(uint256 _size) external onlyOwner {\r\n        winSize = _size;\r\n        emit SetWinSize(_size);\r\n    }\r\n\r\n    function isActivePromo() external view returns (bool) {\r\n        return block.timestamp <= lastPromoTime ? true : false;\r\n    }\r\n\r\n    function _beforeProcessBet() internal virtual {\r\n        uint256 jackpotFee = (betSize * JACKPOT_PERCENT * PRECISION) / 100 / PRECISION;\r\n        uint256 storageFee = (betSize * STORAGE_PERCENT * PRECISION) / 100 / PRECISION;\r\n        uint256 teamFee = (betSize * TEAM_PERCENT * PRECISION) / 100 / PRECISION;\r\n        uint256 leaderboardFee = (betSize * LEADERBOARD_PERCENT * PRECISION) / 100 / PRECISION;\r\n        uint256 committeeFee = (betSize * COMMITTEE_PERCENT * PRECISION) / 100 / PRECISION;\r\n\r\n        // increase jackpot\r\n        jackpotAmount += jackpotFee;\r\n\r\n        _deliverFunds(storageAddress, storageFee, \"CryptoDrop V5: failed transfer BNB to Staking Storage\");\r\n\r\n        _deliverFunds(teamAddress, teamFee, \"CryptoDrop V5: failed transfer BNB to Team\");\r\n\r\n        _deliverFunds(leaderboardAddress, leaderboardFee, \"CryptoDrop V5: failed transfer BNB to Leaderboard\");\r\n\r\n        _deliverFunds(committeeAddress, committeeFee, \"CryptoDrop V5: failed transfer BNB to Committee\");\r\n    }\r\n\r\n    function _processBet(bytes16 _id, address _gamer) internal virtual {\r\n        uint256 requestId = _requestRandomness(_id, _gamer);\r\n\r\n        RandomnessRequestData memory data = RandomnessRequestData({betId: _id, gamer: _gamer, number: 0, fullfilled: false});\r\n\r\n        randomnessRequests[requestId] = data;\r\n\r\n        Bet storage bet = bets[_gamer][_id];\r\n\r\n        bet.requestId = requestId;\r\n    }\r\n\r\n    function _processBetWithRandomness(RandomnessRequestData storage _data, uint256 _randomness) internal virtual override {\r\n        bytes16 betId = _data.betId;\r\n\r\n        address gamer = _data.gamer;\r\n\r\n        bytes32 blockHash = _getBlockHash(_randomness);\r\n\r\n        Bet storage bet = bets[gamer][betId];\r\n\r\n        bytes1 field;\r\n        bytes memory b = new bytes(6);\r\n        uint8 matchesCount;\r\n        uint8 startHash = blockHash.length - bet.bet.length;\r\n\r\n        for (uint8 j = 0; j < _winMatches(); j++) {\r\n            //get symbol from blockchash\r\n\r\n            field = blockHash[startHash + j] >> 4;\r\n\r\n            //correct position\r\n            if (bet.bet[j] < 0x10) {\r\n                if (field == bet.bet[j]) {\r\n                    matchesCount++;\r\n                }\r\n            }\r\n\r\n            b[j] = field;\r\n        }\r\n\r\n        bet.hash = b;\r\n\r\n        //more than winMatches, default 6\r\n        if (matchesCount >= _winMatches()) {\r\n            uint256 prize = (jackpotAmount * winSize) / PRECISION;\r\n\r\n            if (prize > address(this).balance) {\r\n                prize = address(this).balance;\r\n            }\r\n\r\n            jackpotAmount -= prize;\r\n\r\n            bet.reward = prize;\r\n\r\n            //sent to gamer prize\r\n            _deliverFunds(gamer, prize, \"CryptoDrop V5: failed transfer BNB to Gamer\");\r\n\r\n            emit PayoutBet(betId, prize, gamer);\r\n        }\r\n\r\n        emit ProcessBet(betId, gamer, bet.amount, bet.reward, bet.bet, bet.hash);\r\n    }\r\n\r\n    function _winMatches() internal view returns (uint256 _matches) {\r\n        if (block.timestamp <= lastPromoTime) {\r\n            _matches = PROMO_MATCHES;\r\n        } else {\r\n            _matches = WIN_MATCHES;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastPromoTime\",\"type\":\"uint256\"}],\"name\":\"ActivatedPromo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"id\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"}],\"name\":\"PayoutBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"id\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes6\",\"name\":\"bet\",\"type\":\"bytes6\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"name\":\"ProcessBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"SetBetSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isMiningAvailable\",\"type\":\"bool\"}],\"name\":\"SetIsMiningAvailable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"SetWinSize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningAmount\",\"type\":\"uint256\"}],\"name\":\"TokenMined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"UpdateBNBOracleFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"UpdateBaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"committeeAddress\",\"type\":\"address\"}],\"name\":\"UpdateCommitteeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"UpdateKeyHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"leaderboardAddress\",\"type\":\"address\"}],\"name\":\"UpdateLeaderboardAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMiningAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"promoPeriod\",\"type\":\"uint256\"}],\"name\":\"UpdatePromoPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"storageAddress\",\"type\":\"address\"}],\"name\":\"UpdateStorageAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"UpdateSubId\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"}],\"name\":\"UpdateTeamAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COORDINATOR\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATION\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activatePromoPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addJackpot\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vrfFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bytes6\",\"name\":\"bet\",\"type\":\"bytes6\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbOracleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkMiningAvailability\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_miningAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isMiningAvalable\",\"type\":\"bool\"}],\"name\":\"initMiningElement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_committeeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_leaderboardAddress\",\"type\":\"address\"}],\"name\":\"initVRFElement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActivePromo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMiningAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPromoTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaderboardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"miningBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes22\",\"name\":\"_params\",\"type\":\"bytes22\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomnessRequests\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"betId\",\"type\":\"bytes16\"},{\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fullfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMiningAvailable\",\"type\":\"bool\"}],\"name\":\"setIsMiningAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"updateBNBOracleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"updateBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"updateBetSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_committeeAddress\",\"type\":\"address\"}],\"name\":\"updateCommitteeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_leaderboardAddress\",\"type\":\"address\"}],\"name\":\"updateLeaderboardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_miningAmount\",\"type\":\"uint256\"}],\"name\":\"updateMiningAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_promoPeriod\",\"type\":\"uint256\"}],\"name\":\"updatePromoPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"updateStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"updateSubId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"updateWinSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSomeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CryptoDropLotoV5", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009632ade542f12114f5e5ad4d6f8e47fb993955da", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e42bb15a4067c87f8d852d5b2192e65496292e46a14a6a60fbb8d50566336d63"}