{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/* \r\n\r\n$$___$$_ __$$$___ $$___$$_ __$$$___ $$___$$_ $$$$_ $$___$$_ $$$$$$$_ $$$$$$__ _$$$$$__ $$$$$$$_\r\n$$$_$$$_ _$$_$$__ $$$_$$$_ _$$_$$__ $$$__$$_ _$$__ $$___$$_ $$______ $$___$$_ $$___$$_ $$______\r\n_$$$$$__ $$___$$_ _$$$$$__ $$___$$_ $$$$_$$_ _$$__ _$$_$$__ $$$$$___ $$___$$_ _$$$____ $$$$$___\r\n_$$$$$__ $$___$$_ _$$$$$__ $$___$$_ $$_$$$$_ _$$__ _$$_$$__ $$______ $$$$$$__ ___$$$__ $$______\r\n$$$_$$$_ _$$_$$__ $$$_$$$_ _$$_$$__ $$__$$$_ _$$__ __$$$___ $$______ $$___$$_ $$___$$_ $$______\r\n$$___$$_ __$$$___ $$___$$_ __$$$___ $$___$$_ $$$$_ ___$____ $$$$$$$_ $$___$$_ _$$$$$__ $$$$$$$_\r\n\r\n93% for Initial Liquidity (100% LP will be burnt)\r\n7% for Listings \r\n\r\n*/\r\n\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n \r\ninterface IERC165 { \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 { \r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n \r\ninterface IERC20 { \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n \r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 { \r\n    function name() external view returns (string memory);\r\n \r\n    function symbol() external view returns (string memory);\r\n \r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n  \r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount; \r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked { \r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount; \r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n \r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n \r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n \r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n \r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n \r\ncontract XOXONIVERSEToken is ERC20, Ownable {\r\n    IUniswapV2Router02 public zUniswapV2Router;\r\n    address public zUniswapV2Pair;\r\n    \r\n    bool private yFlag0;\r\n    bool private yFlag1;\r\n    bool private yFlag2;\r\n    bool private yFlag3;\r\n    bool private yFlag4;\r\n    bool private yFlag5; \r\n    bool private yFlag6; \r\n    \r\n    uint256 private immutable YVAR0;\r\n    uint256 private yVar1;\r\n    uint256 private immutable YVAR2;\r\n    uint256 private immutable YVAR3;\r\n    uint256 private yVar4;\r\n    uint256 private yVar5;\r\n    uint256 public currentStage;\r\n\r\n    uint256 public zForLiq;\r\n    uint256 public zTotBurAmo;\r\n    uint256 public zTotLiqAmo;\r\n\r\n    uint256 public buyTaxAutoBurn = 1; \r\n    uint256 public buyTaxToLiquidity = 2;\r\n    uint256 public sellTaxAutoBurn = 1; \r\n    uint256 public sellTaxToLiquidity = 2; \r\n\r\n    address public walletListings; \r\n    address public walletSetter;\r\n    uint256 private buyCooldownTime;\r\n    uint256 public loguinta;\r\n    uint256 public loguintb;\r\n    uint256 public loguintc;\r\n    string public logstra;\r\n    string public logstrb;\r\n    string public logstrc;\r\n    string public logstrd;\r\n    string public logstre;\r\n\r\n    mapping(address => bool) public yAddress0;\r\n    mapping(address => bool) public yAddress1;\r\n    mapping(address => bool) public yAddress2;\r\n    mapping(address => bool) public yAddress3;\r\n    mapping(address => bool) public yAddress4;\r\n    mapping(address => bool) public yAddress5;\r\n    mapping(address => bool) public yAddress6;\r\n     \r\n    mapping(address => uint256) public yAddress7; \r\n \r\n    bool private zIsLiquidity;\r\n    modifier mLockTheSwap {\r\n        zIsLiquidity = true;\r\n        _;\r\n        zIsLiquidity = false;\r\n    } \r\n\r\n    event eSwapAndLiquify(uint256 _token1, uint256 _token2);\r\n    event eSwapBuy(address _from, address _to, uint256 _amount);\r\n    event eSwapSell(address _from, address _to, uint256 _amount);\r\n    event eTransfer(address _from, address _to, uint256 _amount);\r\n    event eTransferCoin(address _from, address _to, uint256 _amount);\r\n\r\n    constructor(uint256[] memory myvar) ERC20(\"XOXONIVERSE TOKEN\", \"XOXO\") {  \r\n        IUniswapV2Router02 _router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); \r\n\r\n        zUniswapV2Router = _router;\r\n        zUniswapV2Pair = IUniswapV2Factory(_router.factory()).createPair(address(this), _router.WETH());\r\n\r\n        yFlag5 = false;\r\n        yFlag6 = true;\r\n  \r\n        walletListings = 0x89703cC5B8A9a06c9cB7069C0AA048a53bBbE3b4; \r\n        walletSetter = 0x92A8a4e3cBd0E9f63890dDe9168e55f21D2df53a; \r\n   \r\n        YVAR0 = myvar[0];\r\n        yVar1 = myvar[1];\r\n        YVAR2 = myvar[2];\r\n        YVAR3 = myvar[3];\r\n        yVar4 = myvar[4];\r\n        yVar5 = myvar[5];\r\n        \r\n        _mint(walletListings, YVAR3); \r\n        _mint(msg.sender, YVAR2); \r\n\r\n        yAddress2[address(zUniswapV2Router)] = true;\r\n        yAddress2[zUniswapV2Pair] = true;\r\n        yAddress0[address(zUniswapV2Router)] = true;\r\n        yAddress0[zUniswapV2Pair] = true;\r\n        yAddress6[address(zUniswapV2Router)] = true;\r\n        yAddress6[zUniswapV2Pair] = true; \r\n        yAddress6[msg.sender] = true;\r\n        yAddress2[msg.sender] = true;\r\n        yAddress2[address(this)] = true;\r\n        yAddress2[walletListings] = true; \r\n        yAddress0[msg.sender] = true;\r\n        yAddress0[address(this)] = true;\r\n        yAddress0[walletListings] = true; \r\n        yAddress6[msg.sender] = true;\r\n        yAddress6[address(this)] = true;\r\n        yAddress6[walletListings] = true;\r\n        yAddress3[walletSetter] = true;\r\n        yAddress3[msg.sender] = true;\r\n        yAddress4[walletSetter] = true;\r\n        yAddress4[msg.sender] = true;\r\n        yAddress5[walletSetter] = true;\r\n        yAddress5[msg.sender] = true;\r\n\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override { \r\n        uint256 taxAutBur;\r\n        uint256 taxToLiq;\r\n        uint256 forTra;\r\n        uint256 isBal;\r\n\r\n        bool isFlag2 = yFlag2; \r\n        bool isBuy = false; \r\n        bool isSell = false; \r\n\r\n        bool canSwap = zForLiq >= yVar5;\r\n        bool takeFee;\r\n        if (recipient == zUniswapV2Pair && !zIsLiquidity && yFlag6 && !yFlag5 && canSwap) { \r\n            logstrc = \"s al\";\r\n            swapAndLiquify();\r\n        }\r\n        takeFee = !zIsLiquidity;\r\n \r\n        if (currentStage <= 2) {  \r\n            logstre = \"w 0\";\r\n            if (yAddress0[sender] && yAddress0[recipient]) {\r\n                isFlag2 = true; \r\n                logstre = \"w 1\";\r\n            } \r\n        }\r\n        if (sender == zUniswapV2Pair) { \r\n            isBuy = true;\r\n            require(isFlag2, \"Error\"); \r\n            logstra = \"b\";\r\n            if (yFlag3 && !yAddress6[recipient]) { \r\n                logstrb = \"b l 1\";\r\n                isBal = balanceOf(recipient) + amount;\r\n                loguinta = isBal;\r\n                loguintb = yVar1;\r\n                require(isBal <= yVar1, \"Limit Error\"); \r\n            }\r\n            yAddress7[recipient] = block.timestamp;\r\n            if (takeFee) {\r\n                if (yFlag1) { taxAutBur = amount * buyTaxAutoBurn / 100; } \r\n                if (yFlag0) { taxToLiq = amount * buyTaxToLiquidity / 100; }  \r\n                logstrc = \"b f\";\r\n            }\r\n            logstrd = \"b e\";\r\n            emit eSwapBuy(sender, recipient, amount); \r\n        } else if (recipient == zUniswapV2Pair) { \r\n            isSell = true;\r\n            logstra = \"s\";\r\n            require(isFlag2, \"Error\"); \r\n            if (takeFee) {\r\n                if (yFlag1) { taxAutBur = amount * sellTaxAutoBurn / 100; } \r\n                if (yFlag0) { taxToLiq = amount * sellTaxToLiquidity / 100; }  \r\n                logstrb = \"s f\";\r\n            }\r\n            logstrc = \"s e\";\r\n            logstrd = \"s\";\r\n            emit eSwapSell(sender, recipient, amount); \r\n        } else { \r\n            emit eTransfer(sender, recipient, amount);  \r\n        } \r\n        if (yAddress2[sender] && yAddress2[recipient]) {\r\n            taxAutBur = 0;\r\n            taxToLiq = 0; \r\n        }\r\n        if (zTotBurAmo >= yVar4) {\r\n            taxAutBur = 0;\r\n        }\r\n        if (taxAutBur > 0) {\r\n            _burn(sender, taxAutBur);\r\n            zTotBurAmo += taxAutBur; \r\n        }\r\n        if (taxToLiq > 0) {\r\n            super._transfer(sender, address(this), taxToLiq);  \r\n            zTotLiqAmo += taxToLiq;\r\n            zForLiq += taxToLiq;\r\n        }\r\n        forTra = amount - taxAutBur - taxToLiq; \r\n        super._transfer(sender, recipient, forTra);\r\n    }\r\n\r\n    function zGetVar() public view returns (uint256,uint256,uint256,uint256,uint256,uint256) {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        return (YVAR0,yVar1,YVAR2,YVAR3,yVar4,yVar5);\r\n    }\r\n    function zGetBool() public view returns (bool,bool,bool,bool,bool,bool,bool) {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        return (yFlag0,yFlag1,yFlag2,yFlag3,yFlag4,yFlag5,yFlag6);\r\n    }\r\n    function zGetTokenBalance(address account) public view returns (uint256) {\r\n        return balanceOf(account);\r\n    }\r\n    function zGetCoinBalance(address account) public view returns (uint256) {\r\n        return account.balance;\r\n    }\r\n    function zGetAddresses() public view returns (address _address1, address _address2, address _address3, address _address4, address _address5) {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        return (msg.sender,address(this),address(zUniswapV2Router),zUniswapV2Pair,owner());\r\n    }\r\n \r\n    // this will add liquidity from liquidity tax wallet and burns the lp token\r\n    function swapAndLiquify() private mLockTheSwap {\r\n        uint256 half = zForLiq / 2;\r\n        uint256 otherHalf = zForLiq - half;\r\n        uint256 initialBalance = address(this).balance;\r\n        zTask1(otherHalf);\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n        zTask2(half, newBalance);        \r\n        zForLiq -= (half + otherHalf); \r\n        emit eSwapAndLiquify(otherHalf, newBalance);\r\n    }\r\n    function addLiquidityManually() public mLockTheSwap { \r\n        require(yAddress4[msg.sender], \"Access Denied\");\r\n        bool canSwap = zForLiq >= yVar5;\r\n        if (!zIsLiquidity && yFlag6 && canSwap) { \r\n            uint256 half = zForLiq / 2;\r\n            uint256 otherHalf = zForLiq - half;\r\n            uint256 initialBalance = address(this).balance;     \r\n            zTask1(otherHalf);\r\n            uint256 newBalance = address(this).balance - initialBalance;     \r\n            zTask2(half, newBalance);            \r\n            zForLiq -= (half + otherHalf); \r\n            emit eSwapAndLiquify(otherHalf, newBalance);\r\n        } \r\n    }  \r\n    function zTask1(uint256 tokenAmount) private { \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this); \r\n        path[1] = zUniswapV2Router.WETH(); \r\n        if(allowance(address(this), address(zUniswapV2Router)) < tokenAmount) {\r\n            _approve(address(this), address(zUniswapV2Router), tokenAmount);  \r\n        }\r\n        uint256 deadline = block.timestamp + 300;  \r\n        zUniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), deadline ); \r\n    } \r\n    function zTask2(uint256 tokenAmount, uint256 ethAmount) private { \r\n        _approve(address(this), address(zUniswapV2Router), tokenAmount);   \r\n        uint256 deadline = block.timestamp + 300;  \r\n        zUniswapV2Router.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, address(0), deadline ); \r\n    }\r\n\r\n    // this is the only option to set Buy Tax and Sell Tax \r\n    function zSetStage(uint256 _index) external {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        require(currentStage < _index, \"No Turning Back\");\r\n        if (_index == 1) {\r\n            yFlag2 = false;\r\n            yFlag3 = true;\r\n            yFlag4 = false;\r\n            buyTaxAutoBurn = 0;\r\n            buyTaxToLiquidity = 3;\r\n            sellTaxAutoBurn = 0;\r\n            sellTaxToLiquidity = 8;\r\n            buyCooldownTime = 0; \r\n        } else if (_index == 2) { \r\n            yFlag2 = true;\r\n            yFlag3 = true; \r\n            yFlag4 = false; \r\n            buyTaxAutoBurn = 0;\r\n            buyTaxToLiquidity = 3;\r\n            sellTaxAutoBurn = 0;\r\n            sellTaxToLiquidity = 3;\r\n            buyCooldownTime = 0; \r\n        } else if (_index == 3) { \r\n            yFlag2 = true;\r\n            yFlag3 = true; \r\n            yFlag4 = false; \r\n            buyTaxAutoBurn = 1;\r\n            buyTaxToLiquidity = 2;\r\n            sellTaxAutoBurn = 1;\r\n            sellTaxToLiquidity = 2;\r\n            buyCooldownTime = 0; \r\n        }\r\n        currentStage = _index;\r\n    }\r\n    \r\n    function zSetBool(uint256[] calldata _index, bool[] calldata _value) external {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        require(_index.length == _value.length, \"Length Error\"); \r\n        for (uint256 i = 0; i < _index.length; i++) {\r\n            if (_index[i] == 0) {\r\n                yFlag0 = _value[i];\r\n            } else if (_index[i] == 1) {\r\n                yFlag1 = _value[i];\r\n            } else if (_index[i] == 2) {\r\n                yFlag2 = _value[i];\r\n            } else if (_index[i] == 3) {\r\n                yFlag3 = _value[i];\r\n            } else if (_index[i] == 4) {\r\n                yFlag4 = _value[i]; \r\n            } else if (_index[i] == 5) {\r\n                yFlag5 = _value[i]; \r\n            } else if (_index[i] == 6) {\r\n                yFlag6 = _value[i]; \r\n            }\r\n        }\r\n    }\r\n\r\n    function zSetUint(uint256 _index, uint256 _max) external {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        if (_index == 1) {\r\n            yVar1 = _max;\r\n        } else if (_index == 4) {\r\n            yVar4 = _max;\r\n        } else if (_index == 5) {\r\n            yVar5 = _max;\r\n        }\r\n    }\r\n\r\n    function zSetAddresses(uint256 _index, address[] calldata _addresses, bool[] calldata _bool) external {\r\n        require(yAddress3[msg.sender], \"Access Denied\");\r\n        require(_addresses.length == _bool.length, \"Length Error\"); \r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            if (_index == 0) {\r\n                yAddress0[_addresses[i]] = _bool[i];\r\n            } else if (_index == 1) {\r\n                yAddress1[_addresses[i]] = _bool[i];\r\n            } else if (_index == 2) {\r\n                yAddress2[_addresses[i]] = _bool[i];\r\n            } else if (_index == 3) {\r\n                yAddress3[_addresses[i]] = _bool[i];\r\n            } else if (_index == 4) {\r\n                yAddress5[_addresses[i]] = _bool[i]; \r\n            } else if (_index == 5) {\r\n                yAddress6[_addresses[i]] = _bool[i]; \r\n            }\r\n        }\r\n    } \r\n  \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    } \r\n \r\n    receive() payable external {}\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"myvar\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_token1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_token2\",\"type\":\"uint256\"}],\"name\":\"eSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"eSwapBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"eSwapSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"eTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"eTransferCoin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidityManually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxAutoBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logstra\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logstrb\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logstrc\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logstrd\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logstre\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loguinta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loguintb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loguintc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxAutoBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletListings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress4\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress6\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yAddress7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zForLiq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zGetAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address5\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zGetBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"zGetCoinBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"zGetTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zGetVar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_bool\",\"type\":\"bool[]\"}],\"name\":\"zSetAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_index\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_value\",\"type\":\"bool[]\"}],\"name\":\"zSetBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"zSetStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"zSetUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zTotBurAmo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zTotLiqAmo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zUniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zUniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XOXONIVERSEToken", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000c5371912364ce3056c280000000000000000000000000000000000000000000000327cb2734119d3b7a900000000000000000000000000000000000000000000b7690046b27fd32133f2000000000000000000000000000000000000000000000dce18cb83cd0fe43836000000000000000000000000000000000000000000008a0cf7f326029eea321c000000000000000000000000000000000000000000000000000021e19e0c9bab2400000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9319aa157995948e8ba902ac70a6661f84a87727b16add15bbdf025daa7ee648"}