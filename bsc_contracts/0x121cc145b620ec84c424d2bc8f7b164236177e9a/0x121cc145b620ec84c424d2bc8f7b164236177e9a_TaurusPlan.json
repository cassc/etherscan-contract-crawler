{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TaurusPlan.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: SimPL-2.0\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\n\\r\\ncontract TaurusPlan is Ownable {\\r\\n    struct AssetPackageInfo {\\r\\n        uint256 birthday;\\r\\n        uint256 amount;\\r\\n        uint256 release;\\r\\n        uint256 waitWithdrawn;\\r\\n        uint256 withdrawn;\\r\\n        bool state;\\r\\n    }\\r\\n\\r\\n    struct UserInfo {\\r\\n        address referrer;\\r\\n        address[] referrals;\\r\\n        uint256 amount;\\r\\n        uint256 teamAmount;\\r\\n        uint256 AssetPackagePositions;\\r\\n    }\\r\\n\\r\\n    struct ReferrerSearch {\\r\\n        uint8 currentReferrerLevel;\\r\\n        uint8 baseSalesLevel;\\r\\n        uint8 currentLevelDiff;\\r\\n        uint256 levelDiffAmountPerLevel;\\r\\n        uint256 currentReferrerBoost;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public Users;\\r\\n    mapping(address => AssetPackageInfo[]) public AssetPackage;\\r\\n    uint256 public constant MAX_SEARCH_DEPTH = 50;\\r\\n    uint256 public constant DECIMALS = 10 ** 18;\\r\\n    uint256 public constant PRECISION = 100;\\r\\n    uint256 public constant TIME_UNIT = 1 days;\\r\\n    uint256[] public assetPackageAmount = [100 * DECIMALS, 500 * DECIMALS, 1000 * DECIMALS, 3000 * DECIMALS, 5000 * DECIMALS, 10000 * DECIMALS];\\r\\n    uint256[] public levelTeamAmount = [10000 * DECIMALS, 30000 * DECIMALS, 100000 * DECIMALS, 200000 * DECIMALS, 500000 * DECIMALS];\\r\\n    uint256[] refferrerBoost = [30,20];\\r\\n    address public USDTAddr = address(0x55d398326f99059fF775485246999027B3197955);\\r\\n    address public routerAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    address public uniswapV2Factory = address(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\r\\n    address public LKYSAddr;\\r\\n    address public TAUAddr;\\r\\n    uint256 public TAUTokenLiquidityMaxNum = 100000 * DECIMALS;\\r\\n    uint256 public TAUTokenLiquidityNum;\\r\\n    IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\r\\n    address public manager;\\r\\n    address public secureAddr = address(0x759694132d34Df7C2d43c59f1d6557C598C83F97);\\r\\n\\r\\n    constructor(\\r\\n        address _LKYSAddr,\\r\\n        address _TAUAddr\\r\\n    ) {\\r\\n        LKYSAddr = address(_LKYSAddr);\\r\\n        TAUAddr = address(_TAUAddr);\\r\\n        manager = address(0x512D08507924af8aC7857E5bd18b26Ee9291e81B);\\r\\n    }\\r\\n\\r\\n    function setManager(address Addr) public onlyOwner {\\r\\n        manager = Addr;\\r\\n    }\\r\\n\\r\\n    function invest(\\r\\n        uint256 _AssetPackageNum,\\r\\n        address referrer\\r\\n    ) public {\\r\\n        require(msg.sender != owner(),\\\"[TaurusPlan] woner do not operate\\\");\\r\\n        uint256 amount = assetPackageAmount[_AssetPackageNum];\\r\\n        require(amount > 0, \\\"[TaurusPlan] Asset package does not exist\\\");\\r\\n        require(IERC20(USDTAddr).allowance(msg.sender, address(this)) >= amount, \\\"[TaurusPlan] Insufficient USDT allowance\\\");\\r\\n        if(Users[msg.sender].referrer == address(0)){\\r\\n            require(Users[referrer].referrer != address(0) || owner() == referrer, \\\"[TaurusPlan] Invalid referrer!\\\");\\r\\n            Users[msg.sender].referrer = referrer;\\r\\n            Users[referrer].referrals.push(msg.sender);\\r\\n        }else{\\r\\n            referrer = Users[msg.sender].referrer;\\r\\n        }\\r\\n\\r\\n        IERC20(USDTAddr).transferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        AssetPackage[msg.sender].push(AssetPackageInfo({\\r\\n        birthday: block.timestamp,\\r\\n        amount: amount * 2,\\r\\n        release: amount / PRECISION,\\r\\n        waitWithdrawn: 0,\\r\\n        withdrawn: 0,\\r\\n        state: true\\r\\n        }));\\r\\n\\r\\n        if(TAUTokenLiquidityNum < TAUTokenLiquidityMaxNum){\\r\\n            uint256 liquidityAmount = amount * 5 / PRECISION;\\r\\n            if(liquidityAmount > (TAUTokenLiquidityMaxNum - TAUTokenLiquidityNum)){\\r\\n                liquidityAmount = TAUTokenLiquidityMaxNum - TAUTokenLiquidityNum;\\r\\n            }\\r\\n            addLiquidity(liquidityAmount,liquidityAmount);\\r\\n            TAUTokenLiquidityMaxNum += liquidityAmount;\\r\\n        }\\r\\n\\r\\n        updateReferrerInfo(referrer,amount);\\r\\n\\r\\n        address referrerAddr = referrer;\\r\\n        for(uint256 i = 0; i < MAX_SEARCH_DEPTH; i++){\\r\\n            if(referrerAddr == owner()){\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            Users[referrerAddr].teamAmount += amount;\\r\\n            referrerAddr = Users[referrerAddr].referrer;\\r\\n        }\\r\\n\\r\\n        Users[msg.sender].amount += amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getReferralsArr(\\r\\n        address Addr\\r\\n    ) public view returns(address[] memory, uint256) {\\r\\n        return (Users[Addr].referrals, Users[Addr].referrals.length);\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAssetPackageInfoArr(\\r\\n        address Addr,\\r\\n        uint256 cursor,\\r\\n        uint256 size\\r\\n    ) public view returns(AssetPackageInfo[] memory, uint256) {\\r\\n        uint256 length = size;\\r\\n        uint256 arrlength = AssetPackage[Addr].length;\\r\\n        if(cursor + size > arrlength){\\r\\n            length = arrlength - cursor;\\r\\n        }\\r\\n        AssetPackageInfo[] memory arrAssetPackageInfo = new AssetPackageInfo[](length);\\r\\n        for (uint256 i = 0; i < length; ++i) {\\r\\n            arrAssetPackageInfo[i] = AssetPackage[Addr][i + cursor];\\r\\n        }\\r\\n        return (arrAssetPackageInfo, cursor + length);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        uint256 amountUSDT,\\r\\n        uint256 amountTAU\\r\\n    ) private {\\r\\n        require(IERC20(USDTAddr).balanceOf(address(this)) >= amountUSDT, \\\"[TaurusPlan] Insufficient number of USDT Tokens\\\");\\r\\n        require(IERC20(TAUAddr).balanceOf(address(this)) >= amountTAU, \\\"[TaurusPlan] Insufficient number of TAU Tokens\\\");\\r\\n        IERC20(USDTAddr).approve(routerAddress, amountUSDT);\\r\\n        IERC20(TAUAddr).approve(routerAddress, amountTAU);\\r\\n        IUniswapV2Router02(routerAddress).addLiquidity(\\r\\n            USDTAddr,\\r\\n            TAUAddr,\\r\\n            amountUSDT,\\r\\n            amountTAU,\\r\\n            0,\\r\\n            0,\\r\\n            manager,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateReferrerInfo(\\r\\n        address referrer,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        address referrerAddr = referrer;\\r\\n        uint256 AssetPackageNum;\\r\\n        uint256 j;\\r\\n        ReferrerSearch memory search;\\r\\n        search.baseSalesLevel = 0;\\r\\n        search.levelDiffAmountPerLevel = 8;\\r\\n        uint256 inProduction;\\r\\n        uint256 dayPassed;\\r\\n        uint256 reward;\\r\\n        uint256 release;\\r\\n        for(uint256 i = 0; i < MAX_SEARCH_DEPTH; i++){\\r\\n            if(referrerAddr == owner() || search.baseSalesLevel == 6){\\r\\n                break;\\r\\n            }\\r\\n            AssetPackageNum = AssetPackage[referrerAddr].length;\\r\\n            inProduction = 0;\\r\\n            if(AssetPackageNum > Users[referrerAddr].AssetPackagePositions){\\r\\n                for(j = Users[referrerAddr].AssetPackagePositions; j < AssetPackageNum; j++){\\r\\n                    AssetPackageInfo memory ap = AssetPackage[referrerAddr][j];\\r\\n                    dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;\\r\\n                    reward = dayPassed * ap.release;\\r\\n                    if ((reward + ap.waitWithdrawn + ap.withdrawn) < ap.amount){\\r\\n                        inProduction += 1;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if(i == 0 || i == 1){\\r\\n                    settlementAssetPackage(referrerAddr);\\r\\n                    release = amount / PRECISION * refferrerBoost[i] / PRECISION / inProduction;\\r\\n                    for(j = Users[referrerAddr].AssetPackagePositions; j < AssetPackageNum; j++){\\r\\n                        AssetPackageInfo storage ap = AssetPackage[referrerAddr][j];\\r\\n                        dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;\\r\\n                        reward = dayPassed * ap.release;\\r\\n                        if ((reward + ap.waitWithdrawn + ap.withdrawn) < ap.amount){\\r\\n                            ap.release += release;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                search.currentReferrerLevel = getLevel(referrerAddr);\\r\\n                if(search.currentReferrerLevel > search.baseSalesLevel){\\r\\n                    search.currentLevelDiff = search.currentReferrerLevel - search.baseSalesLevel;\\r\\n                    search.baseSalesLevel = search.currentReferrerLevel;\\r\\n                    search.currentReferrerBoost = search.currentLevelDiff * search.levelDiffAmountPerLevel;\\r\\n                    if(i > 1){\\r\\n                        settlementAssetPackage(referrerAddr);\\r\\n                    }\\r\\n                    release = amount / PRECISION * search.currentReferrerBoost / PRECISION / inProduction;\\r\\n                    for(j = Users[referrerAddr].AssetPackagePositions; j < AssetPackageNum; j++){\\r\\n                        AssetPackageInfo storage ap = AssetPackage[referrerAddr][j];\\r\\n                        dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;\\r\\n                        reward = dayPassed * ap.release;\\r\\n                        if ((reward + ap.waitWithdrawn + ap.withdrawn) < ap.amount){\\r\\n                            ap.release += release;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            referrerAddr = Users[referrerAddr].referrer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function settlementAssetPackage(\\r\\n        address Addr\\r\\n    ) private {\\r\\n        AssetPackageInfo[] storage assetPackageArr = AssetPackage[Addr];\\r\\n        if(assetPackageArr.length > 0){\\r\\n            for(uint256 i = Users[Addr].AssetPackagePositions; i < assetPackageArr.length; i++){\\r\\n                AssetPackageInfo storage ap = assetPackageArr[i];\\r\\n                if((ap.waitWithdrawn + ap.withdrawn) < ap.amount){\\r\\n                    uint256 dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;\\r\\n                    uint256 reward = dayPassed * ap.release;\\r\\n                    if ((reward + ap.waitWithdrawn + ap.withdrawn) > ap.amount){\\r\\n                        reward = ap.amount - (ap.waitWithdrawn + ap.withdrawn);\\r\\n                    }\\r\\n                    ap.waitWithdrawn += reward;\\r\\n                    ap.birthday += dayPassed * TIME_UNIT;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawal() public {\\r\\n        AssetPackageInfo[] storage assetPackageArr = AssetPackage[msg.sender];\\r\\n        bool record = true;\\r\\n        uint256 amount;\\r\\n        if(assetPackageArr.length > 0){\\r\\n            for(uint256 i = Users[msg.sender].AssetPackagePositions; i < assetPackageArr.length; i++){\\r\\n                AssetPackageInfo storage ap = assetPackageArr[i];\\r\\n                if(record){\\r\\n                    if(ap.withdrawn == ap.amount){\\r\\n                        record = true;\\r\\n                    }else{\\r\\n                        record = false;\\r\\n                        if(Users[msg.sender].AssetPackagePositions != i){\\r\\n                            Users[msg.sender].AssetPackagePositions = i;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if((ap.waitWithdrawn + ap.withdrawn) < ap.amount){\\r\\n                    uint256 dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;\\r\\n                    uint256 reward = dayPassed * ap.release;\\r\\n                    if ((reward + ap.waitWithdrawn + ap.withdrawn) > ap.amount){\\r\\n                        reward = ap.amount - (ap.waitWithdrawn + ap.withdrawn);\\r\\n                        ap.state = false;\\r\\n                    }\\r\\n                    ap.birthday += dayPassed * TIME_UNIT;\\r\\n                    amount += reward + ap.waitWithdrawn;\\r\\n                    ap.waitWithdrawn = 0;\\r\\n                    ap.withdrawn += amount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        require(amount > 0, \\\"[TaurusPlan] Lack of withdrawal amount\\\");\\r\\n        uint256 lkysAmount = getLKYSAmount(amount);\\r\\n        require(IERC20(LKYSAddr).balanceOf(address(this)) >= lkysAmount, \\\"[TaurusPlan] Insufficient number of LKYS Tokens\\\");\\r\\n        IERC20(LKYSAddr).transfer(msg.sender, lkysAmount);\\r\\n    }\\r\\n\\r\\n    function getWithdrawalAmount(\\r\\n        address Addr\\r\\n    ) public view returns (uint256, uint256){\\r\\n        AssetPackageInfo[] memory assetPackageArr = AssetPackage[Addr];\\r\\n        uint256 amount;\\r\\n        uint256 dayPassed;\\r\\n        uint256 reward;\\r\\n        if(assetPackageArr.length > Users[Addr].AssetPackagePositions){\\r\\n            for(uint256 i = Users[Addr].AssetPackagePositions; i < assetPackageArr.length; i++){\\r\\n                AssetPackageInfo memory ap = assetPackageArr[i];\\r\\n                dayPassed = (block.timestamp - ap.birthday) / TIME_UNIT;\\r\\n                reward = dayPassed * ap.release;\\r\\n                if ((reward + ap.waitWithdrawn + ap.withdrawn) > ap.amount){\\r\\n                    reward = ap.amount - (ap.waitWithdrawn + ap.withdrawn);\\r\\n                }\\r\\n                amount += reward + ap.waitWithdrawn;\\r\\n            }\\r\\n        }\\r\\n        if(amount > 0){\\r\\n            uint256 lkysAmount = getLKYSAmount(amount);\\r\\n            return (amount, lkysAmount);\\r\\n        }else{\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getLevel(\\r\\n        address Addr\\r\\n    ) public view returns (uint8){\\r\\n        UserInfo memory user = Users[Addr];\\r\\n        uint256 num = user.referrals.length;\\r\\n        uint256 totalAmount;\\r\\n        uint256 maxTeamAmount;\\r\\n        uint256 teamAmount;\\r\\n        if(num > 0){\\r\\n            for(uint256 i = 0; i < num; i++){\\r\\n                teamAmount = Users[user.referrals[i]].teamAmount + Users[user.referrals[i]].amount;\\r\\n                if(teamAmount > maxTeamAmount){\\r\\n                    maxTeamAmount = teamAmount;\\r\\n                }\\r\\n                totalAmount += teamAmount;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        if(totalAmount > 0){\\r\\n            totalAmount -= maxTeamAmount;\\r\\n            if(totalAmount >= levelTeamAmount[4]){\\r\\n                return 5;\\r\\n            }else if(totalAmount >= levelTeamAmount[3]){\\r\\n                return 4;\\r\\n            }else if(totalAmount >= levelTeamAmount[2]){\\r\\n                return 3;\\r\\n            }else if(totalAmount >= levelTeamAmount[1]){\\r\\n                return 2;\\r\\n            }else if(totalAmount >= levelTeamAmount[0]){\\r\\n                return 1;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function buyLUCKWithUSDT(\\r\\n        uint256 amountUSDT\\r\\n    ) external onlyOwner {\\r\\n        uint256 balanceUSDT = IERC20(USDTAddr).balanceOf(address(this));\\r\\n        require(balanceUSDT >= amountUSDT, \\\"[TaurusPlan] Insufficient USDT balance\\\");\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = USDTAddr;\\r\\n        path[1] = LKYSAddr;\\r\\n        IERC20(USDTAddr).approve(routerAddress, amountUSDT);\\r\\n        router.swapExactTokensForTokens(\\r\\n            amountUSDT,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buyUSDTWithLUCK(\\r\\n        uint256 amountLKYS\\r\\n    ) external onlyOwner {\\r\\n        uint256 balanceLKYS = IERC20(LKYSAddr).balanceOf(address(this));\\r\\n        require(balanceLKYS >= amountLKYS, \\\"[TaurusPlan] Insufficient LKYS balance\\\");\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = LKYSAddr;\\r\\n        path[1] = USDTAddr;\\r\\n        IERC20(LKYSAddr).approve(routerAddress, amountLKYS);\\r\\n        router.swapExactTokensForTokens(\\r\\n            amountLKYS,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getLKYSAmount(\\r\\n        uint256 _amountUSDT\\r\\n    ) public view returns(uint256){\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = USDTAddr;\\r\\n        path[1] = LKYSAddr;\\r\\n        uint256[] memory amounts = IUniswapV2Router02(routerAddress).getAmountsOut(_amountUSDT, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function getUSDTAmount(\\r\\n        uint256 _amountLKYS\\r\\n    ) public view returns(uint256){\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = LKYSAddr;\\r\\n        path[1] = USDTAddr;\\r\\n        uint256[] memory amounts = IUniswapV2Router02(routerAddress).getAmountsOut(_amountLKYS, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n\\r\\n    function tokenAllocation(\\r\\n        IERC20 _ERC20,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner{\\r\\n        _ERC20.transfer(secureAddr, _amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LKYSAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TAUAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"AssetPackage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LKYSAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SEARCH_DEPTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAUAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAUTokenLiquidityMaxNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAUTokenLiquidityNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"AssetPackagePositions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetPackageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"buyLUCKWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLKYS\",\"type\":\"uint256\"}],\"name\":\"buyUSDTWithLUCK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getAssetPackageInfoArr\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"release\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"waitWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"internalType\":\"struct TaurusPlan.AssetPackageInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountUSDT\",\"type\":\"uint256\"}],\"name\":\"getLKYSAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"}],\"name\":\"getReferralsArr\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountLKYS\",\"type\":\"uint256\"}],\"name\":\"getUSDTAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"}],\"name\":\"getWithdrawalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_AssetPackageNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"levelTeamAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secureAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Addr\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_ERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TaurusPlan", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "00000000000000000000000082f84e3af19dcf4a866d7b1483f7c3f36a1db8cb000000000000000000000000c868f273f0fbf1e100f44ccae0bcc75672c04e6c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}