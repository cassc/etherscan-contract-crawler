{"SourceCode": "// File: contracts/ERC721/Lnterfaces/IERC721.sol\r\n\r\npragma solidity ^0.6.0;\r\n \r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\r\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\r\ninterface IERC721  {\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n \r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n \r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n \r\n    /// @notice Count all NFTs assigned to an owner\r\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\r\n    ///  function throws for queries about the zero address.\r\n    /// @param _owner An address for whom to query the balance\r\n    /// @return The number of NFTs owned by `_owner`, possibly zero\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n \r\n    /// @notice Find the owner of an NFT\r\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\r\n    ///  about them do throw.\r\n    /// @param _tokenId The identifier for an NFT\r\n    /// @return The address of the owner of the NFT\r\n    function ownerOf(uint256 _tokenId) external view returns (address);\r\n \r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\r\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n    ///  `onERC721Received` on `_to` and throws if the return value is not\r\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    /// @param data Additional data with no specified format, sent in call to `_to`\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\r\n \r\n    /// @notice Transfers the ownership of an NFT from one address to another address\r\n    /// @dev This works identically to the other function with an extra data parameter,\r\n    ///  except this function just sets data to \"\".\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n \r\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n    ///  THEY MAY BE PERMANENTLY LOST\r\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\r\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\r\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\r\n    ///  `_tokenId` is not a valid NFT.\r\n    /// @param _from The current owner of the NFT\r\n    /// @param _to The new owner\r\n    /// @param _tokenId The NFT to transfer\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\r\n \r\n    /// @notice Change or reaffirm the approved address for an NFT\r\n    /// @dev The zero address indicates there is no approved address.\r\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n    ///  operator of the current owner.\r\n    /// @param _approved The new approved NFT controller\r\n    /// @param _tokenId The NFT to approve\r\n    function approve(address _approved, uint256 _tokenId) external payable;\r\n \r\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\r\n    ///  all of `msg.sender`'s assets\r\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\r\n    ///  multiple operators per owner.\r\n    /// @param _operator Address to add to the set of authorized operators\r\n    /// @param _approved True if the operator is approved, false to revoke approval\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n \r\n    /// @notice Get the approved address for a single NFT\r\n    /// @dev Throws if `_tokenId` is not a valid NFT.\r\n    /// @param _tokenId The NFT to find the approved address for\r\n    /// @return The approved address for this NFT, or the zero address if there is none\r\n    function getApproved(uint256 _tokenId) external view returns (address);\r\n \r\n    /// @notice Query if an address is an authorized operator for another address\r\n    /// @param _owner The address that owns the NFTs\r\n    /// @param _operator The address that acts on behalf of the owner\r\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n   \r\n//     //\u67e5\u770b\u5956\u52b1\u6570\u91cf\r\n//     function getAwardQuantity(uint256 _tokenId)external view  returns(uint256);\r\n\r\n//     function OneMint()external;\r\n\r\n//     function TwoMint()external ;\r\n\r\n//     function withdrawRewards(uint256 _tokenId)external;\r\n\r\n//     //\r\n//    function getDaysQuantity(uint256 _tokenId)external view  returns (uint256,uint256);\r\n\r\n\r\n\r\n}\r\n\r\ninterface IERC165 {\r\n    /// @notice Query if a contract implements an interface\r\n    /// @param interfaceID The interface identifier, as specified in ERC-165\r\n    /// @dev Interface identification is specified in ERC-165. This function\r\n    ///  uses less than 30,000 gas.\r\n    /// @return `true` if the contract implements `interfaceID` and\r\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\ncontract ERC165 is IERC165{\r\n    //\u5e38\u91cf - ERC165\u63a5\u56d7ID\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n \r\n    //\u72b6\u6001\u53d8\u91cf - \u8bb0\u5f55\u63a5\u56d7ID\u662f\u5426\u5df2\u88ab\u5b9e\u73b0\r\n    mapping(bytes4=>bool) private _supportInterface;\r\n \r\n    //\u6784\u9020\u51fd\u6570 - \u521d\u59cb\u5316ERC165\u5df2\u88ab\u5b9e\u73b0\r\n    constructor() public {\r\n        registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n \r\n    //\u5b9e\u73b0ERC65\u63a5\u56d7\u65b9\u6cd5\r\n    function supportsInterface(bytes4 interfaceID) external override view returns (bool){\r\n        return _supportInterface[interfaceID];\r\n    }\r\n \r\n    //\u6ce8\u518c\u63a5\u56d7\uff0c\u5373\u6807\u8bb0\u63a5\u56d7\u4e3a\u5df2\u5b9e\u73b0\r\n    function registerInterface(bytes4 interfaceID) public {\r\n        require(interfaceID != 0xffffffff, \"ERC165\uff1a\u65e0\u6548\u7684\u63a5\u56d7ID\");\r\n        _supportInterface[interfaceID] = true;\r\n    }\r\n}\r\ninterface IERC721TokenReceiver {\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\ninterface IERC20{\r\n function balanceOf(address account) external view returns (uint256);\r\n function transfer(address recipient, uint256 amount) external returns (bool);\r\n function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\ninterface IUniswapV2Pair {\r\n    //\u7528\u4ea4\u6613\u5bf9\u5408\u7ea6\u8c03\u7528\u5f53\u524d\u5408\u7ea6,\u53ef\u4ee5\u83b7\u5f97\u4ea4\u6613\u76842\u4e2atoken\u50a8\u5b58\u91cf\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n// File: contracts/ERC721/Library/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n \r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n \r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n \r\n    return c;\r\n  }\r\n \r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n \r\n    return c;\r\n  }\r\n \r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a,\"b<a\");\r\n    uint256 c = a - b;\r\n \r\n    return c;\r\n  }\r\n \r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n \r\n    return c;\r\n  }\r\n \r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n// File: contracts/ERC721/GetQuantity.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\ncontract getQuantity{\r\n  //\u5f15\u5165\u7b97\u8f93\u5165\u5e93\r\n  using SafeMath for uint256; \r\n  //\u4ea4\u6613\u5bf9\u5730\u5740\r\n  IUniswapV2Pair  iUniswapV2Pair=IUniswapV2Pair(0xc8f0f81b6b63fcE227cF09c56a8222950689ea92);\r\n  //BSC-USD\r\n  address tokenA=0x55d398326f99059fF775485246999027B3197955;\r\n  //DK\r\n  address tokenB=0xB5f6e4236591D1e68d93A40E24Ebfe9E7CEe7F7b;\r\n  IERC20 DK=IERC20(tokenB);\r\n  IERC20 Bsc_USD=IERC20(tokenA);\r\n\r\n  \r\n  \r\n\r\n  //\u83b7\u5f97\u5f53\u524d\u4ea4\u6613\u5bf9\u7684\u50a8\u5907\u91cf,\u5c0f\u7684\u4f1a\u6392\u5728\u524d\u9762\r\n  function getReserves()private view  returns (uint112 tokenA_Quantity,uint112 tokenB_Quantity,uint32 blockTimestampLast)  {\r\n    return  iUniswapV2Pair.getReserves();\r\n  }\r\n    \r\n   //\u8fd9\u4e2a\u51fd\u6570\u662f\u501f\u7528 swap\u4e2d \u6307\u5b9a\u8f93\u5165\u6c42\u8f93\u51fa\r\n  function getAmountIn(  uint256 amountOut,  uint256 reserveIn,  uint256 reserveOut) internal pure returns (uint256 amountIn) {\r\n\r\n        //\u786e\u8ba4\u8f93\u51fa\u6570\u989d\u5927\u4e8e0\r\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\r\n        //\u786e\u8ba4\u50a8\u5907\u91cfIn\u548c\u50a8\u5907\u91cfOut\u5927\u4e8e0\r\n        require(    reserveIn > 0 && reserveOut > 0, \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\");\r\n        //\u5206\u5b50 = \u50a8\u5907\u91cfIn * \u50a8\u5907\u91cfOut * 1000\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        //\u5206\u6bcd = \u50a8\u5907\u91cfOut - \u8f93\u51fa\u6570\u989d * 997\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        //\u8f93\u5165\u6570\u989d = (\u5206\u5b50 / \u5206\u6bcd) + 1\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n   \r\n    \r\n\r\n    \r\n    //\u8fd4\u56de\u786e\u5b9a\u6570\u91cfDK\u6240\u9700\u7684usdt\r\n    function _returnOutput(uint256 amountOut)internal view  returns (uint256)  {\r\n        uint112 reserveOut;\r\n        uint112 reserveIn;\r\n   \r\n      // getReserves()\u8fd4\u56de\u503c\u662f \u5148\u8fd4\u56de\u5730\u5740\u6bd4\u8f83\u66f4\u5c0f\u7684\u6570\u91cf\r\n       if(tokenA < tokenB){\r\n        (reserveOut,reserveIn,)=getReserves();\r\n       }else {\r\n        (reserveIn,reserveOut,)=getReserves();\r\n       }\r\n      \r\n        return getAmountIn(amountOut,reserveIn,reserveOut);\r\n      \r\n    }\r\n\r\n  \r\n}\r\n// File: contracts/ERC721/MiningPool721.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n \r\ncontract ERC721 is ERC165, IERC721{\r\n    //\u72b6\u6001\u53d8\u91cf - \u8bb0\u5f55owner\u62e5\u6709\u591a\u5c11\u4e2atoken\r\n    mapping(address => uint256) private _ownerTokensCount;\r\n \r\n    //\u72b6\u6001\u53d8\u91cf - \u8bb0\u5f55tokenId\u7684\u6240\u6709\u8005\r\n    mapping(uint256 => address) private _tokenOwner;\r\n \r\n    //\u72b6\u6001\u53d8\u91cf - \u8bb0\u5f55tokenId\u6388\u6743\u7ed9\u5916\u90e8\u8d26\u6237\r\n    mapping(uint256 => address) private _tokenApproval;\r\n \r\n    //\u72b6\u6001\u53d8\u91cf - \u8bb0\u5f55\u7528\u6237\u5168\u90e8\u6388\u6743\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n \r\n    //\u4f7f\u7528\u5e93\u4f5c\u7528\u4e8euint256\u7c7b\u578b\r\n    using SafeMath for uint256;\r\n \r\n    //\u5e38\u91cf - ERC721\u63a5\u56d7ID\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n \r\n    //\u5e38\u91cf - IERC721TokenReceiver\u63a5\u56d7ID\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n    \r\n   \r\n \r\n\r\n    //\u63a5\u6536\u672c\u5e01\u7684\u5730\u5740\r\n    address private takeOver=0x5B38Da6a701c568545dCfcB03FcB875f56beddC4;\r\n\r\n   \r\n\r\n   \r\n   \r\n    \r\n\r\n \r\n    //\u6784\u9020\u51fd\u6570 - \u521d\u59cb\u5316ERC721\u63a5\u56d7\u5df2\u5b9e\u73b0\r\n    constructor() public {\r\n        registerInterface(_INTERFACE_ID_ERC721);\r\n    }\r\n    //\r\n    modifier ownerIsNotZeroAddress(address _owner) {\r\n        require(address(0) != _owner, \"ERC721\uff1a\u5730\u5740\u4e0d\u80fd\u4e3a\u96f6\u5730\u5740\");\r\n        _;\r\n    }\r\n \r\n    /// \u83b7\u53d6\u6240\u6709\u8005\u62e5\u6709\u591a\u5c11\u4e2aToken\r\n    function balanceOf(address _owner) ownerIsNotZeroAddress(_owner) public  override view returns (uint256) {\r\n        return _ownerTokensCount[_owner];\r\n    }\r\n \r\n    /// \u83b7\u53d6tokenId\u7684\u6240\u6709\u8005\r\n    function ownerOf(uint256 _tokenId) external override view returns (address) {\r\n        return _ownerOf(_tokenId);\r\n    }\r\n \r\n    function _ownerOf(uint256 _tokenId) internal view returns (address) {\r\n        //\u67e5\u8be2\u51fatokenId\u7684\u6240\u6709\u8005\r\n        address _owner = _tokenOwner[_tokenId];\r\n        //\u5224\u65ad\u6240\u6709\u8005\u662f\u5426\u4e3a\u96f6\u5730\u5740\r\n        require(address(0) != _owner, \"ERC721\uff1a\u62e5\u6709\u8005\u5730\u5740\u4e0d\u80fd\u4e3a\u96f6\u5730\u5740\uff0c\u5373\u6240\u6709\u8005\u4e0d\u5b58\u5728\");\r\n \r\n        return _owner;\r\n    }\r\n \r\n    //\u516c\u7528\u5185\u90e8\u51fd\u6570 - NFT\u8f6c\u79fb\uff0c\u5c06tokenId\u7531\u6240\u6709\u8005_from\u8f6c\u7ed9_to\r\n    function _transferFrom(address _from, address _to, uint256 _tokenId) internal virtual {    \r\n        //\u5224\u65adtokenId\u7684\u5f53\u524d\u6240\u6709\u8005\u662f\u5426\u4e3a_from\r\n        require(_ownerOf(_tokenId) == _from, \"\u5f53\u524d\u6240\u6709\u8005\u4e0d\u662f\u8f6c\u8d26\u6240\u6709\u8005\");\r\n        //\u5224\u65ad\u63a5\u6536\u8005\u5730\u5740\u4e3a\u4e0d\u96f6\u5730\u5740\r\n        require(address(0) != _to, \"\u63a5\u6536\u8005\u5730\u5740\u4e0d\u80fd\u4e3a\u96f6\u5730\u5740\");  \r\n        //\u5224\u65ad\u7528\u6237\u662f\u5426\u6709\u6743\u8f6c\u79fbtoken\r\n        require(_isApprovedOrOwner(msg.sender, _tokenId), \"\u7528\u6237\u65e0\u6743\u8f6c\u79fbtoken\");\r\n \r\n        //\u6e05\u9664tokenId\u7684\u6388\u6743\u8005\r\n        _approve(address(0), _tokenId);\r\n \r\n        //\u539f\u6240\u6709\u8005\u62e5\u6709\u7684token\u6570\u91cf\u51cf\u4e00\r\n        _ownerTokensCount[_from] = _ownerTokensCount[_from].sub(1);\r\n \r\n        //\u65b0\u63a5\u6536\u8005\u62e5\u6709\u7684token\u6570\u91cf\u52a0\u4e00\r\n        _ownerTokensCount[_to] = _ownerTokensCount[_to].add(1);\r\n \r\n        //\u8bb0\u5f55token\u6240\u6709\u8005\u4e3a\u65b0\u63a5\u6536\u8005\r\n        _tokenOwner[_tokenId] = _to; \r\n\r\n        //\u8fd9\u91cc\u9650\u5236\u8d26\u6237\u6700\u591a\u4e3a2\u4e2a\r\n        require(_ownerTokensCount[_to]<2,\"Account holdings exceed\");\r\n\r\n        \r\n \r\n        //\u8c03\u7528\u4e8b\u4ef6\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n \r\n    //\u5224\u65adtokenId\u662f\u5426\u5b58\u5728\uff0c\u82e5\u83b7\u53d6\u4e0d\u5230\u7528\u6237\u7684\u6240\u6709\u8005\uff0c\u5219\u89c6\u4e3a\u4e0d\u5b58\u5728\r\n    function _isExistTokenId(uint256 _tokenId) internal view returns (bool) {\r\n       //\u67e5\u8be2\u51fatokenId\u7684\u6240\u6709\u8005\r\n        address owner = _tokenOwner[_tokenId];\r\n        if (address(0) != owner) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n \r\n    //\u5224\u65ad\u8f6c\u8d26\u65b9\u662f\u5426\u6709\u6743\u8f6c\u51fatoken\r\n    function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n        //\u5224\u65adtokenId\u7684\u6240\u6709\u8005\u662f\u5426\u5b58\u5728\r\n        require(_isExistTokenId(_tokenId), \"tokenId\u4e0d\u5b58\u5728\");\r\n        //\u67e5\u8be2\u51fatokenId\u7684\u6240\u6709\u8005\r\n        address _owner = _ownerOf(_tokenId);\r\n        //\u6240\u6709\u8005\u53ef\u80fd\u662f\u8c03\u7528\u5408\u7ea6\u7684\u5730\u5740spender\uff0c\u53ef\u80fd\u662ftokenId\u88ab\u6388\u6743\u7684\u5730\u5740spender\uff0c\u8fd8\u6709\u53ef\u80fd\u662f\u6240\u6709\u8005\u7684token\u90fd\u88ab\u6388\u6743\u7ed9\u5730\u5740spender\r\n        return (_owner == _spender || _getApproved(_tokenId) == _spender || _isApprovedForAll(_owner, _spender));\r\n    }\r\n \r\n    //\u5224\u65ad\u662f\u5426\u4e3a\u5408\u7ea6\u5730\u5740\r\n    function _isContract(address addr) internal view returns (bool) {\r\n        uint256 _size;\r\n \r\n        //\u82e5\u4e3a\u5916\u90e8\u8d26\u6237_size = 0\uff0c\u82e5\u4e3a\u5408\u7ea6\u8d26\u6237 _size > 0\r\n        assembly { _size := extcodesize(addr) }\r\n        return _size > 0;\r\n    }\r\n \r\n    //\u6821\u9a8c\u63a5\u6536\u5730\u5740\u662f\u5426\u6709\u6548\r\n    function _checkOnERC721Received(address _from, address _to, uint256 _tokenId, bytes memory _data) private returns (bool) {\r\n        //\u5224\u65ad\u662f\u5426\u4e3a\u5408\u7ea6\u5730\u5740\uff0c\u82e5\u4e3a\u5916\u90e8\u8d26\u6237\u76f4\u63a5\u8fd4\u56detrue\uff0c\u82e5\u4e3a\u5408\u7ea6\u8d26\u6237\u5219\u6821\u9a8c\u662f\u5426\u5b9e\u73b0\u4e86ERC721Receiver\u63a5\u56d7\u65b9\u6cd5\r\n        if (!_isContract(_to)) { //\u5916\u90e8\u8d26\u6237\r\n            return true;\r\n        }\r\n \r\n        //\u5408\u7ea6\u8d26\u6237\uff1a\u6821\u9a8c\u662f\u5426\u5b9e\u73b0\u4e86IERC721Receiver\u63a5\u56d7\u65b9\u6cd5\uff0c\u53ea\u6709\u5b9e\u73b0\u4e86IERC721Receiver\u63a5\u56d7\uff0c\u624d\u80fd\u63a5\u6536ERC-721\u6807\u51c6\u7684token\r\n        (bool success, bytes memory returndata) = _to.call(abi.encodeWithSelector(\r\n            IERC721TokenReceiver(_to).onERC721Received.selector,\r\n            msg.sender,\r\n            _from,\r\n            _tokenId,\r\n            _data\r\n        ));\r\n \r\n        //\u5224\u65ad\u8fd4\u56de\u7ed3\u679c\r\n        if (!success) {\r\n            revert(\"\u5408\u7ea6\u5730\u5740\u672a\u5b9e\u73b0IERC721TokenReceiver\u63a5\u56d7\");\r\n        } else {\r\n            bytes4 retval = abi.decode(returndata, (bytes4));\r\n            return (retval == _ERC721_RECEIVED);\r\n        }\r\n    }\r\n \r\n    // \u5b89\u5168\u8f6c\u79fbtoken - \u516c\u7528\u5185\u90e8\u51fd\u6570\r\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) internal virtual {\r\n        _transferFrom(_from, _to, _tokenId);\r\n        require(_checkOnERC721Received(_from, _to, _tokenId, _data), \"\u5408\u7ea6\u5730\u5740\u672a\u5b9e\u73b0IERC721TokenReceiver\u63a5\u56d7!\");\r\n    }\r\n \r\n    /// \u5b89\u88c5\u8f6c\u79fbtoken\uff0c\u5305\u542bdata\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external override payable {\r\n        _safeTransferFrom(_from, _to, _tokenId, data);\r\n    }\r\n \r\n    /// \u5b89\u88c5\u8f6c\u79fbtoken\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external override payable {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n \r\n    /// \u8f6c\u79fbtoken\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external override payable {\r\n        //\u8f6c\u79fbtoken\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n \r\n    /// \u6388\u6743token\r\n    function _approve(address _approved, uint256 _tokenId)  internal  {\r\n        require(_approved != msg.sender, \"\u4e0d\u80fd\u6388\u6743\u7ed9\u81ea\u5df1\");\r\n        _tokenApproval[_tokenId] = _approved;\r\n    }\r\n \r\n    /// \u6388\u6743token\r\n    function approve(address _approved, uint256 _tokenId) ownerIsNotZeroAddress(_approved) external override payable {\r\n        _approve(_approved, _tokenId);\r\n    }\r\n \r\n    /// \u5168\u90e8\u6388\u6743\r\n    function setApprovalForAll(address _operator, bool _approved) external override {\r\n        require(_operator != msg.sender, \"\u4e0d\u80fd\u6388\u6743\u7ed9\u81ea\u5df1\");\r\n        //\u4fee\u6539\u72b6\u6001\u53d8\u91cf - \u5168\u90e8\u6388\u6743\r\n        _operatorApprovals[msg.sender][_operator] = _approved;\r\n \r\n        //\u4e8b\u4ef6\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n \r\n    \r\n    /// \u83b7\u53d6tokenId\u7684\u88ab\u6388\u6743\u8005\r\n    function _getApproved(uint256 _tokenId) internal view returns (address) {\r\n        //\u5224\u65adtokenId\u7684\u6240\u6709\u8005\u662f\u5426\u5b58\u5728\r\n        require(_isExistTokenId(_tokenId), \"tokenId\u4e0d\u5b58\u5728\");\r\n        return _tokenApproval[_tokenId];\r\n    }\r\n \r\n    /// \u83b7\u53d6tokenId\u7684\u88ab\u6388\u6743\u8005\r\n    function getApproved(uint256 _tokenId) external override view returns (address) {\r\n        return _getApproved(_tokenId);\r\n    }\r\n \r\n    /// \u662f\u5426\u5168\u90e8\u6388\u6743\uff0c\u5373_owner\u5c06\u81ea\u5df1\u6240\u6709\u7684tokenId\u5168\u90e8\u6388\u6743\u7ed9_operator\r\n    function _isApprovedForAll(address _owner, address _operator) internal view returns (bool) {\r\n        return _operatorApprovals[_owner][_operator];\r\n    }\r\n \r\n    /// \u662f\u5426\u5168\u90e8\u6388\u6743\uff0c\u5373_owner\u5c06\u81ea\u5df1\u6240\u6709\u7684tokenId\u5168\u90e8\u6388\u6743\u7ed9_operator\r\n    function isApprovedForAll(address _owner, address _operator) external override view returns (bool) {\r\n        return _isApprovedForAll(_owner, _operator);\r\n    }\r\n \r\n    //\u751f\u6210tokenId - \u516c\u7528\u51fd\u6570\r\n    function _mint(address _to, uint256 _tokenId)  internal virtual {\r\n        require(!_isExistTokenId(_tokenId), \"token\u5df2\u5b58\u5728\");\r\n   \r\n        //\u8bbe\u7f6etoken\u7684\u6240\u6709\u8005\r\n        _tokenOwner[_tokenId] = _to;\r\n\r\n       \r\n \r\n        //\u6240\u6709\u8005\u62e5\u6709\u7684token\u6570\u91cf\u7d2f\u52a0\r\n        _ownerTokensCount[_to] = _ownerTokensCount[_to].add(1);\r\n        //\u8fd9\u91cc\u9650\u5236\u8d26\u6237\u6700\u591a\u4e3a2\u4e2a\r\n        //require(_ownerTokensCount[_to]<2,\"Account holdings exceed\");\r\n \r\n        //\u4e8b\u4ef6\r\n        emit Transfer(address(0), _to, _tokenId);\r\n    }\r\n \r\n\r\n    \r\n    // \u751f\u6210tokenId - \uff08\u5b89\u5168\uff09\r\n    function safeMint(address _to, uint256 _tokenId, bytes calldata _data) ownerIsNotZeroAddress(_to) external {\r\n        require(false, \"no no no\");\r\n        require(_checkOnERC721Received(address(0), _to, _tokenId, _data), \"\u5408\u7ea6\u5730\u5740\u6ca1\u6709\u5b9e\u73b0ERC721Received\u63a5\u56d7\");\r\n    }\r\n   \r\n\r\n    \r\n\r\n   \r\n \r\n}\r\n\r\n\r\n// File: contracts/ERC721/DK721.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IDK721 {\r\n   //\u901a\u8fc7\u94b1\u5305\u548c\u7d22\u5f15\r\n   function tokenOfOwnerByIndex(address owner, uint256 index) external  view returns (uint256) ;\r\n   function totalSupply() external  view returns (uint256);//token\u603b\u91cf\r\n   function tokenByIndex(uint256 index) external  view returns (uint256);//\u901a\u8fc7NFT\u5168\u5c40\u7d22\u5f15\u83b7\u5f97ID\r\n}\r\n\r\ncontract DK721 is ERC721 {\r\n  // \u8fd4\u56de\u5730\u5740\u6240\u62e5\u6709\u7684\u4ee4\u724c\u6570\u7ec4\r\n    mapping(address => uint256[]) private _ownedTokens;\r\n\r\n    //\u4ece\u4ee4\u724c\u7d22\u5f15=>\u5177\u4f53\u4ee4\u724c _ownedTokensIndex[tokenID]=>\u7d22\u5f15 \u8bb0\u5f55\u8be5tokenid\u5728\u5730\u5740\u6620\u5c04\u6570\u7ec4\u5bf9\u5e94\u7684\u7d22\u5f15\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // \u5305\u542b\u6240\u6709\u4ee4\u724c ID \u7684\u6570\u7ec4\uff0c\u7528\u4e8e\u679a\u4e3e\r\n    uint256[] private _allTokens;//\r\n\r\n    // \u4ece\u4ee4\u724c id \u6620\u5c04\u5230 allTokens \u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;//\u5c06\u63a5\u53e3\u65b9\u6cd5\u7684ABI\u4f20\u5165_registerInterface\u4e2d\r\n\r\n    /**\r\n     * @dev Constructor function.\r\n     */\r\n    constructor () public {\r\n        // register the supported interface to conform to ERC721Enumerable via ERC165\r\n        registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n    //\u901a\u8fc7\u5730\u5740\u548c\u7d22\u5f15\u83b7\u5f97\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external  view returns (uint256) {\r\n        require(index < balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");//\u7d22\u5f15\u503c\u5c0f\u4e8e\u5f53\u524d\u6240\u6709\u8005\u7528\u7684\u4ee4\u724c\u6570\u91cf\r\n        return _ownedTokens[owner][index];\r\n    }\r\n     /**\r\n     * @dev \u83b7\u5f97\u4ee4\u724c\u603b\u6570\r\n     * @return uint256 representing the total amount of tokens\r\n     */\r\n    function totalSupply() public   view returns (uint256) {\r\n        return _allTokens.length;//\u8fd4\u56de\u6570\u7ec4\u957f\u5ea6\u5373\u4e3a \u4ee4\u724c\u603b\u6570\r\n    }\r\n    /**\r\n     \u529f\u80fd\uff1a\u6839\u636e\u7d22\u5f15\u83b7\u5f97\u5177\u4f53\u4ee4\u724cID\r\n     */\r\n    function tokenByIndex(uint256 index) external  view returns (uint256) {\r\n        require(index < _allTokens.length, \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal override  {\r\n        super._transferFrom(from, to, tokenId);//\u8c03\u7528\u7236\u65b9\u6cd5\u7684_transferFrom\u65b9\u6cd5\r\n\r\n        _removeTokenFromOwnerEnumeration(from, tokenId);//\u8f6c\u79fbfrom\u7684\u4ee4\u724c\u51fa\u53bb\u9700_ownedTokens[address].lengt-1\u5e76\u4e14\u5bf9\r\n        _addTokenToOwnerEnumeration(to, tokenId);//\u7ed9\u63a5\u6536token\u7684\u5730\u5740\u5730\u5740.push(\u4ee4\u724c),\u5e76\u4e14\u5c06\u8ddf\u65b0\u4ee4\u724cID\u5728\u65b0\u5730\u5740\u7684\u6240\u6709\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n     \r\n        uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);   // \u4e3a\u9632\u6b62\u6570\u7ec4\u51fa\u73b0\u7a7a\u767d\uff0c\u9700\u5c06from\u7684\u6570\u7ec4\u51cf1\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];//\u83b7\u5f97\u8981\u8f6c\u79fb\u4ee4\u724cID\u7684\u7d22\u5f15\u503c\r\n\r\n        //\u51fd\u6570\u529f\u80fd\u5373\u4e3a[1.2.3.4.5]\u5982\u679c\u4e0d\u662f\u8f6c\u79fb\u6570\u7ec4\u4e2d\u6700\u540e\u4e00\u4e2atoken\uff0c\u5219\u9700\u8981\u5c06\u8f6c\u540e\u4e00\u4e2atoken\u8f6c\u79fb\u5230\u4e4b\u524d\u5220\u9664\u7684\r\n        //\u4f8b\u5b50\uff1a\u8f6c\u79fb2\u51fa\u53bb\uff0c\u9700\u8981\u83b7\u5f97\u6700\u540e\u4e00\u4e2a\u4ee4\u724cID\uff0c\u5c065\u8f6c\u52302\u4f4d\u7f6e\r\n        // \u5f53\u8981\u5220\u9664\u7684token\u662f\u6700\u540e\u4e00\u4e2atoken\u65f6\uff0c\u4e0d\u9700\u8981swap\u64cd\u4f5c\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];//\u83b7\u5f97\u5220\u9664\u7684\u5730\u5740\u4e2d\u6700\u540e\u4e00\u4e2a\u7684\u4ee4\u724cID\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; //\u5c06\u6700\u540e\u4e00\u4e2a\u4ee4\u724c\u7d22\u5f15\u5230\u8f6c\u79fb\u8d70\u7684\u4ee4\u724c\u7d22\u5f15\u4e0a\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; //\u66f4\u65b0\u79fb\u52a8\u4ee4\u724c\u7684\u7d22\u5f15\r\n        }\r\n\r\n        //\u8fd9\u4e5f\u5220\u9664\u4e86\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5185\u5bb9\r\n        _ownedTokens[from].pop();\r\n\r\n       \r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        _ownedTokensIndex[tokenId] = _ownedTokens[to].length;//\r\n        _ownedTokens[to].push(tokenId);\r\n    }\r\n\r\n    function _mint(address to, uint256 tokenId) internal  override {\r\n        super._mint(to, tokenId);\r\n\r\n        _addTokenToOwnerEnumeration(to, tokenId);\r\n\r\n        _addTokenToAllTokensEnumeration(tokenId);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev   \u7ed9\u5168\u5c40\u6570\u7ec4\u6dfb\u52a0\u65b0\u7684\u4ee4\u724cID\uff0c\u5e76\u628a\u4ee4\u724cID\u5728\u5168\u5c40\u6570\u7ec4\u4e2d\u7684\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n\r\n}\r\n// File: contracts/ERC721/DK_Token721.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ninterface IDK {\r\n     //\u8fd9\u4e2a\u662f500\u7684\u6c60\u5b50\r\n    function OneMint()external;\r\n    //\u8fd9\u662f\u5b581000\u7684\r\n    function TwoMint()external;\r\n    //\u53d6\u51fa\u5956\u52b1\r\n    function withdrawRewards(uint256 _tokenId)external;\r\n    //\u67e5\u770b\u7d2f\u79ef\u5956\u52b1\u6570\u91cf\u548c\u5956\u52b1\u5929\u6570\r\n     function getAwardQuantity(uint256 _tokenId)external   view   returns(uint256,uint256);\r\n    //\u67e5\u770b\u5f53\u524d\u5956\u52b1\u5269\u4f59\u5929\u6570\u548c\u6bcf\u65e5\u5956\u52b1\u6570\u91cf\r\n    function getDaysQuantity(uint256 _tokenId)external view   returns (uint256,uint256);\r\n    //\u8f93\u5165\u786e\u5b9a\u6570\u91cfusdt \u83b7\u53d6\u6240\u9700\u7684dk\u6570\u91cf\r\n    function returnOutput(uint256 _number)external  view  returns(uint256);\r\n    //\u5f80\u6c60\u5b50\u51b2\u5956\u52b1 \r\n    function addAward(uint256 _totalReward)external returns(uint256);\r\n    //\u8fd4\u56de\u6c60\u5b50\u76841\u603b\u5956\u52b1\u548c 2\u9700\u53d1\u653e\u5956\u52b1(\u5305\u542b\u672a\u53d1\u653e\u7684\u5956\u52b1)\u548c 3\u6c60\u5b50\u5269\u4f59\u5956\u52b1\r\n    function getAward()external view  returns(uint256,uint256,uint256);\r\n}\r\n\r\ncontract DK is DK721,getQuantity{\r\n\r\n      //\u63a5\u6536\u672c\u5e01\u7684\u5730\u5740\r\n    address private takeOver=0x8A2A6Ca57E485a0252a99353f8b91fc49a9EE026;\r\n\r\n    //\u4f7f\u7528\u5e93\u4f5c\u7528\u4e8euint256\u7c7b\u578b\r\n    using SafeMath for uint256;\r\n\r\n    //\u4e00\u5929 \u65f6\u95f4\u6233\r\n    uint256 day=60;\r\n    \r\n    //\u5956\u52b1\u7ed3\u6784\u4f53\r\n    struct awardStruct {\r\n        //\u5b58\u5165\u65f6\u95f4\r\n        uint256 depositTime;\r\n        //\u5956\u52b1\u7b49\u7ea7\r\n        uint256 grade;\r\n        //\u7d2f\u79ef\u5956\u52b1\r\n        uint256 WithdrawAmount;\r\n    }\r\n\r\n    mapping (uint256 =>awardStruct) awardStructs;\r\n\r\n    //500u mint\u7684\u6c60\u5b50\u662f\u5426mint\u8fc7\r\n    mapping (address=>bool) private  OneWhether;\r\n\r\n\r\n    //1000u mint\u7684\u6c60\u5b50\u662f\u5426mint\u8fc7\r\n    mapping (address=>bool) private  TwoWhether;\r\n\r\n    //\u8bb0\u5f55mint\u6b21\u6570 \u5e76\u4e14\u7b49\u540c\u6bcf\u6b21mint\u7684 nft id\r\n    uint256 internal statisticsTokenId; \r\n    \r\n    //\u8bb0\u5f55\u5145\u503c\u8fdb\u6765\u7684\u603b\u5956\u52b1\u989d\r\n    uint256 totalReward;\r\n\r\n    //\u8bb0\u5f55\u9700\u8981\u53d1\u653e\u7684\u603b\u5956\u52b1\r\n    uint256 private   distributeRewards;\r\n\r\n    \r\n    //\u7ba1\u7406\u5219\u5730\u5740 \r\n    address  payable   manager=0x8A2A6Ca57E485a0252a99353f8b91fc49a9EE026;\r\n    \r\n    //\u6821\u884d\u8c03\u7528\u4eba\u662f\u4e0d\u662f\u7ba1\u7406\u8005\r\n    modifier onlyOwnerOf() {\r\n      require(manager == msg.sender);\r\n     _;\r\n    }\r\n    //500u\u7684\u6c60\u5b50\u6821\u9a8c\u662f\u5426\u5df2\u5b58\u5165\r\n    modifier Onerepeat(){\r\n        require(OneWhether[msg.sender]==false,\"repeat\");\r\n        _;\r\n    }\r\n\r\n    //500u\u7684\u6c60\u5b50\u6821\u9a8c\u662f\u5426\u5df2\u5b58\u5165\r\n    modifier Tworepeat(){\r\n        require(TwoWhether[msg.sender]==false,\"repeat\");\r\n        _;\r\n    }\r\n    //\u662f\u5426\u53ef\u4ee5\r\n    modifier adequate(){\r\n        _;\r\n        (,,uint256 award)=_getAward();\r\n        require(award>0,\"Rewarding underfertility\");\r\n    }\r\n   \r\n\r\n   \r\n     //\u8fd9\u4e2a\u662f500\u7684\u6c60\u5b50\r\n     // repeat\u68c0\u9a8c\u5730\u5740\u662f\u5426Mint\u8fc7 \r\n    function OneMint()external Onerepeat adequate{\r\n       \r\n        \r\n      \r\n        //\u751f\u6210token\r\n        super._mint(msg.sender,statisticsTokenId);\r\n\r\n        //\u518d\u4ece\u67d0\u5730\u5740\u8f6c\u4ef7\u503c500U\u7684DK \u5230takeOver\u5730\u5740_returnOutput\r\n        DK.transferFrom(msg.sender, takeOver, _returnOutput(1e18));\r\n    \r\n        awardStruct storage _awardStruct=awardStructs[statisticsTokenId];\r\n        //\u8ba1\u5165\u5b58\u5165\u65f6\u95f4\r\n        _awardStruct.depositTime=block.timestamp;\r\n        //\u8ba1\u5165\u767b\u8bb0\r\n        _awardStruct.grade=18.4e16;\r\n        //\u7d2f\u79ef\u5956\u52b1\u4e3a\u7a7a\r\n        _awardStruct.WithdrawAmount=30;\r\n        \r\n        statisticsTokenId++;\r\n   \r\n        //mint\u5b8c\u5c31\u786e\u5b9a\u9700\u53d1\u653e\u591a\u5c11\u5956\u52b1\r\n        distributeRewards=distributeRewards.add(_awardStruct.grade.mul(_awardStruct.WithdrawAmount));\r\n        \r\n\r\n        //\u5145\u503cmint\u8fc7\u4e86\r\n        OneWhether[msg.sender]=true;\r\n    \r\n    }\r\n\r\n    //\u8fd9\u662f\u5b581000\u7684\r\n    function TwoMint()external Tworepeat adequate {\r\n        //\u68c0\u9a8c\u5730\u5740\u662f\u5426Mint\u8fc7\r\n      \r\n        //\u751f\u6210token\r\n        super._mint(msg.sender,statisticsTokenId);\r\n\r\n        //\u518d\u4ece\u67d0\u5730\u5740\u8f6c\u4ef7\u503c500U\u7684DK \u5230takeOver\u5730\u5740\r\n        DK.transferFrom(msg.sender, takeOver, _returnOutput(2e18));\r\n        //\r\n        awardStruct storage _awardStruct=awardStructs[statisticsTokenId];\r\n        //\u8ba1\u5165\u5b58\u5165\u65f6\u95f4\r\n        _awardStruct.depositTime=block.timestamp;\r\n        //\u8ba1\u5165\u767b\u8bb0\r\n        _awardStruct.grade=36.8e16;\r\n        //\u7d2f\u79ef\u5956\u52b1\u4e3a\u7a7a\r\n        _awardStruct.WithdrawAmount=60;\r\n\r\n        statisticsTokenId++;\r\n\r\n        //mint\u5b8c\u5c31\u786e\u5b9a\u7d2f\u79ef\u53d1\u653e\u591a\u5c11\u5956\u52b1\r\n        distributeRewards=distributeRewards.add(_awardStruct.grade.mul(_awardStruct.WithdrawAmount));\r\n\r\n         //\u5145\u503cmint\u8fc7\u4e86\r\n        TwoWhether[msg.sender]=true;\r\n         \r\n    }\r\n\r\n    //\u53d6\u51fa\u5956\u52b1\r\n    function withdrawRewards(uint256 _tokenId)external  {\r\n        require(_ownerOf(_tokenId)==msg.sender,\"Not me\");\r\n        awardStruct storage _awardStruct=awardStructs[_tokenId];\r\n        //\u5148\u5224\u65ad\u5956\u52b1\u5269\u4f59\u5929\u6570\u662f\u5426\u5927\u4e8e0\r\n        require(_awardStruct.WithdrawAmount>0,\"The reward is empty\");\r\n        //\u83b7\u53d6\u4e00\u4e0b\u7d2f\u79ef\u5956\u52b1\u7684\u5929\u6570\r\n        (uint grandTotal,uint256 BonusDays)=_getAwardQuantity(_tokenId);\r\n        require(BonusDays>0,\"Not enough accumulated reward days\");\r\n        \r\n        //\u53d1\u653e\u5956\u52b1\r\n        Bsc_USD.transfer(msg.sender, grandTotal);\r\n        \r\n        //\u66f4\u65b0\u5269\u4f59\u5956\u52b1\u5929\u6570\r\n        _awardStruct.depositTime=block.timestamp;\r\n        //\u66f4\u65b0\u5269\u4f59\u5956\u52b1\u5929\u6570\r\n        _awardStruct.WithdrawAmount=_awardStruct.WithdrawAmount.sub(BonusDays);\r\n    }\r\n\r\n    \r\n    //\u67e5\u770b\u7d2f\u79ef\u5956\u52b1\u6570\u91cf\u548c\u5956\u52b1\u5929\u6570\u7684\u5916\u90e8\u65b9\u6cd5\r\n    function getAwardQuantity(uint256 _tokenId)external   view   returns(uint256,uint256){\r\n        \r\n          return _getAwardQuantity(_tokenId);\r\n    }\r\n    //\u67e5\u770b\u7d2f\u79ef\u5956\u52b1\u6570\u91cf\u548c\u5929\u6570\u7684\u5185\u90e8\u65b9\u6cd5\r\n    function _getAwardQuantity(uint256 _tokenId)internal    view   returns(uint256,uint256){\r\n        awardStruct memory _awardStruct=awardStructs[_tokenId];\r\n        uint256  BonusDays=block.timestamp.sub(_awardStruct.depositTime).div(day);\r\n        if(BonusDays>_awardStruct.WithdrawAmount){\r\n          return (_awardStruct.WithdrawAmount.mul(_awardStruct.grade),_awardStruct.WithdrawAmount);\r\n        }else {\r\n          return (_awardStruct.grade.mul(BonusDays),BonusDays);\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    //\u67e5\u770b\u5f53\u524d\u5956\u52b1\u5269\u4f59\u5929\u6570\u548c\u6bcf\u65e5\u5956\u52b1\u6570\u91cf\r\n    function getDaysQuantity(uint256 _tokenId)external view   returns (uint256,uint256){\r\n        awardStruct memory _awardStruct=awardStructs[_tokenId];\r\n        return (_awardStruct.WithdrawAmount,_awardStruct.grade);\r\n    }\r\n\r\n\r\n    \r\n    //\u8f93\u5165\u786e\u5b9a\u6570\u91cfusdt \u83b7\u53d6\u6240\u9700\u7684dk\u6570\u91cf\r\n    function returnOutput(uint256 _number)external  view  returns(uint256){\r\n        return _returnOutput(_number);\r\n    }\r\n\r\n\r\n    //\u5f80\u6c60\u5b50\u51b2\u5956\u52b1 \r\n    function addAward(uint256 _totalReward)external returns(uint256){\r\n            //\u5145\u503cusdt\u5230\u5f53\u524d\u5408\u7ea6\u5730\u5740\r\n            Bsc_USD.transferFrom(msg.sender, address(this), _totalReward);\r\n            totalReward=totalReward.add(_totalReward);\r\n            return totalReward;\r\n    }\r\n    //\u8fd4\u56de\u6c60\u5b50\u76841\u603b\u5956\u52b1\u548c 2\u9700\u53d1\u653e\u5956\u52b1(\u5305\u542b\u672a\u53d1\u653e\u7684\u5956\u52b1)\u548c 3\u6c60\u5b50\u5269\u4f59\u5956\u52b1\r\n    function getAward()external view  returns(uint256,uint256,uint256){\r\n            return  _getAward();\r\n            \r\n    }\r\n    function _getAward()internal  view  returns(uint256,uint256,uint256){\r\n            \r\n          return (totalReward,distributeRewards,totalReward.sub(distributeRewards));\r\n    }\r\n\r\n     //\u53d6\u51fa\u6c60\u5b50\u4efb\u610ftoken\r\n    function takeOutToken(address _token)external   {\r\n        IERC20 token=IERC20(_token);\r\n        uint256 quantity=token.balanceOf(address(this));\r\n        token.transfer(manager, quantity);\r\n      \r\n    }\r\n\r\n    //\r\n\r\n\r\n\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OneMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TwoMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"name\":\"addAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getAwardQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDaysQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"registerInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"returnOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"takeOutToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DK", "CompilerVersion": "v0.6.1+commit.e6f7d5a4", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ed43116f5dcd0c5ab778ecd46c7195a074bdc8df975da7cf0437c5688419a609"}