{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n//**********************\r\n// LIBRARIES\r\n//**********************/\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//**********************\r\n// OWNER\r\n//**********************\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n//**********************\r\n// ABSTRACT\r\n//**********************\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.14;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n//**********************\r\n// INTERFACES\r\n//**********************/\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface ISwapper {\r\n    function buy(address recipient) external payable;\r\n    function sell(address recipient) external;\r\n}\r\n\r\n//**********************\r\n// TOKEN CONTRACT\r\n//**********************\u00a0\r\n\r\ncontract LUCAX is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // total supply\r\n    uint256 private _totalSupply;\r\n\r\n    // token data\r\n    string private constant _name = \"LUCAX\";\r\n    string private constant _symbol = \"LUCAX\";\r\n    uint8  private constant _decimals = 18;\r\n\r\n    // balances\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // PCS Router\r\n    IUniswapV2Router02 private router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public uniswapV2Pair;\r\n\r\n    // Taxation on transfers\r\n    uint256 public buyFee             = 300;\r\n    uint256 public sellFee            = 300;\r\n    uint256 public transferFee        = 500;\r\n    uint256 public constant TAX_DENOM = 10000;\r\n\r\n    // Max Transaction Limit\r\n    uint256 public max_sell_transaction_limit;\r\n    uint256 public MAX_WALLET;\r\n\r\n    // Token Activation\r\n    mapping ( address => bool ) public canTransactPreLaunch;\r\n    bool public tokenActivated;\r\n\r\n    // permissions\r\n    struct Permissions {\r\n        bool isFeeExempt;\r\n        bool isLiquidityPool;\r\n        bool isBlacklisted;\r\n        bool isMaxWalletExempt;\r\n        bool isMaxSellExempt;\r\n    }\r\n    mapping ( address => Permissions ) public permissions;\r\n\r\n    // Fee Recipients\r\n    address public sellFeeRecipient;\r\n    address public buyFeeRecipient;\r\n    address public transferFeeRecipient;\r\n\r\n    // Swapper\r\n    address public LUCAXSwapper;\r\n\r\n    // events\r\n    event TokenActivated(uint blockNo);\r\n    event SetBuyFeeRecipient(address recipient);\r\n    event SetSellFeeRecipient(address recipient);\r\n    event SetLUCAXSwapper(address newSwapper);\r\n    event SetTransferFeeRecipient(address recipient);\r\n    event SetBlacklist(address addr, bool isBlacklisted);\r\n    event SetFeeExemption(address account, bool isFeeExempt);\r\n    event SetAutomatedMarketMaker(address account, bool isMarketMaker);\r\n    event SetFees(uint256 buyFee, uint256 sellFee, uint256 transferFee);\r\n\r\n   constructor(address _uniswapV2Router) {\r\n\r\n        //Creation of a uniswap pair for this token for mainnet/testnet\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);   //Mainnet\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);   //Testnet\r\n\r\n        //DEX router and pair setup\r\n        router = IUniswapV2Router02(_uniswapV2Router);\r\n        uniswapV2Pair =  IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        // set initial starting supply\r\n        _totalSupply = 1000000000000 * 10 ** 18;\r\n\r\n        // set max wallet size\r\n        MAX_WALLET = _totalSupply;\r\n\r\n        // max transaction\r\n        max_sell_transaction_limit = _totalSupply;\r\n\r\n        // exempt sender for tax-free initial distribution\r\n        permissions[msg.sender].isFeeExempt = true;\r\n        permissions[address(router)].isFeeExempt = true;\r\n        permissions[address(this)].isFeeExempt = true;\r\n        permissions[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE].isFeeExempt = true;\r\n\r\n        permissions[msg.sender].isMaxWalletExempt = true;\r\n        permissions[address(router)].isMaxWalletExempt = true;\r\n        permissions[address(this)].isMaxWalletExempt = true;\r\n        permissions[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE].isMaxWalletExempt = true;\r\n        permissions[address(uniswapV2Pair)].isMaxWalletExempt = true;\r\n\r\n        permissions[msg.sender].isMaxSellExempt = true;\r\n        permissions[address(router)].isMaxSellExempt = true;\r\n        permissions[address(this)].isMaxSellExempt = true;\r\n        permissions[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE].isMaxSellExempt = true;\r\n        permissions[address(uniswapV2Pair)].isMaxSellExempt = true;\r\n\r\n       // Allows Addresses To Transact Before Token Goes Live\r\n        canTransactPreLaunch[msg.sender] = true;\r\n        canTransactPreLaunch[address(this)] = true;\r\n        canTransactPreLaunch[address(uniswapV2Pair)] = true;\r\n        canTransactPreLaunch[address(router)] = true;\r\n        canTransactPreLaunch[0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE] = true;\r\n\r\n        // initial supply allocation\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n    function name() public pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /////////////////////////////////\r\n    /////   PUBLIC FUNCTIONS    /////\r\n    /////////////////////////////////\r\n\r\n    /** Transfer Function */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        if (recipient == msg.sender) {\r\n            return _sell(msg.sender, amount);\r\n        } else {\r\n            return _transferFrom(msg.sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    /** Transfer Function */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(\r\n            _allowances[sender][msg.sender] >= amount,\r\n            'Insufficient Allowance'\r\n        );\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n\r\n    function sell(uint256 amount) external returns (bool) {\r\n        return _sell(msg.sender, amount);\r\n    }\r\n\r\n    function buy(address recipient) external payable {\r\n        ISwapper(LUCAXSwapper).buy{value: msg.value}(recipient);\r\n    }\r\n\r\n    function burn(uint256 amount) external returns (bool) {\r\n        return _burn(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) external returns (bool) {\r\n        require(\r\n            _allowances[account][msg.sender] >= amount,\r\n            'Insufficient Allowance'\r\n        );\r\n        _allowances[account][msg.sender] = _allowances[account][msg.sender] - amount;\r\n        return _burn(account, amount);\r\n    }\r\n\r\n    //////////////////////////////////\r\n    /////   INTERNAL FUNCTIONS   /////\r\n    //////////////////////////////////\r\n    \r\n    /** Internal Transfer */\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(\r\n            recipient != address(0),\r\n            'Zero Recipient'       \r\n        );\r\n        require(\r\n            tokenActivated || canTransactPreLaunch[msg.sender],\r\n            'Token Not Activated'\r\n        );\r\n\r\n        require(\r\n            recipient != address(this),\r\n            'Cannot Send To LUCAX It self'\r\n        );\r\n        require(\r\n            amount > 0,\r\n            'Zero Amount'\r\n        );\r\n        require(\r\n            amount <= _balances[sender],\r\n            'Insufficient Balance'\r\n        );\r\n        require(\r\n            !permissions[sender].isBlacklisted &&\r\n            !permissions[recipient].isBlacklisted,\r\n            'Blacklisted Address'\r\n        );\r\n        \r\n        // decrement sender balance\r\n        _balances[sender] = _balances[sender] - amount;\r\n    \r\n        // fee for transaction\r\n        (uint256 fee, address feeDestination) = getTax(sender, recipient, amount);\r\n\r\n        // allocate fee\r\n        if (fee > 0) {\r\n            address feeRecipient = feeDestination == address(0) ? address(this) : feeDestination;\r\n            if (feeRecipient == sellFeeRecipient && !permissions[sender].isMaxSellExempt) {\r\n                require(\r\n                    amount <= max_sell_transaction_limit,\r\n                    'Amount Exceeds Max Transaction Limit'\r\n                );\r\n            }\r\n            _balances[feeRecipient] += fee;\r\n            emit Transfer(sender, feeRecipient, fee);\r\n        }\r\n\r\n        // give amount to recipient\r\n        uint256 sendAmount = amount - fee;\r\n        _balances[recipient] = _balances[recipient] + sendAmount;\r\n\r\n        // ensure max wallet is protected\r\n        if (!permissions[recipient].isMaxWalletExempt) {\r\n            require(\r\n                _balances[recipient] <= MAX_WALLET,\r\n                'Balance Exceeds Max Wallet Size'\r\n            );\r\n        }\r\n\r\n        // emit transfer\r\n        emit Transfer(sender, recipient, sendAmount);\r\n        return true;\r\n    }\r\n\r\n        function _burn(address account, uint256 amount) internal returns (bool) {\r\n        require(\r\n            account != address(0),\r\n            'Zero Address'\r\n        );\r\n        require(\r\n            amount > 0,\r\n            'Zero Amount'\r\n        );\r\n        require(\r\n            amount <= balanceOf(account),\r\n            'Insufficient Balance'\r\n        );\r\n        _balances[account] = _balances[account] - amount;\r\n        _totalSupply = _totalSupply - amount;\r\n        emit Transfer(account, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    function _sell(address recipient, uint256 amount) internal returns (bool) {\r\n        require(\r\n            !permissions[recipient].isBlacklisted,\r\n            'Blacklisted User'\r\n        );\r\n        require(\r\n            amount > 0,\r\n            'Zero Amount'\r\n        );\r\n        require(\r\n            amount <= _balances[recipient],\r\n            'Insufficient Balance'\r\n        );\r\n\r\n        // Allocate Balance To Swapper\r\n        _balances[recipient] -= amount;\r\n        _balances[LUCAXSwapper] += amount;\r\n        emit Transfer(recipient, LUCAXSwapper, amount);\r\n\r\n        // Sell From Swapper\r\n        ISwapper(LUCAXSwapper).sell(recipient);\r\n        return true;\r\n        }\r\n\r\n        receive() external payable {\r\n        ISwapper(LUCAXSwapper).buy{value: msg.value}(msg.sender);\r\n    }\r\n\r\n    /////////////////////////////////\r\n    /////     READ FUNCTIONS    /////\r\n    /////////////////////////////////\r\n\r\n    function getTax(address sender, address recipient, uint256 amount) public view returns (uint256, address) {\r\n        if ( permissions[sender].isFeeExempt || permissions[recipient].isFeeExempt ) {\r\n            return (0, address(0));\r\n        }\r\n        return permissions[sender].isLiquidityPool ? \r\n               ((amount * buyFee) / TAX_DENOM, buyFeeRecipient) : \r\n            permissions[recipient].isLiquidityPool ? \r\n               ((amount * sellFee) / TAX_DENOM, sellFeeRecipient) :\r\n               ((amount * transferFee) / TAX_DENOM, transferFeeRecipient);\r\n    }\r\n    \r\n    /////////////////////////////////\r\n    /////    OWNER FUNCTIONS    /////\r\n    /////////////////////////////////\r\n   \r\n    /** Activates Token, Enabling Trading For All */\r\n    function activateToken() external onlyOwner {\r\n        tokenActivated = true;\r\n        emit TokenActivated(block.number);\r\n    }\r\n\r\n    /** Registers List Of Addresses To Transact Before Token Goes Live */\r\n    function registerUserToBuyPreLaunch(address[] calldata users) external onlyOwner {\r\n        for (uint i = 0; i < users.length; i++) {\r\n            canTransactPreLaunch[users[i]] = true;\r\n        }\r\n    }\r\n\r\n    function withdraw(address token) external onlyOwner {\r\n        require(token != address(0), 'Zero Address');\r\n        bool s = IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n        require(s, 'Failure On Token Withdraw');\r\n    }\r\n\r\n    function withdrawBNB() external onlyOwner {\r\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n\r\n    function setTransferFeeRecipient(address recipient) external onlyOwner {\r\n        require(recipient != address(0), 'Zero Address');\r\n        transferFeeRecipient = recipient;\r\n        permissions[recipient].isFeeExempt = true;\r\n        permissions[recipient].isMaxWalletExempt = true;\r\n        permissions[recipient].isMaxSellExempt = true;\r\n        emit SetTransferFeeRecipient(recipient);\r\n    }\r\n\r\n    function setBuyFeeRecipient(address recipient) external onlyOwner {\r\n        require(recipient != address(0), 'Zero Address');\r\n        buyFeeRecipient = recipient;\r\n        permissions[recipient].isFeeExempt = true;\r\n        permissions[recipient].isMaxWalletExempt = true;\r\n        permissions[recipient].isMaxSellExempt = true;\r\n        emit SetBuyFeeRecipient(recipient);\r\n    }\r\n\r\n    function setSellFeeRecipient(address recipient) external onlyOwner {\r\n        require(recipient != address(0), 'Zero Address');\r\n        sellFeeRecipient = recipient;\r\n        permissions[recipient].isFeeExempt = true;\r\n        permissions[recipient].isMaxWalletExempt = true;\r\n        permissions[recipient].isMaxSellExempt = true;\r\n        emit SetSellFeeRecipient(recipient);\r\n    }\r\n\r\n    function registerAutomatedMarketMaker(address account) external onlyOwner {\r\n        require(account != address(0), 'Zero Address');\r\n        require(!permissions[account].isLiquidityPool, 'Already An AMM');\r\n        permissions[account].isLiquidityPool = true;\r\n        permissions[account].isMaxWalletExempt = true;\r\n        permissions[account].isMaxSellExempt = true;\r\n        emit SetAutomatedMarketMaker(account, true);\r\n    }\r\n\r\n    function unRegisterAutomatedMarketMaker(address account) external onlyOwner {\r\n        require(account != address(0), 'Zero Address');\r\n        require(permissions[account].isLiquidityPool, 'Not An AMM');\r\n        permissions[account].isLiquidityPool = false;\r\n        emit SetAutomatedMarketMaker(account, false);\r\n    }\r\n\r\n    function setBlacklist(address addr, bool isBlacklisted) external onlyOwner {\r\n        require(addr != address(0), 'Zero Address');\r\n        permissions[addr].isBlacklisted = isBlacklisted;\r\n        emit SetBlacklist(addr, isBlacklisted);\r\n    }\r\n\r\n    function setLUCAXSwapper(address newSwapper) external onlyOwner {\r\n        require(newSwapper != address(0), 'Zero Address');\r\n        LUCAXSwapper = newSwapper;\r\n        emit SetLUCAXSwapper(newSwapper);\r\n    }\r\n\r\n    function setFees(uint _buyFee, uint _sellFee, uint _transferFee) external onlyOwner {\r\n        require(\r\n            _buyFee <= 2500,\r\n            'Buy Fee Too High'\r\n        );\r\n        require(\r\n            _sellFee <= 2500,\r\n            'Sell Fee Too High'\r\n        );\r\n        require(\r\n            _transferFee <= 2500,\r\n            'Transfer Fee Too High'\r\n        );\r\n\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n        transferFee = _transferFee;\r\n\r\n        emit SetFees(_buyFee, _sellFee, _transferFee);\r\n    }\r\n\r\n    function setFeeExempt(address account, bool isExempt) external onlyOwner {\r\n        require(account != address(0), 'Zero Address');\r\n        permissions[account].isFeeExempt = isExempt;\r\n        emit SetFeeExemption(account, isExempt);\r\n    }\r\n\r\n    function setMaxSellExempt(address account, bool isExempt) external onlyOwner {\r\n        require(account != address(0), 'Zero Address');\r\n        permissions[account].isMaxSellExempt = isExempt;\r\n    }\r\n\r\n    function setMaxSellTransactionLimit(uint256 maxSellTransactionLimit) external onlyOwner {\r\n        require(\r\n            maxSellTransactionLimit >= _totalSupply / 1000,\r\n            'Max Sell Tx Limit Too Low'\r\n        );\r\n        max_sell_transaction_limit = maxSellTransactionLimit;\r\n    }\r\n\r\n    function setMaxWalletExempt(address account, bool isExempt) external onlyOwner {\r\n        require(account != address(0), 'Zero Address');\r\n        permissions[account].isMaxWalletExempt = isExempt;\r\n    }\r\n    \r\n    function setMaxWalletSize(uint256 newMaxWallet) external onlyOwner {\r\n        require(\r\n            newMaxWallet >= _totalSupply / 1000,\r\n            'Max Wallet Too Small'\r\n        );\r\n        MAX_WALLET = newMaxWallet;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isMarketMaker\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMaker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"SetBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetBuyFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"}],\"name\":\"SetFeeExemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"SetFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"SetLUCAXSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetSellFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"SetTransferFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNo\",\"type\":\"uint256\"}],\"name\":\"TokenActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LUCAXSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WALLET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canTransactPreLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_sell_transaction_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMaxWalletExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isMaxSellExempt\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"registerAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"registerUserToBuyPreLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlacklisted\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setBuyFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSwapper\",\"type\":\"address\"}],\"name\":\"setLUCAXSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setMaxSellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSellTransactionLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExempt\",\"type\":\"bool\"}],\"name\":\"setMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setSellFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unRegisterAutomatedMarketMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LUCAX", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3afe1b4cda20b4f809b1cb0340d307aa3a091d0bb2b0919f23c7859062c5ca07"}