{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) external view returns (uint balance);\r\n    function ownerOf(uint tokenId) external view returns (address owner);\r\n    function safeTransferFrom(address from, address to, uint tokenId) external;\r\n    function transferFrom(address from, address to, uint tokenId) external;\r\n    function approve(address to, uint tokenId) external;\r\n    function getApproved(uint tokenId) external view returns (address operator);\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint tokenId, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC721Receiver {\r\n    function onERC721Received(address operator, address from, uint tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\ninterface IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint tokenId) external view returns (string memory);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint temp = value;\r\n        uint digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(ERC165, IERC165)\r\n    returns (bool)\r\n    {\r\n        return\r\n        interfaceId == type(IERC721).interfaceId ||\r\n        interfaceId == type(IERC721Metadata).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n    {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n    {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n    {\r\n        require(\r\n            _exists(tokenId),\r\n            \"ERC721Metadata: URI query for nonexistent token\"\r\n        );\r\n\r\n        string memory baseURI = _baseURI();\r\n        return\r\n        bytes(baseURI).length > 0\r\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\r\n        : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (address)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved)\r\n    public\r\n    virtual\r\n    override\r\n    {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (bool)\r\n    {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(\r\n            _isApprovedOrOwner(_msgSender(), tokenId),\r\n            \"ERC721: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(from, to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _exists(uint tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    function _isApprovedOrOwner(address spender, uint tokenId)\r\n    internal\r\n    view\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner ||\r\n        getApproved(tokenId) == spender ||\r\n        ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    function _safeMint(address to, uint tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    function _safeMint(\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    function _burn(uint tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual {\r\n        require(\r\n            ERC721.ownerOf(tokenId) == from,\r\n            \"ERC721: transfer of token that is not own\"\r\n        );\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    function _approve(address to, uint tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try\r\n            IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\r\n            returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    // solhint-disable-next-line no-inline-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n    function totalSupply() external view returns (uint);\r\n    function tokenOfOwnerByIndex(address owner, uint index) external view returns (uint tokenId);\r\n    function tokenByIndex(uint index) external view returns (uint);\r\n}\r\n\r\ninterface IEpicHeroReflect {\r\n    function registerNewMint(uint tokenId) external;\r\n    function updateBurnedToken(uint tokenId) external;\r\n}\r\n\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint => uint)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint => uint) private _ownedTokensIndex;\r\n\r\n    // The current index of the token\r\n    uint currentIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n    public\r\n    view\r\n    virtual\r\n    override(IERC165, ERC721)\r\n    returns (bool)\r\n    {\r\n        return\r\n        interfaceId == type(IERC721Enumerable).interfaceId ||\r\n        super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n    {\r\n        require(\r\n            index < ERC721.balanceOf(owner),\r\n            \"ERC721Enumerable: owner index out of bounds\"\r\n        );\r\n        return _ownedTokens[owner][uint(index)];\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint) {\r\n        return currentIndex;\r\n    }\r\n\r\n    function tokenByIndex(uint index)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint)\r\n    {\r\n        require(\r\n            index < currentIndex,\r\n            \"ERC721Enumerable: global index out of bounds\"\r\n        );\r\n        return index;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint tokenId\r\n    ) internal virtual override {\r\n        require (to != address(0), \"Token not burnable\");\r\n\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            currentIndex++;\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n\r\n        if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    function _addTokenToOwnerEnumeration(address to, uint tokenId) private {\r\n        uint length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    function _removeTokenFromOwnerEnumeration(address from, uint tokenId)\r\n    private\r\n    {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint lastTokenIndex = uint(ERC721.balanceOf(from) - 1);\r\n        uint tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n}\r\n\r\nenum Permission {\r\n    Authorize,\r\n    Unauthorize,\r\n    LockPermissions,\r\n    AdjustVariables,\r\n    Mint,\r\n    ManagePacks,\r\n    ManageAttributes,\r\n    Withdraw\r\n}\r\n\r\nabstract contract EpicAuth {\r\n    struct PermissionLock {\r\n        bool isLocked;\r\n        uint64 expiryTime;\r\n    }\r\n\r\n    address public owner;\r\n    mapping(address => mapping(uint => bool)) private authorizations;\r\n\r\n    uint constant NUM_PERMISSIONS = 8; // always has to be adjusted when Permission element is added or removed\r\n    mapping(string => uint) permissionNameToIndex;\r\n\r\n    mapping(uint => PermissionLock) lockedPermissions;\r\n\r\n    constructor(address owner_) {\r\n        owner = owner_;\r\n        for (uint i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[owner_][i] = true;\r\n        }\r\n\r\n        // a permission name can't be longer than 32 bytes\r\n        permissionNameToIndex[\"Authorize\"] = uint(Permission.Authorize);\r\n        permissionNameToIndex[\"Unauthorize\"] = uint(Permission.Unauthorize);\r\n        permissionNameToIndex[\"LockPermissions\"] = uint(Permission.LockPermissions);\r\n        permissionNameToIndex[\"AdjustVariables\"] = uint(Permission.AdjustVariables);\r\n        permissionNameToIndex[\"Mint\"] = uint(Permission.Mint);\r\n        permissionNameToIndex[\"ManagePacks\"] = uint(Permission.ManagePacks);\r\n        permissionNameToIndex[\"ManageAttributes\"] = uint(Permission.ManageAttributes);\r\n        permissionNameToIndex[\"Withdraw\"] = uint(Permission.Withdraw);\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"onlyOwner\"); _;\r\n    }\r\n\r\n    /**\r\n     * Function to require caller to be authorized\r\n     */\r\n    function authorizedFor(Permission permission) internal view {\r\n        require(!lockedPermissions[uint(permission)].isLocked, \"Locked.\");\r\n        require(isAuthorizedFor(msg.sender, permission), \"!authorized\");\r\n    }\r\n\r\n    /**\r\n     * Authorize address for one permission\r\n     */\r\n    function authorizeFor(address adr, string memory permissionName) public {\r\n        authorizedFor(Permission.Authorize);\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        authorizations[adr][permIndex] = true;\r\n        emit AuthorizedFor(adr, permissionName, permIndex);\r\n    }\r\n\r\n    /**\r\n     * Authorize address for multiple permissions\r\n     */\r\n    function authorizeForMultiplePermissions(address adr, string[] calldata permissionNames) public {\r\n        authorizedFor(Permission.Authorize);\r\n        for (uint i; i < permissionNames.length; i++) {\r\n            uint permIndex = permissionNameToIndex[permissionNames[i]];\r\n            authorizations[adr][permIndex] = true;\r\n            emit AuthorizedFor(adr, permissionNames[i], permIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove address' authorization\r\n     */\r\n    function unauthorizeFor(address adr, string memory permissionName) public {\r\n        authorizedFor(Permission.Unauthorize);\r\n        require(adr != owner, \"!owner\");\r\n\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        authorizations[adr][permIndex] = false;\r\n        emit UnauthorizedFor(adr, permissionName, permIndex);\r\n    }\r\n\r\n    /**\r\n     * Unauthorize address for multiple permissions\r\n     */\r\n    function unauthorizeForMultiplePermissions(address adr, string[] calldata permissionNames) public {\r\n        authorizedFor(Permission.Unauthorize);\r\n        require(adr != owner, \"!owner\");\r\n\r\n        for (uint i; i < permissionNames.length; i++) {\r\n            uint permIndex = permissionNameToIndex[permissionNames[i]];\r\n            authorizations[adr][permIndex] = false;\r\n            emit UnauthorizedFor(adr, permissionNames[i], permIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorizedFor(address adr, string memory permissionName) public view returns (bool) {\r\n        return authorizations[adr][permissionNameToIndex[permissionName]];\r\n    }\r\n\r\n    /**\r\n     * Return address' authorization status\r\n     */\r\n    function isAuthorizedFor(address adr, Permission permission) public view returns (bool) {\r\n        return authorizations[adr][uint(permission)];\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner.\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        address oldOwner = owner;\r\n        owner = adr;\r\n        for (uint i; i < NUM_PERMISSIONS; i++) {\r\n            authorizations[oldOwner][i] = false;\r\n            authorizations[owner][i] = true;\r\n        }\r\n        emit OwnershipTransferred(oldOwner, owner);\r\n    }\r\n\r\n    /**\r\n     * Get the index of the permission by its name\r\n     */\r\n    function getPermissionNameToIndex(string memory permissionName) public view returns (uint) {\r\n        return permissionNameToIndex[permissionName];\r\n    }\r\n\r\n    /**\r\n     * Get the time the timeLock expires\r\n     */\r\n    function getPermissionUnlockTime(string memory permissionName) public view returns (uint) {\r\n        return lockedPermissions[permissionNameToIndex[permissionName]].expiryTime;\r\n    }\r\n\r\n    /**\r\n     * Check if the permission is locked\r\n     */\r\n    function isLocked(string memory permissionName) public view returns (bool) {\r\n        return lockedPermissions[permissionNameToIndex[permissionName]].isLocked;\r\n    }\r\n\r\n    /*\r\n     *Locks the permission from being used for the amount of time provided\r\n     */\r\n    function lockPermission(string memory permissionName, uint64 time) public virtual {\r\n        authorizedFor(Permission.LockPermissions);\r\n\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        uint64 expiryTime = uint64(block.timestamp) + time;\r\n        lockedPermissions[permIndex] = PermissionLock(true, expiryTime);\r\n        emit PermissionLocked(permissionName, permIndex, expiryTime);\r\n    }\r\n\r\n    /*\r\n     * Unlocks the permission if the lock has expired\r\n     */\r\n    function unlockPermission(string memory permissionName) public virtual {\r\n        require(block.timestamp > getPermissionUnlockTime(permissionName) , \"TimeLock\");\r\n        uint permIndex = permissionNameToIndex[permissionName];\r\n        lockedPermissions[permIndex].isLocked = false;\r\n        emit PermissionUnlocked(permissionName, permIndex);\r\n    }\r\n\r\n    event PermissionLocked(string permissionName, uint permissionIndex, uint64 expiryTime);\r\n    event PermissionUnlocked(string permissionName, uint permissionIndex);\r\n    event OwnershipTransferred(address from, address to);\r\n    event AuthorizedFor(address adr, string permissionName, uint permissionIndex);\r\n    event UnauthorizedFor(address adr, string permissionName, uint permissionIndex);\r\n}\r\n\r\ncontract EpicHeroNFT is ERC721Enumerable, EpicAuth {\r\n    struct LevelUpPrice {\r\n        uint thoreum;\r\n        uint epicHero;\r\n    }\r\n\r\n    struct Hero {\r\n        uint8 level;\r\n        uint8 rarity;\r\n    }\r\n\r\n    struct Pack {\r\n        uint232 basePrice;\r\n        uint8 numberOfCards;\r\n        bool saleRunning;\r\n        uint8 cardSetId;\r\n        address tokenAddress;\r\n    }\r\n\r\n    struct CardSet {\r\n        uint64 minted;\r\n        uint64 mintLimit;\r\n    }\r\n\r\n    struct Attribute {\r\n        string name;\r\n    }\r\n\r\n    Hero[] private _heroes;\r\n    LevelUpPrice[] private levelUpPrices;\r\n\r\n    // Attributes\r\n    mapping(uint => mapping(string => string)) public nftAttributes;\r\n    Attribute[] public attributes;\r\n    mapping(string => bool) public attributeExists;\r\n    mapping(string => uint) public attributeIndex;\r\n\r\n    // Packs\r\n    Pack[] public packTypes; // index is pack ID\r\n    mapping(uint => uint) public packIdOfToken; // first is token ID, second is pack ID\r\n    CardSet[] public cardSets;\r\n\r\n    uint8 public maxRarity = 7;\r\n    uint8 public maxLevel = 13;\r\n\r\n    // ADDRESSES\r\n    address deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public feeReceiver = 0x9bf2891Fa94F6d9954d6EAfA89C759b3C9dDc05A;\r\n    address public thoreumAddress = 0x580dE58c1BD593A43DaDcF0A739d504621817c05;\r\n    IBEP20 private ThoreumToken;\r\n    address public epicHeroAddress = 0x47cC5334F65611EA6Be9e933C49485c88C17F5F0;\r\n    IBEP20 private EpicHeroToken;\r\n    address public reflectAddress;\r\n\r\n    // Base URI\r\n    string private _baseUriExtended = \"https://api.epichero.io/api/hero/v1/\";\r\n\r\n    constructor() ERC721(\"Epic Hero 3D NFT\", \"EpicHero3DNFT\") EpicAuth(msg.sender) {\r\n        ThoreumToken = IBEP20(thoreumAddress);\r\n        EpicHeroToken = IBEP20(epicHeroAddress);\r\n\r\n        //Add Genesis Heroes (ID: 0)\r\n        addCardSet(5000);\r\n\r\n        //Add Born Heroes (ID: 1)\r\n        addCardSet(10000);\r\n\r\n        //Pack Genesis Heroes\r\n        addPack(10000 * 10 ** 18, 1, false, 0, thoreumAddress);\r\n        addPack(28500 * 10 ** 18, 3, false, 0, thoreumAddress);\r\n        addPack(45000 * 10 ** 18, 5, false, 0, thoreumAddress);\r\n\r\n        //Pack Born Heroes\r\n        addPack(1000000 * 10 ** 18, 1, false, 1, thoreumAddress);\r\n\r\n        //LevelUpPrice\r\n        addLevelUpPrice(0, 500 * 10 ** 18);\r\n        addLevelUpPrice(0, 1000 * 10 ** 18);\r\n        addLevelUpPrice(0, 2000 * 10 ** 18);\r\n        addLevelUpPrice(0, 3000 * 10 ** 18);\r\n        addLevelUpPrice(5000 * 10 ** 18, 4000 * 10 ** 18);\r\n        addLevelUpPrice(10000 * 10 ** 18, 5000 * 10 ** 18);\r\n        addLevelUpPrice(15000 * 10 ** 18, 6000 * 10 ** 18);\r\n        addLevelUpPrice(20000 * 10 ** 18, 7000 * 10 ** 18);\r\n        addLevelUpPrice(25000 * 10 ** 18, 8000 * 10 ** 18);\r\n        addLevelUpPrice(30000 * 10 ** 18, 9000 * 10 ** 18);\r\n        addLevelUpPrice(35000 * 10 ** 18, 10000 * 10 ** 18);\r\n        addLevelUpPrice(40000 * 10 ** 18, 11000 * 10 ** 18);\r\n        addLevelUpPrice(45000 * 10 ** 18, 12000 * 10 ** 18);\r\n\r\n        //Add Attribute\r\n        addAttribute(\"nickname\");\r\n    }\r\n\r\n    function _baseURI() internal view virtual override returns (string memory) {\r\n        return _baseUriExtended;\r\n    }\r\n\r\n    function purchasePack(uint8 packId) external {\r\n        Pack memory pack = packTypes[packId];\r\n        CardSet memory cardSet = cardSets[pack.cardSetId];\r\n\r\n        require(pack.saleRunning == true, \"!Sale\");\r\n        require(cardSet.minted + pack.numberOfCards <= cardSet.mintLimit, \"Mint limit\");\r\n\r\n        _mintCardsOfPack(msg.sender, packId, pack.numberOfCards);\r\n\r\n        cardSets[pack.cardSetId].minted += pack.numberOfCards;\r\n\r\n        require(IBEP20(pack.tokenAddress).transferFrom(msg.sender, address(this), getPrice(packId)), \"Transfer failed\");\r\n\r\n        emit PackPurchased(msg.sender, packId);\r\n    }\r\n\r\n    function _mintCardsOfPack(address user, uint8 packId, uint8 numOfCards) internal {\r\n        require(_heroes.length == currentIndex, \"Error length\");\r\n\r\n        uint heroId = currentIndex;\r\n\r\n        for (uint8 i; i < numOfCards; i++) {\r\n            packIdOfToken[heroId] = packId;\r\n            _safeMint(user, heroId);\r\n            _createHero(0, 0);\r\n\r\n            emit CardMinted(user, heroId, packId);\r\n            heroId += 1;\r\n        }\r\n    }\r\n\r\n    function levelUp(uint heroId) external {\r\n        require(ownerOf(heroId) == msg.sender, \"!owner\");\r\n\r\n        Hero storage hero = _heroes[heroId];\r\n        LevelUpPrice memory levelData = levelUpPrices[hero.level];\r\n        uint8 newLevel = hero.level + 1;\r\n\r\n        require(newLevel <= maxLevel, \"Max level\");\r\n        require(newLevel == 1 || hero.rarity > 0, \"Wait for summoned\");\r\n\r\n        require(\r\n            (\r\n                levelData.thoreum == 0 ||\r\n                (levelData.thoreum > 0 && ThoreumToken.balanceOf(msg.sender) >= levelData.thoreum)\r\n            ) &&\r\n            (\r\n                levelData.epicHero == 0 ||\r\n                (levelData.epicHero > 0 && EpicHeroToken.balanceOf(msg.sender) >= levelData.epicHero)\r\n            )\r\n        ,\"Not enough fee\");\r\n\r\n        if(levelData.thoreum > 0){\r\n            require(ThoreumToken.transferFrom(msg.sender, address(this), levelData.thoreum), \"Thoreum transfer failed\");\r\n        }\r\n\r\n        if(levelData.epicHero > 0){\r\n            require(EpicHeroToken.transferFrom(msg.sender, address(this), levelData.epicHero), \"EpicHero transfer failed\");\r\n        }\r\n\r\n        if(newLevel == 1){\r\n            hero.level = newLevel;\r\n\r\n            try IEpicHeroReflect(reflectAddress).registerNewMint( heroId ) {} catch {}\r\n\r\n            emit SummonHero(heroId);\r\n        }else if(newLevel <= 5){\r\n            hero.level = newLevel;\r\n            emit UserLevelUp(heroId, newLevel);\r\n        }else{\r\n            emit WaitingLevelUp(heroId, newLevel);\r\n        }\r\n    }\r\n\r\n    function getHero(uint heroId) external view returns (uint8 level, uint8 rarity) {\r\n        Hero memory hero = _heroes[heroId];\r\n        level = hero.level;\r\n        rarity = hero.rarity;\r\n    }\r\n\r\n    function getPrice(uint8 packId) public view returns (uint price) {\r\n        Pack memory pack = packTypes[packId];\r\n        price = pack.basePrice;\r\n    }\r\n\r\n    function getPacks() external view returns (Pack[] memory) {\r\n        return packTypes;\r\n    }\r\n\r\n    function getLevelUpPrices() external view returns (LevelUpPrice[] memory) {\r\n        return levelUpPrices;\r\n    }\r\n\r\n    event Received(address sender, uint amount);\r\n\r\n    receive() external payable {\r\n        emit Received(msg.sender, msg.value);\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI_) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n\r\n        _baseUriExtended = baseURI_;\r\n    }\r\n\r\n    function setThoreumAddress(address _newAdr) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n\r\n        thoreumAddress = _newAdr;\r\n        ThoreumToken = IBEP20(_newAdr);\r\n    }\r\n\r\n    function setEpicHeroAddress(address _newAdr) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n\r\n        epicHeroAddress = _newAdr;\r\n        EpicHeroToken = IBEP20(_newAdr);\r\n    }\r\n\r\n    function setReflectAddress(address _newAdr) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n\r\n        reflectAddress = _newAdr;\r\n    }\r\n\r\n    function setMaxLevel(uint8 newMaxLevel) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n\r\n        require(newMaxLevel > maxLevel);\r\n        maxLevel = newMaxLevel;\r\n    }\r\n\r\n    function setMaxRarity(uint8 newMaxRarity) external {\r\n        authorizedFor(Permission.AdjustVariables);\r\n\r\n        require(newMaxRarity > maxRarity);\r\n        maxRarity = newMaxRarity;\r\n    }\r\n\r\n    function addPack(uint232 basePrice, uint8 numberOfCards, bool saleRunning, uint8 cardSetId, address tokenAddress) public {\r\n        authorizedFor(Permission.ManagePacks);\r\n\r\n        packTypes.push(Pack(\r\n                basePrice,\r\n                numberOfCards,\r\n                saleRunning,\r\n                cardSetId,\r\n                tokenAddress\r\n            ));\r\n\r\n        emit PackAdded(packTypes.length - 1, basePrice, numberOfCards, cardSetId, tokenAddress);\r\n    }\r\n\r\n    function editPack(uint8 packId, uint232 basePrice, uint8 numberOfCards, bool saleRunning, uint8 cardSetId, address tokenAddress) external {\r\n        authorizedFor(Permission.ManagePacks);\r\n\r\n        packTypes[packId].basePrice = basePrice;\r\n        packTypes[packId].numberOfCards = numberOfCards;\r\n        packTypes[packId].saleRunning = saleRunning;\r\n        packTypes[packId].cardSetId = cardSetId;\r\n        packTypes[packId].tokenAddress = tokenAddress;\r\n\r\n        emit PackEdited(packId, basePrice, numberOfCards, saleRunning, cardSetId, tokenAddress);\r\n    }\r\n\r\n    function setSaleRunning(uint packId, bool running) public {\r\n        authorizedFor(Permission.ManagePacks);\r\n\r\n        packTypes[packId].saleRunning = running;\r\n    }\r\n\r\n    function addCardSet(uint64 mintLimit) public {\r\n        authorizedFor(Permission.ManagePacks);\r\n\r\n        cardSets.push(CardSet(0, mintLimit));\r\n\r\n        emit CardSetAdded(cardSets.length - 1, mintLimit);\r\n    }\r\n\r\n    function editCardSet(uint8 setId, uint64 mintLimit) public {\r\n        authorizedFor(Permission.ManagePacks);\r\n\r\n        cardSets[setId].mintLimit = mintLimit;\r\n\r\n        emit CardSetEdited(setId, mintLimit);\r\n    }\r\n\r\n    function addAttribute(string memory name) public {\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        attributes.push(Attribute(name));\r\n        attributeIndex[name] = attributes.length - 1;\r\n        attributeExists[name] = true;\r\n\r\n        emit AttributeAdded(attributes.length - 1, name);\r\n    }\r\n\r\n    function editAttribute(uint8 attrId, string memory name) public {\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        Attribute memory old = attributes[attrId];\r\n\r\n        if (compareStrings(old.name, name) == false) {\r\n            delete attributeIndex[old.name];\r\n            attributeIndex[name] = attrId;\r\n\r\n            delete attributeExists[old.name];\r\n            attributeExists[name] = true;\r\n        }\r\n\r\n        attributes[attrId].name = name;\r\n\r\n        emit AttributeEdited(attrId, name);\r\n    }\r\n\r\n    function addLevelUpPrice(uint _thoreum, uint _epicHero) public{\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        levelUpPrices.push(LevelUpPrice(_thoreum, _epicHero));\r\n    }\r\n\r\n    function editLevelUpPrice(uint8 level, uint _thoreum, uint _epicHero) public {\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        require(level < levelUpPrices.length,\"Invalid level\");\r\n\r\n        levelUpPrices[level].thoreum = _thoreum;\r\n        levelUpPrices[level].epicHero = _epicHero;\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function adminSetAttribute(uint heroId, string memory attribute, string memory value) public {\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        require(attributeExists[attribute], \"!Attribute\");\r\n\r\n        nftAttributes[heroId][attribute] = value;\r\n\r\n        emit AttributeChanged(heroId, attribute, value);\r\n    }\r\n\r\n    function adminMintPack(uint8 packId, address recipient) external {\r\n        authorizedFor(Permission.Mint);\r\n\r\n        if (recipient == address(0)) recipient = msg.sender;\r\n        Pack memory pack = packTypes[packId];\r\n\r\n        cardSets[pack.cardSetId].minted += pack.numberOfCards;\r\n        _mintCardsOfPack(recipient, packId, pack.numberOfCards);\r\n    }\r\n\r\n    function adminMintSingle(uint8 packId, uint8 level, uint8 rarity, address recipient) external {\r\n        authorizedFor(Permission.Mint);\r\n\r\n        if (recipient == address(0)) recipient = msg.sender;\r\n\r\n        _singleMint(recipient, packId, level, rarity);\r\n    }\r\n\r\n    function adminMintMultiple(uint8[] memory packIds, uint8[] memory levels, uint8[] memory rarities, address[] memory recipients) external {\r\n        authorizedFor(Permission.Mint);\r\n\r\n        require(\r\n            recipients.length == packIds.length &&\r\n            recipients.length == levels.length &&\r\n            recipients.length == rarities.length\r\n            , \"Error length\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            _singleMint(recipients[i], packIds[i], levels[i], rarities[i]);\r\n        }\r\n    }\r\n\r\n    function adminKillHero(uint heroId) external {\r\n        authorizedFor(Permission.Mint);\r\n\r\n        safeTransferFrom(ownerOf(heroId), deadAddress, heroId);\r\n\r\n        try IEpicHeroReflect(reflectAddress).updateBurnedToken( heroId ) {} catch {}\r\n\r\n        emit AdminKillHero(heroId);\r\n    }\r\n\r\n    function adminSetLevel(uint heroId, uint8 newLevel) external {\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        require(newLevel <= maxLevel, \"Max level\");\r\n        Hero storage hero = _heroes[heroId];\r\n        hero.level = newLevel;\r\n\r\n        if(newLevel == 1){\r\n            try IEpicHeroReflect(reflectAddress).registerNewMint( heroId ) {} catch {}\r\n        }\r\n\r\n        emit AdminSetLevel(heroId, newLevel);\r\n    }\r\n\r\n    function adminSetRarity(uint heroId, uint8 rarity) external {\r\n        authorizedFor(Permission.ManageAttributes);\r\n\r\n        Hero storage hero = _heroes[heroId];\r\n\r\n        require(rarity <= maxRarity, \"Max rarity\");\r\n\r\n        hero.rarity = rarity;\r\n    }\r\n\r\n    function retrieveTokens(address token, uint amount) external {\r\n        authorizedFor(Permission.Withdraw);\r\n\r\n        uint balance = IBEP20(token).balanceOf(address(this));\r\n\r\n        if(amount > balance){\r\n            amount = balance;\r\n        }\r\n\r\n        require(IBEP20(token).transfer(msg.sender, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function retrieveBNB(uint amount) external {\r\n        authorizedFor(Permission.Withdraw);\r\n\r\n        uint balance = address(this).balance;\r\n\r\n        if(amount > balance){\r\n            amount = balance;\r\n        }\r\n\r\n        (bool success,) = payable(msg.sender).call{ value: amount }(\"\");\r\n        require(success, \"Failed\");\r\n    }\r\n\r\n    function _createHero(uint8 level, uint8 rarity) internal {\r\n        _heroes.push(Hero(level, rarity));\r\n    }\r\n\r\n    function _singleMint(address recipient, uint8 packId, uint8 level, uint8 rarity) internal {\r\n        require(_heroes.length == currentIndex, \"Error length\");\r\n        require(level <= maxLevel && rarity <= maxRarity, \"Error level or rarity\");\r\n\r\n        uint heroId = currentIndex;\r\n\r\n        packIdOfToken[heroId] = packId;\r\n        _safeMint(recipient, heroId);\r\n        _createHero(level, rarity);\r\n\r\n        cardSets[packTypes[packId].cardSetId].minted++;\r\n        emit CardMinted(recipient, heroId, packId);\r\n    }\r\n\r\n    event CardMinted(address recipient, uint heroId, uint8 packId);\r\n    event CardSetAdded(uint setId, uint64 mintLimit);\r\n    event CardSetEdited(uint setId, uint64 mintLimit);\r\n    event PackPurchased(address user, uint8 packId);\r\n    event PackAdded(uint packId, uint basePrice, uint8 numOfCards, uint8 cardSetId, address tokenAddress);\r\n    event PackEdited(uint packId, uint basePrice, uint8 numOfCards, bool saleRunning, uint8 cardSetId, address tokenAddress);\r\n    event AttributeAdded(uint id, string name);\r\n    event AttributeEdited(uint id, string name);\r\n    event AttributeChanged(uint heroId, string attributeName, string newValue);\r\n    event SummonHero(uint indexed heroId);\r\n    event AdminKillHero(uint indexed heroId);\r\n    event AdminSetLevel(uint indexed heroId, uint8 newLevel);\r\n    event UserLevelUp(uint indexed heroId, uint8 newLevel);\r\n    event WaitingLevelUp(uint indexed heroId, uint8 newLevel);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"AdminKillHero\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newLevel\",\"type\":\"uint8\"}],\"name\":\"AdminSetLevel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AttributeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"attributeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newValue\",\"type\":\"string\"}],\"name\":\"AttributeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"AttributeEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"AuthorizedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"}],\"name\":\"CardMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"mintLimit\",\"type\":\"uint64\"}],\"name\":\"CardSetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"mintLimit\",\"type\":\"uint64\"}],\"name\":\"CardSetEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numOfCards\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cardSetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PackAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numOfCards\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"saleRunning\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cardSetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"PackEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"}],\"name\":\"PackPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiryTime\",\"type\":\"uint64\"}],\"name\":\"PermissionLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"PermissionUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"SummonHero\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"permissionIndex\",\"type\":\"uint256\"}],\"name\":\"UnauthorizedFor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newLevel\",\"type\":\"uint8\"}],\"name\":\"UserLevelUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newLevel\",\"type\":\"uint8\"}],\"name\":\"WaitingLevelUp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"mintLimit\",\"type\":\"uint64\"}],\"name\":\"addCardSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_thoreum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epicHero\",\"type\":\"uint256\"}],\"name\":\"addLevelUpPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint232\",\"name\":\"basePrice\",\"type\":\"uint232\"},{\"internalType\":\"uint8\",\"name\":\"numberOfCards\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"saleRunning\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"cardSetId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"addPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"adminKillHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"packIds\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"levels\",\"type\":\"uint8[]\"},{\"internalType\":\"uint8[]\",\"name\":\"rarities\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"adminMintMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"adminMintPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"adminMintSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"attribute\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"adminSetAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"newLevel\",\"type\":\"uint8\"}],\"name\":\"adminSetLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"adminSetRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"attributeExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"attributeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"authorizeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"permissionNames\",\"type\":\"string[]\"}],\"name\":\"authorizeForMultiplePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardSets\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"minted\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"mintLimit\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"attrId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"editAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"setId\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"mintLimit\",\"type\":\"uint64\"}],\"name\":\"editCardSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_thoreum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epicHero\",\"type\":\"uint256\"}],\"name\":\"editLevelUpPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"},{\"internalType\":\"uint232\",\"name\":\"basePrice\",\"type\":\"uint232\"},{\"internalType\":\"uint8\",\"name\":\"numberOfCards\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"saleRunning\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"cardSetId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"editPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epicHeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"getHero\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLevelUpPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"thoreum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epicHero\",\"type\":\"uint256\"}],\"internalType\":\"struct EpicHeroNFT.LevelUpPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPacks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint232\",\"name\":\"basePrice\",\"type\":\"uint232\"},{\"internalType\":\"uint8\",\"name\":\"numberOfCards\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"saleRunning\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"cardSetId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct EpicHeroNFT.Pack[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"getPermissionNameToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"getPermissionUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"enum Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"isAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"isAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"heroId\",\"type\":\"uint256\"}],\"name\":\"levelUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"}],\"name\":\"lockPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRarity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nftAttributes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packIdOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packTypes\",\"outputs\":[{\"internalType\":\"uint232\",\"name\":\"basePrice\",\"type\":\"uint232\"},{\"internalType\":\"uint8\",\"name\":\"numberOfCards\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"saleRunning\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"cardSetId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"packId\",\"type\":\"uint8\"}],\"name\":\"purchasePack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdr\",\"type\":\"address\"}],\"name\":\"setEpicHeroAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newMaxLevel\",\"type\":\"uint8\"}],\"name\":\"setMaxLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newMaxRarity\",\"type\":\"uint8\"}],\"name\":\"setMaxRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdr\",\"type\":\"address\"}],\"name\":\"setReflectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"}],\"name\":\"setSaleRunning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdr\",\"type\":\"address\"}],\"name\":\"setThoreumAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thoreumAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"unauthorizeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"permissionNames\",\"type\":\"string[]\"}],\"name\":\"unauthorizeForMultiplePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"permissionName\",\"type\":\"string\"}],\"name\":\"unlockPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EpicHeroNFT", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d016a4ad2fa979a55f2888df0e01ae34488961e6f09f6c7241dc7eb5c24fea7a"}