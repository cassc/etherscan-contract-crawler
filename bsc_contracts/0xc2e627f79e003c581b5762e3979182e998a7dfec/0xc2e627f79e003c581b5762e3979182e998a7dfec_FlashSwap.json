{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IBiswapCallee {\r\n  function BiswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\ncontract FlashSwap is IBiswapCallee {\r\n  address public owner;\r\n  address private constant BISWAP_FACTORY = 0x858E3312ed3A876947EA49d572A7C42DE08af7EE;\r\n  address private constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n  address private constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n  address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n  IFactory private constant factory = IFactory(BISWAP_FACTORY);\r\n  IRouter private constant router = IRouter(PANCAKE_ROUTER);\r\n  IPair private immutable pair;\r\n\r\n  event Log(string message, uint val);\r\n\r\n  constructor() {\r\n    // any BUSD pair(that has better liq, will fulfill our flashloan need). here we choose BUSD/USDT pair\r\n    pair = IPair(factory.getPair(BUSD, USDT));\r\n    owner = msg.sender;\r\n  }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract deployer can call this function\");\r\n        _;\r\n    }\r\n\r\n  // withdraw any BUSD deposited in the Contract\r\n  function withdrawDeposit() external onlyOwner {\r\n    uint256 contractBalance = IERC20(BUSD).balanceOf(address(this));\r\n    IERC20(BUSD).transfer(owner, contractBalance);\r\n  }\r\n  function flashSwap(uint busdAmount, address _otherAddress, uint8 slippagePercentage) external {\r\n    // Need to pass some data to trigger BiswapCall\r\n    bytes memory data = abi.encode(_otherAddress, busdAmount, slippagePercentage);\r\n\r\n    // amount0Out is USDT, amount1Out is BUSD (beacuse pair initialized in the constructor is BUSD/USDT)\r\n    pair.swap(0, busdAmount, address(this), data);\r\n  }\r\n\r\n  // This function is called by the BUSD pair contract, NOTE do not interact with this function\r\n  function BiswapCall(address sender, uint _amount0, uint _amount1, bytes calldata data) external {\r\n    require(msg.sender == address(pair), 'not pair');\r\n    require(sender == address(this), 'not sender');\r\n\r\n    (address OTHER, uint amount, uint8 slippagePercentage) = abi.decode(data, (address, uint, uint8));\r\n\r\n    uint amountReceived = swapTokens(amount, BUSD, OTHER, slippagePercentage); // perform first swap from borrowed BUSD to OTHER token\r\n    swapTokens(amountReceived, OTHER, BUSD, slippagePercentage); // perform second swap from received OTHER token to BUSD\r\n\r\n    uint amountToRepay = amount + calcFee(amount); // we need to repay the borrowed BUSD + 0.3009027% fee\r\n\r\n    // Repay the borrowed BUSD\r\n    IERC20(BUSD).transfer(address(pair), amountToRepay);\r\n  }\r\n\r\n  \r\n  function swapTokens(uint _amt, address token0, address token1, uint8 slippagePercentage) internal returns (uint amountOut) {\r\n    address[] memory path = new address[](2);\r\n    path[0] = token0;\r\n    path[1] = token1;\r\n\r\n    IERC20(token0).approve(address(router), _amt);\r\n\r\n    uint256[] memory amountsOut = router.getAmountsOut(_amt, path);\r\n    uint256 _amountOut = amountsOut[amountsOut.length - 1];\r\n\r\n    uint256 amountOutMin = _amountOut * (100 - slippagePercentage) / 100; // Applying a slippage tolerance of slippagePercentage\r\n    uint256 deadline = block.timestamp + 1 hours;\r\n\r\n    uint[] memory amounts = router.swapExactTokensForTokens(_amt, amountOutMin, path, address(this), deadline);\r\n\r\n    return amounts[1];\r\n  }\r\n\r\n  /**\r\n   * https://docs.uniswap.org/contracts/v2/guides/smart-contract-integration/using-flash-swaps#single-token\r\n   */\r\n  function calcFee(uint amount) internal pure returns (uint fee) {\r\n    return ((amount * 3) / 997);\r\n  }\r\n}\r\n\r\ninterface IPair {\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n}\r\n\r\ninterface IFactory {\r\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n\r\n  function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n\r\n  function balanceOf(address account) external view returns (uint);\r\n\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  function approve(address spender, uint amount) external returns (bool);\r\n\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"BiswapCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"busdAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_otherAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"slippagePercentage\",\"type\":\"uint8\"}],\"name\":\"flashSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlashSwap", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a5268cbb9e3aa4b8f8f8fbe7c76116539d446bf2289f4256ede9efdf44f9fce1"}