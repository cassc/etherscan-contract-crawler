{"SourceCode": "pragma solidity 0.8.0;\r\n\r\ncontract WFDCDapp {\r\n\r\n  string private version = \"v2\";\r\n\r\n  uint256 private DappReward = 25000;\r\n\r\n  address private WFDCContract = 0x63D6e1E46d3b72D2BB30D3A8D2C811cCb180Ab60;\r\n    \r\n  WrappedFreedomDividendCoin private WFDCToken;\r\n  \r\n  constructor() {\r\n    WFDCToken = WrappedFreedomDividendCoin(WFDCContract);\r\n  }\r\n\r\n  function dappCollectFreedomDividend(address Address) external returns (bool) {\r\n\r\n    WFDCToken.collectFreedomDividendWithAddress(Address);\r\n    \r\n    uint rewardLeft = WFDCToken.balanceOf(address(this));\r\n\r\n    if (rewardLeft >= DappReward) {\r\n      WFDCToken.transfer(Address, DappReward);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function getVersion() external view returns (string memory) {\r\n    return version;\r\n  }\r\n\r\n}\r\n\r\ninterface WrappedFreedomDividendCoin {\r\n    function balanceOf(address owner) external returns(uint);\r\n    function transfer(address to, uint256 value) external returns(bool);\r\n    function collectFreedomDividendWithAddress(address collectionAddress) external returns(bool);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"dappCollectFreedomDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WFDCDapp", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3fbbc60c9ae120cfa6fdec11c1b311a10427859747807afddf8c863c7541af49"}