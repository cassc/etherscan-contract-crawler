{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/CUTStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CUTStaking is Ownable {\\n    using SafeMath for uint256;\\n\\n    enum LockPeriod {\\n        PERIOD_1_MONTH,\\n        PERIOD_3_MONTHS,\\n        PERIOD_6_MONTHS,\\n        PERIOD_9_MONTHS,\\n        PERIOD_12_MONTHS,\\n        PERIOD_24_MONTHS\\n    }\\n\\n    struct Pool {\\n        address poolToken;\\n        uint256 totalStaked; // Total amount staked in the pool\\n    }\\n\\n    struct PeriodInfo {\\n        uint256 period;\\n        uint256 apy;\\n    }\\n\\n    struct StakeInfo {\\n        uint256 balance;\\n        uint256 lastUpdated;\\n        uint256 unlockTime;\\n        LockPeriod lockType;\\n        uint256 positionIndex;\\n        uint256 apy;\\n    }\\n\\n    uint256 constant SECONDS_IN_MONTH = 2629746; // Number of seconds in a month\\n    IERC20 public immutable rewardToken;\\n\\n    mapping(address => mapping(uint256 => StakeInfo[])) public stakeInfo;\\n    mapping(LockPeriod => PeriodInfo) public periodInfos;\\n\\n    Pool[] public pools;\\n\\n    event Staked(address indexed user, uint256 amount, uint256 positionIndex, LockPeriod lockType, uint256 unlockAt, uint256 apy);\\n    event Unstaked(address indexed user, uint256 amount, uint256 positionIndex);\\n    event TokenWithdraw(address indexed token, uint256 amount);\\n    event Claimed(address indexed user, uint256 amount);\\n\\n    constructor(IERC20 _rewardToken) {\\n        rewardToken = _rewardToken;\\n\\n        periodInfos[LockPeriod.PERIOD_3_MONTHS] = PeriodInfo(\\n            SECONDS_IN_MONTH * 3,\\n            32\\n        );\\n        periodInfos[LockPeriod.PERIOD_6_MONTHS] = PeriodInfo(\\n            SECONDS_IN_MONTH * 6,\\n            85\\n        );\\n        periodInfos[LockPeriod.PERIOD_9_MONTHS] = PeriodInfo(\\n            SECONDS_IN_MONTH * 9,\\n            154\\n        );\\n        periodInfos[LockPeriod.PERIOD_12_MONTHS] = PeriodInfo(\\n            SECONDS_IN_MONTH * 12,\\n            251\\n        );\\n        periodInfos[LockPeriod.PERIOD_24_MONTHS] = PeriodInfo(\\n            SECONDS_IN_MONTH * 24,\\n            618\\n        );\\n    }\\n\\n    function stake(\\n        uint256 amount,\\n        uint256 poolIndex,\\n        LockPeriod lockPeriod\\n    ) external {\\n        require(poolIndex < pools.length, \\\"Invalid pool index\\\");\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        // Transfer ERC20 tokens from user to contract\\n        require(\\n            IERC20(pools[poolIndex].poolToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            ),\\n            \\\"Transfer failed\\\"\\n        );\\n\\n        // Add a new stake position for the user\\n        uint256 positionIndex = stakeInfo[msg.sender][poolIndex].length;\\n        uint256 unlockAt = block.timestamp + periodInfos[lockPeriod].period;\\n        stakeInfo[msg.sender][poolIndex].push(\\n            StakeInfo(\\n                amount,\\n                block.timestamp,\\n                unlockAt,\\n                lockPeriod,\\n                positionIndex,\\n                periodInfos[lockPeriod].apy\\n            )\\n        );\\n\\n        // Update pool's total staked amount\\n        pools[poolIndex].totalStaked = pools[poolIndex].totalStaked.add(amount);\\n\\n        // Emit Staked event\\n        emit Staked(msg.sender, amount, positionIndex, lockPeriod, unlockAt, periodInfos[lockPeriod].apy);\\n    }\\n\\n    function purchase(\\n        uint256[] memory amountList,\\n        address[] memory userList,\\n        uint256[] memory timestampList,\\n        uint256 poolIndex,\\n        LockPeriod lockPeriod\\n    ) external onlyOwner {\\n        require(poolIndex < pools.length, \\\"Invalid pool index\\\");\\n        require(userList.length == amountList.length && userList.length == timestampList.length, \\\"Invalid array matching\\\");\\n        uint256 amount = 0;\\n\\n        // Add a new stake position for the user\\n        for(uint i = 0 ; i < amountList.length ; i ++) {\\n            uint256 positionIndex = stakeInfo[userList[i]][poolIndex].length;\\n            uint256 unlockAt = timestampList[i] + periodInfos[lockPeriod].period;\\n            stakeInfo[userList[i]][poolIndex].push(\\n                StakeInfo(\\n                    amountList[i],\\n                    timestampList[i],\\n                    unlockAt,\\n                    lockPeriod,\\n                    positionIndex,\\n                    periodInfos[lockPeriod].apy\\n                )\\n\\n            );\\n            emit Staked(userList[i], amountList[i], positionIndex, lockPeriod, unlockAt, periodInfos[lockPeriod].apy);\\n            amount = amount + amountList[i];\\n        }\\n\\n        // Transfer ERC20 tokens from user to contract\\n        require(\\n            IERC20(pools[poolIndex].poolToken).transferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            ),\\n            \\\"Transfer failed\\\"\\n        );\\n\\n        // Update pool's total staked amount\\n        pools[poolIndex].totalStaked = pools[poolIndex].totalStaked.add(amount);\\n    }\\n\\n    function migrate(\\n        uint256[] memory amountList,\\n        address[] memory userList,\\n        uint256[] memory timestampList,\\n        uint256[] memory unlockAtList,\\n        uint256[] memory apyList,\\n        uint256 poolIndex,\\n        LockPeriod lockPeriod\\n    ) external onlyOwner {\\n        require(poolIndex < pools.length, \\\"Invalid pool index\\\");\\n        require(userList.length == amountList.length && userList.length == timestampList.length && userList.length == unlockAtList.length, \\\"Invalid array matching\\\");\\n        uint256 amount = 0;\\n\\n        // Add a new stake position for the user\\n        for(uint i = 0 ; i < amountList.length ; i ++) {\\n            uint256 positionIndex = stakeInfo[userList[i]][poolIndex].length;\\n            stakeInfo[userList[i]][poolIndex].push(\\n                StakeInfo(\\n                    amountList[i],\\n                    timestampList[i],\\n                    unlockAtList[i],\\n                    lockPeriod,\\n                    positionIndex,\\n                    apyList[i]\\n                )\\n\\n            );\\n            emit Staked(userList[i], amountList[i], positionIndex, lockPeriod, unlockAtList[i], apyList[i]);\\n            amount = amount + amountList[i];\\n        }\\n\\n        // Update pool's total staked amount\\n        pools[poolIndex].totalStaked = pools[poolIndex].totalStaked.add(amount);\\n    }\\n\\n    function unstake(uint256 poolIndex, uint256 positionIndex) external {\\n        StakeInfo memory stakePosition = stakeInfo[msg.sender][poolIndex][positionIndex];\\n\\n        require(poolIndex < pools.length, \\\"Invalid pool index\\\");\\n        require(\\n            stakePosition.unlockTime <=\\n                block.timestamp,\\n            \\\"Time lock not ended yet\\\"\\n        );\\n        uint256 balance = stakePosition\\n            .balance;\\n        // Calculate the reward based on the staked amount and lock period\\n        uint256 reward = calculateReward(\\n            stakePosition\\n        );\\n\\n        // Update user's staked amount and lock period\\n        delete stakeInfo[msg.sender][poolIndex][positionIndex];\\n\\n        // Update pool's total staked amount\\n        pools[poolIndex].totalStaked = pools[poolIndex].totalStaked.sub(\\n            balance\\n        );\\n\\n        // Transfer ERC20 tokens and reward to user\\n        require(\\n            rewardToken.transfer(msg.sender, reward),\\n            \\\"Reward Transfer failed\\\"\\n        );\\n\\n        require(\\n            IERC20(pools[poolIndex].poolToken).transfer(msg.sender, balance),\\n            \\\"Transfer failed\\\"\\n        );\\n\\n        // Emit Unstaked event\\n        emit Unstaked(msg.sender, balance, positionIndex);\\n    }\\n\\n    function claim(uint256 poolIndex) external {\\n        require(poolIndex < pools.length, \\\"Invalid pool index\\\");\\n\\n        // Calculate the total reward for all positions of the user in the specified pool\\n        uint256 reward = calculateRewardForUser(msg.sender, poolIndex);\\n\\n        // Update the last staked timestamp for all positions\\n        updateLastStakedTimestamp(msg.sender, poolIndex);\\n\\n        // Transfer ERC20 tokens and reward to the user\\n        require(rewardToken.transfer(msg.sender, reward), \\\"Transfer failed\\\");\\n\\n        // Emit Claimed event\\n        emit Claimed(msg.sender, reward);\\n    }\\n\\n    function updateLastStakedTimestamp(\\n        address user,\\n        uint256 poolIndex\\n    ) internal {\\n        StakeInfo[] storage userStakes = stakeInfo[user][poolIndex];\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            userStakes[i].lastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function calculateRewardForUser(\\n        address user,\\n        uint256 poolIndex\\n    ) public view returns (uint256) {\\n        StakeInfo[] storage userStakes = stakeInfo[user][poolIndex];\\n        uint256 totalReward;\\n\\n        for (uint256 i = 0; i < userStakes.length; i++) {\\n            if(userStakes[i].balance > 0) {\\n                totalReward = totalReward.add(\\n                    calculateReward(userStakes[i])\\n                );\\n            }\\n        }\\n\\n        return totalReward;\\n    }\\n\\n    function calculateReward(\\n        StakeInfo memory userInfo\\n    ) public view returns (uint256) {\\n        uint256 rewardAPY = userInfo.apy; // Lock periods are indexed from 0\\n        uint256 rewardPerToken = uint256(1e18).mul(rewardAPY).div(1000).div(SECONDS_IN_MONTH * 12);\\n        \\n        uint256 elapsedTime = block.timestamp.sub(userInfo.lastUpdated);\\n\\n        uint256 reward = userInfo\\n            .balance\\n            .mul(elapsedTime)\\n            .mul(rewardPerToken)\\n            .div(1e18);\\n\\n        return reward;\\n    }\\n\\n    function getStakedAmount(\\n        address user,\\n        uint256 poolIndex,\\n        uint256 positionIndex\\n    ) external view returns (uint256) {\\n        return stakeInfo[user][poolIndex][positionIndex].balance;\\n    }\\n\\n    function getPoolInfo(\\n        uint256 poolIndex\\n    ) external view returns (address, uint256) {\\n        require(poolIndex < pools.length, \\\"Invalid pool index\\\");\\n        return (\\n            pools[poolIndex].poolToken,\\n            pools[poolIndex].totalStaked\\n        );\\n    }\\n\\n    function setRewardAPY(\\n        uint256 lockPeriod,\\n        uint256 rewardAPY\\n    ) external onlyOwner {\\n        require(lockPeriod >= 0 && lockPeriod < 6, \\\"Invalid lock period\\\");\\n        periodInfos[LockPeriod(lockPeriod)].apy = rewardAPY;\\n    }\\n\\n    function addPool(address token) external onlyOwner {\\n        pools.push(\\n            Pool({poolToken: token, totalStaked: 0})\\n        );\\n    }\\n\\n    function tokenWithdraw(IERC20 token) external onlyOwner {\\n        require(\\n            token.transfer(owner(), token.balanceOf(address(this))),\\n            \\\"Transfer failed\\\"\\n        );\\n        emit TokenWithdraw(address(token), token.balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"lockType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"lockType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"internalType\":\"struct CUTStaking.StakeInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"calculateRewardForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"}],\"name\":\"getStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestampList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockAtList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"apyList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"periodInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestampList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAPY\",\"type\":\"uint256\"}],\"name\":\"setRewardAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"lockPeriod\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum CUTStaking.LockPeriod\",\"name\":\"lockType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionIndex\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CUTStaking", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b1ff83ef5e44862d634413be77ca4dc6ac50b74f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}