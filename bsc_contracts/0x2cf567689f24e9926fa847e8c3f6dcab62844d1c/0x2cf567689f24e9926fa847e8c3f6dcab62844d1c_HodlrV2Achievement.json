{"SourceCode": "// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\n// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n\r\nerror NotZeroAddress();    // 0x66385fa3\r\nerror CallerNotApproved(); // 0x4014f1a5\r\nerror InvalidAddress();    // 0xe6c4247b\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ninterface IOwnable {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() external view returns (address);\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\nerror CallerNotOwner();\r\nerror UseEverOwn();\r\n\r\ncontract Ownable is IOwnable, Context {\r\n    address public owner;\r\n\r\n    function _onlyOwner() private view {\r\n        if (owner != _msgSender()) revert CallerNotOwner();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    // Allow contract ownership and access to contract onlyOwner functions\r\n    // to be locked using EverOwn with control gated by community vote.\r\n    //\r\n    // EverRise ($RISE) stakers become voting members of the\r\n    // decentralized autonomous organization (DAO) that controls access\r\n    // to the token contract via the EverRise Ecosystem dApp EverOwn\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner == address(0)) revert NotZeroAddress();\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n\r\nerror FailedEthSend();\r\n\r\ncontract NativeCoinSender {\r\n    function sendEthViaCall(address payable to, uint256 amount) internal {\r\n        (bool sent, ) = to.call{value: amount}(\"\");\r\n        if (!sent) revert FailedEthSend();\r\n    }\r\n}\r\n// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transferFromWithPermit(address sender, address recipient, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nstruct ApprovalChecks {\r\n    // Prevent permits being reused (IERC2612)\r\n    uint64 nonce;\r\n    // Allow revoke all spenders/operators approvals in single txn\r\n    uint32 nftCheck;\r\n    uint32 tokenCheck;\r\n    // Allow auto timeout on approvals\r\n    uint16 autoRevokeNftHours;\r\n    uint16 autoRevokeTokenHours;\r\n    // Allow full wallet locking of all transfers\r\n    uint48 unlockTimestamp;\r\n}\r\n\r\nstruct Allowance {\r\n    uint128 tokenAmount;\r\n    uint32 nftCheck;\r\n    uint32 tokenCheck;\r\n    uint48 timestamp;\r\n    uint8 nftApproval;\r\n    uint8 tokenApproval;\r\n}\r\n\r\ninterface IEverRise is IERC20Metadata {\r\n    function totalBuyVolume() external view returns (uint256);\r\n    function totalSellVolume() external view returns (uint256);\r\n    function holders() external view returns (uint256);\r\n    function uniswapV2Pair() external view returns (address);\r\n    function transferStake(address fromAddress, address toAddress, uint96 amountToTransfer) external;\r\n    function isWalletLocked(address fromAddress) external view returns (bool);\r\n    function setApprovalForAll(address fromAddress, address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function isExcludedFromFee(address account) external view returns (bool);\r\n\r\n    function approvals(address operator) external view returns (ApprovalChecks memory);\r\n}\r\n// Copyright (c) 2022 EverRise Pte Ltd. All rights reserved.\r\n// EverRise licenses this file to you under the MIT license.\r\n\r\ninterface IMementoRise is IOwnable {\r\n    function royaltyAddress() external view returns(address payable);\r\n    function mint(address to, uint256 tokenId, uint256 amount) external;\r\n    function mintFee(uint16 typeId) external returns (uint256);\r\n    function setBaseUriForType(uint16 nftType, string calldata baseUri) external;\r\n    function setAllowedCreateFrom(uint16 nftType, address contractAddress) external;\r\n    function setAllowedCreateTo(uint16 nftType, address contractAddress) external;\r\n    function setAllowedTransumtateSingleTo(uint16 nftType, address contractAddress) external;\r\n    function setAllowedTransumtateMultipleTo(uint16 nftType, address contractAddress) external;\r\n}\r\n\r\nabstract contract MementoRecipe is NativeCoinSender, Ownable {\r\n    IMementoRise public mementoRise = IMementoRise(0x1C57a5eE9C5A90C9a5e31B5265175e0642b943b1);\r\n    IEverRise public everRiseToken = IEverRise(0xC17c30e98541188614dF99239cABD40280810cA3);\r\n\r\n    event EverRiseTokenSet(address indexed tokenAddress);\r\n    event MementoRiseSet(address indexed nftAddress);\r\n    \r\n    modifier onlyMementoRise() {\r\n        require(_msgSender() == address(mementoRise), \"Invalid requestor\");\r\n        _;\r\n    }\r\n\r\n    function setEverRiseToken(address tokenAddress) external onlyOwner {\r\n        if (tokenAddress == address(0)) revert NotZeroAddress();\r\n        \r\n        everRiseToken = IEverRise(tokenAddress);\r\n\r\n        emit EverRiseTokenSet(tokenAddress);\r\n    }\r\n\r\n    function setMementoRise(address nftAddress) public onlyOwner {\r\n        if (nftAddress == address(0)) revert NotZeroAddress();\r\n\r\n        mementoRise = IMementoRise(nftAddress);\r\n\r\n        emit MementoRiseSet(nftAddress);\r\n    }\r\n\r\n    function krakenMintFee(uint256 baseFee, uint256 quantity) internal {\r\n        distributeMintFee(payable(address(everRiseToken)), baseFee, quantity);\r\n    }\r\n\r\n    function handleMintFee(uint256 baseFee, uint256 quantity) internal {\r\n        distributeMintFee(mementoRise.royaltyAddress(), baseFee, quantity);\r\n    }\r\n\r\n    function distributeMintFee(address payable receiver, uint256 baseFee, uint256 quantity) private {\r\n        uint256 _mintFee = baseFee * quantity;\r\n        require(_mintFee == 0 || msg.value >= _mintFee, \"Mint fee not covered\");\r\n\r\n        uint256 _balance = address(this).balance;\r\n        if (_balance > 0) {\r\n            // Transfer everything, easier than transferring extras later\r\n            sendEthViaCall(receiver, _balance);\r\n        }\r\n    }\r\n}\r\n\r\naddress constant EverRiseV3Address = 0xC17c30e98541188614dF99239cABD40280810cA3;\r\naddress constant EverRiseV2Address = 0x0cD022ddE27169b20895e0e2B2B8A33B25e63579;\r\naddress constant EverRiseV2Address_AVAX = 0xC3A8d300333BFfE3ddF6166F2Bc84E6d38351BED;\r\naddress constant riseFeeAddress = 0x0BFc8f6374028f1a61Ae3019E5C845F461575381;\r\n\r\ncontract HodlrV2Achievement is MementoRecipe {\r\n    IERC20 immutable public everRiseV2;\r\n    IEverRise immutable public everRiseV3 = IEverRise(EverRiseV3Address);\r\n    mapping (address => bool) public processedClaim;\r\n    uint256 tokenId;\r\n    uint256 riseFee = 1000 * 10**18;\r\n    event RiseFeeUpdated(uint256 riseFee);\r\n\r\n    constructor() {\r\n        everRiseV2 = block.chainid == 43114 ? \r\n            IERC20(EverRiseV2Address_AVAX) :\r\n            IERC20(EverRiseV2Address);\r\n        tokenId = 3 + (getChain() << 16);\r\n        \r\n        transferOwnership(mementoRise.owner());\r\n    }\r\n\r\n    function claimHodlrV2Achievement()\r\n        external payable\r\n    {\r\n        address account = _msgSender();\r\n\r\n        require(everRiseV2.balanceOf(account) > 0, \"Not holding RISE v2\");\r\n        require(!processedClaim[account], \"Already claimed\");\r\n\r\n        processedClaim[account] = true;\r\n        everRiseV3.transferFrom(account, riseFeeAddress, riseFee);\r\n        handleMintFee(mementoRise.mintFee(uint16(tokenId & 0xffff)), 1);\r\n        mementoRise.mint(account, tokenId, 1);\r\n    }\r\n\r\n    function setRiseFee(uint256 riseAmount) external onlyOwner {\r\n        riseFee = riseAmount;\r\n        emit RiseFeeUpdated(riseFee);\r\n    }\r\n\r\n    function getRiseFee() external view returns (uint256 _riseFee){\r\n        return riseFee;\r\n    }\r\n\r\n    function hasClaimed(address _account) public view returns (bool canClaim, bool claimed){\r\n        claimed = processedClaim[_account];\r\n        uint256 balance = everRiseV2.balanceOf(_account);\r\n        return (balance > 0, claimed);\r\n    }\r\n\r\n    function getChain() private view returns (uint256) {\r\n        uint256 chainId = block.chainid;\r\n        if (chainId == 1 || chainId == 3 || chainId == 4 || chainId == 5 || chainId == 42) // Ethereum \r\n            return 4;\r\n        if (chainId == 56 || chainId == 97) // BNB\r\n            return 2;\r\n        if (chainId == 137 || chainId == 80001) // Polygon\r\n            return 3;\r\n        if (chainId == 250 || chainId == 4002) // Fantom \r\n            return 1;\r\n        if (chainId == 43114 || chainId == 43113) // Avalanche\r\n            return 0;\r\n\r\n      require(false, \"Unknown chain\");\r\n      return 0;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedEthSend\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"EverRiseTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"MementoRiseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riseFee\",\"type\":\"uint256\"}],\"name\":\"RiseFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimHodlrV2Achievement\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everRiseToken\",\"outputs\":[{\"internalType\":\"contract IEverRise\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everRiseV2\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everRiseV3\",\"outputs\":[{\"internalType\":\"contract IEverRise\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_riseFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canClaim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mementoRise\",\"outputs\":[{\"internalType\":\"contract IMementoRise\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"processedClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setEverRiseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setMementoRise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"riseAmount\",\"type\":\"uint256\"}],\"name\":\"setRiseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HodlrV2Achievement", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2320c0a0cf235915f2f2eadaff4f443e512d9cc687efe1e07423b649e1e0e7fe"}