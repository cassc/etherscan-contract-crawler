{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\"},\"IPancakeV2Factory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"},\"IPancakeV2Pair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"IPancakeV2Router01.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPancakeV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\"},\"IPancakeV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPancakeV2Router01.sol\\\";\\n\\ninterface IPancakeV2Router02 is IPancakeV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler\\u0027s built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c \\u003c a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b \\u003e a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003c= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b \\u003e 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\"},\"SMUZIToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./SafeMath.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./IPancakeV2Router02.sol\\u0027;\\r\\nimport \\u0027./IPancakeV2Factory.sol\\u0027;\\r\\nimport \\u0027./IPancakeV2Pair.sol\\u0027;\\r\\n\\r\\ninterface IAntisnipe {\\r\\n    function assureCanTransfer(\\r\\n        address sender,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract SmuziToken is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _rOwned;\\r\\n    mapping(address =\\u003e uint256) private _tOwned;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFee;\\r\\n    mapping(address =\\u003e bool) private _isExcluded;\\r\\n    address[] private _excluded;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 21_000_000_000 * 10**18;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private _name = \\u0027SMUZI\\u0027;\\r\\n    string private _symbol = \\u0027SMUZI\\u0027;\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    // Base Fees\\r\\n    uint256 public _taxFee = 2;\\r\\n    uint256 private _previousTaxFee = _taxFee;\\r\\n\\r\\n    uint256 public _liquidityFee = 2;\\r\\n    uint256 private _previousLiquidityFee = _liquidityFee;\\r\\n\\r\\n    uint256 public _burnFee = 2;\\r\\n    uint256 private _previousBurnFee = _burnFee;\\r\\n\\r\\n    uint256 public _marketingFee = 4;\\r\\n    address public marketingWallet;\\r\\n    uint256 private _previousMarketingFee = _marketingFee;\\r\\n    uint256 public _HoldLimit = 10_000_000 * 10**18;\\r\\n\\r\\n    // Sell Fees\\r\\n    uint256 public _sellTaxFee = 4;\\r\\n    uint256 public _sellLiquidityFee = 4;\\r\\n    uint256 public _sellMarketingFee = 8;\\r\\n    uint256 public _sellBurnFee = 2;\\r\\n\\r\\n    // Anti whale\\r\\n    uint256 public constant MAX_HOLDING_PERCENTS_DIVISOR = 1000;\\r\\n    uint256 public _maxHoldingPercents = 5;\\r\\n    bool public antiWhaleEnabled;\\r\\n    // Limit\\r\\n    bool public HoldLimitEnabled;\\r\\n\\r\\n    // Anti bot\\r\\n    mapping(uint256 =\\u003e bool) allowedBuyAmount;\\r\\n    bool public antiBotEnabled;\\r\\n\\r\\n    // Anti manager\\r\\n    address public antiManager;\\r\\n\\r\\n    IPancakeV2Router02 public pancakeV2Router;\\r\\n    address public pancakeV2Pair;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    uint256 private numTokensSellToAddToLiquidity = 1000000 * 10**18;\\r\\n    uint256[] _allowedBuyAmount = [\\r\\n        1000011,\\r\\n        2000002,\\r\\n        3000003,\\r\\n        4000004,\\r\\n        5000005,\\r\\n        6000006,\\r\\n        7000007,\\r\\n        8000008,\\r\\n        9000009,\\r\\n        9005009,\\r\\n        9999999\\r\\n    ];\\r\\n\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        IPancakeV2Router02 _pancakeV2Router,\\r\\n        address _marketingWallet,\\r\\n        address _antiManager\\r\\n    ) {\\r\\n        marketingWallet = _marketingWallet;\\r\\n        antiManager = _antiManager;\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n\\r\\n        // Create a pancake pair for this new token\\r\\n        pancakeV2Pair = IPancakeV2Factory(_pancakeV2Router.factory()).createPair(\\r\\n            address(this),\\r\\n            _pancakeV2Router.WETH()\\r\\n        );\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        pancakeV2Router = _pancakeV2Router;\\r\\n\\r\\n        //exclude owner, anti manager and this contract from fee\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[_antiManager] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        // Init anti bot allowed token amounts\\r\\n        for (uint256 i = 0; i \\u003c _allowedBuyAmount.length; i++) {\\r\\n            allowedBuyAmount[_allowedBuyAmount[i] * 10**18] = true;\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    IAntisnipe public antisnipe;\\r\\n    bool public antisnipeDisable;\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        if (from == address(0) || to == address(0)) return;\\r\\n        if (!antisnipeDisable \\u0026\\u0026 address(antisnipe) != address(0))\\r\\n            antisnipe.assureCanTransfer(msg.sender, from, to, amount);\\r\\n    }\\r\\n\\r\\n    function setAntisnipeDisable(bool enabled) external onlyOwner {\\r\\n        require(!antisnipeDisable);\\r\\n        antisnipeDisable = enabled;\\r\\n    }\\r\\n\\r\\n    function setAntisnipeAddress(address addr) external onlyOwner {\\r\\n        antisnipe = IAntisnipe(addr);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\u0027BEP20: transfer amount exceeds allowance\\u0027\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\u0027BEP20: decreased allowance below zero\\u0027\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(!_isExcluded[sender], \\u0027Excluded addresses cannot call this function\\u0027);\\r\\n        (uint256 rAmount, , , , , ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount \\u003c= _tTotal, \\u0027Amount must be less than supply\\u0027);\\r\\n        if (!deductTransferFee) {\\r\\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\\r\\n        require(rAmount \\u003c= _rTotal, \\u0027Amount must be less than total reflections\\u0027);\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        require(\\r\\n            account != address(pancakeV2Router),\\r\\n            \\u0027We can not exclude Pancake router.\\u0027\\r\\n        );\\r\\n        require(!_isExcluded[account], \\u0027Account is already excluded\\u0027);\\r\\n        if (_rOwned[account] \\u003e 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\u0027Account is already excluded\\u0027);\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    //to receive BNB from pancakeV2Router when swapping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    function _getValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(\\r\\n            tAmount\\r\\n        );\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            _getRate()\\r\\n        );\\r\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 tFee = calculateTaxFee(tAmount);\\r\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\\r\\n        return (tTransferAmount, tFee, tLiquidity);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tLiquidity,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_rOwned[_excluded[i]] \\u003e rSupply || _tOwned[_excluded[i]] \\u003e tSupply)\\r\\n                return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _takeLiquidity(uint256 tLiquidity) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\r\\n    }\\r\\n\\r\\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount.mul(_taxFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\r\\n        return _amount.mul(_liquidityFee).div(10**2);\\r\\n    }\\r\\n\\r\\n    function activateSellFee() private {\\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousBurnFee = _burnFee;\\r\\n        _previousMarketingFee = _marketingFee;\\r\\n\\r\\n        _taxFee = _sellTaxFee;\\r\\n        _liquidityFee = _sellLiquidityFee;\\r\\n        _marketingFee = _sellMarketingFee;\\r\\n        _burnFee = _sellBurnFee;\\r\\n    }\\r\\n\\r\\n    function removeAllFee() private {\\r\\n        if (_taxFee == 0 \\u0026\\u0026 _liquidityFee == 0 \\u0026\\u0026 _marketingFee == 0 \\u0026\\u0026 _burnFee == 0)\\r\\n            return;\\r\\n\\r\\n        _previousTaxFee = _taxFee;\\r\\n        _previousLiquidityFee = _liquidityFee;\\r\\n        _previousBurnFee = _burnFee;\\r\\n        _previousMarketingFee = _marketingFee;\\r\\n\\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n        _marketingFee = 0;\\r\\n        _burnFee = 0;\\r\\n    }\\r\\n\\r\\n    function restoreAllFee() private {\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n        _burnFee = _previousBurnFee;\\r\\n        _marketingFee = _previousMarketingFee;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\u0027BEP20: approve from the zero address\\u0027);\\r\\n        require(spender != address(0), \\u0027BEP20: approve to the zero address\\u0027);\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\u0027BEP20: transfer from the zero address\\u0027);\\r\\n        require(amount \\u003e 0, \\u0027Transfer amount must be greater than zero\\u0027);\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        if (antiBotEnabled \\u0026\\u0026 from == pancakeV2Pair) {\\r\\n            require(allowedBuyAmount[amount], \\u0027Only allowed buy amounts\\u0027);\\r\\n        }\\r\\n\\r\\n        // is the token balance of this contract address over the min number of\\r\\n        // tokens that we need to initiate a swap + liquidity lock?\\r\\n        // also, don\\u0027t get caught in a circular liquidity event.\\r\\n        // also, don\\u0027t swap \\u0026 liquify if sender is pancake pair.\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinTokenBalance = contractTokenBalance \\u003e= numTokensSellToAddToLiquidity;\\r\\n        if (\\r\\n            overMinTokenBalance \\u0026\\u0026\\r\\n            !inSwapAndLiquify \\u0026\\u0026\\r\\n            from != pancakeV2Pair \\u0026\\u0026\\r\\n            swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n            //add liquidity\\r\\n            swapAndLiquify(contractTokenBalance);\\r\\n        }\\r\\n\\r\\n        //transfer amount, it will take tax, burn, liquidity fee\\r\\n        _tokenTransfer(from, to, amount);\\r\\n\\r\\n        if (antiWhaleEnabled) {\\r\\n            uint256 maxAllowed = (_tTotal * _maxHoldingPercents) /\\r\\n                MAX_HOLDING_PERCENTS_DIVISOR;\\r\\n            if (to == pancakeV2Pair) {\\r\\n                require(\\r\\n                    amount \\u003c= maxAllowed,\\r\\n                    \\u0027Transacted amount exceed the max allowed value\\u0027\\r\\n                );\\r\\n                \\r\\n            } else {\\r\\n                require(\\r\\n                    balanceOf(to) \\u003c= maxAllowed,\\r\\n                    \\u0027Wallet balance exceeds the max limit\\u0027\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(HoldLimitEnabled){\\r\\n            uint256 maxAllowedl = _HoldLimit;\\r\\n\\r\\n            if (to == pancakeV2Pair) {\\r\\n                require(\\r\\n                    amount \\u003c= maxAllowedl,\\r\\n                    \\u0027Transacted amount exceed the max allowed value\\u0027\\r\\n                );\\r\\n                \\r\\n            } else {\\r\\n                require(\\r\\n                    balanceOf(to) \\u003c= maxAllowedl,\\r\\n                    \\u0027Wallet balance exceeds the max limit\\u0027\\r\\n                );\\r\\n            }\\r\\n    }\\r\\n\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = contractTokenBalance.div(2);\\r\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\r\\n\\r\\n        // capture the contract\\u0027s current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half);\\r\\n        // \\u003c- this breaks the ETH -\\u003e HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to pancake\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the pancake pair path of token -\\u003e weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = pancakeV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        pancakeV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\\r\\n            removeAllFee();\\r\\n        } else if (recipient == pancakeV2Pair) {\\r\\n            activateSellFee();\\r\\n        }\\r\\n\\r\\n        //Calculate burn amount and marketing amount\\r\\n        uint256 burnAmt = amount.mul(_burnFee).div(100);\\r\\n        uint256 marketingAmt = amount.mul(_marketingFee).div(100);\\r\\n\\r\\n        if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n            _transferFromExcluded(\\r\\n                sender,\\r\\n                recipient,\\r\\n                (amount.sub(burnAmt).sub(marketingAmt))\\r\\n            );\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n            _transferToExcluded(\\r\\n                sender,\\r\\n                recipient,\\r\\n                (amount.sub(burnAmt).sub(marketingAmt))\\r\\n            );\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n            _transferStandard(sender, recipient, (amount.sub(burnAmt).sub(marketingAmt)));\\r\\n        } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n            _transferBothExcluded(\\r\\n                sender,\\r\\n                recipient,\\r\\n                (amount.sub(burnAmt).sub(marketingAmt))\\r\\n            );\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, (amount.sub(burnAmt).sub(marketingAmt)));\\r\\n        }\\r\\n\\r\\n        //Temporarily remove fees to transfer to burn address and marketing wallet\\r\\n        _taxFee = 0;\\r\\n        _liquidityFee = 0;\\r\\n\\r\\n        _transferStandard(sender, address(0), burnAmt);\\r\\n        _transferStandard(sender, marketingWallet, marketingAmt);\\r\\n\\r\\n        //Restore tax and liquidity fees\\r\\n        _taxFee = _previousTaxFee;\\r\\n        _liquidityFee = _previousLiquidityFee;\\r\\n\\r\\n        if (\\r\\n            _isExcludedFromFee[sender] ||\\r\\n            _isExcludedFromFee[recipient] ||\\r\\n            recipient == pancakeV2Pair\\r\\n        ) {\\r\\n            restoreAllFee();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rFee,\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity\\r\\n        ) = _getValues(tAmount);\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n        _takeLiquidity(tLiquidity);\\r\\n        _reflectFee(rFee, tFee);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address newWallet) external onlyOwner {\\r\\n        marketingWallet = newWallet;\\r\\n    }\\r\\n\\r\\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\\r\\n        require(taxFee \\u003c= 10, \\u0027Tax fee cannot be more than 10%\\u0027);\\r\\n        _taxFee = taxFee;\\r\\n    }\\r\\n\\r\\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\\r\\n        require(liquidityFee \\u003c= 10, \\u0027Liquidity fee cannot be more than 10%\\u0027);\\r\\n        _liquidityFee = liquidityFee;\\r\\n    }\\r\\n\\r\\n    function setMarketingFeePercent(uint256 marketingFee) external onlyOwner {\\r\\n        require(marketingFee \\u003c= 10, \\u0027Marketing fee cannot be more than 10%\\u0027);\\r\\n        _marketingFee = marketingFee;\\r\\n    }\\r\\n\\r\\n    function setBurnFeePercent(uint256 burnFee) external onlyOwner {\\r\\n        require(burnFee \\u003c= 10, \\u0027Burn fee cannot be more than 10%\\u0027);\\r\\n        _burnFee = burnFee;\\r\\n    }\\r\\n\\r\\n    function setSellBurnFeePercent(uint256 sellBurnFee) external onlyOwner {\\r\\n        require(sellBurnFee \\u003c= 10, \\u0027Sell burn fee cannot be more than 10%\\u0027);\\r\\n        _sellBurnFee = sellBurnFee;\\r\\n    }\\r\\n\\r\\n    function setHoldLimit(uint256 HoldLimit) external onlyOwner {\\r\\n        //require(HoldLimit \\u003c= 10, \\u0027Sell burn fee cannot be more than 10%\\u0027);\\r\\n        _HoldLimit = HoldLimit;\\r\\n    }\\r\\n\\r\\n    function setSellMarketingFeePercent(uint256 sellMarketingFee) external onlyOwner {\\r\\n        require(sellMarketingFee \\u003c= 10, \\u0027Sell marketing fee cannot be more than 10%\\u0027);\\r\\n        _sellMarketingFee = sellMarketingFee;\\r\\n    }\\r\\n\\r\\n    function setSellLiquidityFeePercent(uint256 sellLiquidityFee) external onlyOwner {\\r\\n        require(sellLiquidityFee \\u003c= 10, \\u0027Sell liquidity fee cannot be more than 10%\\u0027);\\r\\n        _sellLiquidityFee = sellLiquidityFee;\\r\\n    }\\r\\n\\r\\n    function setSellTaxFeePercent(uint256 sellTaxFee) external onlyOwner {\\r\\n        require(sellTaxFee \\u003c= 10, \\u0027Sell tax fee cannot be more than 10%\\u0027);\\r\\n        _sellTaxFee = sellTaxFee;\\r\\n    }\\r\\n\\r\\n    function setMaxHoldingPercents(uint256 maxHoldingPercents) external onlyOwner {\\r\\n        require(maxHoldingPercents \\u003e= 1, \\u0027Max holding percents cannot be less than 0.1%\\u0027);\\r\\n        require(maxHoldingPercents \\u003c= 30, \\u0027Max holding percents cannot be more than 3%\\u0027);\\r\\n        _maxHoldingPercents = maxHoldingPercents;\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    function setAntiWhale(bool enabled) external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == antiManager,\\r\\n            \\u0027Only admin or anti manager allowed\\u0027\\r\\n        );\\r\\n        antiWhaleEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    function setHoldLimitEnabled(bool enabled) external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == antiManager,\\r\\n            \\u0027Only admin or anti manager allowed\\u0027\\r\\n        );\\r\\n        HoldLimitEnabled = enabled;\\r\\n    }\\r\\n\\r\\n    function setAntiBot(bool enabled) external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == antiManager,\\r\\n            \\u0027Only admin or anti manager allowed\\u0027\\r\\n        );\\r\\n        antiBotEnabled = enabled;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"_pancakeV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antiManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HoldLimitEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_HOLDING_PERCENTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_HoldLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHoldingPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiWhaleEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipe\",\"outputs\":[{\"internalType\":\"contract IAntisnipe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisnipeDisable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntiWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setAntisnipeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAntisnipeDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"HoldLimit\",\"type\":\"uint256\"}],\"name\":\"setHoldLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setHoldLimitEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxHoldingPercents\",\"type\":\"uint256\"}],\"name\":\"setMaxHoldingPercents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellBurnFee\",\"type\":\"uint256\"}],\"name\":\"setSellBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setSellLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTaxFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SmuziToken", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000c32257dfc58882ea2c96f44e4abeab34d3be5ce2000000000000000000000000beaf8df34e9d4bcee3dfb34040a4814ac499c8ec", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c9f5dc67fdca0463f60a51dadace2437e25d8d92d02e7a1d6b26d9f8b25a48fb"}