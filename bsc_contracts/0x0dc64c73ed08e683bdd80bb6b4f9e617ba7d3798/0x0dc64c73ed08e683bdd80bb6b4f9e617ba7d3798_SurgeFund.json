{"SourceCode": "{\"Address.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\nlibrary Address {\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    \\r\\n    function symbol() external view returns(string memory);\\r\\n    \\r\\n    function name() external view returns(string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the number of decimal places\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"},\"SurgeFund.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\n\\r\\n\\r\\ninterface IXUSD {\\r\\n    function stakeUnderlyingAsset(address receiver, uint256 amount) external returns (bool s);\\r\\n}\\r\\n\\r\\ninterface IXUSDV2 {\\r\\n    function mintWithBacking(address token, uint256 amount, address receiver) external returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ISurgeFund {\\r\\n    function bnbToClaimForVictim(address victim) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract SurgeFund is IERC20 {\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    // Surge Fund Token Caller\\r\\n    address public SurgeFundToken;\\r\\n\\r\\n    // cost of BNB + 2% at the time of exploit\\r\\n    uint256 public constant BNB_PRICE_PLUS_TWO_PERCENT = 420;\\r\\n\\r\\n    // old surge fund to pull data from\\r\\n    ISurgeFund oldFund = ISurgeFund(0x8078380508c16C9F122D62771714701612Eb3fa8);\\r\\n\\r\\n    // PCS Router\\r\\n    IUniswapV2Router02 router;\\r\\n\\r\\n    // Victim Structure\\r\\n    struct Victim {\\r\\n        uint256 bracket;\\r\\n        uint256 lastClaim;\\r\\n        uint256 totalToClaim;\\r\\n        uint256 totalExcluded;\\r\\n        uint256 arrayIndex;\\r\\n        bool wantsXUSD;\\r\\n    }\\r\\n\\r\\n    // Victims\\r\\n    mapping ( address =\\u003e Victim ) public victims;\\r\\n    address[] public allVictims;\\r\\n\\r\\n    // Repayment Brackets Weighted By Amount Lost\\r\\n    struct Bracket {\\r\\n        uint256 lowerBound;\\r\\n        uint256 upperBound;\\r\\n        uint256 ratio;\\r\\n        uint256 dividendsPerShare;\\r\\n        uint256 totalSharesPerBracket;\\r\\n        uint256 nVictims;\\r\\n    }\\r\\n    mapping ( uint256 =\\u003e Bracket ) public brackets;\\r\\n    uint256 constant nBrackets = 4;\\r\\n\\r\\n    // Dividend Precision To Avoid Round-Off Error\\r\\n    uint256 precision = 10**18;\\r\\n\\r\\n    // total shares of BUSD to repay\\r\\n    uint256 totalShares;\\r\\n\\r\\n    // minimum claim $1\\r\\n    uint256 public minimumClaim = 10**18;\\r\\n\\r\\n    // if users opt to receive XUSD instead of BUSD\\r\\n    address public XUSD = 0x254246331cacbC0b2ea12bEF6632E4C6075f60e2;\\r\\n\\r\\n    // LOCKS Certain Functions\\r\\n    bool public isLocked = false;\\r\\n    address public caller;\\r\\n\\r\\n    address public constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\\r\\n    address[] path;\\r\\n\\r\\n    uint256 private constant MIN_INCLUDED = 42 * 10**18;\\r\\n\\r\\n    modifier onlyOwner() {require(msg.sender == caller, \\u0027Only Owner\\u0027); _;}\\r\\n    modifier notLocked() { require(!isLocked, \\u0027Function Is Locked\\u0027); _; }\\r\\n    \\r\\n    constructor() {\\r\\n        // router + creator\\r\\n        router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        caller = msg.sender;\\r\\n        \\r\\n        // initialize brackets\\r\\n        brackets[0] = Bracket({\\r\\n            lowerBound: MIN_INCLUDED,\\r\\n            upperBound: 420 * 10**18,\\r\\n            ratio: 30,\\r\\n            dividendsPerShare: 0,\\r\\n            totalSharesPerBracket: 0,\\r\\n            nVictims: 0\\r\\n        });\\r\\n        brackets[1] = Bracket({\\r\\n            lowerBound: 420 * 10**18,\\r\\n            upperBound: 2091 * 10**18,\\r\\n            ratio: 30,\\r\\n            dividendsPerShare: 0,\\r\\n            totalSharesPerBracket: 0,\\r\\n            nVictims: 0\\r\\n        });\\r\\n        brackets[2] = Bracket({\\r\\n            lowerBound: 2091 * 10**18,\\r\\n            upperBound: 10159 * 10**18,\\r\\n            ratio: 25,\\r\\n            dividendsPerShare: 0,\\r\\n            totalSharesPerBracket: 0,\\r\\n            nVictims: 0\\r\\n        });\\r\\n        brackets[3] = Bracket({\\r\\n            lowerBound: 10159 * 10**18,\\r\\n            upperBound: 50000000000000 * 10**18,\\r\\n            ratio: 20,\\r\\n            dividendsPerShare: 0,\\r\\n            totalSharesPerBracket: 0,\\r\\n            nVictims: 0\\r\\n        });\\r\\n\\r\\n        // BNB -\\u003e BUSD\\r\\n        path = new address[](2);\\r\\n        path[0] = router.WETH();\\r\\n        path[1] = BUSD;\\r\\n    }\\r\\n\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) { return totalShares; }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return usersCurrentClaim(account); }\\r\\n    function allowance(address holder, address spender) external pure override returns (uint256) { return holder == spender ? 0 : 1; }\\r\\n    \\r\\n    function name() public pure override returns (string memory) {\\r\\n        return \\\"SurgeFundToken\\\";\\r\\n    }\\r\\n\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return \\\"SFT\\\";\\r\\n    }\\r\\n\\r\\n    function decimals() public pure override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public view override returns (bool) {\\r\\n        return spender != msg.sender \\u0026\\u0026 amount \\u003e 0;\\r\\n    }\\r\\n  \\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _claim(recipient);\\r\\n        return recipient == msg.sender || amount \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external pure override returns (bool) {\\r\\n        return sender != recipient || amount \\u003e 0;\\r\\n    }\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    function deposit(uint256 amount) external {\\r\\n\\r\\n        uint256 before = IERC20(BUSD).balanceOf(address(this));\\r\\n        bool s = IERC20(BUSD).transferFrom(msg.sender, address(this), amount);\\r\\n        uint256 received = IERC20(BUSD).balanceOf(address(this)) - before;\\r\\n        require(received \\u003e 0 \\u0026\\u0026 received \\u003c= amount \\u0026\\u0026 s);\\r\\n\\r\\n        _distributeShares(received);\\r\\n    }\\r\\n\\r\\n    function trigger() external {\\r\\n        require(address(this).balance \\u003e 0, \\u0027Zero Balance\\u0027);\\r\\n\\r\\n        uint256 before = IERC20(BUSD).balanceOf(address(this));\\r\\n        router.swapExactETHForTokens{value: address(this).balance}(\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 30\\r\\n        );\\r\\n        uint256 received = IERC20(BUSD).balanceOf(address(this)) - before;\\r\\n        require(received \\u003e 0);\\r\\n        _distributeShares(received);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        _claim(msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdrawToReceiverToLiquify(address token) external {\\r\\n        require(token != BUSD, \\u0027Cannot Withdraw BUSD\\u0027);\\r\\n        IERC20(token).transfer(caller, IERC20(token).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function migrateBNBToV4(address V4) external notLocked onlyOwner {\\r\\n        (bool s,) = payable(V4).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(s);\\r\\n    }\\r\\n\\r\\n    function migrateTokenToV4(address V4) external notLocked onlyOwner {\\r\\n        IERC20(BUSD).transfer(V4, IERC20(BUSD).balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // OWNER FUNCTIONS\\r\\n\\r\\n    function transferOwnership(address newOwner) external notLocked onlyOwner {\\r\\n        caller = newOwner;\\r\\n        emit TransferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function setMinimumClaim(uint256 minClaim) external notLocked onlyOwner {\\r\\n        minimumClaim = minClaim;\\r\\n    }\\r\\n\\r\\n    function upgradeXUSDToV2(address XUSDV2) external notLocked onlyOwner {\\r\\n        require(XUSDV2 != XUSD \\u0026\\u0026 XUSDV2 != address(0));\\r\\n        XUSD = XUSDV2;\\r\\n    }\\r\\n\\r\\n    /** Adds Victims To The Fund, Cannot Be Accessed If Function is Locked */\\r\\n    function pullVictims(address[] calldata _victims) external onlyOwner {\\r\\n        for (uint i = 0; i \\u003c _victims.length; i++) {\\r\\n            uint256 claim_ = oldFund.bnbToClaimForVictim(_victims[i]);\\r\\n            if (claim_ \\u003e 0 \\u0026\\u0026 victims[_victims[i]].totalToClaim == 0) {\\r\\n                addVictim(_victims[i], claim_ * BNB_PRICE_PLUS_TWO_PERCENT);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function migrateVictim(address old, address newVictim) external notLocked onlyOwner {\\r\\n        require(victims[newVictim].totalToClaim == 0, \\u0027NewVictim Already Victim\\u0027);\\r\\n        require(victims[old].totalToClaim \\u003e 0, \\u0027Old Victim Not A Victim\\u0027);\\r\\n\\r\\n        victims[newVictim].totalToClaim = victims[old].totalToClaim;\\r\\n        victims[newVictim].totalExcluded = victims[old].totalExcluded;\\r\\n        victims[newVictim].bracket = victims[old].bracket;\\r\\n        victims[newVictim].arrayIndex = victims[old].arrayIndex;\\r\\n        victims[newVictim].wantsXUSD = victims[old].wantsXUSD;\\r\\n        victims[newVictim].lastClaim = block.number;\\r\\n\\r\\n        allVictims[\\r\\n            victims[old].arrayIndex\\r\\n        ] = newVictim;\\r\\n\\r\\n        delete victims[old];\\r\\n        emit Transfer(old, newVictim, victims[newVictim].totalToClaim);\\r\\n    }\\r\\n    \\r\\n    /** Locks Out Specific Functions From Being Called */\\r\\n    function LockTheContract() external notLocked onlyOwner {\\r\\n        isLocked = true;\\r\\n        emit LockedContract(block.timestamp, block.number);\\r\\n    }\\r\\n\\r\\n    function setXUSDAsReward() external {\\r\\n        require(victims[msg.sender].totalToClaim \\u003e 0);\\r\\n        victims[msg.sender].wantsXUSD = true;\\r\\n    }\\r\\n\\r\\n    function setBUSDAsReward() external {\\r\\n        require(victims[msg.sender].totalToClaim \\u003e 0);\\r\\n        victims[msg.sender].wantsXUSD = false;\\r\\n    }\\r\\n\\r\\n    /** Opts Out Of Surge Fund Rewards */\\r\\n    function optOut(uint256 percent) external {\\r\\n        require(victims[msg.sender].totalToClaim \\u003e 0, \\u0027No Funds To Opt Out\\u0027);\\r\\n        require(percent \\u003c= 100 \\u0026\\u0026 percent \\u003e 0, \\u0027Invalid Percent\\u0027);\\r\\n\\r\\n        // quantity user could have claimed\\r\\n        uint256 donation = victims[msg.sender].totalToClaim.mul(percent).div(100);\\r\\n        // pending rewards for user\\r\\n        uint256 pending = usersCurrentClaim(msg.sender);\\r\\n        // decrement total shares\\r\\n        totalShares = totalShares.sub(donation);\\r\\n\\r\\n        if (percent == 100) {\\r\\n\\r\\n            // only claim total amount\\r\\n            _reduceShare(msg.sender, victims[msg.sender].totalToClaim);\\r\\n            // reflect the rest\\r\\n            if (pending \\u003e 0 \\u0026\\u0026 totalShares \\u003e 0) {\\r\\n                _distributeShares(pending);\\r\\n            }\\r\\n        } else {\\r\\n            \\r\\n            // reduce amount received from claim amount\\r\\n            _reduceShare(msg.sender, donation);\\r\\n\\r\\n            // if funds are pending distribute them\\r\\n            if (pending \\u003e 0 \\u0026\\u0026 totalShares \\u003e 0) {\\r\\n                _distributeShares(pending);\\r\\n            }\\r\\n            victims[msg.sender].totalExcluded = currentDividends(msg.sender);\\r\\n        }\\r\\n        emit Transfer(msg.sender, address(0), donation);\\r\\n        // check brackets\\r\\n        _checkBrackets();\\r\\n        // Tell Blockchain\\r\\n        emit OptOut(msg.sender, donation);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // INTERNAL FUNCTIONS\\r\\n\\r\\n\\r\\n    function _reduceShare(address user, uint256 amount) internal {\\r\\n\\r\\n        // reduce victim claim amount from state\\r\\n        victims[user].totalToClaim = victims[user].totalToClaim.sub(amount, \\u0027totalToClaim underflow\\u0027);\\r\\n        totalShares = totalShares.sub(amount, \\u0027totalShares underflow\\u0027);\\r\\n        brackets[victims[user].bracket].totalSharesPerBracket = brackets[victims[user].bracket].totalSharesPerBracket.sub(amount, \\u0027bracket underflow\\u0027);\\r\\n\\r\\n        // re-assign rewards\\r\\n        victims[user].totalExcluded = currentDividends(user);\\r\\n\\r\\n        if (victims[user].totalToClaim == 0) {\\r\\n            // decrement users per bracket\\r\\n            brackets[victims[user].bracket].nVictims--;\\r\\n            _checkBrackets();\\r\\n            _removeVictim(user);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _removeVictim(address victim) internal {\\r\\n\\r\\n        victims[\\r\\n            allVictims[allVictims.length - 1]\\r\\n        ].arrayIndex = victims[victim].arrayIndex;\\r\\n\\r\\n        allVictims[\\r\\n            victims[victim].arrayIndex\\r\\n        ] = allVictims[\\r\\n            allVictims.length - 1\\r\\n        ];\\r\\n\\r\\n        allVictims.pop();\\r\\n        delete victims[victim];\\r\\n    }\\r\\n\\r\\n\\r\\n    /** Claims Holdings Specific User Has Access To */\\r\\n    function _claim(address user) internal {\\r\\n\\r\\n        // Amount of BNB Sender Can Claim\\r\\n        uint256 toClaim = usersCurrentClaim(user);\\r\\n\\r\\n        // Make Sure We Sender Can Claim \\r\\n        require(victims[user].totalToClaim \\u003e 0, \\u0027No Claims To Make\\u0027);\\r\\n        // Make Sure Enough Time Has Passed\\r\\n        require(victims[user].lastClaim \\u003c block.number, \\u0027Same Block Entry\\u0027);\\r\\n        // Make Sure We Can Claim Above The Minimum Amount\\r\\n        require(toClaim \\u003e= minimumClaim, \\u0027Below Minimum Claim\\u0027);\\r\\n\\r\\n        // update claim block\\r\\n        victims[user].lastClaim = block.number;\\r\\n\\r\\n        if (toClaim \\u003e victims[user].totalToClaim) {\\r\\n\\r\\n            // user\\u0027s current claim amount\\r\\n            uint256 prevClaim = victims[user].totalToClaim;\\r\\n\\r\\n            // only claim total amount, reflect the rest\\r\\n            _reduceShare(user, prevClaim);\\r\\n\\r\\n            // amount to reflect\\r\\n            uint256 diff = toClaim - prevClaim;\\r\\n\\r\\n            if (totalShares \\u003e 0) {\\r\\n                // distribute difference\\r\\n                _distributeShares(diff);\\r\\n            }\\r\\n            \\r\\n            // update claim amount\\r\\n            toClaim = prevClaim;\\r\\n        \\r\\n        } else {\\r\\n\\r\\n            // Subtract Claim Amount From Sender\\r\\n            _reduceShare(user, toClaim);\\r\\n\\r\\n            // Remove Rest Of Claim If Below Minimum\\r\\n            if (victims[user].totalToClaim \\u003c minimumClaim) {\\r\\n                toClaim += victims[user].totalToClaim;\\r\\n                _reduceShare(user, victims[user].totalToClaim);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Send Amount To User\\r\\n        _sendToUser(user, toClaim);\\r\\n\\r\\n        // emit events\\r\\n        emit Transfer(user, address(0), toClaim);\\r\\n        emit Claim(user, toClaim);\\r\\n    }\\r\\n\\r\\n    function _sendToUser(address user, uint256 amount) internal {\\r\\n        if (victims[user].wantsXUSD) {\\r\\n            IERC20(BUSD).approve(XUSD, amount);\\r\\n            if (XUSD == 0x254246331cacbC0b2ea12bEF6632E4C6075f60e2) {\\r\\n                IXUSD(XUSD).stakeUnderlyingAsset(user, amount);\\r\\n            } else {\\r\\n                IXUSDV2(XUSD).mintWithBacking(BUSD, amount, user);\\r\\n            }   \\r\\n        } else {\\r\\n            IERC20(BUSD).transfer(user, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /** Adds Victim To The List Of Victims If Contract Is Unlocked */\\r\\n    function addVictim(address victim, uint256 victimClaim) private {\\r\\n        \\r\\n        if (victims[victim].totalToClaim \\u003e 0 || victimClaim \\u003c MIN_INCLUDED) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        for (uint i = 0; i \\u003c nBrackets; i++) {\\r\\n            if (victimClaim \\u003e= brackets[i].lowerBound \\u0026\\u0026\\r\\n                victimClaim \\u003c brackets[i].upperBound) {\\r\\n        \\r\\n                    victims[victim].bracket = i;\\r\\n                    brackets[i].nVictims++;\\r\\n                    brackets[i].totalSharesPerBracket += victimClaim;\\r\\n                    break;\\r\\n        \\r\\n                }\\r\\n        }\\r\\n\\r\\n        allVictims.push(victim);\\r\\n\\r\\n        totalShares = totalShares.add(victimClaim);\\r\\n\\r\\n        victims[victim].totalToClaim = victimClaim;\\r\\n        victims[victim].totalExcluded = currentDividends(victim);\\r\\n        emit Transfer(address(0), victim, victimClaim);\\r\\n    }\\r\\n\\r\\n    function _distributeShares(uint256 numShares) internal {\\r\\n        uint amount = 0;\\r\\n        for (uint i = 0; i \\u003c nBrackets; i++) {\\r\\n            if (brackets[i].ratio \\u003e 0 \\u0026\\u0026 brackets[i].nVictims \\u003e 0) {\\r\\n                amount = (( numShares * brackets[i].ratio ) / 100 ) - 1;\\r\\n                brackets[i].dividendsPerShare += ( amount * precision ) / brackets[i].totalSharesPerBracket;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkBrackets() internal {\\r\\n        for (uint i = 0; i \\u003c nBrackets; i++) {\\r\\n            if (brackets[i].nVictims == 0 \\u0026\\u0026 brackets[i].ratio \\u003e 0) {\\r\\n                // distribute ratio amongst other brackets\\r\\n                _distributeRatio(i);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _distributeRatio(uint256 whichBracket) internal {\\r\\n\\r\\n        uint256 ratio = brackets[whichBracket].ratio;\\r\\n\\r\\n        uint256 nFullBrackets;\\r\\n        for (uint i = 0; i \\u003c nBrackets; i++) {\\r\\n            if (brackets[i].nVictims \\u003e 0 \\u0026\\u0026 i != whichBracket) {\\r\\n                nFullBrackets++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 ratioSplit = ratio / nFullBrackets;\\r\\n        uint256 rollover = ( ratioSplit * nFullBrackets ) \\u003c ratio ? ratio - ( ratioSplit * nFullBrackets) : 0;\\r\\n\\r\\n        for (uint i = 0; i \\u003c nBrackets; i++) {\\r\\n            if (brackets[i].nVictims \\u003e 0 \\u0026\\u0026 i != whichBracket) {\\r\\n                brackets[i].ratio += (ratioSplit + rollover);\\r\\n                rollover = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        delete brackets[whichBracket];\\r\\n    }\\r\\n    \\r\\n    function currentDividends(address victim) internal view returns (uint256) {\\r\\n        return victims[victim].totalToClaim.mul(brackets[victims[victim].bracket].dividendsPerShare).div(precision);\\r\\n    }\\r\\n\\r\\n    function usersCurrentClaim(address user) internal view returns (uint256) {\\r\\n        uint256 amount = victims[user].totalToClaim;\\r\\n        if(amount == 0){ return 0; }\\r\\n\\r\\n        uint256 shareholderTotalDividends = currentDividends(user);\\r\\n        uint256 shareholderTotalExcluded = victims[user].totalExcluded;\\r\\n\\r\\n        if(shareholderTotalDividends \\u003c= shareholderTotalExcluded){ return 0; }\\r\\n\\r\\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\\r\\n    }\\r\\n    \\r\\n    /** Register Donation On Receive */\\r\\n    receive() external payable {}\\r\\n    \\r\\n    // EVENTS\\r\\n    event OptOut(address generousUser, uint256 rewardGivenUp);\\r\\n    event LockedContract(uint256 timestamp, uint256 blockNumber);\\r\\n    event FundMigration(bool migratedBNB, uint256 amount, address token, address recipient);\\r\\n    event Claim(address claimer, uint256 amountBNB);\\r\\n    event SetSurgeBNBAddress(address newSurgeBNB);\\r\\n    event TransferOwnership(address newOwner);\\r\\n\\r\\n\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"migratedBNB\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"FundMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LockedContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"generousUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardGivenUp\",\"type\":\"uint256\"}],\"name\":\"OptOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSurgeBNB\",\"type\":\"address\"}],\"name\":\"SetSurgeBNBAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNB_PRICE_PLUS_TWO_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LockTheContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SurgeFundToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allVictims\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"brackets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividendsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSharesPerBracket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nVictims\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"V4\",\"type\":\"address\"}],\"name\":\"migrateBNBToV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"V4\",\"type\":\"address\"}],\"name\":\"migrateTokenToV4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"old\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVictim\",\"type\":\"address\"}],\"name\":\"migrateVictim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"optOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_victims\",\"type\":\"address[]\"}],\"name\":\"pullVictims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBUSDAsReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minClaim\",\"type\":\"uint256\"}],\"name\":\"setMinimumClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setXUSDAsReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"XUSDV2\",\"type\":\"address\"}],\"name\":\"upgradeXUSDToV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"victims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bracket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"arrayIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"wantsXUSD\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToReceiverToLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SurgeFund", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://edf2e524a73aefcfea95a410608ae069e0913bd782cae81473a1216c5f01889c"}