{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(0xcFa18d0857F4D7c7c9229ad682Be0A0d860Aa2F4);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract INMES is Ownable {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n\r\n    struct FiveMonthTokenTimeLocks {\r\n        uint256 totalTokens;\r\n        uint256[5] unlockTimes;\r\n    }\r\n\r\n    struct TenMonthTokenTimeLocks {\r\n        uint256 totalTokens;\r\n        uint256[10] unlockTimes;\r\n    }\r\n\r\n    mapping (address => FiveMonthTokenTimeLocks) private fiveMonthTokenTimeLocks;\r\n    mapping (address => TenMonthTokenTimeLocks) private tenMonthTokenTimeLocks;\r\n    mapping (address => bool) private userHasFiveMonthLock;\r\n    mapping (address => bool) private userHasTenMonthLock;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => bool) public exemptFromFees;\r\n    mapping (address => mapping(address => uint)) public _allowances;\r\n\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    bool public taxesEnabled;\r\n    address public marketingWallet;\r\n    address public burnWallet;\r\n    uint256 public marketingFee;\r\n    uint256 public burnFee;\r\n    address public cryptoMultisender;\r\n    bool public optimizedAirdropModeEnabled;\r\n    bool public tradeEnabled;\r\n    uint256 public firstUnlockDate;\r\n\r\n    constructor() {\r\n        totalSupply = 259000000e18;\r\n        name = \"INME SWAP\";\r\n        symbol = \"INMES\";\r\n        decimals = 18;\r\n        burnFee = 10;\r\n        marketingFee = 10;\r\n        burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n        marketingWallet = 0xcFa18d0857F4D7c7c9229ad682Be0A0d860Aa2F4;\r\n        cryptoMultisender = 0x17F3be331Cce3B6F66fAbE38dD885386C57D821D;\r\n        exemptFromFees[owner()] = true;\r\n        optimizedAirdropModeEnabled = true;\r\n        taxesEnabled = true;\r\n        tradeEnabled = false;\r\n        firstUnlockDate = block.timestamp + (164 * 1 days); \r\n        balances[owner()] = totalSupply;\r\n        emit Transfer(address(this),owner(),totalSupply);\r\n    }\r\n\r\n    function startFirstUnlockNow() public onlyOwner {\r\n        firstUnlockDate = block.timestamp;\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        tradeEnabled = true;\r\n    }\r\n\r\n    modifier onlyCryptoMultisender() {\r\n      require(_msgSender() == cryptoMultisender && tx.origin == owner());\r\n      _;\r\n    }\r\n\r\n    function setOptimizedAirdropMode(bool _enabled) public onlyOwner {\r\n      optimizedAirdropModeEnabled = _enabled;\r\n    }\r\n\r\n    function setMultisenderContractAddress(address _addr) public onlyOwner {\r\n      cryptoMultisender = _addr;\r\n    }\r\n\r\n    function gasOptimizedAirdrop(address[] calldata _addrs, uint256[] calldata _values) external virtual onlyCryptoMultisender {\r\n        require(optimizedAirdropModeEnabled, \"Optimized airdrop mode is not enabled.\");\r\n        require(balances[cryptoMultisender] > 0, \"The Crypto Multisender contract address has no tokens to distribute.\");\r\n        balances[cryptoMultisender] = 0;\r\n        for(uint256 i=0; i < _addrs.length; i++) {\r\n            balances[_addrs[i]] = balances[_addrs[i]] + _values[i];\r\n            emit Transfer(cryptoMultisender, _addrs[i], _values[i]);\r\n        }\r\n    }\r\n\r\n    function addFiveMonthTimeLocks(address[] memory _addrs) public onlyOwner {\r\n        uint256 intervalSize = 30 days;\r\n        for(uint i = 0; i < _addrs.length; i++) {\r\n            fiveMonthTokenTimeLocks[_addrs[i]] = FiveMonthTokenTimeLocks(\r\n                balanceOf(_addrs[i]),\r\n                [\r\n                    firstUnlockDate,\r\n                    firstUnlockDate + (1 * intervalSize),\r\n                    firstUnlockDate + (2 * intervalSize),\r\n                    firstUnlockDate + (3 * intervalSize),\r\n                    firstUnlockDate + (4 * intervalSize)\r\n                ]\r\n            );\r\n            userHasFiveMonthLock[_addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n    function addTenMonthTimeLocks(address[] memory _addrs) public onlyOwner {\r\n        uint256 intervalSize = 30 days;\r\n        for(uint i = 0; i < _addrs.length; i++) {\r\n            tenMonthTokenTimeLocks[_addrs[i]] = TenMonthTokenTimeLocks(\r\n                balanceOf(_addrs[i]),\r\n                [\r\n                    firstUnlockDate,\r\n                    firstUnlockDate + (1 * intervalSize),\r\n                    firstUnlockDate + (2 * intervalSize),\r\n                    firstUnlockDate + (3 * intervalSize),\r\n                    firstUnlockDate + (4 * intervalSize),\r\n                    firstUnlockDate + (5 * intervalSize),\r\n                    firstUnlockDate + (6 * intervalSize),\r\n                    firstUnlockDate + (7 * intervalSize),\r\n                    firstUnlockDate + (8 * intervalSize),\r\n                    firstUnlockDate + (9 * intervalSize)\r\n                ]\r\n            );\r\n            userHasTenMonthLock[_addrs[i]] = true;\r\n        }  \r\n    }\r\n\r\n    function allowance(address _owner, address spender)public view returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns(uint) {\r\n        return balances[owner];\r\n    }\r\n\r\n    function setMarketingWallet(address _marketingWallet) public onlyOwner {\r\n        marketingWallet = _marketingWallet;\r\n    }\r\n\r\n    function setTaxesEnabled(bool _enabled) public onlyOwner {\r\n        taxesEnabled = _enabled;\r\n    }\r\n\r\n    function setTaxFees(uint256 _marketingFee, uint256 _burnFee) public onlyOwner {\r\n        require((_marketingFee + _burnFee) <= 20, \"Total fees must not exceed 20%\");\r\n        marketingFee = _marketingFee;\r\n        burnFee = _burnFee;\r\n    }\r\n\r\n    function setExemptFromFees(address _addr, bool _exempt) public onlyOwner {\r\n        exemptFromFees[_addr] = _exempt;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal  {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function hasTimeLockedTokens(address _addr) internal returns(bool) {\r\n        bool res = false;\r\n        if(userHasFiveMonthLock[_addr]) {\r\n            res = fiveMonthTokenTimeLocks[_addr].unlockTimes[4] >= block.timestamp;\r\n            if(res == false) { userHasFiveMonthLock[_addr] = false; }\r\n        }\r\n        if(userHasTenMonthLock[_addr]) {\r\n            res = tenMonthTokenTimeLocks[_addr].unlockTimes[9] >= block.timestamp;\r\n            if(res == false) { userHasTenMonthLock[_addr] = false; }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function getAvailableTokens(address _addr) public returns(uint256) {\r\n        if(!hasTimeLockedTokens(_addr)) { return balanceOf(_addr); }\r\n        uint256 locked = 0;\r\n        uint256 initialTotalLocked = 0;\r\n        if(userHasFiveMonthLock[_addr]) {\r\n            initialTotalLocked = fiveMonthTokenTimeLocks[_addr].totalTokens;\r\n            for(uint i = 0; i < fiveMonthTokenTimeLocks[_addr].unlockTimes.length; i++) {\r\n                if(block.timestamp < fiveMonthTokenTimeLocks[_addr].unlockTimes[i]) {\r\n                    locked += (initialTotalLocked/5);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(userHasTenMonthLock[_addr]) {\r\n            initialTotalLocked = tenMonthTokenTimeLocks[_addr].totalTokens;\r\n            for(uint i = 0; i < tenMonthTokenTimeLocks[_addr].unlockTimes.length; i++) {\r\n                if(block.timestamp < tenMonthTokenTimeLocks[_addr].unlockTimes[i]) {\r\n                    locked += (initialTotalLocked/10);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return balanceOf(_addr) - locked;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _amount) internal {\r\n        require((tradeEnabled || _msgSender() == owner()), \"Trading is not yet enabled\");\r\n        uint256 available = getAvailableTokens(_from);\r\n        require(available >= _amount, \"Transferring time locked tokens is not permitted\");\r\n        require(balances[_from] >= _amount, \"Insufficient token balance\");\r\n        balances[_from] -= _amount;\r\n        uint256 toSend = _amount;\r\n        if(taxesEnabled && !exemptFromFees[_from] && !exemptFromFees[_to]) {\r\n            uint256 baseUnit = toSend / 100;\r\n            if(marketingFee > 0) {\r\n                uint256 mFee = baseUnit * marketingFee;\r\n                balances[marketingWallet] += mFee;\r\n                emit Transfer(_from, marketingWallet, mFee);\r\n                toSend -= mFee;\r\n            }\r\n            if(burnFee > 0) {\r\n                uint256 bFee = baseUnit * burnFee;\r\n                balances[burnWallet] += bFee;\r\n                emit Transfer(_from, burnWallet, bFee);\r\n                toSend -= bFee;\r\n            }\r\n        }\r\n        balances[_to] += toSend;\r\n        emit Transfer(_from, _to, toSend);\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _amount) public returns(bool) { \r\n        _transfer(_msgSender(),_to,_amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addFiveMonthTimeLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"}],\"name\":\"addTenMonthTimeLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoMultisender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"gasOptimizedAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimizedAirdropModeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_exempt\",\"type\":\"bool\"}],\"name\":\"setExemptFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMultisenderContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setOptimizedAirdropMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTaxesEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startFirstUnlockNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "INMES", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4b85663b1d3aa2a11b8ceeb4e25ca9a9f5936171833ea0a36035f2d10c97d48"}