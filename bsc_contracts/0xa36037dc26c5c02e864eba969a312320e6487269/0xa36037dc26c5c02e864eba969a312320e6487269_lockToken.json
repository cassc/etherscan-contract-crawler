{"SourceCode": "pragma solidity ^0.4.25;\r\n \r\ncontract Token {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n    return c;\r\n  }\r\n \r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n \r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n    return c;\r\n  }\r\n \r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n \r\ncontract owned {\r\n        address public owner;\r\n \r\n        constructor() public {\r\n            owner = msg.sender;\r\n        }\r\n \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n}\r\n \r\ncontract lockToken is owned{\r\n    using SafeMath for uint256;\r\n \r\n    /*\r\n     * deposit vars\r\n    */\r\n    struct Items {\r\n        address tokenAddress;\r\n        address withdrawalAddress;\r\n        uint256 tokenAmount;\r\n        uint256 unlockTime;\r\n        bool withdrawn;\r\n    }\r\n \r\n    uint256 public depositId;\r\n    uint256[] public allDepositIds;\r\n    mapping (address => uint256[]) public depositsByWithdrawalAddress;\r\n    mapping (uint256 => Items) public lockedToken;\r\n    mapping (address => mapping(address => uint256)) public walletTokenBalance;\r\n \r\n    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\r\n \r\n    /**\r\n     * Constrctor function\r\n    */\r\n    constructor() public {\r\n \r\n    }\r\n \r\n    /**\r\n     *lock tokens\r\n    */\r\n    function lockTokens(address _tokenAddress, uint256 _amount, uint256 _unlockTime) public returns (uint256 _id) {\r\n        require(_amount > 0, 'token amount is Zero');\r\n        require(_unlockTime < 10000000000, 'Enter an unix timestamp in seconds, not miliseconds');\r\n        require(Token(_tokenAddress).approve(this, _amount), 'Approve tokens failed');\r\n        require(Token(_tokenAddress).transferFrom(msg.sender, this, _amount), 'Transfer of tokens failed');\r\n \r\n        //update balance in address\r\n        walletTokenBalance[_tokenAddress][msg.sender] = walletTokenBalance[_tokenAddress][msg.sender].add(_amount);\r\n \r\n        address _withdrawalAddress = msg.sender;\r\n        _id = ++depositId;\r\n        lockedToken[_id].tokenAddress = _tokenAddress;\r\n        lockedToken[_id].withdrawalAddress = _withdrawalAddress;\r\n        lockedToken[_id].tokenAmount = _amount;\r\n        lockedToken[_id].unlockTime = _unlockTime;\r\n        lockedToken[_id].withdrawn = false;\r\n \r\n        allDepositIds.push(_id);\r\n        depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\r\n    }\r\n \r\n    /**\r\n     *withdraw tokens\r\n    */\r\n    function withdrawTokens(uint256 _id) public {\r\n        require(block.timestamp >= lockedToken[_id].unlockTime, 'Tokens are locked');\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress, 'Can withdraw by withdrawal Address only');\r\n        require(!lockedToken[_id].withdrawn, 'Tokens already withdrawn');\r\n        require(Token(lockedToken[_id].tokenAddress).transfer(msg.sender, lockedToken[_id].tokenAmount), 'Transfer of tokens failed');\r\n \r\n        lockedToken[_id].withdrawn = true;\r\n \r\n        //update balance in address\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\r\n \r\n        //remove this id from this address\r\n        uint256 i; uint256 j;\r\n        for(j=0; j<depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length; j++){\r\n            if(depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id){\r\n                for (i = j; i<depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length-1; i++){\r\n                    depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][i] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][i+1];\r\n                }\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length--;\r\n                break;\r\n            }\r\n        }\r\n        emit LogWithdrawal(msg.sender, lockedToken[_id].tokenAmount);\r\n    }\r\n \r\n     /*get total token balance in contract*/\r\n    function getTotalTokenBalance(address _tokenAddress) view public returns (uint256)\r\n    {\r\n       return Token(_tokenAddress).balanceOf(this);\r\n    }\r\n \r\n    /*get total token balance by address*/\r\n    function getTokenBalanceByAddress(address _tokenAddress, address _walletAddress) view public returns (uint256)\r\n    {\r\n       return walletTokenBalance[_tokenAddress][_walletAddress];\r\n    }\r\n \r\n    /*get allDepositIds*/\r\n    function getAllDepositIds() view public returns (uint256[])\r\n    {\r\n        return allDepositIds;\r\n    }\r\n \r\n    /*get getDepositDetails*/\r\n    function getDepositDetails(uint256 _id) view public returns (address, address, uint256, uint256, bool)\r\n    {\r\n        return(lockedToken[_id].tokenAddress,lockedToken[_id].withdrawalAddress,lockedToken[_id].tokenAmount,\r\n        lockedToken[_id].unlockTime,lockedToken[_id].withdrawn);\r\n    }\r\n \r\n    /*get DepositsByWithdrawalAddress*/\r\n    function getDepositsByWithdrawalAddress(address _withdrawalAddress) view public returns (uint256[])\r\n    {\r\n        return depositsByWithdrawalAddress[_withdrawalAddress];\r\n    }\r\n \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"_withdrawalAddress\",\"type\":\"address\"}],\"name\":\"getDepositsByWithdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalanceByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDepositIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositDetails\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedToken\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"}]", "ContractName": "lockToken", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://439af4106070df3f5e225b6f59dfcd03c85523595cbd1e3caad7f3737f0b480a"}