{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external view returns (address);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] memory path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] memory path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n}\r\n\r\ninterface ISwapFactory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract TokenDistributor {\r\n\tconstructor(address token) {\r\n\t\tIERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n\t}\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 private _tTotal;\r\n\taddress DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\tuint256 public startTradeBlock;\r\n\tuint256 public startTime;\r\n\tmapping(address => bool) public _feeWhiteList;\r\n\tmapping(address => bool) public _blackList;\r\n\tmapping(address => bool) public _swapPairList;\r\n\tmapping(address => bool) public _swapRouters;\r\n\r\n\taddress public immutable _mainPair;\r\n\tISwapRouter public immutable _swapRouter;\r\n\r\n\taddress fundAddress;\r\n\r\n\tIERC20 public CAKE;\r\n\tbool private inSwap;\r\n\r\n\tmodifier lockTheSwap() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\tTokenDistributor public token_distributor;\r\n\r\n\tconstructor(\r\n\t\tstring memory Name,\r\n\t\tstring memory Symbol,\r\n\t\tuint8 Decimals,\r\n\t\tuint256 Supply,\r\n\t\taddress routerAddress,\r\n\t\taddress cakeAddress,\r\n\t\taddress ReceiveAddress,\r\n\t\taddress FundAddress\r\n\t) {\r\n\t\t_name = Name;\r\n\t\t_symbol = Symbol;\r\n\t\t_decimals = Decimals;\r\n\t\t_tTotal = Supply * 10 ** _decimals;\r\n\t\t_balances[ReceiveAddress] = _tTotal;\r\n\t\temit Transfer(address(0), ReceiveAddress, _tTotal);\r\n\r\n\t\tfundAddress = FundAddress;\r\n\t\tISwapRouter swapRouter = ISwapRouter(routerAddress);\r\n\t\t_swapRouter = swapRouter;\r\n\t\t_allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n\t\t//\r\n\t\t_allowances[fundAddress][address(swapRouter)] = MAX;\r\n\t\t_swapRouters[address(swapRouter)] = true;\r\n\r\n\t\taddress ethPair;\r\n\t\tethPair = ISwapFactory(swapRouter.factory()).createPair(swapRouter.WETH(), address(this));\r\n\t\t_swapPairList[ethPair] = true;\r\n\t\t_mainPair = ethPair;\r\n\r\n\t\tCAKE = IERC20(cakeAddress);\r\n\r\n\t\t_feeWhiteList[ReceiveAddress] = true;\r\n\t\t_feeWhiteList[address(this)] = true;\r\n\t\t_feeWhiteList[msg.sender] = true;\r\n\t\t_feeWhiteList[address(0)] = true;\r\n\t\t_feeWhiteList[DEAD] = true;\r\n\r\n\t\texcludeHolder[DEAD] = true;\r\n\r\n\t\ttoken_distributor = new TokenDistributor(cakeAddress);\r\n\t}\r\n\r\n\tmodifier onlyWhiteList() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire(msgSender == fundAddress || msgSender == owner(), \"nw\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction symbol() external view override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction name() external view override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction decimals() external view override returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() external view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(msg.sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\tif (_allowances[sender][msg.sender] != MAX) {\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"approve from the zero address\");\r\n\t\trequire(spender != address(0), \"approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(!_blackList[from], \"bl\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\t\tuint256 balance = _balances[from];\r\n\t\trequire(balance >= amount, \"Insufficient balance\");\r\n\r\n\t\tbool takeFee;\r\n\t\tif (_swapPairList[from] || _swapPairList[to]) {\r\n\t\t\tif (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n\t\t\t\ttakeFee = true;\r\n\t\t\t\trequire(0 < startTradeBlock, \"not open\");\r\n\r\n\t\t\t\tuint256 maxSellAmount = (balance * 9999) / 10000;\r\n\t\t\t\tif (amount > maxSellAmount) {\r\n\t\t\t\t\tamount = maxSellAmount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_tokenTransfer(from, to, amount, takeFee);\r\n\r\n\t\tif (_balances[to] >= holderCondition) {\r\n\t\t\taddHolder(to);\r\n\t\t}\r\n\r\n\t\tif (from != address(this)) {\r\n\t\t\tif (takeFee) {\r\n\t\t\t\tprocessReward(_rewardGas);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tuint256 rewardFeeForBuy = 10;\r\n\tuint256 returnFeeForBuy = 10;\r\n\tuint256 DEADFeeForBuy = 20;\r\n\r\n\tuint256 rewardFeeForSell = 10;\r\n\tuint256 returnFeeForSell = 10;\r\n\tuint256 returnLpFeeForSell = 20;\r\n\tuint256 eralySellFee = 160;\r\n\r\n\tmapping(address => bool) firstBatchWhiteList;\r\n\tmapping(address => bool) secondBatchWhiteList;\r\n\tmapping(address => bool) thirdbatchWhiteList;\r\n\tuint256[2] timeInterval = [20, 120];\r\n\tuint256 whiteListTime = 240;\r\n\r\n\tuint256 earlyTime = 3600;\r\n\r\n\tfunction _tokenTransfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount,\r\n\t\tbool takeFee\r\n\t) private {\r\n\t\t_balances[sender] -= tAmount;\r\n\t\tuint256 feeAmount;\r\n\t\tuint256 opendtime = block.timestamp - startTime;\r\n\r\n\t\tif (opendtime < whiteListTime && takeFee) {\r\n\t\t\trequire(_swapPairList[sender], \"only buy now\");\r\n\t\t\trequire(\r\n\t\t\t\tfirstBatchWhiteList[recipient] ||\r\n\t\t\t\t\tsecondBatchWhiteList[recipient] ||\r\n\t\t\t\t\tthirdbatchWhiteList[recipient],\r\n\t\t\t\t\"nw\"\r\n\t\t\t);\r\n\t\t\tif (secondBatchWhiteList[recipient]) {\r\n\t\t\t\trequire(opendtime > timeInterval[0], \"not your turn\");\r\n\t\t\t} else if (thirdbatchWhiteList[recipient]) {\r\n\t\t\t\trequire(opendtime > timeInterval[1], \"not your turn\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (opendtime > whiteListTime && opendtime < earlyTime && takeFee) {\r\n\t\t\tif (_swapPairList[recipient]) {\r\n\t\t\t\tuint256 _eralySellFee = (tAmount * eralySellFee) / 1000;\r\n\t\t\t\t_takeTransfer(sender, fundAddress, _eralySellFee);\r\n\t\t\t\tfeeAmount += _eralySellFee;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (takeFee) {\r\n\t\t\tuint256 feeForAirdrop;\r\n\r\n\t\t\tuint256 _rewardFeeForBuy = (tAmount * rewardFeeForBuy) / 1000;\r\n\t\t\tuint256 _returnFeeForBuy = (tAmount * returnFeeForBuy) / 1000;\r\n\t\t\tuint256 _DEADFeeForBuy = (tAmount * DEADFeeForBuy) / 1000;\r\n\r\n\t\t\tuint256 _rewardFeeForSell = (tAmount * rewardFeeForSell) / 1000;\r\n\t\t\tuint256 _returnFeeForSell = (tAmount * returnFeeForSell) / 1000;\r\n\t\t\tuint256 _returnLpFeeForSell = (tAmount * returnLpFeeForSell) / 1000;\r\n\r\n\t\t\t// buy\r\n\t\t\tif (_swapPairList[sender]) {\r\n\t\t\t\tfeeAmount += _rewardFeeForBuy + _returnFeeForBuy + _DEADFeeForBuy;\r\n\t\t\t\t_takeTransfer(sender, DEAD, _DEADFeeForBuy);\r\n\t\t\t\t_takeTransfer(sender, address(this), feeAmount - _DEADFeeForBuy);\r\n\t\t\t}\r\n\t\t\t// sell\r\n\t\t\telse if (_swapPairList[recipient]) {\r\n\t\t\t\tfeeAmount += _rewardFeeForSell + _returnFeeForSell + _returnLpFeeForSell;\r\n\t\t\t\t_takeTransfer(\r\n\t\t\t\t\tsender,\r\n\t\t\t\t\taddress(this),\r\n\t\t\t\t\t_rewardFeeForSell + _returnFeeForSell + _returnLpFeeForSell\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t// airdrop\r\n\t\t\tif (feeAmount > 0) {\r\n\t\t\t\tfeeForAirdrop = AirDrop(sender, recipient, tAmount, feeAmount);\r\n\t\t\t\tfeeAmount += feeForAirdrop;\r\n\t\t\t}\r\n\r\n\t\t\tuint256 contract_balance = balanceOf(address(this));\r\n\t\t\tbool need_sell = contract_balance >= numTokensSellToFund;\r\n\t\t\tif (need_sell && !inSwap && _swapPairList[recipient]) {\r\n\t\t\t\tSwapTokenToFund(numTokensSellToFund);\r\n\t\t\t}\r\n\t\t}\r\n\t\t_takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\t}\r\n\r\n\tuint256 public numTokensSellToFund = 10 * 10 ** 18;\r\n\r\n\tfunction SwapTokenToFund(uint256 amount) private lockTheSwap {\r\n\t\tuint256 totalFee = rewardFeeForBuy +\r\n\t\t\treturnFeeForBuy +\r\n\t\t\trewardFeeForSell +\r\n\t\t\treturnFeeForSell +\r\n\t\t\treturnLpFeeForSell;\r\n\t\tuint256 lpAmount = (amount * returnLpFeeForSell) / totalFee / 2;\r\n\r\n\t\tif (lpAmount > 0) {\r\n\t\t\tuint256 balanceBefore = address(this).balance;\r\n\t\t\taddress[] memory path = new address[](2);\r\n\t\t\tpath[0] = address(this);\r\n\t\t\tpath[1] = _swapRouter.WETH();\r\n\t\t\t_swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\t\tlpAmount,\r\n\t\t\t\t0,\r\n\t\t\t\tpath,\r\n\t\t\t\taddress(this),\r\n\t\t\t\tblock.timestamp\r\n\t\t\t);\r\n\t\t\t_swapRouter.addLiquidityETH{value: address(this).balance - balanceBefore}(\r\n\t\t\t\taddress(this),\r\n\t\t\t\tlpAmount,\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\tfundAddress,\r\n\t\t\t\tblock.timestamp\r\n\t\t\t);\r\n\t\t\tamount -= lpAmount + lpAmount;\r\n\t\t}\r\n\r\n\t\taddress[] memory path2 = new address[](3);\r\n\t\tpath2[0] = address(this);\r\n\t\tpath2[1] = _swapRouter.WETH();\r\n\t\tpath2[2] = address(CAKE);\r\n\t\t_swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tamount,\r\n\t\t\t0,\r\n\t\t\tpath2,\r\n\t\t\taddress(token_distributor),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\r\n\t\tuint256 swapBalance = CAKE.balanceOf(address(token_distributor));\r\n\t\tCAKE.transferFrom(address(token_distributor), address(this), swapBalance);\r\n\r\n\t\tuint256 fundFee = (swapBalance * (returnFeeForBuy + returnFeeForSell)) / totalFee;\r\n\t\tCAKE.transfer(fundAddress, fundFee);\r\n\t}\r\n\r\n\taddress private lastAirdropAddress;\r\n\r\n\tfunction AirDrop(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount,\r\n\t\tuint256 feeAmount\r\n\t) private returns (uint256 feeForAirdrop) {\r\n\t\tfeeForAirdrop = feeAmount / 100000;\r\n\t\tif (feeForAirdrop > 0) {\r\n\t\t\tuint256 seed = (uint160(lastAirdropAddress) | block.number) ^ uint160(recipient);\r\n\t\t\tuint256 airdropAmount = feeForAirdrop / 3;\r\n\t\t\taddress airdropAddress;\r\n\t\t\tfor (uint256 i; i < 3; ) {\r\n\t\t\t\tairdropAddress = address(uint160(seed | tAmount));\r\n\t\t\t\t_takeTransfer(sender, airdropAddress, airdropAmount);\r\n\t\t\t\tunchecked {\r\n\t\t\t\t\t++i;\r\n\t\t\t\t\tseed = seed >> 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlastAirdropAddress = airdropAddress;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _funTransfer(address sender, address recipient, uint256 tAmount, uint256 fee) private {\r\n\t\t_balances[sender] -= tAmount;\r\n\t\tuint256 feeAmount = (tAmount / 100) * fee;\r\n\t\tif (feeAmount > 0) {\r\n\t\t\t_takeTransfer(sender, fundAddress, feeAmount);\r\n\t\t}\r\n\t\t_takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\t}\r\n\r\n\tfunction _takeTransfer(address sender, address to, uint256 tAmount) private {\r\n\t\t_balances[to] = _balances[to] + tAmount;\r\n\t\temit Transfer(sender, to, tAmount);\r\n\t}\r\n\r\n\t// tokenRewards\r\n\tuint256 public _rewardGas = 500000;\r\n\tuint256 public currentIndex;\r\n\tuint256 public RewardCondition = 1 ether;\r\n\tuint256 public holderCondition = 100 ether;\r\n\tuint256 public progressRewardBlock;\r\n\tuint256 public progressRewardBlockDebt = 1;\r\n\r\n\tfunction processReward(uint256 gas) private {\r\n\t\tuint256 blockNum = block.number;\r\n\r\n\t\tif (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (CAKE.balanceOf(address(this)) < RewardCondition) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 thisTokenTotal = _tTotal;\r\n\t\tuint256 tokenBalance;\r\n\r\n\t\taddress shareHolder;\r\n\t\tuint256 amount;\r\n\r\n\t\tuint256 shareholderCount = holders.length;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\r\n\t\twhile (gasUsed < gas && iterations < shareholderCount) {\r\n\t\t\tif (currentIndex >= shareholderCount) {\r\n\t\t\t\tcurrentIndex = 0;\r\n\t\t\t}\r\n\t\t\tshareHolder = holders[currentIndex];\r\n\t\t\ttokenBalance = balanceOf(shareHolder);\r\n\t\t\tif (!excludeHolder[shareHolder] && tokenBalance > holderCondition) {\r\n\t\t\t\tamount = (RewardCondition * tokenBalance) / thisTokenTotal;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\tCAKE.transfer(shareHolder, amount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgasUsed = gasUsed + (gasLeft - gasleft());\r\n\t\t\tgasLeft = gasleft();\r\n\t\t\tcurrentIndex++;\r\n\t\t\titerations++;\r\n\t\t}\r\n\t\tprogressRewardBlock = blockNum;\r\n\t}\r\n\r\n\taddress[] public DistributionAddress;\r\n\r\n\tfunction startTrade() external onlyWhiteList {\r\n\t\trequire(0 == startTradeBlock, \"trading\");\r\n\t\tstartTradeBlock = block.number;\r\n\t\tstartTime = block.timestamp;\r\n\t\t// \taddress[] memory path = new address[](2);\r\n\t\t// \tpath[0] = _swapRouter.WETH();\r\n\t\t// \tpath[1] = address(this);\r\n\t\t// \t_swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n\t\t// \t\t0,\r\n\t\t// \t\tpath,\r\n\t\t// \t\tfundAddress,\r\n\t\t// \t\tblock.timestamp\r\n\t\t// \t);\r\n\r\n\t\t// \tuint256 Buyedamount = _balances[fundAddress];\r\n\t\t// \t_balances[fundAddress] -= Buyedamount;\r\n\t\t// \tuint256 amount = Buyedamount / DistributionAddress.length;\r\n\t\t// \tfor (uint i = 0; i < DistributionAddress.length; i++) {\r\n\t\t// \t\t_takeTransfer(fundAddress, DistributionAddress[i], amount);\r\n\t\t// \t}\r\n\t}\r\n\r\n\taddress[] public holders;\r\n\tmapping(address => uint256) public holderIndex;\r\n\tmapping(address => bool) public excludeHolder;\r\n\r\n\tfunction addHolder(address adr) private {\r\n\t\tif (0 == holderIndex[adr]) {\r\n\t\t\tif (0 == holders.length || holders[0] != adr) {\r\n\t\t\t\tuint256 size;\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tsize := extcodesize(adr)\r\n\t\t\t\t}\r\n\t\t\t\tif (size > 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tholderIndex[adr] = holders.length;\r\n\t\t\t\tholders.push(adr);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// -----------------\r\n\tfunction withDrawToken(address tokenAddr) external onlyWhiteList {\r\n\t\tuint256 token_num = IERC20(tokenAddr).balanceOf(address(this));\r\n\t\tIERC20(tokenAddr).transfer(msg.sender, token_num);\r\n\t}\r\n\r\n\tfunction withDrawEth() external onlyWhiteList {\r\n\t\tuint256 balance = address(this).balance;\r\n\t\tpayable(msg.sender).transfer(balance);\r\n\t}\r\n\r\n\tfunction batchSetDistributionAddress(address[] memory addr) external onlyWhiteList {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\tDistributionAddress.push(addr[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setBlackList(address addr, bool enable) external onlyOwner {\r\n\t\t_blackList[addr] = enable;\r\n\t}\r\n\r\n\tfunction batchSetBlackList(address[] memory addr, bool enable) external onlyOwner {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\t_blackList[addr[i]] = enable;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction batchSetfirstBatchWhiteList(\r\n\t\taddress[] memory addr,\r\n\t\tbool enable\r\n\t) external onlyWhiteList {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\tfirstBatchWhiteList[addr[i]] = enable;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction batchSetsecondBatchWhiteList(\r\n\t\taddress[] memory addr,\r\n\t\tbool enable\r\n\t) external onlyWhiteList {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\tsecondBatchWhiteList[addr[i]] = enable;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction batchSetthirdbatchWhiteList(\r\n\t\taddress[] memory addr,\r\n\t\tbool enable\r\n\t) external onlyWhiteList {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\tthirdbatchWhiteList[addr[i]] = enable;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setRewardPrams(\r\n\t\tuint256 newRewardCondition,\r\n\t\tuint256 newHolderCondition,\r\n\t\tuint256 newProgressRewardBlockDebt\r\n\t) external onlyWhiteList {\r\n\t\tRewardCondition = newRewardCondition;\r\n\t\tholderCondition = newHolderCondition;\r\n\t\tprogressRewardBlockDebt = newProgressRewardBlockDebt;\r\n\t}\r\n\r\n\tfunction setNumTokensSellToFund(uint256 newNum) external onlyWhiteList {\r\n\t\tnumTokensSellToFund = newNum;\r\n\t}\r\n\r\n\tfunction setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n\t\t_feeWhiteList[addr] = enable;\r\n\t}\r\n\r\n\tfunction batchSetFeeWhiteList(address[] memory addr, bool enable) external onlyWhiteList {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\t_feeWhiteList[addr[i]] = enable;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n\t\texcludeHolder[addr] = enable;\r\n\t}\r\n\r\n\tfunction setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n\t\trequire(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n\t\t_rewardGas = rewardGas;\r\n\t}\r\n\r\n\tfunction setFundAddress(address newfund) external onlyWhiteList {\r\n\t\tfundAddress = newfund;\r\n\t\t_feeWhiteList[newfund] = true;\r\n\t}\r\n\r\n\tfunction setTax(\r\n\t\tuint256 _rewardFeeForBuy,\r\n\t\tuint256 _returnFeeForBuy,\r\n\t\tuint256 _DEADFeeForBuy,\r\n\t\tuint256 _rewardFeeForSell,\r\n\t\tuint256 _returnFeeForSell,\r\n\t\tuint256 _returnLpFeeForSell\r\n\t) external onlyWhiteList {\r\n\t\trewardFeeForBuy = _rewardFeeForBuy;\r\n\t\treturnFeeForBuy = _returnFeeForBuy;\r\n\t\tDEADFeeForBuy = _DEADFeeForBuy;\r\n\t\trewardFeeForSell = _rewardFeeForSell;\r\n\t\treturnFeeForSell = _returnFeeForSell;\r\n\t\treturnLpFeeForSell = _returnLpFeeForSell;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n}\r\n\r\ncontract DFLONG is AbsToken {\r\n\tconstructor()\r\n\t\tAbsToken(\r\n\t\t\t\"DFLONG\",\r\n\t\t\t\"DFLONG\",\r\n\t\t\t18,\r\n\t\t\t100000,\r\n\t\t\t0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n\t\t\t0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82,\r\n\t\t\t0x99ca97F2b9924132A5Ae2DD7B2aAf39A09f279e4,\r\n\t\t\t0xDbcbeC78BEe5f82f6FCd4eAb37E4e23EB6Ca7f3A\r\n\t\t)\r\n\t{}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAKE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchSetDistributionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetfirstBatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetsecondBatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetthirdbatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newfund\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHolderCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProgressRewardBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setRewardPrams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardFeeForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnFeeForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DEADFeeForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeeForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnFeeForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnLpFeeForSell\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_distributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DFLONG", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d20debed71911dd758a50226da1e85a910beb127fa7492b99c3c434fe7e0d7fc"}