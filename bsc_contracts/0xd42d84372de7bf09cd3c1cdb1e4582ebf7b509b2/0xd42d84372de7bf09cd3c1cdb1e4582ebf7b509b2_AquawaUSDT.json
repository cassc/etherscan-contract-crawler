{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-04-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\ncontract AquawaUSDT is ReentrancyGuard {\r\n    \r\n    enum Status {\r\n        PENDING,\r\n        FINISHED\r\n    }\r\n     enum LevelStatus {\r\n        NEWBIE,\r\n        SILVER,\r\n        GOLDEN,\r\n        DIAMOND\r\n    }\r\n     struct Stake {\r\n        uint256 amount;\r\n        uint256 time;\r\n        Status status;\r\n        uint256 endtime;\r\n    }\r\n    IERC20 public token;\r\n    address public owner;\r\n    address[] users;\r\n    uint256 public totalStakedAmounts = 0;\r\n    uint256 public minimumStake = 20 * 10**18; \r\n    uint256 public maximumStake = 10000 * 10**18;\r\n    uint256 public dailyInterestRate = 1;\r\n    uint256 public referralLevel1Percentage = 7;\r\n    uint256 public referralLevel2Percentage = 4;\r\n    uint256 public referralLevel3Percentage = 2;\r\n    uint256 public silverEligibleStakeAmount = 100 * 10**18; \r\n    uint256 public goldenEligibleStakeAmount = 1000 * 10**18; \r\n    uint256 public diamondEligibleStakeAmount = 100000 * 10**18; \r\n    uint256 public silverEligibleReferralCount = 50; \r\n    uint256 public goldenEligibleReferralCount = 100; \r\n    uint256 public diamondEligibleReferralCount = 200; \r\n    uint256 public silverReferralReward = 100 * 10**18;\r\n    uint256 public goldenReferralReward = 400 * 10**18; \r\n    uint256 public diamondReferralReward = 800 * 10**18;  \r\n    address[] public referrerAddress;\r\n    mapping(address => uint256) public directReferrerIncome24hrs;\r\n    mapping(address => uint256) public partnerReferrerIncome24hrs;\r\n  \r\n    mapping(address => address[]) public partnerReferrer;\r\n    mapping(address => mapping(address => bool)) public partnerReferrerValid;\r\n\r\n    mapping(address => Stake[]) public stakedAmounts;\r\n    mapping(address => uint256) public userTotalStakedAmounts;\r\n    mapping(address => bool) public isOldUser;\r\n    mapping(address => address) public referrers;\r\n    mapping(address => uint256) public referralEarnings;\r\n    mapping(address => address[]) public referralsList;\r\n    mapping(address => LevelStatus) public userLevel;\r\n    mapping(address => LevelStatus) public referrerLevel;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Reward(address indexed user, uint256 amount);\r\n    event Claimed(address indexed user, uint256 amount, uint256 stakeIndex);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 stakeIndex);\r\n\r\n    constructor(IERC20 _token) {\r\n        token = _token;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function stake(uint256 amount, address referrer) external nonReentrant {\r\n        require(amount >= minimumStake && amount <= maximumStake, \"Invalid amount\");\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"Token transfer failed\");\r\n       \r\n\r\n        if (referrers[msg.sender] == address(0) && referrer != address(0) && referrer != msg.sender && userTotalStakedAmounts[referrer] > 0) {\r\n            referrers[msg.sender] = referrer;\r\n            referralsList[referrer].push(msg.sender);\r\n\r\n            if (referralsList[referrer].length >= silverEligibleReferralCount && referrerLevel[referrer] != LevelStatus.DIAMOND) {\r\n                    uint256 reward;\r\n                if (referralsList[referrer].length >= diamondEligibleReferralCount) {\r\n                    reward = diamondReferralReward;\r\n                    referrerLevel[referrer] = LevelStatus.DIAMOND;\r\n                } else if (referralsList[referrer].length >= goldenEligibleReferralCount) {\r\n                    reward = goldenReferralReward;\r\n                    referrerLevel[referrer] = LevelStatus.GOLDEN;\r\n                } else if (referralsList[referrer].length >= silverEligibleReferralCount) {\r\n                    reward = silverReferralReward;\r\n                    referrerLevel[referrer] = LevelStatus.SILVER;\r\n                }\r\n\r\n                if(token.transfer(referrer, reward)){\r\n                    emit Reward(referrer, reward);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!isOldUser[msg.sender]){\r\n            isOldUser[msg.sender] = true;\r\n            users.push(msg.sender);\r\n        }\r\n        if(!isOldUser[msg.sender]){\r\n            stakedAmounts[msg.sender].push(Stake(amount, block.timestamp,Status.PENDING,block.timestamp+uint256(100 days)));\r\n        }\r\n        else{\r\n            stakedAmounts[msg.sender].push(Stake(amount, block.timestamp,Status.PENDING,block.timestamp+uint256(50 days)));\r\n        }\r\n        \r\n        userTotalStakedAmounts[msg.sender] +=amount;\r\n        totalStakedAmounts += amount;\r\n\r\n        if(userTotalStakedAmounts[msg.sender] > 0 && userTotalStakedAmounts[msg.sender] < silverEligibleStakeAmount){\r\n            userLevel[msg.sender] = LevelStatus.NEWBIE;\r\n        } else if(userTotalStakedAmounts[msg.sender] >= silverEligibleStakeAmount && userTotalStakedAmounts[msg.sender] < goldenEligibleStakeAmount){\r\n            userLevel[msg.sender] = LevelStatus.SILVER;\r\n        } else if(userTotalStakedAmounts[msg.sender] >= goldenEligibleStakeAmount && userTotalStakedAmounts[msg.sender] < diamondEligibleStakeAmount){\r\n            userLevel[msg.sender] = LevelStatus.GOLDEN;\r\n        } else if(userTotalStakedAmounts[msg.sender] >= diamondEligibleStakeAmount){\r\n            userLevel[msg.sender] = LevelStatus.DIAMOND;\r\n        }\r\n\r\n        uint256 referrer1Earnings =amount * referralLevel1Percentage / 100;\r\n        if(referrers[msg.sender] != address(0)){\r\n        referralEarnings[referrers[msg.sender]] += referrer1Earnings;\r\n        directReferrerIncome24hrs[referrers[msg.sender]]+=referrer1Earnings;\r\n        referrerAddress.push(referrers[msg.sender]);\r\n        address referrer2 = referrers[referrers[msg.sender]];\r\n        if (referrer2 != address(0)) {\r\n            if(partnerReferrerValid[referrer2][msg.sender]== false){\r\n                partnerReferrer[referrer2].push(msg.sender);\r\n                partnerReferrerValid[referrer2][msg.sender]=true;\r\n            }\r\n            referrerAddress.push(referrer2);\r\n            uint256 referrer2Earnings = amount * referralLevel2Percentage / 100;\r\n            referralEarnings[referrer2] += referrer2Earnings;\r\n            partnerReferrerIncome24hrs[referrer2]+=referrer2Earnings;\r\n            address referrer3 = referrers[referrer2];\r\n            if (referrer3 != address(0)) {\r\n                 if(partnerReferrerValid[referrer3][msg.sender]== false){\r\n                    partnerReferrer[referrer3].push(msg.sender);\r\n                    partnerReferrerValid[referrer3][msg.sender]=true;\r\n                }\r\n                referrerAddress.push(referrer3);\r\n                uint256 referrer3Earnings = amount * referralLevel3Percentage / 100;\r\n                referralEarnings[referrer3] += referrer3Earnings;\r\n                partnerReferrerIncome24hrs[referrer3]+=referrer3Earnings;\r\n            }\r\n        }\r\n        }\r\n\r\n        emit Staked(msg.sender, amount);\r\n    }\r\n\r\n    function claim(uint256 stakeIndex) external nonReentrant {\r\n        Stake[] storage stakes = stakedAmounts[msg.sender];\r\n        require(stakeIndex < stakes.length, \"Invalid stake index\");\r\n        require(block.timestamp >= stakes[stakeIndex].time + uint256(1 days),'You can withdraw only after 24 hrs');\r\n\r\n        Stake storage stakedData = stakes[stakeIndex];\r\n        require(stakedData.status != Status.FINISHED, \"Already tokens are withdrawn\");\r\n\r\n        uint256 earnings = calculateEarnings( stakedData.time, stakedData.amount);\r\n        require(earnings > 0, \"No earnings\");\r\n\r\n        require(token.transfer(msg.sender, earnings), \"Token transfer failed\");\r\n\r\n        stakedData.time = block.timestamp;\r\n\r\n        \r\n\r\n        emit Claimed(msg.sender, earnings, stakeIndex);\r\n    }\r\n\r\n     function withdraw(uint256 stakeIndex) external nonReentrant {\r\n        Stake[] storage stakes = stakedAmounts[msg.sender];\r\n        require(block.timestamp >= stakes[stakeIndex].endtime,'You still have remaining time to withdraw');\r\n        require(stakeIndex < stakes.length, \"Invalid stake index\");\r\n\r\n        Stake storage stakedData = stakes[stakeIndex];\r\n        require(stakedData.status != Status.FINISHED, \"Already tokens are withdrawn\");\r\n\r\n        uint256 amount = stakedData.amount;\r\n        uint256 earnings = calculateEarnings(stakedData.time, amount);\r\n\r\n        if (earnings > 0) {\r\n            if(earnings > amount){\r\n                earnings = amount;\r\n            }\r\n            require(token.transfer(msg.sender, earnings), \"Token transfer failed\");\r\n            emit Claimed(msg.sender, earnings,stakeIndex);\r\n        }\r\n\r\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\r\n        stakedData.status = Status.FINISHED;\r\n        userTotalStakedAmounts[msg.sender] -=amount;\r\n        totalStakedAmounts -= amount;\r\n        stakedData.endtime=0;\r\n        emit Withdrawn(msg.sender, amount, stakeIndex);\r\n    }\r\n\r\n    function calculateEarnings(uint256 startTime,uint256 amount) public view returns (uint256) {    \r\n        uint256 timeDiff = block.timestamp - startTime;\r\n        uint256 earningsPercentage = timeDiff * dailyInterestRate / 86400;\r\n        uint256 earnings = amount * earningsPercentage / 100;\r\n        \r\n        return earnings;\r\n    }\r\n\r\n    function changeOwner(address _owneraddress) external onlyOwner {\r\n        owner = _owneraddress;\r\n    }\r\n\r\n    function withdrawal(uint256 _amount) external onlyOwner {\r\n        require(token.transfer(owner, _amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function withdrawReferralEarnings() external nonReentrant {\r\n        uint256 amount = referralEarnings[msg.sender];\r\n        require(amount > 0, \"No earnings\");\r\n        referralEarnings[msg.sender] = 0;\r\n        require(token.transfer(msg.sender, amount), \"Token transfer failed\");\r\n    }\r\n\r\n    function setZero() public onlyOwner{\r\n        for(uint256 i=0;i<referrerAddress.length;i++){\r\n             address _referrer=referrerAddress[i];\r\n             directReferrerIncome24hrs[_referrer]=0;\r\n        }\r\n        for(uint256 i=0;i<referrerAddress.length;i++){\r\n             address _referrer=referrerAddress[i];\r\n             partnerReferrerIncome24hrs[_referrer]=0;\r\n        }\r\n    }\r\n\r\n    function updateReferralRewards(uint256 newsilverReward, uint256 newGoldenReward, uint256 newDiamondReward) external onlyOwner nonReentrant {\r\n        silverReferralReward = newsilverReward;\r\n        goldenReferralReward = newGoldenReward;\r\n        diamondReferralReward = newDiamondReward;\r\n    }\r\n\r\n    function updateEligibleReferralCounts(uint256 newSilverCount, uint256 newGoldenCount, uint256 newDiamondCount) external onlyOwner nonReentrant {\r\n        silverEligibleReferralCount = newSilverCount;\r\n        goldenEligibleReferralCount = newGoldenCount;\r\n        diamondEligibleReferralCount = newDiamondCount;\r\n    }\r\n\r\n    function updateEligibleStakeAmounts(uint256 silverAmount, uint256 goldenAmount, uint256 diamondAmount) external onlyOwner nonReentrant {\r\n        silverEligibleStakeAmount = silverAmount;\r\n        goldenEligibleStakeAmount = goldenAmount;\r\n        diamondEligibleStakeAmount = diamondAmount;\r\n    }\r\n\r\n    function updateDailyInterestRate(uint256 _dailyInterestRate) external onlyOwner nonReentrant{\r\n        dailyInterestRate=_dailyInterestRate;\r\n    }\r\n\r\n    function getPartnerReferrerIncome24hrs(address _address) external  view returns(uint256){\r\n        return  partnerReferrerIncome24hrs[_address];\r\n    }\r\n\r\n    function getDirectReferrerIncome24hrs(address _address) external  view returns(uint256){\r\n        return directReferrerIncome24hrs[_address];\r\n    }\r\n   \r\n\r\n    function getReferralEarnings(address user) external view returns (uint256) {\r\n        return referralEarnings[user];\r\n    }\r\n\r\n    function getUserStakes(address user) external view returns (Stake[] memory) {\r\n        return stakedAmounts[user];\r\n    }\r\n\r\n    function getReferrerAddress(address user) external view returns (address) {\r\n        return referrers[user];\r\n    }\r\n\r\n    function getUserReferralList(address user) external view returns (address[] memory) {\r\n        return referralsList[user];\r\n    }\r\n\r\n    function getUserReferralListCount(address user) external view returns (uint256) {\r\n        return referralsList[user].length;\r\n    }\r\n\r\n    function getPartnerReferrerCount(address user) external view returns (uint256){\r\n        return partnerReferrer[user].length;\r\n    }\r\n\r\n    function getReferralLevel(address user) external view returns (LevelStatus) {\r\n        return referrerLevel[user];\r\n    }\r\n\r\n    function getUserLevel(address user) external view returns (LevelStatus) {\r\n        return userLevel[user];\r\n    }\r\n\r\n    function getUserTotalStaked(address user) external view returns (uint256) {\r\n        return userTotalStakedAmounts[user];\r\n    }\r\n\r\n    function getTotalStaked() external view returns (uint256) {\r\n        return totalStakedAmounts;\r\n    }\r\n\r\n    function getUsers() external view returns (address[] memory) {\r\n        return users;\r\n    }\r\n\r\n    function getEligibleStakeAmounts() external view returns (uint256 bronze,uint256 silver,uint256 gold) {\r\n        return (silverEligibleStakeAmount,goldenEligibleStakeAmount,diamondEligibleStakeAmount);\r\n    }\r\n\r\n    function getEligibleReferralCounts() external view returns (uint256 bronze,uint256 silver,uint256 gold) {\r\n        return (silverEligibleReferralCount,goldenEligibleReferralCount,diamondEligibleReferralCount);\r\n    }\r\n\r\n    function getReferralRewards() external view returns (uint256 bronze,uint256 silver,uint256 gold) {\r\n        return (silverReferralReward,goldenReferralReward,diamondReferralReward);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owneraddress\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondEligibleReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondEligibleStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diamondReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directReferrerIncome24hrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDirectReferrerIncome24hrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEligibleReferralCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bronze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEligibleStakeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bronze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPartnerReferrerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPartnerReferrerIncome24hrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferralEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferralLevel\",\"outputs\":[{\"internalType\":\"enum AquawaUSDT.LevelStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bronze\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"silver\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferrerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLevel\",\"outputs\":[{\"internalType\":\"enum AquawaUSDT.LevelStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferralList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReferralListCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"enum AquawaUSDT.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"internalType\":\"struct AquawaUSDT.Stake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenEligibleReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenEligibleStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldenReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOldUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partnerReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerReferrerIncome24hrs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerReferrerValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLevel1Percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLevel2Percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralLevel3Percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralsList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referrerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerLevel\",\"outputs\":[{\"internalType\":\"enum AquawaUSDT.LevelStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverEligibleReferralCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverEligibleStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverReferralReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"enum AquawaUSDT.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dailyInterestRate\",\"type\":\"uint256\"}],\"name\":\"updateDailyInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSilverCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGoldenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDiamondCount\",\"type\":\"uint256\"}],\"name\":\"updateEligibleReferralCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"silverAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goldenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"diamondAmount\",\"type\":\"uint256\"}],\"name\":\"updateEligibleStakeAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newsilverReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newGoldenReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDiamondReward\",\"type\":\"uint256\"}],\"name\":\"updateReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLevel\",\"outputs\":[{\"internalType\":\"enum AquawaUSDT.LevelStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTotalStakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReferralEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AquawaUSDT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a45a86fbf945eadf823001a305cd328e624a28310713b21d314479b21063c890"}