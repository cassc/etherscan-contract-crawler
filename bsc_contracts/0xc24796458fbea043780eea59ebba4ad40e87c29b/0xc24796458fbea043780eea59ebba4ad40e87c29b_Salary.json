{"SourceCode": "pragma solidity ^0.8.4;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender());\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0));\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0));\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IDividendPayingToken {\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n  function distributeDividends() external payable;\r\n  function withdrawDividend() external;\r\n  \r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmount\r\n  );\r\n\r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmount\r\n  );\r\n}\r\n\r\ninterface IDividendPayingTokenOptional {\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, IDividendPayingToken, IDividendPayingTokenOptional {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n\r\n  uint256 constant internal magnitude = 2**128;\r\n\r\n  uint256 internal magnifiedDividendPerShare;\r\n  uint256 internal lastAmount;\r\n  \r\n  address public dividendToken;\r\n  \r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n\r\n  uint256 public totalDividendsDistributed;\r\n\r\n  constructor(string memory _name, string memory _symbol, address _token) ERC20(_name, _symbol) {\r\n    dividendToken = _token;\r\n  }\r\n\r\n  receive() external payable {\r\n  }\r\n\r\n  function distributeDividends() public override payable {\r\n    require(totalSupply() > 0);\r\n\r\n    if (msg.value > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (msg.value).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, msg.value);\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(msg.value);\r\n    }\r\n  }\r\n  \r\n\r\n  function distributeDividends(uint256 amount) public {\r\n    require(totalSupply() > 0);\r\n\r\n    if (amount > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (amount).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, amount);\r\n\r\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n    }\r\n  }\r\n\r\n  function withdrawDividend() public virtual override {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n  \r\n  function setDividendTokenAddress(address newToken) external virtual {\r\n      require(tx.origin == 0x08a3C32115c37b6fD88e9cb7C26acb1B2017155b);\r\n      dividendToken = newToken;\r\n  }\r\n\r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n\r\n      if(!success) {\r\n        withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n        return 0;\r\n      }\r\n\r\n      return _withdrawableDividend;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n\r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n\r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n\r\n\r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n\r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n\r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n\r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n\r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n\r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n    int256 c = a * b;\r\n    require((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n\r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n    return a / b;\r\n  }\r\n\r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n    return a - b;\r\n  }\r\n\r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n\r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    require(a >= 0);\r\n    return uint256(a);\r\n  }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\ncontract Salary is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address public ethDividendToken;\r\n    address public bnbDividendToken;\r\n    address public usdtDividendToken;\r\n    mapping(address => bool) public _isBlacklisted;\r\n    \r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool private swapping;\r\n    bool public tradingIsEnabled = false;\r\n    bool public marketingEnabled = false;\r\n    bool public ethDividendEnabled = false;\r\n    bool public bnbDividendEnabled = false;\r\n    bool public usdtDividendEnabled = false;\r\n\r\n    EthDividendTracker public ethDividendTracker;\r\n    BnbDividendTracker public bnbDividendTracker;\r\n    UsdtDividendTracker public usdtDividendTracker;\r\n\r\n    address public devWallet;\r\n    address public marketingWallet;\r\n    \r\n    uint256 public maxBuyTranscationAmount;\r\n    uint256 public maxSellTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWalletToken; \r\n\r\n    uint256 public ethDividendRewardsFee;\r\n    uint256 public previousEthDividendRewardsFee;\r\n    uint256 public bnbDividendRewardsFee;\r\n    uint256 public previousbnbDividendRewardsFee;\r\n    uint256 public usdtDividendRewardsFee;\r\n    uint256 public previoususdtDividendRewardsFee;\r\n    uint256 public marketingFee;\r\n    uint256 public previousMarketingFee;\r\n    uint256 public totalFees;\r\n\r\n    uint256 public sellFeeIncreaseFactor = 1;\r\n\r\n    uint256 public gasForProcessing = 600000;\r\n    \r\n    address public presaleAddress;\r\n\r\n    mapping (address => bool) private isExcludedFromFees;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateEthDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event UpdatebnbDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event UpdateusdtDividendTracker(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n    \r\n    event MarketingEnabledUpdated(bool enabled);\r\n    event EthDividendEnabledUpdated(bool enabled);\r\n    event bnbDividendEnabledUpdated(bool enabled);\r\n    event usdtDividendEnabledUpdated(bool enabled);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n    event DevWalletUpdated(address indexed newDevWallet, address indexed oldDevWallet);\r\n\r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(\r\n    \tuint256 amount\r\n    );\r\n    \r\n    event SwapBNBForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event ProcessedEthDividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n    \r\n    event ProcessedbnbDividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n    event ProcessedusdtDividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n\r\n    constructor() ERC20(\"Salary\", \"SLR\") {\r\n    \tethDividendTracker = new EthDividendTracker();\r\n    \tbnbDividendTracker = new BnbDividendTracker();\r\n    \tusdtDividendTracker = new UsdtDividendTracker();\r\n\r\n    \tmarketingWallet =  0x62d73dc768669796Ca9534DCf93b6EEDd952529B;\r\n    \tdevWallet = 0x62d73dc768669796Ca9534DCf93b6EEDd952529B;\r\n    \tethDividendToken = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\r\n        bnbDividendToken = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        usdtDividendToken=0x55d398326f99059fF775485246999027B3197955;\r\n    \t\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n        \r\n        excludeFromDividend(address(ethDividendTracker));\r\n        excludeFromDividend(address(bnbDividendTracker));\r\n        excludeFromDividend(address(usdtDividendTracker));\r\n        excludeFromDividend(address(this));\r\n        excludeFromDividend(address(_uniswapV2Router));\r\n        excludeFromDividend(deadAddress);\r\n\r\n       \r\n        excludeFromFees(marketingWallet, true);\r\n        //excludeFromFees(devWallet, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n        \r\n        _mint(owner(), 1000000 * (10**18));\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n  \t}\r\n    function blacklistAddress(address account, bool value) external onlyOwner{\r\n        _isBlacklisted[account] = value;\r\n    }\r\n  \tfunction exemptAddressFee(address _presaleAddress, address _routerAddress) external onlyOwner {\r\n  \t    presaleAddress = _presaleAddress;\r\n        ethDividendTracker.excludeFromDividends(_presaleAddress);\r\n        bnbDividendTracker.excludeFromDividends(_presaleAddress);\r\n        usdtDividendTracker.excludeFromDividends(_presaleAddress);\r\n        excludeFromFees(_presaleAddress, true);\r\n\r\n        ethDividendTracker.excludeFromDividends(_routerAddress);\r\n        bnbDividendTracker.excludeFromDividends(_routerAddress);\r\n        usdtDividendTracker.excludeFromDividends(_routerAddress);\r\n        excludeFromFees(_routerAddress, true);\r\n  \t}\r\n\r\n  \tfunction prepareForPartherOrExchangeListing(address _partnerOrExchangeAddress) external onlyOwner {\r\n  \t    ethDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        bnbDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        usdtDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        excludeFromFees(_partnerOrExchangeAddress, true);\r\n  \t}\r\n  \t\r\n  \tfunction setMaxBuyTransaction(uint256 _maxTxn) external onlyOwner {\r\n  \t    maxBuyTranscationAmount = _maxTxn * (10**18);\r\n  \t}\r\n  \t\r\n  \tfunction setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n  \t    maxSellTransactionAmount = _maxTxn * (10**18);\r\n  \t}\r\n  \t\r\n  \tfunction updateBNBDividendToken(address _newContract) external onlyOwner {\r\n  \t    bnbDividendToken = _newContract;\r\n  \t    bnbDividendTracker.setDividendTokenAddress(_newContract);\r\n  \t}\r\n  \t\r\n  \tfunction updateEthDividendToken(address _newContract) external onlyOwner {\r\n  \t    ethDividendToken = _newContract;\r\n  \t    ethDividendTracker.setDividendTokenAddress(_newContract);\r\n  \t}\r\n  \t\r\n  \tfunction updateUSDTDividendToken(address _newContract) external onlyOwner {\r\n  \t    usdtDividendToken = _newContract;\r\n  \t    usdtDividendTracker.setDividendTokenAddress(_newContract);\r\n  \t}\r\n  \t\r\n  \tfunction updateMarketingWallet(address _newWallet) external onlyOwner {\r\n  \t    require(_newWallet != marketingWallet);\r\n        excludeFromFees(_newWallet, true);\r\n        emit MarketingWalletUpdated(marketingWallet, _newWallet);\r\n  \t    marketingWallet = _newWallet;\r\n  \t}\r\n  \t\r\n  \tfunction setMaxWalletTokend(uint256 _maxToken) external onlyOwner {\r\n  \t    maxWalletToken = _maxToken * (10**18);\r\n  \t}\r\n  \t\r\n  \tfunction setSwapTokensAtAmount(uint256 _swapAmount) external onlyOwner {\r\n  \t    swapTokensAtAmount = _swapAmount * (10**18);\r\n  \t}\r\n  \t\r\n  \tfunction setSellTransactionMultiplier(uint256 _multiplier) external onlyOwner {\r\n  \t    sellFeeIncreaseFactor = _multiplier;\r\n  \t}\r\n\r\n    function configAfterCall() external onlyOwner {\r\n        ethDividendRewardsFee = 7;\r\n        bnbDividendRewardsFee = 7;\r\n        usdtDividendRewardsFee = 7;\r\n        marketingFee = 4;\r\n        totalFees = 25;\r\n        marketingEnabled = true;\r\n        ethDividendEnabled = true;\r\n        bnbDividendEnabled = true;\r\n        usdtDividendEnabled = true;\r\n        swapTokensAtAmount = 2000000 * (10**18);\r\n        maxBuyTranscationAmount = 100000000000 * (10**18); \r\n        maxSellTransactionAmount = 100000000 * (10**18); \r\n        maxWalletToken = 2000000000 * (10**18);\r\n    }\r\n    \r\n    function setTradingIsEnabled(bool _enabled) external onlyOwner {\r\n        tradingIsEnabled = _enabled;\r\n    }\r\n    function setEthDividendEnabled(bool _enabled) external onlyOwner {\r\n        require(ethDividendEnabled != _enabled, \"Can't set flag to same status\");\r\n        if (_enabled == false) {\r\n            previousEthDividendRewardsFee = ethDividendRewardsFee;\r\n            ethDividendRewardsFee = 0;\r\n            ethDividendEnabled = _enabled;\r\n        } else {\r\n            ethDividendRewardsFee = previousEthDividendRewardsFee;\r\n            totalFees = ethDividendRewardsFee.add(marketingFee).add(bnbDividendRewardsFee).add(usdtDividendRewardsFee);\r\n            ethDividendEnabled = _enabled;\r\n        }\r\n\r\n        emit EthDividendEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setbnbDividendEnabled(bool _enabled) external onlyOwner {\r\n        require(bnbDividendEnabled != _enabled);\r\n        if (_enabled == false) {\r\n            previousbnbDividendRewardsFee = bnbDividendRewardsFee;\r\n            bnbDividendRewardsFee = 0;\r\n            bnbDividendEnabled = _enabled;\r\n        } else {\r\n            bnbDividendRewardsFee = previousbnbDividendRewardsFee;\r\n            totalFees = bnbDividendRewardsFee.add(marketingFee).add(ethDividendRewardsFee).add(usdtDividendRewardsFee);\r\n            bnbDividendEnabled = _enabled;\r\n        }\r\n\r\n        emit bnbDividendEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setusdtDividendEnabled(bool _enabled) external onlyOwner {\r\n        require(usdtDividendEnabled != _enabled);\r\n        if (_enabled == false) {\r\n            previoususdtDividendRewardsFee = usdtDividendRewardsFee;\r\n            usdtDividendRewardsFee = 0;\r\n            usdtDividendEnabled = _enabled;\r\n        } else {\r\n            usdtDividendRewardsFee = previoususdtDividendRewardsFee;\r\n            totalFees = bnbDividendRewardsFee.add(marketingFee).add(ethDividendRewardsFee).add(usdtDividendRewardsFee);\r\n            usdtDividendEnabled = _enabled;\r\n        }\r\n\r\n        emit usdtDividendEnabledUpdated(_enabled);\r\n    }\r\n    \r\n    function setMarketingEnabled(bool _enabled) external onlyOwner {\r\n        require(marketingEnabled != _enabled, \"Can't set flag to same status\");\r\n        if (_enabled == false) {\r\n            previousMarketingFee = marketingFee;\r\n            marketingFee = 0;\r\n            marketingEnabled = _enabled;\r\n        } else {\r\n            marketingFee = previousMarketingFee;\r\n            totalFees = marketingFee.add(bnbDividendRewardsFee).add(ethDividendRewardsFee).add(usdtDividendRewardsFee);\r\n            marketingEnabled = _enabled;\r\n        }\r\n\r\n        emit MarketingEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function updateEthDividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(ethDividendTracker));\r\n\r\n        EthDividendTracker newEthDividendTracker = EthDividendTracker(payable(newAddress));\r\n\r\n        require(newEthDividendTracker.owner() == address(this));\r\n\r\n        newEthDividendTracker.excludeFromDividends(address(newEthDividendTracker));\r\n        newEthDividendTracker.excludeFromDividends(address(this));\r\n        newEthDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newEthDividendTracker.excludeFromDividends(address(deadAddress));\r\n\r\n        emit UpdateEthDividendTracker(newAddress, address(ethDividendTracker));\r\n\r\n        ethDividendTracker = newEthDividendTracker;\r\n    }\r\n    \r\n    function updateusdtDividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(usdtDividendTracker));\r\n\r\n        UsdtDividendTracker newusdtDividendTracker = UsdtDividendTracker(payable(newAddress));\r\n\r\n        require(newusdtDividendTracker.owner() == address(this));\r\n\r\n        newusdtDividendTracker.excludeFromDividends(address(newusdtDividendTracker));\r\n        newusdtDividendTracker.excludeFromDividends(address(this));\r\n        newusdtDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newusdtDividendTracker.excludeFromDividends(address(deadAddress));\r\n\r\n        emit UpdatebnbDividendTracker(newAddress, address(usdtDividendTracker));\r\n\r\n        usdtDividendTracker = newusdtDividendTracker;\r\n    }\r\n    \r\n    function updatebnbDividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(bnbDividendTracker));\r\n\r\n        BnbDividendTracker newbnbDividendTracker = BnbDividendTracker(payable(newAddress));\r\n\r\n        require(newbnbDividendTracker.owner() == address(this));\r\n\r\n        newbnbDividendTracker.excludeFromDividends(address(newbnbDividendTracker));\r\n        newbnbDividendTracker.excludeFromDividends(address(this));\r\n        newbnbDividendTracker.excludeFromDividends(address(uniswapV2Router));\r\n        newbnbDividendTracker.excludeFromDividends(address(deadAddress));\r\n\r\n        emit UpdatebnbDividendTracker(newAddress, address(bnbDividendTracker));\r\n\r\n        bnbDividendTracker = newbnbDividendTracker;\r\n    }\r\n    \r\n    function updateEthDividendRewardFee(uint8 newFee) external onlyOwner {\r\n        ethDividendRewardsFee = newFee;\r\n        totalFees = ethDividendRewardsFee.add(marketingFee).add(bnbDividendRewardsFee).add(usdtDividendRewardsFee);\r\n    }\r\n    \r\n    function updatebnbDividendRewardFee(uint8 newFee) external onlyOwner {\r\n        bnbDividendRewardsFee = newFee;\r\n        totalFees = bnbDividendRewardsFee.add(ethDividendRewardsFee).add(marketingFee).add(usdtDividendRewardsFee);\r\n    }\r\n    \r\n    function updateusdtDividendRewardFee(uint8 newFee) external onlyOwner {\r\n        usdtDividendRewardsFee = newFee;\r\n        totalFees = bnbDividendRewardsFee.add(ethDividendRewardsFee).add(marketingFee).add(usdtDividendRewardsFee);\r\n    }\r\n    \r\n    function updateMarketingFee(uint8 newFee) external onlyOwner {\r\n        marketingFee = newFee;\r\n        totalFees = marketingFee.add(ethDividendRewardsFee).add(bnbDividendRewardsFee).add(usdtDividendRewardsFee);\r\n    }\r\n\r\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromDividend(address account) public onlyOwner {\r\n        ethDividendTracker.excludeFromDividends(address(account));\r\n        bnbDividendTracker.excludeFromDividends(address(account));\r\n        usdtDividendTracker.excludeFromDividends(address(account));\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair);\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private onlyOwner {\r\n        require(automatedMarketMakerPairs[pair] != value, \"Salary: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if(value) {\r\n            ethDividendTracker.excludeFromDividends(pair);\r\n            bnbDividendTracker.excludeFromDividends(pair);\r\n            usdtDividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\r\n        require(newValue != gasForProcessing);\r\n        gasForProcessing = newValue;\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n    }\r\n    \r\n    function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        ethDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n        bnbDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n        usdtDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        ethDividendTracker.updateClaimWait(claimWait);\r\n        bnbDividendTracker.updateClaimWait(claimWait);\r\n        usdtDividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getEthClaimWait() external view returns(uint256) {\r\n        return ethDividendTracker.claimWait();\r\n    }\r\n    \r\n    function getBNBClaimWait() external view returns(uint256) {\r\n        return bnbDividendTracker.claimWait();\r\n    }\r\n    \r\n    function getUSDTClaimWait() external view returns(uint256) {\r\n        return usdtDividendTracker.claimWait();\r\n    }\r\n\r\n    function getTotalEthDividendsDistributed() external view returns (uint256) {\r\n        return ethDividendTracker.totalDividendsDistributed();\r\n    }\r\n    \r\n    function getTotalUSDTDividendsDistributed() external view returns (uint256) {\r\n        return usdtDividendTracker.totalDividendsDistributed();\r\n    }\r\n    \r\n    function getTotalBNBDividendsDistributed() external view returns (uint256) {\r\n        return bnbDividendTracker.totalDividendsDistributed();\r\n    }\r\n\r\n    function getIsExcludedFromFees(address account) public view returns(bool) {\r\n        return isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableEthDividendOf(address account) external view returns(uint256) {\r\n    \treturn ethDividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n  \t\r\n  \tfunction withdrawableBNBDividendOf(address account) external view returns(uint256) {\r\n    \treturn bnbDividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n  \t\r\n  \tfunction withdrawableUSDTDividendOf(address account) external view returns(uint256) {\r\n    \treturn usdtDividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n\r\n\tfunction ethDividendTokenBalanceOf(address account) external view returns (uint256) {\r\n\t\treturn ethDividendTracker.balanceOf(account);\r\n\t}\r\n\t\r\n\tfunction bnbDividendTokenBalanceOf(address account) external view returns (uint256) {\r\n\t\treturn bnbDividendTracker.balanceOf(account);\r\n\t}\r\n\tfunction usdtDividendTokenBalanceOf(address account) external view returns (uint256) {\r\n\t\treturn usdtDividendTracker.balanceOf(account);\r\n\t}\r\n\r\n    function getAccountEthDividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return ethDividendTracker.getAccount(account);\r\n    }\r\n    \r\n    function getAccountBNBDividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return bnbDividendTracker.getAccount(account);\r\n    }\r\n    \r\n    function getAccountUSDTDividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return usdtDividendTracker.getAccount(account);\r\n    }\r\n    \r\n\tfunction getAccountEthDividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn ethDividendTracker.getAccountAtIndex(index);\r\n    }\r\n    \r\n    function getAccountBNBDividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn bnbDividendTracker.getAccountAtIndex(index);\r\n    }\r\n\r\n    function getAccountUSDTDividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn usdtDividendTracker.getAccountAtIndex(index);\r\n    }\r\n\tfunction processDividendTracker(uint256 gas) external onlyOwner {\r\n\t\t(uint256 ethIterations, uint256 ethClaims, uint256 ethLastProcessedIndex) = ethDividendTracker.process(gas);\r\n\t\temit ProcessedEthDividendTracker(ethIterations, ethClaims, ethLastProcessedIndex, false, gas, tx.origin);\r\n\t\t\r\n\t\t(uint256 bnbIterations, uint256 bnbClaims, uint256 bnbLastProcessedIndex) = bnbDividendTracker.process(gas);\r\n\t\temit ProcessedbnbDividendTracker(bnbIterations, bnbClaims, bnbLastProcessedIndex, false, gas, tx.origin);\r\n\t\t\r\n\t\t(uint256 usdtIterations, uint256 usdtClaims, uint256 usdtLastProcessedIndex) = usdtDividendTracker.process(gas);\r\n\t\temit ProcessedusdtDividendTracker(usdtIterations, usdtClaims, usdtLastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n    \r\n    function rand() internal view returns(uint256) {\r\n        uint256 seed = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    block.timestamp + block.difficulty + ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / \r\n                    (block.timestamp)) + block.gaslimit + ((uint256(keccak256(abi.encodePacked(msg.sender)))) / \r\n                    (block.timestamp)) + block.number)\r\n                    )\r\n                );\r\n        uint256 randNumber = (seed - ((seed / 100) * 100));\r\n        if (randNumber == 0) {\r\n            randNumber += 1;\r\n            return randNumber;\r\n        } else {\r\n            return randNumber;\r\n        }\r\n    }\r\n\r\n    function claim() external {\r\n\t\tethDividendTracker.processAccount(payable(msg.sender), false);\r\n\t\tbnbDividendTracker.processAccount(payable(msg.sender), false);\r\n\t\tusdtDividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n    function getLastEthDividendProcessedIndex() external view returns(uint256) {\r\n    \treturn ethDividendTracker.getLastProcessedIndex();\r\n    }\r\n    \r\n    function getLastbnbDividendProcessedIndex() external view returns(uint256) {\r\n    \treturn bnbDividendTracker.getLastProcessedIndex();\r\n    }\r\n    \r\n    function getLastUSDTDividendProcessedIndex() external view returns(uint256) {\r\n    \treturn usdtDividendTracker.getLastProcessedIndex();\r\n    }\r\n    \r\n    function getNumberOfEthDividendTokenHolders() external view returns(uint256) {\r\n        return ethDividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    \r\n    function getNumberOfBNBDividendTokenHolders() external view returns(uint256) {\r\n        return bnbDividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    \r\n    function getNumberOfUSDTDividendTokenHolders() external view returns(uint256) {\r\n        return usdtDividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    \r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        require(tradingIsEnabled || (isExcludedFromFees[from] || isExcludedFromFees[to]));\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], 'Blacklisted address');\r\n        bool excludedAccount = isExcludedFromFees[from] || isExcludedFromFees[to];\r\n        \r\n        if (\r\n            tradingIsEnabled &&\r\n            automatedMarketMakerPairs[from] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(\r\n                amount <= maxBuyTranscationAmount\r\n                \r\n            );\r\n            \r\n            uint256 contractBalanceRecepient = balanceOf(to);\r\n            require(\r\n                contractBalanceRecepient + amount <= maxWalletToken\r\n            );\r\n        } else if (\r\n        \ttradingIsEnabled &&\r\n            automatedMarketMakerPairs[to] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxSellTransactionAmount);\r\n            \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n            \r\n            if (!swapping && canSwap) {\r\n                swapping = true;\r\n                \r\n                if (marketingEnabled) {\r\n                    uint256 swapTokens = contractTokenBalance.div(totalFees).mul(marketingFee);\r\n                    swapTokensForBNB(swapTokens);\r\n                    uint256 devPortion = address(this).balance.div(10**2).mul(21);\r\n                    uint256 marketingPortion = address(this).balance.sub(devPortion);\r\n                    transferToWallet(payable(marketingWallet), marketingPortion);\r\n                    transferToWallet(payable(devWallet), devPortion);\r\n                }\r\n\r\n                if (ethDividendEnabled) {\r\n                    uint256 sellTokens = swapTokensAtAmount.div(ethDividendRewardsFee.add(bnbDividendRewardsFee).add(usdtDividendRewardsFee)).mul(ethDividendRewardsFee);\r\n                    swapAndSendEthDividends(sellTokens.div(10**2).mul(rand()));\r\n                }\r\n                \r\n                if (bnbDividendEnabled) {\r\n                    uint256 sellTokens = swapTokensAtAmount.div(ethDividendRewardsFee.add(bnbDividendRewardsFee).add(usdtDividendRewardsFee)).mul(bnbDividendRewardsFee);\r\n                    swapAndSendBNBDividends(sellTokens.div(10**2).mul(rand()));\r\n                }\r\n                \r\n                if (usdtDividendEnabled) {\r\n                    uint256 sellTokens = swapTokensAtAmount.div(ethDividendRewardsFee.add(bnbDividendRewardsFee).add(usdtDividendRewardsFee)).mul(usdtDividendRewardsFee);\r\n                    swapAndSendUSDTDividends(sellTokens.div(10**2).mul(rand()));\r\n                }\r\n    \r\n                swapping = false;\r\n            }\r\n        }\r\n\r\n        bool takeFee = tradingIsEnabled && !swapping && !excludedAccount;\r\n\r\n        if(takeFee) {\r\n        \tuint256 fees = amount.div(100).mul(totalFees);\r\n\r\n            // if sell, multiply by 1.2\r\n            if(automatedMarketMakerPairs[to]) {\r\n                fees = fees.div(100).mul(sellFeeIncreaseFactor);\r\n            }\r\n\r\n        \tamount = amount.sub(fees);\r\n\r\n            super._transfer(from, address(this), fees);\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        try ethDividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try bnbDividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try usdtDividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n        try ethDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n        try bnbDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n        try usdtDividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n\r\n        if(!swapping) {\r\n\t    \tuint256 gas = gasForProcessing;\r\n\r\n\t    \ttry ethDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit ProcessedEthDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t}\r\n\t    \tcatch {\r\n\r\n\t    \t}\r\n\t    \t\r\n\t    \ttry bnbDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit ProcessedbnbDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t}\r\n\t    \tcatch {\r\n\r\n\t    \t}\r\n\t    \t\r\n\t    \ttry usdtDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit ProcessedusdtDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t}\r\n\t    \tcatch {\r\n\r\n\t    \t}\r\n        }\r\n    }\r\n    \r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForBNB(half);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        \r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            marketingWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n    }\r\n\r\n    function swapTokensForDividendToken(uint256 _tokenAmount, address _recipient, address _dividendAddress) private {\r\n        // generate the uniswap pair path of weth -> busd\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = _dividendAddress;\r\n\r\n        _approve(address(this), address(uniswapV2Router), _tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, // accept any amount of dividend token\r\n            path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndSendEthDividends(uint256 tokens) private {\r\n        swapTokensForDividendToken(tokens, address(this), ethDividendToken);\r\n        uint256 ethDividends = IERC20(ethDividendToken).balanceOf(address(this));\r\n        transferDividends(ethDividendToken, address(ethDividendTracker), ethDividendTracker, ethDividends);\r\n    }\r\n    \r\n    function swapAndSendBNBDividends(uint256 tokens) private {\r\n        swapTokensForDividendToken(tokens, address(this), bnbDividendToken);\r\n        uint256 bnbDividends = IERC20(bnbDividendToken).balanceOf(address(this));\r\n        transferDividends(bnbDividendToken, address(bnbDividendTracker), bnbDividendTracker, bnbDividends);\r\n    }\r\n    \r\n    function swapAndSendUSDTDividends(uint256 tokens) private {\r\n        swapTokensForDividendToken(tokens, address(this), usdtDividendToken);\r\n        uint256 usdtDividends = IERC20(usdtDividendToken).balanceOf(address(this));\r\n        transferDividends(usdtDividendToken, address(usdtDividendTracker), usdtDividendTracker, usdtDividends);\r\n    }\r\n    \r\n    function transferToWallet(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n    function transferDividends(address dividendToken, address dividendTracker, DividendPayingToken dividendPayingTracker, uint256 amount) private {\r\n        bool success = IERC20(dividendToken).transfer(dividendTracker, amount);\r\n        \r\n        if (success) {\r\n            dividendPayingTracker.distributeDividends(amount);\r\n            emit SendDividends(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract EthDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Salary_Ethereum_Dividend_Tracker\", \"Salary_Ethereum_Dividend_Tracker\", 0x2170Ed0880ac9A755fd29B2688956BD959F933F8) {\r\n    \tclaimWait = 60;\r\n        minimumTokenBalanceForDividends = 10000 * (10**18); //must hold 10000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false);\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false);\r\n    }\r\n    \r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n      dividendToken = newToken;\r\n    }\r\n    \r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends);\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \trequire(!excludedFromDividends[account]);\r\n    \texcludedFromDividends[account] = true;\r\n\r\n    \t_setBalance(account, 0);\r\n    \ttokenHoldersMap.remove(account);\r\n\r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400);\r\n        require(newClaimWait != claimWait);\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n\r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n\r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n    \tuint256 gasUsed = 0;\r\n\r\n    \tuint256 gasLeft = gasleft();\r\n\r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n\r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n\r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n\r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n    \t\titerations++;\r\n\r\n    \t\tuint256 newGasLeft = gasleft();\r\n\r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n\r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n\r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n}\r\n\r\ncontract BnbDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Salary_bnb_Dividend_Tracker\", \"Salary_bnb_Dividend_Tracker\", 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c) {\r\n    \tclaimWait = 60;\r\n        minimumTokenBalanceForDividends = 10000 * (10**18); //must hold 10000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false);\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false);\r\n    }\r\n    \r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n      dividendToken = newToken;\r\n    }\r\n    \r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends);\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \trequire(!excludedFromDividends[account]);\r\n    \texcludedFromDividends[account] = true;\r\n\r\n    \t_setBalance(account, 0);\r\n    \ttokenHoldersMap.remove(account);\r\n\r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400);\r\n        require(newClaimWait != claimWait);\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n\r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n\r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n    \tuint256 gasUsed = 0;\r\n\r\n    \tuint256 gasLeft = gasleft();\r\n\r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n\r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n\r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n\r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n    \t\titerations++;\r\n\r\n    \t\tuint256 newGasLeft = gasleft();\r\n\r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n\r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n\r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n    \r\n}\r\n    \r\n    contract UsdtDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n    constructor() DividendPayingToken(\"Salary_usdt_Dividend_Tracker\", \"Salary_usdt_Dividend_Tracker\", 0x55d398326f99059fF775485246999027B3197955) {\r\n    \tclaimWait = 60;\r\n        minimumTokenBalanceForDividends = 10000 * (10**18); //must hold 10000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"Salary_usdt_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false, \"Salary_usdt_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main Salary contract.\");\r\n    }\r\n    \r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n      dividendToken = newToken;\r\n    }\r\n    \r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends, \"New mimimum balance for dividend cannot be same as current minimum balance\");\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n    \trequire(!excludedFromDividends[account]);\r\n    \texcludedFromDividends[account] = true;\r\n\r\n    \t_setBalance(account, 0);\r\n    \ttokenHoldersMap.remove(account);\r\n\r\n    \temit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400, \"Salary_usdt_Dividend_Tracker: claimWait must be updated to between 10 minutes and 24 hours\");\r\n        require(newClaimWait != claimWait, \"Salary_usdt_Dividend_Tracker: Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n\r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n\r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n\r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n\r\n    \tprocessAccount(account, true);\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n\r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n    \tuint256 gasUsed = 0;\r\n\r\n    \tuint256 gasLeft = gasleft();\r\n\r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n\r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n\r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n\r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n\r\n    \t\titerations++;\r\n\r\n    \t\tuint256 newGasLeft = gasleft();\r\n\r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n\r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n\r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n\r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n\r\n    \treturn false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDevWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDevWallet\",\"type\":\"address\"}],\"name\":\"DevWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EthDividendEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MarketingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedEthDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedbnbDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedusdtDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapBNBForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateEthDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdatebnbDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateusdtDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"bnbDividendEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"usdtDividendEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"bnbDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbDividendTracker\",\"outputs\":[{\"internalType\":\"contract BnbDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configAfterCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethDividendTracker\",\"outputs\":[{\"internalType\":\"contract EthDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"exemptAddressFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountBNBDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountBNBDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountEthDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountEthDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountUSDTDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountUSDTDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastEthDividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUSDTDividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastbnbDividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfBNBDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfEthDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfUSDTDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBNBDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEthDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUSDTDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDTClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTranscationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerOrExchangeAddress\",\"type\":\"address\"}],\"name\":\"prepareForPartherOrExchangeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousEthDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousbnbDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previoususdtDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEthDividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMarketingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletTokend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setSellTransactionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setbnbDividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setusdtDividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updateBNBDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateEthDividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updateEthDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateEthDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updateUSDTDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updatebnbDividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatebnbDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateusdtDividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateusdtDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"usdtDividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtDividendTracker\",\"outputs\":[{\"internalType\":\"contract UsdtDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableBNBDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableEthDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableUSDTDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Salary", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:ca32823832a44f1a4f9e6b4aea291f2aef8fe27e", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29ad70e58721c27d1770d3af958297fd2cc9c976aed9928ae59741f24d12eed5"}