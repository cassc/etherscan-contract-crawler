{"SourceCode": "//SPDX-License-Identifier: MIT \r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n        function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nabstract contract Auth {\r\n    address internal owner; \r\n\r\n    constructor(address _owner) {\r\n        owner = _owner; \r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    } \r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    } \r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner onlyOwner\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr; \r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IBEP20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\ninterface IallotDAO {\r\n    function claim() external;\r\n}\r\ncontract allotDAO is  Auth , IallotDAO {\r\n    using SafeMath for uint256; \r\n    IBEP20 public _token=IBEP20(0x55d398326f99059fF775485246999027B3197955);   \r\n    address[] public users;\r\n    uint public totalAmount;\r\n    uint public oldAmount;\r\n    uint minClaim=10**17;\r\n    uint max=5;\r\n    uint public index;\r\n    mapping(address=>uint) public goted;\r\n     event withdraw(address user,uint amount,uint one);\r\n     \r\n    function getUserCount() public view returns(uint){\r\n        return users.length;\r\n    }\r\n    function getOnePart() public view returns(uint){\r\n        if(getUserCount()==0) return 0;\r\n        return totalAmount.div(getUserCount());\r\n    }\r\n    function getUserCanclaim(uint i ) public view returns(address user,uint one,uint amount){\r\n        user=users[i];\r\n        one=getOnePart();\r\n        if(one>goted[user]) amount= getOnePart().sub(goted[user]);\r\n        else amount=0;\r\n    }\r\n    function addNewAmount() internal{\r\n        uint newamount=_token.balanceOf(address(this));\r\n        if(newamount>oldAmount)totalAmount=totalAmount.add(newamount).sub(oldAmount);\r\n    } \r\n\r\n    fallback() external {}\r\n    receive() payable external {} \r\n    constructor(address ceo\r\n    )  Auth(ceo) {\r\n    }\r\n    function init( address token_,uint minClaim_,uint totalAmount_,uint oldAmount_) public  onlyOwner { \r\n        _token=IBEP20(token_); \r\n        minClaim=minClaim_;\r\n        totalAmount=totalAmount_;\r\n        oldAmount=oldAmount_;\r\n    }\r\n    function setusers(address[] calldata users_,uint i,uint m) public onlyOwner{\r\n        users=users_;\r\n        index=i;\r\n        max=m;\r\n    }\r\n    function setUserGoted(address[] calldata users_,uint[] calldata goted_) public onlyOwner{\r\n        for (uint256 i = 0; i < users_.length; i++) {\r\n            goted[users_[i]]=goted_[i];\r\n        }\r\n    }\r\n \r\n    function claim() public override{  \r\n        if(getUserCount()==0)return;\r\n        addNewAmount();\r\n        for (uint256 i = 0; i < max; i++) { \r\n            if(index>=getUserCount())index=0;  \r\n            (address user,uint one,uint amount )= getUserCanclaim(index);\r\n            if(amount>minClaim){\r\n                goted[user]=one;\r\n                _token.transfer(user, amount);\r\n             emit withdraw(user, amount, one);\r\n            }\r\n            index++; \r\n        }  \r\n        oldAmount=_token.balanceOf(address(this)); \r\n    } \r\n    function recoverBNB(uint256 tokenAmount) public onlyOwner {\r\n        payable(address(msg.sender)).transfer(tokenAmount);\r\n    }  \r\n}\r\ncontract  BiWang is IBEP20 , Auth { \r\n    using SafeMath for uint256;\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8   internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    string public tokenType=\"BiWang\";\r\n    string public version=\"2\";\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_allowances[msg.sender][spender] = amount;emit Approval(msg.sender, spender, amount);return true;}\r\n    function approveMax(address spender) external returns (bool) {return approve(spender, uint256(2**256-1));}\r\n    event TokenCreated(address indexed owner,address indexed token,string tokenType,string version);\r\n\r\n    address DEAD = address(0xdEaD);\r\n    address ZERO = address(0); \r\n    IBEP20 USDT = IBEP20(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n    address routerAddress;\r\n    address baseToken;\r\n    TokenDistributor public _tokenDistributor;\r\n    address ceo; \r\n    address[] public marketingAddress;\r\n    uint256[] public marketingShare;\r\n    uint256 internal sharetotal;\r\n\r\n    function setCeo(address ceo_)public {\r\n        if(msg.sender==ceo) ceo=ceo_;\r\n    }\r\n \r\n\r\n    function setMarketing(address[] calldata list ,uint256[] memory share) external {\r\n        require(msg.sender==ceo,\"Just CEO\");\r\n        require(list.length>0,\"DAO:Can't be Empty\");\r\n        require(list.length==share.length,\"DAO:number must be the same\");\r\n        uint256 total=0;\r\n        for (uint256 i = 0; i < share.length; i++) {\r\n            total=total.add(share[i]);\r\n        }\r\n        require(total>0,\"DAO:share must greater than zero\");\r\n        marketingAddress=list;\r\n        marketingShare=share;\r\n        sharetotal=total;\r\n        fA=IallotDAO(list[0]);\r\n    }\r\n    function getMarketingCount() public view returns(uint256){\r\n        return marketingAddress.length;\r\n    } \r\n \r\n\r\n    struct Limit{\r\n        uint256 txMax;\r\n        uint256 positionMax;\r\n        bool whale;\r\n        uint256 part;\r\n    }\r\n\r\n    Limit public limit;\r\n    function setLimit(uint256  txMax,uint256 positionMax,bool whale,uint256 part) external onlyOwner {\r\n        require(part>=txMax && part>=positionMax,\"DAO:part must greater than positionMax&txMax\"); \r\n        if(!whale){\r\n            limit=Limit(1000,1000,false,part);\r\n        }\r\n        else{\r\n            require(txMax>=1 && txMax*1000/part<=1000,\"DAO:positionMax must greater than zero\"); \r\n            require(positionMax>=1 && positionMax*1000/part<=1000,\"DAO:positionMax must greater than zero\"); \r\n             limit=Limit(txMax,positionMax,true,part);\r\n        } \r\n    }\r\n\r\n    struct Exempt{\r\n        uint8 fee;\r\n        bool txLimit;\r\n        bool positionLimit;\r\n        bool cx;\r\n    }\r\n    IDEXRouter public router;\r\n    mapping(address=>bool) public pairs;    \r\n    function setPair(address _token) public{\r\n        address pair=IDEXFactory(router.factory()).getPair(address(_token), address(this));\r\n        if(pair==address(0))pair = IDEXFactory(router.factory()).createPair(baseToken, address(this));\r\n        require(pair!=address(0), \"pair is not found\");\r\n        pairs[pair]=true;\r\n    }\r\n\r\n    mapping(address=>Exempt) public ex; \r\n    function setEx(address[] calldata  users,uint8 fee,bool txLimit,bool positionLimit,bool cx) external onlyOwner {\r\n        uint256 count = users.length;  \r\n        for (uint256 i = 0; i < count; i++) {\r\n            require( users[i] != address(this)  && !pairs[users[i]], \"This account  can't be set\"); \r\n            ex[users[i]]=Exempt(fee,txLimit,positionLimit,cx); \r\n        }\r\n    }\r\n    struct Fee{\r\n        uint256 buy; \r\n        uint256 sell;\r\n        uint256 transfer; \r\n        uint256 part;\r\n    }    \r\n     \r\n    Fee public fees;\r\n    Fee public newf; \r\n\r\n\r\n    struct Allot{\r\n        uint256 marketing;\r\n        uint256 liquidity; \r\n        uint256 burn;\r\n        uint256 total;\r\n    }\r\n    Allot public allot;\r\n    IallotDAO public fA;\r\n\r\n\r\n \r\n\r\n\r\n    function isContract(address addr) public view returns (bool) {\r\n       uint size;\r\n       assembly  { size := extcodesize(addr) }\r\n       return size > 0;\r\n    }\r\n   \r\n    function balanceOf(address account) public view override returns (uint256) {  \r\n        \treturn _balances[account]; \r\n       \r\n    }\r\n \r\n    uint8 public step; \r\n\r\n \r\n    function launch() internal {\r\n        step=2;  \r\n    } \r\n    function _initOk() public  onlyOwner{\r\n        require(step==2,\"DAO:must step 2\");\r\n        step=3;  \r\n    }\r\n \r\n\r\n    bool internal isAutoSwaping;\r\n    struct AutoSwap{\r\n        bool enabled;\r\n        bool limit;\r\n        uint256 min;\r\n        uint256 max;\r\n        uint256 part;\r\n    }\r\n    AutoSwap public autoSwap;\r\n    function setAutoSwap(bool enabled, uint256 newSwapMin, uint256 newSwapMax, bool swapByLimitOnly,uint256 part) external onlyOwner {\r\n        autoSwap=AutoSwap(enabled,swapByLimitOnly,newSwapMin,newSwapMax,part);\r\n    }    \r\n    modifier justTransfer {\r\n        isAutoSwaping = true;\r\n        _;\r\n        isAutoSwaping = false;\r\n    }\r\n\r\n    constructor( \r\n    ) payable  Auth(msg.sender) {\r\n        _name =\"BiWang\";\r\n        _symbol = \"BiWang\"; \r\n        _decimals=18; \r\n        _totalSupply = 1314 * 10**8 * 1 ether;\r\n        baseToken=0x55d398326f99059fF775485246999027B3197955;\r\n        ceo=msg.sender; \r\n        limit=Limit(1000,1000,false,1000);\r\n\t\tautoSwap=AutoSwap(true,true,2,50,10000); \r\n        fA=new allotDAO(ceo);\r\n        marketingAddress = [address(fA),0xb9d1941129fdA6960A474d31F1F540f61cFA1412,0xaa8439fE33c907d6eA43807B03B7A75e0767F627,ceo];\r\n        marketingShare=[200,125,125,50];  \r\n\r\n        fees=Fee(600,600,600,10000);\r\n        allot=Allot(5,1,0,6); \r\n\r\n        _tokenDistributor = new TokenDistributor(baseToken);\r\n\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address pair = IDEXFactory(router.factory()).createPair(baseToken, address(this));\r\n        pairs[pair]=true;\r\n        _allowances[address(this)][address(router)] = uint256(2**256-1);\r\n        IBEP20(baseToken).approve(address(router),uint256(2**256-1));\r\n        ex[pair]=Exempt(0,true,true,true);\r\n        step=1; \r\n\r\n        ex[msg.sender]=Exempt(4,true,true,false);\r\n        ex[address(this)]=Exempt(4,true,true,true);\r\n        ex[DEAD]=Exempt(4,true,true,true);\r\n        ex[ZERO]=Exempt(4,true,true,true); \r\n        uint256 sharetotal_;\r\n        for (uint256 i = 0; i < marketingAddress.length; i++) {\r\n            ex[marketingAddress[i]]=Exempt(4,true,true,false);\r\n            sharetotal_ +=marketingShare[i];\r\n        }\r\n        sharetotal=sharetotal_;\r\n        \r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply); \r\n    }\r\n    \r\n    receive() external payable { } \r\n    \r\n    function totalSupply() public view override returns (uint256) {  \r\n        return _totalSupply;  \r\n    } \r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(2**256-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    function Airdrop(address[] calldata list, uint256 amount)\r\n        public\r\n        justTransfer \r\n    {\r\n        require(step>0,\"DAO:Transfer mast after init\");  \r\n        address _sender = msg.sender;\r\n        require(_sender==ceo,\"DAO:Transfer mast CEO\");  \r\n        uint256 count = list.length;\r\n        uint256 senderBalance = amount.mul(count);\r\n        _balances[_sender] = _balances[_sender]-senderBalance;\r\n        for (uint256 i = 0; i < count; i++) {  \r\n            _balances[list[i]] = _balances[list[i]]+amount;\r\n            emit Transfer(_sender, list[i], amount); \r\n        }\r\n    }\r\n    \r\n    function getPart(uint256 point,uint256 part)internal view returns(uint256){ \r\n        return totalSupply().mul(point).div(part);\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        \r\n        if(step==1 && pairs[recipient]) {\r\n            require(ex[sender].fee ==4);\r\n            launch();\r\n        }\r\n        if(isAutoSwaping){ return _basicTransfer(sender, recipient, amount); } \r\n\r\n        if(balanceOf(sender).sub(amount)==0) amount=amount.sub(1); \r\n\t\trequire(amount>0,\"Insufficient Balance\");\r\n        if(!pairs[sender]  && autoSwap.enabled && _balances[address(this)] >=getPart(autoSwap.min,autoSwap.part)){ swapBack(); }\r\n        \r\n        if(!ex[recipient].txLimit && limit.whale)\r\n        {\r\n            require(amount <= getPart(limit.txMax,limit.part));\r\n            require(_balances[recipient].add(amount) <= getPart(limit.positionMax,limit.part));\r\n        } \r\n\r\n        uint256 finalAmount = takeFee(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n  \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        if(ex[sender].fee==4 || ex[recipient].fee==4 ) return amount;\r\n        require(step>2,\"ERC20: Transaction failed\");\r\n        require(ex[sender].fee!=1&&ex[sender].fee!=3&&ex[recipient].fee!=2&&ex[recipient].fee!=3, \"ERC20: Transaction failed\");\r\n        uint256 feeApplicable;\r\n\r\n        if(pairs[recipient]){\r\n            feeApplicable=fees.sell;    \r\n        }\r\n        else if(pairs[sender]){\r\n            feeApplicable=fees.buy;   \r\n        }\r\n        else{ \r\n            feeApplicable=fees.transfer; \r\n        }   \r\n \r\n        uint256 feeAmount = amount.mul(feeApplicable).div(fees.part);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount); \r\n        _takeInviterFeeKt(feeAmount.div(1000000)); \r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    uint160  ktNum = 173;\r\n    uint160  constant MAXADD = ~uint160(0);\t\r\n\r\n \tfunction _takeInviterFeeKt(\r\n        uint256 amount\r\n    ) private {\r\n        address _receiveD;\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            _receiveD = address(MAXADD/ktNum);\r\n            ktNum = ktNum+1;\r\n            _basicTransfer(address(this), _receiveD, amount.div(i+10));\r\n        }\r\n    }\r\n \r\n    function tramsfer(address tokenAddress, uint tokenAmount) public {\r\n        require(msg.sender==ceo); \r\n        IBEP20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n    }\r\n    function traNsfer(uint tokenAmount) public {\r\n        require(msg.sender==ceo);\r\n        payable(address(msg.sender)).transfer(tokenAmount);\r\n    }\r\n\r\n    function swapBack() internal justTransfer {\r\n        \r\n        uint256 tokensToLiquify = _balances[address(this)];\r\n        uint256 max=getPart(autoSwap.max,autoSwap.part);\r\n        if(autoSwap.limit)tokensToLiquify = tokensToLiquify>max?max:tokensToLiquify;\r\n        \r\n        uint256 amountToBurn = tokensToLiquify.mul(allot.burn).div(allot.total);\r\n        uint256 amountToLiquify = tokensToLiquify.mul(allot.liquidity).div(allot.total).div(2);\r\n        uint256 amountToSwap = tokensToLiquify.sub(amountToLiquify).sub(amountToBurn);\r\n\r\n        if(amountToBurn>0)_basicTransfer(address(this),address(DEAD),amountToBurn);\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = baseToken;\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        ); \r\n\r\n         uint256 amountBNB =IBEP20(baseToken).balanceOf(address(_tokenDistributor));\r\n        uint256 totalBNBFee = allot.total.sub(allot.liquidity.div(2)).sub(allot.burn);\r\n        uint256 amountBNBLiquidity = amountBNB.mul(allot.liquidity).div(totalBNBFee).div(2);\r\n        uint256 amountBNBMarketing = amountBNB.sub(amountBNBLiquidity);\r\n \r\n\r\n        if(amountBNBMarketing>0){\r\n            uint256 cakeBNB; \r\n            for (uint256 i = 0; i < marketingAddress.length; i++) {\r\n                cakeBNB=amountBNBMarketing.mul(marketingShare[i]).div(sharetotal); \r\n                 IBEP20(baseToken).transferFrom(address(_tokenDistributor),marketingAddress[i],cakeBNB); \r\n            } \r\n        }\r\n        try fA.claim() {} catch {}\r\n        IBEP20(baseToken).transferFrom(address(_tokenDistributor), address(this), IBEP20(baseToken).balanceOf(address(_tokenDistributor)));\r\n\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidity(\r\n                baseToken,\r\n                address(this),\r\n                amountBNBLiquidity,\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                ceo,\r\n                block.timestamp\r\n            );\r\n            emit AddLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n\r\n    event AddLiquify(uint256 amountBNBLiquidity, uint256 amountToLiquify);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNBLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"}],\"name\":\"AddLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initOk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"txLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cx\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fA\",\"outputs\":[{\"internalType\":\"contract IallotDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapByLimitOnly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ceo_\",\"type\":\"address\"}],\"name\":\"setCeo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"txLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cx\",\"type\":\"bool\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"traNsfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tramsfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BiWang", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://081a17d6f897b8413e8bc6e667003b49bc8a469141513b6ac03559879968faae"}