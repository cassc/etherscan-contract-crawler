{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-10-05\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-10-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-09-15\r\n*/\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract TradeMart {\r\n\tusing SafeMath for uint256;\r\n    IERC20 public token = IERC20(0x55d398326f99059fF775485246999027B3197955); \r\n\tuint256 constant public INVEST_MIN_AMOUNT = 200e18; // 50 BUSD\t\r\n\tuint256 constant public PROJECT_FEE = 1100;\r\n\tuint256 constant public PERCENT_STEP = 10;\r\n\tuint256 constant public PERCENTS_DIVIDER = 10000;\r\n\t\r\n\t\r\n    \r\n    struct RefUserDetail {\r\n        address refUserAddress;\r\n        uint256 refLevel;\r\n    }\r\n\r\n    mapping(address => mapping (uint => RefUserDetail)) public RefUser;\r\n    mapping(address => uint256) public referralCount_;\r\n    \r\n\t\r\n\tmapping(address => address) internal referralLevel1Address;\r\n    \r\n\t\r\n    \r\n\t\r\n\r\n\tstruct Deposit {\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t}\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n\t\t\r\n\t\taddress referrer;\r\n\t\tuint256[10] levels;\r\n\t\tuint256 retopupcount;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n       \r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n\t\r\n\taddress payable public commissionWallet;\r\n\r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\r\n\t\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n\tconstructor(address payable wallet) public {\r\n\t\trequire(!isContract(wallet));\r\n\t\tcommissionWallet = wallet;\r\n\t}\r\n\t\r\n\tfunction getDownlineRef(address senderAddress, uint dataId) public view returns (address,uint) { \r\n        return (RefUser[senderAddress][dataId].refUserAddress,RefUser[senderAddress][dataId].refLevel);\r\n    }\r\n    \r\n    function addDownlineRef(address senderAddress, address refUserAddress, uint refLevel) internal {\r\n        referralCount_[senderAddress]++;\r\n        uint dataId = referralCount_[senderAddress];\r\n        RefUser[senderAddress][dataId].refUserAddress = refUserAddress;\r\n        RefUser[senderAddress][dataId].refLevel = refLevel;\r\n    }\r\n\r\n    \r\n\t\r\n\t\r\n\t function distributeRef(address _referredBy,address _sender, bool _newReferral) internal {\r\n       \r\n          address _customerAddress        = _sender;\r\n        // Level 1\r\n        referralLevel1Address[_customerAddress]                     = _referredBy;\r\n        if(_newReferral == true) {\r\n            addDownlineRef(_referredBy, _customerAddress, 1);\r\n        }\r\n    \r\n\t\t\r\n       \r\n}\r\n\t\r\n\t\r\n\tfunction investtopup(address referrer,address child, uint256 amounts) public  {\r\n\t\r\n\t/*\tif (!started) {\r\n\t\t\tif (msg.sender == commissionWallet) {\r\n\t\t\t\tstarted = true;\r\n\t\t\t} else revert(\"Not started yet\");\r\n\t\t}*/\r\n\r\n\t\trequire(amounts >= INVEST_MIN_AMOUNT);\r\n        token.transferFrom(msg.sender, address(this), amounts);\r\n        token.transfer(commissionWallet,amounts);\r\n\t\t//commissionWallet.transfer(fee);\r\n\t\temit FeePayed(msg.sender, amounts);\r\n\r\n\t\tUser storage user = users[child];\r\n\t\t\r\n\t\t\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != child) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t bool    _newReferral                = true;\r\n        if(referralLevel1Address[msg.sender] != 0x0000000000000000000000000000000000000000) {\r\n            referrer                     = referralLevel1Address[msg.sender];\r\n            _newReferral                    = false;\r\n        }\r\n\t\t\r\n\t\t\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\t\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n      \r\n       \r\n\t\tuser.deposits.push(Deposit(amounts, block.timestamp));\r\n\t\temit NewDeposit(msg.sender, amounts);\r\n\t}\r\n\r\n\tfunction invest(address referrer, uint256 amounts) public  {\r\n\t\r\n\t/*\tif (!started) {\r\n\t\t\tif (msg.sender == commissionWallet) {\r\n\t\t\t\tstarted = true;\r\n\t\t\t} else revert(\"Not started yet\");\r\n\t\t}*/\r\n\r\n\t\trequire(amounts >= INVEST_MIN_AMOUNT);\r\n        token.transferFrom(msg.sender, address(this), amounts);\r\n        token.transfer(commissionWallet,amounts);\r\n\t\t//commissionWallet.transfer(fee);\r\n\t\temit FeePayed(msg.sender, amounts);\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\t\t\r\n\t\t\r\n\t\tif (user.referrer == address(0)) {\r\n\t\t\tif (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n\t\t\t\tuser.referrer = referrer;\r\n\t\t\t}\r\n\r\n\t\t\taddress upline = user.referrer;\r\n\t\t\tfor (uint256 i = 0; i < 10; i++) {\r\n\t\t\t\tif (upline != address(0)) {\r\n\t\t\t\t\tusers[upline].levels[i] = users[upline].levels[i].add(1);\r\n\t\t\t\t\tupline = users[upline].referrer;\r\n\t\t\t\t} else break;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t bool    _newReferral                = true;\r\n        if(referralLevel1Address[msg.sender] != 0x0000000000000000000000000000000000000000) {\r\n            referrer                     = referralLevel1Address[msg.sender];\r\n            _newReferral                    = false;\r\n        }\r\n\t\t\r\n\t\t\r\n\r\n\t\tif (user.deposits.length == 0) {\r\n\t\t\t\r\n\t\t\temit Newbie(msg.sender);\r\n\t\t}\r\n      \r\n       \r\n\t\tuser.deposits.push(Deposit(amounts, block.timestamp));\r\n\t\temit NewDeposit(msg.sender, amounts);\r\n\t}\r\n    \r\n\tfunction retopup(uint256 retopupamount) public  {\r\n\t\r\n\t/*\tif (!started) {\r\n\t\t\tif (msg.sender == commissionWallet) {\r\n\t\t\t\tstarted = true;\r\n\t\t\t} else revert(\"Not started yet\");\r\n\t\t}*/\r\n\r\n\t\trequire(retopupamount >= INVEST_MIN_AMOUNT);\r\n        token.transferFrom(msg.sender, address(this), retopupamount);\r\n        token.transfer(commissionWallet,retopupamount);\r\n\t\t//commissionWallet.transfer(fee);\r\n\t\temit FeePayed(msg.sender, retopupamount);\r\n\r\n\t\tUser storage user = users[msg.sender];\r\n\t\tuser.retopupcount=user.retopupcount+1;\r\n\t\t\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\t\r\n\tfunction getUserRetopupCount(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].retopupcount;\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"child\",\"type\":\"address\"},{\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"investtopup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"dataId\",\"type\":\"uint256\"}],\"name\":\"getDownlineRef\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RefUser\",\"outputs\":[{\"name\":\"refUserAddress\",\"type\":\"address\"},{\"name\":\"refLevel\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_STEP\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"retopupamount\",\"type\":\"uint256\"}],\"name\":\"retopup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commissionWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"referrer\",\"type\":\"address\"},{\"name\":\"amounts\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserRetopupCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralCount_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"}]", "ContractName": "TradeMart", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004480ea0141ced4db4e35f9cae80959309cfd742e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ac669b2ba356cb5516757ef7927ecb701f6f064d2de558caee154ad20ea6cb97"}