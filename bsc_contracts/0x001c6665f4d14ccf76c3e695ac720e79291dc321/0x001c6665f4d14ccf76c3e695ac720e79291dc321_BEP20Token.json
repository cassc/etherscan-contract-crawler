{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-12\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-03-20\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-20\r\n*/\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n    * set inviter\r\n    */\r\n  function setInviter(address user, address inviter) external;\r\n\r\n  /**\r\n    * get inviter\r\n    */\r\n  function getInviter(address user) external view returns (address);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n\r\n  function power(uint256 a, uint256 b) internal pure returns (uint256){\r\n\r\n        if(a == 0) return 0;\r\n        if(b == 0) return 1;\r\n\r\n        uint256 c = a ** b;\r\n        require(c > 0, \"SafeMathForUint256: modulo by zero\");\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary TokenHelper {\r\n\r\n    function getInviter(address token, address user) internal returns (address){\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xe05c5104, user));\r\n        require(success, \"get inviter fail\");\r\n        return _bytesToAddress(data);\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory bys) internal pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 32))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor () internal {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface ILp {\r\n    function addHoldingReward(uint256 holdingReward) external;\r\n    function updateTokenHoldingAmount(address user) external;\r\n\r\n    function addLpReward(uint256 lpReward) external;\r\n    function updateLpAmount(address user) external;\r\n\r\n    function addSuperPartnerReward(uint256 superPartnerReward) external;\r\n\r\n    function addCommunityPartnerReward(uint256 communityPartnerReward) external;\r\n}\r\n\r\ncontract BEP20Token is Context, IBEP20, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  mapping (address => uint256) private _balances;\r\n\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n  uint8 private _decimals;\r\n  string private _symbol;\r\n  string private _name;\r\n\r\n  mapping (address => address) private _inviterMap;\r\n\t\r\n  address private _lpAddress;\r\n\r\n  uint256 private _inviteMinAmount;\r\n\r\n  mapping (address => bool) private _whiteAddressMap;\r\n\r\n  mapping (address => bool) private _dappOperaterMap;\r\n\r\n  mapping (address => bool) private _settingpOeraterMap;\r\n\r\n  uint256 private _totalFeePercent = 8;\r\n  \r\n  uint256 private _blackHolePercent = 20;\r\n\r\n  uint256 private _lpPercent = 30;\r\n  uint256 private _holdingPercent = 20;\r\n  uint256 private _superPartnerPercent = 10;\r\n  uint256 private _communityPartnerPercent = 10;\r\n  uint256 private _ecoFundPercent = 10;\r\n\r\n  address private _marketRemainReceiveAddress;\r\n\r\n  address private _lpRewardReceiveAddress;\r\n\r\n  address private _holdingRewardReceiveAddress;\r\n\r\n  address private _superPartnerRewardReceiveAddress;\r\n\r\n  address private _communityPartnerRewardReceiveAddress;\r\n\r\n  address private _ecoFundReceiveAddress;\r\n\r\n  address private _oldToken;\r\n\r\n  address private _totalParentAddress;\r\n\r\n  address private _dispatchPoolAddress;\r\n\r\n  bool private _transferSwitch;\r\n\r\n  constructor(address oldToken) public {\r\n    _name = \"F8 DAO\";\r\n    _symbol = \"F8\";\r\n    _decimals = 18;\r\n    _totalSupply = 210000000000 * 10**18;\r\n    _balances[msg.sender] = _totalSupply;\r\n\r\n    _oldToken = oldToken;\r\n\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n  modifier onlyDapp() {\r\n    require(_dappOperaterMap[_msgSender()], \"caller is not the dapps\");\r\n    _;\r\n  }\r\n\r\n\r\n  modifier onlySetting() {\r\n    require(_settingpOeraterMap[_msgSender()], \"caller is not the settings\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n   * the total supply.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `msg.sender` must be the token owner\r\n   */\r\n  function burn(uint256 amount) public returns (bool) {\r\n    _burn(_msgSender(), amount);\r\n    return true;\r\n  }\r\n\r\n    function checkTransfer(address sender, address recipient) internal view returns (bool) {\r\n      if (_transferSwitch) return true;\r\n      if (_lpAddress != address(0)) {\r\n        if (sender == _lpAddress) return _whiteAddressMap[recipient];\r\n        else if (recipient == _lpAddress) return _whiteAddressMap[sender];\r\n      }\r\n      return _whiteAddressMap[sender] || _whiteAddressMap[recipient];\r\n    }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    require(sender != recipient, \"BEP20: from address same as to address\");\r\n    require(checkTransfer(sender, recipient), \"transfer can not execute\");\r\n\r\n    bool takeFee = true;\r\n\r\n    if (_whiteAddressMap[sender] || _whiteAddressMap[recipient]) { \r\n        takeFee = false; \r\n    }\r\n    \r\n    _transferStandard(sender, recipient, amount, takeFee);\r\n\r\n    if (!isContract(sender)) {\r\n        if (_inviterMap[sender] == address(0)) {\r\n            address oldInviter = _syncOldInviter(sender);\r\n            if (oldInviter != address(0)) {\r\n                _inviterMap[sender] = oldInviter;\r\n            } else {\r\n                if (_totalParentAddress != address(0)) {\r\n                    _inviterMap[sender] = _totalParentAddress;\r\n                }\r\n            }\r\n        }\r\n        updateTokenHoldingAmount(sender);\r\n        updateLpAmount(sender);\r\n    }\r\n\r\n    if (!isContract(recipient)) {\r\n        if (_inviterMap[recipient] == address(0)) {\r\n            address oldInviter = _syncOldInviter(recipient);\r\n            if (oldInviter != address(0)) {\r\n                _inviterMap[recipient] = oldInviter;\r\n            } else {\r\n                bool shouldInvite = amount >= _inviteMinAmount\r\n                && !isContract(sender) \r\n                && !isContract(recipient) && recipient != _totalParentAddress;\r\n                if (shouldInvite) {\r\n                    _inviterMap[recipient] = sender;\r\n                }\r\n            }\r\n        }\r\n        if (sender == _dispatchPoolAddress) return;\r\n        updateTokenHoldingAmount(recipient);\r\n        updateLpAmount(recipient);\r\n    }\r\n  }\r\n\r\n    function _syncOldInviter(address user) internal returns (address) {\r\n        return TokenHelper.getInviter(_oldToken, user);\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount, bool takeFee) private {\r\n        (uint256 rAmount, uint256 totalFee) = _getRealAmountAndFee(tAmount, takeFee);\r\n\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(rAmount);\r\n        emit Transfer(sender, recipient, rAmount);\r\n\r\n        if (!takeFee) {\r\n            return;\r\n        }\r\n        _blackHoleDestruction(sender, totalFee.mul(20).div(100));\r\n        if (_lpAddress == sender) {// buy\r\n            _marketReward(sender, recipient, totalFee.mul(80).div(100));\r\n        } else {// sell or transfer\r\n            _lpReward(sender, totalFee.mul(30).div(100));\r\n            _holdingReward(sender, totalFee.mul(20).div(100));\r\n            _superPartnerReward(sender, totalFee.mul(10).div(100));\r\n            _communityPartnerReward(sender, totalFee.mul(10).div(100));\r\n            _ecoFundReward(sender, totalFee.mul(10).div(100));\r\n        }\r\n    }\r\n\r\n    function addHoldingReward(uint256 holdingReward) internal {\r\n        if (_dispatchPoolAddress == address(0)) return;\r\n        ILp(_dispatchPoolAddress).addHoldingReward(holdingReward);\r\n    }\r\n\r\n    function updateTokenHoldingAmount(address user) internal {\r\n        if (_dispatchPoolAddress == address(0)) return;\r\n        ILp(_dispatchPoolAddress).updateTokenHoldingAmount(user);\r\n    }\r\n\r\n    function addLpReward(uint256 lpReward) internal {\r\n        if (_dispatchPoolAddress == address(0)) return;\r\n        ILp(_dispatchPoolAddress).addLpReward(lpReward);\r\n    }\r\n\r\n    function updateLpAmount(address user) internal {\r\n        if (_dispatchPoolAddress == address(0)) return;\r\n        ILp(_dispatchPoolAddress).updateLpAmount(user);\r\n    }\r\n\r\n    function addSuperPartnerReward(uint256 amount) internal {\r\n        if (_dispatchPoolAddress == address(0)) return;\r\n        ILp(_dispatchPoolAddress).addSuperPartnerReward(amount);\r\n    }\r\n\r\n    function addCommunityPartnerReward(uint256 amount) internal {\r\n        if (_dispatchPoolAddress == address(0)) return;\r\n        ILp(_dispatchPoolAddress).addCommunityPartnerReward(amount);\r\n    }\r\n\r\n    function _getRealAmountAndFee(uint256 amount, bool takeFee) internal view returns (uint256, uint256) {\r\n        if (!takeFee) return (amount, 0);\r\n        uint256 totalFee = amount.mul(_totalFeePercent).div(100);\r\n        return (amount.sub(totalFee), totalFee);\r\n    }\r\n\r\n    // 80% market reward for buy\r\n    function _marketReward(address sender, address recipient, uint256 totalFee) internal {\r\n        uint256 usedPercent = 0;\r\n        address c = recipient;\r\n        for (uint256 i = 0; i < 8; i++) {\r\n            c = _inviterMap[c];\r\n            if (c == address(0)) break;\r\n            uint256 maxGen = _getMaxGenerationsByHoldingAmount(c);\r\n            if (maxGen <= i) continue;\r\n            uint256 rate = _getPercentByGeneration(i.add(1));\r\n            if (rate <= 0) continue;\r\n            usedPercent = usedPercent.add(rate);\r\n\r\n            uint256 curTAmount = totalFee.mul(rate).div(100);\r\n            _balances[c] = _balances[c].add(curTAmount);\r\n            emit Transfer(sender, c, curTAmount);\r\n        }\r\n      \r\n        if (usedPercent < 100) {\r\n            uint256 remainAmount = uint256(100).sub(usedPercent).mul(totalFee).div(100);\r\n            _balances[_marketRemainReceiveAddress] = _balances[_marketRemainReceiveAddress].add(remainAmount);\r\n            emit Transfer(sender, _marketRemainReceiveAddress, remainAmount);\r\n        }\r\n    }\r\n\r\n    // 20% black hole destruction for buy or sell or transfer\r\n    function _blackHoleDestruction(address sender, uint256 blackHoleAmount) internal {\r\n        _totalSupply = _totalSupply.sub(blackHoleAmount);\r\n        emit Transfer(sender, address(0), blackHoleAmount);\r\n    }\r\n\r\n    // 30% lp reward for sell or transfer\r\n    function _lpReward(address sender, uint256 lpRewardAmount) internal {\r\n        addLpReward(lpRewardAmount);\r\n        _balances[_lpRewardReceiveAddress] = _balances[_lpRewardReceiveAddress].add(lpRewardAmount);\r\n        emit Transfer(sender, _lpRewardReceiveAddress, lpRewardAmount);\r\n    }\r\n\r\n    // 20% holding reward for sell or transfer\r\n    function _holdingReward(address sender, uint256 holdingRewardAmount) internal {\r\n        addHoldingReward(holdingRewardAmount);\r\n        _balances[_holdingRewardReceiveAddress] = _balances[_holdingRewardReceiveAddress].add(holdingRewardAmount);\r\n        emit Transfer(sender, _holdingRewardReceiveAddress, holdingRewardAmount);\r\n    }\r\n\r\n    // 10% super partner reward for sell or transfer\r\n    function _superPartnerReward(address sender, uint256 superPartnerRewardAmount) internal {\r\n        addSuperPartnerReward(superPartnerRewardAmount);\r\n        _balances[_superPartnerRewardReceiveAddress] = _balances[_superPartnerRewardReceiveAddress].add(superPartnerRewardAmount);\r\n        emit Transfer(sender, _superPartnerRewardReceiveAddress, superPartnerRewardAmount);\r\n    }\r\n\r\n    // 10% community partner reward for sell or transfer\r\n    function _communityPartnerReward(address sender, uint256 communityPartnerRewardAmount) internal {\r\n        addCommunityPartnerReward(communityPartnerRewardAmount);\r\n        _balances[_communityPartnerRewardReceiveAddress] = _balances[_communityPartnerRewardReceiveAddress].add(communityPartnerRewardAmount);\r\n        emit Transfer(sender, _communityPartnerRewardReceiveAddress, communityPartnerRewardAmount);\r\n    }\r\n\r\n    // 10% eco fund for sell or transfer\r\n    function _ecoFundReward(address sender, uint256 ecoFundRewardAmount) internal {\r\n        _balances[_ecoFundReceiveAddress] = _balances[_ecoFundReceiveAddress].add(ecoFundRewardAmount);\r\n        emit Transfer(sender, _ecoFundReceiveAddress, ecoFundRewardAmount);\r\n    }\r\n\r\n    // get max generation through holding amount\r\n    function _getMaxGenerationsByHoldingAmount(address user) internal view returns (uint256) {\r\n        uint256 p = uint256(10).power(uint256(_decimals));\r\n        if (_balances[user] >= uint256(100000).mul(p)) return 8;\r\n        if (_balances[user] >= uint256(10000).mul(p)) return 6;\r\n        if (_balances[user] >= uint256(1000).mul(p)) return 4;\r\n        if (_balances[user] >= uint256(100).mul(p)) return 2;\r\n        return 0;\r\n    }\r\n\r\n    // get reward percent through generation\r\n    function _getPercentByGeneration(uint256 generation) internal pure returns (uint256) {\r\n        if (generation == 1) return 40;\r\n        if (generation == 2) return 20;\r\n        if (generation == 3 || generation == 4) return 10;\r\n        if (generation >= 5 && generation <= 8) return 5;\r\n        return 0;\r\n    }\r\n\r\n\r\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n   * the total supply.\r\n   *\r\n   * Emits a {Transfer} event with `from` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n  /**\r\n   * @dev Destroys `amount` tokens from `account`, reducing the\r\n   * total supply.\r\n   *\r\n   * Emits a {Transfer} event with `to` set to the zero address.\r\n   *\r\n   * Requirements\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   * - `account` must have at least `amount` tokens.\r\n   */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n    * from the caller's allowance.\r\n    *\r\n    * See {_burn} and {_approve}.\r\n    */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n\r\n    function setDappOperator(address user, bool permit) external onlyOwner {\r\n        require(user != address(0), \"address can't be zero\");\r\n        _dappOperaterMap[user] = permit;\r\n    }\r\n\r\n    function setSettingOperator(address user, bool permit) external onlyOwner {\r\n        require(user != address(0), \"address can't be zero\");\r\n        _settingpOeraterMap[user] = permit;\r\n    }\r\n\r\n    function getInviter(address user) external view returns (address) {\r\n        return _inviterMap[user];\r\n    }\r\n\r\n    function getWhiteAddress(address user) external view returns (bool) {\r\n        return _whiteAddressMap[user];\r\n    }\r\n\r\n    function setWhiteAddress(address user, bool white) external onlySetting {\r\n        require(user != address(0), \"address can't be zero\");\r\n        _whiteAddressMap[user] = white;\r\n    }\r\n\t\r\n\t  function setLpAddress(address lpAddress) external onlySetting {\r\n        require(lpAddress != address(0), \"address user can't be zero\");\r\n\t\t    _lpAddress = lpAddress;\r\n\t  }\r\n\r\n    function setDispatchPoolAddress(address dispatchPoolAddress) external onlySetting {\r\n        require(dispatchPoolAddress != address(0), \"address user can't be zero\");\r\n\t\t    _dispatchPoolAddress = dispatchPoolAddress;\r\n\t  }\r\n\t\r\n\t  function setInviteMinAmount(uint256 inviteMinAmount) external onlySetting {\r\n\t\t    _inviteMinAmount = inviteMinAmount;\r\n\t  }\r\n\r\n    function setInviter(address user, address inviter) external onlyDapp {\r\n        address oldInviter = TokenHelper.getInviter(_oldToken, user);\r\n        if (oldInviter == address(0)) {\r\n            require(user != address(0), \"address user can't be zero\");\r\n            require(inviter != address(0), \"address inviter can't be zero\");\r\n            require(_inviterMap[user] == address(0), \"address has inviter\");\r\n            _inviterMap[user] = inviter;\r\n        } else {\r\n            _inviterMap[user] = oldInviter;\r\n        }\r\n\t  }\r\n\r\n\r\n    function setMarketRemainReceiveAddress(address marketRemainReceiveAddress) external onlySetting {\r\n        require(marketRemainReceiveAddress != address(0), \"address can't be zero\");\r\n\t\t    _marketRemainReceiveAddress = marketRemainReceiveAddress;\r\n\t  }\r\n\r\n    function setLpRewardReceiveAddress(address lpRewardReceiveAddress) external onlySetting {\r\n        require(lpRewardReceiveAddress != address(0), \"address can't be zero\");\r\n\t\t    _lpRewardReceiveAddress = lpRewardReceiveAddress;\r\n\t  }\r\n\r\n    function setTotalParentAddress(address totalParentAddress) external onlySetting {\r\n        require(_totalParentAddress == address(0), \"total parent address has been set\");\r\n\t\t    _totalParentAddress = totalParentAddress;\r\n\t  }\r\n\r\n    function setHoldingRewardReceiveAddress(address holdingRewardReceiveAddress) external onlySetting {\r\n        require(holdingRewardReceiveAddress != address(0), \"address can't be zero\");\r\n\t\t    _holdingRewardReceiveAddress = holdingRewardReceiveAddress;\r\n\t  }\r\n\r\n    function setSuperPartnerRewardReceiveAddress(address superPartnerRewardReceiveAddress) external onlySetting {\r\n        require(superPartnerRewardReceiveAddress != address(0), \"address can't be zero\");\r\n\t\t    _superPartnerRewardReceiveAddress = superPartnerRewardReceiveAddress;\r\n\t  }\r\n\r\n    function setCommunityPartnerRewardReceiveAddress(address communityPartnerRewardReceiveAddress) external onlySetting {\r\n        require(communityPartnerRewardReceiveAddress != address(0), \"address can't be zero\");\r\n\t\t    _communityPartnerRewardReceiveAddress = communityPartnerRewardReceiveAddress;\r\n\t  }\r\n\r\n    function setEcoFundReceiveAddress(address ecoFundReceiveAddress) external onlySetting {\r\n        require(ecoFundReceiveAddress != address(0), \"address can't be zero\");\r\n\t\t    _ecoFundReceiveAddress = ecoFundReceiveAddress;\r\n\t  }\r\n\r\n    function setTransferSwitch(bool transferSwitch) external onlySetting {\r\n\t\t    _transferSwitch = transferSwitch;\r\n\t  }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWhiteAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityPartnerRewardReceiveAddress\",\"type\":\"address\"}],\"name\":\"setCommunityPartnerRewardReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permit\",\"type\":\"bool\"}],\"name\":\"setDappOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dispatchPoolAddress\",\"type\":\"address\"}],\"name\":\"setDispatchPoolAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ecoFundReceiveAddress\",\"type\":\"address\"}],\"name\":\"setEcoFundReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"holdingRewardReceiveAddress\",\"type\":\"address\"}],\"name\":\"setHoldingRewardReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inviteMinAmount\",\"type\":\"uint256\"}],\"name\":\"setInviteMinAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"setInviter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpRewardReceiveAddress\",\"type\":\"address\"}],\"name\":\"setLpRewardReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketRemainReceiveAddress\",\"type\":\"address\"}],\"name\":\"setMarketRemainReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permit\",\"type\":\"bool\"}],\"name\":\"setSettingOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"superPartnerRewardReceiveAddress\",\"type\":\"address\"}],\"name\":\"setSuperPartnerRewardReceiveAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalParentAddress\",\"type\":\"address\"}],\"name\":\"setTotalParentAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"transferSwitch\",\"type\":\"bool\"}],\"name\":\"setTransferSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"white\",\"type\":\"bool\"}],\"name\":\"setWhiteAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20Token", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000772e9bd714dce3a8e7115955fbd54cd31c4297ac", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8c3ce844e1a8bc5cb359383f9e70589eb306b46577f663f8ad53572e33359f9e"}