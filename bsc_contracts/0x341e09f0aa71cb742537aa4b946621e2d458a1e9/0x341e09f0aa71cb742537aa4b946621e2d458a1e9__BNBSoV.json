{"SourceCode": "pragma solidity 0.5.16;\r\n                                                                                                                 \r\n// BINANCESMARTCHAIN STOREOFVALUE : Cloned and modded 'BSoV' contract (your coin is great)\r\n// BNBSoV First Mineable & Deflationary Binance Smart Chain Token using Proof Of Work\r\n// Developed By Cryptodigi & Devkon69\r\n//\r\n// Symbol      : BNBSV\r\n// Name        : BNBSoV\r\n// Total supply: 25000000.0000000\r\n// Decimals    : 8\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns(uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns(uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns(uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns(uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n\r\n}\r\n\r\nlibrary ExtendedMath {\r\n\r\n    //return the smaller of the two inputs (a or b)\r\n    function limitLessThan(uint a, uint b) internal pure returns(uint c) {\r\n        if (a > b) return b;\r\n        return a;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ERC20Interface {\r\n\r\n    function totalSupply() public view returns(uint);\r\n    function balanceOf(address tokenOwner) public view returns(uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns(uint remaining);\r\n    function transfer(address to, uint tokens) public returns(bool success);\r\n    function approve(address spender, uint tokens) public returns(bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract ApproveAndCallFallBack {\r\n\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Owned {\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract _BNBSoV is ERC20Interface, Owned {\r\n\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n    uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount; //number of 'blocks' mined\r\n    uint public _BLOCKS_PER_READJUSTMENT = 5;\r\n\r\n    //a little number\r\n    uint public _MINIMUM_TARGET = 2 ** 16;\r\n\r\n    //a big number is easier ; just find a solution that is smaller\r\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\r\n    uint public _MAXIMUM_TARGET = 2 ** 234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber; //generate a new one when a new reward is minted\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 => bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    uint public burnPercent;\r\n\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n\r\n    constructor() public onlyOwner {\r\n\r\n        symbol = \"BNBSV\";\r\n        name = \"BNBSoV\";\r\n        decimals = 8;\r\n        _totalSupply = 25000000 * 10 ** uint(decimals);\r\n        if (locked) revert();\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        burnPercent = 1; //it's divided by 1000, then 10/1000 = 0.01 = 1%\r\n        _startNewMiningEpoch();\r\n\r\n        //Premine 1 milion\r\n        balances[owner] = 1000000 * 10 ** uint(decimals);\r\n        //Transfer(address(0), owner, _totalSupply);\r\n\r\n    }\r\n\r\n    function mint(uint256 nonce, bytes32 challenge_digest) public returns(bool success) {\r\n        //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\r\n        bytes32 digest = keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce));\r\n        //the challenge digest must match the expected\r\n        if (digest != challenge_digest) revert();\r\n        //the digest must be smaller than the target\r\n        if (uint256(digest) > miningTarget) revert();\r\n        //only allow one reward for each challenge\r\n        bytes32 solution = solutionForChallenge[challengeNumber];\r\n        solutionForChallenge[challengeNumber] = digest;\r\n        if (solution != 0x0) revert(); //prevent the same answer from awarding twice\r\n        uint reward_amount = getMiningReward();\r\n        balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n        tokensMinted = tokensMinted.add(reward_amount);\r\n        //Cannot mint more tokens than there are\r\n        assert(tokensMinted <= maxSupplyForEra);\r\n        //set readonly diagnostics data\r\n        lastRewardTo = msg.sender;\r\n        lastRewardAmount = reward_amount;\r\n        lastRewardEthBlockNumber = block.number;\r\n        _startNewMiningEpoch();\r\n        emit Mint(msg.sender, reward_amount, epochCount, challengeNumber);\r\n        return true;\r\n    }\r\n\r\n    //a new 'block' to be mined\r\n    function _startNewMiningEpoch() internal {\r\n        //if max supply for the era will be exceeded next reward round then enter the new era before that happens\r\n        //40 is the final reward era, almost all tokens minted\r\n        //once the final era is reached, more tokens will not be given out because the assert function\r\n        if (tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39) {\r\n            rewardEra = rewardEra + 1;\r\n        }\r\n        //set the next minted supply at which the era will change\r\n        // total supply is 2100000000000000  because of 8 decimal places\r\n        maxSupplyForEra = _totalSupply - _totalSupply.div(2 ** (rewardEra + 1));\r\n        epochCount = epochCount.add(1);\r\n        //every so often, readjust difficulty. Dont readjust when deploying\r\n        if (epochCount % _BLOCKS_PER_READJUSTMENT == 0) {\r\n            _reAdjustDifficulty();\r\n        }\r\n        //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\r\n        //do this last since this is a protection mechanism in the mint() function\r\n        challengeNumber = blockhash(block.number - 1);\r\n    }\r\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\r\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\r\n    //readjust the target by 5 percent\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        //assume 360 ethereum blocks per hour\r\n        //we want miners to spend 10 minutes to mine each 'block', about 200 BNB blocks = one BSCSoV epoch\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //128\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 200; //should be 200 times slower than BSC\r\n        //if there were less eth blocks passed in time than expected\r\n        if (ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod) {\r\n            uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div(ethBlocksSinceLastDifficultyPeriod);\r\n            uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n            // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\r\n            //make it harder\r\n            miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra)); //by up to 50 %\r\n        } else {\r\n            uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div(targetEthBlocksPerDiffPeriod);\r\n            uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\r\n            //make it easier\r\n            miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra)); //by up to 50 %\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        \r\n        if (miningTarget < _MINIMUM_TARGET) //very difficult\r\n        {\r\n            miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if (miningTarget > _MAXIMUM_TARGET) //very easy\r\n        {\r\n            miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n\r\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\r\n    function getChallengeNumber() public view returns(bytes32) {\r\n        return challengeNumber;\r\n    }\r\n\r\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\r\n    function getMiningDifficulty() public view returns(uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n\r\n    function getMiningTarget() public view returns(uint) {\r\n        return miningTarget;\r\n    }\r\n\r\n    //25m coins total\r\n    //reward begins at 30 and is cut in half every reward era (as tokens are mined)\r\n    function getMiningReward() public view returns(uint) {\r\n        //once we get half way thru the coins, only get 12.5 per block\r\n        //every reward era, the reward amount halves.\r\n        return (30 * 10 ** uint(decimals)).div(2 ** rewardEra);\r\n    }\r\n\r\n    //help debug mining software\r\n    //function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns(bytes32 digesttest) {\r\n        //bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\r\n        //return digest;\r\n    //}\r\n\r\n    //help debug mining software\r\n    function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns(bool success) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number, msg.sender, nonce));\r\n        if (uint256(digest) > testTarget) revert();\r\n        return (digest == challenge_digest);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n\r\n    function totalSupply() public view returns(uint) {\r\n        return _totalSupply - balances[address(0)];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account `tokenOwner`\r\n    // ------------------------------------------------------------------------\r\n\r\n    function balanceOf(address tokenOwner) public view returns(uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to `to` account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transfer(address to, uint tokens) public returns(bool success) {\r\n\r\n        uint toBurn = tokens.mul(burnPercent).div(1250);\r\n        uint toSend = tokens.sub(toBurn);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n\r\n        balances[to] = balances[to].add(toSend);\r\n        emit Transfer(msg.sender, to, toSend);\r\n\r\n        balances[address(0)] = balances[address(0)].add(toBurn);\r\n        emit Transfer(msg.sender, address(0), toBurn);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n\r\n    function approve(address spender, uint tokens) public returns(bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer `tokens` from the `from` account to the `to` account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the `from` account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns(bool success) {\r\n        uint toBurn = tokens.mul(burnPercent).div(1250);\r\n        uint toSend = tokens.sub(toBurn);\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(toSend);\r\n        emit Transfer(from, to, toSend);\r\n        balances[address(0)] = balances[address(0)].add(toBurn);\r\n        emit Transfer(from, address(0), toBurn);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns(uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n    // from the token owner's account. The `spender` contract function\r\n    // `receiveApproval(...)` is then executed\r\n    // ------------------------------------------------------------------------\r\n\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns(bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n\r\n    function () external payable {\r\n        revert();\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns(bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"_BLOCKS_PER_READJUSTMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"challengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_number\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"testTarget\",\"type\":\"uint256\"}],\"name\":\"checkMintSolution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardEthBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastRewardTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestDifficultyPeriodStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSupplyForEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "_BNBSoV", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ea262df356bd8aaa77b93088b0580c62e54aa2d11960b42090958416e83b1184"}