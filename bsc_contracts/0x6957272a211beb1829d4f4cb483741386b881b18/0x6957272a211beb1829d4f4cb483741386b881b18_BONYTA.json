{"SourceCode": "// SPDX-License-Identifier: Unlicensed \r\n// This contract is not open source and can not be used/forked without permission\r\n// Custom Contract Created for BONYTA by Gen (tokensbygen.com)\r\n\r\n\r\n/*\r\n\r\n    https://bonyta.org\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n \r\ninterface IERC20 {\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n\r\ncontract BONYTA is Context, IERC20 { \r\n\r\n    // Contract Wallets\r\n    address private _owner = payable(0x99f2A43d66fb2467A56445424BC064b180C0D14F); \r\n    address private constant Wallet_Burn = 0x000000000000000000000000000000000000dEaD; \r\n\r\n    address public Wallet_Liquidity = 0x99f2A43d66fb2467A56445424BC064b180C0D14F; \r\n    address public Wallet_Tokens = 0x99f2A43d66fb2467A56445424BC064b180C0D14F; \r\n    address payable public Wallet_Marketing = payable(0x99f2A43d66fb2467A56445424BC064b180C0D14F);  \r\n    address payable public Wallet_Charity = payable(0x99f2A43d66fb2467A56445424BC064b180C0D14F); \r\n\r\n    // Token Info\r\n    string private constant  _name     = \"BONYTA\";\r\n    string private constant  _symbol   = \"BNYTA\";\r\n    uint256 private constant _decimals = 18; \r\n    uint256 private constant _tTotal   = 600_000_000_000_000 * (10 ** _decimals);\r\n    uint256 private max_Hold           = _tTotal;\r\n    uint256 private max_Tran           = _tTotal;\r\n\r\n    // Project links\r\n    string private _Website;\r\n    string private _Telegram;\r\n    string private _LP_Lock;\r\n\r\n    // Fees\r\n    uint8 public _Fee__Buy_Charity;\r\n    uint8 public _Fee__Buy_Liquidity;\r\n    uint8 public _Fee__Buy_Marketing;\r\n    uint8 public _Fee__Buy_Reflection;\r\n    uint8 public _Fee__Buy_Tokens;\r\n\r\n    uint8 public _Fee__Sell_Charity;\r\n    uint8 public _Fee__Sell_Liquidity;\r\n    uint8 public _Fee__Sell_Marketing;\r\n    uint8 public _Fee__Sell_Reflection;\r\n    uint8 public _Fee__Sell_Tokens;\r\n\r\n    // Total Fee for Swap\r\n    uint256 private _SwapFeeTotal_Buy;\r\n    uint256 private _SwapFeeTotal_Sell;\r\n\r\n\r\n    // Supply Tracking for RFI\r\n    uint256 private _tFeeTotal;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    // Set factory\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    constructor () {\r\n\r\n        // Transfer token supply to owner wallet\r\n        _rOwned[_owner] = _rTotal;\r\n\r\n        // Set PancakeSwap Router Address\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        // Create initial liquidity pair with BNB on PancakeSwap factory\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        // Wallets excluded from holding limits\r\n        _isLimitExempt[_owner] = true;\r\n        _isLimitExempt[address(this)] = true;\r\n        _isLimitExempt[Wallet_Burn] = true;\r\n        _isLimitExempt[uniswapV2Pair] = true;\r\n        _isLimitExempt[Wallet_Tokens] = true;\r\n\r\n        // Wallets excluded from fees\r\n        _isExcludedFromFee[_owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[Wallet_Burn] = true;\r\n\r\n        // Set the initial liquidity pair\r\n        _isPair[uniswapV2Pair] = true;    \r\n\r\n        // Exclude from Rewards\r\n        _isExcludedFromRewards[Wallet_Burn] = true;\r\n        _isExcludedFromRewards[uniswapV2Pair] = true;\r\n        _isExcludedFromRewards[address(this)] = true;\r\n\r\n        // Push excluded wallets to array\r\n        _excluded.push(Wallet_Burn);\r\n        _excluded.push(uniswapV2Pair);\r\n        _excluded.push(address(this));\r\n\r\n        // Wallets granted access before trade is open\r\n        _isWhiteListed[_owner] = true;\r\n\r\n        // Emit Supply Transfer to Owner\r\n        emit Transfer(address(0), _owner, _tTotal);\r\n\r\n        // Emit ownership transfer\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n    }\r\n\r\n    \r\n    // Events\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event updated_Wallet_Limits(uint256 max_Tran, uint256 max_Hold);\r\n    event updated_Buy_fees(uint256 Marketing, uint256 Liquidity, uint256 Reflection, uint256 Chairty, uint256 Tokens);\r\n    event updated_Sell_fees(uint256 Marketing, uint256 Liquidity, uint256 Reflection, uint256 Chairty, uint256 Tokens);\r\n    event updated_SwapAndLiquify_Enabled(bool Swap_and_Liquify_Enabled);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    // Restrict function to contract owner only \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Address mappings\r\n    mapping (address => uint256) private _tOwned;                               // Tokens Owned\r\n    mapping (address => uint256) private _rOwned;                               // Reflected balance\r\n    mapping (address => mapping (address => uint256)) private _allowances;      // Allowance to spend another wallets tokens\r\n    mapping (address => bool) public _isExcludedFromFee;                        // Wallets that do not pay fees\r\n    mapping (address => bool) public _isExcludedFromRewards;                    // Excluded from RFI rewards\r\n    mapping (address => bool) public _isWhiteListed;                            // Wallets that have access before trade is open\r\n    mapping (address => bool) public _isLimitExempt;                            // Wallets that are excluded from HOLD and TRANSFER limits\r\n    mapping (address => bool) public _isPair;                                   // Address is liquidity pair\r\n    address[] private _excluded;                                                // Array of wallets excluded from rewards\r\n\r\n\r\n\r\n    // Fee Processing Triggers\r\n    uint8 private swapTrigger = 15;\r\n    uint8 private swapCounter = 1;    \r\n    \r\n    // SwapAndLiquify Switch                  \r\n    bool public processingFees;\r\n    bool public autoFeeProcessing; \r\n\r\n    // Launch Settings\r\n    bool public tradeOpen;\r\n    bool public freeWalletTransfers = true;\r\n\r\n    // Fee Tracker\r\n    bool private takeFee;\r\n\r\n\r\n\r\n    // Project info\r\n    function Project_Information() external view returns(address Owner_Wallet,\r\n                                                         uint256 Transaction_Limit,\r\n                                                         uint256 Max_Wallet,\r\n                                                         uint256 Fee_When_Buying,\r\n                                                         uint256 Fee_When_Selling,\r\n                                                         string memory Website,\r\n                                                         string memory Telegram,\r\n                                                         string memory Liquidity_Lock,\r\n                                                         string memory Custom_Contract_By) {\r\n                                                           \r\n        string memory Creator = \"https://t.me/GenTokens_GEN\";\r\n\r\n        uint8 Total_buy =  _Fee__Buy_Charity      +\r\n                           _Fee__Buy_Liquidity    +\r\n                           _Fee__Buy_Marketing    +\r\n                           _Fee__Buy_Reflection   +\r\n                           _Fee__Buy_Tokens       ;\r\n\r\n        uint8 Total_sell = _Fee__Sell_Charity     +\r\n                           _Fee__Sell_Liquidity   +\r\n                           _Fee__Sell_Marketing   +\r\n                           _Fee__Sell_Reflection  +\r\n                           _Fee__Sell_Tokens      ;\r\n\r\n        uint256 _max_Hold = max_Hold / (10 ** _decimals);\r\n        uint256 _max_Tran = max_Tran / (10 ** _decimals);\r\n\r\n        if (_max_Tran > _max_Hold) {_max_Tran = _max_Hold;}\r\n\r\n        // Return Token Data\r\n        return (_owner,\r\n                _max_Tran,\r\n                _max_Hold,\r\n                Total_buy,\r\n                Total_sell,\r\n                _Website,\r\n                _Telegram,\r\n                _LP_Lock,\r\n                Creator);\r\n\r\n    }\r\n    \r\n\r\n    // Set Fees\r\n    function C01__Set_Fees( \r\n\r\n        uint8 Marketing_on_BUY, \r\n        uint8 Charity_on_BUY,  \r\n        uint8 Liquidity_on_BUY, \r\n        uint8 Tokens_on_BUY,\r\n        uint8 Reflection_on_BUY,\r\n        \r\n        uint8 Marketing_on_SELL,\r\n        uint8 Charity_on_SELL, \r\n        uint8 Liquidity_on_SELL, \r\n        uint8 Tokens_on_SELL,\r\n        uint8 Reflection_on_SELL\r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer Protection: Max Fee 9% \r\n        require (Marketing_on_BUY    + \r\n                 Liquidity_on_BUY    + \r\n                 Charity_on_BUY      + \r\n                 Tokens_on_BUY       +\r\n                 Reflection_on_BUY   < 10, \"E01\"); // Total buy fee must be 9 or less \r\n\r\n\r\n        // Seller Protection: Max Fee 10% \r\n        require (Marketing_on_SELL   + \r\n                 Liquidity_on_SELL   + \r\n                 Charity_on_SELL     + \r\n                 Tokens_on_SELL      +\r\n                 Reflection_on_SELL  < 11, \"E02\"); // Total sell fee must be 10 or less \r\n\r\n        // Update Buy Fees\r\n        _Fee__Buy_Marketing   = Marketing_on_BUY;\r\n        _Fee__Buy_Liquidity   = Liquidity_on_BUY;\r\n        _Fee__Buy_Charity     = Charity_on_BUY;\r\n        _Fee__Buy_Tokens      = Tokens_on_BUY;\r\n        _Fee__Buy_Reflection  = Reflection_on_BUY;\r\n\r\n        // Update Sell Fees\r\n        _Fee__Sell_Marketing  = Marketing_on_SELL;\r\n        _Fee__Sell_Liquidity  = Liquidity_on_SELL;\r\n        _Fee__Sell_Charity    = Charity_on_SELL;\r\n        _Fee__Sell_Tokens     = Tokens_on_SELL;\r\n        _Fee__Sell_Reflection = Reflection_on_SELL;\r\n\r\n        // Fees For Processing\r\n        _SwapFeeTotal_Buy     = _Fee__Buy_Marketing + _Fee__Buy_Liquidity + _Fee__Buy_Charity;\r\n        _SwapFeeTotal_Sell    = _Fee__Sell_Marketing + _Fee__Sell_Liquidity + _Fee__Sell_Charity;\r\n\r\n        emit updated_Buy_fees(_Fee__Buy_Marketing, _Fee__Buy_Liquidity, _Fee__Buy_Charity, _Fee__Buy_Tokens, _Fee__Buy_Reflection);\r\n        emit updated_Sell_fees(_Fee__Sell_Marketing, _Fee__Sell_Liquidity, _Fee__Sell_Charity, _Fee__Sell_Tokens, _Fee__Sell_Reflection);\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------------------------------------\r\n    SET MAX TRANSACTION AND MAX HOLDING LIMITS\r\n    ------------------------------------------\r\n\r\n    Wallet limits are set as a number of tokens, not as a percent of supply!\r\n\r\n    Total Supply = 600,000,000,000,000\r\n\r\n\r\n    Common Percent Values in Tokens (To avoid mistakes, when setting wallet limits, copy and paste these numbers)\r\n\r\n        0.5% = 3000000000000  (This is the lowest permitted value for wallet limits)\r\n        1.0% = 6000000000000\r\n        1.5% = 9000000000000\r\n        2.0% = 12000000000000\r\n        2.5% = 15000000000000\r\n        3.0% = 18000000000000\r\n\r\n        100% = 600000000000000 (Only used when setting up the contract for pre-sale etc.)\r\n\r\n\r\n    */\r\n\r\n    function C02__Wallet_Limits(\r\n\r\n        uint256 Max_Tokens_Each_Transaction,\r\n        uint256 Max_Total_Tokens_Per_Wallet \r\n\r\n        ) external onlyOwner {\r\n\r\n        // Buyer protection - Minimum limits 0.5% Transaction, 0.5% wallet\r\n        require(Max_Tokens_Each_Transaction > 2999999999999, \"E03\"); // 0.5% minimum limit\r\n        require(Max_Total_Tokens_Per_Wallet > 2999999999999, \"E04\"); // 0.5% minimum limit\r\n        \r\n        max_Tran = Max_Tokens_Each_Transaction * (10**_decimals);\r\n        max_Hold = Max_Total_Tokens_Per_Wallet * (10**_decimals);\r\n\r\n        emit updated_Wallet_Limits(max_Tran, max_Hold);\r\n\r\n    }\r\n\r\n\r\n    // Open Trade\r\n    function C04__Open_Trade() external onlyOwner {\r\n\r\n        require(!tradeOpen);\r\n        autoFeeProcessing = true;\r\n        tradeOpen = true;\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    ----------------------\r\n    UPDATE PROJECT WALLETS\r\n    ----------------------\r\n\r\n    */\r\n\r\n\r\n\r\n    function Update_Wallet_Liquidity(\r\n\r\n        address Liquidity_Collection_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        require(Liquidity_Collection_Wallet != address(0), \"E07\"); // Enter a valid BSC Address\r\n        Wallet_Liquidity = Liquidity_Collection_Wallet;\r\n\r\n    }\r\n\r\n    function Update_Wallet_Marketing(\r\n\r\n        address payable Marketing_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        require(Marketing_Wallet != address(0), \"E08\"); // Enter a valid BSC Address\r\n        Wallet_Marketing = payable(Marketing_Wallet);\r\n\r\n    }\r\n\r\n    function Update_Wallet_Charity(\r\n\r\n        address payable Charity_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        require(Charity_Wallet != address(0), \"E08\"); // Enter a valid BSC Address\r\n        Wallet_Charity = payable(Charity_Wallet);\r\n\r\n    }\r\n\r\n    function Update_Wallet_Tokens(\r\n\r\n        address Token_Fee_Wallet\r\n\r\n        ) external onlyOwner {\r\n\r\n        require(Token_Fee_Wallet != address(0), \"E09\"); // Enter a valid BSC Address\r\n        Wallet_Tokens = payable(Token_Fee_Wallet);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n\r\n    --------------------\r\n    UPDATE PROJECT LINKS\r\n    --------------------\r\n\r\n    */\r\n\r\n    function Update_Link_Website(\r\n\r\n        string memory Website_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Website = Website_URL;\r\n\r\n    }\r\n\r\n\r\n    function Update_Link_Telegram(\r\n\r\n        string memory Telegram_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _Telegram = Telegram_URL;\r\n\r\n    }\r\n\r\n\r\n    function Update_Link_Liquidity_Lock(\r\n\r\n        string memory LP_Lock_URL\r\n\r\n        ) external onlyOwner{\r\n\r\n        _LP_Lock = LP_Lock_URL;\r\n\r\n    }\r\n\r\n\r\n    // Add Liquidity Pair - required for correct fee calculations \r\n    function Maintenance__Add_Liquidity_Pair(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false)\r\n\r\n        external onlyOwner {\r\n\r\n        _isPair[Wallet_Address] = true_or_false;\r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n        _isExcludedFromRewards[Wallet_Address] = true;\r\n\r\n        // Push excluded wallets to array\r\n        _excluded.push(Wallet_Address);\r\n    } \r\n\r\n    /* \r\n\r\n    ----------------------------\r\n    CONTRACT OWNERSHIP FUNCTIONS\r\n    ----------------------------\r\n\r\n    Before renouncing ownership, set the freeWalletTransfers to false \r\n\r\n    */\r\n  \r\n    // Renounce Ownership - To prevent accidental renounce, you must enter the Confirmation_Code: 1234\r\n    function Maintenance__Ownership_RENOUNCE(uint256 Confirmation_Code) public virtual onlyOwner {\r\n\r\n        require(Confirmation_Code == 1234, \"E10\"); // Renounce confirmation not correct\r\n\r\n        // Remove old owner status \r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Transfer to New Owner - To prevent accidental renounce, you must enter the Confirmation_Code: 1234\r\n    function Maintenance__Ownership_TRANSFER(address payable newOwner, uint256 Confirmation_Code) public onlyOwner {\r\n\r\n        require(Confirmation_Code == 1234, \"E11\"); // Renounce confirmation not correct\r\n        require(newOwner != address(0), \"E12\"); // Enter a valid BSC wallet\r\n\r\n        // Revoke old owner status\r\n        _isLimitExempt[owner()]     = false;\r\n        _isExcludedFromFee[owner()] = false;\r\n        _isWhiteListed[owner()]     = false;\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n\r\n        // Set up new owner status \r\n        _isLimitExempt[owner()]     = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isWhiteListed[owner()]     = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n    \r\n    ---------------------------------\r\n    NO FEE WALLET TO WALLET TRANSFERS \r\n    ---------------------------------\r\n\r\n    Default = true\r\n\r\n    Having no fee on wallet-to-wallet transfers means that people can move tokens between wallets, \r\n    or send them to friends etc without incurring a fee. \r\n\r\n    If false, the 'Buy' fee will apply to all wallet to wallet transfers.\r\n\r\n    */\r\n\r\n    function Options__Free_Wallet_Transfers(bool true_or_false) public onlyOwner {\r\n\r\n        freeWalletTransfers = true_or_false;\r\n\r\n    }\r\n\r\n\r\n\r\n    /*\r\n\r\n    --------------\r\n    FEE PROCESSING\r\n    --------------\r\n\r\n    */\r\n\r\n    // Auto Fee Processing Switch (SwapAndLiquify)\r\n    function Processing__Auto_Process(bool true_or_false) external onlyOwner {\r\n        autoFeeProcessing = true_or_false;\r\n        emit updated_SwapAndLiquify_Enabled(true_or_false);\r\n    }\r\n\r\n    // Manually Process Fees\r\n    function Processing__Process_Now (uint256 Percent_of_Tokens_to_Process) external onlyOwner {\r\n\r\n        require(!processingFees, \"E14\"); // Already in swap, try later\r\n\r\n        if (Percent_of_Tokens_to_Process > 100){Percent_of_Tokens_to_Process == 100;}\r\n        uint256 tokensOnContract = balanceOf(address(this));\r\n        uint256 sendTokens = tokensOnContract * Percent_of_Tokens_to_Process / 100;\r\n        swapAndLiquify(sendTokens);\r\n\r\n    }\r\n\r\n    // Update Swap Count Trigger\r\n    function Processing__Swap_Trigger_Count(uint8 Transaction_Count) external onlyOwner {\r\n\r\n        swapTrigger = Transaction_Count + 1; // Reset to 1 (not 0) to save gas\r\n    }\r\n\r\n    // Rescue Tokens Accidentally Sent to Contract Address (need to include decimals!)\r\n    function Processing__Rescue_Tokens(\r\n\r\n        address token_Address,\r\n        uint256 number_of_Tokens\r\n\r\n        ) external onlyOwner {\r\n\r\n            require (token_Address != address(this), \"E15\"); // Can not remove the native token\r\n            IERC20(token_Address).transfer(msg.sender, number_of_Tokens);\r\n            \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    ------------------\r\n    REFLECTION REWARDS\r\n    ------------------\r\n\r\n    The following functions are used to exclude or include a wallet in the reflection rewards.\r\n    By default, all wallets are included. \r\n\r\n    Wallets that are excluded:\r\n\r\n            The Burn address \r\n            The Liquidity Pair\r\n            The Contract Address\r\n\r\n    ----------------------------------------\r\n    *** WARNING - DoS 'OUT OF GAS' Risk! ***\r\n    ----------------------------------------\r\n\r\n    A reflections contract needs to loop through all excluded wallets to correctly process several functions. \r\n    This loop can break the contract if it runs out of gas before completion.\r\n\r\n    To prevent this, keep the number of wallets that are excluded from rewards to an absolute minimum. \r\n    In addition to the default excluded wallets, you may need to exclude the address of any locked tokens.\r\n\r\n    */\r\n\r\n\r\n    // Wallet will not get reflections\r\n    function Rewards_Exclude_Wallet(address account) public onlyOwner() {\r\n        require(!_isExcludedFromRewards[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromRewards[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n\r\n    // Wallet will get reflections - DEFAULT\r\n    function Rewards_Include_Wallet(address account) external onlyOwner() {\r\n        require(_isExcludedFromRewards[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromRewards[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    WALLET SETTINGS\r\n    ---------------\r\n\r\n    */\r\n\r\n    // Exclude From Fees\r\n    function Wallet__Exclude_From_Fees(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {\r\n        _isExcludedFromFee[Wallet_Address] = true_or_false;\r\n\r\n    }\r\n\r\n    // Exclude From Transaction and Holding Limits\r\n    function Wallet__Exempt_From_Limits(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {  \r\n        _isLimitExempt[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n    // Grant Pre-Launch Access (Whitelist)\r\n    function Wallet__Pre_Launch_Access(\r\n\r\n        address Wallet_Address,\r\n        bool true_or_false\r\n\r\n        ) external onlyOwner {    \r\n        _isWhiteListed[Wallet_Address] = true_or_false;\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    -----------------------------\r\n    BEP20 STANDARD AND COMPLIANCE\r\n    -----------------------------\r\n\r\n    */\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromRewards[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n   \r\n    function tokenFromReflection(uint256 _rAmount) internal view returns(uint256) {\r\n        require(_rAmount <= _rTotal, \"rAmount can not be greater than rTotal\");\r\n        uint256 currentRate =  _getRate();\r\n        return _rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function send_BNB(address _to, uint256 _amount) internal returns (bool SendSuccess) {\r\n                                \r\n        (SendSuccess,) = payable(_to).call{value: _amount}(\"\");\r\n\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (_tTotal - balanceOf(address(Wallet_Burn)));\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n\r\n    ---------------\r\n    TOKEN TRANSFERS\r\n    ---------------\r\n\r\n    */\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n      ) private {\r\n\r\n\r\n        require(balanceOf(from) >= amount, \"E16\"); // Sender does not have enough tokens!\r\n\r\n\r\n        if (!tradeOpen){\r\n\r\n            require(_isWhiteListed[from] || _isWhiteListed[to], \"E17\");\r\n        }\r\n\r\n\r\n        // Wallet Limit\r\n        if (!_isLimitExempt[to] && from != owner()) {\r\n\r\n            uint256 heldTokens = balanceOf(to);\r\n            require((heldTokens + amount) <= max_Hold, \"E20\"); // Over max wallet limit\r\n\r\n        }\r\n\r\n\r\n        // Transaction limit - To send over the transaction limit the sender AND the recipient must be limit exempt\r\n        if (!_isLimitExempt[to] || !_isLimitExempt[from]){\r\n\r\n            require(amount <= max_Tran, \"E21\"); // Over max transaction limit\r\n            \r\n        }\r\n\r\n\r\n        // Compliance and safety checks\r\n        require(from != address(0), \"E22\"); // Not a valid BSC wallet address\r\n        require(to != address(0), \"E23\"); // Not a valid BSC wallet address\r\n        require(amount > 0, \"E24\"); // Amount must be greater than 0\r\n\r\n\r\n        if (!takeFee){\r\n            takeFee = true;\r\n        }\r\n\r\n\r\n        // Check if fee processing is possible\r\n        if( _isPair[to] && !processingFees && autoFeeProcessing) {\r\n\r\n            // Check that enough transactions have passed since last swap\r\n            if(swapCounter >= swapTrigger && (_SwapFeeTotal_Buy + _SwapFeeTotal_Sell > 0)){\r\n\r\n                // Check number of tokens on contract\r\n                uint256 contractTokens = balanceOf(address(this));\r\n\r\n                // Only trigger fee processing if there are tokens to swap!\r\n                if (contractTokens > 0){\r\n\r\n                    // Remove fee on sell that triggers fee processing\r\n                    takeFee = false;\r\n\r\n                    // Limit number of tokens that can be swapped \r\n                    if (contractTokens <= max_Tran){\r\n\r\n                        swapAndLiquify (contractTokens);\r\n                        \r\n                        } else {\r\n                        \r\n                        swapAndLiquify (max_Tran);\r\n                        \r\n                    }\r\n                }\r\n            }  \r\n        }\r\n\r\n\r\n    // Remove transaction if either wallet is fee exempt, or during wallet to wallet transfers\r\n    if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || (freeWalletTransfers && !_isPair[to] && !_isPair[from])){\r\n        takeFee = false;\r\n    }\r\n\r\n    _tokenTransfer(from, to, amount, takeFee);\r\n\r\n    }\r\n\r\n\r\n    /*\r\n    \r\n    ------------\r\n    PROCESS FEES\r\n    ------------\r\n\r\n    */\r\n\r\n    function swapAndLiquify(uint256 Tokens) private {\r\n\r\n        // Lock \r\n        processingFees = true;  \r\n\r\n        uint256 _FeesTotal      = _SwapFeeTotal_Buy + _SwapFeeTotal_Sell;\r\n        uint256 LP_Tokens       = Tokens * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity) / _FeesTotal / 2;\r\n        uint256 Swap_Tokens     = Tokens - LP_Tokens;\r\n\r\n        // Swap tokens for BNB\r\n        uint256 contract_BNB    = address(this).balance;\r\n        swapTokensForBNB(Swap_Tokens);\r\n        uint256 returned_BNB    = address(this).balance - contract_BNB;\r\n\r\n        // Double fees instead of halving LP fee to prevent rounding errors if fee is an odd number\r\n        uint256 fee_Split = _FeesTotal * 2 - (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity);\r\n\r\n        // Calculate the BNB values for each fee (excluding BNB wallet)\r\n        uint256 BNB_Liquidity   = returned_BNB * (_Fee__Buy_Liquidity + _Fee__Sell_Liquidity)    / fee_Split;\r\n        uint256 BNB_Charity     = returned_BNB * (_Fee__Buy_Charity   + _Fee__Sell_Charity)  * 2 / fee_Split;\r\n\r\n        // Add liquidity \r\n        if (LP_Tokens >= 1){ // Cheaper gas than > 0\r\n\r\n            addLiquidity(LP_Tokens, BNB_Liquidity);\r\n            emit SwapAndLiquify(LP_Tokens, BNB_Liquidity, LP_Tokens);\r\n        }   \r\n\r\n        // Take developer fee\r\n        if(BNB_Charity >= 1){ // Cheaper gas than > 0\r\n\r\n            send_BNB(Wallet_Charity, BNB_Charity);\r\n        \r\n        }\r\n\r\n        \r\n        // Flush remaining BNB to Marketing wallet\r\n        contract_BNB = address(this).balance;\r\n\r\n        if(contract_BNB >= 1){ // Cheaper gas than > 0\r\n\r\n            send_BNB(Wallet_Marketing, contract_BNB);\r\n        }\r\n\r\n        // Reset transaction counter (reset to 1 not 0 to save gas)\r\n        swapCounter = 1;\r\n\r\n        // Unlock\r\n        processingFees = false;\r\n    }\r\n\r\n    // Swap tokens for BNB\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Add liquidity and send Cake LP tokens to liquidity collection wallet\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0,\r\n            Wallet_Liquidity, \r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    /*\r\n    \r\n    ----------------------------------\r\n    TRANSFER TOKENS AND CALCULATE FEES\r\n    ----------------------------------\r\n\r\n    */\r\n\r\n\r\n    uint256 private rAmount;\r\n\r\n    uint256 private tTokens;\r\n    uint256 private tReflect;\r\n    uint256 private tSwapFeeTotal;\r\n    uint256 private tTransferAmount;\r\n\r\n    uint256 private rTokens;\r\n    uint256 private rReflect;\r\n    uint256 private rSwapFeeTotal;\r\n    uint256 private rTransferAmount;\r\n\r\n    \r\n\r\n    // Transfer Tokens and Calculate Fees\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool Fee) private {\r\n\r\n        \r\n        if (Fee){\r\n\r\n            if(_isPair[recipient]){\r\n\r\n                // Sell fees\r\n                tTokens         = tAmount * _Fee__Sell_Tokens     / 100;\r\n                tReflect        = tAmount * _Fee__Sell_Reflection / 100;\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Sell    / 100;\r\n\r\n            } else {\r\n\r\n                // Buy fees\r\n                tTokens         = tAmount * _Fee__Buy_Tokens      / 100;\r\n                tReflect        = tAmount * _Fee__Buy_Reflection  / 100;\r\n                tSwapFeeTotal   = tAmount * _SwapFeeTotal_Buy     / 100;\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n                // No fees\r\n                tTokens         = 0;\r\n                tReflect        = 0;\r\n                tSwapFeeTotal   = 0;\r\n\r\n        }\r\n\r\n        // Calculate reflected fees for RFI\r\n        uint256 RFI     = _getRate(); \r\n\r\n        rAmount         = tAmount       * RFI;\r\n        rTokens         = tTokens       * RFI;\r\n        rReflect        = tReflect      * RFI;\r\n        rSwapFeeTotal   = tSwapFeeTotal * RFI;\r\n\r\n        tTransferAmount = tAmount - (tTokens + tReflect + tSwapFeeTotal);\r\n        rTransferAmount = rAmount - (rTokens + rReflect + rSwapFeeTotal);\r\n\r\n        \r\n        // Swap tokens based on RFI status of sender and recipient\r\n        if (_isExcludedFromRewards[sender] && !_isExcludedFromRewards[recipient]) {\r\n\r\n            _tOwned[sender] -= tAmount;\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _rOwned[recipient] += rTransferAmount;\r\n\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else if (!_isExcludedFromRewards[sender] && _isExcludedFromRewards[recipient]) {\r\n\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _tOwned[recipient] += tTransferAmount;\r\n            _rOwned[recipient] += rTransferAmount;\r\n\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else if (!_isExcludedFromRewards[sender] && !_isExcludedFromRewards[recipient]) {\r\n\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _rOwned[recipient] += rTransferAmount;\r\n\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else if (_isExcludedFromRewards[sender] && _isExcludedFromRewards[recipient]) {\r\n\r\n            _tOwned[sender] -= tAmount;\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _tOwned[recipient] += tTransferAmount;\r\n            _rOwned[recipient] += rTransferAmount;\r\n\r\n                \r\n\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        } else {\r\n\r\n            _rOwned[sender] -= rAmount;\r\n\r\n            _rOwned[recipient] += rTransferAmount;\r\n\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n        }\r\n\r\n\r\n        // Take reflections\r\n        if(tReflect > 0){ \r\n\r\n            _rTotal -= rReflect;\r\n            _tFeeTotal += tReflect;\r\n        }\r\n\r\n        // Take tokens\r\n        if(tTokens > 0){ \r\n\r\n            _rOwned[Wallet_Tokens] += rTokens;\r\n            if(_isExcludedFromRewards[Wallet_Tokens]){_tOwned[Wallet_Tokens] += tTokens;}\r\n            emit Transfer(sender, Wallet_Tokens, tTokens);\r\n\r\n        }\r\n\r\n        // Take fees that require processing during swap and liquify\r\n        if(tSwapFeeTotal > 0){ \r\n\r\n            _rOwned[address(this)] += rSwapFeeTotal;\r\n            if(_isExcludedFromRewards[address(this)]){_tOwned[address(this)] += tSwapFeeTotal;}\r\n            emit Transfer(sender, address(this), tSwapFeeTotal);\r\n\r\n            // Increase the transaction counter\r\n            unchecked{swapCounter++;}\r\n                \r\n        }\r\n\r\n    }\r\n\r\n\r\n   \r\n\r\n    // This function is required so that the contract can receive BNB during fee processing\r\n    receive() external payable {}\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/*\r\n\r\n    Custom Contract by Gen \r\n\r\n    Website: https://TokensByGen.com\r\n    Telegram: https://t.me/GenTokens_GEN\r\n\r\n    Created solely for use with BONYTA (BONYTA) Token\r\n    This contract is not open source - Can not be used or forked without permission.\r\n\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Chairty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens\",\"type\":\"uint256\"}],\"name\":\"updated_Buy_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Marketing\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Reflection\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Chairty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Tokens\",\"type\":\"uint256\"}],\"name\":\"updated_Sell_fees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Swap_and_Liquify_Enabled\",\"type\":\"bool\"}],\"name\":\"updated_SwapAndLiquify_Enabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Tran\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_Hold\",\"type\":\"uint256\"}],\"name\":\"updated_Wallet_Limits\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Marketing_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Charity_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Tokens_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Reflection_on_BUY\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Marketing_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Charity_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Liquidity_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Tokens_on_SELL\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"Reflection_on_SELL\",\"type\":\"uint8\"}],\"name\":\"C01__Set_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Max_Tokens_Each_Transaction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Total_Tokens_Per_Wallet\",\"type\":\"uint256\"}],\"name\":\"C02__Wallet_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"C04__Open_Trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Maintenance__Add_Liquidity_Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Confirmation_Code\",\"type\":\"uint256\"}],\"name\":\"Maintenance__Ownership_RENOUNCE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Confirmation_Code\",\"type\":\"uint256\"}],\"name\":\"Maintenance__Ownership_TRANSFER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Options__Free_Wallet_Transfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Processing__Auto_Process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"Percent_of_Tokens_to_Process\",\"type\":\"uint256\"}],\"name\":\"Processing__Process_Now\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number_of_Tokens\",\"type\":\"uint256\"}],\"name\":\"Processing__Rescue_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Transaction_Count\",\"type\":\"uint8\"}],\"name\":\"Processing__Swap_Trigger_Count\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Project_Information\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"Owner_Wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Transaction_Limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Max_Wallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Buying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Fee_When_Selling\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"Website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Liquidity_Lock\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"Custom_Contract_By\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rewards_Exclude_Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Rewards_Include_Wallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"LP_Lock_URL\",\"type\":\"string\"}],\"name\":\"Update_Link_Liquidity_Lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Telegram_URL\",\"type\":\"string\"}],\"name\":\"Update_Link_Telegram\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"Website_URL\",\"type\":\"string\"}],\"name\":\"Update_Link_Website\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Charity_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Charity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Liquidity_Collection_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"Marketing_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Marketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Token_Fee_Wallet\",\"type\":\"address\"}],\"name\":\"Update_Wallet_Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Charity\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Liquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Wallet_Tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exclude_From_Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Exempt_From_Limits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Wallet_Address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"Wallet__Pre_Launch_Access\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Charity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Reflection\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Buy_Tokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Charity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Liquidity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Marketing\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Reflection\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_Fee__Sell_Tokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFeeProcessing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeWalletTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BONYTA", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b8e1a4bf65b89459a29f3b1d823428ff76e00e4d43e03bd8c90e1cd11e433f2"}