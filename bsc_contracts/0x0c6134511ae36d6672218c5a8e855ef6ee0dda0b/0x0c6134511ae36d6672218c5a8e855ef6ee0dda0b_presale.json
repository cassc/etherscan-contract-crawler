{"SourceCode": "// File: @chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () public {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: github/OpenZeppelin/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ico.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract presale is ReentrancyGuard {\r\n    \r\n    using SafeMath for uint256;\r\n    AggregatorV3Interface internal price_feed;\r\n\r\n    //buyers\r\n    struct buyer {\r\n        uint256 bnb_sent;\r\n        uint256 usdt_sent;\r\n        uint256 tokens_purchased;\r\n        address buyer_address;\r\n        uint256 claimed_tokens;\r\n    }\r\n\r\n    IERC20 public token_contract;\r\n\r\n    address public presale_owner;\r\n\r\n    uint256 public total_investors;\r\n    uint256 public total_bnb_received;\r\n    uint256 public total_usdt_received;\r\n    uint256 public total_tokens_sent;\r\n\r\n    uint256 public tokens_for_presale_left;\r\n    uint256 public tokens_for_presale;\r\n\r\n    uint256 public ratePresale; //listing price in wei\r\n\r\n    bool public presaleEnded;\r\n    bool public claimOpened;\r\n\r\n    mapping(address => buyer) public buyers;\r\n\r\n    IERC20 public token_usdt;\r\n    IERC20 public token_usd;\r\n\r\n    address payable private payment_wallet = 0x30f8AF0Bc036A40E5AAaA3C6fADc6d924e6c0Cb4;\r\n\r\n    constructor() public {\r\n\r\n        price_feed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE);\r\n        token_usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        token_usd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n        tokens_for_presale = 2100000000000000000000000;\r\n        tokens_for_presale_left = tokens_for_presale;\r\n        ratePresale = 230000000000000000;\r\n        presale_owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    //ETH or BNB\r\n    function buyTokensNative() public payable nonReentrant {\r\n\r\n        require(msg.value > 0, \"Must send BNB\");\r\n        \r\n        uint ethUSD = get_feed_price();\r\n        uint256 usdtAmount = msg.value.mul(ethUSD);\r\n        uint256 amount_receieved = msg.value;\r\n\r\n        require(!presaleEnded, \"Presale has ended\");\r\n\r\n        uint256 tokens_purchased = usdtAmount * 10 ** 18; \r\n        tokens_purchased = tokens_purchased.div(ratePresale);\r\n\r\n        buyers[msg.sender].bnb_sent += amount_receieved;\r\n        buyers[msg.sender].tokens_purchased += tokens_purchased;\r\n        buyers[msg.sender].buyer_address = msg.sender;\r\n\r\n        total_bnb_received += amount_receieved;\r\n        tokens_for_presale_left -= tokens_purchased;\r\n        total_investors++;\r\n\r\n        if(tokens_for_presale_left <= 0) {\r\n            presaleEnded = true;\r\n        }\r\n\r\n        payment_wallet.transfer(address(this).balance);\r\n\r\n        emit boughtTokens(amount_receieved, tokens_purchased, total_bnb_received);\r\n    }\r\n\r\n    //USDT\r\n    function buyTokensUSDT(uint256 usdtAmount) public payable nonReentrant {\r\n         \r\n        require(usdtAmount > 0, \"Must send USDT\");\r\n\r\n        require(!presaleEnded, \"Presale has ended\");\r\n\r\n        uint256 tokens_purchased = usdtAmount * 10 ** 18; \r\n        tokens_purchased = tokens_purchased.div(ratePresale);\r\n\r\n        buyers[msg.sender].usdt_sent += usdtAmount;\r\n        buyers[msg.sender].tokens_purchased += tokens_purchased;\r\n        buyers[msg.sender].buyer_address = msg.sender;\r\n\r\n        total_usdt_received += usdtAmount;\r\n        tokens_for_presale_left -= tokens_purchased;\r\n        total_investors++;\r\n\r\n        if(tokens_for_presale_left <= 0) {\r\n            presaleEnded = true;\r\n        }\r\n\r\n        token_usdt.transferFrom(msg.sender, payment_wallet, usdtAmount);\r\n\r\n        emit boughtTokensUsdt(usdtAmount, tokens_purchased, total_usdt_received);\r\n    }\r\n\r\n    //either BUSD or USDC\r\n    function buyTokensUSD(uint256 usdAmount) public payable nonReentrant {\r\n        \r\n        require(usdAmount > 0, \"Must send BUSD\");\r\n\r\n        require(!presaleEnded, \"Presale has ended\");\r\n\r\n        uint256 tokens_purchased = usdAmount * 10 ** 18; \r\n        tokens_purchased = tokens_purchased.div(ratePresale);\r\n\r\n        buyers[msg.sender].usdt_sent += usdAmount;\r\n        buyers[msg.sender].tokens_purchased += tokens_purchased;\r\n        buyers[msg.sender].buyer_address = msg.sender;\r\n\r\n        total_usdt_received += usdAmount;\r\n        tokens_for_presale_left -= tokens_purchased;\r\n        total_investors++;\r\n\r\n        if(tokens_for_presale_left <= 0) {\r\n            presaleEnded = true;\r\n        }\r\n\r\n        token_usd.transferFrom(msg.sender, payment_wallet, usdAmount);\r\n\r\n        emit boughtTokensUsd(usdAmount, tokens_purchased, total_usdt_received);\r\n    }\r\n\r\n    //claim tokens\r\n    function claimTokens() external payable nonReentrant {\r\n\r\n        //check not cancelled\r\n        require(claimOpened, \"Claiming not opened.\");\r\n\r\n        //check claimant is valid\r\n        require(isAddressInvestor(msg.sender) > 0, \"Address not invested.\");\r\n\r\n        //check if address has already claimed\r\n        require(isAddressClaimed(msg.sender) == 0, \"This address has already claimed.\");\r\n\r\n        //allow to claim tokens\r\n        distributeTokens(isAddressInvestor(msg.sender));\r\n    }\r\n\r\n    //is address invested\r\n    function isAddressInvestor(address _wallet) public view returns (uint256) {\r\n        return buyers[_wallet].tokens_purchased;\r\n    }\r\n\r\n    //is address claimed\r\n    function isAddressClaimed(address _wallet) public view returns (uint256) {\r\n        return buyers[_wallet].claimed_tokens;\r\n    }\r\n\r\n    function distributeTokens(uint256 tokens_to_send) internal {\r\n\r\n        uint256 tokenBalance = token_contract.balanceOf(address(this));\r\n\r\n        require(tokens_to_send <= tokenBalance, \"Not enough tokens to claim.\");\r\n\r\n        token_contract.transfer(msg.sender, tokens_to_send);\r\n        total_tokens_sent += tokens_to_send;\r\n        buyers[msg.sender].claimed_tokens = tokens_to_send;\r\n    }\r\n\r\n    function resetBuyer(address investor, uint256 amount) external owner {\r\n\r\n        buyers[investor].tokens_purchased = amount;\r\n        buyers[investor].claimed_tokens = 0;\r\n    }\r\n\r\n    function newRound(uint256 _tokens_for_round, uint256 _rate) external owner {\r\n\r\n        tokens_for_presale = tokens_for_presale.add(_tokens_for_round);\r\n        tokens_for_presale_left = _tokens_for_round;\r\n        ratePresale = _rate;\r\n    }\r\n\r\n    function fund(address payable _to) external owner {\r\n\r\n         _to.transfer(address(this).balance);\r\n    }\r\n\r\n    function fundTokens(address _contract, address _to) external owner {\r\n\r\n         uint256 tokenBalance = IERC20(_contract).balanceOf(address(this));\r\n\r\n         require(tokenBalance > 0, \"No tokens available.\");\r\n\r\n         IERC20(_contract).transfer(_to, tokenBalance);\r\n    }\r\n\r\n    function updateClaimOpened(bool _opened) external owner {\r\n\r\n        claimOpened = _opened;\r\n    }\r\n\r\n    function updateSaleEnded(bool _ended) external owner {\r\n\r\n        presaleEnded = _ended;\r\n    }\r\n\r\n    function updateTokensForSale(uint256 _amount) external owner {\r\n\r\n        tokens_for_presale = _amount;\r\n    }\r\n\r\n    function updateRatePresale(uint256 _rate) external owner {\r\n\r\n        ratePresale = _rate;\r\n    }\r\n\r\n    function updateTokensLeft(uint256 _amount) external owner {\r\n\r\n        tokens_for_presale_left = _amount;\r\n    }\r\n\r\n    function updateTokenContract(address _contract) external owner {\r\n        \r\n        token_contract = IERC20(_contract);\r\n    }\r\n\r\n    function get_amount_of_tokens_native(uint256 amount) public view returns (uint256) {\r\n\r\n        uint ethUSD = get_feed_price();\r\n        uint256 usdtAmount = amount.mul(ethUSD);\r\n        uint256 tokens_purchased = usdtAmount * 10 ** 18; \r\n        tokens_purchased = tokens_purchased.div(ratePresale);\r\n\r\n        return tokens_purchased;\r\n    }\r\n\r\n    function get_amount_of_tokens_usd(uint256 amount) public view returns (uint256) {\r\n\r\n        uint256 tokens_purchased = amount * 10 ** 18; \r\n        tokens_purchased = tokens_purchased.div(ratePresale);\r\n\r\n        return tokens_purchased;\r\n    }\r\n\r\n    function updateFromNoneLaunchChainNative(address[] calldata _buyers, uint256[] calldata _buys, uint256[] calldata _tokens) external owner {\r\n        \r\n        require(_buyers.length == _buys.length, \"Users does not match deposits\");\r\n        require(_buyers.length == _tokens.length, \"Users does not match tokens\");\r\n        \r\n        for(uint256 i = 0; i < _buyers.length; i++) {\r\n            buyers[_buyers[i]].bnb_sent += _buys[i];\r\n            buyers[_buyers[i]].tokens_purchased += _tokens[i];\r\n            buyers[_buyers[i]].buyer_address = _buyers[i];\r\n        }\r\n    }\r\n\r\n     function updateFromNoneLaunchChainUsd(address[] calldata _buyers, uint256[] calldata _buys, uint256[] calldata _tokens) external owner {\r\n        \r\n        require(_buyers.length == _buys.length, \"Users does not match deposits\");\r\n        require(_buyers.length == _tokens.length, \"Users does not match tokens\");\r\n        \r\n        for(uint256 i = 0; i < _buyers.length; i++) {\r\n            buyers[_buyers[i]].usdt_sent += _buys[i];\r\n            buyers[_buyers[i]].tokens_purchased += _tokens[i];\r\n            buyers[_buyers[i]].buyer_address = _buyers[i];\r\n        }\r\n    }\r\n\r\n    function get_feed_price() public view returns (uint) {\r\n\r\n        (\r\n            uint80 feed_roundID, \r\n            int feed_price,\r\n            uint feed_startedAt,\r\n            uint feed_timeStamp,\r\n            uint80 feed_answeredInRound\r\n        ) = price_feed.latestRoundData();\r\n\r\n        uint adjustmentPrice = uint(feed_price) / 10 ** 8;\r\n\r\n        return adjustmentPrice;\r\n    }\r\n\r\n    modifier owner {\r\n\r\n        bool isOwner = false;\r\n\r\n        if(msg.sender == presale_owner) {\r\n            isOwner = true;\r\n        }\r\n\r\n        require(isOwner == true, \"Requires owner\");\r\n\r\n        _;\r\n    }\r\n\r\n    event boughtTokens(uint256 paid, uint256 tokens, uint256 raised);\r\n    event boughtTokensUsdt(uint256 usdtAmount, uint256 tokens_purchased, uint256 total_usdt_received);\r\n    event boughtTokensUsd(uint256 usdAmount, uint256 tokens_purchased, uint256 total_usdt_received);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"raised\",\"type\":\"uint256\"}],\"name\":\"boughtTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_usdt_received\",\"type\":\"uint256\"}],\"name\":\"boughtTokensUsd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens_purchased\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total_usdt_received\",\"type\":\"uint256\"}],\"name\":\"boughtTokensUsdt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyTokensNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUSD\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUSDT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb_sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens_purchased\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimed_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"fundTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"get_amount_of_tokens_native\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"get_amount_of_tokens_usd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_feed_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isAddressClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"isAddressInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens_for_round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"newRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePresale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"resetBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_contract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_usd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens_for_presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens_for_presale_left\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_bnb_received\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_investors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_tokens_sent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_usdt_received\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_opened\",\"type\":\"bool\"}],\"name\":\"updateClaimOpened\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"updateFromNoneLaunchChainNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_buys\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokens\",\"type\":\"uint256[]\"}],\"name\":\"updateFromNoneLaunchChainUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"updateRatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ended\",\"type\":\"bool\"}],\"name\":\"updateSaleEnded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"updateTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateTokensForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateTokensLeft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "presale", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b822429a887b02b9a38592d85965dc820b735189b1ceb78a95b51446c1fae536"}