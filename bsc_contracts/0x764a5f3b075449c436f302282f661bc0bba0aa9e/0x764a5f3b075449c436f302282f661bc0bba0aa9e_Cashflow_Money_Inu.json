{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557    \u2588\u2588\u2557    \r\n\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551    \u2588\u2588\u2551    \r\n\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551 \u2588\u2557 \u2588\u2588\u2551    \r\n\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2557\u2588\u2588\u2551    \r\n\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2554\u2588\u2588\u2588\u2554\u255d    \r\n \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d     \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u255d\u255a\u2550\u2550\u255d     \r\n                                                                       \r\n\u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557                        \r\n\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d                        \r\n\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557   \u255a\u2588\u2588\u2588\u2588\u2554\u255d                         \r\n\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d    \u255a\u2588\u2588\u2554\u255d                          \r\n\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557   \u2588\u2588\u2551                           \r\n\u255a\u2550\u255d     \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d   \u255a\u2550\u255d                           \r\n                                                                       \r\n\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557                                                 \r\n\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551                                                 \r\n\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551                                                 \r\n\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551                                                 \r\n\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d                                                 \r\n\u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d                                                  \r\n                                                                                                                                           \r\n*/\r\n\r\npragma solidity ^0.8.10;\r\n\r\n// interface IPCSFactory   : Interface of PancakeSwap ROuter\r\n\r\ninterface IPCSFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\n// interface IPCSRouter  : Interface of PancakeSwap ROuter\r\n\r\ninterface IPCSRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 _liquedity\r\n        );\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// interface IBEP20 : IBEP20 BEP20 Token Interface which would be used in calling token contract\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256); //Total Supply of Token\r\n\r\n    function decimals() external view returns (uint8); // Decimal of TOken\r\n\r\n    function symbol() external view returns (string memory); // Symbol of Token\r\n\r\n    function name() external view returns (string memory); // Name of Token\r\n\r\n    function balanceOf(address account) external view returns (uint256); // Balance of TOken\r\n\r\n    //Transfer token from one address to another\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    // Get allowance to the spacific users\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Give approval to spend token to another addresses\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    // Transfer token from one address to another\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    //Trasfer Event\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    //Approval Event\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n// This contract helps to add Owners\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n \r\n */\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// Interface IRewardDistributor : Interface that is used by  Reward Distributor\r\n\r\ninterface IRewardDistributor {\r\n    function setDistributionStandard(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function depositBNB() external payable;\r\n\r\n    function process(uint256 gas) external;\r\n\r\n    function claimReward(address _user) external;\r\n\r\n    function getPaidEarnings(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function totalDistributed() external view returns (uint256);\r\n}\r\n\r\n// RewardDistributor : It distributes reward amoung holders\r\n\r\ncontract RewardDistributor is IRewardDistributor {\r\n    address public _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IBEP20 public BUSD = IBEP20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n    IPCSRouter public router;\r\n\r\n    address[] public shareholders;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalRewards;\r\n    uint256 public override totalDistributed;\r\n    uint256 public rewardsPerShare;\r\n    uint256 public rewardsPerShareAccuracyFactor = 10**36;\r\n\r\n    uint256 public minPeriod = 1 minutes;\r\n    uint256 public minDistribution = 1 * (10**BUSD.decimals());\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initializer() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor(address _router) {\r\n        _token = msg.sender;\r\n        router = IPCSRouter(_router);\r\n    }\r\n\r\n    function setDistributionStandard(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount)\r\n        external\r\n        override\r\n        onlyToken\r\n    {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeReward(shareholder);\r\n        }\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares + (shares[shareholder].amount) + (amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeRewards(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function depositBNB() external payable override onlyToken {\r\n        uint256 balanceBefore = BUSD.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(BUSD);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n\r\n        uint256 amount = BUSD.balanceOf(address(this)) - (balanceBefore);\r\n\r\n        totalRewards = totalRewards + (amount);\r\n        rewardsPerShare =\r\n            rewardsPerShare +\r\n            ((rewardsPerShareAccuracyFactor * amount) / (totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeReward(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - (gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    //This function distribute the amounts\r\n    function distributeReward(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed + (amount);\r\n            BUSD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised =\r\n                shares[shareholder].totalRealised +\r\n                (amount);\r\n            shares[shareholder].totalExcluded = getCumulativeRewards(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimReward(address _user) external override {\r\n        distributeReward(_user);\r\n    }\r\n\r\n    function getPaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return shares[shareholder].totalRealised;\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalRewards = getCumulativeRewards(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalRewards <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalRewards - (shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeRewards(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (share * rewardsPerShare) / (rewardsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\n// main contract of Token\r\ncontract Cashflow_Money_Inu is IBEP20, Ownable {\r\n    string private constant _name = \"Cashflow Money Inu\"; // Name\r\n    string private constant _symbol = \"CFMI\"; // Symbol\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 1_000_000_00 * 10**_decimals; //Token Decimals\r\n    uint256 public maxHoldAmount = _totalSupply / 100;\r\n\r\n    address public BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // Reward Token\r\n    address private constant DEAD = address(0xdead); //Dead Address\r\n    address private constant ZERO = address(0); //Zero Address\r\n\r\n    IPCSRouter public router; //Router\r\n    address public pcsPair; //Pair\r\n    address public liquedityReceiver;\r\n    address public marketFeeReceiver;\r\n    address public devFeeReceiver;\r\n\r\n    uint256 public totalBuyFee = 12; //Total Buy Fee\r\n    uint256 public totalSellFee = 12; //Total Sell Fee\r\n    uint256 public feeDivider = 100; // Fee deniminator\r\n\r\n    RewardDistributor public distributor;\r\n    uint256 public distributorGas = 500000;\r\n\r\n    uint256 _liquedityBuyFee = 2; // 2% on Buying\r\n    uint256 _reflectionBuyFee = 9; // 9% on Buying\r\n    uint256 _marketBuyFee = 1; // 1% on Buying\r\n    uint256 _devBuyFee = 0; // 0% on Buying\r\n\r\n    uint256 _liqueditySellFee = 2; // 2% on Selling\r\n    uint256 _reflectionSellFee = 9; // 9% on Selling\r\n    uint256 _marketSellFee = 1; // 1% on Selling\r\n    uint256 _devSellFee = 0; // 0% on Selling\r\n\r\n    uint256 _liquedityFeeCounter;\r\n    uint256 _reflectionFeeCounter;\r\n    uint256 _marketFeeCounter;\r\n    uint256 _devFeeCounter;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isRewardExempt;\r\n    mapping(address => bool) public isLimitExempt;\r\n\r\n    bool public enableSwap = true;\r\n    uint256 public swapLimit = 2000 * (10**_decimals);\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n\r\n    // intializing the addresses\r\n\r\n    constructor() {\r\n        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //mainnet\r\n        // address _router = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3; //testnet\r\n        liquedityReceiver = address(0xFfb5532044E512A103F754E54F3b5D348539591d);\r\n        marketFeeReceiver = address(0xd187A51208a098D1cEd4292d758464b4Ce4AF3Ea);\r\n        devFeeReceiver = address(0x592842baB2c1202664E5ae61D4679c89337B0829);\r\n\r\n        router = IPCSRouter(_router);\r\n        pcsPair = IPCSFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        distributor = new RewardDistributor(_router);\r\n\r\n        isRewardExempt[address(this)] = true;\r\n        isRewardExempt[pcsPair] = true;\r\n        isRewardExempt[DEAD] = true;\r\n\r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[address(this)] = true;\r\n        isFeeExempt[liquedityReceiver] = true;\r\n        isFeeExempt[marketFeeReceiver] = true;\r\n        isFeeExempt[devFeeReceiver] = true;\r\n\r\n        isLimitExempt[owner()] = true;\r\n        isLimitExempt[address(this)] = true;\r\n        isLimitExempt[pcsPair] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // totalSupply() : Shows total Supply of token\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    //decimals() : Shows decimals of token\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // symbol() : Shows symbol of function\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    // name() : Shows name of Token\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    // balanceOf() : Shows balance of the spacific user\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    //allowance()  : Shows allowance of the address from another address\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    // approve() : This function gives allowance of token from one address to another address\r\n    //  ****     : Allowance is checked in TransferFrom() function.\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // transfer() : Transfers tokens  to another address\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    // transferFrom() : Transfers token from one address to another address by utilizing allowance\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != _totalSupply) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    // _transfer() :   called by external transfer and transferFrom function\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        if (inSwap) {\r\n            return _simpleTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (shouldSwap()) {\r\n            swapBack();\r\n        }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        uint256 amountReceived;\r\n        if (\r\n            isFeeExempt[sender] ||\r\n            isFeeExempt[recipient] ||\r\n            (sender != pcsPair && recipient != pcsPair)\r\n        ) {\r\n            amountReceived = amount;\r\n        } else {\r\n            uint256 feeAmount;\r\n            if (sender == pcsPair) {\r\n                feeAmount = (amount * totalBuyFee) / (feeDivider);\r\n                amountReceived = amount - (feeAmount);\r\n                _takeFee(sender, feeAmount);\r\n                setBuyFeeCount(amount);\r\n            }\r\n            if (recipient == pcsPair) {\r\n                feeAmount = (amount * totalSellFee) / (feeDivider);\r\n                amountReceived = amount - (feeAmount);\r\n                _takeFee(sender, feeAmount);\r\n                setSellFeeCount(amount);\r\n            }\r\n        }\r\n\r\n        if (!isLimitExempt[recipient]) {\r\n            require(\r\n                balanceOf(recipient) + amountReceived <= maxHoldAmount,\r\n                \"Max Hold Limit exceeds\"\r\n            );\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + (amountReceived);\r\n\r\n        if (!isRewardExempt[sender]) {\r\n            try distributor.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n        if (!isRewardExempt[recipient]) {\r\n            try\r\n                distributor.setShare(recipient, _balances[recipient])\r\n            {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    // _simpleTransfer() : Transfer basic token account to account\r\n\r\n    function _simpleTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // _takeFee() : This function get calls internally to take fee\r\n\r\n    function _takeFee(address sender, uint256 feeAmount) internal {\r\n        _balances[address(this)] = _balances[address(this)] + feeAmount;\r\n        emit Transfer(sender, address(this), feeAmount);\r\n    }\r\n\r\n    function setBuyFeeCount(uint256 _amount) internal {\r\n        _liquedityFeeCounter += (_amount * _liquedityBuyFee) / (feeDivider);\r\n        _reflectionFeeCounter += (_amount * _reflectionBuyFee) / (feeDivider);\r\n        _marketFeeCounter += (_amount * _marketBuyFee) / (feeDivider);\r\n        _devFeeCounter += (_amount * _devBuyFee) / (feeDivider);\r\n    }\r\n\r\n    function setSellFeeCount(uint256 _amount) internal {\r\n        _liquedityFeeCounter += (_amount * _liqueditySellFee) / (feeDivider);\r\n        _reflectionFeeCounter += (_amount * _reflectionSellFee) / (feeDivider);\r\n        _marketFeeCounter += (_amount * _marketSellFee) / (feeDivider);\r\n        _devFeeCounter += (_amount * _devSellFee) / (feeDivider);\r\n    }\r\n\r\n    //shouldSwap() : To check swap should be done or not\r\n\r\n    function shouldSwap() internal view returns (bool) {\r\n        return (msg.sender != pcsPair &&\r\n            !inSwap &&\r\n            enableSwap &&\r\n            _balances[address(this)] >= swapLimit);\r\n    }\r\n\r\n    //Swapback() : To swap and liqufy the token\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 totalFee = _liquedityFeeCounter +\r\n            (_reflectionFeeCounter) +\r\n            (_marketFeeCounter) +\r\n            (_devFeeCounter);\r\n\r\n        uint256 amountToLiquify = ((swapLimit * _liquedityFeeCounter) /\r\n            (totalFee)) / 2;\r\n\r\n        uint256 amountToSwap = swapLimit - (amountToLiquify);\r\n        _allowances[address(this)][address(router)] = _totalSupply;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance - (balanceBefore);\r\n\r\n        uint256 totalBNBFee = totalFee - (_liquedityFeeCounter / (2));\r\n\r\n        uint256 amountBNBForLiqudity = ((amountBNB * _liquedityFeeCounter) /\r\n            totalBNBFee) / 2;\r\n        uint256 amountBNBForReflection = (amountBNB * _reflectionFeeCounter) /\r\n            (totalBNBFee);\r\n\r\n        uint256 amountBNBForMarket = (amountBNB * _marketFeeCounter) /\r\n            (totalBNBFee);\r\n\r\n        uint256 amountBNBForDev = (amountBNB * _devFeeCounter) / (totalBNBFee);\r\n\r\n        if (amountBNBForReflection > 0) {\r\n            try\r\n                distributor.depositBNB{value: amountBNBForReflection}()\r\n            {} catch {}\r\n        }\r\n        if (amountBNBForReflection > 0) {\r\n            payable(marketFeeReceiver).transfer(amountBNBForMarket);\r\n        }\r\n        if (amountBNBForReflection > 0) {\r\n            payable(devFeeReceiver).transfer(amountBNBForDev);\r\n        }\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountBNBForLiqudity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                liquedityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBForLiqudity, amountToLiquify);\r\n        }\r\n\r\n        _liquedityFeeCounter = 0;\r\n        _reflectionFeeCounter = 0;\r\n        _marketFeeCounter = 0;\r\n        _devFeeCounter = 0;\r\n    }\r\n\r\n    // claimReward() : Function that claims divident manually\r\n\r\n    function claimReward() external {\r\n        distributor.claimReward(msg.sender);\r\n    }\r\n\r\n    // getPaidReward() :Function shows paid Rewards of the user\r\n\r\n    function getPaidReward(address shareholder) public view returns (uint256) {\r\n        return distributor.getPaidEarnings(shareholder);\r\n    }\r\n\r\n    // getUnpaidReward() : Function shows unpaid rewards of the user\r\n\r\n    function getUnpaidReward(address shareholder)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return distributor.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    // getTotalDistributedReward(): Shows total distributed Reward\r\n\r\n    function getTotalDistributedReward() external view returns (uint256) {\r\n        return distributor.totalDistributed();\r\n    }\r\n\r\n    // setFeeExempt() : Function that Set Holders Fee Exempt\r\n    //   ***          : It add user in fee exempt user list\r\n    //   ***          : Owner & Authoized user Can set this\r\n\r\n    function setFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    // setRewardExempt() : Set Holders Reward Exempt\r\n    //      ***          : Function that add user in reward exempt user list\r\n    //      ***          : Owner & Authoized user Can set this\r\n\r\n    function setRewardExempt(address holder, bool exempt) external onlyOwner {\r\n        require(holder != address(this) && holder != pcsPair);\r\n        isRewardExempt[holder] = exempt;\r\n        if (exempt) {\r\n            distributor.setShare(holder, 0);\r\n        } else {\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    // setBuyFee() : Function that set Buy Fee of token\r\n    //   ***       : Owner & Authoized user Can set the fees\r\n\r\n    function setBuyFee(\r\n        uint256 _liquedityFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketFee,\r\n        uint256 _devFee,\r\n        uint256 _feeDivider\r\n    ) public onlyOwner {\r\n        _liquedityBuyFee = _liquedityFee;\r\n        _reflectionBuyFee = _reflectionFee;\r\n        _marketBuyFee = _marketFee;\r\n        _devBuyFee = _devFee;\r\n        totalBuyFee = _liquedityFee + _reflectionFee + _marketFee + _devFee;\r\n        feeDivider = _feeDivider;\r\n        require(\r\n            totalBuyFee <= (feeDivider * 15) / (100),\r\n            \"Can't be greater than 15%\"\r\n        );\r\n    }\r\n\r\n    // setSellFee() : Function that set Sell Fee\r\n    //    ***       : Owner & Authoized user Can set the fees\r\n\r\n    function setSellFee(\r\n        uint256 _liquedityFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _marketFee,\r\n        uint256 _devFee,\r\n        uint256 _feeDivider\r\n    ) public onlyOwner {\r\n        _liqueditySellFee = _liquedityFee;\r\n        _reflectionSellFee = _reflectionFee;\r\n        _marketSellFee = _marketFee;\r\n        _devSellFee = _devFee;\r\n        totalSellFee =\r\n            _liquedityFee +\r\n            (_reflectionFee) +\r\n            (_marketFee) +\r\n            (_devFee);\r\n        feeDivider = _feeDivider;\r\n        require(\r\n            totalSellFee <= (feeDivider * 15) / (100),\r\n            \"Can't be greater than 15%\"\r\n        );\r\n    }\r\n\r\n    // setFeeReceivers() : Function to  set the addresses of Receivers\r\n    //    ***            : Owner & Authoized user Can set the receivers\r\n\r\n    function setFeeReceivers(\r\n        address _liquedityReceiver,\r\n        address _marketFeeReceiver,\r\n        address _devFeeReceiver\r\n    ) external onlyOwner {\r\n        liquedityReceiver = _liquedityReceiver;\r\n        marketFeeReceiver = _marketFeeReceiver;\r\n        devFeeReceiver = _devFeeReceiver;\r\n    }\r\n\r\n    // setSwapBack() : Function that enable of disable swapping functionality of token while transfer\r\n    //     ***       : Swap Limit can be changed through this function\r\n    //     ***       : Owner & Authoized user Can set the swapBack\r\n\r\n    function setSwapBack(bool _enabled, uint256 _amount) external onlyOwner {\r\n        enableSwap = _enabled;\r\n        swapLimit = _amount;\r\n    }\r\n\r\n    // setDistributionStandard() : Function that set distribution standerd on which distributor works\r\n    //      ***                  : Owner & Authoized user Can set the standerd of distributor\r\n\r\n    function setDistributionStandard(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionStandard(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    //setDistributorSetting() : Function that set changes the distribution gas fee which is used in distributor\r\n    //        ***             : Owner & Authoized user Can set the this amount\r\n\r\n    function setDistributorSetting(uint256 gas) external onlyOwner {\r\n        require(gas < 750000, \"Gas must be lower than 750000\");\r\n        distributorGas = gas;\r\n    }\r\n\r\n    // setIsLimitExempt() : Function that sets or remove user from holding limit\r\n\r\n    function setIsLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isLimitExempt[holder] = exempt;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract RewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getPaidReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquedityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pcsPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPCSRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquedityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDivider\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionStandard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquedityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setRewardExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquedityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDivider\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cashflow_Money_Inu", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9d65c7bdff690ccd02ae91d38757d0afde864399706fcb8b260bb3850492fe77"}