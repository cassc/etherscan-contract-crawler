{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract VRFConsumerBaseV2 {\r\n    error OnlyCoordinatorCanFulfill(address have, address want);\r\n    address private immutable vrfCoordinator;\r\n\r\n    /**\r\n     * @param _vrfCoordinator address of VRFCoordinator contract\r\n     */\r\n    constructor(address _vrfCoordinator) {\r\n        vrfCoordinator = _vrfCoordinator;\r\n    }\r\n\r\n    /**\r\n     * @notice fulfillRandomness handles the VRF response. Your contract must\r\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for ////important\r\n     * @notice principles to keep in mind when implementing your fulfillRandomness\r\n     * @notice method.\r\n     *\r\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\r\n     * @dev signature, and will call it once it has verified the proof\r\n     * @dev associated with the randomness. (It is triggered via a call to\r\n     * @dev rawFulfillRandomness, below.)\r\n     *\r\n     * @param requestId The Id initially returned by requestRandomness\r\n     * @param randomWords the VRF output expanded to the requested number of words\r\n     */\r\n    function fulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) internal virtual;\r\n\r\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\r\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\r\n    // the origin of the call\r\n    function rawFulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] memory randomWords\r\n    ) external {\r\n        if (msg.sender != vrfCoordinator) {\r\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\r\n        }\r\n        fulfillRandomWords(requestId, randomWords);\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _manager;\r\n    address private _previousOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _manager = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            _owner == _msgSender() || _manager == _msgSender(),\r\n            \"Ownable: caller is not the owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function manager() private view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n    /**\r\n     * @notice Get configuration relevant for making requests\r\n     * @return minimumRequestConfirmations global min for request confirmations\r\n     * @return maxGasLimit global max for request gas limit\r\n     * @return s_provingKeyHashes list of registered key hashes\r\n     */\r\n    function getRequestConfig()\r\n        external\r\n        view\r\n        returns (uint16, uint32, bytes32[] memory);\r\n\r\n    function requestRandomWords(\r\n        bytes32 keyHash,\r\n        uint64 subId,\r\n        uint16 minimumRequestConfirmations,\r\n        uint32 callbackGasLimit,\r\n        uint32 numWords\r\n    ) external returns (uint256 requestId);\r\n\r\n    function createSubscription() external returns (uint64 subId);\r\n\r\n    function getSubscription(\r\n        uint64 subId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint96 balance,\r\n            uint64 reqCount,\r\n            address owner,\r\n            address[] memory consumers\r\n        );\r\n\r\n    function requestSubscriptionOwnerTransfer(\r\n        uint64 subId,\r\n        address newOwner\r\n    ) external;\r\n\r\n    function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n    function addConsumer(uint64 subId, address consumer) external;\r\n\r\n    function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n    function cancelSubscription(uint64 subId, address to) external;\r\n\r\n    function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\ncontract Game is VRFConsumerBaseV2, Ownable {\r\n    event RequestSent(uint256 requestId, uint32 numWords);\r\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\r\n\r\n    struct RequestStatus {\r\n        bool fulfilled; // whether the request has been successfully fulfilled\r\n        bool exists; // whether a requestId exists\r\n        uint256[] randomWords;\r\n    }\r\n    mapping(uint256 => RequestStatus)\r\n        public s_requests; /* requestId --> requestStatus */\r\n    struct GameStatus {\r\n        uint id;\r\n        address player1;\r\n        address player2;\r\n        address winner;\r\n        uint randomNum;\r\n    }\r\n    GameStatus[50] public gameResults;\r\n    uint public gameIndex = 0;\r\n\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n\r\n    // Your subscription ID.\r\n    uint64 s_subscriptionId;\r\n\r\n    // past requests Id.\r\n    uint256[] public requestIds;\r\n    uint256 private lastRequestId;\r\n\r\n    bytes32 immutable keyHash;\r\n    address public immutable linkToken;\r\n\r\n    uint32 callbackGasLimit = 150000;\r\n\r\n    uint16 requestConfirmations = 3;\r\n    uint32 numWords = 1;\r\n    uint private randomWordsNum;\r\n    uint256 private totalFee = 0;\r\n\r\n    address[] private players;\r\n    address[] private partners;\r\n    uint256[] public availableTickets;\r\n\r\n    mapping(address => uint256[]) private myTickets;\r\n    mapping(address => address[]) private partnerUsers;\r\n    mapping(address => uint256) public balance;\r\n    mapping(address => uint256) public commission;\r\n    mapping(address => uint256) public totalDeposit;\r\n    mapping(address => address) public partner;\r\n\r\n    bool public gameStarted;\r\n    mapping(uint256 => address) public ticket;\r\n    mapping(uint256 => uint256) public ticketCnt;\r\n    uint public gameId = 0;\r\n\r\n    address public recentWinner;\r\n    address payable public _wallet;\r\n\r\n    event GameStarted(uint gameId);\r\n    event PlayerJoined(\r\n        uint gameId,\r\n        uint playerId,\r\n        address player,\r\n        uint256 ticket\r\n    );\r\n    event GameEnded(uint gameId, address winner);\r\n\r\n    constructor(\r\n        uint64 subscriptionId,\r\n        address _linkToken\r\n    ) VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE) {\r\n        COORDINATOR = VRFCoordinatorV2Interface(\r\n            0xc587d9053cd1118f25F645F9E08BB98c9712A4EE\r\n        );\r\n        s_subscriptionId = subscriptionId;\r\n\r\n        keyHash = 0x114f3da0a805b6a67d6e9cd2ec746f7028f1b7376365af575cfea3550dd1aa04; // we alread set this\r\n        linkToken = _linkToken;\r\n        _wallet = payable(0x78EBA672681f893620707027caA7F07361cAC103);\r\n        partners.push(0x78EBA672681f893620707027caA7F07361cAC103);\r\n\r\n        gameStarted = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function startGame() public {\r\n        require(!gameStarted, \"The Game has started\");\r\n\r\n        players = new address[](0);\r\n\r\n        gameStarted = true;\r\n\r\n        gameId += 1;\r\n        gameIndex += 1;\r\n\r\n        emit GameStarted(gameId);\r\n    }\r\n\r\n    function joinGame(address partnerAddr) public payable {\r\n        require(msg.sender == tx.origin, \"THE CALLER MUST BE WALLET!\");\r\n        require(gameStarted, \"The Game has not kicked off\");\r\n        require(players.length < 2, \"The Game is Filled Up!\");\r\n\r\n        uint256 currentFee = (10 * msg.value) / 11;\r\n        uint256 commissionFee = currentFee / 20;\r\n        bool check = isPartner(partnerAddr);\r\n\r\n        if (partner[msg.sender] == 0x0000000000000000000000000000000000000000) {\r\n            partner[msg.sender] = partnerAddr;\r\n            if (!check) {\r\n                partners.push(partnerAddr);\r\n            }\r\n\r\n            partnerUsers[partnerAddr].push(msg.sender);\r\n        }else{\r\n            partnerAddr=partner[msg.sender];\r\n        }\r\n        if (ticket[currentFee] != 0x0000000000000000000000000000000000000000) {\r\n            require(\r\n                ticket[currentFee] != msg.sender,\r\n                \"This user has already bought same ticket\"\r\n            );\r\n\r\n            players.push(ticket[currentFee]);\r\n            players.push(msg.sender);\r\n\r\n            totalFee = totalFee + commissionFee;\r\n            totalDeposit[partnerAddr] += msg.value;\r\n            commission[partnerAddr] += commissionFee;\r\n            getRandomWinner(2 * currentFee);\r\n            removeTicket(currentFee);\r\n            removeMyTicket(ticket[currentFee], currentFee);\r\n            ticket[currentFee] = 0x0000000000000000000000000000000000000000;\r\n            ticketCnt[currentFee] += 1;\r\n            emit PlayerJoined(gameId, 2, msg.sender, currentFee);\r\n        } else {\r\n            ticket[currentFee] = msg.sender;\r\n            totalFee = totalFee + commissionFee;\r\n            myTickets[msg.sender].push(currentFee);\r\n            availableTickets.push(currentFee);\r\n            totalDeposit[partnerAddr] += msg.value;\r\n            commission[partnerAddr] += commissionFee;\r\n\r\n            emit PlayerJoined(gameId, 1, msg.sender, currentFee);\r\n        }\r\n        \r\n    }\r\n\r\n    function removeTicket(uint256 ticketFee) internal {\r\n        for (uint256 i = 0; i < availableTickets.length; i++) {\r\n            if (availableTickets[i] == ticketFee) {\r\n                availableTickets[i] = availableTickets[\r\n                    availableTickets.length - 1\r\n                ];\r\n                availableTickets.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeMyTicket(address firstPalyer, uint256 ticketFee) internal {\r\n        for (uint256 i = 0; i < myTickets[firstPalyer].length; i++) {\r\n            if (myTickets[firstPalyer][i] == ticketFee) {\r\n                myTickets[firstPalyer][i] = myTickets[firstPalyer][\r\n                    myTickets[firstPalyer].length - 1\r\n                ];\r\n                myTickets[firstPalyer].pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isPartner(address checker) public view virtual returns (bool) {\r\n        bool state = false;\r\n        for (uint i = 0; i < partners.length; i++) {\r\n            if (partners[i] == checker) {\r\n                state = true;\r\n                break;\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    function isPartnerUser(\r\n        address partnerAddr,\r\n        address checker\r\n    ) public view returns (bool) {\r\n        bool state = false;\r\n        for (uint i = 0; i < partnerUsers[partnerAddr].length; i++) {\r\n            if (partnerUsers[partnerAddr][i] == checker) {\r\n                state = true;\r\n                break;\r\n            }\r\n        }\r\n        return state;\r\n    }\r\n\r\n    function getTotalUsers(\r\n        address partnerAddr\r\n    ) public view virtual returns (uint) {\r\n        return partnerUsers[partnerAddr].length;\r\n    }\r\n\r\n    function getTickets() public view virtual returns (uint256[] memory) {\r\n        return availableTickets;\r\n    }\r\n\r\n    function getMyTickets() public view virtual returns (uint256[] memory) {\r\n        return myTickets[msg.sender];\r\n    }\r\n\r\n    function getGameStatus()\r\n        public\r\n        view\r\n        virtual\r\n        returns (GameStatus[50] memory)\r\n    {\r\n        return gameResults;\r\n    }\r\n\r\n    function refund(uint256 feeSent) public {\r\n        require(\r\n            ticket[feeSent] == msg.sender,\r\n            \"You don't have this ticket to refund\"\r\n        );\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: feeSent}(\"\");\r\n        gameStarted = false;\r\n\r\n        emit GameEnded(gameId, msg.sender);\r\n        startGame();\r\n        ticket[feeSent] = 0x0000000000000000000000000000000000000000;\r\n        removeTicket(feeSent);\r\n        removeMyTicket(msg.sender, feeSent);\r\n        require(success, \"Failed to refund\");\r\n    }\r\n\r\n    function getRandomWinner(uint256 fee) internal returns (address) {\r\n        requestRandomWords();\r\n\r\n        uint winnerIndex = randomWordsNum % 2;\r\n\r\n        recentWinner = players[winnerIndex];\r\n\r\n        balance[recentWinner] += fee;\r\n\r\n        gameStarted = false;\r\n        if (gameIndex >= 50) {\r\n            gameIndex = 0;\r\n        }\r\n\r\n        gameResults[gameIndex] = GameStatus({\r\n            id: gameIndex,\r\n            player1: players[0],\r\n            player2: players[1],\r\n            winner: recentWinner,\r\n            randomNum: randomWordsNum\r\n        });\r\n\r\n        emit GameEnded(gameId, recentWinner);\r\n        startGame();\r\n        return recentWinner;\r\n    }\r\n\r\n    function requestRandomWords() internal returns (uint256 requestId) {\r\n        requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            numWords\r\n        );\r\n\r\n        s_requests[requestId] = RequestStatus({\r\n            randomWords: new uint256[](0),\r\n            exists: true,\r\n            fulfilled: false\r\n        });\r\n        requestIds.push(requestId);\r\n        lastRequestId = requestId;\r\n        emit RequestSent(requestId, numWords);\r\n        return requestId; // requestID is a uint.\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        s_requests[_requestId].fulfilled = true;\r\n        s_requests[_requestId].randomWords = _randomWords;\r\n\r\n        randomWordsNum = _randomWords[0]; // Set array-index to variable, easier to play with\r\n        emit RequestFulfilled(_requestId, _randomWords);\r\n    }\r\n\r\n    // to check the request status of random number call.\r\n\r\n    function getRequestStatus(\r\n        uint256 _requestId\r\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\r\n        require(s_requests[_requestId].exists, \"request not found\");\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return (request.fulfilled, request.randomWords);\r\n    }\r\n\r\n    function withdrawForUser() public {\r\n        require(balance[msg.sender] > 0, \"Player has no earning!\");\r\n        payable(msg.sender).transfer(balance[msg.sender]);\r\n        balance[msg.sender] = 0;\r\n    }\r\n\r\n    function withdrawCommission() public {\r\n        require(commission[msg.sender] > 0, \"Player has no earning!\");\r\n        payable(msg.sender).transfer(commission[msg.sender]);\r\n        commission[msg.sender] = 0;\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(address(this).balance > 0, \"Contract has no bnb\");\r\n        _wallet.transfer(totalFee);\r\n        _wallet.transfer(balance[_wallet]);\r\n        balance[_wallet] = 0;\r\n        totalFee = 0;\r\n    }\r\n\r\n    function withdrawAll() external onlyOwner {\r\n        require(address(this).balance > 0, \"Contract has no bnb\");\r\n        _wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function setWalletReceiver(address payable newWallet) external onlyOwner {\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    function setSubscriptionId(uint64 newSubscriptionId) external onlyOwner {\r\n        s_subscriptionId = newSubscriptionId;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"GameEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticket\",\"type\":\"uint256\"}],\"name\":\"PlayerJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_wallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameResults\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"player2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"randomNum\",\"type\":\"uint256\"}],\"internalType\":\"struct Game.GameStatus[50]\",\"name\":\"\",\"type\":\"tuple[50]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTickets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTickets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerAddr\",\"type\":\"address\"}],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checker\",\"type\":\"address\"}],\"name\":\"isPartner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"checker\",\"type\":\"address\"}],\"name\":\"isPartnerUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partnerAddr\",\"type\":\"address\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeSent\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newSubscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketCnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Game", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000033d000000000000000000000000404460c6a5ede2d891e8297795264fde62adbb75", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2f60b2c6e2443bce7e045df91c202b80502767d744e2e5be10a495a77cb2ae7a"}