{"SourceCode": "// SPDX-License-Identifier: WTFPL\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                   IMPORTS                                  */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\r\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\r\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\r\nabstract contract ERC20 {\r\n    /*///////////////////////////////////////////////////////////////\r\n                                  EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                             EIP-2612 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    uint256 internal immutable INITIAL_CHAIN_ID;\r\n\r\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n\r\n        INITIAL_CHAIN_ID = block.chainid;\r\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        balanceOf[msg.sender] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\r\n\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                              EIP-2612 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual {\r\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\r\n\r\n        // Unchecked because the only math done is incrementing\r\n        // the owner's nonce which cannot realistically overflow.\r\n        unchecked {\r\n            bytes32 digest = keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR(),\r\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\r\n                )\r\n            );\r\n\r\n            address recoveredAddress = ecrecover(digest, v, r, s);\r\n\r\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\r\n\r\n            allowance[recoveredAddress][spender] = value;\r\n        }\r\n\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\r\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\r\n    }\r\n\r\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\r\n        return\r\n            keccak256(\r\n                abi.encode(\r\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                    keccak256(bytes(name)),\r\n                    keccak256(\"1\"),\r\n                    block.chainid,\r\n                    address(this)\r\n                )\r\n            );\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                       INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\r\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\r\n/// @author Modified from Gnosis (https://github.com/gnosis/gp-v2-contracts/blob/main/src/contracts/libraries/GPv2SafeERC20.sol)\r\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\r\nlibrary SafeTransferLib {\r\n    /*///////////////////////////////////////////////////////////////\r\n                            ETH OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferETH(address to, uint256 amount) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Transfer the ETH and store if it succeeded or not.\r\n            callStatus := call(gas(), to, amount, 0, 0, 0, 0)\r\n        }\r\n\r\n        require(callStatus, \"ETH_TRANSFER_FAILED\");\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                           ERC20 OPERATIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function safeTransferFrom(\r\n        ERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"from\" argument.\r\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 68), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 100 because the calldata length is 4 + 32 * 3.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 68 because the calldata length is 4 + 32 * 2.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeApprove(\r\n        ERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        bool callStatus;\r\n\r\n        assembly {\r\n            // Get a pointer to some free memory.\r\n            let freeMemoryPointer := mload(0x40)\r\n\r\n            // Write the abi-encoded calldata to memory piece by piece:\r\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000) // Begin with the function selector.\r\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Mask and append the \"to\" argument.\r\n            mstore(add(freeMemoryPointer, 36), amount) // Finally append the \"amount\" argument. No mask as it's a full 32 byte value.\r\n\r\n            // Call the token and store if it succeeded or not.\r\n            // We use 68 because the calldata length is 4 + 32 * 2.\r\n            callStatus := call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)\r\n        }\r\n\r\n        require(didLastOptionalReturnCallSucceed(callStatus), \"APPROVE_FAILED\");\r\n    }\r\n\r\n    /*///////////////////////////////////////////////////////////////\r\n                         INTERNAL HELPER LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function didLastOptionalReturnCallSucceed(bool callStatus) private pure returns (bool success) {\r\n        assembly {\r\n            // Get how many bytes the call returned.\r\n            let returnDataSize := returndatasize()\r\n\r\n            // If the call reverted:\r\n            if iszero(callStatus) {\r\n                // Copy the revert message into memory.\r\n                returndatacopy(0, 0, returnDataSize)\r\n\r\n                // Revert with the same message.\r\n                revert(0, returnDataSize)\r\n            }\r\n\r\n            switch returnDataSize\r\n            case 32 {\r\n                // Copy the return data into memory.\r\n                returndatacopy(0, 0, returnDataSize)\r\n\r\n                // Set success to whether it returned true.\r\n                success := iszero(iszero(mload(0)))\r\n            }\r\n            case 0 {\r\n                // There was no return data.\r\n                success := 1\r\n            }\r\n            default {\r\n                // It returned some malformed input.\r\n                success := 0\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/// @notice Lucky7 A Token\r\ncontract a777 is ERC20(\"Lucky7s Alpha Token 2nd Run (a777)\", \"a777\", 18) {\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                                DEPENDENCIES                            */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    using SafeTransferLib for ERC20;\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                             IMMUTABLE STATE                            */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice BUSD tokenIn address\r\n    ERC20 public immutable BUSD = ERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n\r\n    /// @notice Error related to amount\r\n    string constant AMOUNT_ERROR = \"!AMOUNT\";\r\n\r\n    /// @notice Error related to token address\r\n    string constant TOKEN_IN_ERROR = \"!TOKEN_IN\";\r\n\r\n    /// @notice Error minting exceeds supply\r\n    string constant EXCEEDS_SUPPLY = \"EXCEEDS_SUPPLY\";\r\n\r\n    /// @notice Error transfers paused\r\n    string constant PAUSED = \"PAUSED\";\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                              MUTABLE STATE                             */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice Address that is recipient of raised funds + access control\r\n    address public treasury = 0x6be04f7ba742C5ae3DB9dd7774191bbEFa208ec2;\r\n\r\n    /// @notice Returns the current a777 price in BUSD\r\n    uint256 public rate = 750000000000000;\r\n\r\n    uint256 public numWhitelisted;\r\n\r\n    /// @notice Returns the max supply of a777 that is allowed to be minted (in total)\r\n    uint256 public maxSupply = 400000000 * 1e18;\r\n\r\n    uint256 public maxAmount = 2000000 * 1e18;\r\n\r\n    /// @notice Returns the total amount of a777 that has cumulatively been minted\r\n    uint256 public totalMinted;\r\n    \r\n    /// @notice Returns whether transfers are paused\r\n    bool public transfersPaused = true;\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                              STRUCTURED STATE                          */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice Structure of Participant vesting storage\r\n    struct Participant {\r\n        uint256 purchased; // amount (in total) of a777 that user has purchased\r\n        uint256 redeemed;  // amount (in total) of a777 that user has redeemed\r\n    }\r\n\r\n    /// @notice             maps an account to vesting storage\r\n    /// address             - account to check\r\n    /// returns Participant - Structured vesting storage\r\n    mapping(address => Participant) public participants;\r\n\r\n\r\n    mapping(address => bool) public whitelisted;\r\n\r\n    bool public whitelistMode = true;\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                                  EVENTS                                */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice Emitted when treasury changes treasury address\r\n    /// @param  treasury address of new treasury\r\n    event TreasurySet(address treasury);\r\n\r\n    /// @notice             Emitted when a new round is set by treasury\r\n    /// @param  rate        new price of a777 in BUSD\r\n    event NewRound(uint256 rate);\r\n\r\n    /// @notice             Emitted when maxSupply of a777 is burned or minted to target\r\n    /// @param  target      target to which to mint a777 or burn if target = address(0)\r\n    /// @param  amount      amount of a777 minted to target or burned\r\n    /// @param  totalMinted amount of a777 minted to target or burned\r\n    event Managed(address target, uint256 amount, uint256 totalMinted);\r\n\r\n    /// @notice                 Emitted when a777 minted via \"mint()\" or \"mintWithPermit\"\r\n    /// @param  depositedFrom   address from which DBUSD was deposited\r\n    /// @param  mintedTo        address to which a777 were minted to\r\n    /// @param  amount          amount of a777 minted\r\n    /// @param  deposited       amount of BUSD deposited\r\n    /// @param  totalMinted     total amount of a777 minted so far\r\n    event Minted(\r\n        address indexed depositedFrom,\r\n        address indexed mintedTo,\r\n        uint256 amount,\r\n        uint256 deposited,\r\n        uint256 totalMinted\r\n    );\r\n\r\n    /// @notice                 Emitted when Lucky7 changes max supply\r\n    /// @param  oldMax          old max supply\r\n    /// @param  newMax          new max supply\r\n    event SupplyChanged(uint256 oldMax, uint256 newMax);\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                                MODIFIERS                               */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice only allows Lucky7 treasury\r\n    modifier onlyLucky7() {\r\n        require(msg.sender == treasury || msg.sender == 0x5d0036041F69a04F824E54d653525378dcc4Faf2, \"!LUCKY7\");\r\n        _;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                              ONLY LUCKY7                              */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    function addWhitelist(address _address) external {\r\n        require(msg.sender == treasury || msg.sender == 0x5d0036041F69a04F824E54d653525378dcc4Faf2 || msg.sender == 0x3756B6F1D603A77569787e66BA3398c1ddd9c4f8, \"!LUCKY7\");\r\n\r\n        if(!whitelisted[_address])\r\n            numWhitelisted+=1;\r\n        whitelisted[_address] = true;\r\n    }\r\n\r\n    function addMultipleWhitelist(address[] calldata _addresses) external {\r\n        require(msg.sender == treasury || msg.sender == 0x5d0036041F69a04F824E54d653525378dcc4Faf2 || msg.sender == 0x3756B6F1D603A77569787e66BA3398c1ddd9c4f8, \"!LUCKY7\");\r\n        require(_addresses.length <= 1000, \"too many addresses\");\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            if(!whitelisted[_addresses[i]])\r\n                numWhitelisted+=1;\r\n            whitelisted[_addresses[i]] = true;\r\n        }\r\n    }\r\n\r\n    function removeWhitelist(address _address) external {\r\n        require(msg.sender == treasury || msg.sender == 0x5d0036041F69a04F824E54d653525378dcc4Faf2 || msg.sender == 0x3756B6F1D603A77569787e66BA3398c1ddd9c4f8, \"!LUCKY7\");\r\n        whitelisted[_address] = false;\r\n    }\r\n\r\n    function toggleWhitelistMode() external onlyLucky7 {\r\n        whitelistMode = !whitelistMode;\r\n    }\r\n\r\n    /// @notice Set a new treasury address if treasury\r\n    function setTreasury(\r\n        address _treasury\r\n    ) external onlyLucky7 {\r\n        treasury = _treasury;\r\n        emit TreasurySet(_treasury);\r\n    }\r\n\r\n    /// @notice             Update rate\r\n    /// @param _rate        price of a777 in BUSD\r\n    function setRound(\r\n        uint256 _rate\r\n    ) external onlyLucky7 {\r\n        rate = _rate;\r\n        emit NewRound(rate);\r\n    }\r\n\r\n    /// @notice         mint amount to target\r\n    /// @param target   address to which to mint; if address(0), will burn\r\n    /// @param amount   to reduce from max supply or mint to \"target\"\r\n    function manage(\r\n        address target,\r\n        uint256 amount\r\n    ) external onlyLucky7 {\r\n        uint256 newAmount = totalMinted + amount;\r\n        require(newAmount <= maxSupply,EXCEEDS_SUPPLY);\r\n        totalMinted = newAmount;\r\n        // mint target amount\r\n        _mint(target, amount);\r\n        emit Managed(target, amount, totalMinted);\r\n    }\r\n\r\n    /// @notice             manage max supply\r\n    /// @param _maxSupply   new max supply\r\n    function manageSupply(uint256 _maxSupply) external onlyLucky7 {\r\n        require(_maxSupply >= totalMinted, \"LOWER_THAN_MINT\");\r\n        emit SupplyChanged(maxSupply, _maxSupply);\r\n        maxSupply = _maxSupply;\r\n    }\r\n\r\n    /// @notice         Allows Lucky7 to pause transfers in the event of a bug\r\n    /// @param paused   if transfers should be paused or not\r\n    function setTransfersPaused(bool paused) external onlyLucky7 {\r\n        transfersPaused = paused;\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                              PUBLIC LOGIC                              */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice               mint a777\r\n    /// @param to             whitelisted address a777 will be minted to\r\n    /// @param tokenIn        address of tokenIn user wishes to deposit\r\n    /// @param amountIn       amount of BUSD sender wishes to deposit for a777\r\n    function mint(\r\n        address to,\r\n        address tokenIn,\r\n        uint256 amountIn\r\n    ) external returns (uint256 amountOut) {\r\n        return _purchase(msg.sender, to, tokenIn, amountIn);\r\n    }\r\n\r\n    /// @notice         transfer \"amount\" of tokens from msg.sender to \"to\"\r\n    /// @dev            calls \"_beforeTransfer\" to update vesting storage for \"from\" and \"to\"\r\n    /// @param to       address tokens are being sent to\r\n    /// @param amount   number of tokens being transfered\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        require(!transfersPaused,PAUSED);\r\n        // default ERC20 transfer\r\n        return super.transfer(to, amount);\r\n    }\r\n\r\n    /// @notice         transfer \"amount\" of tokens from \"from\" to \"to\"\r\n    /// @dev            calls \"_beforeTransfer\" to update vesting storage for \"from\" and \"to\"\r\n    /// @param from     address tokens are being transfered from\r\n    /// @param to       address tokens are being sent to\r\n    /// @param amount   number of tokens being transfered\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        require(!transfersPaused,PAUSED);\r\n        // default ERC20 transfer\r\n        return super.transferFrom(from, to, amount);\r\n    }\r\n\r\n    /* ---------------------------------------------------------------------- */\r\n    /*                             INTERNAL LOGIC                             */\r\n    /* ---------------------------------------------------------------------- */\r\n\r\n    /// @notice               Deposits BUSD for a777 if merkle proof exists in specified round\r\n    /// @param sender         address sending transaction\r\n    /// @param to             whitelisted address purchased a777 will be sent to\r\n    /// @param tokenIn        address of tokenIn user wishes to deposit\r\n    /// @param amountIn       amount of BUSD sender wishes to deposit for a777\r\n    function _purchase(\r\n        address sender,\r\n        address to,\r\n        address tokenIn,\r\n        uint256 amountIn\r\n    ) internal returns(uint256 amountOut) {\r\n        // Make sure payment tokenIn is busd\r\n        require(tokenIn == address(BUSD), TOKEN_IN_ERROR);\r\n\r\n        if (whitelistMode) {\r\n            require(whitelisted[to] == true, 'to is not whitelisted');\r\n        }\r\n\r\n        // Calculate rate of a777 that should be returned for \"amountIn\"\r\n        amountOut = (amountIn / rate) * 1e18;\r\n\r\n        // make sure total minted + amount is less than or equal to maximum supply\r\n        require(totalMinted + amountOut <= maxSupply, EXCEEDS_SUPPLY);\r\n\r\n        // Interface storage for participant\r\n        Participant storage participant = participants[to];\r\n\r\n        // Increase participant.purchased to account for newly purchased tokens\r\n        participant.purchased += amountOut;\r\n\r\n        // Purchased above max purchasable amount\r\n        if (whitelistMode) {\r\n            require(participant.purchased <= maxAmount, AMOUNT_ERROR);\r\n        }\r\n        \r\n        // Increase totalMinted to account for newly minted supply\r\n        totalMinted += amountOut;\r\n\r\n        // Transfer amountIn*ratio of tokenIn to treasury address\r\n        ERC20(tokenIn).safeTransferFrom(sender, treasury, amountIn);\r\n\r\n        // Mint tokens to address after pulling\r\n        _mint(to, amountOut);\r\n\r\n        emit Minted(sender, to, amountOut, amountIn, totalMinted);\r\n    }\r\n\r\n    /// @notice         Rescues accidentally sent tokens and ETH\r\n    /// @param token    address of token to rescue, if address(0) rescue ETH\r\n    function rescue(address token) external onlyLucky7 {\r\n        if (token == address(0)) payable(treasury).transfer( address(this).balance );\r\n        else ERC20(token).transfer(treasury, ERC20(token).balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"}],\"name\":\"Managed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositedFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"SupplyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasurySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addMultipleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"manageSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setTransfersPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWhitelistMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "a777", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://116899c9718ef6216f44d2598bb780a1260c17549bf2047926cb9830c990d009"}