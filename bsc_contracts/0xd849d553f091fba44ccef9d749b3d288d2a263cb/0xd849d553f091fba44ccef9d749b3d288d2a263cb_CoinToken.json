{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-09-29\r\n*/\r\n/**\r\nTop100token.com | Promotion Payment Contract\r\n\r\nWebsite: https://top100token.com/\r\nTelegram: https://t.me/top100token\r\nTwitter: https://twitter.com/top100token\r\n*/\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address payable private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\ncontract CoinToken is Context, Ownable {\r\n    \r\n    //history\r\n    struct BuyData {\r\n        uint256 advertId;\r\n        uint256 promoType;\r\n        uint256 amount;\r\n    }\r\n    uint256 private currentBuyIndex;\r\n    mapping (uint256 => BuyData) private buyHistory;\r\n\r\n    constructor () public {\r\n        currentBuyIndex = 1;\r\n    }\r\n    \r\n    // toplist support\r\n    function getBuyCount() public view returns (uint256) {\r\n        return currentBuyIndex;\r\n    }\r\n    \r\n    function getBuyHistory(uint256 idx) public view returns (uint256, uint256, uint256) {\r\n        require(idx <= currentBuyIndex, \"Index out of bounds\");\r\n        \r\n        return (buyHistory[idx].advertId, buyHistory[idx].promoType, buyHistory[idx].amount);\r\n    }\r\n    \r\n    function buyAdvertWithBNB(uint256 advertId, uint256 promoType) external payable {\r\n        require(advertId > 0, \"Invalid advert ID\");\r\n        require(msg.value >= 0.01 ether);\r\n        \r\n        bool success = owner().send(msg.value);\r\n        require(success, \"Money transfer failed\");\r\n        \r\n        buyHistory[currentBuyIndex] = BuyData(advertId, promoType, msg.value);\r\n        ++currentBuyIndex;\r\n    }\r\n    \r\n \r\n    \r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {\r\n         bool success = owner().send(msg.value);\r\n         require(success, \"Money transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"advertId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promoType\",\"type\":\"uint256\"}],\"name\":\"buyAdvertWithBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBuyHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CoinToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9118e9b5deba01f3e703f0ea62a5ab1d10750b11bec21aedb894e27dfe06e43a"}