{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OIRContestManualv2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract OIRContestManualv2 is Ownable, ReentrancyGuard {\\r\\n    using Strings for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(address => bool) public proxyToApproved; // proxy allowance for interaction with future contract\\r\\n    address public treasuryAddress; \\r\\n\\r\\n    struct Contest {\\r\\n        uint16 id;                                  // unique ID for this contest\\r\\n        uint16 entryCount;                          // number of entries\\r\\n        uint16 maxEntries;                          // max number of entries\\r\\n        uint16 maxEntriesForThree;                  // precalculated value for inexpensive comparison\\r\\n        uint16 winningEntry;                        // winning entry number\\r\\n        address paymentToken;                       // payment token address; for native, use 0x0000000000000000000000000000000000000000\\r\\n        uint256 price;                              // price in token\\r\\n        uint256 priceForThree;                      // precalculated price for three\\r\\n        uint256 payments;                           // total of payments\\r\\n        uint256 paymentsDistributed;                // profit distributed\\r\\n        bool isWon;                            // if contest has been won\\r\\n        bool isActive;                              // if contest is accepting entries\\r\\n        bool refunded;                              // if contest was closed early and refunded\\r\\n        mapping(uint256 => Entry) Entries;          // list of entries\\r\\n        mapping(address => uint256) UserEntryCount; // entries count by address\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => address) public ContestWinner;\\r\\n\\r\\n    struct Entry {\\r\\n        address user;               // user address\\r\\n        uint256 amount;             // amount paid by user\\r\\n    }\\r\\n\\r\\n    uint256 public paymentsWithdrawn;\\r\\n\\r\\n    struct FeeRecipient {\\r\\n        address recipient;\\r\\n        uint256 basisPoints;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => FeeRecipient) public FeeRecipients;\\r\\n    uint256 public feeRecipientCount;\\r\\n    uint256 public totalFeeBasisPoints;\\r\\n    mapping(uint256 => Contest) public Contests;\\r\\n    uint16 public contestCount;\\r\\n\\r\\n    constructor(address treasury_) {\\r\\n        treasuryAddress = treasury_;\\r\\n    }\\r\\n\\r\\n    // ** - CORE - ** //\\r\\n\\r\\n    function buyOne(uint256 contestID) external payable {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(contest.isActive && ContestWinner[contestID] == address(0), \\\"NOT_ACTIVE\\\");\\r\\n        require(contest.maxEntries > contest.entryCount, \\\"EXCEEDS_MAX_ENTRIES\\\");\\r\\n        if (contest.paymentToken == address(0)) {\\r\\n            require(msg.value == contest.price, \\\"INCORRECT_PAYMENT\\\");\\r\\n        } else {\\r\\n            IERC20(contest.paymentToken).transferFrom(_msgSender(), address(this), contest.price);\\r\\n        }\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});\\r\\n        contest.entryCount++;\\r\\n        contest.payments += contest.price;\\r\\n        contest.UserEntryCount[_msgSender()]++;\\r\\n        contest.isActive = contest.entryCount < contest.maxEntries;\\r\\n        emit BuyOne(_msgSender(), contestID, contest.price);\\r\\n    }     \\r\\n\\r\\n    function buyThree(uint256 contestID) external payable {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(contest.isActive && ContestWinner[contestID] == address(0), \\\"NOT_ACTIVE\\\");\\r\\n        require(contest.entryCount < contest.maxEntriesForThree, \\\"EXCEEDS_MAX_ENTRIES\\\");\\r\\n        if (contest.paymentToken == address(0)) {\\r\\n            // native\\r\\n            require(msg.value == contest.priceForThree, \\\"INCORRECT_PAYMENT\\\");\\r\\n        } else {\\r\\n            IERC20(contest.paymentToken).transferFrom(_msgSender(), address(this), contest.priceForThree);\\r\\n        }\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});\\r\\n        contest.entryCount++;\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});\\r\\n        contest.entryCount++;\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});\\r\\n        contest.entryCount++;\\r\\n        contest.payments += contest.priceForThree;\\r\\n        contest.UserEntryCount[_msgSender()] += 3;\\r\\n        contest.isActive = contest.entryCount < contest.maxEntries;\\r\\n        emit BuyThree(_msgSender(), contestID, contest.priceForThree);\\r\\n    }\\r\\n\\r\\n    function buy(uint256 contestID, uint256 amount) external payable {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(contest.isActive && ContestWinner[contestID] == address(0), \\\"NOT_ACTIVE\\\");\\r\\n        require(contest.entryCount + amount <= contest.maxEntries, \\\"EXCEEDS_MAX_ENTRIES\\\");\\r\\n        uint256 price = contest.price * amount;\\r\\n        if (contest.paymentToken == address(0)) {\\r\\n            // native\\r\\n            require(msg.value == price, \\\"INCORRECT_PAYMENT\\\");\\r\\n        } else {\\r\\n            IERC20(contest.paymentToken).transferFrom(_msgSender(), address(this), price);\\r\\n        }\\r\\n        for(uint256 x; x < amount; x++) {\\r\\n            contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: contest.price});\\r\\n            contest.entryCount++;\\r\\n        }\\r\\n        contest.payments += price;\\r\\n        contest.UserEntryCount[_msgSender()] += amount;\\r\\n        contest.isActive = contest.entryCount < contest.maxEntries;\\r\\n        emit Buy(_msgSender(), contestID, amount, msg.value);\\r\\n    }\\r\\n\\r\\n    function getContestEntries(uint256 contestID) external view returns(Entry[] memory) {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        Entry[] memory result = new Entry[](contest.entryCount);\\r\\n        for(uint256 x; x < contest.entryCount; x++) {\\r\\n            result[x] = contest.Entries[x];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getUserEntryCount(uint256 contestID, address user) external view returns(uint256) {\\r\\n        return Contests[contestID].UserEntryCount[user];\\r\\n    }\\r\\n\\r\\n    function getUserEntries(uint256 contestID, address user) external view returns(Entry[] memory) {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        Entry[] memory result = new Entry[](Contests[contestID].UserEntryCount[user]);\\r\\n        uint256 entryCount;\\r\\n        for(uint256 x; x < contest.entryCount; x++) {\\r\\n            if (contest.Entries[x].user == user) {\\r\\n                result[entryCount] = contest.Entries[x];\\r\\n                entryCount++;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // ** - ADD/EDIT CONTEST - ** //\\r\\n\\r\\n    function addContest(uint16 maxEntries, bool isActive, address paymentToken, uint256 price) external onlyApproved \\r\\n    {\\r\\n        Contest storage contest = Contests[contestCount];\\r\\n        contest.id = contestCount;\\r\\n        contest.maxEntries = maxEntries;\\r\\n        contest.maxEntriesForThree = maxEntries - 2;\\r\\n        contest.isActive = isActive;\\r\\n        contest.paymentToken = paymentToken;\\r\\n        contest.price = price;\\r\\n        contest.priceForThree = price * 3;\\r\\n        emit AddContest(_msgSender(), contestCount);      \\r\\n        contestCount++;\\r\\n    }\\r\\n\\r\\n    function cloneContest(uint256 contestID, bool setActive) external onlyApproved \\r\\n    {\\r\\n        Contest storage oldContest = Contests[contestID];\\r\\n        Contest storage newContest = Contests[contestCount];\\r\\n        newContest.id = contestCount;\\r\\n        newContest.maxEntries = oldContest.maxEntries;\\r\\n        newContest.maxEntriesForThree = oldContest.maxEntriesForThree;\\r\\n        newContest.isActive = setActive;\\r\\n        newContest.paymentToken = oldContest.paymentToken;\\r\\n        newContest.price = oldContest.price;\\r\\n        newContest.priceForThree = oldContest.priceForThree;\\r\\n        emit CloneContest(_msgSender(), contestID, contestCount);      \\r\\n        contestCount++;\\r\\n    }    \\r\\n\\r\\n    function editContest(uint256 contestID, uint16 maxEntries, bool isActive, address paymentToken, uint256 price) external onlyApproved {\\r\\n        require(Contests[contestID].entryCount == 0, \\\"ENTRIES_EXIST\\\");\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        contest.maxEntries = maxEntries;\\r\\n        contest.isActive = isActive;\\r\\n        contest.paymentToken = paymentToken;\\r\\n        contest.price = price;\\r\\n        contest.priceForThree = price * 3;\\r\\n        emit EditContest(_msgSender(), contestCount);      \\r\\n    }\\r\\n\\r\\n    function setContestActive(uint256 contestID, bool isActive) external onlyApproved {\\r\\n        require(!isActive || !Contests[contestID].isWon, \\\"ALREADY_WON\\\");\\r\\n        Contests[contestID].isActive = isActive;\\r\\n        emit SetContestActive(_msgSender(), contestID, isActive);\\r\\n    }\\r\\n\\r\\n    function setPriceForContest(uint256 contestID, uint256 price) external onlyApproved {\\r\\n        Contests[contestID].price = price;\\r\\n        Contests[contestID].priceForThree = price * 3;\\r\\n    }\\r\\n\\r\\n     // ** - PROXY - ** //\\r\\n\\r\\n    function singleEntry(uint256 contestID, address receiver) external onlyApproved {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(contest.isActive && ContestWinner[contestID] == address(0), \\\"NOT_ACTIVE\\\");\\r\\n        require(contest.maxEntries > contest.entryCount, \\\"EXCEEDS_MAX_ENTRIES\\\");\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});\\r\\n        contest.entryCount++;\\r\\n        contest.UserEntryCount[receiver]++;\\r\\n        contest.isActive = contest.entryCount < contest.maxEntries;\\r\\n        emit SingleEntry(_msgSender(), receiver, contestID);\\r\\n    }\\r\\n\\r\\n    function tripleEntry(uint256 contestID, address receiver) external onlyApproved {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(contest.isActive && ContestWinner[contestID] == address(0), \\\"NOT_ACTIVE\\\");\\r\\n        require(contest.maxEntriesForThree > contest.entryCount, \\\"EXCEEDS_MAX_ENTRIES\\\");\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});\\r\\n        contest.entryCount++;\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});\\r\\n        contest.entryCount++;\\r\\n        contest.Entries[contest.entryCount] = Entry({user: _msgSender(), amount: 0});\\r\\n        contest.entryCount++;\\r\\n        contest.UserEntryCount[receiver] += 3;\\r\\n        contest.isActive = contest.entryCount < contest.maxEntries;\\r\\n        emit TripleEntry(_msgSender(), receiver, contestID);\\r\\n    }\\r\\n\\r\\n    // ** - ADMIN - ** //\\r\\n\\r\\n    function endContestWithWinner(uint256 contestID, uint16 entryNum) external nonReentrant onlyOwner {\\r\\n        require(ContestWinner[contestID] == address(0), \\\"WINNER_PICKED\\\");\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(entryNum < contest.entryCount, \\\"ENTRYNUM>ENTRYCOUNT\\\");\\r\\n        contest.isActive = false;\\r\\n        contest.isWon = true;\\r\\n        contest.winningEntry = entryNum;\\r\\n        ContestWinner[contestID] = contest.Entries[entryNum].user;\\r\\n        emit ManualCompleteContest(_msgSender(), contestID, ContestWinner[contestID]);\\r\\n    }\\r\\n\\r\\n    function endContestWithoutWinner(uint256 contestID) external nonReentrant onlyApproved {\\r\\n        Contest storage contest = Contests[contestID];\\r\\n        require(!contest.isWon, \\\"CONTEST_WON\\\");\\r\\n        require(!contest.refunded, \\\"ALREADY_REFUNDED\\\");\\r\\n        contest.isActive = false;\\r\\n        contest.refunded = true;\\r\\n        //refund entrants\\r\\n        for(uint256 x; x < contest.entryCount; x++) {\\r\\n            Entry storage entry = contest.Entries[x];\\r\\n            if (entry.amount == 0) continue; //don't refund free entries\\r\\n            uint256 amount = entry.amount;\\r\\n            entry.amount == 0;\\r\\n            if (contest.paymentToken == address(0)) {\\r\\n                require(amount <= address(this).balance, \\\"INSUFFICIENT_BNB\\\");\\r\\n                (bool sent, ) = entry.user.call{value: amount}(\\\"\\\");\\r\\n                require(sent, \\\"FAILED_SENDING_FUNDS\\\");\\r\\n            } else {\\r\\n                require(amount <= IERC20(contest.paymentToken).balanceOf(address(this)), \\\"INSUFFICIENT_BALANCE\\\");\\r\\n                IERC20(contest.paymentToken).transfer(entry.user, amount);\\r\\n            }\\r\\n        }\\r\\n        emit EndContestWithoutWinner(_msgSender(), contestID);\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() external nonReentrant onlyApproved {\\r\\n        require(treasuryAddress != address(0), \\\"TREASURY_NOT_SET\\\");\\r\\n        uint256 bal = address(this).balance;\\r\\n        (bool sent, ) = treasuryAddress.call{value: bal}(\\\"\\\");\\r\\n        require(sent, \\\"FAILED_SENDING_FUNDS\\\");\\r\\n        emit WithdrawBNB(_msgSender(), bal);\\r\\n    }\\r\\n\\r\\n    function withdrawTokens(address _token) external nonReentrant onlyApproved {\\r\\n        require(treasuryAddress != address(0), \\\"TREASURY_NOT_SET\\\");\\r\\n        IERC20(_token).safeTransfer(\\r\\n            treasuryAddress,\\r\\n            IERC20(_token).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function flipProxyState(address proxyAddress) public onlyOwner {\\r\\n        proxyToApproved[proxyAddress] = !proxyToApproved[proxyAddress];\\r\\n    }\\r\\n\\r\\n    function isProxyToApproved(address proxyAddress) external view onlyOwner returns(bool) {\\r\\n        return proxyToApproved[proxyAddress];\\r\\n    }\\r\\n\\r\\n    // ** - SETTERS - ** //\\r\\n\\r\\n    function setTreasuryAddress(address addr) external onlyOwner {\\r\\n        treasuryAddress = addr;\\r\\n    }\\r\\n\\r\\n    modifier onlyProxy() {\\r\\n        require(proxyToApproved[_msgSender()] == true, \\\"onlyProxy\\\");\\r\\n        _;\\r\\n    }    \\r\\n\\r\\n    modifier onlyApproved() {\\r\\n        require(proxyToApproved[_msgSender()] == true || _msgSender() == owner(), \\\"onlyProxy\\\");\\r\\n        _;\\r\\n    }  \\r\\n\\r\\n    event ManualCompleteContest(address indexed user, uint256 indexed contestID, address indexed winner);\\r\\n    event BuyOne(address indexed user, uint256 indexed contestID, uint256 indexed amount);\\r\\n    event BuyThree(address indexed user, uint256 indexed contestID, uint256 indexed amount);\\r\\n    event Buy(address indexed user, uint256 indexed contestID, uint256 indexed amount, uint256 value);\\r\\n    event AddContest(address indexed user, uint256 indexed id);\\r\\n    event EditContest(address indexed user, uint256 indexed id);\\r\\n    event SetContestActive(address indexed user, uint256 indexed id, bool indexed isActive);\\r\\n    event SetPriceForContest(address indexed user, uint256 indexed contestID, uint256 indexed price);\\r\\n    event SingleEntry(address indexed user, address indexed recipient, uint256 contestID);\\r\\n    event TripleEntry(address indexed user, address indexed recipient, uint256 contestID);\\r\\n    event DistributeFunds(address indexed sender, uint256 indexed contestID, address indexed recipient, uint256 amount);\\r\\n    event WithdrawBNB(address indexed sender, uint256 indexed balance);\\r\\n    event EndContestWithWinner(address indexed user, uint256 indexed contestID);\\r\\n    event EndContestWithoutWinner(address indexed user, uint256 indexed contestID);\\r\\n    event CloneContest(address indexed user, uint256 indexed oldContestID, uint256 indexed newContestID);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AddContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyThree\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldContestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newContestID\",\"type\":\"uint256\"}],\"name\":\"CloneContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"EditContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"EndContestWithWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"EndContestWithoutWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"ManualCompleteContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetContestActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SetPriceForContest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"SingleEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"TripleEntry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawBNB\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ContestWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Contests\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"entryCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxEntries\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxEntriesForThree\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"winningEntry\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceForThree\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWon\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"FeeRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxEntries\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"buyOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"buyThree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"setActive\",\"type\":\"bool\"}],\"name\":\"cloneContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contestCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxEntries\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"editContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"entryNum\",\"type\":\"uint16\"}],\"name\":\"endContestWithWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"endContestWithoutWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipientCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"flipProxyState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"}],\"name\":\"getContestEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OIRContestManualv2.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEntries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct OIRContestManualv2.Entry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserEntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxyAddress\",\"type\":\"address\"}],\"name\":\"isProxyToApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentsWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyToApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setContestActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPriceForContest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"singleEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"contestID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"tripleEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OIRContestManualv2", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab95359e56c8976979d867ced393d320f1534dfb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}