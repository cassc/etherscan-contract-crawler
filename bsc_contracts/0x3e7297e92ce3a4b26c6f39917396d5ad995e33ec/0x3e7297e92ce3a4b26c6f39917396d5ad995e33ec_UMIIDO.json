{"SourceCode": "// SPDX-License-Identifier: none\r\npragma solidity ^0.8.8;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint theTotalSupply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract  UMIIDO{\r\n    \r\n  struct Tariff {\r\n    uint time;\r\n    uint percent;\r\n  }\r\n  \r\n  struct Deposit {\r\n    uint tariff;\r\n    uint amount;\r\n    uint at;\r\n  }\r\n  \r\n  struct Investor {\r\n    bool registered;\r\n   Deposit[] deposits;\r\n    uint invested;\r\n    uint paidAt;\r\n    uint withdrawn;\r\n  }\r\n\r\n   struct RoundInfo {\r\n        uint tokensPurchased;\r\n        RoundStatus status;\r\n    }\r\n\r\n\r\n    enum RoundStatus { Inactive, Active, Completed }\r\n  \r\n  \r\n  uint  MIN_DEPOSIT_USDT  ;\r\n  address public buyTokenAddr = 0xC73ace061DF1160Af60ad007a2A2BAD75825433C; \r\n\r\n  uint public round1tokenPrice ;\r\n  uint public round1tokenPriceDecimal;\r\n  uint public round2tokenPrice ;\r\n  uint public round2tokenPriceDecimal;\r\n  uint public round3tokenprice;\r\n  uint public round3tokenPriceDecimal;\r\n  uint public round4tokenprice; \r\n  uint public round4tokenpriceDecimal;\r\n\r\n\r\n    RoundStatus public round1Status = RoundStatus.Inactive;\r\n    RoundStatus public round2Status = RoundStatus.Inactive;\r\n    RoundStatus public round3Status = RoundStatus.Inactive;\r\n    RoundStatus public round4Status = RoundStatus.Inactive;\r\n\r\n event OwnershipTransferred(address); \r\n  \r\n  address public owner = msg.sender;\r\n  address payable contractAddr = payable(address(this));\r\n\r\n  Tariff[] public tariffs;\r\n  uint public totalInvestors;\r\n  uint public totalInvested;\r\n  uint public totalWithdrawal;\r\n\r\n    \r\n    mapping (address => Investor) public investors;\r\n    mapping (uint => RoundInfo) public roundInfo;\r\n    event DepositAt(address user, uint tariff, uint amount);\r\n    event Reinvest(address user, uint tariff, uint amount);\r\n    event Withdraw(address user, uint amount);\r\n\r\n  \r\n  constructor() {\r\n  }\r\n\r\n\r\n function buyTokenWithUSDT(uint256 _usdtAmount, uint256 _round) external {\r\n    uint256 tokenVal  ;\r\n    \r\n    require(_round == getCurrentActiveRound(), \"Tokens can only be purchased during the active round\");\r\n    \r\n    if (_round == 1) {\r\n        require(_usdtAmount == 1250 * 10**18, \"Invalid investment amount for round 1\");\r\n        tokenVal = (_usdtAmount * 10**round1tokenPriceDecimal) / round1tokenPrice; \r\n        require((roundInfo[1].tokensPurchased + tokenVal) <= (6600000 * 10**18), \"Exceeds the maximum token limit for round 1\");        \r\n         roundInfo[1].tokensPurchased += tokenVal;\r\n    }else if (_round == 2) {\r\n        require(_usdtAmount == 1250 * 10**18, \"Invalid investment amount for round 2\");\r\n        // require(_usdtAmount >= 600 * 10**18 && _usdtAmount <= 1250 * 10**18, \"Invalid investment amount for round 3\");\r\n        tokenVal = (_usdtAmount * 10**round2tokenPriceDecimal) / round2tokenPrice;\r\n    } else if (_round == 3) {\r\n        require(_usdtAmount >= 600 * 10**18, \"Invalid investment amount for round 3\");\r\n        tokenVal = (_usdtAmount * 10**round3tokenPriceDecimal) / round3tokenprice;\r\n    } else if (_round == 4) {\r\n        require(_usdtAmount >= 105 * 10**18, \"Invalid investment amount for round 4\");\r\n        tokenVal = (_usdtAmount * 10**round4tokenpriceDecimal) / round4tokenprice;\r\n    } else {\r\n        revert(\"Invalid round\");    \r\n    }\r\n    // Check contract and user balances\r\n    BEP20 sendToken = BEP20(buyTokenAddr);\r\n    BEP20 receiveToken = BEP20(0x55d398326f99059fF775485246999027B3197955); // mainnet \r\n\r\n    require(sendToken.balanceOf(address(this)) >= tokenVal, \"Insufficient contract balance\");\r\n    require(receiveToken.balanceOf(msg.sender) >= _usdtAmount, \"Insufficient user USDT balance\");\r\n\r\n    // Transfer USDT from the user to the contract\r\n   receiveToken.transferFrom(msg.sender, address(this), _usdtAmount);\r\n\r\n    // Update investor information\r\n    investors[msg.sender].invested += tokenVal;\r\n    totalInvested += tokenVal;\r\n\r\n    // Emit a deposit event\r\n    emit DepositAt(msg.sender, _round, tokenVal);\r\n\r\n    // Transfer tokens to the contract\r\n    sendToken.transfer(msg.sender, tokenVal);\r\n}\r\n\r\n\r\n             // Set buy price  Stage1 \r\nfunction setround1BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      round1tokenPrice        = _price;\r\n      round1tokenPriceDecimal = _decimal;\r\n    }\r\n\r\n            // Set buy price  Stage2\r\n      function setround2BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      round2tokenPrice        = _price;\r\n      round2tokenPriceDecimal = _decimal;\r\n    }\r\n\r\n            // Set buy price  Stage3\r\n     function setround3BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      round3tokenprice        = _price;\r\n      round3tokenPriceDecimal = _decimal;\r\n    }\r\n\r\n            // Set buy price  Stage4\r\n     function setround4BuyPrice(uint _price, uint _decimal) public {\r\n      require(msg.sender == owner, \"Only owner\");\r\n      round4tokenprice        = _price;\r\n      round4tokenpriceDecimal = _decimal;\r\n    }\r\n\r\n    \r\n    // Owner Token Withdraw    \r\n    // Only owner can withdraw token \r\n    function withdrawToken(address tokenAddress, address to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        BEP20 _token = BEP20(tokenAddress);\r\n        _token.transfer(to, amount);\r\n        return true;\r\n    }\r\n    \r\n    // Owner BNB Withdraw\r\n    // Only owner can withdraw BNB from contract\r\n    function withdrawBNB(address payable to, uint amount) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot send to zero address\");\r\n        to.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n    // Ownership Transfer\r\n    // Only owner can call this function\r\n    function transferOwnership(address to) public returns(bool) {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        require(to != address(0), \"Cannot transfer ownership to zero address\");\r\n        owner = to;\r\n        emit OwnershipTransferred(to);\r\n        return true;\r\n    }\r\n\r\n function getTokensPurchasedInRound(uint round) public view returns (uint) {\r\n    require(round >= 1 && round <= 4, \"Invalid round number\");\r\n    return roundInfo[round].tokensPurchased;\r\n}\r\n\r\n\r\n\r\n   function getCurrentActiveRound() public view returns (uint) {\r\n        if (round1Status == RoundStatus.Active) {\r\n            return 1;\r\n        } else if (round2Status == RoundStatus.Active) {\r\n            return 2;\r\n        } else if (round3Status == RoundStatus.Active) {\r\n            return 3;\r\n        } else if (round4Status == RoundStatus.Active) {\r\n            return 4;\r\n        } else {\r\n            return 0; // No round is currently active\r\n        }\r\n    }\r\n\r\n\r\nfunction activateRound(uint round, bool active) public {\r\n        require(msg.sender == owner, \"Only owner can activate/deactivate rounds\");\r\n        require(round >= 1 && round <= 4, \"Invalid round number\");\r\n\r\n        if (active) {\r\n            round1Status = RoundStatus.Inactive;\r\n            round2Status = RoundStatus.Inactive;\r\n            round3Status = RoundStatus.Inactive;\r\n            round4Status = RoundStatus.Inactive;\r\n        }\r\n\r\n        if (round == 1) {\r\n            round1Status = active ? RoundStatus.Active : RoundStatus.Inactive;\r\n        } else if (round == 2) {\r\n            round2Status = active ? RoundStatus.Active : RoundStatus.Inactive;\r\n        } else if (round == 3) {\r\n            round3Status = active ? RoundStatus.Active : RoundStatus.Inactive;\r\n        } else if (round == 4) {\r\n            round4Status = active ? RoundStatus.Active : RoundStatus.Inactive;\r\n        }\r\n    }\r\n\r\n\r\nfunction getTokenRoundprice(uint round) public view returns (uint price, uint decimal) {\r\n    require(round >= 1 && round <= 4, \"Invalid round number\");\r\n    if (round == 1) {\r\n        price = round1tokenPrice;\r\n        decimal = round1tokenPriceDecimal;\r\n    } else if (round == 2) {\r\n        price = round2tokenPrice;\r\n        decimal = round2tokenPriceDecimal;\r\n    } else if (round == 3) {\r\n        price = round3tokenprice;\r\n        decimal = round3tokenPriceDecimal;\r\n    } else if (round == 4) {\r\n        price = round4tokenprice;\r\n        decimal = round4tokenpriceDecimal;\r\n    }\r\n}\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositAt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tariff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"activateRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"buyTokenWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentActiveRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getTokenRoundprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getTokensPurchasedInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"investors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round1Status\",\"outputs\":[{\"internalType\":\"enum UMIIDO.RoundStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round1tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round1tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round2Status\",\"outputs\":[{\"internalType\":\"enum UMIIDO.RoundStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round2tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round2tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round3Status\",\"outputs\":[{\"internalType\":\"enum UMIIDO.RoundStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round3tokenPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round3tokenprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round4Status\",\"outputs\":[{\"internalType\":\"enum UMIIDO.RoundStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round4tokenprice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round4tokenpriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensPurchased\",\"type\":\"uint256\"},{\"internalType\":\"enum UMIIDO.RoundStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setround1BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setround2BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setround3BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decimal\",\"type\":\"uint256\"}],\"name\":\"setround4BuyPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tariffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UMIIDO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4b8f10e9bf171cd199bcf416382e41cfd4b43b2e1ec7a3a7de25b5ef40682a70"}