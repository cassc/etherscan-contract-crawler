{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.14;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n     function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\n\r\n\r\ncontract MoonRabbitToken is IERC20 {\r\n   using SafeMath for uint256;\r\n   using Address for address;\r\n\r\n  mapping (address => uint256) internal _balanceof;\r\n  mapping (address => mapping(address => uint256)) internal _allowance;\r\n  mapping (address => bool) public isBlacklist;\r\n  mapping (address => bool) internal isExclude;\r\n  mapping (address => bool) internal isMarketPair;\r\n  mapping (address => uint256) shareholderIndexes;\r\n  mapping(address => bool) private _updated;\r\n  mapping (address => bool) isDividendExempt;\r\n\r\n \r\n\r\n  event SwapTokensForETH(uint256 amountIn,address[] path );\r\n\r\n    //ERC20 INF0\r\n    string  internal _name;\r\n    string  internal _symbol;\r\n    uint8   internal _decimals;\r\n    uint256 internal _totalSupply;\r\n\r\n    //fee\r\n    uint256 public burnfee = 1;\r\n    uint256 public cakeDividentsfee = 3;\r\n    uint256 public marktingfee = 3;\r\n    uint256 public teamfee = 1; \r\n    uint256 internal maxTrade;  \r\n    uint256 internal dispense;\r\n\r\n    uint256 distributorGas = 500000;\r\n    address[] shareholders;\r\n    \r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 currentIndex;  \r\n    uint256 minCAke = 1000000;\r\n    uint256 internal constant magnitude = 2**128;  \r\n  \r\n\r\n    address public teamWallet = 0x1A40ECaf8dE7292a3C88d72dd38e9f2ACDC83213;\r\n    address public marktingWallet = 0xC2133930A3F18863d5fd6F84d6E1823Bf0e33f1c;\r\n    address public cake = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);\r\n    \r\n    address internal _owner;\r\n    address internal pair;\r\n    \r\n    bool internal  _ismobility;\r\n    bool internal  _lock;\r\n\r\n    IPancakeRouter02 internal Router;\r\n    \r\n    modifier onlydev {\r\n        require (msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    modifier _lockTheSwap {\r\n        _lock = true;\r\n        _;\r\n        _lock = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor () {\r\n       _name = \"Moon Rabbit Coin\";\r\n       _symbol = \"Moon Rabbit\";\r\n       _decimals = 9;\r\n       _totalSupply = 100 * 10**15 * 10**_decimals;  \r\n       maxTrade = 25 * 10**13 * 10**_decimals;   //1%\r\n       dispense = 100 * 10**5 * 10**_decimals;    \r\n\r\n       //get pair    \r\n       Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n       //router test 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3  \r\n       //mainnet v2 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n       pair = IPancakeFactory(Router.factory()).createPair(address(this),address(Router.WETH()));\r\n\r\n       isExclude[address(this)] = true;\r\n       isExclude[teamWallet] = true;\r\n       isExclude[marktingWallet] = true;\r\n       isExclude[address(0)] = true;\r\n       isExclude[msg.sender] = true;\r\n\r\n       isMarketPair[address(pair)] = true;\r\n\r\n        isDividendExempt[address(pair)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n       \r\n       _owner = msg.sender;\r\n       _balanceof[msg.sender] = _totalSupply; //mint\r\n       emit Transfer (address(0) ,msg.sender , _totalSupply);\r\n    }\r\n    \r\n    //view\r\n    function name() external override view returns (string memory) { return _name; }\r\n    function symbol() external view override returns (string memory){ return _symbol; }\r\n    function decimals() external view override returns (uint8){ return _decimals; }\r\n    function totalSupply() public override view returns (uint256){  return _totalSupply; }\r\n    function balanceOf(address account) override public view returns (uint256) {return _balanceof[account];}\r\n    function Owner() external view returns(address) {return _owner;}\r\n    function Pair() external view returns(address) {return pair;}\r\n    function allowance(address owner, address spender) external view returns (uint256){\r\n         return _allowance[owner][spender];\r\n    }\r\n\r\n    //call\r\n    function Renounce() external onlydev {\r\n        _owner = address(0);\r\n    }\r\n\r\n    function setMaxTxAmout(uint256 val) external onlydev {\r\n        maxTrade = val * 10**_decimals;\r\n    }\r\n\r\n    function addblacklist(address wallet, bool val) external onlydev {\r\n        isBlacklist[wallet] = val;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(msg.sender,spender,amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amounts) private {\r\n         require(sender != address(0), \"ERC20: approve from the zero address\");\r\n         require(spender != address(0), \"ERC20: approve to the zero address\");\r\n         require(balanceOf(sender) >= amounts);\r\n        _allowance[sender][spender] = amounts;\r\n        emit Approval(sender, spender, amounts);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        require(msg.sender != address(0));\r\n        require(_balanceof[msg.sender] >= amount , \"is not enough\");\r\n        _transfer(msg.sender, recipient , amount);\r\n        return true;\r\n    }\r\n    \r\n     function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n        require(_balanceof[sender] >= amount , \"is not enough\");\r\n        require(sender != (address(0)), \"is not address 0\");\r\n        uint256 allowancess = _allowance[sender][msg.sender];\r\n        require(allowancess >= amount);\r\n        unchecked{_allowance[sender][msg.sender] = _allowance[sender][msg.sender].sub(amount);}\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from , address to , uint256 amount) internal returns(bool) {\r\n        require(!isBlacklist[from] && !isBlacklist[to]);\r\n        if(!_ismobility  && isMarketPair[to]){  \r\n         _ismobility = true;\r\n         }\r\n\r\n        if(!_ismobility){   \r\n          return UNcost(from , to,amount);\r\n        }\r\n        if(_ismobility) {\r\n                if(!isExclude[from] && !isExclude[to]){\r\n                    require(amount <= maxTrade);\r\n                }\r\n   \r\n           if(_lock){\r\n               return UNcost(from , to,amount);\r\n           }else{\r\n                uint256 contractBlance = balanceOf(address(this));\r\n                bool canswap = contractBlance >= dispense;\r\n\r\n                  if(canswap && !isMarketPair[from] && !_lock){\r\n                   SwapFee(contractBlance);   \r\n                }\r\n\r\n            uint256 shouldAmount = takeFee(from , to , amount);\r\n            unchecked{_balanceof[from] = _balanceof[from].sub(amount);}\r\n            unchecked{_balanceof[to] = _balanceof[to].add(shouldAmount);}\r\n            emit Transfer(from , to ,shouldAmount);\r\n\r\n            if(fromAddress == address(0) )fromAddress = from;\r\n            if(toAddress == address(0) )toAddress = to;  \r\n            if(!isDividendExempt[fromAddress]) setShare(fromAddress);\r\n            if(!isDividendExempt[toAddress]  ) setShare(toAddress);\r\n\r\n            fromAddress = from;\r\n            toAddress = to;  \r\n\r\n            if(IERC20(cake).balanceOf(address(this)) >= minCAke) {\r\n                process(distributorGas) ;\r\n            }\r\n\r\n             }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n           if(_updated[shareholder] ){      \r\n                if(balanceOf(shareholder) == 0) quitShare(shareholder);              \r\n                return;  \r\n           }\r\n           if(balanceOf(shareholder) == 0) return;  \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n    }\r\n     function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n      function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if(shareholderCount == 0)return;\r\n        uint256 nowbananceEth = IERC20(cake).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        uint256 divper = nowbananceEth.mul(magnitude).div(totalSupply());\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n        uint256 amount   = balanceOf(shareholders[currentIndex]).mul(divper).div(magnitude);\r\n  \r\n         if( amount <  10) {\r\n             currentIndex++;\r\n             iterations++;\r\n             return;\r\n         }\r\n         if(IERC20(cake).balanceOf(address(this))  < amount )return;\r\n            distributeDividend(shareholders[currentIndex],amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n     function distributeDividend(address shareholder ,uint256 amount) internal {\r\n        IERC20(cake).transfer(shareholder, amount);\r\n    }\r\n\r\n    function takeFee(address from , address to , uint256 amount) internal returns(uint256) {\r\n        uint256 burnningfee;\r\n        uint256 WBNBfee;\r\n       if(isExclude[from] || isExclude[to]) {\r\n           return amount;\r\n       }else{\r\n           //burn\r\n            burnningfee = amount.mul(burnfee).div(100);\r\n            unchecked{_balanceof[address(0)] = _balanceof[address(0)].add(burnningfee);}\r\n             emit Transfer(from,address(0),burnningfee);\r\n           //contract\r\n            WBNBfee = amount.mul(cakeDividentsfee.add(marktingfee).add(teamfee)).div(100);\r\n            unchecked{_balanceof[address(this)] = _balanceof[address(this)].add(WBNBfee);}\r\n            emit Transfer(from,address(this),WBNBfee);\r\n       }\r\n       return amount.sub(burnningfee).sub(WBNBfee);\r\n    }\r\n\r\n    function UNcost(address from , address to , uint256 amount) internal returns(bool) {\r\n        unchecked{_balanceof[from] = _balanceof[from] .sub(amount);}\r\n        unchecked{_balanceof[to] = _balanceof[to] .add(amount);}\r\n        emit Transfer(from , to , amount);\r\n        return true;\r\n    }\r\n\r\n    function SwapFee(uint256 tokenAmount) private _lockTheSwap {\r\n        SwapTokenForBNB(tokenAmount); //swap\r\n\r\n        uint256 treatyBNB = address(this).balance;\r\n        \r\n        uint256 marktingBNB = treatyBNB.mul(marktingfee).div(marktingfee.add(teamfee).add(cakeDividentsfee));\r\n        uint256 teamBNB = treatyBNB.mul(teamfee).div(marktingfee.add(teamfee).add(cakeDividentsfee));\r\n        uint256 swapCake = treatyBNB.sub(marktingBNB).sub(teamBNB);\r\n\r\n        if(marktingBNB > 0){\r\n             swapETHforWallet(marktingWallet , marktingBNB);\r\n        }\r\n        if(teamBNB > 0){\r\n             swapETHforWallet(teamWallet,teamBNB);\r\n        }\r\n        if(swapCake > 0) {\r\n            // swap bnb fro cake\r\n            SwapBnbForCake(swapCake);\r\n        }\r\n    }\r\n    \r\n    function SwapTokenForBNB(uint256 tokenAmount) private {\r\n        _approve(address(this), address(Router) , tokenAmount);\r\n\r\n       address[] memory path = new address[](2);\r\n       path[0] = address(this);\r\n       path[1] = Router.WETH();\r\n\r\n       Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n          tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n         emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function SwapBnbForCake(uint256 bnbAmount) private {\r\n        address[] memory path = new address[](2);\r\n       \r\n        path[0] = Router.WETH();\r\n        path[1] = cake;\r\n\r\n        // make the swap\r\n        Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value:bnbAmount}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHforWallet( address wallet ,uint256 tokenETH) private {\r\n        payable(wallet).transfer(tokenETH);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Renounce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"addblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakeDividentsfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marktingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marktingfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MoonRabbitToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://94ec7a0148ddb5b9a06ab402849ac40eec3c7c1e4e7e56fbfccede4399ac0705"}