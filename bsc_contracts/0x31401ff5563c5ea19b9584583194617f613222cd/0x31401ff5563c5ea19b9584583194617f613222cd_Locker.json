{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.15;\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IVoter {\r\n  function userVotingParticipation(\r\n    address _user,\r\n    uint256 _weekIndex\r\n  ) external returns (uint256);\r\n\r\n  function getTotalClaimable(uint256 _week) external view returns (uint256);\r\n\r\n  function getUserClaimable(\r\n    address _user\r\n  ) external view returns (uint256 claimableAmounts);\r\n\r\n  function resetClaimable(address _user) external;\r\n\r\n  function activeProposals() external view returns (uint256);\r\n}\r\n\r\n/**\r\n    @notice This contract is responsible for locking and unlocking users MRHB tokens to be used in staking.\r\n            Deriving vMRHB balances for each user over the period of their stake as well as the total vMRHB\r\n            balance of all users, extending the time lock on an existing stake and increasing the MRHB amount\r\n            on an existing stake. As well as producing all the necessary view/getter functions to be used within the contract, FE and BE.\r\n */\r\n\r\ncontract Locker is Ownable, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n\r\n  struct UnlockData {\r\n    uint128 unlockableAmount;\r\n    uint128 endWeek;\r\n    uint256 startWeek;\r\n  }\r\n\r\n  // `weeklyWeightData` tracks the total lock weights for each user.\r\n  // 65535 weeks 2^^16 - 1\r\n  mapping(address => uint128[65535]) public weeklyWeightData;\r\n\r\n  // \"userUnlockData\" shows the ending week of expiry and MRHB amount that can be freed\r\n  mapping(address => UnlockData) public userUnlockData;\r\n\r\n  // `weeklyTotalWeight` and `weeklyWeightOf` track the total lock weight for each week,\r\n  // The array index corresponds to the number of the epoch week.\r\n  uint128[65535] public weeklyTotalWeight;\r\n\r\n  mapping(uint256 => uint256) public weeklyCoefficients;\r\n\r\n  uint256 public immutable startTime;\r\n\r\n  // Set the true when migrating to new locker contract\r\n  // default to false, can be set by owner when migrating\r\n  bool public migration;\r\n\r\n  IERC20 public immutable MRHB_TOKEN;\r\n  uint256 public immutable MAX_LOCK_WEEKS;\r\n  uint256 constant WEEK = 86400 * 7;\r\n  uint256 constant DAY = 86400;\r\n  uint256 constant DENOMINATOR = 10_000;\r\n\r\n  // tier vars\r\n  struct TierInfo {\r\n    uint256 mrhbAmount;\r\n    uint256 weekDuration;\r\n  }\r\n\r\n  TierInfo public goldTierParams;\r\n  TierInfo public silverTierParams;\r\n\r\n  IVoter public voter;\r\n\r\n  event NewLock(address indexed user, uint256 amount, uint256 lockWeeks);\r\n  event ExtendLock(address indexed user, uint256 amount, uint256 weeksToExpiry);\r\n  event IncreaseAmount(\r\n    address indexed user,\r\n    uint256 amount,\r\n    uint256 weeksToExpiry\r\n  );\r\n  event Withdrawal(address indexed user, uint256 amount);\r\n  event Sweeped(address indexed caller, address indexed token, uint256 amount);\r\n  event MigrationActive(uint256 blockTime, bool migrationStatus);\r\n  event MigrateWithdrawal(\r\n    address indexed user,\r\n    uint256 amount,\r\n    uint256 weeksToExpiry\r\n  );\r\n  event TierUpdated(\r\n    uint256 tier,\r\n    uint256 newThresholdAmount,\r\n    uint256 newThresholdDuration\r\n  );\r\n  event VoterUpdated(address voter);\r\n\r\n  constructor(IERC20 _mrhbToken, uint256 _startTime, uint256 _maxLockWeeks) {\r\n    MAX_LOCK_WEEKS = _maxLockWeeks;\r\n\r\n    MRHB_TOKEN = _mrhbToken;\r\n    startTime = _startTime;\r\n\r\n    weeklyCoefficients[13] = 1000;\r\n    weeklyCoefficients[26] = 2100;\r\n    weeklyCoefficients[52] = 4500;\r\n    weeklyCoefficients[104] = 10_000;\r\n\r\n    // Default threshold\r\n    goldTierParams = TierInfo(100_000 * 1e18, 52);\r\n    silverTierParams = TierInfo(50_000 * 1e18, 52);\r\n  }\r\n\r\n  /**\r\n        @notice Gets the current epoch week\r\n     */\r\n  function getWeek() public view returns (uint256) {\r\n    return (block.timestamp - startTime) / WEEK;\r\n  }\r\n\r\n  /**\r\n        @notice Gets the epoch time passed from deployment of the contract\r\n        @dev This function used to determine the users lock start week.\r\n     */\r\n  function getCurrentTime() public view returns (uint256) {\r\n    return block.timestamp - startTime;\r\n  }\r\n\r\n  /**\r\n        @notice Get the current lock weight for a user\r\n     */\r\n  function userWeight(address _user) public view returns (uint256) {\r\n    return weeklyWeightOf(_user, getWeek());\r\n  }\r\n\r\n  /**\r\n        @notice Get the lock weight for a user in a given week\r\n     */\r\n  function weeklyWeightOf(\r\n    address _user,\r\n    uint256 _week\r\n  ) public view returns (uint256) {\r\n    return weeklyWeightData[_user][_week];\r\n  }\r\n\r\n  /**\r\n        @notice Get the token balance and deadline week for an user\r\n     */\r\n  function unlockingInfo(\r\n    address _user\r\n  ) public view returns (uint256 withdrawableAmount, uint256 deadlineWeek) {\r\n    return (\r\n      userUnlockData[_user].unlockableAmount,\r\n      userUnlockData[_user].endWeek\r\n    );\r\n  }\r\n\r\n  /**\r\n        @notice Get the current total lock weight\r\n     */\r\n  function totalWeight() external view returns (uint256) {\r\n    return weeklyTotalWeight[getWeek()];\r\n  }\r\n\r\n  /**\r\n        @notice Get the user lock weight and total lock weight for the given week\r\n     */\r\n  function weeklyWeight(\r\n    address _user,\r\n    uint256 _week\r\n  ) external view returns (uint256, uint256) {\r\n    return (weeklyWeightOf(_user, _week), weeklyTotalWeight[_week]);\r\n  }\r\n\r\n  /**\r\n        @notice Sets the migration status.\r\n        @dev This function is meant to be only called when MARHABA\r\n              migrates to new locker contract. Setting this true\r\n              means that users can withdraw their staked MRHB without\r\n              waiting for their lock to expire by calling 'migrateWithdraw'.\r\n        @param _migration Status of the migration to update.\r\n     */\r\n  function setMigration(bool _migration) external onlyOwner {\r\n    migration = _migration;\r\n\r\n    emit MigrationActive(block.timestamp, _migration);\r\n  }\r\n\r\n  function setVoter(address _voter) external onlyOwner {\r\n    require(_voter != address(0), \"ZERO_ADDRESS\");\r\n\r\n    voter = IVoter(_voter);\r\n\r\n    emit VoterUpdated(_voter);\r\n  }\r\n\r\n  /**\r\n        @notice Sets the tier params.\r\n        @dev Silver params has to be lower or equal to the gold params!\r\n        @param newTierInfo Tier info struct to replace the old tier params\r\n        @param goldOrSilver 1==Silver, 2==Gold else=revert\r\n     */\r\n  function setTierParams(\r\n    TierInfo calldata newTierInfo,\r\n    uint256 goldOrSilver\r\n  ) external onlyOwner {\r\n    if (goldOrSilver == 1) {\r\n      require(\r\n        goldTierParams.mrhbAmount > newTierInfo.mrhbAmount &&\r\n          goldTierParams.weekDuration >= newTierInfo.weekDuration,\r\n        \"Silver params has to be equal or lower than gold params\"\r\n      );\r\n      silverTierParams = newTierInfo;\r\n      emit TierUpdated(1, newTierInfo.mrhbAmount, newTierInfo.weekDuration);\r\n    } else if (goldOrSilver == 2) {\r\n      require(\r\n        silverTierParams.mrhbAmount < newTierInfo.mrhbAmount &&\r\n          silverTierParams.weekDuration <= newTierInfo.weekDuration,\r\n        \"Gold params has to be greater or equal to silver params\"\r\n      );\r\n      goldTierParams = newTierInfo;\r\n      emit TierUpdated(2, newTierInfo.mrhbAmount, newTierInfo.weekDuration);\r\n    } else {\r\n      revert(\"1 is for silver, 2 is for gold\");\r\n    }\r\n  }\r\n\r\n  /**\r\n        @notice Deposit tokens into the contract to create a new lock.\r\n        @param _user Address to make a lock for.\r\n        @param _amount Amount of tokens to lock. This balance transfered from the caller.\r\n        @param _weeks The number of weeks for the lock.\r\n     */\r\n  function lock(\r\n    address _user,\r\n    uint256 _amount,\r\n    uint256 _weeks\r\n  ) external nonReentrant {\r\n    require(userUnlockData[_user].unlockableAmount == 0, \"increase or extend\");\r\n    require(_amount > 0, \"Amount must be nonzero\");\r\n\r\n    uint256 coefficient = weeklyCoefficients[_weeks];\r\n    require(coefficient != 0, \"Wrong week number\");\r\n\r\n    uint256 currentWeek = getWeek();\r\n    uint256 start;\r\n    // week 0 no rewards so push user to week 1\r\n    if (currentWeek == 0) {\r\n      start = 1;\r\n      // if user joined at the 1 day threshold for a week push him to current week\r\n    } else if (getCurrentTime() - (currentWeek * WEEK) <= DAY) {\r\n      start = currentWeek;\r\n    } else start = currentWeek + 1;\r\n\r\n    uint256 end = start + _weeks;\r\n    _loop(_user, start, end, _amount, coefficient);\r\n\r\n    userUnlockData[_user] = UnlockData(uint128(_amount), uint128(end), start);\r\n\r\n    MRHB_TOKEN.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    emit NewLock(_user, _amount, _weeks);\r\n  }\r\n\r\n  /**\r\n        @notice Extend the length of an existing lock.\r\n        @param _newWeeks The number of weeks to extend the lock.\r\n     */\r\n  function extendLock(uint256 _newWeeks) external nonReentrant {\r\n    require(\r\n      voter.activeProposals() == 0,\r\n      \"Can't extend the lock when portal open\"\r\n    );\r\n    UnlockData storage unlockData = userUnlockData[msg.sender];\r\n    require(unlockData.unlockableAmount > 0, \"no lock to extend\");\r\n\r\n    uint256 start = getWeek();\r\n    require(unlockData.endWeek > start, \"lock is expired pls withdraw\");\r\n\r\n    require(userWeight(msg.sender) != 0, \"No weight\");\r\n\r\n    uint256 coefficient = weeklyCoefficients[_newWeeks];\r\n    require(coefficient != 0, \"Wrong week number\");\r\n\r\n    uint256 weeksLeftPrevious = unlockData.endWeek - start;\r\n    require(\r\n      _newWeeks + weeksLeftPrevious <= MAX_LOCK_WEEKS,\r\n      \"Exceeds MAX_LOCK_WEEKS\"\r\n    ); // 2 years max\r\n\r\n    uint256 end = userUnlockData[msg.sender].endWeek + _newWeeks;\r\n\r\n    // The formula used for 'extendLock' in the documentation has been rearranged/altered here in order to\r\n    // create some level of standardisation in the 'loop' function such that it can be used by all the\r\n    // interacting functions. The 'loop' still derives the correct vMRHB balances that are consistent with the formulas.\r\n    uint256 new_amount = (unlockData.unlockableAmount +\r\n      (userWeight(msg.sender) * DENOMINATOR) /\r\n      coefficient);\r\n    _loop(msg.sender, start, end, new_amount, coefficient);\r\n\r\n    unlockData.endWeek = uint128(end); // new endWeek\r\n\r\n    emit ExtendLock(msg.sender, unlockData.unlockableAmount, end - start);\r\n  }\r\n\r\n  /**\r\n        @dev Increase the amount within a lock weight array over an existed lock period\r\n     */\r\n  function increaseAmount(uint256 _amount) external nonReentrant {\r\n    require(\r\n      voter.activeProposals() == 0,\r\n      \"Can't increase the lock when portal open\"\r\n    );\r\n    UnlockData storage unlockData = userUnlockData[msg.sender];\r\n    require(unlockData.unlockableAmount > 0, \"no lock to increase\");\r\n\r\n    uint256 currentWeek = getWeek();\r\n    uint256 endWeek = unlockData.endWeek;\r\n    require(endWeek > currentWeek, \"lock is expired pls withdraw\");\r\n\r\n    uint256 new_coef = (userWeight(msg.sender) * DENOMINATOR) /\r\n      unlockData.unlockableAmount;\r\n\r\n    require(userWeight(msg.sender) != 0, \"No weight\");\r\n\r\n    // The formula used for 'increaseAmount' in the documentation has been rearranged/altered here in order to\r\n    // create some level of standardisation in the 'loop' function such that it can be used by all the\r\n    // interacting functions. The 'loop' still derives the correct vMRHB balances that are consistent with the formulas.\r\n    uint256 new_amount = (unlockData.unlockableAmount + _amount);\r\n    _loop(msg.sender, currentWeek, endWeek, new_amount, new_coef);\r\n\r\n    unlockData.unlockableAmount += uint128(_amount);\r\n\r\n    MRHB_TOKEN.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n    emit IncreaseAmount(\r\n      msg.sender,\r\n      unlockData.unlockableAmount,\r\n      endWeek - currentWeek\r\n    );\r\n  }\r\n\r\n  function _loop(\r\n    address user,\r\n    uint256 start,\r\n    uint256 end,\r\n    uint256 amount,\r\n    uint256 coefficient\r\n  ) internal {\r\n    uint128[65535] storage data = weeklyWeightData[user];\r\n\r\n    for (uint256 i = start; i < end; i = unsafe_inc(i)) {\r\n      uint256 ve_amount = (amount * (end - i) * coefficient) /\r\n        (DENOMINATOR * (end - start));\r\n      weeklyTotalWeight[i] += uint128(ve_amount - data[i]); // this will never underflow we can do this unchecked aswell but it's safer to keep it is.\r\n      data[i] = uint128(ve_amount);\r\n    }\r\n  }\r\n\r\n  function unsafe_inc(uint256 x) private pure returns (uint256) {\r\n    unchecked {\r\n      return x + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n        @notice Returns the tier of a given user\r\n        @param user User address to check the tier for \r\n     */\r\n  function getTier(address user) external view returns (uint256) {\r\n    UnlockData memory userData = userUnlockData[user];\r\n\r\n    if (getWeek() >= userData.endWeek) {\r\n      return 10;\r\n    }\r\n\r\n    return\r\n      _checkTierForUser(\r\n        userData.unlockableAmount,\r\n        userData.endWeek - userData.startWeek\r\n      );\r\n  }\r\n\r\n  // @note Silver tier params are always smaller or equal to gold params\r\n  // Silver duration <= Gold duration\r\n  // Silver amount < Gold amount\r\n  function _checkTierForUser(\r\n    uint256 amount,\r\n    uint256 duration\r\n  ) internal view returns (uint256) {\r\n    TierInfo memory silverTier = silverTierParams;\r\n\r\n    if (duration < silverTier.weekDuration) return 0;\r\n\r\n    if (amount < silverTier.mrhbAmount) return 0;\r\n\r\n    TierInfo memory goldTier = goldTierParams;\r\n\r\n    if (duration < goldTier.weekDuration) return 1;\r\n\r\n    if (amount < goldTier.mrhbAmount) return 1;\r\n\r\n    return 2;\r\n  }\r\n\r\n  /**\r\n        @notice Withdraws the locked MRHB from the contract\r\n        @dev This function only go through if the '_user' lock ended.\r\n        @param _user Address to withdraw MRHB amount locked\r\n        @return Returns the MRHB amount withdrawn\r\n     */\r\n  function withdraw(address _user) external returns (uint256) {\r\n    (uint256 withdrawableAmount, uint256 deadlineWeek) = unlockingInfo(_user);\r\n    require(withdrawableAmount > 0, \"no active lock existing\");\r\n    require(getWeek() >= deadlineWeek, \"lock is not expired yet\");\r\n\r\n    userUnlockData[_user] = UnlockData(0, 0, 0);\r\n\r\n    MRHB_TOKEN.safeTransfer(_user, withdrawableAmount);\r\n\r\n    emit Withdrawal(_user, withdrawableAmount);\r\n    return withdrawableAmount;\r\n  }\r\n\r\n  /**\r\n        @notice Withdraws the locked MRHB from the contract\r\n        @dev This function only go through if the 'migration' bool is true.\r\n        @param _user Address to withdraw MRHB amount locked\r\n        @return Returns the MRHB amount withdrawn\r\n     */\r\n  function migrationWithdraw(address _user) external returns (uint256) {\r\n    require(migration, \"Migration is not active\");\r\n\r\n    (uint256 withdrawableAmount, ) = unlockingInfo(_user);\r\n    // this can overflow in such cases but it is ok, if it overflows\r\n    // then it basically means that the users lock is already finished\r\n    // which user can withdraw funds by 'withdraw'.\r\n    uint256 weeksToExpiry = userUnlockData[_user].endWeek - getWeek();\r\n\r\n    userUnlockData[_user] = UnlockData(0, 0, 0);\r\n    MRHB_TOKEN.safeTransfer(_user, withdrawableAmount);\r\n\r\n    emit MigrateWithdrawal(_user, withdrawableAmount, weeksToExpiry);\r\n    return withdrawableAmount;\r\n  }\r\n\r\n  /**\r\n        @notice Sweeps any non-wanted from the contract and sends it to 'owner()'\r\n        @dev 'owner()' can sweep any token except 'MRHB_TOKEN', any token except\r\n              MRHB is not expected in this contract.\r\n        @param _token ERC20 token to sweep from the contract\r\n     */\r\n  function sweepToken(IERC20 _token) external onlyOwner {\r\n    require(_token != MRHB_TOKEN, \"Can not sweep MRHB\");\r\n    uint256 sweepable = IERC20(_token).balanceOf(address(this));\r\n    IERC20(_token).safeTransfer(msg.sender, sweepable);\r\n\r\n    emit Sweeped(msg.sender, address(_token), sweepable);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_mrhbToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockWeeks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weeksToExpiry\",\"type\":\"uint256\"}],\"name\":\"ExtendLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weeksToExpiry\",\"type\":\"uint256\"}],\"name\":\"IncreaseAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weeksToExpiry\",\"type\":\"uint256\"}],\"name\":\"MigrateWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"migrationStatus\",\"type\":\"bool\"}],\"name\":\"MigrationActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockWeeks\",\"type\":\"uint256\"}],\"name\":\"NewLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sweeped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThresholdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThresholdDuration\",\"type\":\"uint256\"}],\"name\":\"TierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"VoterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCK_WEEKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MRHB_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWeeks\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goldTierParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mrhbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeks\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"migrationWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_migration\",\"type\":\"bool\"}],\"name\":\"setMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"mrhbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Locker.TierInfo\",\"name\":\"newTierInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"goldOrSilver\",\"type\":\"uint256\"}],\"name\":\"setTierParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silverTierParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mrhbAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weekDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"unlockingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineWeek\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUnlockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"unlockableAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endWeek\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"startWeek\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyCoefficients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyTotalWeight\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"}],\"name\":\"weeklyWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weeklyWeightData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_week\",\"type\":\"uint256\"}],\"name\":\"weeklyWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Locker", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d10332818d6a9b4b84bf5d87dbf9d80012fdf91300000000000000000000000000000000000000000000000000000000646176000000000000000000000000000000000000000000000000000000000000000068", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d99f46b1e6888bf6d4ac537b0e0b85cf3a80e4578d58931c467bd9197e6f831f"}