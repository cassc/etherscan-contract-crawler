{"SourceCode": "// Sources flattened with hardhat v2.12.0 https://hardhat.org\r\n\r\n// File contracts/access/Governable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ncontract Governable {\r\n    address public gov;\r\n\r\n    constructor() public {\r\n        gov = msg.sender;\r\n    }\r\n\r\n    modifier onlyGov() {\r\n        require(msg.sender == gov, \"Governable: forbidden\");\r\n        _;\r\n    }\r\n\r\n    function setGov(address _gov) external onlyGov {\r\n        gov = _gov;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/token/IERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/token/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/tokens/interfaces/IWETH.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/utils/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IShortsTracker.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IShortsTracker {\r\n    function isGlobalShortDataReady() external view returns (bool);\r\n    function globalShortAveragePrices(address _token) external view returns (uint256);\r\n    function getNextGlobalShortData(\r\n        address _account,\r\n        address _collateralToken,\r\n        address _indexToken,\r\n        uint256 _nextPrice,\r\n        uint256 _sizeDelta,\r\n        bool _isIncrease\r\n    ) external view returns (uint256, uint256);\r\n    function updateGlobalShortData(\r\n        address _account,\r\n        address _collateralToken,\r\n        address _indexToken,\r\n        bool _isLong,\r\n        uint256 _sizeDelta,\r\n        uint256 _markPrice,\r\n        bool _isIncrease\r\n    ) external;\r\n    function setIsGlobalShortDataReady(bool value) external;\r\n    function setInitData(address[] calldata _tokens, uint256[] calldata _averagePrices) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IRouter.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IRouter {\r\n    function addPlugin(address _plugin) external;\r\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\r\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\r\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\r\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IOrderBook.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IOrderBook {\r\n\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\r\n        address path0, \r\n        address path1,\r\n        address path2,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 triggerRatio,\r\n        bool triggerAboveThreshold,\r\n        bool shouldUnwrap,\r\n        uint256 executionFee\r\n    );\r\n\r\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\r\n        address purchaseToken, \r\n        uint256 purchaseTokenAmount,\r\n        address collateralToken,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n\r\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\r\n        address collateralToken,\r\n        uint256 collateralDelta,\r\n        address indexToken,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 triggerPrice,\r\n        bool triggerAboveThreshold,\r\n        uint256 executionFee\r\n    );\r\n\r\n    function executeSwapOrder(address, uint256, address payable) external;\r\n    function executeDecreaseOrder(address, uint256, address payable) external;\r\n    function executeIncreaseOrder(address, uint256, address payable) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IBasePositionManager.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IBasePositionManager {\r\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\r\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVaultUtils.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IVaultUtils {\r\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\r\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\r\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\r\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\r\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\r\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IVault.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\ninterface IVault {\r\n    function isInitialized() external view returns (bool);\r\n    function isSwapEnabled() external view returns (bool);\r\n    function isLeverageEnabled() external view returns (bool);\r\n\r\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\r\n    function setError(uint256 _errorCode, string calldata _error) external;\r\n\r\n    function router() external view returns (address);\r\n    function usdg() external view returns (address);\r\n    function gov() external view returns (address);\r\n\r\n    function whitelistedTokenCount() external view returns (uint256);\r\n    function maxLeverage() external view returns (uint256);\r\n\r\n    function minProfitTime() external view returns (uint256);\r\n    function hasDynamicFees() external view returns (bool);\r\n    function fundingInterval() external view returns (uint256);\r\n    function totalTokenWeights() external view returns (uint256);\r\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\r\n\r\n    function inManagerMode() external view returns (bool);\r\n    function inPrivateLiquidationMode() external view returns (bool);\r\n\r\n    function maxGasPrice() external view returns (uint256);\r\n\r\n    function approvedRouters(address _account, address _router) external view returns (bool);\r\n    function isLiquidator(address _account) external view returns (bool);\r\n    function isManager(address _account) external view returns (bool);\r\n\r\n    function minProfitBasisPoints(address _token) external view returns (uint256);\r\n    function tokenBalances(address _token) external view returns (uint256);\r\n    function lastFundingTimes(address _token) external view returns (uint256);\r\n\r\n    function setMaxLeverage(uint256 _maxLeverage) external;\r\n    function setInManagerMode(bool _inManagerMode) external;\r\n    function setManager(address _manager, bool _isManager) external;\r\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\r\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\r\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\r\n    function setUsdgAmount(address _token, uint256 _amount) external;\r\n    function setBufferAmount(address _token, uint256 _amount) external;\r\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\r\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\r\n    function setLiquidator(address _liquidator, bool _isActive) external;\r\n\r\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\r\n\r\n    function setFees(\r\n        uint256 _taxBasisPoints,\r\n        uint256 _stableTaxBasisPoints,\r\n        uint256 _mintBurnFeeBasisPoints,\r\n        uint256 _swapFeeBasisPoints,\r\n        uint256 _stableSwapFeeBasisPoints,\r\n        uint256 _marginFeeBasisPoints,\r\n        uint256 _liquidationFeeUsd,\r\n        uint256 _minProfitTime,\r\n        bool _hasDynamicFees\r\n    ) external;\r\n\r\n    function setTokenConfig(\r\n        address _token,\r\n        uint256 _tokenDecimals,\r\n        uint256 _redemptionBps,\r\n        uint256 _minProfitBps,\r\n        uint256 _maxUsdgAmount,\r\n        bool _isStable,\r\n        bool _isShortable\r\n    ) external;\r\n\r\n    function setPriceFeed(address _priceFeed) external;\r\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\r\n\r\n    function directPoolDeposit(address _token) external;\r\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\r\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\r\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\r\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\r\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\r\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\r\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\r\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\r\n\r\n    function priceFeed() external view returns (address);\r\n    function fundingRateFactor() external view returns (uint256);\r\n    function stableFundingRateFactor() external view returns (uint256);\r\n    function cumulativeFundingRates(address _token) external view returns (uint256);\r\n    function getNextFundingRate(address _token) external view returns (uint256);\r\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\r\n\r\n    function liquidationFeeUsd() external view returns (uint256);\r\n    function taxBasisPoints() external view returns (uint256);\r\n    function stableTaxBasisPoints() external view returns (uint256);\r\n    function mintBurnFeeBasisPoints() external view returns (uint256);\r\n    function swapFeeBasisPoints() external view returns (uint256);\r\n    function stableSwapFeeBasisPoints() external view returns (uint256);\r\n    function marginFeeBasisPoints() external view returns (uint256);\r\n\r\n    function allWhitelistedTokensLength() external view returns (uint256);\r\n    function allWhitelistedTokens(uint256) external view returns (address);\r\n    function whitelistedTokens(address _token) external view returns (bool);\r\n    function stableTokens(address _token) external view returns (bool);\r\n    function shortableTokens(address _token) external view returns (bool);\r\n    function feeReserves(address _token) external view returns (uint256);\r\n    function globalShortSizes(address _token) external view returns (uint256);\r\n    function globalShortAveragePrices(address _token) external view returns (uint256);\r\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\r\n    function tokenDecimals(address _token) external view returns (uint256);\r\n    function tokenWeights(address _token) external view returns (uint256);\r\n    function guaranteedUsd(address _token) external view returns (uint256);\r\n    function poolAmounts(address _token) external view returns (uint256);\r\n    function bufferAmounts(address _token) external view returns (uint256);\r\n    function reservedAmounts(address _token) external view returns (uint256);\r\n    function usdgAmounts(address _token) external view returns (uint256);\r\n    function maxUsdgAmounts(address _token) external view returns (uint256);\r\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\r\n    function getMaxPrice(address _token) external view returns (uint256);\r\n    function getMinPrice(address _token) external view returns (uint256);\r\n\r\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\r\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\r\n}\r\n\r\n\r\n// File contracts/peripherals/interfaces/ITimelock.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ITimelock {\r\n    function setAdmin(address _admin) external;\r\n    function enableLeverage(address _vault) external;\r\n    function disableLeverage(address _vault) external;\r\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\r\n    function signalSetGov(address _target, address _gov) external;\r\n}\r\n\r\n\r\n// File contracts/referrals/interfaces/IReferralStorage.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IReferralStorage {\r\n    function codeOwners(bytes32 _code) external view returns (address);\r\n    function traderReferralCodes(address _account) external view returns (bytes32);\r\n    function referrerDiscountShares(address _account) external view returns (uint256);\r\n    function referrerTiers(address _account) external view returns (uint256);\r\n    function getTraderReferralInfo(address _account) external view returns (bytes32, address);\r\n    function setTraderReferralCode(address _account, bytes32 _code) external;\r\n    function setTier(uint256 _tierId, uint256 _totalRebate, uint256 _discountShare) external;\r\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\r\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\r\n}\r\n\r\n\r\n// File contracts/core/BasePositionManager.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\ncontract BasePositionManager is IBasePositionManager, ReentrancyGuard, Governable {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address payable;\r\n\r\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\r\n\r\n    address public admin;\r\n\r\n    address public vault;\r\n    address public shortsTracker;\r\n    address public router;\r\n    address public weth;\r\n\r\n    // to prevent using the deposit and withdrawal of collateral as a zero fee swap,\r\n    // there is a small depositFee charged if a collateral deposit results in the decrease\r\n    // of leverage for an existing position\r\n    // increasePositionBufferBps allows for a small amount of decrease of leverage\r\n    uint256 public depositFee;\r\n    uint256 public increasePositionBufferBps = 100;\r\n\r\n    address public referralStorage;\r\n\r\n    mapping (address => uint256) public feeReserves;\r\n\r\n    mapping (address => uint256) public override maxGlobalLongSizes;\r\n    mapping (address => uint256) public override maxGlobalShortSizes;\r\n\r\n    event SetDepositFee(uint256 depositFee);\r\n    event SetIncreasePositionBufferBps(uint256 increasePositionBufferBps);\r\n    event SetReferralStorage(address referralStorage);\r\n    event SetAdmin(address admin);\r\n    event WithdrawFees(address token, address receiver, uint256 amount);\r\n\r\n    event SetMaxGlobalSizes(\r\n        address[] tokens,\r\n        uint256[] longSizes,\r\n        uint256[] shortSizes\r\n    );\r\n\r\n    event IncreasePositionReferral(\r\n        address account,\r\n        uint256 sizeDelta,\r\n        uint256 marginFeeBasisPoints,\r\n        bytes32 referralCode,\r\n        address referrer\r\n    );\r\n\r\n    event DecreasePositionReferral(\r\n        address account,\r\n        uint256 sizeDelta,\r\n        uint256 marginFeeBasisPoints,\r\n        bytes32 referralCode,\r\n        address referrer\r\n    );\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"BasePositionManager: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _vault,\r\n        address _router,\r\n        address _shortsTracker,\r\n        address _weth,\r\n        uint256 _depositFee\r\n    ) public {\r\n        vault = _vault;\r\n        router = _router;\r\n        weth = _weth;\r\n        depositFee = _depositFee;\r\n        shortsTracker = _shortsTracker;\r\n\r\n        admin = msg.sender;\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.sender == weth, \"BasePositionManager: invalid sender\");\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyGov {\r\n        admin = _admin;\r\n        emit SetAdmin(_admin);\r\n    }\r\n\r\n    function setDepositFee(uint256 _depositFee) external onlyAdmin {\r\n        depositFee = _depositFee;\r\n        emit SetDepositFee(_depositFee);\r\n    }\r\n\r\n    function setIncreasePositionBufferBps(uint256 _increasePositionBufferBps) external onlyAdmin {\r\n        increasePositionBufferBps = _increasePositionBufferBps;\r\n        emit SetIncreasePositionBufferBps(_increasePositionBufferBps);\r\n    }\r\n\r\n    function setReferralStorage(address _referralStorage) external onlyAdmin {\r\n        referralStorage = _referralStorage;\r\n        emit SetReferralStorage(_referralStorage);\r\n    }\r\n\r\n    function setMaxGlobalSizes(\r\n        address[] memory _tokens,\r\n        uint256[] memory _longSizes,\r\n        uint256[] memory _shortSizes\r\n    ) external onlyAdmin {\r\n        for (uint256 i = 0; i < _tokens.length; i++) {\r\n            address token = _tokens[i];\r\n            maxGlobalLongSizes[token] = _longSizes[i];\r\n            maxGlobalShortSizes[token] = _shortSizes[i];\r\n        }\r\n\r\n        emit SetMaxGlobalSizes(_tokens, _longSizes, _shortSizes);\r\n    }\r\n\r\n    function withdrawFees(address _token, address _receiver) external onlyAdmin {\r\n        uint256 amount = feeReserves[_token];\r\n        if (amount == 0) { return; }\r\n\r\n        feeReserves[_token] = 0;\r\n        IERC20(_token).safeTransfer(_receiver, amount);\r\n\r\n        emit WithdrawFees(_token, _receiver, amount);\r\n    }\r\n\r\n    function approve(address _token, address _spender, uint256 _amount) external onlyGov {\r\n        IERC20(_token).approve(_spender, _amount);\r\n    }\r\n\r\n    function sendValue(address payable _receiver, uint256 _amount) external onlyGov {\r\n        _receiver.sendValue(_amount);\r\n    }\r\n\r\n    function _validateMaxGlobalSize(address _indexToken, bool _isLong, uint256 _sizeDelta) internal view {\r\n        if (_sizeDelta == 0) {\r\n            return;\r\n        }\r\n\r\n        if (_isLong) {\r\n            uint256 maxGlobalLongSize = maxGlobalLongSizes[_indexToken];\r\n            if (maxGlobalLongSize > 0 && IVault(vault).guaranteedUsd(_indexToken).add(_sizeDelta) > maxGlobalLongSize) {\r\n                revert(\"BasePositionManager: max global longs exceeded\");\r\n            }\r\n        } else {\r\n            uint256 maxGlobalShortSize = maxGlobalShortSizes[_indexToken];\r\n            if (maxGlobalShortSize > 0 && IVault(vault).globalShortSizes(_indexToken).add(_sizeDelta) > maxGlobalShortSize) {\r\n                revert(\"BasePositionManager: max global shorts exceeded\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong, uint256 _price) internal {\r\n        address _vault = vault;\r\n\r\n        uint256 markPrice = _isLong ? IVault(_vault).getMaxPrice(_indexToken) : IVault(_vault).getMinPrice(_indexToken);\r\n        if (_isLong) {\r\n            require(markPrice <= _price, \"BasePositionManager: mark price higher than limit\");\r\n        } else {\r\n            require(markPrice >= _price, \"BasePositionManager: mark price lower than limit\");\r\n        }\r\n\r\n        _validateMaxGlobalSize(_indexToken, _isLong, _sizeDelta);\r\n\r\n        address timelock = IVault(_vault).gov();\r\n\r\n        // should be called strictly before position is updated in Vault\r\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, markPrice, true);\r\n\r\n        ITimelock(timelock).enableLeverage(_vault);\r\n        IRouter(router).pluginIncreasePosition(_account, _collateralToken, _indexToken, _sizeDelta, _isLong);\r\n        ITimelock(timelock).disableLeverage(_vault);\r\n\r\n        _emitIncreasePositionReferral(_account, _sizeDelta);\r\n    }\r\n\r\n    function _decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver, uint256 _price) internal returns (uint256) {\r\n        address _vault = vault;\r\n\r\n        uint256 markPrice = _isLong ? IVault(_vault).getMinPrice(_indexToken) : IVault(_vault).getMaxPrice(_indexToken);\r\n        if (_isLong) {\r\n            require(markPrice >= _price, \"BasePositionManager: mark price lower than limit\");\r\n        } else {\r\n            require(markPrice <= _price, \"BasePositionManager: mark price higher than limit\");\r\n        }\r\n\r\n        address timelock = IVault(_vault).gov();\r\n\r\n        // should be called strictly before position is updated in Vault\r\n        IShortsTracker(shortsTracker).updateGlobalShortData(_account, _collateralToken, _indexToken, _isLong, _sizeDelta, markPrice, false);\r\n\r\n        ITimelock(timelock).enableLeverage(_vault);\r\n        uint256 amountOut = IRouter(router).pluginDecreasePosition(_account, _collateralToken, _indexToken, _collateralDelta, _sizeDelta, _isLong, _receiver);\r\n        ITimelock(timelock).disableLeverage(_vault);\r\n\r\n        _emitDecreasePositionReferral(_account, _sizeDelta);\r\n\r\n        return amountOut;\r\n    }\r\n\r\n    function _emitIncreasePositionReferral(address _account, uint256 _sizeDelta) internal {\r\n        address _referralStorage = referralStorage;\r\n        if (_referralStorage == address(0)) {\r\n            return;\r\n        }\r\n\r\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\r\n        emit IncreasePositionReferral(\r\n            _account,\r\n            _sizeDelta,\r\n            IVault(vault).marginFeeBasisPoints(),\r\n            referralCode,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function _emitDecreasePositionReferral(address _account, uint256 _sizeDelta) internal {\r\n        address _referralStorage = referralStorage;\r\n        if (_referralStorage == address(0)) {\r\n            return;\r\n        }\r\n\r\n        (bytes32 referralCode, address referrer) = IReferralStorage(_referralStorage).getTraderReferralInfo(_account);\r\n\r\n        if (referralCode == bytes32(0)) {\r\n            return;\r\n        }\r\n\r\n        emit DecreasePositionReferral(\r\n            _account,\r\n            _sizeDelta,\r\n            IVault(vault).marginFeeBasisPoints(),\r\n            referralCode,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function _swap(address[] memory _path, uint256 _minOut, address _receiver) internal returns (uint256) {\r\n        if (_path.length == 2) {\r\n            return _vaultSwap(_path[0], _path[1], _minOut, _receiver);\r\n        }\r\n        revert(\"BasePositionManager: invalid _path.length\");\r\n    }\r\n\r\n    function _vaultSwap(address _tokenIn, address _tokenOut, uint256 _minOut, address _receiver) internal returns (uint256) {\r\n        uint256 amountOut = IVault(vault).swap(_tokenIn, _tokenOut, _receiver);\r\n        require(amountOut >= _minOut, \"BasePositionManager: insufficient amountOut\");\r\n        return amountOut;\r\n    }\r\n\r\n    function _transferInETH() internal {\r\n        if (msg.value != 0) {\r\n            IWETH(weth).deposit{value: msg.value}();\r\n        }\r\n    }\r\n\r\n    function _transferOutETHWithGasLimitIgnoreFail(uint256 _amountOut, address payable _receiver) internal {\r\n        IWETH(weth).withdraw(_amountOut);\r\n\r\n        // use `send` instead of `transfer` to not revert whole transaction in case ETH transfer was failed\r\n        // it has limit of 2300 gas\r\n        // this is to avoid front-running\r\n        _receiver.send(_amountOut);\r\n    }\r\n\r\n    function _collectFees(\r\n        address _account,\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        address _indexToken,\r\n        bool _isLong,\r\n        uint256 _sizeDelta\r\n    ) internal returns (uint256) {\r\n        bool shouldDeductFee = _shouldDeductFee(\r\n            _account,\r\n            _path,\r\n            _amountIn,\r\n            _indexToken,\r\n            _isLong,\r\n            _sizeDelta\r\n        );\r\n\r\n        if (shouldDeductFee) {\r\n            uint256 afterFeeAmount = _amountIn.mul(BASIS_POINTS_DIVISOR.sub(depositFee)).div(BASIS_POINTS_DIVISOR);\r\n            uint256 feeAmount = _amountIn.sub(afterFeeAmount);\r\n            address feeToken = _path[_path.length - 1];\r\n            feeReserves[feeToken] = feeReserves[feeToken].add(feeAmount);\r\n            return afterFeeAmount;\r\n        }\r\n\r\n        return _amountIn;\r\n    }\r\n\r\n    function _shouldDeductFee(\r\n        address _account,\r\n        address[] memory _path,\r\n        uint256 _amountIn,\r\n        address _indexToken,\r\n        bool _isLong,\r\n        uint256 _sizeDelta\r\n    ) internal view returns (bool) {\r\n        // if the position is a short, do not charge a fee\r\n        if (!_isLong) { return false; }\r\n\r\n        // if the position size is not increasing, this is a collateral deposit\r\n        if (_sizeDelta == 0) { return true; }\r\n\r\n        address collateralToken = _path[_path.length - 1];\r\n\r\n        IVault _vault = IVault(vault);\r\n        (uint256 size, uint256 collateral, , , , , , ) = _vault.getPosition(_account, collateralToken, _indexToken, _isLong);\r\n\r\n        // if there is no existing position, do not charge a fee\r\n        if (size == 0) { return false; }\r\n\r\n        uint256 nextSize = size.add(_sizeDelta);\r\n        uint256 collateralDelta = _vault.tokenToUsdMin(collateralToken, _amountIn);\r\n        uint256 nextCollateral = collateral.add(collateralDelta);\r\n\r\n        uint256 prevLeverage = size.mul(BASIS_POINTS_DIVISOR).div(collateral);\r\n        // allow for a maximum of a increasePositionBufferBps decrease since there might be some swap fees taken from the collateral\r\n        uint256 nextLeverage = nextSize.mul(BASIS_POINTS_DIVISOR + increasePositionBufferBps).div(nextCollateral);\r\n\r\n        // deduct a fee if the leverage is decreased\r\n        return nextLeverage < prevLeverage;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IPositionRouter.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IPositionRouter {\r\n    function increasePositionRequestKeysStart() external returns (uint256);\r\n    function decreasePositionRequestKeysStart() external returns (uint256);\r\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\r\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\r\n}\r\n\r\n\r\n// File contracts/core/interfaces/IPositionRouterCallbackReceiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IPositionRouterCallbackReceiver {\r\n    function gmxPositionCallback(bytes32 positionKey, bool isExecuted, bool isIncrease) external;\r\n}\r\n\r\n\r\n// File contracts/core/PositionRouter.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\ncontract PositionRouter is BasePositionManager, IPositionRouter {\r\n    using Address for address;\r\n\r\n    struct IncreasePositionRequest {\r\n        address account;\r\n        address[] path;\r\n        address indexToken;\r\n        uint256 amountIn;\r\n        uint256 minOut;\r\n        uint256 sizeDelta;\r\n        bool isLong;\r\n        uint256 acceptablePrice;\r\n        uint256 executionFee;\r\n        uint256 blockNumber;\r\n        uint256 blockTime;\r\n        bool hasCollateralInETH;\r\n        address callbackTarget;\r\n    }\r\n\r\n    struct DecreasePositionRequest {\r\n        address account;\r\n        address[] path;\r\n        address indexToken;\r\n        uint256 collateralDelta;\r\n        uint256 sizeDelta;\r\n        bool isLong;\r\n        address receiver;\r\n        uint256 acceptablePrice;\r\n        uint256 minOut;\r\n        uint256 executionFee;\r\n        uint256 blockNumber;\r\n        uint256 blockTime;\r\n        bool withdrawETH;\r\n        address callbackTarget;\r\n    }\r\n\r\n    uint256 public minExecutionFee;\r\n\r\n    uint256 public minBlockDelayKeeper;\r\n    uint256 public minTimeDelayPublic;\r\n    uint256 public maxTimeDelay;\r\n\r\n    bool public isLeverageEnabled = true;\r\n\r\n    bytes32[] public increasePositionRequestKeys;\r\n    bytes32[] public decreasePositionRequestKeys;\r\n\r\n    uint256 public override increasePositionRequestKeysStart;\r\n    uint256 public override decreasePositionRequestKeysStart;\r\n\r\n    uint256 public callbackGasLimit;\r\n\r\n    mapping (address => bool) public isPositionKeeper;\r\n\r\n    mapping (address => uint256) public increasePositionsIndex;\r\n    mapping (bytes32 => IncreasePositionRequest) public increasePositionRequests;\r\n\r\n    mapping (address => uint256) public decreasePositionsIndex;\r\n    mapping (bytes32 => DecreasePositionRequest) public decreasePositionRequests;\r\n\r\n    event CreateIncreasePosition(\r\n        address indexed account,\r\n        address[] path,\r\n        address indexToken,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 acceptablePrice,\r\n        uint256 executionFee,\r\n        uint256 index,\r\n        uint256 queueIndex,\r\n        uint256 blockNumber,\r\n        uint256 blockTime,\r\n        uint256 gasPrice\r\n    );\r\n\r\n    event ExecuteIncreasePosition(\r\n        address indexed account,\r\n        address[] path,\r\n        address indexToken,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 acceptablePrice,\r\n        uint256 executionFee,\r\n        uint256 blockGap,\r\n        uint256 timeGap\r\n    );\r\n\r\n    event CancelIncreasePosition(\r\n        address indexed account,\r\n        address[] path,\r\n        address indexToken,\r\n        uint256 amountIn,\r\n        uint256 minOut,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        uint256 acceptablePrice,\r\n        uint256 executionFee,\r\n        uint256 blockGap,\r\n        uint256 timeGap\r\n    );\r\n\r\n    event CreateDecreasePosition(\r\n        address indexed account,\r\n        address[] path,\r\n        address indexToken,\r\n        uint256 collateralDelta,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        address receiver,\r\n        uint256 acceptablePrice,\r\n        uint256 minOut,\r\n        uint256 executionFee,\r\n        uint256 index,\r\n        uint256 queueIndex,\r\n        uint256 blockNumber,\r\n        uint256 blockTime\r\n    );\r\n\r\n    event ExecuteDecreasePosition(\r\n        address indexed account,\r\n        address[] path,\r\n        address indexToken,\r\n        uint256 collateralDelta,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        address receiver,\r\n        uint256 acceptablePrice,\r\n        uint256 minOut,\r\n        uint256 executionFee,\r\n        uint256 blockGap,\r\n        uint256 timeGap\r\n    );\r\n\r\n    event CancelDecreasePosition(\r\n        address indexed account,\r\n        address[] path,\r\n        address indexToken,\r\n        uint256 collateralDelta,\r\n        uint256 sizeDelta,\r\n        bool isLong,\r\n        address receiver,\r\n        uint256 acceptablePrice,\r\n        uint256 minOut,\r\n        uint256 executionFee,\r\n        uint256 blockGap,\r\n        uint256 timeGap\r\n    );\r\n\r\n    event SetPositionKeeper(address indexed account, bool isActive);\r\n    event SetMinExecutionFee(uint256 minExecutionFee);\r\n    event SetIsLeverageEnabled(bool isLeverageEnabled);\r\n    event SetDelayValues(uint256 minBlockDelayKeeper, uint256 minTimeDelayPublic, uint256 maxTimeDelay);\r\n    event SetRequestKeysStartValues(uint256 increasePositionRequestKeysStart, uint256 decreasePositionRequestKeysStart);\r\n    event SetCallbackGasLimit(uint256 callbackGasLimit);\r\n    event Callback(address callbackTarget, bool success);\r\n\r\n    modifier onlyPositionKeeper() {\r\n        require(isPositionKeeper[msg.sender], \"403\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _vault,\r\n        address _router,\r\n        address _weth,\r\n        address _shortsTracker,\r\n        uint256 _depositFee,\r\n        uint256 _minExecutionFee\r\n    ) public BasePositionManager(_vault, _router, _shortsTracker, _weth, _depositFee) {\r\n        minExecutionFee = _minExecutionFee;\r\n    }\r\n\r\n    function setPositionKeeper(address _account, bool _isActive) external onlyAdmin {\r\n        isPositionKeeper[_account] = _isActive;\r\n        emit SetPositionKeeper(_account, _isActive);\r\n    }\r\n\r\n    function setCallbackGasLimit(uint256 _callbackGasLimit) external onlyAdmin {\r\n        callbackGasLimit = _callbackGasLimit;\r\n        emit SetCallbackGasLimit(_callbackGasLimit);\r\n    }\r\n\r\n    function setMinExecutionFee(uint256 _minExecutionFee) external onlyAdmin {\r\n        minExecutionFee = _minExecutionFee;\r\n        emit SetMinExecutionFee(_minExecutionFee);\r\n    }\r\n\r\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external onlyAdmin {\r\n        isLeverageEnabled = _isLeverageEnabled;\r\n        emit SetIsLeverageEnabled(_isLeverageEnabled);\r\n    }\r\n\r\n    function setDelayValues(uint256 _minBlockDelayKeeper, uint256 _minTimeDelayPublic, uint256 _maxTimeDelay) external onlyAdmin {\r\n        minBlockDelayKeeper = _minBlockDelayKeeper;\r\n        minTimeDelayPublic = _minTimeDelayPublic;\r\n        maxTimeDelay = _maxTimeDelay;\r\n        emit SetDelayValues(_minBlockDelayKeeper, _minTimeDelayPublic, _maxTimeDelay);\r\n    }\r\n\r\n    function setRequestKeysStartValues(uint256 _increasePositionRequestKeysStart, uint256 _decreasePositionRequestKeysStart) external onlyAdmin {\r\n        increasePositionRequestKeysStart = _increasePositionRequestKeysStart;\r\n        decreasePositionRequestKeysStart = _decreasePositionRequestKeysStart;\r\n\r\n        emit SetRequestKeysStartValues(_increasePositionRequestKeysStart, _decreasePositionRequestKeysStart);\r\n    }\r\n\r\n    function executeIncreasePositions(uint256 _endIndex, address payable _executionFeeReceiver) external override onlyPositionKeeper {\r\n        uint256 index = increasePositionRequestKeysStart;\r\n        uint256 length = increasePositionRequestKeys.length;\r\n\r\n        if (index >= length) { return; }\r\n\r\n        if (_endIndex > length) {\r\n            _endIndex = length;\r\n        }\r\n\r\n        while (index < _endIndex) {\r\n            bytes32 key = increasePositionRequestKeys[index];\r\n\r\n            // if the request was executed then delete the key from the array\r\n            // if the request was not executed then break from the loop, this can happen if the\r\n            // minimum number of blocks has not yet passed\r\n            // an error could be thrown if the request is too old or if the slippage is\r\n            // higher than what the user specified, or if there is insufficient liquidity for the position\r\n            // in case an error was thrown, cancel the request\r\n            try this.executeIncreasePosition(key, _executionFeeReceiver) returns (bool _wasExecuted) {\r\n                if (!_wasExecuted) { break; }\r\n            } catch {\r\n                // wrap this call in a try catch to prevent invalid cancels from blocking the loop\r\n                try this.cancelIncreasePosition(key, _executionFeeReceiver) returns (bool _wasCancelled) {\r\n                    if (!_wasCancelled) { break; }\r\n                } catch {}\r\n            }\r\n\r\n            delete increasePositionRequestKeys[index];\r\n            index++;\r\n        }\r\n\r\n        increasePositionRequestKeysStart = index;\r\n    }\r\n\r\n    function executeDecreasePositions(uint256 _endIndex, address payable _executionFeeReceiver) external override onlyPositionKeeper {\r\n        uint256 index = decreasePositionRequestKeysStart;\r\n        uint256 length = decreasePositionRequestKeys.length;\r\n\r\n        if (index >= length) { return; }\r\n\r\n        if (_endIndex > length) {\r\n            _endIndex = length;\r\n        }\r\n\r\n        while (index < _endIndex) {\r\n            bytes32 key = decreasePositionRequestKeys[index];\r\n\r\n            // if the request was executed then delete the key from the array\r\n            // if the request was not executed then break from the loop, this can happen if the\r\n            // minimum number of blocks has not yet passed\r\n            // an error could be thrown if the request is too old\r\n            // in case an error was thrown, cancel the request\r\n            try this.executeDecreasePosition(key, _executionFeeReceiver) returns (bool _wasExecuted) {\r\n                if (!_wasExecuted) { break; }\r\n            } catch {\r\n                // wrap this call in a try catch to prevent invalid cancels from blocking the loop\r\n                try this.cancelDecreasePosition(key, _executionFeeReceiver) returns (bool _wasCancelled) {\r\n                    if (!_wasCancelled) { break; }\r\n                } catch {}\r\n            }\r\n\r\n            delete decreasePositionRequestKeys[index];\r\n            index++;\r\n        }\r\n\r\n        decreasePositionRequestKeysStart = index;\r\n    }\r\n\r\n    function createIncreasePosition(\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _amountIn,\r\n        uint256 _minOut,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        uint256 _acceptablePrice,\r\n        uint256 _executionFee,\r\n        bytes32 _referralCode,\r\n        address _callbackTarget\r\n    ) external payable nonReentrant returns (bytes32) {\r\n        require(_executionFee >= minExecutionFee, \"fee\");\r\n        require(msg.value == _executionFee, \"val\");\r\n        require(_path.length == 1 || _path.length == 2, \"len\");\r\n\r\n        _transferInETH();\r\n        _setTraderReferralCode(_referralCode);\r\n\r\n        if (_amountIn > 0) {\r\n            IRouter(router).pluginTransfer(_path[0], msg.sender, address(this), _amountIn);\r\n        }\r\n\r\n        return _createIncreasePosition(\r\n            msg.sender,\r\n            _path,\r\n            _indexToken,\r\n            _amountIn,\r\n            _minOut,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _acceptablePrice,\r\n            _executionFee,\r\n            false,\r\n            _callbackTarget\r\n        );\r\n    }\r\n\r\n    function createIncreasePositionETH(\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _minOut,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        uint256 _acceptablePrice,\r\n        uint256 _executionFee,\r\n        bytes32 _referralCode,\r\n        address _callbackTarget\r\n    ) external payable nonReentrant returns (bytes32) {\r\n        require(_executionFee >= minExecutionFee, \"fee\");\r\n        require(msg.value >= _executionFee, \"val\");\r\n        require(_path.length == 1 || _path.length == 2, \"len\");\r\n        require(_path[0] == weth, \"path\");\r\n        _transferInETH();\r\n        _setTraderReferralCode(_referralCode);\r\n\r\n        uint256 amountIn = msg.value.sub(_executionFee);\r\n\r\n        return _createIncreasePosition(\r\n            msg.sender,\r\n            _path,\r\n            _indexToken,\r\n            amountIn,\r\n            _minOut,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _acceptablePrice,\r\n            _executionFee,\r\n            true,\r\n            _callbackTarget\r\n        );\r\n    }\r\n\r\n    function createDecreasePosition(\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _collateralDelta,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        address _receiver,\r\n        uint256 _acceptablePrice,\r\n        uint256 _minOut,\r\n        uint256 _executionFee,\r\n        bool _withdrawETH,\r\n        address _callbackTarget\r\n    ) external payable nonReentrant returns (bytes32) {\r\n        require(_executionFee >= minExecutionFee, \"fee\");\r\n        require(msg.value == _executionFee, \"val\");\r\n        require(_path.length == 1 || _path.length == 2, \"len\");\r\n\r\n        if (_withdrawETH) {\r\n            require(_path[_path.length - 1] == weth, \"path\");\r\n        }\r\n\r\n        _transferInETH();\r\n\r\n        return _createDecreasePosition(\r\n            msg.sender,\r\n            _path,\r\n            _indexToken,\r\n            _collateralDelta,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _receiver,\r\n            _acceptablePrice,\r\n            _minOut,\r\n            _executionFee,\r\n            _withdrawETH,\r\n            _callbackTarget\r\n        );\r\n    }\r\n\r\n    function getRequestQueueLengths() external view returns (uint256, uint256, uint256, uint256) {\r\n        return (\r\n            increasePositionRequestKeysStart,\r\n            increasePositionRequestKeys.length,\r\n            decreasePositionRequestKeysStart,\r\n            decreasePositionRequestKeys.length\r\n        );\r\n    }\r\n\r\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\r\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\r\n        // if the request was already executed or cancelled, return true so that the executeIncreasePositions loop will continue executing the next request\r\n        if (request.account == address(0)) { return true; }\r\n\r\n        bool shouldExecute = _validateExecution(request.blockNumber, request.blockTime, request.account);\r\n        if (!shouldExecute) { return false; }\r\n\r\n        delete increasePositionRequests[_key];\r\n\r\n        if (request.amountIn > 0) {\r\n            uint256 amountIn = request.amountIn;\r\n\r\n            if (request.path.length > 1) {\r\n                IERC20(request.path[0]).safeTransfer(vault, request.amountIn);\r\n                amountIn = _swap(request.path, request.minOut, address(this));\r\n            }\r\n\r\n            uint256 afterFeeAmount = _collectFees(msg.sender, request.path, amountIn, request.indexToken, request.isLong, request.sizeDelta);\r\n            IERC20(request.path[request.path.length - 1]).safeTransfer(vault, afterFeeAmount);\r\n        }\r\n\r\n        _increasePosition(request.account, request.path[request.path.length - 1], request.indexToken, request.sizeDelta, request.isLong, request.acceptablePrice);\r\n\r\n        _transferOutETHWithGasLimitIgnoreFail(request.executionFee, _executionFeeReceiver);\r\n\r\n        emit ExecuteIncreasePosition(\r\n            request.account,\r\n            request.path,\r\n            request.indexToken,\r\n            request.amountIn,\r\n            request.minOut,\r\n            request.sizeDelta,\r\n            request.isLong,\r\n            request.acceptablePrice,\r\n            request.executionFee,\r\n            block.number.sub(request.blockNumber),\r\n            block.timestamp.sub(request.blockTime)\r\n        );\r\n\r\n        _callRequestCallback(request.callbackTarget, _key, true, true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\r\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\r\n        // if the request was already executed or cancelled, return true so that the executeIncreasePositions loop will continue executing the next request\r\n        if (request.account == address(0)) { return true; }\r\n\r\n        bool shouldCancel = _validateCancellation(request.blockNumber, request.blockTime, request.account);\r\n        if (!shouldCancel) { return false; }\r\n\r\n        delete increasePositionRequests[_key];\r\n\r\n        if (request.hasCollateralInETH) {\r\n            _transferOutETHWithGasLimitIgnoreFail(request.amountIn, payable(request.account));\r\n        } else {\r\n            IERC20(request.path[0]).safeTransfer(request.account, request.amountIn);\r\n        }\r\n\r\n       _transferOutETHWithGasLimitIgnoreFail(request.executionFee, _executionFeeReceiver);\r\n\r\n        emit CancelIncreasePosition(\r\n            request.account,\r\n            request.path,\r\n            request.indexToken,\r\n            request.amountIn,\r\n            request.minOut,\r\n            request.sizeDelta,\r\n            request.isLong,\r\n            request.acceptablePrice,\r\n            request.executionFee,\r\n            block.number.sub(request.blockNumber),\r\n            block.timestamp.sub(request.blockTime)\r\n        );\r\n\r\n        _callRequestCallback(request.callbackTarget, _key, false, true);\r\n\r\n        return true;\r\n    }\r\n\r\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\r\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\r\n        // if the request was already executed or cancelled, return true so that the executeDecreasePositions loop will continue executing the next request\r\n        if (request.account == address(0)) { return true; }\r\n\r\n        bool shouldExecute = _validateExecution(request.blockNumber, request.blockTime, request.account);\r\n        if (!shouldExecute) { return false; }\r\n\r\n        delete decreasePositionRequests[_key];\r\n\r\n        uint256 amountOut = _decreasePosition(request.account, request.path[0], request.indexToken, request.collateralDelta, request.sizeDelta, request.isLong, address(this), request.acceptablePrice);\r\n\r\n        if (amountOut > 0) {\r\n            if (request.path.length > 1) {\r\n                IERC20(request.path[0]).safeTransfer(vault, amountOut);\r\n                amountOut = _swap(request.path, request.minOut, address(this));\r\n            }\r\n\r\n            if (request.withdrawETH) {\r\n               _transferOutETHWithGasLimitIgnoreFail(amountOut, payable(request.receiver));\r\n            } else {\r\n               IERC20(request.path[request.path.length - 1]).safeTransfer(request.receiver, amountOut);\r\n            }\r\n        }\r\n\r\n       _transferOutETHWithGasLimitIgnoreFail(request.executionFee, _executionFeeReceiver);\r\n\r\n        emit ExecuteDecreasePosition(\r\n            request.account,\r\n            request.path,\r\n            request.indexToken,\r\n            request.collateralDelta,\r\n            request.sizeDelta,\r\n            request.isLong,\r\n            request.receiver,\r\n            request.acceptablePrice,\r\n            request.minOut,\r\n            request.executionFee,\r\n            block.number.sub(request.blockNumber),\r\n            block.timestamp.sub(request.blockTime)\r\n        );\r\n\r\n        _callRequestCallback(request.callbackTarget, _key, true, false);\r\n\r\n        return true;\r\n    }\r\n\r\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) public nonReentrant returns (bool) {\r\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\r\n        // if the request was already executed or cancelled, return true so that the executeDecreasePositions loop will continue executing the next request\r\n        if (request.account == address(0)) { return true; }\r\n\r\n        bool shouldCancel = _validateCancellation(request.blockNumber, request.blockTime, request.account);\r\n        if (!shouldCancel) { return false; }\r\n\r\n        delete decreasePositionRequests[_key];\r\n\r\n       _transferOutETHWithGasLimitIgnoreFail(request.executionFee, _executionFeeReceiver);\r\n\r\n        emit CancelDecreasePosition(\r\n            request.account,\r\n            request.path,\r\n            request.indexToken,\r\n            request.collateralDelta,\r\n            request.sizeDelta,\r\n            request.isLong,\r\n            request.receiver,\r\n            request.acceptablePrice,\r\n            request.minOut,\r\n            request.executionFee,\r\n            block.number.sub(request.blockNumber),\r\n            block.timestamp.sub(request.blockTime)\r\n        );\r\n\r\n        _callRequestCallback(request.callbackTarget, _key, false, false);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getRequestKey(address _account, uint256 _index) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_account, _index));\r\n    }\r\n\r\n    function getIncreasePositionRequestPath(bytes32 _key) public view returns (address[] memory) {\r\n        IncreasePositionRequest memory request = increasePositionRequests[_key];\r\n        return request.path;\r\n    }\r\n\r\n    function getDecreasePositionRequestPath(bytes32 _key) public view returns (address[] memory) {\r\n        DecreasePositionRequest memory request = decreasePositionRequests[_key];\r\n        return request.path;\r\n    }\r\n\r\n    function _setTraderReferralCode(bytes32 _referralCode) internal {\r\n        if (_referralCode != bytes32(0) && referralStorage != address(0)) {\r\n            IReferralStorage(referralStorage).setTraderReferralCode(msg.sender, _referralCode);\r\n        }\r\n    }\r\n\r\n    function _validateExecution(uint256 _positionBlockNumber, uint256 _positionBlockTime, address _account) internal view returns (bool) {\r\n        if (_positionBlockTime.add(maxTimeDelay) <= block.timestamp) {\r\n            revert(\"expired\");\r\n        }\r\n\r\n        bool isKeeperCall = msg.sender == address(this) || isPositionKeeper[msg.sender];\r\n\r\n        if (!isLeverageEnabled && !isKeeperCall) {\r\n            revert(\"403\");\r\n        }\r\n\r\n        if (isKeeperCall) {\r\n            return _positionBlockNumber.add(minBlockDelayKeeper) <= block.number;\r\n        }\r\n\r\n        require(msg.sender == _account, \"403\");\r\n\r\n        require(_positionBlockTime.add(minTimeDelayPublic) <= block.timestamp, \"delay\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function _validateCancellation(uint256 _positionBlockNumber, uint256 _positionBlockTime, address _account) internal view returns (bool) {\r\n        bool isKeeperCall = msg.sender == address(this) || isPositionKeeper[msg.sender];\r\n\r\n        if (!isLeverageEnabled && !isKeeperCall) {\r\n            revert(\"403\");\r\n        }\r\n\r\n        if (isKeeperCall) {\r\n            return _positionBlockNumber.add(minBlockDelayKeeper) <= block.number;\r\n        }\r\n\r\n        require(msg.sender == _account, \"403\");\r\n\r\n        require(_positionBlockTime.add(minTimeDelayPublic) <= block.timestamp, \"delay\");\r\n\r\n        return true;\r\n    }\r\n\r\n    function _createIncreasePosition(\r\n        address _account,\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _amountIn,\r\n        uint256 _minOut,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        uint256 _acceptablePrice,\r\n        uint256 _executionFee,\r\n        bool _hasCollateralInETH,\r\n        address _callbackTarget\r\n    ) internal returns (bytes32) {\r\n        IncreasePositionRequest memory request = IncreasePositionRequest(\r\n            _account,\r\n            _path,\r\n            _indexToken,\r\n            _amountIn,\r\n            _minOut,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _acceptablePrice,\r\n            _executionFee,\r\n            block.number,\r\n            block.timestamp,\r\n            _hasCollateralInETH,\r\n            _callbackTarget\r\n        );\r\n\r\n        (uint256 index, bytes32 requestKey) = _storeIncreasePositionRequest(request);\r\n        emit CreateIncreasePosition(\r\n            _account,\r\n            _path,\r\n            _indexToken,\r\n            _amountIn,\r\n            _minOut,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _acceptablePrice,\r\n            _executionFee,\r\n            index,\r\n            increasePositionRequestKeys.length - 1,\r\n            block.number,\r\n            block.timestamp,\r\n            tx.gasprice\r\n        );\r\n\r\n        return requestKey;\r\n    }\r\n\r\n    function _storeIncreasePositionRequest(IncreasePositionRequest memory _request) internal returns (uint256, bytes32) {\r\n        address account = _request.account;\r\n        uint256 index = increasePositionsIndex[account].add(1);\r\n        increasePositionsIndex[account] = index;\r\n        bytes32 key = getRequestKey(account, index);\r\n\r\n        increasePositionRequests[key] = _request;\r\n        increasePositionRequestKeys.push(key);\r\n\r\n        return (index, key);\r\n    }\r\n\r\n    function _storeDecreasePositionRequest(DecreasePositionRequest memory _request) internal returns (uint256, bytes32) {\r\n        address account = _request.account;\r\n        uint256 index = decreasePositionsIndex[account].add(1);\r\n        decreasePositionsIndex[account] = index;\r\n        bytes32 key = getRequestKey(account, index);\r\n\r\n        decreasePositionRequests[key] = _request;\r\n        decreasePositionRequestKeys.push(key);\r\n\r\n        return (index, key);\r\n    }\r\n\r\n    function _createDecreasePosition(\r\n        address _account,\r\n        address[] memory _path,\r\n        address _indexToken,\r\n        uint256 _collateralDelta,\r\n        uint256 _sizeDelta,\r\n        bool _isLong,\r\n        address _receiver,\r\n        uint256 _acceptablePrice,\r\n        uint256 _minOut,\r\n        uint256 _executionFee,\r\n        bool _withdrawETH,\r\n        address _callbackTarget\r\n    ) internal returns (bytes32) {\r\n        DecreasePositionRequest memory request = DecreasePositionRequest(\r\n            _account,\r\n            _path,\r\n            _indexToken,\r\n            _collateralDelta,\r\n            _sizeDelta,\r\n            _isLong,\r\n            _receiver,\r\n            _acceptablePrice,\r\n            _minOut,\r\n            _executionFee,\r\n            block.number,\r\n            block.timestamp,\r\n            _withdrawETH,\r\n            _callbackTarget\r\n        );\r\n\r\n        (uint256 index, bytes32 requestKey) = _storeDecreasePositionRequest(request);\r\n        emit CreateDecreasePosition(\r\n            request.account,\r\n            request.path,\r\n            request.indexToken,\r\n            request.collateralDelta,\r\n            request.sizeDelta,\r\n            request.isLong,\r\n            request.receiver,\r\n            request.acceptablePrice,\r\n            request.minOut,\r\n            request.executionFee,\r\n            index,\r\n            decreasePositionRequestKeys.length - 1,\r\n            block.number,\r\n            block.timestamp\r\n        );\r\n        return requestKey;\r\n    }\r\n\r\n    function _callRequestCallback(\r\n        address _callbackTarget,\r\n        bytes32 _key,\r\n        bool _wasExecuted,\r\n        bool _isIncrease\r\n    ) internal {\r\n        if (_callbackTarget == address(0)) {\r\n            return;\r\n        }\r\n\r\n        if (!_callbackTarget.isContract()) {\r\n            return;\r\n        }\r\n\r\n        uint256 _gasLimit = callbackGasLimit;\r\n        if (_gasLimit == 0) {\r\n            return;\r\n        }\r\n\r\n        bool success;\r\n        try IPositionRouterCallbackReceiver(_callbackTarget).gmxPositionCallback{ gas: _gasLimit }(_key, _wasExecuted, _isIncrease) {\r\n            success = true;\r\n        } catch {}\r\n\r\n        emit Callback(_callbackTarget, success);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shortsTracker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"Callback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"CancelDecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"CancelIncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"CreateDecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"CreateIncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"DecreasePositionReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"ExecuteDecreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockGap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeGap\",\"type\":\"uint256\"}],\"name\":\"ExecuteIncreasePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"IncreasePositionReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"SetCallbackGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBlockDelayKeeper\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTimeDelayPublic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"SetDelayValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositFee\",\"type\":\"uint256\"}],\"name\":\"SetDepositFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"SetIncreasePositionBufferBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"SetIsLeverageEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"longSizes\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"SetMaxGlobalSizes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"SetMinExecutionFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetPositionKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referralStorage\",\"type\":\"address\"}],\"name\":\"SetReferralStorage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increasePositionRequestKeysStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasePositionRequestKeysStart\",\"type\":\"uint256\"}],\"name\":\"SetRequestKeysStartValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFees\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"cancelDecreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"cancelIncreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"createDecreasePosition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"createIncreasePosition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackTarget\",\"type\":\"address\"}],\"name\":\"createIncreasePositionETH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreasePositionRequestKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decreasePositionRequestKeysStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"decreasePositionRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"callbackTarget\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decreasePositionsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeDecreasePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreasePosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_executionFeeReceiver\",\"type\":\"address\"}],\"name\":\"executeIncreasePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getDecreasePositionRequestPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getIncreasePositionRequestPath\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestQueueLengths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionBufferBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increasePositionRequestKeys\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increasePositionRequestKeysStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"increasePositionRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCollateralInETH\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"callbackTarget\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"increasePositionsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPositionKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalLongSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxGlobalShortSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBlockDelayKeeper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minExecutionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeDelayPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_callbackGasLimit\",\"type\":\"uint256\"}],\"name\":\"setCallbackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockDelayKeeper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeDelayPublic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeDelay\",\"type\":\"uint256\"}],\"name\":\"setDelayValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionBufferBps\",\"type\":\"uint256\"}],\"name\":\"setIncreasePositionBufferBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_longSizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shortSizes\",\"type\":\"uint256[]\"}],\"name\":\"setMaxGlobalSizes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minExecutionFee\",\"type\":\"uint256\"}],\"name\":\"setMinExecutionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setPositionKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"}],\"name\":\"setReferralStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_increasePositionRequestKeysStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_decreasePositionRequestKeysStart\",\"type\":\"uint256\"}],\"name\":\"setRequestKeysStartValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shortsTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PositionRouter", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000046940dc651bfe3f2cc3e04cf9dc5579b50cf076500000000000000000000000026e6c47682ffc1824d7ac5512752fc671da5e607000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000006c72adbdc1029ee901dc97c5604487285d972a4f000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000011c37937e08000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://29b55e9b5cbc63763169a9cdb9f34985b31d30185ef298559d0eff88fccef80b"}