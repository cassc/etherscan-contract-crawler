{"SourceCode": "pragma solidity >=0.4.23 <0.6.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Profiter {\r\n    struct User {\r\n        uint256 id;\r\n        address user;\r\n        uint256 referrer;\r\n        address referreraddress;\r\n        uint256 partnersCount;\r\n        uint256 O3MaxLevel;\r\n        uint256 O3Income;\r\n        mapping(uint8 => bool) activeO3Levels;\r\n        mapping(uint8 => O3) O3Matrix;\r\n        bool royaltyEligible;\r\n        uint40 joindate;\r\n        uint256 affiliate;\r\n        mapping(uint8 => Holdings[]) HoldLevel;\r\n        uint256 O3Payouts;\r\n        uint256 levelPayouts;\r\n    }\r\n    struct O3 {\r\n        uint256 currentReferrer;\r\n        uint256[] referrals;\r\n    }\r\n    struct Holdings {\r\n        uint256 from;\r\n        bool released;\r\n    }\r\n    uint8 public constant LAST_LEVEL = 18;\r\n    mapping(uint256 => User) public users;\r\n    mapping(address => uint256[]) public addresstoIds;\r\n    mapping(uint256 => address) public idToAddress;\r\n    mapping(address => uint256) public balances;\r\n    IERC20 pusdContract = IERC20(0xeaC726373EFF7a1c2072c60838E4734D9e375EE7);\r\n    IERC20 pepContract = IERC20(0x4F27Da3C0B36cCbF247712BcFdd3983A91Cc96b7);\r\n    uint256 public lastUserId = 2;\r\n    uint256 public totalearnedusdt = 0;\r\n    address payable public owner;\r\n    address payable public admin;\r\n    bool public IsManualEnabled = false;\r\n\r\n    mapping(uint8 => uint256) public levelPrice;\r\n    mapping(uint8 => uint256) public nextlevelDeduction;\r\n\r\n    mapping(uint256 => uint256) public idByAffiliate;\r\n\r\n    event Registration(\r\n        uint256 indexed user,\r\n        uint256 indexed referrer,\r\n        uint256 time,\r\n        uint256 referredby,\r\n        uint8 teamlevel\r\n    );\r\n    event Upgrade(\r\n        uint256 indexed user,\r\n        uint256 indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint256 time\r\n    );\r\n    event NewUserPlace(\r\n        uint256 indexed user,\r\n        uint256 indexed userId,\r\n        uint256 indexed referrer,\r\n        uint256 referrerId,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint8 place,\r\n        uint256 time,\r\n        uint8 partnerType\r\n    );\r\n    event SentDividends(\r\n        uint256 indexed from,\r\n        uint256 indexed fromId,\r\n        uint256 indexed receiver,\r\n        uint256 receiverId,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint256 time\r\n    );\r\n    event LevelPayout(\r\n        uint256 indexed from,\r\n        uint256 indexed fromId,\r\n        uint256 indexed receiver,\r\n        uint256 receiverId,\r\n        uint8 platform,\r\n        uint8 level,\r\n        uint256 time,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(address payable ownerAddress, address payable _admin) public {\r\n        levelPrice[1] = 3.72 ether;\r\n        levelPrice[2] = 5 ether;\r\n        levelPrice[3] = 8 ether;\r\n        levelPrice[4] = 12 ether;\r\n        levelPrice[5] = 20 ether;\r\n        levelPrice[6] = 35 ether;\r\n        levelPrice[7] = 65 ether;\r\n        levelPrice[8] = 120 ether;\r\n        levelPrice[9] = 210 ether;\r\n        levelPrice[10] = 380 ether;\r\n        levelPrice[11] = 700 ether;\r\n        levelPrice[12] = 1300 ether;\r\n        levelPrice[13] = 2400 ether;\r\n        levelPrice[14] = 4500 ether;\r\n        levelPrice[15] = 8500 ether;\r\n        levelPrice[16] = 16000 ether;\r\n        levelPrice[17] = 30000 ether;\r\n        levelPrice[18] = 55000 ether;\r\n\r\n        nextlevelDeduction[1] = 0.5 ether;\r\n        nextlevelDeduction[2] = 1 ether;\r\n        nextlevelDeduction[3] = 2 ether;\r\n        nextlevelDeduction[4] = 2 ether;\r\n        nextlevelDeduction[5] = 2.5 ether;\r\n        nextlevelDeduction[6] = 2.5 ether;\r\n        nextlevelDeduction[7] = 5 ether;\r\n        nextlevelDeduction[8] = 15 ether;\r\n        nextlevelDeduction[9] = 20 ether;\r\n        nextlevelDeduction[10] = 30 ether;\r\n        nextlevelDeduction[11] = 50 ether;\r\n        nextlevelDeduction[12] = 100 ether;\r\n        nextlevelDeduction[13] = 150 ether;\r\n        nextlevelDeduction[14] = 250 ether;\r\n        nextlevelDeduction[15] = 500 ether;\r\n        nextlevelDeduction[16] = 1000 ether;\r\n        nextlevelDeduction[17] = 2500 ether;\r\n        nextlevelDeduction[18] = 55000 ether;\r\n        owner = ownerAddress;\r\n        admin = _admin;\r\n        uint256 affiliate = generateUniqueIdentifier(ownerAddress);\r\n        idByAffiliate[affiliate] = 1;\r\n        User memory user = User({\r\n            id: 1,\r\n            user: ownerAddress,\r\n            referrer: 0,\r\n            referreraddress: address(0),\r\n            partnersCount: uint256(0),\r\n            O3MaxLevel: uint256(0),\r\n            O3Income: uint8(0),\r\n            royaltyEligible: false,\r\n            joindate: uint40(block.timestamp),\r\n            affiliate: affiliate,\r\n            O3Payouts: uint8(0),\r\n            levelPayouts: uint8(0)\r\n        });\r\n        users[1] = user;\r\n        addresstoIds[ownerAddress].push(1);\r\n        idToAddress[1] = ownerAddress;\r\n        users[1].activeO3Levels[1] = true;\r\n        users[1].O3MaxLevel = 1;\r\n    }\r\n\r\n    function() external payable {\r\n        if (msg.data.length == 0) {\r\n            return registration(msg.sender, owner, false);\r\n        }\r\n        registration(msg.sender, bytesToAddress(msg.data), false);\r\n    }\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        registration(msg.sender, referrerAddress, false);\r\n    }\r\n\r\n    function _buyNewLevel(\r\n        uint256 _user,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) internal {\r\n        require(matrix == 1, \"invalid matrix\");\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n        if (matrix == 1) {\r\n            require(\r\n                !users[_user].activeO3Levels[level],\r\n                \"level already activated\"\r\n            );\r\n            require(\r\n                users[_user].activeO3Levels[level - 1],\r\n                \"previous level should be activated\"\r\n            );\r\n            users[_user].O3MaxLevel = level;\r\n            users[_user].O3Matrix[level].currentReferrer = users[_user]\r\n                .O3Matrix[1]\r\n                .currentReferrer;\r\n            users[_user].activeO3Levels[level] = true;\r\n            updateO3Referrer(\r\n                _user,\r\n                users[_user].O3Matrix[1].currentReferrer,\r\n                level,\r\n                false\r\n            );\r\n            totalearnedusdt = totalearnedusdt + levelPrice[level];\r\n            if (users[_user].HoldLevel[level].length > 0) {\r\n                for (\r\n                    uint256 i = 0;\r\n                    i < users[_user].HoldLevel[level].length;\r\n                    i++\r\n                ) {\r\n                    Holdings memory _hold = users[_user].HoldLevel[level][i];\r\n                    if (!_hold.released) {\r\n                        sendusdtDividends(_user, _hold.from, 1, level, false);\r\n                        users[_user].HoldLevel[level][i].released = true;\r\n                    }\r\n                }\r\n            }\r\n            emit Upgrade(\r\n                _user,\r\n                users[_user].O3Matrix[1].currentReferrer,\r\n                1,\r\n                level,\r\n                block.timestamp\r\n            );\r\n            if (level == 6) {\r\n                if (_user == 1) registration(users[_user].user, owner, true);\r\n                else if (_user > 1) {\r\n                    registration(\r\n                        users[_user].user,\r\n                        users[_user].referreraddress,\r\n                        true\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function generateUniqueIdentifier(address _user)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uniqueId = uint256(\r\n            keccak256(abi.encodePacked(block.timestamp, _user, lastUserId))\r\n        );\r\n        return uniqueId % 10**15;\r\n    }\r\n\r\n    function registration(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        bool isReinvest\r\n    ) private {\r\n        if (!isReinvest) {\r\n            require(\r\n                pusdContract.balanceOf(msg.sender) >= levelPrice[1],\r\n                \"registration cost 3.72 pusd\"\r\n            );\r\n            require(!isUserExists(userAddress), \"user exists\");\r\n            require(isUserExists(referrerAddress), \"referrer not exists\");\r\n            uint256 registerprice = levelPrice[1];\r\n            require(\r\n                pusdContract.transferFrom(\r\n                    msg.sender,\r\n                    address(this),\r\n                    registerprice\r\n                ),\r\n                \"Payment failed\"\r\n            );\r\n        }\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n        require(size == 0, \"cannot be a contract\");\r\n        uint256[] memory ids = addresstoIds[referrerAddress];\r\n        uint256 affiliate = generateUniqueIdentifier(msg.sender);\r\n        idByAffiliate[affiliate] = lastUserId;\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            user: userAddress,\r\n            referrer: ids[ids.length - 1],\r\n            referreraddress: referrerAddress,\r\n            partnersCount: 0,\r\n            O3MaxLevel: 1,\r\n            O3Income: 0,\r\n            royaltyEligible: false,\r\n            joindate: uint40(block.timestamp),\r\n            affiliate: affiliate,\r\n            O3Payouts: uint8(0),\r\n            levelPayouts: uint8(0)\r\n        });\r\n        users[lastUserId] = user;\r\n        addresstoIds[userAddress].push(lastUserId);\r\n        idToAddress[lastUserId] = userAddress;\r\n        users[lastUserId].referreraddress = referrerAddress;\r\n        users[lastUserId].referrer = ids[0];\r\n        users[lastUserId].activeO3Levels[1] = true;\r\n        totalearnedusdt = totalearnedusdt + levelPrice[1];\r\n        users[ids[0]].partnersCount++;\r\n        if (uint40(block.timestamp) <= users[ids[0]].joindate + 30 days) {\r\n            if (users[ids[0]].partnersCount >= 2) {\r\n                users[ids[0]].royaltyEligible = true;\r\n            }\r\n        }\r\n        uint256 freeTwoReferrer = findO3Referrer(ids[ids.length - 1], 1);\r\n        users[lastUserId].O3Matrix[1].currentReferrer = freeTwoReferrer;\r\n        lastUserId++;\r\n        require(\r\n            users[freeTwoReferrer].O3Matrix[1].referrals.length < 2,\r\n            \"Referrer invalid\"\r\n        );\r\n        updateO3Referrer(lastUserId - 1, freeTwoReferrer, 1, true);\r\n        uint256 _ref = ids[0];\r\n        uint8 count = 1;\r\n        while (count <= 9) {\r\n            if (_ref == 0) {\r\n                break;\r\n            }\r\n            emit Registration(\r\n                lastUserId - 1,\r\n                _ref,\r\n                block.timestamp,\r\n                ids[0],\r\n                count\r\n            );\r\n            _ref = users[_ref].referrer;\r\n            count++;\r\n        }\r\n        if (\r\n            lastUserId - 1 <= 100000 &&\r\n            pepContract.balanceOf(address(this)) >= 100 ether\r\n        ) {\r\n            pepContract.transfer(userAddress, 100 ether);\r\n        }\r\n        pusdContract.transfer(admin, 0.42 ether);\r\n    }\r\n\r\n    function updateO3Referrer(\r\n        uint256 userAddress,\r\n        uint256 referrerAddress,\r\n        uint8 level,\r\n        bool isRegistration\r\n    ) private {\r\n        uint8 partnerType;\r\n        User memory _userdetail = users[userAddress];\r\n        User memory _referrerdetail = users[referrerAddress];\r\n        if (_userdetail.referrer != referrerAddress) {\r\n            if (!users[_userdetail.referrer].activeO3Levels[level]) {\r\n                partnerType = 4;\r\n            } else if (_referrerdetail.id < users[_userdetail.referrer].id) {\r\n                partnerType = 2;\r\n            } else if (_referrerdetail.id > users[_userdetail.referrer].id) {\r\n                partnerType = 3;\r\n            }\r\n        } else {\r\n            partnerType = 1;\r\n        }\r\n\r\n        users[referrerAddress].O3Matrix[level].referrals.push(userAddress);\r\n        emit NewUserPlace(\r\n            userAddress,\r\n            users[userAddress].id,\r\n            referrerAddress,\r\n            users[referrerAddress].id,\r\n            1,\r\n            level,\r\n            uint8(users[referrerAddress].O3Matrix[level].referrals.length),\r\n            block.timestamp,\r\n            partnerType\r\n        );\r\n        if (users[referrerAddress].activeO3Levels[level] || referrerAddress == 0)\r\n            sendusdtDividends(\r\n                referrerAddress,\r\n                userAddress,\r\n                1,\r\n                level,\r\n                isRegistration && level == 1\r\n            );\r\n        else {\r\n            Holdings memory _hold = Holdings({\r\n                from: userAddress,\r\n                released: false\r\n            });\r\n            users[referrerAddress].HoldLevel[level].push(_hold);\r\n        }\r\n    }\r\n\r\n    function findO3Referrer(uint256 _user, uint8 level)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (users[_user].O3Matrix[level].referrals.length < 2) return _user;\r\n        uint256[] memory referrals = new uint256[](30);\r\n        referrals[0] = users[_user].O3Matrix[level].referrals[0];\r\n        referrals[1] = users[_user].O3Matrix[level].referrals[1];\r\n        uint256 freeReferrer = _user;\r\n        for (uint256 i = 0; i < 30; i++) {\r\n            if (users[referrals[i]].O3Matrix[level].referrals.length == 2) {\r\n                if (i < 14) {\r\n                    referrals[(i + 1) * 2] = users[referrals[i]]\r\n                        .O3Matrix[level]\r\n                        .referrals[0];\r\n                    referrals[((i + 1) * 2) + 1] = users[referrals[i]]\r\n                        .O3Matrix[level]\r\n                        .referrals[1];\r\n                }\r\n            } else {\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        return freeReferrer;\r\n    }\r\n\r\n    function usersActiveO3Levels(uint256 userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeO3Levels[level];\r\n    }\r\n\r\n    function get3XMatrix(uint256 userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (uint256, uint256[] memory)\r\n    {\r\n        return (\r\n            users[userAddress].O3Matrix[level].currentReferrer,\r\n            users[userAddress].O3Matrix[level].referrals\r\n        );\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        uint256[] memory ids = addresstoIds[user];\r\n        return ids.length > 0;\r\n    }\r\n\r\n    function affiliateByAddress(address _user) public view returns (uint256) {\r\n        uint256[] memory ids = addresstoIds[_user];\r\n        return users[ids[0]].affiliate;\r\n    }\r\n\r\n    function addressByAffiliate(uint256 _affiliate)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return idToAddress[idByAffiliate[_affiliate]];\r\n    }\r\n\r\n    function affiliateById(uint8 _id) public view returns (uint256) {\r\n        return users[_id].affiliate;\r\n    }\r\n\r\n    function sendusdtDividends(\r\n        uint256 userAddress,\r\n        uint256 _from,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        bool isRegistration\r\n    ) private {\r\n        uint256 payout = isRegistration\r\n            ? levelPrice[level] - 0.72 ether\r\n            : levelPrice[level];\r\n        if (matrix == 1 && userAddress>0) {\r\n            users[userAddress].O3Income += payout;\r\n        }\r\n        if(userAddress > 0){\r\n            if (users[userAddress].O3MaxLevel <= level && level < LAST_LEVEL) {\r\n                payout = nextlevelDeduction[level];\r\n                if (users[userAddress].O3Matrix[level].referrals.length > 1) {\r\n                    _buyNewLevel(userAddress, 1, level + 1);\r\n                }\r\n            }\r\n        }\r\n        if (payout > 0) {\r\n            uint256 levelpayout = payout / 10;\r\n            uint256 userpayout = payout - levelpayout;\r\n            uint256 levelPerUser = levelpayout / 10;\r\n            uint8 levels = 1;\r\n            uint256 _user = userAddress;\r\n            while (levels <= 9) {\r\n                uint256 ref = users[_user].referrer;\r\n                if (ref != 0 && users[ref].royaltyEligible) {\r\n                    users[ref].O3Income += levelPerUser;\r\n                    users[ref].levelPayouts += levelPerUser;\r\n                    if (!pusdContract.transfer(users[ref].user, levelPerUser)) {\r\n                        pusdContract.transfer(\r\n                            users[ref].user,\r\n                            pusdContract.balanceOf(address(this))\r\n                        );\r\n                    }\r\n                    emit LevelPayout(\r\n                        userAddress,\r\n                        users[userAddress].id,\r\n                        ref,\r\n                        users[ref].id,\r\n                        level,\r\n                        levels,\r\n                        uint40(block.timestamp),\r\n                        levelPerUser\r\n                    );\r\n                } else if (ref == 0) {\r\n                    if (!pusdContract.transfer(owner, levelPerUser)) {\r\n                        pusdContract.transfer(\r\n                            owner,\r\n                            pusdContract.balanceOf(address(this))\r\n                        );\r\n                    }\r\n                    emit LevelPayout(\r\n                        userAddress,\r\n                        users[userAddress].id,\r\n                        1,\r\n                        1,\r\n                        level,\r\n                        levels,\r\n                        uint40(block.timestamp),\r\n                        levelPerUser\r\n                    );\r\n                }\r\n                _user = ref;\r\n                levels++;\r\n            }\r\n            if (!pusdContract.transfer(admin, levelPerUser)) {\r\n                pusdContract.transfer(\r\n                    admin,\r\n                    pusdContract.balanceOf(address(this))\r\n                );\r\n            }\r\n            if(userAddress > 0){\r\n                users[userAddress].O3Payouts += userpayout;\r\n            }\r\n            if (!pusdContract.transfer(users[userAddress == 0 ? 1 : userAddress].user, userpayout)) {\r\n                pusdContract.transfer(\r\n                    users[userAddress == 0 ? 1 : userAddress].user,\r\n                    pusdContract.balanceOf(address(this))\r\n                );\r\n            }\r\n        }\r\n        emit SentDividends(\r\n            _from,\r\n            users[_from].id,\r\n            userAddress == 0 ? 1 : userAddress,\r\n            users[userAddress == 0 ? 1 : userAddress].id,\r\n            matrix,\r\n            level,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys)\r\n        private\r\n        pure\r\n        returns (address addr)\r\n    {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function GetIdsByAddress(address _user)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return addresstoIds[_user];\r\n    }\r\n\r\n    function GetHoldings(uint8 _user, uint8 level)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        Holdings[] memory _hold = users[_user].HoldLevel[level];\r\n        uint256[] memory _holdings = new uint256[](_hold.length * 2);\r\n        uint8 count = 0;\r\n        for (uint8 i = 0; i < _hold.length; i++) {\r\n            _holdings[count] = (_hold[i].from);\r\n            _holdings[count + 1] = (_hold[i].released ? 1 : 0);\r\n            count += 2;\r\n        }\r\n        return _holdings;\r\n    }\r\n\r\n    function safeWithdraw(uint256 amount) external {\r\n        require(msg.sender == owner, \"Permission Denied\");\r\n        owner.transfer(amount > address(this).balance ? address(this).balance : amount);\r\n    }\r\n\r\n    function safeWithdrawTokens(address contractAddress,uint256 amount) external {\r\n        require(msg.sender == owner, \"Permission Denied\");\r\n        IERC20 tokencontract = IERC20(contractAddress);\r\n        tokencontract.transfer(owner, amount > tokencontract.balanceOf(address(this)) ? tokencontract.balanceOf(address(this)) : amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiverId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"platform\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LevelPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"partnerType\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referredby\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"teamlevel\",\"type\":\"uint8\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"receiver\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiverId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SentDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"user\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_user\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"GetHoldings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"GetIdsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"IsManualEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_affiliate\",\"type\":\"uint256\"}],\"name\":\"addressByAffiliate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresstoIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"affiliateByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_id\",\"type\":\"uint8\"}],\"name\":\"affiliateById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findO3Referrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"get3XMatrix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idByAffiliate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"nextlevelDeduction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalearnedusdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referreraddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"O3MaxLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"O3Income\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"royaltyEligible\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"joindate\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"affiliate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"O3Payouts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"levelPayouts\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveO3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Profiter", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d24b805cc2fd5a13a575db527b36cab4743a9290000000000000000000000000743b1e6bcdc696aa1de3b561f95f37c8dd4a9e3", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d9310f73b5746f4790924f1700e61d78560c1980bded81d1ac143810228d205c"}