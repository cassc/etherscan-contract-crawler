{"SourceCode": "/**\r\n ________  ________  ________   ________  ________     \r\n|\\   __  \\|\\   __  \\|\\   ___  \\|\\   ___ \\|\\   __  \\    \r\n\\ \\  \\|\\  \\ \\  \\|\\  \\ \\  \\\\ \\  \\ \\  \\_|\\ \\ \\  \\|\\  \\   \r\n \\ \\   ____\\ \\   __  \\ \\  \\\\ \\  \\ \\  \\ \\\\ \\ \\   __  \\  \r\n  \\ \\  \\___|\\ \\  \\ \\  \\ \\  \\\\ \\  \\ \\  \\_\\\\ \\ \\  \\ \\  \\ \r\n   \\ \\__\\    \\ \\__\\ \\__\\ \\__\\\\ \\__\\ \\_______\\ \\__\\ \\__\\\r\n    \\|__|     \\|__|\\|__|\\|__| \\|__|\\|_______|\\|__|\\|__|\r\n                                                                                                                                                                                                                                                        \r\n\ud83d\udcccTelegram : https://t.me/biaoqingpandabsc\r\n\ud83d\udc26Twitter : http://twitter.com/biaoqingbsc\r\n\r\n*/\r\n//SPDX-License-Identifier: Unlicensed                                                                                                                                                                                \r\n\r\n\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakePair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BiaoqingPandaBSC is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string _name = \"Biaoqing Panda\";\r\n    string _symbol = \"$PANDA\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 100 * 10**9 * 10**_decimals;\r\n    uint256 public _maxTxAmount = (_totalSupply * 3) / 100;\r\n    uint256 public _maxWalletSize = (_totalSupply * 3) / 100; // 1%\r\n\r\n    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating <= total) */\r\n    mapping(address => uint256) public _rOwned;\r\n    uint256 public _totalProportion = _totalSupply;\r\n\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    mapping(address => bool) isFeeExempt;\r\n    mapping(address => bool) isReflectionExempt;\r\n    mapping(address => bool) isTxLimitExempt;\r\n\r\n    uint256 liquidityFeeBuy = 15;\r\n    uint256 liquidityFeeSell = 15;\r\n\r\n    uint256 buybackFeeBuy = 1;\r\n    uint256 buybackFeeSell = 1;\r\n\r\n    uint256 marketingFeeBuy = 3;\r\n    uint256 marketingFeeSell = 3;\r\n\r\n    uint256 reflectionFeeBuy = 1;\r\n    uint256 reflectionFeeSell = 1;\r\n\r\n    uint256 totalFeeBuy =\r\n        marketingFeeBuy + liquidityFeeBuy + buybackFeeBuy + reflectionFeeBuy;\r\n    uint256 totalFeeSell =\r\n        marketingFeeSell +\r\n            liquidityFeeSell +\r\n            buybackFeeSell +\r\n            reflectionFeeSell;\r\n\r\n    uint256 feeDenominator = 100;\r\n\r\n    address autoLiquidityReceiver;\r\n    address marketingFeeReceiver;\r\n    address buybackFeeReceiver;\r\n\r\n    uint256 targetLiquidity = 100;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    bool public claimingFees = true;\r\n    bool alternateSwaps = true;\r\n    uint256 smallSwapThreshold = (_totalSupply * 25) / 10000; //.25%\r\n    uint256 largeSwapThreshold = (_totalSupply * 25) / 10000; \r\n\r\n    uint256 public swapThreshold = smallSwapThreshold;\r\n    bool inSwap;\r\n\r\n    //Whitelist\r\n    bool public whitelistEnabled = false;\r\n    bool public whitelistRenounced = false;\r\n    mapping(address => bool) isWhitelisted;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        router = IDEXRouter(ROUTER);\r\n        pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[address(this)][msg.sender] = type(uint256).max;\r\n\r\n        isTxLimitExempt[address(this)] = true;\r\n        isTxLimitExempt[address(router)] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n        isFeeExempt[msg.sender] = true;\r\n\r\n        autoLiquidityReceiver = msg.sender;\r\n        buybackFeeReceiver = msg.sender;\r\n        marketingFeeReceiver = msg.sender;\r\n\r\n        _rOwned[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function changeName(string memory newName) external onlyOwner {\r\n        _name = newName;\r\n    }\r\n\r\n    function changeSymbol(string memory newSymbol) external onlyOwner {\r\n        _symbol = newSymbol;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function viewFeesBuy()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            liquidityFeeBuy,\r\n            marketingFeeBuy,\r\n            buybackFeeSell,\r\n            reflectionFeeBuy,\r\n            totalFeeBuy,\r\n            feeDenominator\r\n        );\r\n    }\r\n\r\n    function viewFeesSell()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            liquidityFeeSell,\r\n            marketingFeeSell,\r\n            buybackFeeSell,\r\n            reflectionFeeSell,\r\n            totalFeeSell,\r\n            feeDenominator\r\n        );\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n                .sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        require(\r\n            !whitelistEnabled || isWhitelisted[sender],\r\n            \"Whitelist enabled and sender not whitelisted\"\r\n        );\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (\r\n            recipient != pair &&\r\n            recipient != DEAD &&\r\n            recipient != marketingFeeReceiver &&\r\n            !isTxLimitExempt[recipient]\r\n        ) {\r\n            require(\r\n                balanceOf(recipient) + amount <= _maxWalletSize,\r\n                \"Max Wallet Exceeded\"\r\n            );\r\n        }\r\n\r\n        if (!isTxLimitExempt[sender]) {\r\n            require(amount <= _maxTxAmount, \"Transaction Exceeded\");\r\n        }\r\n\r\n        if (shouldSwapBack()) {\r\n            swapBack();\r\n        }\r\n\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(\r\n            proportionAmount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        uint256 proportionReceived = shouldTakeFee(sender) &&\r\n            shouldTakeFee(recipient)\r\n            ? takeFeeInProportions(\r\n                sender == pair ? true : false,\r\n                sender,\r\n                proportionAmount\r\n            )\r\n            : proportionAmount;\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionReceived);\r\n\r\n        emit Transfer(\r\n            sender,\r\n            recipient,\r\n            tokenFromReflection(proportionReceived)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\r\n        return tokens.mul(_totalProportion).div(_totalSupply);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 proportion)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return proportion.mul(_totalSupply).div(_totalProportion);\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        uint256 proportionAmount = tokensToProportion(amount);\r\n        _rOwned[sender] = _rOwned[sender].sub(\r\n            proportionAmount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(\r\n            amount <= _maxTxAmount || isTxLimitExempt[sender],\r\n            \"TX Limit Exceeded\"\r\n        );\r\n    }\r\n\r\n    function getTotalFeeBuy() public view returns (uint256) {\r\n        return totalFeeBuy;\r\n    }\r\n\r\n    function getTotalFeeSell() public view returns (uint256) {\r\n        return totalFeeSell;\r\n    }\r\n\r\n    function takeFeeInProportions(\r\n        bool buying,\r\n        address sender,\r\n        uint256 proportionAmount\r\n    ) internal returns (uint256) {\r\n        uint256 proportionFeeAmount = buying == true\r\n            ? proportionAmount.mul(getTotalFeeBuy()).div(feeDenominator)\r\n            : proportionAmount.mul(getTotalFeeSell()).div(feeDenominator);\r\n\r\n        // reflect\r\n        uint256 proportionReflected = buying == true\r\n            ? proportionFeeAmount.mul(reflectionFeeBuy).div(totalFeeBuy)\r\n            : proportionFeeAmount.mul(reflectionFeeSell).div(totalFeeSell);\r\n\r\n        _totalProportion = _totalProportion.sub(proportionReflected);\r\n\r\n        // take fees\r\n        uint256 _proportionToContract = proportionFeeAmount.sub(\r\n            proportionReflected\r\n        );\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(\r\n            _proportionToContract\r\n        );\r\n\r\n        emit Transfer(\r\n            sender,\r\n            address(this),\r\n            tokenFromReflection(_proportionToContract)\r\n        );\r\n        emit Reflect(proportionReflected, _totalProportion);\r\n        return proportionAmount.sub(proportionFeeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return\r\n            msg.sender != pair &&\r\n            !inSwap &&\r\n            claimingFees &&\r\n            balanceOf(address(this)) >= swapThreshold;\r\n    }\r\n\r\n    function swapBack() internal swapping {\r\n        uint256 dynamicLiquidityFee = isOverLiquified(\r\n            targetLiquidity,\r\n            targetLiquidityDenominator\r\n        )\r\n            ? 0\r\n            : liquidityFeeSell;\r\n        uint256 _totalFee = totalFeeSell.sub(reflectionFeeSell);\r\n        uint256 amountToLiquify = swapThreshold\r\n            .mul(dynamicLiquidityFee)\r\n            .div(_totalFee)\r\n            .div(2);\r\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        uint256 totalBNBFee = _totalFee.sub(dynamicLiquidityFee.div(2));\r\n        uint256 amountBNBLiquidity = amountBNB\r\n            .mul(liquidityFeeSell)\r\n            .div(totalBNBFee)\r\n            .div(2);\r\n        uint256 amountBNBMarketing = amountBNB.mul(marketingFeeSell).div(\r\n            totalBNBFee\r\n        );\r\n        uint256 amountBNBdev = amountBNB.mul(buybackFeeSell).div(totalBNBFee);\r\n\r\n        (bool tmpSuccess, ) = payable(marketingFeeReceiver).call{\r\n            value: amountBNBMarketing,\r\n            gas: 30000\r\n        }(\"\");\r\n        (tmpSuccess, ) = payable(buybackFeeReceiver).call{\r\n            value: amountBNBdev,\r\n            gas: 30000\r\n        }(\"\");\r\n\r\n        if (amountToLiquify > 0) {\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n\r\n        swapThreshold = !alternateSwaps\r\n            ? swapThreshold\r\n            : swapThreshold == smallSwapThreshold\r\n            ? largeSwapThreshold\r\n            : smallSwapThreshold;\r\n    }\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _amountS,\r\n        uint256 _amountL,\r\n        bool _alternate\r\n    ) external onlyOwner {\r\n        alternateSwaps = _alternate;\r\n        claimingFees = _enabled;\r\n        smallSwapThreshold = _amountS;\r\n        largeSwapThreshold = _amountL;\r\n        swapThreshold = smallSwapThreshold;\r\n    }\r\n\r\n    function changeFees(\r\n        uint256 _liquidityFeeBuy,\r\n        uint256 _reflectionFeeBuy,\r\n        uint256 _marketingFeeBuy,\r\n        uint256 _buybackFeeBuy,\r\n        uint256 _liquidityFeeSell,\r\n        uint256 _reflectionFeeSell,\r\n        uint256 _marketingFeeSell,\r\n        uint256 _buybackFeeSell\r\n    ) external onlyOwner {\r\n        liquidityFeeBuy = _liquidityFeeBuy;\r\n        reflectionFeeBuy = _reflectionFeeBuy;\r\n        marketingFeeBuy = _marketingFeeBuy;\r\n        buybackFeeBuy = _buybackFeeBuy;\r\n        totalFeeBuy = liquidityFeeBuy\r\n            .add(reflectionFeeBuy)\r\n            .add(marketingFeeBuy)\r\n            .add(buybackFeeBuy);\r\n\r\n        liquidityFeeSell = _liquidityFeeSell;\r\n        reflectionFeeSell = _reflectionFeeSell;\r\n        marketingFeeSell = _marketingFeeSell;\r\n        buybackFeeSell = _buybackFeeSell;\r\n        totalFeeSell = liquidityFeeSell\r\n            .add(reflectionFeeSell)\r\n            .add(marketingFeeSell)\r\n            .add(buybackFeeSell);\r\n\r\n        require(totalFeeBuy <= 25, \"Cannot set buy fees above 25%\"); \r\n        require(totalFeeSell <= 25, \"Cannot set sell fees above 25%\"); \r\n    }\r\n\r\n    function SetMaxWalletPercent_base1000(uint256 maxWallPercent_base1000)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            maxWallPercent_base1000 >= 1,\r\n            \"Cannot set max Wallet below .1%\"\r\n        );\r\n        _maxWalletSize = (_totalSupply * maxWallPercent_base1000) / 1000;\r\n    }\r\n\r\n    function SetMaxTxPercent_base1000(uint256 maxTXPercentage_base1000)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(maxTXPercentage_base1000 >= 1, \"Cannot set max TX below .1%\");\r\n        _maxTxAmount = (_totalSupply * maxTXPercentage_base1000) / 1000;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFeeReceivers(\r\n        address _marketingFeeReceiver,\r\n        address _buybackFeeReceiver,\r\n        address _liquidityReceiver\r\n    ) external onlyOwner {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n        autoLiquidityReceiver = _liquidityReceiver;\r\n        buybackFeeReceiver = _buybackFeeReceiver;\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function multiAirdrop(\r\n        address[] calldata addresses,\r\n        uint256[] calldata tokens\r\n    ) external onlyOwner {\r\n        require(\r\n            addresses.length < 501,\r\n            \"GAS Error: max airdrop limit is 500 addresses\"\r\n        );\r\n        require(\r\n            addresses.length == tokens.length,\r\n            \"Mismatch between Address and token count\"\r\n        );\r\n\r\n        uint256 antibot = 0;\r\n\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            antibot = antibot + tokens[i];\r\n        }\r\n\r\n        require(\r\n            balanceOf(msg.sender) >= antibot,\r\n            \"Not enough tokens in wallet\"\r\n        );\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            _basicTransfer(msg.sender, addresses[i], tokens[i]);\r\n        }\r\n    }\r\n\r\n    function manageWhitelist(address[] memory addresses, bool whitelisted)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            addresses.length < 501,\r\n            \"GAS Error: max limit is 500 addresses\"\r\n        );\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isWhitelisted[addresses[i]] = whitelisted;\r\n        }\r\n    }\r\n\r\n    function enableWhitelistMode(bool enableWhitelist) external onlyOwner {\r\n        require(!whitelistRenounced || !enableWhitelist);\r\n        whitelistEnabled = enableWhitelist;\r\n    }\r\n\r\n    function renounceWhitelist() external onlyOwner {\r\n        whitelistRenounced = true;\r\n    }\r\n\r\n    function clearStuckBalance() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountToken);\r\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage_base1000\",\"type\":\"uint256\"}],\"name\":\"SetMaxTxPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_base1000\",\"type\":\"uint256\"}],\"name\":\"SetMaxWalletPercent_base1000\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFeeSell\",\"type\":\"uint256\"}],\"name\":\"changeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"changeName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"changeSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableWhitelist\",\"type\":\"bool\"}],\"name\":\"enableWhitelistMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"manageWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"multiAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buybackFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountL\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_alternate\",\"type\":\"bool\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeesBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFeesSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistRenounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BiaoqingPandaBSC", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://116c10154047f47eb7d61a949be70b7229dd574daa6f2fd8ee13e002c884c472"}