{"SourceCode": "{\"address.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash =\\r\\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            codehash := extcodehash(account)\\r\\n        }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) =\\r\\n            target.call{value: weiValue}(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"context.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n \\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"FiPi.sol\":{\"content\":\"import \\u0027./safeMath.sol\\u0027;\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\nimport \\u0027./address.sol\\u0027;\\r\\nimport \\u0027./pancake.sol\\u0027;\\r\\nimport \\u0027./context.sol\\u0027;\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ncontract Fipi is Context, IERC20, Ownable {\\r\\n    using SafeMath\\r\\n    for uint256;\\r\\n    using Address\\r\\n    for address;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _rOwned;\\r\\n    mapping(address =\\u003e uint256) private _tOwned;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFee;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isExcluded;\\r\\n    mapping (address =\\u003e uint256) private _amountSold;\\r\\n    mapping (address =\\u003e uint) private _timeSinceFirstSell;\\r\\n\\r\\n    address[] private _excluded;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n\\r\\n    uint256 private constant _tTotal = 60 * 10 ** 6 * 10 ** 9;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    uint256 private _tFeeTotal;\\r\\n\\r\\n    string private constant _name = \\\"$FiPi\\\";\\r\\n    string private constant _symbol = \\\"FiPi\\\";\\r\\n    uint8 private constant _decimals = 9;\\r\\n\\r\\n    uint256 private _tBurnTotal;\\r\\n    address payable public _LiquidityReciever;\\r\\n    address payable public _BurnWallet = payable(0x000000000000000000000000000000000000dEaD);\\r\\n    address payable public _marketingAddress = payable(0x4B01143107498CBa025Dc13C4283D5f4034016DC);\\r\\n\\r\\n\\r\\n    //FEES 1% REFLECTION, 1% LP, 1% BURN\\r\\n    uint256 public _taxFee = 1;\\r\\n    //2% Marketing\\r\\n    uint256 public _marketing = 2;\\r\\n\\r\\n\\r\\n    function setTax(uint256 newTax) external onlyOwner() {\\r\\n        //tax no bigger than 2%\\r\\n        require(newTax \\u003c= 2);\\r\\n        _taxFee = newTax;\\r\\n    }\\r\\n\\r\\n    function setMarketingTax(uint256 newTax) external onlyOwner() {\\r\\n        //marketing tax no bigger than 2%\\r\\n        require(newTax \\u003c= 2);\\r\\n        _marketing = newTax;\\r\\n    }\\r\\n\\r\\n    uint256 private _feeMultiplier = 1;\\r\\n    uint256 private _marketingFeeMultiplier = 1;\\r\\n    //LP\\r\\n    IPancakeRouter02 public immutable pancakeRouter;\\r\\n    address public immutable pancakePair;\\r\\n    uint256 public minTokensBeforeSwap = 5 * 10 ** 4 * 10 ** 9;\\r\\n    bool inSwapAndLiquify;\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    uint256 private startTimeForSwap;\\r\\n    uint256 private minTimeBetweenSwaps;\\r\\n\\r\\n    \\r\\n    function setSwapAndLiquify(bool _state, uint _minTimeBetweenSwaps, uint _minimumTokensBeforeSwap) external onlyOwner {\\r\\n        swapAndLiquifyEnabled = _state;\\r\\n        minTimeBetweenSwaps = _minTimeBetweenSwaps;\\r\\n        minTokensBeforeSwap = _minimumTokensBeforeSwap;\\r\\n    }\\r\\n\\r\\n    //ANTI_SNIPER FOR LAUNCH\\r\\n    bool public _hasLiqBeenAdded = false;\\r\\n\\r\\n    uint256 private _liqAddBlock = 0;\\r\\n    uint256 private _liqAddStamp = 0;\\r\\n    bool public antisniperEnabled = true;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private lastTrade;\\r\\n    \\r\\n    function setAntisniperEnabled(bool _antisniperEnabled) external onlyOwner() {\\r\\n        antisniperEnabled = _antisniperEnabled;\\r\\n    }\\r\\n\\r\\n    //WHALE-RESTICTION\\r\\n    uint256 private _maxWalletSizePromile = 20;\\r\\n    uint256 private _sellMaxTxAmountPromile = 5;\\r\\n    uint256 public _whaleSellThreshold = 1 * 10 ** 5 * 10**9;\\r\\n\\r\\n    function setMaxWalletSize(uint256 promile) external onlyOwner() {\\r\\n        require(promile \\u003e= 20); // Cannot set lower than 2%\\r\\n        _maxWalletSizePromile = promile;\\r\\n    }\\r\\n\\r\\n    function setSellMaxTxAmountPromile(uint256 promile) external onlyOwner() {\\r\\n        require(promile \\u003e= 1); // Cannot set lower than 0.1%\\r\\n        _sellMaxTxAmountPromile = promile;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function setWhaleSellThreshold(uint256 amount) external onlyOwner() {\\r\\n        require(amount \\u003e= 100000);// Whale threshold can only be higher than 10000 (initial value is 100000), we dont want to have a possibility to set tax 16% to everyone\\r\\n        _whaleSellThreshold = amount;\\r\\n    }\\r\\n\\r\\n    function setMarketingAddress(address marketingAddress) external onlyOwner() {\\r\\n        _marketingAddress = payable(marketingAddress);\\r\\n    }\\r\\n\\r\\n    function setLiquidityAdress(address liqAddress) external onlyOwner() {\\r\\n        _LiquidityReciever = payable(liqAddress);\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    event Burn(address BurnWallet, uint256 tokensBurned);\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _rOwned[_msgSender()] = _rTotal;\\r\\n        _LiquidityReciever = payable(_msgSender());\\r\\n        // mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        // testnet: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\\r\\n        // pancaketestnet: 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\r\\n        IPancakeRouter02 _pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        pancakePair = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\\r\\n        pancakeRouter = _pancakeRouter;\\r\\n\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        _isExcluded[_BurnWallet] = true;\\r\\n        _excluded.push(_BurnWallet);\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n    function name() public pure returns(string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() public pure returns(string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() public pure returns(uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n    function totalSupply() public pure override returns(uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n    function balanceOf(address account) public view override returns(uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns(bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns(uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    returns(bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns(bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns(bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n    public\\r\\n    virtual\\r\\n    returns(bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"ERC20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account)\\r\\n    external\\r\\n    view\\r\\n    returns(bool) {\\r\\n        return _isExcluded[account];\\r\\n    }\\r\\n\\r\\n    function totalFees() external view returns(uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function totalBurnFee() external view returns(uint256) {\\r\\n        return _tBurnTotal;\\r\\n    }\\r\\n\\r\\n    function getBurnWallet() external view returns(address) {\\r\\n        return _BurnWallet;\\r\\n    }\\r\\n    \\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n    external\\r\\n    view\\r\\n    returns(uint256) {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        uint256 currentRate = _getRate();\\r\\n        if (!deductTransferFee) {\\r\\n            uint256 rAmount = tAmount.mul(currentRate);\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (uint256 tTransferAmount, ,) = _getTValues(tAmount);\\r\\n            uint256 rTransferAmount = tTransferAmount.mul(currentRate);\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n    public\\r\\n    view\\r\\n    returns(uint256) {\\r\\n        require(\\r\\n            rAmount \\u003c= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) external onlyOwner() {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        //max number of excluded accounts is 1000, there is a loop over _excluded, and we dont want to push gas prize to high. it doesnt metter, couse we dont want to exclude any one anyway.\\r\\n        if(_excluded.length \\u003c 1000){\\r\\n            if (_rOwned[account] \\u003e 0) {\\r\\n                _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n            }\\r\\n            _isExcluded[account] = true;\\r\\n            _excluded.push(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner() {\\r\\n        require(_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        //excluded length is max 1000\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n \\r\\n    function excludeFromFee(address account) external onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) external onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    \\r\\n    //to recieve ETH from uniswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\r\\n        _rTotal = _rTotal.sub(rFee);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    //Added tBurn to function \\r\\n    function _getTValues(uint256 tAmount)\\r\\n    private\\r\\n    view\\r\\n    returns(\\r\\n        uint256,\\r\\n        uint256,\\r\\n        uint256\\r\\n    ) {\\r\\n        uint256 tFee = tAmount.mul(_taxFee * _feeMultiplier).div(100);\\r\\n        uint256 tMarketing = tAmount.mul(_marketing * _marketingFeeMultiplier).div(100);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tFee).sub(tFee).sub(tMarketing);\\r\\n        return (tTransferAmount, tFee, tMarketing);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _getRate() private view returns(uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        //excluded length is max 1000\\r\\n        for (uint256 i = 0; i \\u003c _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] \\u003e rSupply ||\\r\\n                _tOwned[_excluded[i]] \\u003e tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\r\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\r\\n        }\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _takeLiquidity(uint256 tLiquidity) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        _rOwned[_LiquidityReciever] = _rOwned[_LiquidityReciever].add(rLiquidity);\\r\\n        if (_isExcluded[_LiquidityReciever])\\r\\n            _tOwned[_LiquidityReciever] = _tOwned[_LiquidityReciever].add(tLiquidity);\\r\\n    }\\r\\n\\r\\n    function _takeMarketing(uint256 tMarketing) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rMarketing = tMarketing.mul(currentRate);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rMarketing);\\r\\n        if (_isExcluded[address(this)])\\r\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tMarketing);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _takeBurn(uint256 tBurn) private {\\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rBurn = tBurn.mul(currentRate);\\r\\n        _rOwned[_BurnWallet] = _rOwned[_BurnWallet].add(rBurn);\\r\\n        if (_isExcluded[_BurnWallet])\\r\\n            _tOwned[_BurnWallet] = _tOwned[_BurnWallet].add(tBurn);\\r\\n        _tBurnTotal = _tBurnTotal.add(tBurn);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isNormalTransfer(address from, address to) private view returns (bool) {\\r\\n        return \\r\\n            to != _BurnWallet\\r\\n            \\u0026\\u0026 to != address(0)\\r\\n            \\u0026\\u0026 from != address(this)\\r\\n            \\u0026\\u0026 _isExcludedFromFee[to] == false\\r\\n            \\u0026\\u0026 _isExcludedFromFee[from] == false;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        //IF THERE IS NOW LIQUIDITY YET AND ITS OWNER TRANSFER (OR LAUNCH PAD EXCLUDED FROM FEE) TO PANCAKE ITS LISING INIT TRANSACTION AND WE MARK IT \\r\\n        if(!_hasLiqBeenAdded \\u0026\\u0026 _isExcludedFromFee[from] \\u0026\\u0026 to == pancakePair){\\r\\n            _hasLiqBeenAdded = true;\\r\\n            _liqAddBlock = block.number;\\r\\n            _liqAddStamp = block.timestamp;\\r\\n            swapAndLiquifyEnabled = true;\\r\\n        }\\r\\n\\r\\n        if(antisniperEnabled)\\r\\n        {\\r\\n            if (!_hasLiqBeenAdded \\u0026\\u0026 isNormalTransfer(from, to)){\\r\\n                revert(\\\"Only wallets marked by owner as excluded can transfer at this time.\\\"); //launchpads etc\\r\\n            }\\r\\n            else if(isNormalTransfer(from, to)){\\r\\n\\r\\n                if (from == pancakePair){\\r\\n                    //CHECK IS NEXT TRANSACTION IS ON THE SAME BLOCK AS LAST TRANSACTION, AND IF SO BLOCK\\r\\n                    require(lastTrade[to] != block.number);\\r\\n                    lastTrade[to] = block.number;\\r\\n                }\\r\\n                else {\\r\\n                    require(lastTrade[from] != block.number);\\r\\n                    lastTrade[from] = block.number;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n        bool overMinTokenBalance = contractTokenBalance \\u003e= minTokensBeforeSwap;\\r\\n        if (overMinTokenBalance \\u0026\\u0026 !inSwapAndLiquify \\u0026\\u0026 from != pancakePair \\u0026\\u0026 swapAndLiquifyEnabled \\u0026\\u0026 startTimeForSwap + minTimeBetweenSwaps \\u003c= block.timestamp) \\r\\n        {\\r\\n            startTimeForSwap = block.timestamp;\\r\\n            swapForMarketing(minTokensBeforeSwap);\\r\\n            \\r\\n        }\\r\\n        \\r\\n        //lets reset fees\\r\\n\\r\\n//fees can be adjustable but multipliers are constant so its easier to navigate\\r\\n        _feeMultiplier = 1;\\r\\n        _marketingFeeMultiplier =1;\\r\\n\\r\\n        //IF PRIVILIDGED WALLET, NO FEES\\r\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n            _feeMultiplier = 0;\\r\\n            _marketingFeeMultiplier=0;\\r\\n        }\\r\\n        //FIRST THREE BLOCKS AFTER LISTING WE WILL ADD EXTRA MARKETING FEE FOR SNIPERS\\r\\n        \\r\\n        else if((block.number \\u003c= _liqAddBlock + 3) \\u0026\\u0026 antisniperEnabled){\\r\\n            _marketingFeeMultiplier = 45;\\r\\n        }\\r\\n        //IF SELL ON PANCAKE \\r\\n        else if (to == pancakePair) {\\r\\n            //MAX SELL IS SET INITIALLY TO 0,5% OF TOTAL SUPPLY\\r\\n            require(amount \\u003c= _tTotal.mul(_sellMaxTxAmountPromile).div(1000), \\\"Transfer amount exceeds the sellMaxTxAmount.\\\");\\r\\n\\r\\n            //ANTI-WHALE TAX IF YOU SELL TOO MUCH IN A DAY, YOU GET TAX x2\\r\\n            uint timeDiffBetweenNowAndSell = block.timestamp.sub(_timeSinceFirstSell[from]);\\r\\n            uint256 newTotal = _amountSold[from].add(amount);\\r\\n            if (timeDiffBetweenNowAndSell \\u003e 0 \\u0026\\u0026 timeDiffBetweenNowAndSell \\u003c 86400 \\u0026\\u0026 _timeSinceFirstSell[from] != 0) {\\r\\n                if (newTotal \\u003e _whaleSellThreshold) {\\r\\n                    _feeMultiplier = 2; \\r\\n                    _marketingFeeMultiplier=2;\\r\\n                }\\r\\n                _amountSold[from] = newTotal;\\r\\n            } else if (_timeSinceFirstSell[from] == 0 \\u0026\\u0026 newTotal \\u003e _whaleSellThreshold) {\\r\\n                _feeMultiplier = 2;\\r\\n                _marketingFeeMultiplier = 2;\\r\\n                _amountSold[from] = newTotal;\\r\\n            } else {\\r\\n                _timeSinceFirstSell[from] = block.timestamp;\\r\\n                _amountSold[from] = amount;\\r\\n            }\\r\\n        }\\r\\n        //IF IT\\u0027S NOT A SELL AND WALLET IS NOT PRIVILIDGED SO THE RECIPENT IS PRIVATE WALLET OF INVESTOR WE CHECK IF WE DONT HAVE TO MUCH \\r\\n        else if(to != pancakePair) {\\r\\n            uint256 contractBalanceRecepient = balanceOf(to);\\r\\n            uint256 maxWalletSize = _tTotal.mul(_maxWalletSizePromile).div(1000);\\r\\n            require(contractBalanceRecepient + amount \\u003c= maxWalletSize, \\\"Transfer amount exceeds the maxWalletSize.\\\");\\r\\n        }\\r\\n        _tokenTransfer(from, to, amount);\\r\\n        _feeMultiplier = 1;\\r\\n        _marketingFeeMultiplier = 1;\\r\\n    }\\r\\n\\r\\n    //this method is responsible for taking all fee, if takeFee is true\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n       \\r\\n        (\\r\\n            \\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tMarketing\\r\\n        ) = _getTValues(amount);\\r\\n        \\r\\n        uint256 currentRate = _getRate();\\r\\n        uint256 rAmount = amount.mul(currentRate);\\r\\n        uint256 rTransferAmount = tTransferAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        if (_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n\\r\\n            _tOwned[sender] = _tOwned[sender].sub(amount);\\r\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n\\r\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        } else if (!_isExcluded[sender] \\u0026\\u0026 !_isExcluded[recipient]) {\\r\\n\\r\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        } else if (_isExcluded[sender] \\u0026\\u0026 _isExcluded[recipient]) {\\r\\n\\r\\n            _tOwned[sender] = _tOwned[sender].sub(amount);\\r\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        }\\r\\n\\r\\n        \\r\\n        if (tFee \\u003e 0) {\\r\\n            //stored in contract to be leter swapped\\r\\n            _takeMarketing(tMarketing); // 2% for marketing\\r\\n\\r\\n            //goes directly to wallet\\r\\n            _takeLiquidity(tFee);\\r\\n\\r\\n            //goes directyl to burn address\\r\\n            _takeBurn(tFee);\\r\\n            _reflectFee(rFee, tFee);\\r\\n            emit Transfer(sender, _BurnWallet, tFee);\\r\\n        }\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n//liquidity wallet and marketing wallet transfer\\r\\n    function swapForMarketing(uint256 contractTokenBalance) private lockTheSwap \\r\\n    {\\r\\n        swapTokensForBNB(contractTokenBalance);\\r\\n        _marketingAddress.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function swapTokensForBNB(uint256 tokenAmount) private {\\r\\n        // generate the uniswap pair path of token -\\u003e weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = pancakeRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(pancakeRouter), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //Added function to withdraw leftoever BNB in the contract from addtoLiquidity function\\r\\n    function withDrawLeftoverBNB() public {\\r\\n        require(_msgSender() == _LiquidityReciever, \\\"Only the liquidity reciever can use this function!\\\");\\r\\n        _LiquidityReciever.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n   \\r\\n}\"},\"IERC20.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\"},\"pancake.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\ninterface IPancakeFactory{\\r\\n\\t\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n\\t\\tfunction feeTo() external view returns (address);\\r\\n\\t\\tfunction feeToSetter() external view returns (address);\\r\\n\\r\\n\\t\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n\\t\\tfunction allPairs(uint) external view returns (address pair);\\r\\n\\t\\tfunction allPairsLength() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n\\t\\tfunction setFeeTo(address) external;\\r\\n\\t\\tfunction setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakePair{\\r\\n\\t\\tevent Approval(address indexed owner, address indexed spender, uint value);\\r\\n\\t\\tevent Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n\\t\\tfunction name() external pure returns (string memory);\\r\\n\\t\\tfunction symbol() external pure returns (string memory);\\r\\n\\t\\tfunction decimals() external pure returns (uint8);\\r\\n\\t\\tfunction totalSupply() external view returns (uint);\\r\\n\\t\\tfunction balanceOf(address owner) external view returns (uint);\\r\\n\\t\\tfunction allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction approve(address spender, uint value) external returns (bool);\\r\\n\\t\\tfunction transfer(address to, uint value) external returns (bool);\\r\\n\\t\\tfunction transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n\\t\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\t\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\t\\tfunction nonces(address owner) external view returns (uint);\\r\\n\\r\\n\\t\\tfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n\\t\\tevent Mint(address indexed sender, uint amount0, uint amount1);\\r\\n\\t\\tevent Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n\\t\\tevent Swap(\\r\\n\\t\\t\\t\\taddress indexed sender,\\r\\n\\t\\t\\t\\tuint amount0In,\\r\\n\\t\\t\\t\\tuint amount1In,\\r\\n\\t\\t\\t\\tuint amount0Out,\\r\\n\\t\\t\\t\\tuint amount1Out,\\r\\n\\t\\t\\t\\taddress indexed to\\r\\n\\t\\t);\\r\\n\\t\\tevent Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n\\t\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\t\\tfunction factory() external view returns (address);\\r\\n\\t\\tfunction token0() external view returns (address);\\r\\n\\t\\tfunction token1() external view returns (address);\\r\\n\\t\\tfunction getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\t\\tfunction price0CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction price1CumulativeLast() external view returns (uint);\\r\\n\\t\\tfunction kLast() external view returns (uint);\\r\\n\\r\\n\\t\\tfunction mint(address to) external returns (uint liquidity);\\r\\n\\t\\tfunction burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\t\\tfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\t\\tfunction skim(address to) external;\\r\\n\\t\\tfunction sync() external;\\r\\n\\r\\n\\t\\tfunction initialize(address, address) external;\\r\\n\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n\\t\\tfunction factory() external pure returns (address);\\r\\n\\t\\tfunction WETH() external pure returns (address);\\r\\n\\r\\n\\t\\tfunction addLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint amountADesired,\\r\\n\\t\\t\\t\\tuint amountBDesired,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\t\\tfunction addLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint amountTokenDesired,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\t\\tfunction removeLiquidity(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETH(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction removeLiquidityWithPermit(\\r\\n\\t\\t\\t\\taddress tokenA,\\r\\n\\t\\t\\t\\taddress tokenB,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountAMin,\\r\\n\\t\\t\\t\\tuint amountBMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountA, uint amountB);\\r\\n\\t\\tfunction removeLiquidityETHWithPermit(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountToken, uint amountETH);\\r\\n\\t\\tfunction swapExactTokensForTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactTokens(\\r\\n\\t\\t\\t\\tuint amountOut,\\r\\n\\t\\t\\t\\tuint amountInMax,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\t\\tfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t\\treturns (uint[] memory amounts);\\r\\n\\r\\n\\t\\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\t\\tfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n\\t\\tfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n\\t\\tfunction getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n\\t\\tfunction getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {  //The functions calling for ETH actually call for BNB so i could technically change the \\\"ETH\\\" for BNB.\\r\\n\\t\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\t\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\t\\taddress token,\\r\\n\\t\\t\\t\\tuint liquidity,\\r\\n\\t\\t\\t\\tuint amountTokenMin,\\r\\n\\t\\t\\t\\tuint amountETHMin,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline,\\r\\n\\t\\t\\t\\tbool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n\\t\\t) external returns (uint amountETH);\\r\\n\\r\\n\\t\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n\\t\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external payable;\\r\\n\\t\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n\\t\\t\\t\\tuint amountIn,\\r\\n\\t\\t\\t\\tuint amountOutMin,\\r\\n\\t\\t\\t\\taddress[] calldata path,\\r\\n\\t\\t\\t\\taddress to,\\r\\n\\t\\t\\t\\tuint deadline\\r\\n\\t\\t) external;\\r\\n}\\r\\n\"},\"safeMath.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"BurnWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BurnWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LiquidityReciever\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whaleSellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antisniperEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antisniperEnabled\",\"type\":\"bool\"}],\"name\":\"setAntisniperEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liqAddress\",\"type\":\"address\"}],\"name\":\"setLiquidityAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promile\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promile\",\"type\":\"uint256\"}],\"name\":\"setSellMaxTxAmountPromile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeBetweenSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWhaleSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawLeftoverBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Fipi", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa552baaf3ad31a1c47e9ed2d7a9dd892776d071256d844cf5871d07ded60951"}