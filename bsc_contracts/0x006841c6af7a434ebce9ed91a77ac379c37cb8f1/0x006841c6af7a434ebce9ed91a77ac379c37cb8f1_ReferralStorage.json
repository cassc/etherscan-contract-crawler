{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAdmin.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IAdmin {\\n    function admin() external view returns (address);\\n\\n    function setAdmin(address _admin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/ITimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../access/interfaces/IAdmin.sol\\\";\\n\\ninterface ITimelock is IAdmin {\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function enableLeverage(address _vault) external;\\n\\n    function disableLeverage(address _vault) external;\\n\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled)\\n        external;\\n\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\"\r\n    },\r\n    \"contracts/referrals/ReferralStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../peripherals/interfaces/ITimelock.sol\\\";\\nimport \\\"./interfaces/IReferralStorage.sol\\\";\\n\\ncontract ReferralStorage is Ownable, IReferralStorage {\\n    struct Tier {\\n        uint256 totalRebate; // e.g. 2400 for 24%\\n        uint256 discountShare; // 5000 for 50%/50%, 7000 for 30% rebates/70% discount\\n    }\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    mapping(address => uint256) public override referrerDiscountShares; // to override default value in tier\\n    mapping(address => uint256) public override referrerTiers; // link between user <> tier\\n    mapping(uint256 => Tier) public tiers;\\n\\n    mapping(address => bool) public isHandler;\\n\\n    mapping(bytes32 => address) public override codeOwners;\\n    mapping(address => bytes32) public override traderReferralCodes;\\n\\n    event SetHandler(address handler, bool isActive);\\n    event SetTraderReferralCode(address account, bytes32 code);\\n    event SetTier(uint256 tierId, uint256 totalRebate, uint256 discountShare);\\n    event SetReferrerTier(address referrer, uint256 tierId);\\n    event SetReferrerDiscountShare(address referrer, uint256 discountShare);\\n    event RegisterCode(address account, bytes32 code);\\n    event SetCodeOwner(address account, address newAccount, bytes32 code);\\n    event GovSetCodeOwner(bytes32 code, address newAccount);\\n\\n    modifier onlyHandler() {\\n        require(isHandler[msg.sender], \\\"ReferralStorage: forbidden\\\");\\n        _;\\n    }\\n\\n    function setHandler(address _handler, bool _isActive) external onlyOwner {\\n        isHandler[_handler] = _isActive;\\n        emit SetHandler(_handler, _isActive);\\n    }\\n\\n    function setTier(\\n        uint256 _tierId,\\n        uint256 _totalRebate,\\n        uint256 _discountShare\\n    ) external override onlyOwner {\\n        require(\\n            _totalRebate <= BASIS_POINTS,\\n            \\\"ReferralStorage: invalid totalRebate\\\"\\n        );\\n        require(\\n            _discountShare <= BASIS_POINTS,\\n            \\\"ReferralStorage: invalid discountShare\\\"\\n        );\\n\\n        tiers[_tierId] = Tier({\\n            totalRebate: _totalRebate,\\n            discountShare: _discountShare\\n        });\\n\\n        emit SetTier(_tierId, _totalRebate, _discountShare);\\n    }\\n\\n    function setReferrerTier(address _referrer, uint256 _tierId)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_tierId != 0, \\\"ReferralStorage: should not 0\\\");\\n        require(\\n            tiers[_tierId].totalRebate != 0,\\n            \\\"ReferralStorage: invalid tierId\\\"\\n        );\\n\\n        referrerTiers[_referrer] = _tierId;\\n        emit SetReferrerTier(_referrer, _tierId);\\n    }\\n\\n    function setReferrerDiscountShare(uint256 _discountShare) external {\\n        require(\\n            _discountShare <= BASIS_POINTS,\\n            \\\"ReferralStorage: invalid discountShare\\\"\\n        );\\n\\n        referrerDiscountShares[msg.sender] = _discountShare;\\n        emit SetReferrerDiscountShare(msg.sender, _discountShare);\\n    }\\n\\n    function setTraderReferralCode(address _account, bytes32 _code)\\n        external\\n        override\\n        onlyHandler\\n    {\\n        _setTraderReferralCode(_account, _code);\\n    }\\n\\n    function setTraderReferralCodeByUser(bytes32 _code) external {\\n        _setTraderReferralCode(msg.sender, _code);\\n    }\\n\\n    function registerCode(bytes32 _code) external {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n        require(\\n            codeOwners[_code] == address(0),\\n            \\\"ReferralStorage: code already exists\\\"\\n        );\\n\\n        codeOwners[_code] = msg.sender;\\n        emit RegisterCode(msg.sender, _code);\\n    }\\n\\n    function setCodeOwner(bytes32 _code, address _newAccount) external {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n\\n        address account = codeOwners[_code];\\n        require(msg.sender == account, \\\"ReferralStorage: forbidden\\\");\\n\\n        codeOwners[_code] = _newAccount;\\n        emit SetCodeOwner(msg.sender, _newAccount, _code);\\n    }\\n\\n    function govSetCodeOwner(bytes32 _code, address _newAccount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(_code != bytes32(0), \\\"ReferralStorage: invalid _code\\\");\\n\\n        codeOwners[_code] = _newAccount;\\n        emit GovSetCodeOwner(_code, _newAccount);\\n    }\\n\\n    function getTraderReferralInfo(address _account)\\n        external\\n        view\\n        override\\n        returns (bytes32, address)\\n    {\\n        bytes32 code = traderReferralCodes[_account];\\n        address referrer;\\n        if (code != bytes32(0)) {\\n            referrer = codeOwners[code];\\n        }\\n        return (code, referrer);\\n    }\\n\\n    function _setTraderReferralCode(address _account, bytes32 _code) private {\\n        require(\\n            _account != codeOwners[_code],\\n            \\\"ReferralStorage: referred by himself\\\"\\n        );\\n\\n        traderReferralCodes[_account] = _code;\\n        emit SetTraderReferralCode(_account, _code);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/referrals/interfaces/IReferralStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n\\n    function traderReferralCodes(address _account)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function referrerDiscountShares(address _account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function referrerTiers(address _account) external view returns (uint256);\\n\\n    function getTraderReferralInfo(address _account)\\n        external\\n        view\\n        returns (bytes32, address);\\n\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n\\n    function setTier(\\n        uint256 _tierId,\\n        uint256 _totalRebate,\\n        uint256 _discountShare\\n    ) external;\\n\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"}],\"name\":\"GovSetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"RegisterCode\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"SetCodeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"SetHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"name\":\"SetReferrerDiscountShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"}],\"name\":\"SetReferrerTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tierId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"name\":\"SetTier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"SetTraderReferralCode\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"codeOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTraderReferralInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"govSetCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDiscountShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"registerCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"setCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setReferrerDiscountShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"setReferrerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setTraderReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"}],\"name\":\"setTraderReferralCodeByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traderReferralCodes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReferralStorage", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}