{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contract/Swap.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IUniswapV2Router02.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contract/Daov3.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ninterface IRank{\r\n     function getAddressRank(address _address) external view returns(uint);\r\n}\r\n\r\n\r\ncontract  Daov3  is ERC20,  Ownable  {\r\n    using SafeMath for uint256;\r\n    IRank iRank;\r\n    address public marketAddress;\r\n    address payable public bnbReceive;\r\n    address public jiAddress;\r\n    address public topAddress;\r\n    address public nftContract;\r\n    address public _swapV2Pair; \r\n    address public _swapV2Router; \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    IUniswapV2Pair public uniswapV2Pair;\r\n    address private usdt;\r\n    bool canReg = true;\r\n    uint baseAirNum = 500 ether;\r\n     uint lpSafeNum = 5000;\r\n\r\n    struct user{\r\n        address userid;\r\n        address pid;\r\n        uint256 layerAll;\r\n        uint256 zhiLp;\r\n        uint256 lpall;\r\n        uint256 lockNum;\r\n        uint256 unLockNum;\r\n        uint256 lastTime;\r\n        uint256 rank;\r\n        bool isMore50;\r\n        bool isPro;\r\n    }\r\n\r\n    \r\n\r\n    struct pledgeRecord{\r\n        uint index;\r\n        uint lp;\r\n        uint usdt;\r\n        uint token;\r\n        uint lastTime;\r\n        uint state;\r\n        address userid;\r\n    }\r\n\r\n    \r\n    struct lpBonus{\r\n        uint canColNum;\r\n        uint totalNum;\r\n    }\r\n    \r\n    struct nodeBonus{\r\n        uint canColNum;\r\n        uint totalNum;\r\n    }\r\n    \r\n    struct partnerBonus{\r\n        uint canColNum;\r\n        uint totalNum;\r\n    }\r\n\r\n    \r\n    \r\n    mapping (address => address[]) public children;\r\n    mapping (address => user) public userInfo;\r\n    mapping (address => address[]) public userPath;\r\n    mapping (address => uint256) public userPledge;\r\n    mapping (address => uint256) public userPledgeCount;\r\n    pledgeRecord[] public pledgeRecords;\r\n    \r\n    mapping (address => uint256) public nodeShiNum;\r\n    mapping (address => lpBonus) public lpBonuses;\r\n    mapping (address => nodeBonus) public nodeBonuses;\r\n    mapping (address => partnerBonus) public partnerBonuses;\r\n    mapping (address => uint) public colDayBonus;\r\n    \r\n    address[] public partners;\r\n    address[] public nodes;\r\n    uint256[] private step;\r\n    \r\n    \r\n    uint256 public allUser;\r\n    address[] public allLpUsers;\r\n    uint private unlocked = 1;\r\n    uint pastTime = 24*60*60;\r\n   \r\n\r\n    constructor(\r\n        \r\n       address rankContract,\r\n       address _marketAddress,\r\n       address _jiAddress,\r\n       address _bnbReceive\r\n    ) ERC20(\"FIRE\", \"FIRE\") {\r\n        _mint(msg.sender, 50000000 * 1 ether );\r\n        \r\n \r\n       \r\n        topAddress =msg.sender;\r\n        marketAddress=_marketAddress;\r\n        jiAddress=_jiAddress;\r\n        bnbReceive= payable(_bnbReceive);\r\n        iRank = IRank(rankContract);\r\n        step = [300,200,100,100,100,100,200,200,300,300];\r\n        usdt= 0x55d398326f99059fF775485246999027B3197955; //BSC56\r\n        _swapV2Router = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //bsc56\r\n         uniswapV2Router = IUniswapV2Router02(_swapV2Router);\r\n         _swapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n             usdt,\r\n             address(this)\r\n             \r\n         );\r\n\r\n        uniswapV2Pair=IUniswapV2Pair(_swapV2Pair);\r\n        \r\n\r\n    }\r\n\r\n\r\n  \r\n    event log(address indexed userid,uint lastTime,uint classes, uint num);\r\n\r\n    event drawlog(address indexed userid,uint lastTime, uint classes,uint num);\r\n\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function colLpBonus() public {\r\n            require(lpBonuses[msg.sender].canColNum>0 && balanceOf(address(this))>=lpBonuses[msg.sender].canColNum);\r\n            super._transfer(address(this),msg.sender,lpBonuses[msg.sender].canColNum);\r\n            emit drawlog(msg.sender,getTime(),0,lpBonuses[msg.sender].canColNum);\r\n            lpBonuses[msg.sender].canColNum=0;\r\n            \r\n    }\r\n     \r\n    function colNodeBonus() public {\r\n            require(nodeBonuses[msg.sender].canColNum>0 && balanceOf(address(this))>=nodeBonuses[msg.sender].canColNum);\r\n            super._transfer(address(this),msg.sender,nodeBonuses[msg.sender].canColNum);\r\n            emit drawlog(msg.sender,getTime(),1,nodeBonuses[msg.sender].canColNum);\r\n            nodeBonuses[msg.sender].canColNum=0;\r\n    }\r\n\r\n    \r\n    function colPartnerBonus() public {\r\n            require(partnerBonuses[msg.sender].canColNum>0 && balanceOf(address(this))>=partnerBonuses[msg.sender].canColNum);\r\n            super._transfer(address(this),msg.sender,partnerBonuses[msg.sender].canColNum);\r\n            emit drawlog(msg.sender,getTime(),2,partnerBonuses[msg.sender].canColNum);\r\n            partnerBonuses[msg.sender].canColNum=0;\r\n    }\r\n\r\n   \r\n    function colDayBonusFun() public {\r\n            require(getColDayBonus(msg.sender)>0 && balanceOf(address(this))>=getColDayBonus(msg.sender));\r\n            uint _bonus=getColDayBonus(msg.sender);\r\n            super._transfer(address(this),msg.sender,_bonus);\r\n            emit drawlog(msg.sender,getTime(),3,_bonus);\r\n            colDayBonus[msg.sender]+=_bonus;\r\n            if(userPath[msg.sender].length>1){\r\n                uint rand =0;\r\n                for(uint i = userPath[msg.sender].length-1 ; i>0 ; i--){\r\n                    rand+=1;\r\n                    if(rand==11){\r\n                        break;\r\n                    }\r\n                   \r\n                    if(userInfo[userPath[msg.sender][i]].zhiLp >=  userPath[msg.sender].length-1+1-i && userPath[msg.sender].length-1-i<=9){\r\n                        if(getLimit(userPath[msg.sender][i],_bonus.mul(step[userPath[msg.sender].length-1-i]).div(1000))>0){\r\n                            lpBonuses[userPath[msg.sender][i]].canColNum+=getLimit(userPath[msg.sender][i],_bonus.mul(step[userPath[msg.sender].length-1-i]).div(1000));\r\n                            lpBonuses[userPath[msg.sender][i]].totalNum+=getLimit(userPath[msg.sender][i],_bonus.mul(step[userPath[msg.sender].length-1-i]).div(1000));\r\n                            userInfo[userPath[msg.sender][i]].unLockNum+=getLimit(userPath[msg.sender][i],_bonus.mul(step[userPath[msg.sender].length-1-i]).div(1000));\r\n                            \r\n                            emit log(userPath[msg.sender][i],getTime(),4,_bonus.mul(step[userPath[msg.sender].length-1-i]).div(1000));\r\n                        }\r\n                       \r\n                    }\r\n                    \r\n                }\r\n            }\r\n    }\r\n\r\n    \r\n    function getColDayBonus(address _address) public view returns(uint){\r\n        uint _bonus=getDayBonus(_address).sub(colDayBonus[_address]);\r\n            if(_bonus<=0){\r\n                return 0;\r\n            }else{\r\n                \r\n                return getLimit(_address,_bonus);\r\n            }\r\n            \r\n    }\r\n\r\n    \r\n    function getDayBonus(address _address) public view returns(uint){\r\n        uint  bonus;\r\n        uint firstDay;\r\n        bool _bool=true;\r\n        for(uint i=0 ; i<pledgeRecords.length;i++){\r\n            if(pledgeRecords[i].userid==_address && pledgeRecords[i].state==0){\r\n                if(_bool){\r\n                    firstDay=pledgeRecords[i].lastTime;\r\n                    _bool=false;\r\n                }\r\n                if(getTime().sub(pledgeRecords[i].lastTime)<=0){\r\n                    break;\r\n                }else{\r\n                    if(getTime().sub(pledgeRecords[i].lastTime).div(pastTime)<=0){\r\n                        break;\r\n                    }else{\r\n                        bonus+=pledgeRecords[i].usdt.mul(40).mul((getTime().sub(pledgeRecords[i].lastTime)).div(pastTime)).div(1000);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        }\r\n        \r\n        if(getTime().sub(firstDay).div(pastTime)>0){\r\n            if(bonus > getTime().sub(firstDay).div(pastTime).mul(5 ether)){\r\n                bonus = getTime().sub(firstDay).div(pastTime).mul(5 ether);\r\n            }\r\n            \r\n        }\r\n\r\n       if(u2token(bonus)>userInfo[_address].lockNum){\r\n           return userInfo[_address].lockNum;\r\n       }else{\r\n           return u2token(bonus);\r\n       }\r\n        \r\n\r\n    }\r\n\r\n    function u2token(uint _u) public view returns(uint){\r\n        uint _token;\r\n        uint _usdt;\r\n        \r\n        (_token,_usdt,) = uniswapV2Pair.getReserves();\r\n        if(_token==0 || _usdt==0){\r\n            return 0;\r\n        }else{\r\n            if(uniswapV2Pair.token1()==usdt){\r\n                return _u.mul(_token).div(_usdt);\r\n            }else{\r\n                return _u.mul(_usdt).div(_token);\r\n            }\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    function setNft(address _nft) public onlyOwner{\r\n        nftContract=_nft;\r\n    }\r\n\r\n    function addLockNum(address _address,uint256 _num) public{\r\n        require(msg.sender==nftContract);\r\n        userInfo[_address].lockNum+=_num;\r\n    }\r\n\r\n    function getIsUser(address _address) public view returns (bool){\r\n        if(userInfo[_address].lastTime>0){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getLimit(address _address,uint _num) private view returns(uint){\r\n        if( (userInfo[_address].unLockNum + colDayBonus[_address]) >= userInfo[_address].lockNum){\r\n            return 0;\r\n        }else{\r\n            uint left = userInfo[_address].lockNum.sub(userInfo[_address].unLockNum).sub(colDayBonus[_address]);\r\n            if(left>=_num){\r\n                return _num;\r\n            }else{\r\n                return _num.sub(left);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    \r\n    function register(address pid) public payable{\r\n        require(canReg==true);\r\n        if(pid==topAddress){\r\n            require(iRank.getAddressRank(msg.sender)==3);\r\n        }\r\n        \r\n         require(msg.value>=0.031 ether,\"1001\");\r\n         require(msg.sender!=topAddress,\"1002\");\r\n         require(pid != msg.sender,\"1003\");\r\n        require( userInfo[msg.sender].userid == address(0),\"1004\");\r\n        require( !isContract(msg.sender),\"1005\");\r\n        if(pid!=topAddress){\r\n            require(userInfo[pid].userid != address(0));\r\n            \r\n            userPath[msg.sender]=userPath[pid];\r\n            userPath[msg.sender].push(pid);\r\n            children[pid].push(msg.sender);\r\n        }else{\r\n            userPath[msg.sender].push(topAddress);\r\n        }\r\n        allUser=allUser.add(1);\r\n        \r\n        bnbReceive.transfer(msg.value);\r\n        \r\n        uint256 _num ;\r\n        uint256 _getRank;\r\n        _getRank=iRank.getAddressRank(msg.sender);\r\n        if(_getRank==0){\r\n            _num=baseAirNum;\r\n        }else if(_getRank==1){\r\n            _num=0;\r\n        }else if(_getRank==2){\r\n            _num=6000 ether;\r\n        }else if(_getRank==3){\r\n            _num=10000 ether;\r\n        }\r\n        bool _isPro= false;\r\n        if(_getRank==2 || _getRank==3){\r\n            _isPro=true;\r\n        }\r\n        userInfo[msg.sender]=user(\r\n            msg.sender,\r\n            pid,\r\n            0,\r\n            0,\r\n            0,\r\n           _num,0,\r\n            block.timestamp,\r\n            iRank.getAddressRank(msg.sender),\r\n            false,\r\n            _isPro\r\n            );\r\n    \r\n        \r\n        if(iRank.getAddressRank(msg.sender)==3){\r\n            partners.push(msg.sender);\r\n        }else if(iRank.getAddressRank(msg.sender)==2){\r\n            nodes.push(msg.sender);\r\n        }\r\n        \r\n        \r\n        if(pid!=topAddress){\r\n            \r\n            uint pAddNum=getLimit(pid,1 ether);\r\n            if(pAddNum>0){\r\n                lpBonuses[pid].canColNum+=pAddNum;\r\n                lpBonuses[pid].totalNum+=pAddNum;\r\n                userInfo[pid].unLockNum+=pAddNum;\r\n                emit log(pid,getTime(),0,1 ether);\r\n            }\r\n            \r\n            \r\n           \r\n            for(uint i ; i<userPath[msg.sender].length;i++){\r\n                if(i==50){\r\n                    break;\r\n                }\r\n                if(userPath[msg.sender][i]!=topAddress){\r\n                    userInfo[userPath[msg.sender][i]].layerAll+=1;\r\n                    if(userInfo[userPath[msg.sender][i]].layerAll>=100 && userInfo[userPath[msg.sender][i]].rank==0 ){\r\n                        userInfo[userPath[msg.sender][i]].rank=1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    function getRealUsdt(address _address) public view returns (uint){\r\n        uint _res =0;\r\n        for(uint i ; i<pledgeRecords.length ;i++){\r\n            if(pledgeRecords[i].userid==_address && pledgeRecords[i].state==0){\r\n                _res+=pledgeRecords[i].usdt;\r\n            }\r\n        }\r\n        return _res;\r\n    }\r\n\r\n    \r\n    function getRealToken(address _address) public view returns (uint){\r\n        uint _res =0;\r\n        for(uint i ; i<pledgeRecords.length ;i++){\r\n            if(pledgeRecords[i].userid==_address && pledgeRecords[i].state==0){\r\n                _res+=pledgeRecords[i].token;\r\n            }\r\n        }\r\n        return _res;\r\n    }\r\n\r\n   \r\n    function pledge(uint256 num) public {\r\n        require(userInfo[msg.sender].userid!=address(0));\r\n        IERC20(_swapV2Pair).transferFrom(msg.sender,address(this),num);\r\n        \r\n        if(getRealUsdt(msg.sender)==0){\r\n            bool hasAllLp = false;\r\n            for(uint i ; i<allLpUsers.length;i++){\r\n                if(allLpUsers[i]==msg.sender){\r\n                    hasAllLp=true;\r\n                    break;\r\n                }\r\n                        \r\n            }\r\n            if(hasAllLp==false){\r\n                allLpUsers.push(msg.sender);\r\n            }\r\n                \r\n        }\r\n        userPledge[msg.sender]=userPledge[msg.sender].add(num);\r\n        pledgeRecords.push(pledgeRecord(userPledgeCount[msg.sender],num,_getLp2u(num),_getLp2Token(num),block.timestamp,0,msg.sender));\r\n        userPledgeCount[msg.sender]+=1;\r\n        \r\n        \r\n     \r\n        uint _addNum;\r\n        if(userInfo[msg.sender].rank==2 && _getRandReal(msg.sender,2) && nodeShiNum[msg.sender]==0 && userInfo[msg.sender].isPro){\r\n            _addNum =getLimit(msg.sender,300 ether);\r\n            if(_addNum>0){\r\n                nodeBonuses[msg.sender].canColNum+=_addNum;\r\n                nodeBonuses[msg.sender].totalNum+=_addNum;\r\n                userInfo[msg.sender].unLockNum+=_addNum;\r\n                nodeShiNum[msg.sender]+=300 ether;\r\n                emit log(msg.sender,getTime(),2,300 ether);\r\n            }\r\n        }\r\n\r\n        if(userInfo[msg.sender].rank==3 && _getRandReal(msg.sender,3) && nodeShiNum[msg.sender]<500 ether && userInfo[msg.sender].isPro){\r\n            _addNum =getLimit(msg.sender,500 ether);\r\n            if(_addNum>0){\r\n                partnerBonuses[msg.sender].canColNum+=_addNum;\r\n                partnerBonuses[msg.sender].totalNum+=_addNum;\r\n                userInfo[msg.sender].unLockNum+=_addNum;\r\n                nodeShiNum[msg.sender]+=500 ether;\r\n                emit log(msg.sender,getTime(),22,500 ether);\r\n            }\r\n        }\r\n        \r\n       \r\n        if(getRealUsdt(msg.sender)>=49 ether){\r\n\r\n            \r\n            if(userInfo[msg.sender].pid!=topAddress){\r\n                userInfo[userInfo[msg.sender].pid].zhiLp+=1;\r\n                uint _newLevelValue;\r\n                for(uint i ; i<userPath[msg.sender].length;i++){\r\n                    if(userPath[msg.sender][i]!=topAddress){\r\n                       \r\n                        userInfo[userPath[msg.sender][i]].lpall+=1;\r\n                       \r\n                        _newLevelValue = _newLevel(userPath[msg.sender][i]);\r\n                        if(_newLevelValue>userInfo[userPath[msg.sender][i]].rank){\r\n                            userInfo[userPath[msg.sender][i]].rank=_newLevelValue;\r\n                            if(_newLevelValue==2){\r\n                                nodes.push(userPath[msg.sender][i]);\r\n                            }\r\n                            if(_newLevelValue==3){\r\n                                partners.push(userPath[msg.sender][i]);\r\n                            }\r\n\r\n                        }\r\n\r\n                        uint _addNum1;\r\n                       \r\n                        if(userInfo[userPath[msg.sender][i]].lpall==100 && userInfo[userPath[msg.sender][i]].rank==2 && userInfo[msg.sender].isMore50==false && userInfo[userPath[msg.sender][i]].isPro){\r\n                            _addNum1=getLimit(userPath[msg.sender][i],200 ether);\r\n                            if(_addNum1>0){\r\n                                nodeBonuses[userPath[msg.sender][i]].canColNum+=_addNum1;\r\n                                nodeBonuses[userPath[msg.sender][i]].totalNum+=_addNum1;\r\n                                userInfo[userPath[msg.sender][i]].unLockNum+=_addNum1;\r\n                                emit log(userPath[msg.sender][i],getTime(),8,_addNum1);\r\n                            }\r\n                       \r\n                        }\r\n\r\n                       \r\n                        if(userInfo[userPath[msg.sender][i]].lpall==100 && userInfo[userPath[msg.sender][i]].rank==3 && userInfo[msg.sender].isMore50==false && userInfo[userPath[msg.sender][i]].isPro){\r\n                            _addNum1 = getLimit(userPath[msg.sender][i],300 ether);\r\n                            if(_addNum1>0){\r\n                                partnerBonuses[userPath[msg.sender][i]].canColNum+=_addNum1;\r\n                                partnerBonuses[userPath[msg.sender][i]].totalNum+=_addNum1;\r\n                                userInfo[userPath[msg.sender][i]].unLockNum+=_addNum1;\r\n                                emit log(userPath[msg.sender][i],getTime(),9,_addNum1);\r\n                            }\r\n                        }\r\n\r\n\r\n                      \r\n                        if(userInfo[msg.sender].isMore50==false){\r\n                           \r\n                             uint _addNum2 =  getLimit(userPath[msg.sender][i],1 ether);\r\n                                if(_addNum2>0){\r\n                                    if(userInfo[userPath[msg.sender][i]].rank==2 ){\r\n                                        nodeBonuses[userPath[msg.sender][i]].canColNum+=_addNum2;\r\n                                        nodeBonuses[userPath[msg.sender][i]].totalNum+=_addNum2;\r\n                                        userInfo[userPath[msg.sender][i]].unLockNum+=_addNum2;\r\n                                        emit log(userPath[msg.sender][i],getTime(),1,1 ether);\r\n                                    }\r\n\r\n                                    if(userInfo[userPath[msg.sender][i]].rank==3){\r\n                                        partnerBonuses[userPath[msg.sender][i]].canColNum+=_addNum2;\r\n                                        partnerBonuses[userPath[msg.sender][i]].totalNum+=_addNum2;\r\n                                        userInfo[userPath[msg.sender][i]].unLockNum+=_addNum2;\r\n                                        emit log(userPath[msg.sender][i],getTime(),11,1 ether);\r\n                                    }\r\n                                \r\n                                }\r\n                             \r\n                            \r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            \r\n            userInfo[msg.sender].isMore50=true;\r\n\r\n        }\r\n    }\r\n\r\n   \r\n    function _newLevel(address _address) private view returns(uint){\r\n        uint newLevel = userInfo[_address].rank;\r\n        if(userInfo[_address].layerAll>=300 && userInfo[_address].lpall>=200){\r\n            newLevel=2;\r\n        }\r\n        if(userInfo[_address].layerAll>=2000 && userInfo[_address].lpall>=1000){\r\n            newLevel=3;\r\n        }\r\n        return newLevel;\r\n    }\r\n\r\n   \r\n    function getPledgeRecords(address _address) public view returns(pledgeRecord[] memory){\r\n        pledgeRecord[] memory res;\r\n        res=new pledgeRecord[](userPledgeCount[_address]);\r\n        uint index=0;\r\n        for(uint i=0 ; i<pledgeRecords.length;i++){\r\n            if(pledgeRecords[i].userid==_address){\r\n                res[index]=pledgeRecords[i];\r\n                index+=1;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    \r\n\r\n    \r\n    function unPledge() public lock{\r\n        require(userInfo[msg.sender].userid!=address(0));\r\n        require(userPledge[msg.sender]>0 && IERC20(_swapV2Pair).balanceOf(address(this))>=userPledge[msg.sender]);\r\n        \r\n        \r\n        if(getRealUsdt(msg.sender)>49 ether){\r\n            if(userInfo[msg.sender].pid!=topAddress){\r\n                userInfo[userInfo[msg.sender].pid].zhiLp=userInfo[userInfo[msg.sender].pid].zhiLp.sub(1);\r\n            }\r\n            address pid;\r\n            for(uint i ; i<userPath[msg.sender].length;i++){\r\n                pid =userPath[msg.sender][i];\r\n                if(pid!=topAddress){\r\n                   \r\n                    userInfo[pid].lpall=userInfo[pid].lpall.sub(1);\r\n                    if(userInfo[pid].lpall<100 && userInfo[pid].rank==1){\r\n                        userInfo[pid].rank=0;\r\n                    }\r\n\r\n                  \r\n                        if(_newLevel(pid)<userInfo[pid].rank  && !userInfo[pid].isPro){\r\n                            userInfo[pid].rank=_newLevel(pid);\r\n                            if(_newLevel(pid)<3 ){\r\n                                delPartner(pid);\r\n                            }\r\n                            if(_newLevel(pid)<2){\r\n                                delPartner(pid);\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n            \r\n        }\r\n\r\n        IERC20(_swapV2Pair).transfer(msg.sender,userPledge[msg.sender].mul(95).div(1000));\r\n        IERC20(_swapV2Pair).transfer(jiAddress,userPledge[msg.sender].sub(userPledge[msg.sender].mul(95).div(1000)));\r\n        userPledge[msg.sender]=0;\r\n        for(uint i ; i<pledgeRecords.length;i++){\r\n            if(pledgeRecords[i].userid==msg.sender){\r\n                pledgeRecords[i].state=1;\r\n            }\r\n        }\r\n        for(uint i ; i<allLpUsers.length;i++){\r\n            if(allLpUsers[i]==msg.sender){\r\n                delete allLpUsers[i];\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n    function _getRandReal(address _address,uint _rank) private view returns(bool){\r\n        if(_rank==2){\r\n            return getRealToken(_address)>=200 ether;\r\n        }else if(_rank==3){\r\n            return getRealToken(_address)>=300 ether;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    \r\n    function _getLp2u(uint _lp) private view returns(uint256){\r\n        if(IERC20(_swapV2Pair).totalSupply() ==0 || _lp==0){\r\n            return 0;\r\n        }\r\n        return  IERC20(usdt).balanceOf(_swapV2Pair).mul(_lp).div(IERC20(_swapV2Pair).totalSupply());\r\n    }\r\n\r\n   \r\n    function _getLp2Token(uint _lp) private view returns(uint256){\r\n        if(IERC20(_swapV2Pair).totalSupply() ==0 || _lp==0){\r\n            return 0;\r\n        }else{\r\n            return  balanceOf(_swapV2Pair).mul(_lp).div(IERC20(_swapV2Pair).totalSupply());\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n        \r\n  \r\n\r\n   \r\n    function getTime() public view returns(uint){\r\n   \r\n        return block.timestamp;\r\n       \r\n    }\r\n\r\n   \r\n    function getChildren(address _address) public view returns(user[] memory){\r\n        user[] memory result ;\r\n        result= new user[](children[_address].length);\r\n        for(uint i=0;i<children[_address].length;i++){\r\n            result[i]=userInfo[children[_address][i]];\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balanceOf(from)>=0.001 ether, \"ERC20: balance less 0.001\");\r\n\r\n        if(from==_swapV2Pair ||from==_swapV2Router ){\r\n            \r\n            uint256 marketAmount = amount.mul(40).div(1000);\r\n            uint256 lpAmount = amount.mul(20).div(1000);\r\n            super._transfer(from,to,amount.sub(marketAmount).sub(lpAmount));\r\n\r\n\r\n            \r\n            uint edu = 0;\r\n            uint preRank =0;\r\n            \r\n            if(userPath[to].length>1){\r\n                for(uint i = userPath[to].length-1; i>0 ; i--){\r\n                    if(userInfo[userPath[to][i]].rank>preRank){\r\n                        \r\n                        if(userInfo[userPath[to][i]].rank== userInfo[userInfo[userPath[to][i]].pid].rank && userInfo[userPath[to][i]].rank !=3){\r\n                            uint toNum= amount.mul(_getJIchaRate(userPath[to][i])-edu).div(1000);\r\n                            super._transfer(from,userPath[to][i],toNum);\r\n                            super._transfer(from,userInfo[userPath[to][i]].pid,amount.mul(5).div(1000));\r\n                            edu=_getJIchaRate(userPath[to][i]).add(5);\r\n                            preRank=userInfo[userPath[to][i]].rank;\r\n                        }else{\r\n                            uint toNum= amount.mul(_getJIchaRate(userPath[to][i])-edu).div(1000);\r\n                            super._transfer(from,userPath[to][i],toNum);\r\n                            edu=_getJIchaRate(userPath[to][i]);\r\n                            preRank=userInfo[userPath[to][i]].rank;\r\n                        }\r\n                    \r\n                        \r\n                    }\r\n                    \r\n                    if(edu==40){\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            if(allLpUsers.length>0){\r\n                if(lpAmount.div(allLpUsers.length)>0){\r\n                    for(uint i ; i<allLpUsers.length;i++){\r\n                        if(i>=lpSafeNum){\r\n                            break;\r\n                        }\r\n                        if(allLpUsers[i] != address(0)){\r\n                            super._transfer(from,allLpUsers[i],lpAmount.div(allLpUsers.length));\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n            }\r\n            \r\n            \r\n\r\n        }else if(to==_swapV2Pair ||to==_swapV2Router){\r\n\r\n           \r\n            uint256 jiAmount = amount.mul(40).div(1000);\r\n            uint256 marketAmount = amount.mul(20).div(1000);\r\n            super._transfer(from, marketAddress, marketAmount);\r\n            super._transfer(from, jiAddress,jiAmount ); \r\n            super._transfer(from, to, amount.sub(jiAmount).sub(marketAmount));\r\n        }else{\r\n            super._transfer(from,to,amount); \r\n        }\r\n       \r\n    }\r\n\r\n   \r\n\r\n    function _getJIchaRate(address _address) private view returns(uint){\r\n        if(userInfo[_address].rank==0){\r\n            return 0;\r\n        }else if(userInfo[_address].rank==1){\r\n            return 20;\r\n        }else if(userInfo[_address].rank==2){\r\n            return 30;\r\n        }else if(userInfo[_address].rank==3){\r\n            return 40;\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n\r\n    function getAllPartners() public view returns(address[] memory){\r\n        address[] memory res = new address[](partners.length);\r\n        for(uint i=0;i<partners.length;i++){\r\n            res[i]=partners[i];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function getAllNodes() public view returns(address[] memory){\r\n        address[] memory res = new address[](nodes.length);\r\n        for(uint i=0;i<nodes.length;i++){\r\n            res[i]=nodes[i];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function delNode(address _address) private {\r\n        for(uint i=0;i<nodes.length;i++){\r\n            _address=nodes[i];\r\n            delete nodes[i];\r\n        }\r\n    }\r\n\r\n    function delPartner(address _address) private {\r\n        for(uint i=0;i<partners.length;i++){\r\n            _address=partners[i];\r\n            delete partners[i];\r\n        }\r\n\r\n    }\r\n\r\n    function setCanReg(bool _canReg) public onlyOwner{\r\n        canReg = _canReg;\r\n    }\r\n    function setBaseAirNum(uint _baseAirNum) public onlyOwner{\r\n        baseAirNum = _baseAirNum;\r\n    }\r\n\r\n    function setRank(uint _rank,address _address) public onlyOwner{\r\n        userInfo[_address].rank = _rank;\r\n    }\r\n\r\n    function setLpSafeNum(uint _newLpSafeNum) public onlyOwner{\r\n       lpSafeNum=_newLpSafeNum;\r\n    }\r\n\r\n    function getALLLp() public view returns(uint,uint){\r\n        uint _sumLp;\r\n        uint _sumUsdt;\r\n        for(uint i=0;i<pledgeRecords.length;i++){\r\n           if(pledgeRecords[i].state==0){\r\n               _sumLp+=pledgeRecords[i].lp;\r\n               _sumUsdt+=pledgeRecords[i].usdt;\r\n           }\r\n        }\r\n        return(_sumLp,_sumUsdt);\r\n    }\r\n\r\n    // function getLpUserIndex(uint x, uint y) public view returns(address[] memory){\r\n    //     address[] memory _arr = new address[](y-x);\r\n    //     uint _index;\r\n    //     for(uint i=x;i<y;i++){\r\n    //        _arr[_index]=allLpUsers[i];\r\n    //        _index+=1;\r\n    //     }\r\n    //     return _arr;\r\n    // }\r\n\r\n    \r\n\r\n    \r\n\r\n \r\n\r\n  \r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rankContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_jiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bnbReceive\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"classes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"drawlog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userid\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"classes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"log\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_swapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"addLockNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allLpUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbReceive\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"children\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"colDayBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colDayBonusFun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colLpBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colNodeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"colPartnerBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getALLLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPartners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getChildren\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerAll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zhiLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unLockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMore50\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPro\",\"type\":\"bool\"}],\"internalType\":\"struct Daov3.user[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getColDayBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getDayBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIsUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPledgeRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userid\",\"type\":\"address\"}],\"internalType\":\"struct Daov3.pledgeRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRealToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRealUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canColNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canColNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodeShiNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerBonuses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"canColNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"partners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userid\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pid\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAirNum\",\"type\":\"uint256\"}],\"name\":\"setBaseAirNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canReg\",\"type\":\"bool\"}],\"name\":\"setCanReg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLpSafeNum\",\"type\":\"uint256\"}],\"name\":\"setLpSafeNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"}],\"name\":\"setNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rank\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setRank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_u\",\"type\":\"uint256\"}],\"name\":\"u2token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"userid\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pid\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"layerAll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zhiLp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unLockNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMore50\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPro\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPledge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPledgeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Daov3", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c5c67dbd61f98e31c41f0677ecbc89fa07b05db0000000000000000000000000a1582eb31a85fe4b1d8babd5d0722fc4c0cf7fed000000000000000000000000ff817a1ac104ce26936577b9e02580cd862344af0000000000000000000000004a1149f51570f1ea603642c16cb629f0a422713e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1cbe80863184701b0a531a998730ee4d1feb7ddcea5c93b7ac72e421074e4dc"}