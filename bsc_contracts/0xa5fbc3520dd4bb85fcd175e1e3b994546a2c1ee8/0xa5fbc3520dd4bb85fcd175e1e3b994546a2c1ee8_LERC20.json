{"SourceCode": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n \r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n \r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\ninterface ILosslessController {\r\n    function beforeTransfer(address sender, address recipient, uint256 amount) external;\r\n \r\n    function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\r\n \r\n    function beforeApprove(address sender, address spender, uint256 amount) external;\r\n \r\n    function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;\r\n \r\n    function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;\r\n \r\n    function afterApprove(address sender, address spender, uint256 amount) external;\r\n \r\n    function afterTransfer(address sender, address recipient, uint256 amount) external;\r\n \r\n    function afterTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\r\n \r\n    function afterIncreaseAllowance(address sender, address spender, uint256 addedValue) external;\r\n \r\n    function afterDecreaseAllowance(address sender, address spender, uint256 subtractedValue) external;\r\n}\r\n \r\n/* Bot Protection contract interface */\r\ninterface IBotProtection {\r\n    function protect(address from, address to, uint256 amount) external;\r\n}\r\n \r\n \r\ncontract LERC20 is Context, IERC20, Ownable {\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n \r\n    address public recoveryAdmin;\r\n    address private recoveryAdminCanditate;\r\n    bytes32 private recoveryAdminKeyHash;\r\n    address public admin;\r\n    uint256 public timelockPeriod;\r\n    uint256 public losslessTurnOffTimestamp;\r\n    bool public isLosslessTurnOffProposed;\r\n    bool public isLosslessOn = true;\r\n    ILosslessController private lossless;\r\n \r\n    /* BP Variables */\r\n    bool public BPEnabled = true;\r\n    IBotProtection private _botProtection;\r\n    bool public BPDisabledForever = false;\r\n \r\n \r\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event RecoveryAdminChangeProposed(address indexed candidate);\r\n    event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\r\n    event LosslessTurnOffProposed(uint256 turnOffDate);\r\n    event LosslessTurnedOff();\r\n    event LosslessTurnedOn();\r\n \r\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\r\n        _mint(_msgSender(), totalSupply_);\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        admin = admin_;\r\n        recoveryAdmin = recoveryAdmin_;\r\n        timelockPeriod = timelockPeriod_;\r\n        lossless = ILosslessController(lossless_);\r\n    }\r\n \r\n    // --- LOSSLESS modifiers ---\r\n \r\n    modifier lssAprove(address spender, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeApprove(_msgSender(), spender, amount);\r\n            _;\r\n            lossless.afterApprove(_msgSender(), spender, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n \r\n    modifier lssTransfer(address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\r\n            _;\r\n            lossless.afterTransfer(_msgSender(), recipient, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n \r\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\r\n            _;\r\n            lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n \r\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\r\n            _;\r\n            lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n \r\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\r\n        if (isLosslessOn) {\r\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n            _;\r\n            lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n \r\n    modifier onlyRecoveryAdmin() {\r\n        require(_msgSender() == recoveryAdmin, \"LERC20: Must be recovery admin\");\r\n        _;\r\n    }\r\n \r\n    // --- LOSSLESS management ---\r\n \r\n    function getAdmin() external view returns (address) {\r\n        return admin;\r\n    }\r\n \r\n    function transferOutBlacklistedFunds(address[] calldata from) external {\r\n        require(_msgSender() == address(lossless), \"LERC20: Only lossless contract\");\r\n        for (uint i = 0; i < from.length; i++) {\r\n            _transfer(from[i], address(lossless), balanceOf(from[i]));\r\n        }\r\n    }\r\n \r\n    function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\r\n        emit AdminChanged(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n \r\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\r\n        recoveryAdminCanditate = candidate;\r\n        recoveryAdminKeyHash = keyHash;\r\n        emit RecoveryAdminChangeProposed(candidate);\r\n    }\r\n \r\n    function acceptRecoveryAdminOwnership(bytes memory key) external {\r\n        require(_msgSender() == recoveryAdminCanditate, \"LERC20: Must be canditate\");\r\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\r\n        emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\r\n        recoveryAdmin = recoveryAdminCanditate;\r\n    }\r\n \r\n    function proposeLosslessTurnOff() public onlyRecoveryAdmin {\r\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\r\n        isLosslessTurnOffProposed = true;\r\n        emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\r\n    }\r\n \r\n    function executeLosslessTurnOff() public onlyRecoveryAdmin {\r\n        require(isLosslessTurnOffProposed, \"LERC20: TurnOff not proposed\");\r\n        require(losslessTurnOffTimestamp <= block.timestamp, \"LERC20: Time lock in progress\");\r\n        isLosslessOn = false;\r\n        isLosslessTurnOffProposed = false;\r\n        emit LosslessTurnedOff();\r\n    }\r\n \r\n    function executeLosslessTurnOn() public onlyRecoveryAdmin {\r\n        isLosslessTurnOffProposed = false;\r\n        isLosslessOn = true;\r\n        emit LosslessTurnedOn();\r\n    }\r\n \r\n    // --- ERC20 methods ---\r\n \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\r\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"LERC20: Cannot change non zero allowance\");\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n \r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"LERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n \r\n        return true;\r\n    }\r\n \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"LERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n \r\n        return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"LERC20: transfer to the zero address\");\r\n \r\n        if ( BPEnabled && !BPDisabledForever ) {\r\n            _botProtection.protect(sender, recipient, amount);\r\n        }\r\n \r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"LERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n \r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"LERC20: mint to the zero address\");\r\n \r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"LERC20: approve from the zero address\");\r\n        require(spender != address(0), \"LERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    /* Bot Protection Functions */\r\n    function setBPAddress(address _bp) external onlyOwner {\r\n        require(address(_botProtection) == address(0), \"Can only be initialized once\");\r\n        _botProtection = IBotProtection(_bp);\r\n    }\r\n \r\n    function setBpEnabled(bool _enabled) external onlyOwner {\r\n        BPEnabled = _enabled;\r\n    }\r\n \r\n    function setBotProtectionDisableForever() external onlyOwner{\r\n        require(BPDisabledForever == false);\r\n        BPDisabledForever = true;\r\n    }\r\n \r\n \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recoveryAdmin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lossless_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"turnOffDate\",\"type\":\"uint256\"}],\"name\":\"LosslessTurnOffProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LosslessTurnedOn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChangeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"RecoveryAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPDisabledForever\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"acceptRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeLosslessTurnOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLosslessTurnOffProposed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"losslessTurnOffTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeLosslessTurnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoveryAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bp\",\"type\":\"address\"}],\"name\":\"setBPAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBotProtectionDisableForever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBpEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setLosslessAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"}],\"name\":\"transferOutBlacklistedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"name\":\"transferRecoveryAdminOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LERC20", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000ef0e2164755842c100000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000c31de8355c63ed175a4a01427c0d3b1d40118e4900000000000000000000000098a03c1258dcdfc91dbf5ec2060c8d32247340750000000000000000000000000000000000000000000000000000000000015180000000000000000000000000dbb5125ceeaf7233768c84a5df570aeecf0b46340000000000000000000000000000000000000000000000000000000000000005676f74454d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005474f54454d000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5659dc2a2ce66e41031ed6782fc3c46a561e92b43cd3c25d2eab9c088c60b12a"}