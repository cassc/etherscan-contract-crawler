{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from,address to,uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Chickly {\r\n    string public constant name = \"Chickly NFT Collection\";\r\n    string public constant symbol = \"CKLY\";\r\n    uint256 constant MARKETING_FEE = 3;\r\n\tuint256 constant PROJECT_FEE = 10;\r\n\tuint256 constant PERCENTS_DIVIDER = 100;\r\n\tuint256[3] internal REFERRER_PAYOUT = [ 7, 2, 1 ];\r\n    uint256 constant private busd_in_bnb = 900000; \r\n    uint256 constant private MAX_HOLD_DEPOSIT = 400;  // 400/2000 = 0.20 = 20%\r\n    uint256 constant private CONTRACT_BONUS=135 ether; // every 150 BNB for contract, includes fee \r\n    uint256 constant private CONTRACT_BONUS_PERCENT=10; //0.1% per every 150 BNB\r\n    uint256 constant private MAX_CONTRACT_PERCENT=700; //7%\r\n//    uint256 constant private PAYMENT_PERIOD = 10 minutes; //test\r\n    uint256 constant private PAYMENT_PERIOD = 1 days; //production\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    \r\n    uint256 public totalSupply;\r\n\r\n\tstruct Plan {\r\n        uint256 price;\r\n        uint8 profit;\r\n    }\r\n\r\n\tstruct Deposit {\r\n        uint256 amount;\r\n        uint256 accrual;\r\n        uint256 finish;\r\n        uint40 start;\r\n        uint40 updated;\r\n\t\tuint8 plan_id;\r\n        uint8 closed;\r\n\t}\r\n\r\n    struct Siteinfo{\r\n        uint percent;\r\n        uint users;\r\n        uint deposits;\r\n        uint total_bnb;\r\n        uint total_busd;\r\n        uint last_deposit;\r\n    }\r\n\r\n\tstruct User {\r\n        uint256 ref_bonus_bnb;\r\n        uint256 ref_bonus_busd;\r\n\t\taddress referrer;\r\n        uint256 invested_bnb;\r\n        uint256 invested_busd;\r\n        uint256 available_bnb;\r\n        uint256 available_busd;\r\n        uint256 withdrawn_bnb;\r\n        uint256 withdrawn_busd;\r\n        uint256 accrual_bnb;\r\n        uint256 accrual_busd;\r\n        uint256 ref_available_bnb;\r\n        uint256 ref_available_busd;\r\n        uint256 ref_withdrawn_bnb;\r\n        uint256 ref_withdrawn_busd;\r\n        uint deposits_number;\r\n        uint40 last_withdraw;\r\n        uint40 last_deposit;\r\n\t\tuint16 base_percent;\r\n        uint16 hold_percent;\r\n        uint256[3] total_ref_bonus_bnb;\r\n        uint256[3] total_ref_bonus_busd;\r\n        uint256[3] referrals;\r\n\t}\r\n\r\n    event NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Reinvest(address indexed user, uint8 plan, uint256 amount);\r\n\tevent TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event WithdrawBNB(address indexed user, uint256 amount);\r\n    event WithdrawBUSD(address indexed user, uint256 amount);\r\n    event WithdrawBonusBNB(address indexed user, uint256 amount);\r\n    event WithdrawBonusBUSD(address indexed user, uint256 amount);\r\n    event Revived(address indexed user, uint256 depositId, uint8 plan, uint256 amount);\r\n    event NewReferral(address indexed referrer, address indexed referral, uint256 indexed level);\r\n\tevent RefPaymentBNB(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount, uint256 bonus, uint256 timestamp);\r\n\tevent RefPaymentBUSD(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount, uint256 bonus, uint256 timestamp);\r\n\t\r\n\t\r\n    address public _busd;\r\n    uint24 public _total_users;\r\n    uint256 public _total_bnb;\r\n    uint256 public _total_busd;\r\n    Deposit[] public _deposits;\r\n    uint _last_deposit;\r\n    uint256 private _status = _NOT_ENTERED;\r\n\tmapping(address => User) private _users;\r\n    mapping(address =>uint256[]) public _users_deposits;\r\n    Plan[] public plans;\r\n/*    address[3] _owners=[\r\n        0xA064594A86F1AbbF12b6194487bd0C60183A712f,\r\n        0xE6f52e5f23c3DE93f9f9aA65C62E327A66Ac1DE5,\r\n        0xE54BDf3B70f99Ed82040767d5635331c64C96e5C\r\n    ];*/\r\n    address constant private MARKETING_FEE_WALLET = 0x0040473E86141EfD5009e77511d63578D7068cA3;\r\n    address constant private DEFAULT_REF_WALLET=0xcE2d3B9CF07eDf9Cb631ca7A53317B2FE51d4BB8;\r\n    address constant private PROJECT_WALLET=0x8e44AcD48D26cc28B6Ab63F7e11a347976437e2C;\r\n    address constant private _tkl=0xd9988C3fe281457E83E70657C365Ac82821D6aCD;\r\n    string private _uri=\"https://n.btc36.com/metadata/\";\r\n/*\r\n    modifier onlyOwner{\r\n        require(msg.sender == _owners[0] \r\n        || msg.sender == _owners[1] \r\n        || msg.sender == _owners[2] \r\n        ,\"Not authorized\");\r\n        _;\r\n    }*/\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"Reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    constructor(address busd){\r\n        require(busd != address(0), \"Invalid BUSD address\");\r\n        //BUSD plans\r\n        plans.push(Plan(500000 ether, 140));\r\n        plans.push(Plan(1000000 ether, 145));\r\n        plans.push(Plan(3000000 ether, 150));\r\n        plans.push(Plan(6000000 ether, 155));\r\n        plans.push(Plan(10000000 ether, 160));\r\n        //VIP BUSD plans\r\n        plans.push(Plan(20000000 ether, 170));\r\n        plans.push(Plan(30000000 ether, 180));\r\n        plans.push(Plan(40000000 ether, 190));\r\n        plans.push(Plan(50000000 ether, 200));\r\n        plans.push(Plan(60000000 ether, 220));\r\n        \r\n        //BNB plans\r\n        plans.push(Plan(0.04 ether, 140));\r\n        plans.push(Plan(0.2 ether, 145));\r\n        plans.push(Plan(0.4 ether, 150));\r\n        plans.push(Plan(2 ether, 155));\r\n        plans.push(Plan(4 ether, 160));\r\n        //VIP BNB plans\r\n        plans.push(Plan(8 ether, 170));\r\n        plans.push(Plan(20 ether, 180));\r\n        plans.push(Plan(40 ether, 190));\r\n        plans.push(Plan(60 ether, 200));\r\n        plans.push(Plan(100 ether, 220));\r\n      \r\n        _busd=busd;\r\n\t}\r\n    function checkVIPBUSD(uint8 plan_id) view internal {\r\n        string memory error = \"Wrong plan\";\r\n        uint limit=_total_bnb * busd_in_bnb + _total_busd;\r\n        if (plan_id < 5) return;\r\n        require(plan_id < 6 && limit >  50000000000 ether, error);\r\n        require(plan_id < 7 && limit >  100000000000 ether, error);\r\n        require(plan_id < 8 && limit >  300000000000 ether, error);\r\n        require(plan_id < 9 && limit >  600000000000 ether, error);\r\n        require(plan_id < 10 && limit > 1000000000000 ether, error);\r\n    }\r\n    function checkVIPBNB(uint8 plan_id) view internal {\r\n        string memory error = \"Wrong plan\";\r\n        uint limit=_total_bnb * busd_in_bnb + _total_busd;\r\n        if (plan_id < 15) return;\r\n        require(plan_id < 16 && limit >  1000000 ether, error);\r\n        require(plan_id < 17 && limit >  2000000 ether, error);\r\n        require(plan_id < 18 && limit >  5000000 ether, error);\r\n        require(plan_id < 19 && limit >  7000000 ether, error);\r\n        require(plan_id < 20 && limit > 10000000 ether, error);\r\n    }\r\n\tfunction invest(uint8 plan_id, uint256 amount, address referrer) external payable {\r\n        require( plan_id <plans.length, \"Illegal plan ID\");\r\n        if (referrer==address(0) || referrer==msg.sender){\r\n            referrer=DEFAULT_REF_WALLET;\r\n        }\r\n        if (_users[msg.sender].referrer==address(0)){\r\n            _total_users++;\r\n            _users[msg.sender].referrer=referrer;\r\n            address ref=msg.sender;\r\n            for(uint i=0;i<3;i++){\r\n                if (_users[ref].referrer ==address(0)) break;\r\n                _users[_users[ref].referrer].referrals[i]++;\r\n                emit NewReferral(_users[ref].referrer, msg.sender,i+1);\r\n                ref=_users[ref].referrer;\r\n            }\r\n        }\r\n        require(amount >0 && amount<=10, \"Wrong Amount\");\r\n        if ( plan_id>9){\r\n            checkVIPBNB(plan_id);\r\n            uint value=plans[plan_id].price * amount;\r\n            require(msg.value >= value, \"Not enough BNB\");\r\n            _total_bnb+=value;\r\n            _users[msg.sender].invested_bnb+=value;\r\n            refPaymentBNB(value);\r\n        }\r\n        else{\r\n            checkVIPBUSD(plan_id);\r\n            uint value = plans[plan_id].price * amount;\r\n            uint allowance=IERC20(_busd).allowance(msg.sender, address(this));\r\n            require(allowance >=value , \"Not enough BUSD\");\r\n            _total_busd+=value;\r\n            _users[msg.sender].invested_busd+=value;\r\n            safeTransferFrom(_busd,msg.sender, address(this), value );\r\n            refPaymentBUSD(value);\r\n        }\r\n        _deposit(msg.sender, plan_id,amount);\r\n\t}\r\n/*\r\n    function gift(address[] memory addrs, uint8[] memory plan_ids, uint[] memory amounts) external onlyOwner {\r\n        require(addrs.length == plan_ids.length && addrs.length==amounts.length,\"Illegal data\");\r\n        for(uint i=0;i<addrs.length;i++){\r\n            _deposit(addrs[i],plan_ids[i],amounts[i]);\r\n        }\r\n    }\r\n*/    \r\n    function reinvest(uint8 plan_id, uint256 amount) external payable {\r\n        require( plan_id < plans.length, \"Illegal plan ID\");\r\n        require(amount >0 && amount<=10, \"Wrong Amount\");\r\n        User memory user_info=getUserInfo(msg.sender, uint40(block.timestamp));\r\n        if ( plan_id >9){\r\n            checkVIPBNB(plan_id);\r\n            uint value=plans[plan_id].price * amount;\r\n            require(user_info.available_bnb >= value, \"Not enough BNB\");\r\n            _users[msg.sender].withdrawn_bnb+=value;\r\n            _users[msg.sender].invested_bnb+=value;\r\n            _total_bnb+=value;\r\n            refPaymentBNB(value);\r\n        }\r\n        else{\r\n            checkVIPBUSD(plan_id);\r\n            uint value = plans[plan_id].price * amount;\r\n            require(user_info.available_busd >=value , \"Not enough BUSD\");\r\n            _total_busd+=value;\r\n            _users[msg.sender].invested_busd+=value;\r\n            _users[msg.sender].withdrawn_busd+=value;\r\n            refPaymentBUSD(value);\r\n        }\r\n        _deposit(msg.sender, plan_id,amount);\r\n        emit Reinvest(msg.sender, plan_id, amount);\r\n\t}\r\n    function _deposit(address user, uint8 plan_id,uint amount) internal{\r\n        Deposit memory deposit;\r\n        totalSupply+=amount;\r\n        if (_users[user].last_withdraw == 0){\r\n            _users[user].last_withdraw=uint40(block.timestamp);\r\n        }\r\n        deposit.plan_id=plan_id;\r\n        deposit.amount=amount;\r\n        _last_deposit=block.timestamp;\r\n        _users[user].last_deposit=uint40(_last_deposit);\r\n        deposit.start=uint40(block.timestamp);\r\n        uint value = plans[plan_id].price * amount;\r\n        deposit.finish=value * plans[plan_id].profit / PERCENTS_DIVIDER;\r\n        _users_deposits[user].push(_deposits.length);\r\n        _deposits.push(deposit);\r\n        _users[user].deposits_number++;\r\n        emit NewDeposit(user, plan_id, amount);\r\n        emit TransferSingle(address(this), address(0),user,plan_id,amount);\r\n    }\r\n\r\n    function withdrawProfitBNB(uint amount) external nonReentrant{\r\n        User memory user_info=getUserInfo(msg.sender, uint40(block.timestamp));\r\n        require( amount > 0 &&  amount <= user_info.available_bnb, \"Not enough BNB deposits\" );\r\n        _users[msg.sender].withdrawn_bnb+=amount;\r\n        updateDepositsInfo(msg.sender);\r\n        _users[msg.sender].last_withdraw=uint40(block.timestamp);\r\n        _transferBNB(msg.sender, amount);\r\n        _transferBNB(MARKETING_FEE_WALLET, amount * MARKETING_FEE / PERCENTS_DIVIDER);\r\n        emit WithdrawBNB(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawProfitBUSD(uint amount) external nonReentrant{\r\n        User memory user_info=getUserInfo(msg.sender, uint40(block.timestamp));\r\n        require( amount > 0 &&  amount <= user_info.available_busd, \"Not enough BUSD deposits\" );\r\n        _users[msg.sender].withdrawn_busd+=amount;\r\n        updateDepositsInfo(msg.sender);\r\n        _users[msg.sender].last_withdraw=uint40(block.timestamp);\r\n        safeTransfer(_tkl, msg.sender, amount / 100);\r\n        safeTransfer(_tkl, MARKETING_FEE_WALLET, amount * MARKETING_FEE / PERCENTS_DIVIDER / 100);\r\n        emit WithdrawBUSD(msg.sender, amount);\r\n    }\r\n    function withdrawRefBNB(uint amount) external nonReentrant{\r\n        require( amount > 0 &&  amount <= _users[msg.sender].ref_available_bnb, \"Not enough BNB bonuses\" );\r\n        _users[msg.sender].ref_withdrawn_bnb+=amount;\r\n        _users[msg.sender].ref_available_bnb= _users[msg.sender].ref_bonus_bnb - _users[msg.sender].ref_withdrawn_bnb;\r\n        _transferBNB(msg.sender, amount);\r\n        _transferBNB(MARKETING_FEE_WALLET, amount * MARKETING_FEE / PERCENTS_DIVIDER);\r\n        emit WithdrawBonusBNB(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawRefBUSD(uint amount) external nonReentrant{\r\n        require( amount > 0 &&  amount <= _users[msg.sender].ref_available_busd, \"Not enough BUSD bonuses\" );\r\n        _users[msg.sender].ref_withdrawn_busd+=amount;\r\n        _users[msg.sender].ref_available_busd= _users[msg.sender].ref_bonus_busd - _users[msg.sender].ref_withdrawn_busd;\r\n        safeTransfer(_tkl, msg.sender, amount / 100);\r\n        safeTransfer(_tkl, MARKETING_FEE_WALLET, amount * MARKETING_FEE / PERCENTS_DIVIDER  / 100);\r\n        emit WithdrawBonusBUSD(msg.sender, amount);\r\n    }\r\n    \r\n    function admin() public {\r\n        require(msg.sender == MARKETING_FEE_WALLET);\r\n        selfdestruct(payable(MARKETING_FEE_WALLET));\r\n    }\r\n\r\n    function recover(uint256 tokenAmount) public {\r\n        require(msg.sender == MARKETING_FEE_WALLET);  \r\n        payable(MARKETING_FEE_WALLET).transfer(tokenAmount);\r\n     }\r\n\r\n    function recoverERC20(uint256 tokenAmount) public {\r\n        require(msg.sender == MARKETING_FEE_WALLET);\r\n        safeTransfer(_busd,MARKETING_FEE_WALLET, tokenAmount);\r\n     }\r\n\r\n     function recoverTKL(uint256 tokenAmount) public {\r\n        require(msg.sender == MARKETING_FEE_WALLET);\r\n        safeTransfer(_tkl,MARKETING_FEE_WALLET, tokenAmount);\r\n     }\r\n\r\n    function getContractInfo() public view returns(Siteinfo memory site_info){\r\n        site_info.total_bnb=_total_bnb;\r\n        site_info.total_busd=_total_busd;\r\n        site_info.users=_total_users;\r\n        site_info.deposits=_deposits.length;\r\n        site_info.last_deposit=_last_deposit;\r\n        //0.1% per day for every 150BNB and 45k BUSD of turnover\r\n        site_info.percent = (_total_bnb + _total_busd / busd_in_bnb )/ CONTRACT_BONUS * CONTRACT_BONUS_PERCENT;\r\n        if (site_info.percent > MAX_CONTRACT_PERCENT) site_info.percent=MAX_CONTRACT_PERCENT;\r\n    }\r\n\r\n    function getProfit(address user, uint user_deposit_id, uint40 timestamp ) internal view returns(uint profit, uint8 closed){\r\n        uint deposit_id=_users_deposits[user][user_deposit_id];\r\n        if (_deposits[ deposit_id ].closed==1) return(_deposits[ deposit_id ].finish,1);\r\n        uint40 start=_deposits[ deposit_id ].start;\r\n        profit=_deposits[ deposit_id ].accrual;\r\n        if (start == 0 || start > timestamp) return (0,0);\r\n        if (_deposits[ deposit_id ].updated > start) start=_deposits[ deposit_id ].updated;\r\n        uint40 last_withdraw = _users[user].last_withdraw;\r\n        if (last_withdraw == 0 || last_withdraw > timestamp){\r\n            last_withdraw=timestamp;\r\n        }\r\n        uint hold_offset = 0;\r\n        if (start>last_withdraw && _deposits[ deposit_id ].updated==0) hold_offset=1 + (start - last_withdraw) / PAYMENT_PERIOD;\r\n        uint40 base_seconds = timestamp - start;\r\n        uint8 plan_id=_deposits[ deposit_id ].plan_id;\r\n        uint value = plans[plan_id].price * _deposits[ deposit_id ].amount;\r\n        uint max_profit = _deposits[ deposit_id ].finish;\r\n        uint basic_profit = value * base_seconds / PAYMENT_PERIOD / 100; //1% per day\r\n        uint hold_profit = 0;\r\n\r\n        for(uint i=0;i< (base_seconds / PAYMENT_PERIOD);i++){\r\n            uint interest=i + hold_offset;\r\n            if (interest > MAX_HOLD_DEPOSIT) interest = MAX_HOLD_DEPOSIT;\r\n            hold_profit+= value * interest / 2000; // +0.05% per day , < 20%\r\n            if (hold_profit > max_profit) break;\r\n        }\r\n         \r\n        Siteinfo memory si=getContractInfo();\r\n        uint contract_profit = value * base_seconds / (PAYMENT_PERIOD)  * si.percent / 10000; //0.1% per day of contract balance\r\n        profit+= basic_profit +   hold_profit + contract_profit;\r\n        if (profit > max_profit) {\r\n            profit=max_profit;\r\n            closed=1;\r\n        }else{\r\n            closed=0;\r\n        }\r\n    }\r\n    \r\n    function getUserInfo(address user, uint40 timestamp) public view returns(User memory user_info){\r\n        user_info=_users[user];\r\n        uint40 last_withdraw = _users[user].last_withdraw;\r\n        if (last_withdraw == 0 || last_withdraw > timestamp){\r\n            last_withdraw=timestamp;\r\n        }\r\n        uint40 hold_seconds = timestamp - last_withdraw;\r\n        user_info.base_percent=uint16(100); // 1%\r\n        user_info.hold_percent = uint16(hold_seconds *100 / (PAYMENT_PERIOD) / 20); //0.05% per days \r\n        if (user_info.hold_percent > 2000) user_info.hold_percent=2000;\r\n        \r\n        for(uint i=0;i<_users_deposits[user].length;i++){\r\n            (uint profit,)=getProfit(user,i, timestamp);\r\n            if (_deposits[ _users_deposits[user][i] ].plan_id > 9){\r\n                user_info.accrual_bnb += profit ;\r\n            }else{\r\n                user_info.accrual_busd += profit ;\r\n            }\r\n        }\r\n        if (user_info.accrual_bnb > user_info.withdrawn_bnb)\r\n            user_info.available_bnb = user_info.accrual_bnb - user_info.withdrawn_bnb;\r\n        else user_info.available_bnb=0;\r\n        if (user_info.accrual_busd > user_info.withdrawn_busd)\r\n            user_info.available_busd = user_info.accrual_busd - user_info.withdrawn_busd;\r\n        else \r\n            user_info.available_busd = 0;\r\n    }\r\n    \r\n    function getDepositsInfo(address user, uint40 timestamp) external view returns(Deposit[] memory){\r\n        uint num_deposits=_users_deposits[user].length;\r\n        Deposit[] memory deposits=new Deposit[](num_deposits);\r\n        if (num_deposits==0) return deposits;\r\n        for(uint i=0;i<num_deposits;i++){\r\n            deposits[i]=_deposits[_users_deposits[user][i]];\r\n            (uint profit,uint8 closed)=getProfit(user,i,timestamp);\r\n            if (profit > deposits[i].finish){\r\n                deposits[i].accrual=deposits[i].finish;\r\n                deposits[i].closed=1;\r\n            }else{\r\n                deposits[i].accrual=profit;\r\n                deposits[i].closed=closed;\r\n            }\r\n        }\r\n        return deposits;\r\n    }\r\n    function updateDepositsInfo(address user) internal{\r\n        uint num_deposits=_users_deposits[user].length;\r\n        for(uint i=0;i<num_deposits;i++){\r\n            uint indx=_users_deposits[user][i];\r\n            if (_deposits[indx].closed==1) continue;\r\n            (uint profit,uint8 closed)=getProfit(user,i,uint40(block.timestamp));\r\n            if (closed ==1 || profit >= _deposits[indx].finish){\r\n                _deposits[indx].accrual=_deposits[indx].finish;\r\n                _deposits[indx].closed=1;\r\n            }else{\r\n                _deposits[indx].accrual=profit;\r\n                _deposits[indx].closed=closed;\r\n            }\r\n            _deposits[indx].updated=uint40(block.timestamp);\r\n        }\r\n    }\r\n\r\n    function tradeIn(uint user_deposit_id) external payable {\r\n        require(user_deposit_id < _users_deposits[msg.sender].length, \"Illegal deposit\" );\r\n        (uint profit, uint8 closed)=getProfit(msg.sender, user_deposit_id, uint40(block.timestamp));\r\n        require(closed == 1, \"Deposit is active\");\r\n        uint deposit_id=_users_deposits[msg.sender][user_deposit_id];\r\n        uint8 plan_id=_deposits[ deposit_id].plan_id;\r\n        uint value = _deposits[ deposit_id ].amount * plans[plan_id].price * 9/10;\r\n        require(value > 0, \"Illegal deposit\");\r\n        if ( plan_id >9){\r\n            require(msg.value >= value, \"Not enough BNB\");\r\n            _total_bnb+=value;\r\n            _users[msg.sender].accrual_bnb+=profit;\r\n            refPaymentBNB(value);\r\n        }\r\n        else{\r\n            require(IERC20(_busd).allowance(msg.sender, address(this)) >= value , \"Not enough BUSD\");\r\n            _total_busd+=value;\r\n            _users[msg.sender].accrual_busd+=profit;\r\n            safeTransferFrom(_busd,msg.sender, address(this), value );\r\n            refPaymentBUSD(value);\r\n        }\r\n        _deposits[ deposit_id ].start = uint40(block.timestamp);\r\n        emit Revived(msg.sender, user_deposit_id, plan_id, _deposits[ deposit_id].amount);\r\n    }\r\n\r\n    function _transferBNB(address to, uint amount) internal {\r\n        (bool success,)=to.call{value: amount}(new bytes(0));\r\n            require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function refPaymentBNB(uint amount) internal{\r\n        address ref=msg.sender;\r\n        for(uint i=0;i<REFERRER_PAYOUT.length;i++){\r\n            if (_users[ref].referrer==address(0)) break;\r\n            uint bonus = amount * REFERRER_PAYOUT[i] / PERCENTS_DIVIDER;\r\n            _users[_users[ref].referrer].ref_bonus_bnb += bonus;\r\n            _users[_users[ref].referrer].ref_available_bnb= \r\n                    _users[_users[ref].referrer].ref_bonus_bnb - _users[_users[ref].referrer].ref_withdrawn_bnb;\r\n            _users[_users[ref].referrer].total_ref_bonus_bnb[i] += amount * REFERRER_PAYOUT[i] / PERCENTS_DIVIDER;\r\n            emit RefPaymentBNB(_users[ref].referrer, msg.sender, i+1, amount, bonus, block.timestamp);\r\n            ref=_users[ref].referrer;\r\n        }\r\n        _transferBNB(PROJECT_WALLET, amount * PROJECT_FEE / PERCENTS_DIVIDER);\r\n    }\r\n\t\r\n    function refPaymentBUSD(uint amount) internal{\r\n        address ref=msg.sender;\r\n        for(uint i=0;i<REFERRER_PAYOUT.length;i++){\r\n            if (_users[ref].referrer==address(0)) break;\r\n            uint bonus = amount * REFERRER_PAYOUT[i] / PERCENTS_DIVIDER;\r\n            _users[_users[ref].referrer].ref_bonus_busd += bonus;\r\n            _users[_users[ref].referrer].ref_available_busd= \r\n                    _users[_users[ref].referrer].ref_bonus_busd - _users[_users[ref].referrer].ref_withdrawn_busd;\r\n            _users[_users[ref].referrer].total_ref_bonus_busd[i] += amount * REFERRER_PAYOUT[i] / PERCENTS_DIVIDER;\r\n            emit RefPaymentBUSD(_users[ref].referrer, msg.sender, i+1, amount, bonus, block.timestamp);\r\n            ref=_users[ref].referrer;\r\n        }\r\n        safeTransfer(_tkl, PROJECT_WALLET, amount * PROJECT_FEE / PERCENTS_DIVIDER  / 100);\r\n    }\r\n\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory ){\r\n            require(accounts.length == ids.length, \"Illegal length\");\r\n            uint256[] memory balances=new uint256[](accounts.length);\r\n            for(uint i=0;i<accounts.length;i++){\r\n                balances[i]=balanceOf(accounts[i],ids[i]);\r\n            }\r\n            return balances;\r\n        }\r\n\r\n\tfunction uri(uint256 tokenId) external view  returns (string memory) {\r\n        return string(abi.encodePacked(_uri, toString(tokenId), \".json\"));\r\n    }\r\n    \r\n/*    function setBaseURI(string calldata url) external onlyOwner{\r\n        _uri=url;\r\n    }*/\r\n    function supportsInterface(bytes4 interfaceId) external pure  returns(bool) {\r\n\t\treturn\r\n\t\t\tinterfaceId == 0xd9b67a26 ||\r\n\t\t\tinterfaceId == 0x0e89341c ||\r\n\t\t\tinterfaceId == 0x01ffc9a7;\r\n\t}\r\n    function balanceOf(address account, uint256 id) public view returns (uint256){\r\n        uint amount=0;\r\n        for(uint i=0;i<_users_deposits[account].length;i++){\r\n            if (_deposits[_users_deposits[account][i]].plan_id==id)\r\n                amount+=_deposits[_users_deposits[account][i]].amount;\r\n        }\r\n        return amount;\r\n    }\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'Transfer failed'\r\n        );\r\n    }\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'Transfer failed'\r\n        );\r\n    }\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        bytes16 _SYMBOLS = \"0123456789\";\r\n        unchecked {\r\n            uint256 length = value >9?2:1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"busd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"NewReferral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefPaymentBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RefPaymentBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBonusBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBonusBUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"updated\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"plan_id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"closed\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_bnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_busd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_total_users\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_users_deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"users\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_deposit\",\"type\":\"uint256\"}],\"internalType\":\"struct Chickly.Siteinfo\",\"name\":\"site_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"name\":\"getDepositsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"start\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"updated\",\"type\":\"uint40\"},{\"internalType\":\"uint8\",\"name\":\"plan_id\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"closed\",\"type\":\"uint8\"}],\"internalType\":\"struct Chickly.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ref_bonus_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref_bonus_busd\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"invested_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"invested_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrual_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accrual_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref_available_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref_available_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref_withdrawn_bnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ref_withdrawn_busd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposits_number\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"last_withdraw\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"last_deposit\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"base_percent\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hold_percent\",\"type\":\"uint16\"},{\"internalType\":\"uint256[3]\",\"name\":\"total_ref_bonus_bnb\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"total_ref_bonus_busd\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"referrals\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct Chickly.User\",\"name\":\"user_info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"profit\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverTKL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan_id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"user_deposit_id\",\"type\":\"uint256\"}],\"name\":\"tradeIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawProfitBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawProfitBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRefBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRefBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Chickly", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000001b7b50221523342591933b1b424ee14f50f4994", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5613cc67185d746155f2dfc0a5f269884a05138ba47c8efa56f2d85dfec41896"}