{"SourceCode": "{\"Administrable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\u0027./Claimable.sol\\u0027;\\n\\ncontract Administrable is Claimable {\\n    mapping(address =\\u003e bool) public isAdmin;\\n\\n    event AdminAppointed(address admin);\\n    event AdminDismissed(address admin);\\n\\n    constructor() {\\n        isAdmin[owner] = true;\\n\\n        emit AdminAppointed(owner);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\u0027NOT_AN_ADMIN\\u0027);\\n        _;\\n    }\\n\\n    function appointAdmin(address _newAdmin) public onlyContractOwner() returns (bool success) {\\n        if (isAdmin[_newAdmin] == false) {\\n            isAdmin[_newAdmin] = true;\\n        }\\n\\n        emit AdminAppointed(_newAdmin);\\n        return true;\\n    }\\n\\n    function dismissAdmin(address _admin) public onlyContractOwner() returns (bool success) {\\n        isAdmin[_admin] = false;\\n\\n        emit AdminDismissed(_admin);\\n        return true;\\n    }\\n}\\n\"},\"BEP20.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./Administrable.sol\\u0027;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract BEP20 is IBEP20, Administrable {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowed;\\n\\n    uint256 private _totalSupply;\\n\\n    uint256 private _totalBurnt;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    function totalBurnt() public view returns (uint256) {\\n        return _totalBurnt;\\n    }\\n\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function transfer(address to, uint256 value) public virtual override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        require(spender != address(0), \\u0027spender cannot be address(0)\\u0027);\\n\\n        _allowed[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override returns (bool) {\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n        _transfer(from, to, value);\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        require(spender != address(0), \\u0027spender cannot be address(0)\\u0027);\\n\\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        require(spender != address(0), \\u0027spender cannot be address(0)\\u0027);\\n\\n        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(from != address(0), \\u0027from cannot be address(0)\\u0027);\\n        require(to != address(0), \\u0027to cannot be address(0)\\u0027);\\n\\n        _balances[from] = _balances[from].sub(value);\\n        _balances[to] = _balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address account, uint256 value) internal {\\n        require(account != address(0), \\u0027account cannot be address(0)\\u0027);\\n\\n        _totalSupply = _totalSupply.add(value);\\n        _balances[account] = _balances[account].add(value);\\n        emit Transfer(address(0), account, value);\\n    }\\n\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\u0027account cannot be address(0)\\u0027);\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n\\n        _totalBurnt = _totalBurnt.add(value);\\n\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n        _burn(account, value);\\n    }\\n}\\n\"},\"CentricSwap.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nimport \\u0027./SafeMath.sol\\u0027;\\nimport \\u0027./BEP20.sol\\u0027;\\n\\ncontract CentricSwap is BEP20 {\\n    using SafeMath for uint256;\\n\\n    address public riseContract;\\n\\n    constructor(address _mintSaver) BEP20(\\u0027Centric SWAP\\u0027, \\u0027CNS\\u0027, 8) {\\n        _mint(_mintSaver, 0);\\n    }\\n\\n    modifier onlyRise() {\\n        require(msg.sender == riseContract, \\u0027CALLER_MUST_BE_RISE_CONTRACT_ONLY\\u0027);\\n        _;\\n    }\\n\\n    function setRiseContract(address _riseContractAddress) external onlyContractOwner() {\\n        require(_riseContractAddress != address(0), \\u0027RISE_CONTRACT_CANNOTBE_NULL_ADDRESS\\u0027);\\n        require(riseContract == address(0), \\u0027RISE_CONTRACT_ADDRESS_IS_ALREADY_SET\\u0027);\\n        riseContract = _riseContractAddress;\\n    }\\n\\n    function mintFromRise(address to, uint256 value) external onlyRise returns (bool _success) {\\n        _mint(to, value);\\n        return true;\\n    }\\n\\n    function burnFromRise(address tokensOwner, uint256 value)\\n        external\\n        virtual\\n        onlyRise\\n        returns (bool _success)\\n    {\\n        _burn(tokensOwner, value);\\n        return true;\\n    }\\n}\\n\"},\"Claimable.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nabstract contract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return (owner == msg.sender);\\n    }\\n\\n    modifier onlyContractOwner() {\\n        require(isOwner(), \\u0027Not a contract owner\\u0027);\\n        _;\\n    }\\n}\\n\\ncontract Claimable is Ownable {\\n    address public pendingOwner;\\n\\n    function transferOwnership(address _newOwner) public onlyContractOwner() {\\n        pendingOwner = _newOwner;\\n    }\\n\\n    function claimOwnership() public {\\n        require(msg.sender == pendingOwner, \\u0027Not a pending owner\\u0027);\\n\\n        address previousOwner = owner;\\n        owner = msg.sender;\\n        pendingOwner = address(0);\\n\\n        emit OwnershipTransferred(previousOwner, msg.sender);\\n    }\\n}\\n\"},\"DateLib.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\nlibrary DateLib {\\n    uint256 constant DAY_IN_SECONDS = 86400;\\n    uint256 constant YEAR_IN_SECONDS = 31536000;\\n    uint256 constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n    uint16 constant ORIGIN_YEAR = 1970;\\n\\n    function getHoursInMonth(uint256 _timestamp) internal pure returns (uint256) {\\n        uint256 timestamp = _timestamp / 1000;\\n\\n        uint256 secondsAccountedFor = 0;\\n        uint256 buf;\\n        uint8 i;\\n\\n        uint16 year;\\n        uint8 month;\\n\\n        // Year\\n        year = _getYear(timestamp);\\n        buf = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - buf);\\n\\n        // Month\\n        uint256 secondsInMonth;\\n        for (i = 1; i \\u003c= 12; i++) {\\n            secondsInMonth = DAY_IN_SECONDS * _getDaysInMonth(i, year);\\n            if (secondsInMonth + secondsAccountedFor \\u003e timestamp) {\\n                month = i;\\n                break;\\n            }\\n            secondsAccountedFor += secondsInMonth;\\n        }\\n\\n        return (_getDaysInMonth(month, year) * 24);\\n    }\\n\\n    function _getDaysInMonth(uint8 _month, uint16 _year) private pure returns (uint256) {\\n        if (\\n            _month == 1 ||\\n            _month == 3 ||\\n            _month == 5 ||\\n            _month == 7 ||\\n            _month == 8 ||\\n            _month == 10 ||\\n            _month == 12\\n        ) {\\n            return 31;\\n        } else if (_month == 4 || _month == 6 || _month == 9 || _month == 11) {\\n            return 30;\\n        } else if (isLeapYear(_year)) {\\n            return 29;\\n        } else {\\n            return 28;\\n        }\\n    }\\n\\n    function _getYear(uint256 _timestamp) private pure returns (uint16) {\\n        uint256 secondsAccountedFor = 0;\\n        uint16 year;\\n        uint256 numLeapYears;\\n\\n        // Year\\n        year = uint16(ORIGIN_YEAR + _timestamp / YEAR_IN_SECONDS);\\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n        while (secondsAccountedFor \\u003e _timestamp) {\\n            if (isLeapYear(uint16(year - 1))) {\\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n            } else {\\n                secondsAccountedFor -= YEAR_IN_SECONDS;\\n            }\\n            year -= 1;\\n        }\\n        return year;\\n    }\\n\\n    function isLeapYear(uint16 _year) private pure returns (bool) {\\n        if (_year % 4 != 0) {\\n            return false;\\n        }\\n        if (_year % 100 != 0) {\\n            return true;\\n        }\\n        if (_year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function leapYearsBefore(uint256 _year) private pure returns (uint256) {\\n        uint256 year = _year - 1;\\n        return year / 4 - year / 100 + year / 400;\\n    }\\n}\\n\"},\"RoundMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\n/// @dev Math operations with safety checks that revert on error\\nlibrary RoundMath {\\n    /// @dev Integer division of two numbers rounding the quotient, reverts on division by zero.\\n    function roundDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\u0027DIVIDING_ERROR\\u0027);\\n        uint256 c = (((a * 10) / b) + 5) / 10;\\n        return c;\\n    }\\n\\n    /// @dev Integer division of two numbers ceiling the quotient, reverts on division by zero.\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\u0027DIVIDING_ERROR\\u0027);\\n        uint256 c = a / b;\\n        if (a % b \\u003e 0) {\\n            c = c + 1;\\n        }\\n        return c;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.7.6;\\n\\n/// @dev Math operations with safety checks that revert on error\\nlibrary SafeMath {\\n    /// @dev Multiplies two numbers, reverts on overflow.\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\u0027MUL_ERROR\\u0027);\\n\\n        return c;\\n    }\\n\\n    /// @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\u0027DIVIDING_ERROR\\u0027);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    /// @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\u0027SUB_ERROR\\u0027);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /// @dev Adds two numbers, reverts on overflow.\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\u0027ADD_ERROR\\u0027);\\n        return c;\\n    }\\n\\n    /// @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when dividing by zero.\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\u0027MOD_ERROR\\u0027);\\n        return a % b;\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintSaver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAppointed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminDismissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"appointAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokensOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFromRise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"dismissAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintFromRise\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riseContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_riseContractAddress\",\"type\":\"address\"}],\"name\":\"setRiseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CentricSwap", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001ea71306849a189e17d00668eea81416e2f6d19d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://646781d93e14b06edf16f5fc580f5c83a5320f782c394d71fc8eb250308ba237"}