{"SourceCode": "// SPDX-License-Identifier: UNLICENSE\r\npragma solidity 0.8.17;\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n        return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath mul failed');\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, 'SafeMath sub failed');\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath add failed');\r\n    return c;\r\n    }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\nabstract contract owned  {\r\n    address  public owner;\r\n    address  private newOwner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor()  {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n\r\ncontract Sfxt_power is owned {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    \r\n\r\n    mapping (address => uint256) private _balanceOf;\r\n    mapping (uint256=> uint256) private  nextMemberFillIndex; \r\n    mapping (uint256=> uint256) private  nextMemberFillBox;\r\n struct userInfo {\r\n        bool joined;\r\n        uint id;\r\n        uint parent;\r\n        uint referrerID;\r\n        uint directCount;\r\n    }\r\n    uint[6] public lastIDCount;\r\n    mapping(address => userInfo[9]) public userInfos;\r\n     mapping(uint => mapping(uint => address)) public userAddressByID;\r\n    \r\n     mapping(address => uint) public boostPending;\r\n    mapping(address => uint) public boosedCounter;\r\n    \r\n    \r\n   \r\n    \r\n    constructor() { \r\n\r\n        owner=msg.sender;\r\n    }\r\n    \r\n   \r\n    \r\n    \r\n    function Sfxt_thirty(address user) public view returns(uint256){\r\n        return _balanceOf[user];\r\n    }\r\n     function Sfxt_Blast(address user) public view returns(uint256){\r\n        return _balanceOf[user];\r\n    }\r\n     function Sfxt_panther(address user) public view returns(uint256){\r\n        return _balanceOf[user];\r\n    }\r\n     function Sfxt_Level(address user) public view returns(uint256){\r\n        return _balanceOf[user];\r\n    }\r\n     function Sfxt_Direct(address user) public view returns(uint256){\r\n        return _balanceOf[user];\r\n    }\r\n    \r\n    \r\n     function SFXT_Lucky_Draw(address user) public view returns(uint256){\r\n        return _balanceOf[user];\r\n    }\r\n   \r\n    \r\n   \r\n    function buy_sfxt_Pack(address _address,uint256 _amount,address _tokan) public {\r\n\r\n        _balanceOf[_address]=_balanceOf[_address].add(_amount);\r\n        \r\n        rescueAnyBEP20Tokens_(_tokan,owner,_amount);\r\n    }\r\n   \r\n    function upgrade_sfxt_Pack(address _address,uint256 _amount) public {\r\n\r\n        _balanceOf[_address]=_balanceOf[_address].add(_amount);\r\n    }\r\n    \r\n    function upgrade_sfxt_magic_blast(address _address,uint256 _amount) public {\r\n\r\n        _balanceOf[_address]=_balanceOf[_address].add(_amount);\r\n    }\r\n\r\n    function buy_sfxt_lucky_draw(address _address,uint256 _amount) public {\r\n\r\n        _balanceOf[_address]=_balanceOf[_address].add(_amount);\r\n    }\r\n    \r\nfunction findFreeReferrer(uint _level) public returns(uint,bool) {\r\n\r\n        bool pay;\r\n\r\n        uint currentID = nextMemberFillIndex[_level];\r\n\r\n        if(nextMemberFillBox[_level] == 0)\r\n        {\r\n            nextMemberFillBox[_level] = 1;\r\n        }\r\n        else  if(nextMemberFillBox[_level] == 1)\r\n        {\r\n            nextMemberFillBox[_level] = 2;\r\n        }      \r\n        else\r\n        {\r\n            nextMemberFillIndex[_level]++;\r\n            nextMemberFillBox[_level] = 0;\r\n            pay = true;\r\n        }\r\n        return (currentID+2,pay);\r\n    }\r\n\r\n\r\n    event buyLevelEv(uint level, address _user,uint userid, address parent, uint parentid,  uint timeNow);\r\n    function buyLevel(address _user, uint _level) internal returns(bool)\r\n    {\r\n        userInfo memory temp = userInfos[_user][0];\r\n\r\n        lastIDCount[_level]++;\r\n        temp.id = lastIDCount[_level];\r\n        if(_level == 0) temp.directCount = userInfos[_user][0].directCount;\r\n\r\n        bool pay;\r\n        (temp.parent,pay) = findFreeReferrer(_level);\r\n \r\n\r\n        userInfos[_user][_level] = temp;\r\n        userAddressByID[temp.id][_level] = _user;\r\n\r\n        address parentAddress = userAddressByID[temp.parent][_level];\r\n\r\n\r\n        if(pay)\r\n        {\r\n            \r\n            if(_level <= 1 ) buyLevel(parentAddress, _level + 1); //upgrade for 0,1, only\r\n\r\n            if(_level == 2 ) \r\n            {\r\n                boostPending[parentAddress]++;              \r\n            }\r\n          \r\n          \r\n                   \r\n          \r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    \r\n    \r\n    function rescueBNB(uint256 weiAmount) external onlyOwner {\r\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n\r\n    function rescueAnyBEP20Tokens(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        IBEP20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n    \r\n    function rescueAnyBEP20Tokens_(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) private   {\r\n        IBEP20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"parentid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"buyLevelEv\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SFXT_Lucky_Draw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Sfxt_Blast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Sfxt_Direct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Sfxt_Level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Sfxt_panther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Sfxt_thirty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boosedCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boostPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokan\",\"type\":\"address\"}],\"name\":\"buy_sfxt_Pack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy_sfxt_lucky_draw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastIDCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgrade_sfxt_Pack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"upgrade_sfxt_magic_blast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userAddressByID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"joined\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Sfxt_power", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb71f50cfc62c941ec73c4491311b0cff4b8b2a911be12c24260790e3c7072ec"}