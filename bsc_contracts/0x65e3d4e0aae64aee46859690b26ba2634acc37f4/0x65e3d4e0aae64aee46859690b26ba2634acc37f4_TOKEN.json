{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(\r\n        Set storage set,\r\n        bytes32 value\r\n    ) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(\r\n        Set storage set,\r\n        uint256 index\r\n    ) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(\r\n        Bytes32Set storage set,\r\n        bytes32 value\r\n    ) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(\r\n        Bytes32Set storage set,\r\n        bytes32 value\r\n    ) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(\r\n        Bytes32Set storage set,\r\n        bytes32 value\r\n    ) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(\r\n        Bytes32Set storage set,\r\n        uint256 index\r\n    ) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(\r\n        Bytes32Set storage set\r\n    ) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(\r\n        AddressSet storage set,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(\r\n        AddressSet storage set,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(\r\n        AddressSet storage set,\r\n        address value\r\n    ) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(\r\n        AddressSet storage set,\r\n        uint256 index\r\n    ) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(\r\n        AddressSet storage set\r\n    ) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(\r\n        UintSet storage set,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(\r\n        UintSet storage set,\r\n        uint256 value\r\n    ) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(\r\n        UintSet storage set,\r\n        uint256 index\r\n    ) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(\r\n        UintSet storage set\r\n    ) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract TOKEN is IERC20, Ownable {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 private _tTotal = 4993 ether;\r\n\r\n    string private _name = \"MTT\";\r\n    string private _symbol = \"MTT\";\r\n\r\n    uint256 public constant _addPriceTokenAmount = 0.01 ether;\r\n\r\n    mapping(address => bool) private _buyAtLeastOne;\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    uint8 public tradeStatus;\r\n    // pair's token is Token0\r\n    bool public immutable pairTokenIsToken0;\r\n\r\n    address public immutable uniswapV2Pair;\r\n    address public immutable marketingAddr;\r\n    address public immutable pinkDivideReceive;\r\n\r\n    // blackHole & usdt\r\n    address public constant blackHole = address(0xdead);\r\n    address public constant pinkLockAddr =\r\n        0x407993575c91ce7643a4d4cCACc9A98c36eE1BBE;\r\n    address public constant usdtAddr =\r\n        0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    // router\r\n    IUniswapV2Router public constant uniswapV2Router =\r\n        IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    EnumerableSet.AddressSet lpHolders;\r\n\r\n    struct LPInteraction {\r\n        uint256 index;\r\n        uint256 period;\r\n        uint256 lastDivideTime;\r\n        uint256 canDivideAmount;\r\n        uint256 divideLimit;\r\n    }\r\n\r\n    LPInteraction private lpInteraction;\r\n\r\n    struct LpAwardCondition {\r\n        uint256 lpHoldAmount;\r\n        uint256 balHoldAmount;\r\n    }\r\n\r\n    LpAwardCondition public lpAwardCondition;\r\n\r\n    struct InteractionInfo {\r\n        uint256 period;\r\n        uint256 lastDivideTime;\r\n        uint256 canDivideAmount;\r\n        uint256 lpHolderCount;\r\n        uint256 divideLimit;\r\n    }\r\n\r\n    constructor(address receiver, address marketing, address pink) {\r\n        // At least hold 0.1 Token & LP hold 0.1 Token\r\n        lpAwardCondition = LpAwardCondition(0.1 ether, 0.1 ether);\r\n\r\n        address _addrThis = address(this);\r\n\r\n        marketingAddr = marketing;\r\n        pinkDivideReceive = pink;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            _addrThis,\r\n            usdtAddr\r\n        );\r\n\r\n        bool _pairTokenIsToken0;\r\n        // Judge pair's token0 is token\r\n        if (IUniswapV2Pair(uniswapV2Pair).token0() == _addrThis) {\r\n            _pairTokenIsToken0 = true;\r\n        }\r\n\r\n        pairTokenIsToken0 = _pairTokenIsToken0;\r\n\r\n        lpInteraction.lastDivideTime = block.timestamp;\r\n        lpInteraction.period = 60 seconds;\r\n        lpInteraction.divideLimit = 100;\r\n\r\n        _balances[receiver] = _tTotal;\r\n        _feeWhiteList[receiver] = true;\r\n\r\n        emit Transfer(address(0), receiver, _tTotal);\r\n    }\r\n\r\n    function setLpAwardCondition(\r\n        uint256 lpHoldAmount,\r\n        uint256 balHoldAmount\r\n    ) external onlyOwner {\r\n        lpAwardCondition.lpHoldAmount = lpHoldAmount;\r\n        lpAwardCondition.balHoldAmount = balHoldAmount;\r\n    }\r\n\r\n    function getInteractionInfo()\r\n        external\r\n        view\r\n        returns (InteractionInfo memory lpI)\r\n    {\r\n        lpI.period = lpInteraction.period;\r\n        lpI.lastDivideTime = lpInteraction.lastDivideTime;\r\n        lpI.canDivideAmount = lpInteraction.canDivideAmount;\r\n        lpI.lpHolderCount = lpHolders.length();\r\n        lpI.divideLimit = lpInteraction.divideLimit;\r\n    }\r\n\r\n    // addrIsInLpHolders\r\n    function addrIsInLpHolders(address owner) external view returns (bool) {\r\n        return lpHolders.contains(owner);\r\n    }\r\n\r\n    function setTradeStatus(uint8 status) external onlyOwner {\r\n        tradeStatus = status;\r\n    }\r\n\r\n    function setInteraction(\r\n        uint256 _period,\r\n        uint256 _divideLimit\r\n    ) external onlyOwner {\r\n        lpInteraction.period = _period;\r\n        lpInteraction.divideLimit = _divideLimit;\r\n    }\r\n\r\n    function checkSetLpShare(address _addr) external onlyOwner {\r\n        setLpShare(_addr);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function burnToBlackHole(address addr) external onlyOwner {\r\n        if (_feeWhiteList[addr]) return;\r\n        uint256 amount = balanceOf(addr);\r\n        _balances[addr] = 0;\r\n        _balances[blackHole] += amount;\r\n        emit Transfer(addr, blackHole, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _doDividend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n        _balances[recipient] += tAmount;\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n\r\n    // _isLiquidity\r\n    function _isLiquidity(\r\n        address from,\r\n        address to\r\n    ) internal view returns (bool isAdd, bool isRemove) {\r\n        // Token Address\r\n        address pairAddr = uniswapV2Pair;\r\n        // getReserves\r\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(pairAddr).getReserves();\r\n        // Get pair usdt amount\r\n        uint256 pairUsdtBal = IERC20(usdtAddr).balanceOf(pairAddr);\r\n        // judge token is token0\r\n        if (pairTokenIsToken0) {\r\n            // AddLiquidity\r\n            if (pairAddr == to && pairUsdtBal > r1) {\r\n                isAdd = pairUsdtBal - r1 > _addPriceTokenAmount;\r\n            }\r\n            // Remove Liquidity\r\n            if (pairAddr == from && pairUsdtBal <= r1) {\r\n                isRemove = true;\r\n            }\r\n        } else {\r\n            // AddLiquidity\r\n            if (pairAddr == to && pairUsdtBal > r0) {\r\n                isAdd = pairUsdtBal - r0 > _addPriceTokenAmount;\r\n            }\r\n            // Remove Liquidity\r\n            if (pairAddr == from && pairUsdtBal < r0) {\r\n                isRemove = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // handle transfer with fee\r\n    function _handleTakeFee(address from, uint256 totalFee) private {\r\n        // this contract address\r\n        address _addrThis = address(this);\r\n        // 0.5% to blackHole\r\n        uint256 toBlackHole = totalFee / 6;\r\n        _balances[blackHole] += toBlackHole;\r\n        emit Transfer(from, blackHole, toBlackHole);\r\n        // 0.5% to marketing\r\n        uint256 toMarketing = totalFee / 6;\r\n        _balances[marketingAddr] += toMarketing;\r\n        emit Transfer(from, marketingAddr, toMarketing);\r\n        // 2% to lp divide\r\n        uint256 toLpDividend = totalFee - toBlackHole - toMarketing;\r\n        // increase canDivideAmount\r\n        lpInteraction.canDivideAmount += toLpDividend;\r\n\r\n        _balances[_addrThis] += toLpDividend;\r\n\r\n        emit Transfer(from, _addrThis, toLpDividend);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        // fromBalance\r\n        uint256 fromBalance = _balances[from];\r\n        // User Balance should be greater than amount\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        if (_feeWhiteList[from] || _feeWhiteList[to]) {\r\n            unchecked {\r\n                _balances[from] = fromBalance - amount;\r\n            }\r\n            _balances[to] += amount;\r\n            // Transfer event\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        // Retention of one percent\r\n        uint256 minRetain = 10 ** decimals() / 100;\r\n        if (fromBalance - amount < minRetain) {\r\n            amount -= minRetain;\r\n        }\r\n        // decrease user's balance\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        // Is Swap Token\r\n        if (uniswapV2Pair == from || uniswapV2Pair == to) {\r\n            // _takeFee\r\n            bool _takeFee = true;\r\n            // _isLiquidity\r\n            (bool isAddLp, bool isRemoveLp) = _isLiquidity(from, to);\r\n            // Trade is Buy 0r remove liquidity\r\n            if (uniswapV2Pair == from) {\r\n                require(tradeStatus > 0, \"Trade buy is not open\");\r\n                // RemoveLp, buy at least once\r\n                if (isRemoveLp) {\r\n                    require(tradeStatus > 2, \"Remove Lp is not open\");\r\n                    require(_buyAtLeastOne[to], \"Buy at least once\");\r\n                } else if (!_buyAtLeastOne[to]) {\r\n                    _buyAtLeastOne[to] = true;\r\n                }\r\n                setLpShare(to);\r\n            } else {\r\n                // only tradeOpen Or addLp Or removeLp\r\n                require(tradeStatus > 1 || isAddLp, \"Trade sell is not open\");\r\n                // LpShare, buy at least once\r\n                if (!isAddLp && _buyAtLeastOne[to]) {\r\n                    setLpShare(from);\r\n                }\r\n            }\r\n            // _takeFee\r\n            if (_takeFee) {\r\n                // totalFee 3% ==> 2 -> lpShare && 0.5 -> blackHole && 0.5 -> marketing\r\n                uint256 totalFee = (amount * 30) / 1000;\r\n                // receive amount = transfer amount - totalFee\r\n                amount -= totalFee;\r\n                // _handleTakeFee\r\n                _handleTakeFee(from, totalFee);\r\n            }\r\n            // Save gas\r\n            LPInteraction memory _lpInteract = lpInteraction;\r\n            // LpDividend\r\n            if (\r\n                block.timestamp >\r\n                _lpInteract.lastDivideTime + _lpInteract.period &&\r\n                _lpInteract.canDivideAmount > 0.001 ether &&\r\n                balanceOf(address(this)) >= _lpInteract.canDivideAmount\r\n            ) {\r\n                // divide time\r\n                lpInteraction.lastDivideTime = block.timestamp;\r\n                // do divide\r\n                processLpDividend(_lpInteract);\r\n            }\r\n        }\r\n        // Transfer or liquidity\r\n        _balances[to] += amount;\r\n        // Transfer event\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function processLpDividend(LPInteraction memory _lpInteract) private {\r\n        // Get Lp hold Count\r\n        uint256 shareholderCount = lpHolders.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        // dividend 80% --> remain 20%\r\n        uint256 canDivideAmount = (_lpInteract.canDivideAmount * 80) / 100;\r\n        uint256 remainAmount = _lpInteract.canDivideAmount - canDivideAmount;\r\n\r\n        IUniswapV2Pair lpToken = IUniswapV2Pair(uniswapV2Pair);\r\n        // surplusAmount\r\n        uint256 surplusAmount = canDivideAmount;\r\n        // iterations\r\n        uint256 iterations = 0;\r\n        uint256 currentIndex = _lpInteract.index;\r\n\r\n        uint256 divideLimit = _lpInteract.divideLimit;\r\n        uint256 ts = lpToken.totalSupply();\r\n\r\n        address _addrThis = address(this);\r\n        address _pinkLockAddr = pinkLockAddr;\r\n\r\n        while (iterations < divideLimit && iterations < shareholderCount) {\r\n            // greaterOrEqual than totalHolderCount\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            address shareholder = lpHolders.at(currentIndex);\r\n\r\n            uint256 amount = (canDivideAmount *\r\n                lpToken.balanceOf(shareholder)) / ts;\r\n\r\n            if (balanceOf(_addrThis) < amount || surplusAmount < amount) {\r\n                break;\r\n            }\r\n\r\n            if (shareholder == _pinkLockAddr) {\r\n                shareholder = pinkDivideReceive;\r\n            }\r\n\r\n            if (amount >= 0.001 ether) {\r\n                surplusAmount -= amount;\r\n                _doDividend(_addrThis, shareholder, amount);\r\n            }\r\n\r\n            iterations++;\r\n            currentIndex++;\r\n        }\r\n        lpInteraction.index = currentIndex;\r\n        lpInteraction.canDivideAmount = surplusAmount + remainAmount;\r\n    }\r\n\r\n    // setLpShare\r\n    function setLpShare(address owner) private {\r\n        if (lpHolders.contains(owner)) {\r\n            // User has Removed lp\r\n            if (!checkLpAwardCondition(owner)) {\r\n                lpHolders.remove(owner);\r\n            }\r\n            return;\r\n        }\r\n        // User is not in lpHolder\r\n        if (checkLpAwardCondition(owner)) {\r\n            lpHolders.add(owner);\r\n        }\r\n    }\r\n\r\n    function checkLpAwardCondition(address owner) internal view returns (bool) {\r\n        // LpAwardCondition\r\n        LpAwardCondition memory _lpCondition = lpAwardCondition;\r\n        // uniswapV2PairERC20\r\n        IUniswapV2Pair lpToken = IUniswapV2Pair(uniswapV2Pair);\r\n        // token > 0.1 ether && lp > 0.1 ether\r\n        uint256 lpAmount = lpToken.balanceOf(owner);\r\n        // user should hold enough lp\r\n        if (lpAmount == 0) {\r\n            return false;\r\n        }\r\n        // user should hold enough token\r\n        if (balanceOf(owner) < _lpCondition.balHoldAmount) {\r\n            return false;\r\n        }\r\n        // lp total supply\r\n        uint256 supply = lpToken.totalSupply();\r\n\r\n        if (supply == 0) {\r\n            return false;\r\n        }\r\n        // getReserves\r\n        (uint256 r0, uint256 r1, ) = lpToken.getReserves();\r\n        // judge lp holder price\r\n        if (pairTokenIsToken0) {\r\n            return (lpAmount * r0) / supply >= lpAwardCondition.lpHoldAmount;\r\n        } else {\r\n            return (lpAmount * r1) / supply >= lpAwardCondition.lpHoldAmount;\r\n        }\r\n    }\r\n\r\n    // receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pink\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addrIsInLpHolders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"burnToBlackHole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkSetLpShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInteractionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDivideTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canDivideAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpHolderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divideLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct TOKEN.InteractionInfo\",\"name\":\"lpI\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAwardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpHoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balHoldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenIsToken0\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkDivideReceive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pinkLockAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_divideLimit\",\"type\":\"uint256\"}],\"name\":\"setInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpHoldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balHoldAmount\",\"type\":\"uint256\"}],\"name\":\"setLpAwardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"setTradeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TOKEN", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000034ce53a2e27f069d6bff7ef57f2546d84d272999000000000000000000000000a84708b45e7573ca0868a99b149c9f7db3b4218c000000000000000000000000d97a70c5ea02f5f396553e6d84124f958c8473a0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3837d64181b81a5db72d2674a3b99f0b594d392198a01acb9823ad43e3dd1e18"}