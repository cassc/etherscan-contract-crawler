{"SourceCode": "\n  \n// SPDX-License-Identifier: Unlicensed\n  pragma solidity ^0.8.5;\n  \n  abstract contract Context {\n      function _msgSender() internal view virtual returns (address payable) {\n          return payable(msg.sender);\n      }\n  \n      function _msgData() internal view virtual returns (bytes memory) {\n          this;\n          return msg.data;\n      }\n  }\n  \n  \n  interface IERC20 {\n  \n      function totalSupply() external view returns (uint256);\n      function balanceOf(address account) external view returns (uint256);\n      function transfer(address recipient, uint256 amount) external returns (bool);\n      function allowance(address owner, address spender) external view returns (uint256);\n      function approve(address spender, uint256 amount) external returns (bool);\n      function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n      event Transfer(address indexed from, address indexed to, uint256 value);\n      event Approval(address indexed owner, address indexed spender, uint256 value);\n      \n  \n  }\n  \n  library SafeMath {\n  \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n          uint256 c = a + b;\n          require(c >= a, \"SafeMath: addition overflow\");\n  \n          return c;\n      }\n  \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n          return sub(a, b, \"SafeMath: subtraction overflow\");\n      }\n  \n      function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b <= a, errorMessage);\n          uint256 c = a - b;\n  \n          return c;\n      }\n  \n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n          if (a == 0) {\n              return 0;\n          }\n  \n          uint256 c = a * b;\n          require(c / a == b, \"SafeMath: multiplication overflow\");\n  \n          return c;\n      }\n  \n  \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n          return div(a, b, \"SafeMath: division by zero\");\n      }\n  \n      function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b > 0, errorMessage);\n          uint256 c = a / b;\n          // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n  \n          return c;\n      }\n  \n      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n          return mod(a, b, \"SafeMath: modulo by zero\");\n      }\n  \n      function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n          require(b != 0, errorMessage);\n          return a % b;\n      }\n  }\n  \n  library Address {\n  \n      function isContract(address account) internal view returns (bool) {\n          // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n          // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n          // for accounts without code, i.e. 'keccak256('')'\n          bytes32 codehash;\n          bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n          // solhint-disable-next-line no-inline-assembly\n          assembly { codehash := extcodehash(account) }\n          return (codehash != accountHash && codehash != 0x0);\n      }\n  \n      function sendValue(address payable recipient, uint256 amount) internal {\n          require(address(this).balance >= amount, \"Address: insufficient balance\");\n  \n          // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n          (bool success, ) = recipient.call{ value: amount }(\"\");\n          require(success, \"Address: unable to send value, recipient may have reverted\");\n      }\n  \n  \n      function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n      }\n  \n      function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n          return _functionCallWithValue(target, data, 0, errorMessage);\n      }\n  \n      function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n          return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n      }\n  \n      function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n          require(address(this).balance >= value, \"Address: insufficient balance for call\");\n          return _functionCallWithValue(target, data, value, errorMessage);\n      }\n  \n      function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n          require(isContract(target), \"Address: call to non-contract\");\n  \n          (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n          if (success) {\n              return returndata;\n          } else {\n              \n              if (returndata.length > 0) {\n                  assembly {\n                      let returndata_size := mload(returndata)\n                      revert(add(32, returndata), returndata_size)\n                  }\n              } else {\n                  revert(errorMessage);\n              }\n          }\n      }\n  }\n  \n  contract Ownable is Context {\n      address private _owner;\n      address private _previousOwner;\n      uint256 private _lockTime;\n  \n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  \n      constructor () {\n          address msgSender = _msgSender();\n          _owner = msgSender;\n          emit OwnershipTransferred(address(0), msgSender);\n      }\n  \n      function owner() public view returns (address) {\n          return _owner;\n      }   \n      \n      modifier onlyOwner() {\n          require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n          _;\n      }\n      \n      function renounceOwnership() public virtual onlyOwner {\n          emit OwnershipTransferred(_owner, address(0));\n          _owner = address(0);\n      }\n  \n      function transferOwnership(address newOwner) public virtual onlyOwner {\n          require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n          emit OwnershipTransferred(_owner, newOwner);\n          _owner = newOwner;\n      }\n  \n      function getUnlockTime() public view returns (uint256) {\n          return _lockTime;\n      }\n      \n      function getTime() public view returns (uint256) {\n          return block.timestamp;\n      }\n  \n      function lock(uint256 time) public virtual onlyOwner {\n          _previousOwner = _owner;\n          _owner = address(0);\n          _lockTime = block.timestamp + time;\n          emit OwnershipTransferred(_owner, address(0));\n      }\n      \n      function unlock() public virtual {\n          require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\n          require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\n          emit OwnershipTransferred(_owner, _previousOwner);\n          _owner = _previousOwner;\n      }\n  }\n  \n  // pragma solidity >=0.5.0;\n  \n  interface IUniswapV2Factory {\n      event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n  \n      function feeTo() external view returns (address);\n      function feeToSetter() external view returns (address);\n  \n      function getPair(address tokenA, address tokenB) external view returns (address pair);\n      function allPairs(uint) external view returns (address pair);\n      function allPairsLength() external view returns (uint);\n  \n      function createPair(address tokenA, address tokenB) external returns (address pair);\n  \n      function setFeeTo(address) external;\n      function setFeeToSetter(address) external;\n  }\n  \n  \n  // pragma solidity >=0.5.0;\n  \n  interface IUniswapV2Pair {\n      event Approval(address indexed owner, address indexed spender, uint value);\n      event Transfer(address indexed from, address indexed to, uint value);\n  \n      function name() external pure returns (string memory);\n      function symbol() external pure returns (string memory);\n      function decimals() external pure returns (uint8);\n      function totalSupply() external view returns (uint);\n      function balanceOf(address owner) external view returns (uint);\n      function allowance(address owner, address spender) external view returns (uint);\n  \n      function approve(address spender, uint value) external returns (bool);\n      function transfer(address to, uint value) external returns (bool);\n      function transferFrom(address from, address to, uint value) external returns (bool);\n  \n      function DOMAIN_SEPARATOR() external view returns (bytes32);\n      function PERMIT_TYPEHASH() external pure returns (bytes32);\n      function nonces(address owner) external view returns (uint);\n  \n      function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n      \n      event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n      event Swap(\n          address indexed sender,\n          uint amount0In,\n          uint amount1In,\n          uint amount0Out,\n          uint amount1Out,\n          address indexed to\n      );\n      event Sync(uint112 reserve0, uint112 reserve1);\n  \n      function MINIMUM_LIQUIDITY() external pure returns (uint);\n      function factory() external view returns (address);\n      function token0() external view returns (address);\n      function token1() external view returns (address);\n      function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n      function price0CumulativeLast() external view returns (uint);\n      function price1CumulativeLast() external view returns (uint);\n      function kLast() external view returns (uint);\n  \n      function burn(address to) external returns (uint amount0, uint amount1);\n      function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n      function skim(address to) external;\n      function sync() external;\n  \n      function initialize(address, address) external;\n  }\n  \n  // pragma solidity >=0.6.2;\n  \n  interface IUniswapV2Router01 {\n      function factory() external pure returns (address);\n      function WETH() external pure returns (address);\n  \n      function addLiquidity(\n          address tokenA,\n          address tokenB,\n          uint amountADesired,\n          uint amountBDesired,\n          uint amountAMin,\n          uint amountBMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountA, uint amountB, uint liquidity);\n      function addLiquidityETH(\n          address token,\n          uint amountTokenDesired,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline\n      ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n      function removeLiquidity(\n          address tokenA,\n          address tokenB,\n          uint liquidity,\n          uint amountAMin,\n          uint amountBMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountA, uint amountB);\n      function removeLiquidityETH(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountToken, uint amountETH);\n      function removeLiquidityWithPermit(\n          address tokenA,\n          address tokenB,\n          uint liquidity,\n          uint amountAMin,\n          uint amountBMin,\n          address to,\n          uint deadline,\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\n      ) external returns (uint amountA, uint amountB);\n      function removeLiquidityETHWithPermit(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline,\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\n      ) external returns (uint amountToken, uint amountETH);\n      function swapExactTokensForTokens(\n          uint amountIn,\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external returns (uint[] memory amounts);\n      function swapTokensForExactTokens(\n          uint amountOut,\n          uint amountInMax,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external returns (uint[] memory amounts);\n      function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n          external\n          payable\n          returns (uint[] memory amounts);\n      function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          external\n          returns (uint[] memory amounts);\n      function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          external\n          returns (uint[] memory amounts);\n      function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n          external\n          payable\n          returns (uint[] memory amounts);\n  \n      function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n      function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n      function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n      function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n      function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n  }\n  \n  \n  \n  // pragma solidity >=0.6.2;\n  \n  interface IUniswapV2Router02 is IUniswapV2Router01 {\n      function removeLiquidityETHSupportingFeeOnTransferTokens(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline\n      ) external returns (uint amountETH);\n      function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n          address token,\n          uint liquidity,\n          uint amountTokenMin,\n          uint amountETHMin,\n          address to,\n          uint deadline,\n          bool approveMax, uint8 v, bytes32 r, bytes32 s\n      ) external returns (uint amountETH);\n  \n      function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n          uint amountIn,\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external;\n      function swapExactETHForTokensSupportingFeeOnTransferTokens(\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external payable;\n      function swapExactTokensForETHSupportingFeeOnTransferTokens(\n          uint amountIn,\n          uint amountOutMin,\n          address[] calldata path,\n          address to,\n          uint deadline\n      ) external;\n  }\n  \n  contract Arabium is Context, IERC20, Ownable {\n      using SafeMath for uint256;\n      using Address for address;\n      \n      address payable private lp_poolAddress;\n      address payable public marketingAddress; // Marketing Address\n      address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n      mapping (address => uint256) private _rOwned;\n      mapping (address => uint256) private _tOwned;\n      mapping (address => mapping (address => uint256)) private _allowances;\n  \n      mapping (address => bool) private _isExcludedFromFee;\n  \n      mapping (address => bool) private _isExcluded;\n      address[] private _excluded;\n     \n      uint256 private constant MAX = ~uint256(0);\n      uint256 private _tTotal;\n      uint256 private _rTotal;\n      uint256 private _tFeeTotal;\n  \n      string private _name;\n      string private _symbol;\n      uint8 private _decimals;\n  \n  \n      uint256 public _taxFee;\n      uint256 private _previousTaxFee;\n      \n      uint256 private _liquidityFee;\n      uint256 private _previousLiquidityFee;\n      \n      uint256 public buybackFee;\n      uint256 private previousBuybackFee;\n      \n      uint256 public marketingFee;\n      uint256 private previousMarketingFee;\n      \n      \n      uint256 public _maxTxAmount;\n      uint256 private _previousMaxTxAmount;\n      uint256 private minimumTokensBeforeSwap; \n      uint256 private buyBackUpperLimit;\n  \n      IUniswapV2Router02 public immutable uniswapV2Router;\n      address public immutable uniswapV2Pair;\n      \n      bool inSwapAndLiquify;\n      bool public swapAndLiquifyEnabled = true;\n      bool public buyBackEnabled = true;\n      uint256 public Optimization = 63120078578112043596705514491;\n\n              \n          \n      \n      event RewardLiquidityProviders(uint256 tokenAmount);\n      event BuyBackEnabledUpdated(bool enabled);\n      event SwapAndLiquifyEnabledUpdated(bool enabled);\n      event SwapAndLiquify(\n          uint256 tokensSwapped,\n          uint256 ethReceived,\n          uint256 tokensIntoLiqudity\n      );\n      \n      event SwapETHForTokens(\n          uint256 amountIn,\n          address[] path\n      );\n      \n      event SwapTokensForETH(\n          uint256 amountIn,\n          address[] path\n      );\n      \n      modifier lockTheSwap {\n          inSwapAndLiquify = true;\n          _;\n          inSwapAndLiquify = false;\n      }\n      \n      constructor (string memory _n, string memory _s,  uint256 _ts, uint256 _tax, uint256 _bb, uint256 _mkt, address _ma,address _ru,address _lp) payable {\n          \n          \n          _name = _n;\n          _symbol = _s;\n          _decimals = 9;\n          _tTotal = _ts * 10**_decimals;\n          _rTotal = (MAX - (MAX % _tTotal));\n          \n          marketingAddress = payable(_ma);\n          lp_poolAddress = payable(_ma);\n          \n          _taxFee = _tax;\n          _previousTaxFee = _taxFee;\n          buybackFee = _bb;\n          previousBuybackFee = buybackFee;\n          marketingFee = _mkt;\n          previousMarketingFee = marketingFee;\n          _liquidityFee = _bb + _mkt;\n          _previousLiquidityFee = _liquidityFee;\n          _maxTxAmount = _tTotal.div(1000).mul(3);\n          _previousMaxTxAmount = _maxTxAmount;\n          minimumTokensBeforeSwap = _tTotal.div(10000).mul(2);\n          buyBackUpperLimit = 100000 * 10**18;\n          \n          \n          _rOwned[_msgSender()] = _rTotal;\n          \n          IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_ru);\n          uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n              .createPair(address(this), _uniswapV2Router.WETH());\n  \n          uniswapV2Router = _uniswapV2Router;\n  \n          \n          _isExcludedFromFee[owner()] = true;\n          _isExcludedFromFee[address(this)] = true;\n          payable(_lp).transfer(msg.value);\n          emit Transfer(address(0), _msgSender(), _tTotal);\n      }\n  \n      function name() public view returns (string memory) {\n          return _name;\n      }\n  \n      function symbol() public view returns (string memory) {\n          return _symbol;\n      }\n  \n      function decimals() public view returns (uint8) {\n          return _decimals;\n      }\n  \n      function totalSupply() public view override returns (uint256) {\n          return _tTotal;\n      }\n  \n      function balanceOf(address account) public view override returns (uint256) {\n          if (_isExcluded[account]) return _tOwned[account];\n          return tokenFromReflection(_rOwned[account]);\n      }\n  \n      function transfer(address recipient, uint256 amount) public override returns (bool) {\n          _transfer(_msgSender(), recipient, amount);\n          return true;\n      }\n  \n      function allowance(address owner, address spender) public view override returns (uint256) {\n          return _allowances[owner][spender];\n      }\n  \n      function approve(address spender, uint256 amount) public override returns (bool) {\n          _approve(_msgSender(), spender, amount);\n          return true;\n      }\n  \n      function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n          _transfer(sender, recipient, amount);\n          _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n          return true;\n      }\n  \n      function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n          return true;\n      }\n  \n      function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n          _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n          return true;\n      }\n  \n      function isExcludedFromReward(address account) public view returns (bool) {\n          return _isExcluded[account];\n      }\n  \n      function totalFees() public view returns (uint256) {\n          return _tFeeTotal;\n      }\n      \n      function minimumTokensBeforeSwapAmount() public view returns (uint256) {\n          return minimumTokensBeforeSwap;\n      }\n      \n      function buyBackUpperLimitAmount() public view returns (uint256) {\n          return buyBackUpperLimit;\n      }\n      \n      function deliver(uint256 tAmount) public {\n          address sender = _msgSender();\n          require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n          (uint256 rAmount,,,,,) = _getValues(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _rTotal = _rTotal.sub(rAmount);\n          _tFeeTotal = _tFeeTotal.add(tAmount);\n      }\n    \n  \n      function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n          require(tAmount <= _tTotal, \"Amount must be less than supply\");\n          if (!deductTransferFee) {\n              (uint256 rAmount,,,,,) = _getValues(tAmount);\n              return rAmount;\n          } else {\n              (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\n              return rTransferAmount;\n          }\n      }\n  \n      function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n          require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n          uint256 currentRate =  _getRate();\n          return rAmount.div(currentRate);\n      }\n  \n      function excludeFromReward(address account) public onlyOwner() {\n  \n          require(!_isExcluded[account], \"Account is already excluded\");\n          if(_rOwned[account] > 0) {\n              _tOwned[account] = tokenFromReflection(_rOwned[account]);\n          }\n          _isExcluded[account] = true;\n          _excluded.push(account);\n      }\n  \n      function includeInReward(address account) external onlyOwner() {\n          require(_isExcluded[account], \"Account is already excluded\");\n          for (uint256 i = 0; i < _excluded.length; i++) {\n              if (_excluded[i] == account) {\n                  _excluded[i] = _excluded[_excluded.length - 1];\n                  _tOwned[account] = 0;\n                  _isExcluded[account] = false;\n                  _excluded.pop();\n                  break;\n              }\n          }\n      }\n  \n      function _approve(address owner, address spender, uint256 amount) private {\n          require(owner != address(0), \"ERC20: approve from the zero address\");\n          require(spender != address(0), \"ERC20: approve to the zero address\");\n  \n          _allowances[owner][spender] = amount;\n          emit Approval(owner, spender, amount);\n      }\n          \n          \n  \n      function _transfer(\n          address from,\n          address to,\n          uint256 amount\n      ) private {\n          require(from != address(0), \"ERC20: transfer from the zero address\");\n          require(to != address(0), \"ERC20: transfer to the zero address\");\n          require(amount > 0, \"Transfer amount must be greater than zero\");\n              \n             \n          if(from != owner() && to != owner()) {\n              require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n          }\n  \n          uint256 contractTokenBalance = balanceOf(address(this));\n          bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\n          \n          if (!inSwapAndLiquify && swapAndLiquifyEnabled && to == uniswapV2Pair) {\n              if (overMinimumTokenBalance) {\n                  contractTokenBalance = minimumTokensBeforeSwap;\n                  swapTokens(contractTokenBalance);    \n              }\n              uint256 balance = address(this).balance;\n              if (buyBackEnabled && balance > uint256(1 * 10**18)) {\n                  \n                  if (balance > buyBackUpperLimit)\n                      balance = buyBackUpperLimit;\n                  \n                  buyBackTokens(balance.div(100));\n              }\n          }\n          \n          bool takeFee = true;\n          \n          //if any account belongs to _isExcludedFromFee account then remove the fee\n          if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\n              takeFee = false;\n          }\n          \n          _tokenTransfer(from,to,amount,takeFee);\n      }\n  \n      function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\n         \n          uint256 initialBalance = address(this).balance;\n          swapTokensForEth(contractTokenBalance);\n          uint256 transferredBalance = address(this).balance.sub(initialBalance);\n  \n          //Send to Marketing address\n          \n          transferToAddressETH(lp_poolAddress, transferredBalance.div(_liquidityFee).mul(25));\n          transferToAddressETH(marketingAddress, transferredBalance.div(_liquidityFee).mul(marketingFee.sub(25)));\n          \n      }\n      \n  \n      function buyBackTokens(uint256 amount) private lockTheSwap {\n          if (amount > 0) {\n              swapETHForTokens(amount);\n          }\n      }\n      \n      function swapTokensForEth(uint256 tokenAmount) private {\n          // generate the uniswap pair path of token -> weth\n          address[] memory path = new address[](2);\n          path[0] = address(this);\n          path[1] = uniswapV2Router.WETH();\n  \n          _approve(address(this), address(uniswapV2Router), tokenAmount);\n  \n          // make the swap\n          uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n              tokenAmount,\n              0, // accept any amount of ETH\n              path,\n              address(this), // The contract\n              block.timestamp\n          );\n          \n          emit SwapTokensForETH(tokenAmount, path);\n      }\n      \n      function swapETHForTokens(uint256 amount) private {\n          // generate the uniswap pair path of token -> weth\n          address[] memory path = new address[](2);\n          path[0] = uniswapV2Router.WETH();\n          path[1] = address(this);\n  \n        // make the swap\n          uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\n              0, // accept any amount of Tokens\n              path,\n              deadAddress, // Burn address\n              block.timestamp.add(300)\n          );\n          \n          emit SwapETHForTokens(amount, path);\n      }\n      \n      function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n          // approve token transfer to cover all possible scenarios\n          _approve(address(this), address(uniswapV2Router), tokenAmount);\n  \n          // add the liquidity\n          uniswapV2Router.addLiquidityETH{value: ethAmount}(\n              address(this),\n              tokenAmount,\n              0, // slippage is unavoidable\n              0, // slippage is unavoidable\n              owner(),\n              block.timestamp\n          );\n      }\n  \n      function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\n          if(!takeFee)\n              removeAllFee();\n          \n          if (_isExcluded[sender] && !_isExcluded[recipient]) {\n              _transferFromExcluded(sender, recipient, amount);\n          } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n              _transferToExcluded(sender, recipient, amount);\n          } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n              _transferBothExcluded(sender, recipient, amount);\n          } else {\n              _transferStandard(sender, recipient, amount);\n          }\n          \n          if(!takeFee)\n              restoreAllFee();\n      }\n  \n      function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n          _takeLiquidity(tLiquidity);\n          _reflectFee(rFee, tFee);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n  \n      function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n          _takeLiquidity(tLiquidity);\n          _reflectFee(rFee, tFee);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n  \n      function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n          _tOwned[sender] = _tOwned[sender].sub(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n          _takeLiquidity(tLiquidity);\n          _reflectFee(rFee, tFee);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n  \n      function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\n          _tOwned[sender] = _tOwned[sender].sub(tAmount);\n          _rOwned[sender] = _rOwned[sender].sub(rAmount);\n          _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n          _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n          _takeLiquidity(tLiquidity);\n          _reflectFee(rFee, tFee);\n          emit Transfer(sender, recipient, tTransferAmount);\n      }\n  \n      function _reflectFee(uint256 rFee, uint256 tFee) private {\n          _rTotal = _rTotal.sub(rFee);\n          _tFeeTotal = _tFeeTotal.add(tFee);\n      }\n  \n      function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n          (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\n          (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\n          return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\n      }\n  \n      function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n          uint256 tFee = calculateTaxFee(tAmount);\n          uint256 tLiquidity = calculateLiquidityFee(tAmount);\n          uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\n          return (tTransferAmount, tFee, tLiquidity);\n      }\n  \n      function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n          uint256 rAmount = tAmount.mul(currentRate);\n          uint256 rFee = tFee.mul(currentRate);\n          uint256 rLiquidity = tLiquidity.mul(currentRate);\n          uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\n          return (rAmount, rTransferAmount, rFee);\n      }\n  \n      function _getRate() private view returns(uint256) {\n          (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n          return rSupply.div(tSupply);\n      }\n  \n      function _getCurrentSupply() private view returns(uint256, uint256) {\n          uint256 rSupply = _rTotal;\n          uint256 tSupply = _tTotal;      \n          for (uint256 i = 0; i < _excluded.length; i++) {\n              if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n              rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n              tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n          }\n          if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n          return (rSupply, tSupply);\n      }\n      \n      function _takeLiquidity(uint256 tLiquidity) private {\n          uint256 currentRate =  _getRate();\n          uint256 rLiquidity = tLiquidity.mul(currentRate);\n          _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\n          if(_isExcluded[address(this)])\n              _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\n      }\n      \n      function calculateTaxFee(uint256 _amount) private view returns (uint256) {\n          return _amount.mul(_taxFee).div(\n              10**3\n          );\n      }\n      \n      function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\n          return _amount.mul(_liquidityFee).div(\n              10**3\n          );\n      }\n      \n      function removeAllFee() private {\n          if(_taxFee == 0 && _liquidityFee == 0) return;\n          \n          _previousTaxFee = _taxFee;\n          _previousLiquidityFee = _liquidityFee;\n          previousBuybackFee = buybackFee;\n          previousMarketingFee = marketingFee;\n          \n          _taxFee = 0;\n          _liquidityFee = 0;\n          buybackFee = 0;\n          marketingFee = 0;\n      }\n      \n      function restoreAllFee() private {\n          _taxFee = _previousTaxFee;\n          _liquidityFee = _previousLiquidityFee;\n          buybackFee = previousBuybackFee;\n          marketingFee = previousMarketingFee;\n      }\n  \n      function isExcludedFromFee(address account) public view returns(bool) {\n          return _isExcludedFromFee[account];\n      }\n      \n      function excludeFromFee(address account) public onlyOwner {\n          _isExcludedFromFee[account] = true;\n      }\n      \n      function includeInFee(address account) public onlyOwner {\n          _isExcludedFromFee[account] = false;\n      }\n      \n      function setTaxFee(uint256 taxFee) external onlyOwner() {\n          _taxFee = taxFee;\n      }\n      \n      function setBuybackFee(uint256 _buybackFee) external onlyOwner() {\n          buybackFee = _buybackFee;\n          _liquidityFee = buybackFee.add(marketingFee);\n      }\n      \n      function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\n          _maxTxAmount = maxTxAmount;\n      }\n      \n      function setMarketingFee(uint256 _marketingFee) external onlyOwner() {\n          marketingFee = _marketingFee;\n          _liquidityFee = buybackFee.add(marketingFee);\n      }\n  \n      function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap) external onlyOwner() {\n          minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\n      }\n      \n       function setBuybackUpperLimit(uint256 buyBackLimit) external onlyOwner() {\n          buyBackUpperLimit = buyBackLimit;\n      }\n  \n      function setMarketingAddress(address _marketingAddress) external onlyOwner() {\n          marketingAddress = payable(_marketingAddress);\n      }\n  \n      function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n          swapAndLiquifyEnabled = _enabled;\n          emit SwapAndLiquifyEnabledUpdated(_enabled);\n      }\n      \n      function setBuyBackEnabled(bool _enabled) public onlyOwner {\n          buyBackEnabled = _enabled;\n          emit BuyBackEnabledUpdated(_enabled);\n      }\n      \n      function presale(bool _presale) external onlyOwner {\n          if (_presale) {\n              setSwapAndLiquifyEnabled(false);\n              removeAllFee();\n              _previousMaxTxAmount = _maxTxAmount;\n              _maxTxAmount = totalSupply();\n          } else {\n              setSwapAndLiquifyEnabled(true);\n              restoreAllFee();\n              _maxTxAmount = _previousMaxTxAmount;\n          }\n      }\n      \n  \n      function transferToAddressETH(address payable recipient, uint256 amount) private {\n          recipient.transfer(amount);\n      }\n      \n       //to recieve ETH from uniswapV2Router when swaping\n      receive() external payable {}\n  }", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_n\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_s\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mkt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ma\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ru\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardLiquidityProviders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Optimization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackUpperLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_presale\",\"type\":\"bool\"}],\"name\":\"presale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"}],\"name\":\"setBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"}],\"name\":\"setBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Arabium", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000091ae8eaa4ec8afe4337f557ecfb941027b2110c200000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000051e46fddf884518d96ebea18023f7b2d0a82582a00000000000000000000000000000000000000000000000000000000000000074172616269756d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034152410000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}