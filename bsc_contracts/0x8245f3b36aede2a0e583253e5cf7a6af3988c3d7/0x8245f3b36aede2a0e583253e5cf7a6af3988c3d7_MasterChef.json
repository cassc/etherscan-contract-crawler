{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-10-05\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later Or MIT\r\n// File: contracts\\SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\IBEP20.sol\r\n\r\npragma solidity >=0.6.4;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\SafeBEP20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\LTRBTToken.sol\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-05-04\r\n*/\r\n\r\n/**\r\n  \r\n   #BEE\r\n   \r\n   #LIQ+#RFI+#SHIB+#DOGE = #BEE\r\n\r\n   #LITTLE RABBIT features:\r\n   5% fee auto add to the liquidity pool to locked forever when selling\r\n   5% fee auto distribute to all holders\r\n   I created a black hole so #Bee token will deflate itself in supply with every transaction\r\n   .\r\n   \r\n\r\n */\r\n\r\npragma solidity ^0.6.12;\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract  LittleRabbit is Context, IERC20, Ownable {\r\n\r\n//custom\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n//string\r\n    string private _name = \"Little Rabbit\";\r\n    string private _symbol = \"LTRBT\";\r\n//bool\r\n    bool public moveBnbToWallets = true;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public marketActive = false;\r\n    bool public limitActive = true;\r\n    bool public buyTimeLimit = true;\r\n    bool private isInternalTransaction = false;\r\n//address\r\n    address public uniswapV2Pair;\r\n    address public _MarketingWalletAddress = 0xAADCf09009cf7A6CCc623FF4aC64dceF345A8a04;\r\n    address public _DevelopmentWalletAddress = 0xAADCf09009cf7A6CCc623FF4aC64dceF345A8a04;\r\n    address public _Nft_treasuryWalletAddress = 0x89bb34eD95FDf749C55d878Ac0ED9A4cc752611e;\r\n    address public _BuybackWalletAddress = 0x2A8fb72561e7601FE52bcd9b8502Da6da623Afa2;\r\n    address[] private _excluded;\r\n\r\n//uint\r\n    uint public buyReflectionFee = 1;\r\n    uint public sellReflectionFee = 1;\r\n    uint public buyMarketingFee = 3;\r\n    uint public sellMarketingFee = 3;\r\n    uint public buyDevelopmentFee = 1;\r\n    uint public sellDevelopmentFee = 1;\r\n    uint public buyNft_treasuryFee = 1;\r\n    uint public sellNft_treasuryFee = 1;\r\n    uint public buyBuybackFee = 1;\r\n    uint public sellBuybackFee = 2;\r\n    uint public buyFee = buyReflectionFee + buyMarketingFee + buyDevelopmentFee + buyNft_treasuryFee + buyBuybackFee;\r\n    uint public sellFee = sellReflectionFee + sellMarketingFee + sellDevelopmentFee + sellNft_treasuryFee + sellBuybackFee;\r\n    uint public buySecondsLimit = 5;\r\n    uint public maxBuyTx;\r\n    uint public maxSellTx;\r\n    uint public maxWallet;\r\n    uint public intervalSecondsForSwap = 4;\r\n    uint public minimumWeiForTokenomics = 1 * 10**14; // 0.0001 bnb\r\n    uint private startTimeForSwap;\r\n    uint private MarketActiveAt;\r\n    uint private constant MAX = ~uint256(0);\r\n    uint8 private constant _decimals = 9;\r\n    uint private _tTotal = 1_000_000_000_000_000 * 10 ** _decimals;\r\n    uint private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint private _tFeeTotal;\r\n    uint private _ReflectionFee;\r\n    uint private _MarketingFee;\r\n    uint private _DevelopmentFee;\r\n    uint private _Nft_treasuryFee;\r\n    uint private _BuybackFee;\r\n    uint private _OldReflectionFee;\r\n    uint private _OldMarketingFee;\r\n    uint private _OldDevelopmentFee;\r\n    uint private _OldNft_treasuryFee;\r\n    uint private _OldBuybackFee;\r\n\r\n//mapping\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public premarketUser;\r\n    mapping (address => bool) public excludedFromFees;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => uint) public userLastBuy;\r\n//event\r\n    event MarketingCollected(uint256 amount);\r\n    event DevelopmentCollected(uint256 amount);\r\n    event NftTreasuryCollected(uint256 amount);\r\n    event BuyBackCollected(uint256 amount);\r\n    event ExcludedFromFees(address indexed user, bool state);\r\n    event SwapSystemChanged(bool status, uint256 intervalSecondsToWait);\r\n    event MoveBnbToWallets(bool state);\r\n    event LimitChanged(uint maxsell, uint maxbuy, uint maxwallt);\r\n// constructor\r\n    constructor() public {\r\n        // set gvars\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        excludedFromFees[address(this)] = true;\r\n        excludedFromFees[owner()] = true;\r\n        premarketUser[owner()] = true;\r\n        excludedFromFees[_MarketingWalletAddress] = true;\r\n        excludedFromFees[_Nft_treasuryWalletAddress] = true;\r\n        excludedFromFees[_BuybackWalletAddress] = true;\r\n\r\n        //spawn pair\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n        // mappings\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n        _rOwned[owner()] = _rTotal;\r\n        maxBuyTx = _tTotal / 100; // 1%\r\n        maxSellTx = (_tTotal / 100) / 2; // 0.5%\r\n        maxWallet = (_tTotal * 2) / 100; // 2%\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    // accept bnb for autoswap\r\n    receive() external payable {\r\n  \t}\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n    function setFees() private {\r\n        buyFee = buyReflectionFee + buyMarketingFee + buyDevelopmentFee + buyNft_treasuryFee;\r\n        sellFee = sellReflectionFee + sellMarketingFee + sellDevelopmentFee + sellNft_treasuryFee;\r\n    }\r\n\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function setMoveBnbToWallets(bool state) external onlyOwner {\r\n        moveBnbToWallets = state;\r\n        emit MoveBnbToWallets(state);\r\n    }\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        excludedFromFees[account] = true;\r\n        emit ExcludedFromFees(account,true);\r\n    }\r\n    function includeInFee(address account) external onlyOwner {\r\n        excludedFromFees[account] = false;\r\n        emit ExcludedFromFees(account,false);\r\n    }\r\n    function set_Fees(bool isBuy, uint reflection, uint marketing, uint development, uint nftreasury, uint bback) public onlyOwner{\r\n        require(reflection+marketing+development+nftreasury+bback <= 20, \"Fees too high\");\r\n        if(isBuy == true){\r\n            buyReflectionFee = reflection;\r\n            buyMarketingFee = marketing;\r\n            buyDevelopmentFee = development;\r\n            buyNft_treasuryFee = nftreasury;\r\n            buyBuybackFee = bback;\r\n        }else if(isBuy == false){\r\n            sellReflectionFee = reflection;\r\n            sellMarketingFee = marketing;\r\n            sellDevelopmentFee = development;\r\n            sellNft_treasuryFee = nftreasury;\r\n            sellBuybackFee = bback;\r\n        }\r\n        setFees();\r\n    }\r\n    function setMinimumWeiForTokenomics(uint _value) external onlyOwner {\r\n        minimumWeiForTokenomics = _value;\r\n    }\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,\r\n                                                               uint256 tTransferAmount, uint256 tFee, uint256 tMarketing,\r\n                                                               uint256 tDevelopment, uint256 tNft_treasury, uint256 tBuyback) {\r\n        (tTransferAmount, tFee, tMarketing, tDevelopment, tNft_treasury, tBuyback) = _getTValues(tAmount);\r\n        (rAmount, rTransferAmount, rFee) = _getRValues(tAmount, tFee, tMarketing, tDevelopment, tNft_treasury, tBuyback, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tMarketing, tDevelopment, tNft_treasury, tBuyback);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tDevelopment, uint256 tNft_treasury, uint256 tBuyback) {\r\n        tFee = calculateReflectionFee(tAmount);\r\n        tMarketing = calculateMarketingFee(tAmount);\r\n        tDevelopment = calculateDevelopmentFee(tAmount);\r\n        tNft_treasury = calculateNft_treasuryFee(tAmount);\r\n        tBuyback = calculateBuybackFee(tAmount);\r\n        tTransferAmount = tAmount - tFee - tMarketing - tDevelopment - tNft_treasury - tBuyback;\r\n        return (tTransferAmount, tFee, tMarketing, tDevelopment, tNft_treasury, tBuyback);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tMarketing, uint256 tDevelopment, uint256 tNft_treasury, uint256 tBuyback, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rMarketing = tMarketing * currentRate;\r\n        uint256 rDevelopment = tDevelopment * currentRate;\r\n        uint256 rNft_treasury = tNft_treasury * currentRate;\r\n        uint rBuyback = tBuyback * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rMarketing - rDevelopment - rNft_treasury - rBuyback;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    function _takeMarketing(uint256 tMarketing) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rMarketing = tMarketing * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rMarketing;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tMarketing;\r\n    }\r\n    function _takeDevelopment(uint256 tDevelopment) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rDevelopment = tDevelopment * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rDevelopment;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tDevelopment;\r\n    }\r\n    function _takeNft_treasury(uint256 tNft_treasury) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rNft_treasury = tNft_treasury * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rNft_treasury;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tNft_treasury;\r\n    }\r\n    function _takeBuyback(uint256 tBuyback) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rBuyback = tBuyback * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rBuyback;\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tBuyback;\r\n    }\r\n\r\n    function calculateReflectionFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _ReflectionFee / 10**2;\r\n    }\r\n    function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _MarketingFee / 10**2;\r\n    }\r\n    function calculateDevelopmentFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _DevelopmentFee / 10**2;\r\n    }\r\n    function calculateNft_treasuryFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _Nft_treasuryFee / 10**2;\r\n    }\r\n    function calculateBuybackFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount * _BuybackFee / 10**2;\r\n    }\r\n    function setOldFees() private {\r\n        _OldReflectionFee = _ReflectionFee;\r\n        _OldMarketingFee = _MarketingFee;\r\n        _OldDevelopmentFee = _DevelopmentFee;\r\n        _OldNft_treasuryFee = _Nft_treasuryFee;\r\n        _OldBuybackFee = _BuybackFee;\r\n    }\r\n    function shutdownFees() private {\r\n        _ReflectionFee = 0;\r\n        _MarketingFee = 0;\r\n        _DevelopmentFee = 0;\r\n        _Nft_treasuryFee = 0;\r\n        _BuybackFee = 0;\r\n    }\r\n    function setFeesByType(uint tradeType) private {\r\n        //buy\r\n        if(tradeType == 1) {\r\n            _ReflectionFee = buyReflectionFee;\r\n            _MarketingFee = buyMarketingFee;\r\n            _DevelopmentFee = buyDevelopmentFee;\r\n            _Nft_treasuryFee = buyNft_treasuryFee;\r\n            _BuybackFee = buyBuybackFee;\r\n        }\r\n        //sell\r\n        else if(tradeType == 2) {\r\n            _ReflectionFee = sellReflectionFee;\r\n            _MarketingFee = sellMarketingFee;\r\n            _DevelopmentFee = sellDevelopmentFee;\r\n            _Nft_treasuryFee = sellNft_treasuryFee;\r\n            _BuybackFee = sellBuybackFee;\r\n        }\r\n    }\r\n    function restoreFees() private {\r\n        _ReflectionFee = _OldReflectionFee;\r\n        _MarketingFee = _OldMarketingFee;\r\n        _DevelopmentFee = _OldDevelopmentFee;\r\n        _Nft_treasuryFee = _OldNft_treasuryFee;\r\n        _BuybackFee = _OldBuybackFee;\r\n    }\r\n\r\n    modifier CheckDisableFees(bool isEnabled, uint tradeType, address from) {\r\n        if(!isEnabled) {\r\n            setOldFees();\r\n            shutdownFees();\r\n            _;\r\n            restoreFees();\r\n        } else {\r\n            //buy & sell\r\n            if(tradeType == 1 || tradeType == 2) {\r\n                setOldFees();\r\n                setFeesByType(tradeType);\r\n                _;\r\n                restoreFees();\r\n            }\r\n            // no wallet to wallet tax\r\n            else {\r\n                setOldFees();\r\n                shutdownFees();\r\n                _;\r\n                restoreFees();\r\n            }\r\n        }\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return excludedFromFees[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    modifier FastTx() {\r\n        isInternalTransaction = true;\r\n        _;\r\n        isInternalTransaction = false;\r\n    }\r\n    function sendToWallet(uint amount) private {\r\n        uint256 marketing_part = amount * sellMarketingFee / 100;\r\n        uint256 development_part = amount * sellDevelopmentFee / 100;\r\n        uint256 nft_treasury_part = amount * sellNft_treasuryFee / 100;\r\n        uint256 buyback_part = amount * sellBuybackFee / 100;\r\n        (bool success, ) = payable(_MarketingWalletAddress).call{value: marketing_part}(\"\");\r\n        if(success) {\r\n            emit MarketingCollected(marketing_part);\r\n        }\r\n        (bool success1, ) = payable(_DevelopmentWalletAddress).call{value: development_part}(\"\");\r\n        if(success1) {\r\n            emit DevelopmentCollected(development_part);\r\n        }\r\n        (bool success2, ) = payable(_Nft_treasuryWalletAddress).call{value: nft_treasury_part}(\"\");\r\n        if(success2) {\r\n            emit NftTreasuryCollected(nft_treasury_part);\r\n        }\r\n        (bool success3, ) = payable(_BuybackWalletAddress).call{value: buyback_part}(\"\");\r\n        if(success3) {\r\n            emit BuyBackCollected(buyback_part);\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 _tokensToSwap) private FastTx {\r\n        swapTokensForEth(_tokensToSwap);\r\n    }\r\n// utility functions\r\n    function transferForeignToken(address _token, address _to, uint _value) external onlyOwner returns(bool _sent){\r\n        if(_value == 0) {\r\n            _value = IERC20(_token).balanceOf(address(this));\r\n        }\r\n        _sent = IERC20(_token).transfer(_to, _value);\r\n    }\r\n    function Sweep() external onlyOwner {\r\n        uint balance = address(this).balance;\r\n        payable(owner()).transfer(balance);\r\n    }\r\n\r\n    function betterTransferOwnership(address newOwner) public onlyOwner {\r\n        _transfer(msg.sender,newOwner,balanceOf(msg.sender));\r\n        excludedFromFees[owner()] = false;\r\n        premarketUser[owner()] = false;\r\n        excludedFromFees[newOwner] = true;\r\n        premarketUser[newOwner] = true;\r\n        transferOwnership(newOwner);\r\n    }\r\n//switch functions\r\n    function ActivateMarket() external onlyOwner {\r\n        require(!marketActive);\r\n        marketActive = true;\r\n        MarketActiveAt = block.timestamp;\r\n    }\r\n//set functions\r\n    function setLimits(uint maxTokenSellTX, uint maxTokenBuyTX, uint maxWalletz) public onlyOwner {\r\n        require(maxTokenSellTX >= ((_tTotal / 100) / 2)/10**_decimals);\r\n        maxBuyTx = maxTokenBuyTX * 10 ** _decimals;\r\n        maxSellTx = maxTokenSellTX * 10 ** _decimals;\r\n        maxWallet = maxWalletz * 10 ** _decimals;\r\n        emit LimitChanged(maxTokenSellTX,maxTokenBuyTX,maxWalletz);\r\n    }\r\n    function setMarketingAddress(address _value) external onlyOwner {\r\n        _MarketingWalletAddress = _value;\r\n    }\r\n    function setDevelopmentAddress(address _value) external onlyOwner {\r\n        _DevelopmentWalletAddress = _value;\r\n    }\r\n    function setNft_treasuryAddress(address _value) external onlyOwner {\r\n        _Nft_treasuryWalletAddress = _value;\r\n    }\r\n    function setNft_BuybackWalletAddress(address _value) external onlyOwner {\r\n        _BuybackWalletAddress = _value;\r\n    }\r\n    function setSwapAndLiquify(bool _state, uint _intervalSecondsForSwap) external onlyOwner {\r\n        swapAndLiquifyEnabled = _state;\r\n        intervalSecondsForSwap = _intervalSecondsForSwap;\r\n        emit SwapSystemChanged(_state,_intervalSecondsForSwap);\r\n    }\r\n// mappings functions\r\n    function editPowerUser(address _target, bool _status) external onlyOwner {\r\n        premarketUser[_target] = _status;\r\n        excludedFromFees[_target] = _status;\r\n    }\r\n    function editPremarketUser(address _target, bool _status) external onlyOwner {\r\n        premarketUser[_target] = _status;\r\n    }\r\n    function editExcludedFromFees(address _target, bool _status) external onlyOwner {\r\n        excludedFromFees[_target] = _status;\r\n    }\r\n    function editBatchExcludedFromFees(address[] memory _address, bool _status) external onlyOwner {\r\n        for(uint i=0; i< _address.length; i++){\r\n            address adr = _address[i];\r\n            excludedFromFees[adr] = _status;\r\n        }\r\n    }\r\n    function editAutomatedMarketMakerPairs(address _target, bool _status) external onlyOwner {\r\n        automatedMarketMakerPairs[_target] = _status;\r\n    }\r\n// operational functions\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        uint trade_type = 0;\r\n        bool takeFee = true;\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n    // market status flag\r\n        if(!marketActive) {\r\n            require(premarketUser[from],\"cannot trade before the market opening\");\r\n        }\r\n    // normal transaction\r\n        if(!isInternalTransaction) {\r\n        // tx limits\r\n            //buy\r\n            if(automatedMarketMakerPairs[from]) {\r\n                trade_type = 1;\r\n                if(limitActive && !premarketUser[to]){\r\n                    require(amount<= maxBuyTx && amount+balanceOf(to) <= maxWallet, \"buy limits\");\r\n                    if(buyTimeLimit){\r\n                        require(block.timestamp >= userLastBuy[to]+buySecondsLimit, \"time buy limit\");\r\n                        userLastBuy[to] = block.timestamp;\r\n                    }\r\n                }\r\n            }\r\n            //sell\r\n            else if(automatedMarketMakerPairs[to]) {\r\n                trade_type = 2;\r\n                if(limitActive && !premarketUser[from]){\r\n                    require(amount<= maxSellTx );\r\n\r\n                }\r\n                // liquidity generator for tokenomics\r\n                if (swapAndLiquifyEnabled && \r\n                    balanceOf(uniswapV2Pair) > 0 &&\r\n                    startTimeForSwap + intervalSecondsForSwap <= block.timestamp\r\n                    ) {\r\n                        startTimeForSwap = block.timestamp;\r\n                        swapAndLiquify(balanceOf(address(this)));\r\n                }\r\n            }\r\n            // send converted bnb from fees to respective wallets\r\n            if(moveBnbToWallets) {\r\n                uint256 remaningBnb = address(this).balance;\r\n                if(remaningBnb > minimumWeiForTokenomics) {\r\n                    sendToWallet(remaningBnb);\r\n                }\r\n            }\r\n        }\r\n        //if any account belongs to excludedFromFees account then remove the fee\r\n        if(excludedFromFees[from] || excludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n        // transfer tokens\r\n        _tokenTransfer(from,to,amount,takeFee,trade_type);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee, uint tradeType) private CheckDisableFees(takeFee,tradeType,sender) {\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tDevelopment, uint256 tNft_Treasury, uint256 tBuyback) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeDevelopment(tDevelopment);\r\n        _takeNft_treasury(tNft_Treasury);\r\n        _takeBuyback(tBuyback);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tDevelopment, uint256 tNft_Treasury, uint256 tBuyback) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeDevelopment(tDevelopment);\r\n        _takeNft_treasury(tNft_Treasury);\r\n        _takeBuyback(tBuyback);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tDevelopment, uint256 tNft_Treasury, uint256 tBuyback) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeDevelopment(tDevelopment);\r\n        _takeNft_treasury(tNft_Treasury);\r\n        _takeBuyback(tBuyback);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tMarketing, uint256 tDevelopment, uint256 tNft_Treasury, uint256 tBuyback) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeMarketing(tMarketing);\r\n        _takeDevelopment(tDevelopment);\r\n        _takeNft_treasury(tNft_Treasury);\r\n        _takeBuyback(tBuyback);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function KKMigration(address[] memory _address, uint256[] memory _amount) external onlyOwner {\r\n        require(_amount.length == _amount.length,\"wrong address:amount rows\");\r\n        for(uint i=0; i< _amount.length; i++){\r\n            address adr = _address[i];\r\n            uint amnt = _amount[i] *10**decimals();\r\n            (uint256 rAmount, uint256 rTransferAmount,,,,,,,) = _getValues(amnt);\r\n            _rOwned[owner()] = _rOwned[owner()] - rAmount;\r\n            _rOwned[adr] = _rOwned[adr] + rTransferAmount;\r\n            emit Transfer(owner(),adr,amnt);\r\n        } \r\n    }\r\n}\r\ninterface IMigratorChef {\r\n    // Perform LP token migration from legacy littlerabbitSwap to RabbitSwap.\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    // Return the new LP token address.\r\n    //\r\n    // XXX Migrator must have allowance access to littlerabbitSwap LP tokens.\r\n    // RabbitSwap must mint EXACTLY the same amount of RabbitSwap LP tokens or\r\n    // else something bad will happen. Traditional littlerabbitSwap does not\r\n    // do that so be careful!\r\n    function migrate(IBEP20 token) external returns (IBEP20);\r\n}\r\n// File: contracts\\LTRBTMasterChef.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// MasterChef is the master of Ltrbt. He can make Ltrbt and he is a fair guy.\r\n//\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once LTRBT is sufficiently\r\n// distributed and the community can show to govern itself.\r\n//\r\n// Have fun reading it. Hopefully it's bug-free. God bless.\r\ncontract MasterChef is Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;         // How many LP tokens the user has provided.\r\n        uint256 rewardDebt;     // Reward debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of LTRBTs\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accLtrbtPerShare) - user.rewardDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accLtrbtPerShare` (and `lastRewardBlock`) gets updated.\r\n        //   2. User receives the pending reward sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IBEP20 lpToken;           // Address of LP token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. LTRBTs to distribute per block.\r\n        uint256 lastRewardBlock;  // Last block number that LTRBTs distribution occurs.\r\n        uint256 accLtrbtPerShare;   // Accumulated LTRBTs per share, times 1e12. See below.\r\n        uint16 depositFeeBP;      // Deposit fee in basis points\r\n    }\r\n\r\n    // The LTRBT TOKEN!\r\n    LittleRabbit public ltrbt;\r\n    // LTRBT tokens created per block.\r\n    uint256 public ltrbtPerBlock;\r\n    // Bonus muliplier for early ltrbt makers.\r\n    uint256 public BONUS_MULTIPLIER = 1;\r\n    IMigratorChef public migrator;\r\n    // Deposit Fee address\r\n    address public feeAddress;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] public poolInfo;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when LTRBT mining starts.\r\n    uint256 public startBlock;\r\n    // Deposited amount LTRBT in MasterChef\r\n    uint256 public depositedLtrbt;\r\n\r\n    uint256 public mintedAmount;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    constructor(\r\n        LittleRabbit _ltrbt,\r\n        uint256 _ltrbtPerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        ltrbt = _ltrbt;\r\n        feeAddress = msg.sender;\r\n        ltrbtPerBlock = _ltrbtPerBlock;\r\n        startBlock = _startBlock;\r\n        mintedAmount = 0;\r\n    }\r\n\r\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\r\n        BONUS_MULTIPLIER = multiplierNumber;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    // Add a new lp to the pool. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(uint256 _allocPoint, IBEP20 _lpToken, uint16 _depositFeeBP, bool _withUpdate) public onlyOwner {\r\n        require(_depositFeeBP <= 10000, \"add: invalid deposit fee basis points\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolInfo.push(PoolInfo({\r\n            lpToken: _lpToken,\r\n            allocPoint: _allocPoint,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accLtrbtPerShare: 0,\r\n            depositFeeBP: _depositFeeBP\r\n        }));\r\n    }\r\n\r\n    // Update the given pool's LTRBT allocation point and deposit fee. Can only be called by the owner.\r\n    function set(uint256 _pid, uint256 _allocPoint, uint16 _depositFeeBP, bool _withUpdate) public onlyOwner {\r\n        require(_depositFeeBP <= 10000, \"set: invalid deposit fee basis points\");\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint;\r\n        poolInfo[_pid].depositFeeBP = _depositFeeBP;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n    // Set the migrator contract. Can only be called by the owner.\r\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n    function migrate(uint256 _pid) public {\r\n        require(address(migrator) != address(0), \"migrate: no migrator\");\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        IBEP20 lpToken = pool.lpToken;\r\n        uint256 bal = lpToken.balanceOf(address(this));\r\n        lpToken.safeApprove(address(migrator), bal);\r\n        IBEP20 newLpToken = migrator.migrate(lpToken);\r\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\r\n        pool.lpToken = newLpToken;\r\n    }\r\n\r\n    // View function to see pending LTRBTs on frontend.\r\n    function pendingLtrbt(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accLtrbtPerShare = pool.accLtrbtPerShare;\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\r\n        if (_pid == 0){\r\n            lpSupply = depositedLtrbt;\r\n        }\r\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n            uint256 ltrbtReward = multiplier.mul(ltrbtPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            accLtrbtPerShare = accLtrbtPerShare.add(ltrbtReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accLtrbtPerShare).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() public {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            updatePool(pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (block.number <= pool.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));        \r\n        if (_pid == 0){\r\n            lpSupply = depositedLtrbt;\r\n        }\r\n        if (lpSupply <= 0 || pool.allocPoint == 0) {\r\n            pool.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\r\n        uint256 ltrbtReward = multiplier.mul(ltrbtPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n        //safeLtrbtTransfer(address(this), ltrbtReward);\r\n        mintedAmount = mintedAmount.add(ltrbtReward);\r\n        // ltrbt.mint(address(this), ltrbtReward);\r\n        pool.accLtrbtPerShare = pool.accLtrbtPerShare.add(ltrbtReward.mul(1e12).div(lpSupply));\r\n        pool.lastRewardBlock = block.number;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for LTRBT allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) public {\r\n        require (_pid != 0, 'deposit LTRBT by staking');\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accLtrbtPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                safeLtrbtTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            if(pool.depositFeeBP > 0){\r\n                uint256 depositFee = _amount.mul(pool.depositFeeBP).div(10000);\r\n                pool.lpToken.safeTransfer(feeAddress, depositFee);\r\n                user.amount = user.amount.add(_amount).sub(depositFee);\r\n            }else{\r\n                user.amount = user.amount.add(_amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accLtrbtPerShare).div(1e12);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public {\r\n        require (_pid != 0, 'withdraw LTRBT by unstaking');\r\n\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        uint256 pending = user.amount.mul(pool.accLtrbtPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            safeLtrbtTransfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accLtrbtPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n    \r\n\r\n        // Stake LTRBT tokens to MasterChef\r\n    function enterStaking(uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        updatePool(0);\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(pool.accLtrbtPerShare).div(1e12).sub(user.rewardDebt);\r\n            if(pending > 0) {\r\n                safeLtrbtTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        if(_amount > 0) {\r\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n            user.amount = user.amount.add(_amount);\r\n            depositedLtrbt = depositedLtrbt.add(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accLtrbtPerShare).div(1e12);\r\n        emit Deposit(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Withdraw LTRBT tokens from STAKING.\r\n    function leaveStaking(uint256 _amount) public {\r\n        PoolInfo storage pool = poolInfo[0];\r\n        UserInfo storage user = userInfo[0][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(0);\r\n        uint256 pending = user.amount.mul(pool.accLtrbtPerShare).div(1e12).sub(user.rewardDebt);\r\n        if(pending > 0) {\r\n            safeLtrbtTransfer(msg.sender, pending);\r\n        }\r\n        if(_amount > 0) {\r\n            user.amount = user.amount.sub(_amount);\r\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\r\n            depositedLtrbt = depositedLtrbt.sub(_amount);\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accLtrbtPerShare).div(1e12);\r\n        emit Withdraw(msg.sender, 0, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n    }\r\n\r\n    // Safe ltrbt transfer function, just in case if rounding error causes pool to not have enough LTRBTs.\r\n    function safeLtrbtTransfer(address _to, uint256 _amount) internal {\r\n        uint256 ltrbtBal = ltrbt.balanceOf(address(this));\r\n        require(ltrbtBal>= _amount, \"insufficient LTRBT on MC\");\r\n        ltrbt.transfer(_to, _amount);\r\n    }\r\n\r\n    function setFeeAddress(address _feeAddress) public onlyOwner{\r\n        feeAddress = _feeAddress;\r\n    }\r\n\r\n    //Pancake has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\r\n    function updateEmissionRate(uint256 _ltrbtPerBlock) public onlyOwner {\r\n        massUpdatePools();\r\n        ltrbtPerBlock = _ltrbtPerBlock;\r\n    }\r\n\r\n    function setStartBlock(uint256 _startBlock) public onlyOwner {\r\n        startBlock = _startBlock;\r\n\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            //if (pool.lastRewardBlock < startBlock) {\r\n                pool.lastRewardBlock = startBlock;\r\n            //}\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract LittleRabbit\",\"name\":\"_ltrbt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ltrbtPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedLtrbt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ltrbt\",\"outputs\":[{\"internalType\":\"contract LittleRabbit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ltrbtPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingLtrbt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLtrbtPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"depositFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_depositFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ltrbtPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChef", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c46422a0f7dbbad9bec3bbbc1189bfaf9794b050000000000000000000000000000000000000000000000000001da0eac1f725000000000000000000000000000000000000000000000000000000000016c96ed", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://124fd7fcda0b71dd668b6a1c68dfb4cc0151bd20151b8ca0481bbe35f666984b"}