{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n// @title SRJSWAP\r\n// @title Interface : Token Standard #20. https://github.com/ethereum/EIPs/issue\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract FELTSwap {\r\n    using SafeMath for uint256;\r\n\r\n    address public signer;\r\n    address public nativeAddress = 0x9D30F7086E985B60e0893f6C5e948D578E836658; // Native coin address\r\n    address public Usdt = 0x55d398326f99059fF775485246999027B3197955; // Usdt coin address\r\n    BEP20 public native = BEP20(nativeAddress);  // Native coin on this contract\r\n    \r\n   \r\n    struct Coins{\r\n        string symbol;\r\n        uint256 pp;\r\n        uint256 sp;\r\n        bool isExists;\r\n        bool isNative;\r\n    }\r\n\r\n    mapping(address => Coins) public coins;\r\n\r\n    event Swap(address buyer, string from, string to, uint256 famount, uint256 tamount);\r\n    event Sell(address buyer, address coin, uint256 amount);\r\n    \r\n    // @dev Detects Authorized Signer.\r\n    modifier onlySigner(){\r\n        require(msg.sender == signer,\"You are not authorized signer.\");\r\n        _;\r\n    }\r\n\r\n    // @dev Returns coin balance on this contract.\r\n    function getBalanceSheet(address _coin) public view returns(uint256 bal){\r\n        require(coins[_coin].isExists,\"Invalid Coin!\");\r\n        bal =  BEP20(_coin).balanceOf(address(this));\r\n        return bal;\r\n    }\r\n\r\n    // @dev Restricts unauthorized access by another contract.\r\n    modifier security{\r\n        uint size;\r\n        address sandbox = msg.sender;\r\n        assembly  { size := extcodesize(sandbox) }\r\n        require(size == 0,\"Smart Contract detected.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        signer = msg.sender;\r\n\r\n        coins[nativeAddress].symbol = \"FELT\";\r\n        coins[nativeAddress].isExists = true;\r\n        coins[nativeAddress].isNative = true;\r\n\r\n        coins[Usdt].symbol = \"Usdt\";\r\n        coins[Usdt].pp = 50;\r\n        coins[Usdt].sp = 60;\r\n        coins[Usdt].isExists = true;\r\n        coins[Usdt].isNative = false;\r\n    \r\n    }\r\n    \r\n    // @dev Swap coins only which are available to swap in this contract.\r\n    function swap(address _from, address _to, uint256 _amount) public payable security{\r\n        require(coins[_from].isExists==true,\"Invalid coin\");\r\n        require(coins[_to].isExists==true,\"Invalid coin\");\r\n        \r\n        require(coins[_from].isNative==true && coins[_to].isNative==false || coins[_from].isNative==false && coins[_to].isNative==true,\"Swapping native coin only.\");\r\n        uint256 scaledAmount = 0;\r\n        \r\n        if(coins[_to].isNative==true){\r\n            scaledAmount = _amount.mul(coins[_from].pp).div(100);\r\n        }\r\n        else if(coins[_to].isNative==false){\r\n            scaledAmount = _amount.mul(coins[_to].sp).div(100);\r\n        }\r\n        require(scaledAmount<=BEP20(_to).balanceOf(address(this)),\"Insufficient coins!\");\r\n        require(BEP20(_from).transferFrom(msg.sender,address(this),_amount));\r\n        BEP20(_to).transfer(msg.sender,scaledAmount);\r\n        emit Swap(msg.sender, coins[_from].symbol, coins[_to].symbol, _amount.div(1e18), scaledAmount.div(1e18));\r\n    }\r\n\r\n    // @dev Register new coin to swap on this contract\r\n    function registerCoin(address _coin, string memory _sym, uint256 _pp, uint _sp) external onlySigner security{\r\n        require(coins[_coin].isExists==false,\"Coin already exists!\");\r\n        coins[_coin].pp = _pp;\r\n        coins[_coin].sp = _sp;\r\n        coins[_coin].symbol = _sym;\r\n        coins[_coin].isExists = true;\r\n        coins[_coin].isNative = false;\r\n    }\r\n\r\n    // @dev Overrides pp and sp only, not available for symbol, isExists and isNative.\r\n    // @dev Not application for native coin.\r\n    function setLocal(address _coin, uint256 _pp, uint _sp) external onlySigner security{\r\n        require(coins[_coin].isExists==true && coins[_coin].isNative==false,\"Either coin is native or coin does not exists!\");\r\n        coins[_coin].pp = _pp;\r\n        coins[_coin].sp = _sp;\r\n    }\r\n\r\n    // @dev Settle coin to swap on this contract\r\n    function coinSettlement(address _coin, bool action) external onlySigner security{\r\n        require(coins[_coin].isNative==false,\"Native coin settlement is not allowed.\");\r\n        coins[_coin].isExists = action;\r\n    }\r\n\r\n    // @dev Sell coins directly to buyer instead of swapping\r\n    function sell(address payable buyer, address _coin, uint _amount) external onlySigner security{\r\n        BEP20(_coin).transfer(buyer, _amount);\r\n        emit Sell(buyer, _coin, _amount);\r\n    }\r\n   \r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"famount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tamount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"action\",\"type\":\"bool\"}],\"name\":\"coinSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isNative\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"getBalanceSheet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"native\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_sym\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_pp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sp\",\"type\":\"uint256\"}],\"name\":\"registerCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sp\",\"type\":\"uint256\"}],\"name\":\"setLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "FELTSwap", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9bc56f2d17d87a13211ee5f9ae16d82ea51bfe37c69bef2a56d4d264a23afde"}