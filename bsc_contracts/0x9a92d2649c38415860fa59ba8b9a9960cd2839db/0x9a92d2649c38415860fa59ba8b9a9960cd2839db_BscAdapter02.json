{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/bsc/BscAdapter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../IAdapter.sol\\\";\\nimport \\\"../../lib/uniswapv2/dystopia/DystopiaUniswapV2Fork.sol\\\";\\nimport \\\"../../lib/hashflow/HashFlow.sol\\\";\\nimport \\\"../../lib/traderjoe-v2/TraderJoeV2.sol\\\";\\nimport \\\"../../lib/traderjoe-v2.1/TraderJoeV21.sol\\\";\\nimport \\\"../../lib/uniswapv3/UniswapV3.sol\\\";\\nimport \\\"../../lib/gmx/GMX.sol\\\";\\nimport \\\"../../lib/wombat/Wombat.sol\\\";\\nimport \\\"../../lib/smardex/Smardex.sol\\\";\\n\\n/**\\n * @dev This contract will route call to:\\n * 1 - DystopiaUniswapV2Fork\\n * 2 - HashFlow\\n * 3 - TraderJoeV2\\n * 4 - UniswapV3\\n * 5 - TraderJoeV2.1\\n * 6 - Morphex (GMX fork)\\n * 7 - Wombat\\n * 8 - SmarDex\\n * The above are the indexes\\n */\\n\\ncontract BscAdapter02 is\\n    IAdapter,\\n    DystopiaUniswapV2Fork,\\n    HashFlow,\\n    TraderJoeV2,\\n    UniswapV3,\\n    TraderJoeV21,\\n    GMX,\\n    Wombat,\\n    SmarDex\\n{\\n    using SafeMath for uint256;\\n\\n    /* solhint-disable no-empty-blocks */\\n    constructor(address _wrappedNativeToken) public WethProvider(_wrappedNativeToken) {}\\n\\n    /* solhint-disable no-empty-blocks */\\n\\n    function initialize(bytes calldata) external override {\\n        revert(\\\"METHOD NOT IMPLEMENTED\\\");\\n    }\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256,\\n        Utils.Route[] calldata route\\n    ) external payable override {\\n        for (uint256 i = 0; i < route.length; i++) {\\n            if (route[i].index == 1) {\\n                swapOnDystopiaUniswapV2Fork(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 2) {\\n                // swap on HashFlow\\n                swapOnHashFlow(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 3) {\\n                // swap on HashFlow\\n                swapOnTraderJoeV2(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 4) {\\n                //swap on uniswapv3\\n                swapOnUniswapV3(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 5) {\\n                //swap on TraderJoeV2.1\\n                swapOnTraderJoeV21(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else if (route[i].index == 6) {\\n                swapOnGMX(fromToken, toToken, fromAmount.mul(route[i].percent).div(10000), route[i].targetExchange);\\n            } else if (route[i].index == 7) {\\n                swapOnWombat(fromToken, toToken, fromAmount.mul(route[i].percent).div(10000), route[i].targetExchange);\\n            } else if (route[i].index == 8) {\\n                swapOnSmarDex(\\n                    fromToken,\\n                    toToken,\\n                    fromAmount.mul(route[i].percent).div(10000),\\n                    route[i].targetExchange,\\n                    route[i].payload\\n                );\\n            } else {\\n                revert(\\\"Index not supported\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/adapters/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../lib/Utils.sol\\\";\\n\\ninterface IAdapter {\\n    /**\\n     * @dev Certain adapters needs to be initialized.\\n     * This method will be called from Augustus\\n     */\\n    function initialize(bytes calldata data) external;\\n\\n    /**\\n     * @dev The function which performs the swap on an exchange.\\n     * @param fromToken Address of the source token\\n     * @param toToken Address of the destination token\\n     * @param fromAmount Amount of source tokens to be swapped\\n     * @param networkFee NOT USED - Network fee to be used in this router\\n     * @param route Route to be followed\\n     */\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 networkFee,\\n        Utils.Route[] calldata route\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/ITokenTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface ITokenTransferProxy {\\n    function transferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/balancerv2/IBalancerV2Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../Utils.sol\\\";\\n\\ninterface IBalancerV2Vault {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        address[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/gmx/GMX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./IVault.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\n\\nabstract contract GMX is WethProvider {\\n    using SafeERC20 for IERC20;\\n\\n    function swapOnGMX(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange\\n    ) internal {\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        IERC20(_fromToken).safeTransfer(exchange, fromAmount);\\n        IVault(exchange).swap(_fromToken, _toToken, address(this));\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/gmx/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IVault {\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/hashflow/HashFlow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../Utils.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IQuote {\\n    struct RFQTQuote {\\n        address pool;\\n        address externalAccount;\\n        address trader;\\n        address effectiveTrader;\\n        address baseToken;\\n        address quoteToken;\\n        uint256 effectiveBaseTokenAmount;\\n        uint256 maxBaseTokenAmount;\\n        uint256 maxQuoteTokenAmount;\\n        uint256 quoteExpiry;\\n        uint256 nonce;\\n        bytes32 txid;\\n        bytes signature;\\n    }\\n}\\n\\ninterface IHashFlowRouter {\\n    function tradeRFQT(IQuote.RFQTQuote calldata quote) external payable;\\n}\\n\\ncontract HashFlow {\\n    struct HashFlowData {\\n        address pool;\\n        address quoteToken;\\n        address externalAccount;\\n        uint256 baseTokenAmount;\\n        uint256 quoteTokenAmount;\\n        uint256 quoteExpiry;\\n        uint256 nonce;\\n        bytes32 txid;\\n        bytes signature;\\n    }\\n\\n    function buyOnHashFlow(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 maxFromAmount,\\n        uint256 toAmount,\\n        address targetExchange,\\n        bytes calldata payload\\n    ) internal {\\n        HashFlowData memory data = abi.decode(payload, (HashFlowData));\\n\\n        require(data.quoteTokenAmount >= toAmount, \\\"HashFlow quoteTokenAmount < toAmount\\\");\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IHashFlowRouter(targetExchange).tradeRFQT{ value: data.baseTokenAmount }(\\n                IQuote.RFQTQuote({\\n                    pool: data.pool,\\n                    externalAccount: data.externalAccount,\\n                    trader: address(this),\\n                    effectiveTrader: msg.sender,\\n                    baseToken: address(0),\\n                    quoteToken: address(toToken),\\n                    effectiveBaseTokenAmount: maxFromAmount > data.baseTokenAmount\\n                        ? data.baseTokenAmount\\n                        : maxFromAmount,\\n                    maxBaseTokenAmount: data.baseTokenAmount,\\n                    maxQuoteTokenAmount: data.quoteTokenAmount,\\n                    quoteExpiry: data.quoteExpiry,\\n                    nonce: data.nonce,\\n                    txid: data.txid,\\n                    signature: data.signature\\n                })\\n            );\\n        } else {\\n            Utils.approve(targetExchange, address(fromToken), data.baseTokenAmount);\\n\\n            IHashFlowRouter(targetExchange).tradeRFQT(\\n                IQuote.RFQTQuote({\\n                    pool: data.pool,\\n                    externalAccount: data.externalAccount,\\n                    trader: address(this),\\n                    effectiveTrader: msg.sender,\\n                    baseToken: address(fromToken),\\n                    quoteToken: data.quoteToken,\\n                    effectiveBaseTokenAmount: maxFromAmount > data.baseTokenAmount\\n                        ? data.baseTokenAmount\\n                        : maxFromAmount,\\n                    maxBaseTokenAmount: data.baseTokenAmount,\\n                    maxQuoteTokenAmount: data.quoteTokenAmount,\\n                    quoteExpiry: data.quoteExpiry,\\n                    nonce: data.nonce,\\n                    txid: data.txid,\\n                    signature: data.signature\\n                })\\n            );\\n        }\\n    }\\n\\n    function swapOnHashFlow(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        HashFlowData memory data = abi.decode(payload, (HashFlowData));\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IHashFlowRouter(exchange).tradeRFQT{ value: data.baseTokenAmount }(\\n                IQuote.RFQTQuote({\\n                    pool: data.pool,\\n                    externalAccount: data.externalAccount,\\n                    trader: address(this),\\n                    effectiveTrader: msg.sender,\\n                    baseToken: address(0),\\n                    quoteToken: address(toToken),\\n                    effectiveBaseTokenAmount: fromAmount > data.baseTokenAmount ? data.baseTokenAmount : fromAmount,\\n                    maxBaseTokenAmount: data.baseTokenAmount,\\n                    maxQuoteTokenAmount: data.quoteTokenAmount,\\n                    quoteExpiry: data.quoteExpiry,\\n                    nonce: data.nonce,\\n                    txid: data.txid,\\n                    signature: data.signature\\n                })\\n            );\\n        } else {\\n            Utils.approve(exchange, address(fromToken), data.baseTokenAmount);\\n\\n            IHashFlowRouter(exchange).tradeRFQT(\\n                IQuote.RFQTQuote({\\n                    pool: data.pool,\\n                    externalAccount: data.externalAccount,\\n                    trader: address(this),\\n                    effectiveTrader: msg.sender,\\n                    baseToken: address(fromToken),\\n                    quoteToken: data.quoteToken,\\n                    effectiveBaseTokenAmount: fromAmount > data.baseTokenAmount ? data.baseTokenAmount : fromAmount,\\n                    maxBaseTokenAmount: data.baseTokenAmount,\\n                    maxQuoteTokenAmount: data.quoteTokenAmount,\\n                    quoteExpiry: data.quoteExpiry,\\n                    nonce: data.nonce,\\n                    txid: data.txid,\\n                    signature: data.signature\\n                })\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/smardex/interfaces/ISmardexRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.5;\\n\\nimport \\\"../../Utils.sol\\\";\\n\\ninterface ISmardexRouter {\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut_);\\n\\n    function swapTokensForExactTokens(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountIn_);\\n\\n    function swapExactETHForTokens(\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256 amountOut_);\\n\\n    function swapTokensForExactETH(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountIn_);\\n\\n    function swapExactTokensForETH(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut_);\\n\\n    function swapETHForExactTokens(\\n        uint256 _amountOut,\\n        address[] calldata _path,\\n        address _to,\\n        uint256 _deadline\\n    ) external payable returns (uint256 amountIn_);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/smardex/Smardex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../Utils.sol\\\";\\nimport \\\"./interfaces/ISmardexRouter.sol\\\";\\n\\ncontract SmarDex {\\n    struct SmarDexData {\\n        address[] path;\\n        address receiver;\\n    }\\n\\n    function swapOnSmarDex(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address targetExchange,\\n        bytes calldata payload\\n    ) internal {\\n        SmarDexData memory data = abi.decode(payload, (SmarDexData));\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            ISmardexRouter(targetExchange).swapExactETHForTokens{ value: fromAmount }(\\n                1,\\n                data.path,\\n                data.receiver,\\n                block.timestamp\\n            );\\n        } else if (address(toToken) == Utils.ethAddress()) {\\n            Utils.approve(address(targetExchange), address(fromToken), fromAmount);\\n            ISmardexRouter(targetExchange).swapExactTokensForETH(\\n                fromAmount,\\n                1,\\n                data.path,\\n                data.receiver,\\n                block.timestamp\\n            );\\n        } else {\\n            Utils.approve(address(targetExchange), address(fromToken), fromAmount);\\n            ISmardexRouter(targetExchange).swapExactTokensForTokens(\\n                fromAmount,\\n                1,\\n                data.path,\\n                data.receiver,\\n                block.timestamp\\n            );\\n        }\\n    }\\n\\n    function buyOnSmarDex(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 maxFromAmount,\\n        uint256 toAmount,\\n        address targetExchange,\\n        bytes calldata payload\\n    ) internal {\\n        SmarDexData memory data = abi.decode(payload, (SmarDexData));\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            ISmardexRouter(targetExchange).swapETHForExactTokens{ value: maxFromAmount }(\\n                toAmount,\\n                data.path,\\n                data.receiver,\\n                block.timestamp\\n            );\\n        } else if (address(toToken) == Utils.ethAddress()) {\\n            Utils.approve(address(targetExchange), address(fromToken), maxFromAmount);\\n            ISmardexRouter(targetExchange).swapTokensForExactETH(\\n                toAmount,\\n                maxFromAmount,\\n                data.path,\\n                data.receiver,\\n                block.timestamp\\n            );\\n        } else {\\n            Utils.approve(address(targetExchange), address(fromToken), maxFromAmount);\\n            ISmardexRouter(targetExchange).swapTokensForExactTokens(\\n                toAmount,\\n                maxFromAmount,\\n                data.path,\\n                data.receiver,\\n                block.timestamp\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/traderjoe-v2.1/ITraderJoeV21Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\nimport \\\"../Utils.sol\\\";\\n\\ninterface ITraderJoeV21Router {\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    struct RouterPath {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        RouterPath memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        RouterPath memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/traderjoe-v2.1/TraderJoeV21.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\nimport \\\"./ITraderJoeV21Router.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\nabstract contract TraderJoeV21 is WethProvider {\\n    struct PartialJoeV21Param {\\n        ITraderJoeV21Router.RouterPath path;\\n        uint256 _deadline;\\n    }\\n\\n    function swapOnTraderJoeV21(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        PartialJoeV21Param memory data = abi.decode(payload, (PartialJoeV21Param));\\n\\n        address _fromToken;\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n            _fromToken = WETH;\\n        } else {\\n            _fromToken = address(fromToken);\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ITraderJoeV21Router(exchange).swapExactTokensForTokens(fromAmount, 1, data.path, address(this), data._deadline);\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function buyOnTraderJoeV21(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        PartialJoeV21Param memory data = abi.decode(payload, (PartialJoeV21Param));\\n\\n        address _fromToken;\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n            _fromToken = WETH;\\n        } else {\\n            _fromToken = address(fromToken);\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ITraderJoeV21Router(exchange).swapTokensForExactTokens(\\n            toAmount,\\n            fromAmount,\\n            data.path,\\n            address(this),\\n            data._deadline\\n        );\\n\\n        if (address(fromToken) == Utils.ethAddress() || address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/traderjoe-v2/ITraderJoeV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\nimport \\\"../Utils.sol\\\";\\n\\ninterface ITraderJoeV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        uint256[] memory _pairBinSteps,\\n        IERC20[] memory _tokenPath,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 _amountOut,\\n        uint256 _amountInMax,\\n        uint256[] memory _pairBinSteps,\\n        IERC20[] memory _tokenPath,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256[] memory amountsIn);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/traderjoe-v2/TraderJoeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\nimport \\\"./ITraderJoeV2Router.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\nabstract contract TraderJoeV2 is WethProvider {\\n    struct PartialJoeV2Param {\\n        uint256[] _pairBinSteps;\\n        IERC20[] _tokenPath;\\n        uint256 _deadline;\\n    }\\n\\n    function swapOnTraderJoeV2(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        PartialJoeV2Param memory data = abi.decode(payload, (PartialJoeV2Param));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ITraderJoeV2Router(exchange).swapExactTokensForTokens(\\n            fromAmount,\\n            1,\\n            data._pairBinSteps,\\n            data._tokenPath,\\n            address(this),\\n            data._deadline\\n        );\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function buyOnTraderJoeV2(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        PartialJoeV2Param memory data = abi.decode(payload, (PartialJoeV2Param));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ITraderJoeV2Router(exchange).swapTokensForExactTokens(\\n            toAmount,\\n            fromAmount,\\n            data._pairBinSteps,\\n            data._tokenPath,\\n            address(this),\\n            data._deadline\\n        );\\n\\n        if (address(fromToken) == Utils.ethAddress() || address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswapv2/dystopia/DystopiaUniswapV2Fork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nimport \\\"../../Utils.sol\\\";\\nimport \\\"../../weth/IWETH.sol\\\";\\nimport \\\"./IDystPair.sol\\\";\\n\\nabstract contract DystopiaUniswapV2Fork {\\n    using SafeMath for uint256;\\n\\n    // Pool bits are 255-161: fee, 160: direction flag, 159-0: address\\n    uint256 constant DYSTOPIA_FEE_OFFSET = 161;\\n    uint256 constant DYSTOPIA_DIRECTION_FLAG = 0x0000000000000000000000010000000000000000000000000000000000000000;\\n\\n    struct DystopiaUniswapV2Data {\\n        address weth;\\n        uint256[] pools;\\n        bool isFeeTokenInRoute;\\n    }\\n\\n    function swapOnDystopiaUniswapV2Fork(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        bytes calldata payload\\n    ) internal {\\n        DystopiaUniswapV2Data memory data = abi.decode(payload, (DystopiaUniswapV2Data));\\n        if (data.isFeeTokenInRoute) {\\n            _swapOnDystopiaUniswapV2ForkWithTransferFee(address(fromToken), fromAmount, data.weth, data.pools);\\n        } else {\\n            _swapOnDystopiaUniswapV2Fork(address(fromToken), fromAmount, data.weth, data.pools);\\n        }\\n    }\\n\\n    function _swapOnDystopiaUniswapV2ForkWithTransferFee(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address weth,\\n        uint256[] memory pools\\n    ) private returns (uint256 tokensBought) {\\n        uint256 pairs = pools.length;\\n\\n        require(pairs != 0, \\\"At least one pool required\\\");\\n\\n        bool tokensBoughtEth;\\n\\n        uint256 balanceBeforeTransfer;\\n        if (tokenIn == Utils.ethAddress()) {\\n            balanceBeforeTransfer = Utils.tokenBalance(weth, address(pools[0]));\\n            IWETH(weth).deposit{ value: amountIn }();\\n            require(IWETH(weth).transfer(address(pools[0]), amountIn));\\n            tokensBought = Utils.tokenBalance(weth, address(pools[0])) - balanceBeforeTransfer;\\n        } else {\\n            balanceBeforeTransfer = Utils.tokenBalance(tokenIn, address(pools[0]));\\n            TransferHelper.safeTransfer(tokenIn, address(pools[0]), amountIn);\\n            tokensBoughtEth = weth != address(0);\\n            tokensBought = Utils.tokenBalance(tokenIn, address(pools[0])) - balanceBeforeTransfer;\\n        }\\n\\n        for (uint256 i = 0; i < pairs; ++i) {\\n            uint256 p = pools[i];\\n            address pool = address(p);\\n            bool direction = p & DYSTOPIA_DIRECTION_FLAG == 0;\\n\\n            address to;\\n            address _nextTokenIn;\\n\\n            if (i + 1 == pairs) {\\n                to = address(this);\\n                _nextTokenIn = pools[i] & DYSTOPIA_DIRECTION_FLAG == 0\\n                    ? IDystPair(pool).token1()\\n                    : IDystPair(pool).token0();\\n            } else {\\n                to = address(pools[i + 1]);\\n                _nextTokenIn = pools[i + 1] & DYSTOPIA_DIRECTION_FLAG == 0\\n                    ? IDystPair(pool).token0()\\n                    : IDystPair(pool).token1();\\n            }\\n\\n            tokensBought = IDystPair(pool).getAmountOut(\\n                tokensBought,\\n                direction ? IDystPair(pool).token0() : IDystPair(pool).token1()\\n            );\\n\\n            (uint256 amount0Out, uint256 amount1Out) = direction\\n                ? (uint256(0), tokensBought)\\n                : (tokensBought, uint256(0));\\n\\n            balanceBeforeTransfer = Utils.tokenBalance(_nextTokenIn, to);\\n            IDystPair(pool).swap(amount0Out, amount1Out, to, \\\"\\\");\\n            tokensBought = Utils.tokenBalance(_nextTokenIn, to) - balanceBeforeTransfer;\\n        }\\n\\n        if (tokensBoughtEth) {\\n            IWETH(weth).withdraw(tokensBought);\\n        }\\n    }\\n\\n    function _swapOnDystopiaUniswapV2Fork(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address weth,\\n        uint256[] memory pools\\n    ) private returns (uint256 tokensBought) {\\n        uint256 pairs = pools.length;\\n\\n        require(pairs != 0, \\\"At least one pool required\\\");\\n\\n        bool tokensBoughtEth;\\n\\n        if (tokenIn == Utils.ethAddress()) {\\n            IWETH(weth).deposit{ value: amountIn }();\\n            require(IWETH(weth).transfer(address(pools[0]), amountIn));\\n        } else {\\n            TransferHelper.safeTransfer(tokenIn, address(pools[0]), amountIn);\\n            tokensBoughtEth = weth != address(0);\\n        }\\n\\n        tokensBought = amountIn;\\n\\n        for (uint256 i = 0; i < pairs; ++i) {\\n            uint256 p = pools[i];\\n            address pool = address(p);\\n            bool direction = p & DYSTOPIA_DIRECTION_FLAG == 0;\\n\\n            tokensBought = IDystPair(pool).getAmountOut(\\n                tokensBought,\\n                direction ? IDystPair(pool).token0() : IDystPair(pool).token1()\\n            );\\n\\n            if (IDystPair(pool).stable()) {\\n                tokensBought = tokensBought.sub(100); // deduce 100wei to mitigate stable swap's K miscalculations\\n            }\\n\\n            (uint256 amount0Out, uint256 amount1Out) = direction\\n                ? (uint256(0), tokensBought)\\n                : (tokensBought, uint256(0));\\n            IDystPair(pool).swap(amount0Out, amount1Out, i + 1 == pairs ? address(this) : address(pools[i + 1]), \\\"\\\");\\n        }\\n\\n        if (tokensBoughtEth) {\\n            IWETH(weth).withdraw(tokensBought);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswapv2/dystopia/IDystPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ninterface IDystPair {\\n    function getAmountOut(uint256, address) external view returns (uint256);\\n\\n    function token0() external returns (address);\\n\\n    function token1() external returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function stable() external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswapv3/ISwapRouterUniV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"../Utils.sol\\\";\\n\\ninterface ISwapRouterUniV3 {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n\\n    function refundETH() external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/uniswapv3/UniswapV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./ISwapRouterUniV3.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\n\\nabstract contract UniswapV3 is WethProvider {\\n    struct UniswapV3Data {\\n        bytes path;\\n        uint256 deadline;\\n    }\\n\\n    function swapOnUniswapV3(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        UniswapV3Data memory data = abi.decode(payload, (UniswapV3Data));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ISwapRouterUniV3(exchange).exactInput(\\n            ISwapRouterUniV3.ExactInputParams({\\n                path: data.path,\\n                recipient: address(this),\\n                deadline: data.deadline,\\n                amountIn: fromAmount,\\n                amountOutMinimum: 1\\n            })\\n        );\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n\\n    function buyOnUniswapV3(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount,\\n        address exchange,\\n        bytes calldata payload\\n    ) internal {\\n        UniswapV3Data memory data = abi.decode(payload, (UniswapV3Data));\\n\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        ISwapRouterUniV3(exchange).exactOutput(\\n            ISwapRouterUniV3.ExactOutputParams({\\n                path: data.path,\\n                recipient: address(this),\\n                deadline: data.deadline,\\n                amountOut: toAmount,\\n                amountInMaximum: fromAmount\\n            })\\n        );\\n\\n        if (address(fromToken) == Utils.ethAddress() || address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Utils.sol\": {\r\n      \"content\": \"/*solhint-disable avoid-low-level-calls */\\n// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../ITokenTransferProxy.sol\\\";\\nimport { IBalancerV2Vault } from \\\"./balancerv2/IBalancerV2Vault.sol\\\";\\n\\ninterface IERC20Permit {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IERC20PermitLegacy {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\nlibrary Utils {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    uint256 private constant MAX_UINT = type(uint256).max;\\n\\n    enum CurveSwapType {\\n        EXCHANGE,\\n        EXCHANGE_UNDERLYING,\\n        EXCHANGE_GENERIC_FACTORY_ZAP\\n    }\\n\\n    /**\\n     * @param fromToken Address of the source token\\n     * @param fromAmount Amount of source tokens to be swapped\\n     * @param toAmount Minimum destination token amount expected out of this swap\\n     * @param expectedAmount Expected amount of destination tokens without slippage\\n     * @param beneficiary Beneficiary address\\n     * 0 then 100% will be transferred to beneficiary. Pass 10000 for 100%\\n     * @param path Route to be taken for this swap to take place\\n     */\\n    struct SellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Path[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct BuyData {\\n        address adapter;\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.Route[] route;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct MegaSwapSellData {\\n        address fromToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address payable beneficiary;\\n        Utils.MegaSwapPath[] path;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct SimpleData {\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        address[] callees;\\n        bytes exchangeData;\\n        uint256[] startIndexes;\\n        uint256[] values;\\n        address payable beneficiary;\\n        address payable partner;\\n        uint256 feePercent;\\n        bytes permit;\\n        uint256 deadline;\\n        bytes16 uuid;\\n    }\\n\\n    struct DirectUniV3 {\\n        address fromToken;\\n        address toToken;\\n        address exchange;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        uint256 feePercent;\\n        uint256 deadline;\\n        address payable partner;\\n        bool isApproved;\\n        address payable beneficiary;\\n        bytes path;\\n        bytes permit;\\n        bytes16 uuid;\\n    }\\n\\n    struct DirectCurveV1 {\\n        address fromToken;\\n        address toToken;\\n        address exchange;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        uint256 feePercent;\\n        int128 i;\\n        int128 j;\\n        address payable partner;\\n        bool isApproved;\\n        CurveSwapType swapType;\\n        address payable beneficiary;\\n        bool needWrapNative;\\n        bytes permit;\\n        bytes16 uuid;\\n    }\\n\\n    struct DirectCurveV2 {\\n        address fromToken;\\n        address toToken;\\n        address exchange;\\n        address poolAddress;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        uint256 feePercent;\\n        uint256 i;\\n        uint256 j;\\n        address payable partner;\\n        bool isApproved;\\n        CurveSwapType swapType;\\n        address payable beneficiary;\\n        bool needWrapNative;\\n        bytes permit;\\n        bytes16 uuid;\\n    }\\n\\n    struct DirectBalancerV2 {\\n        IBalancerV2Vault.BatchSwapStep[] swaps;\\n        address[] assets;\\n        IBalancerV2Vault.FundManagement funds;\\n        int256[] limits;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 expectedAmount;\\n        uint256 deadline;\\n        uint256 feePercent;\\n        address vault;\\n        address payable partner;\\n        bool isApproved;\\n        address payable beneficiary;\\n        bytes permit;\\n        bytes16 uuid;\\n    }\\n\\n    struct Adapter {\\n        address payable adapter;\\n        uint256 percent;\\n        uint256 networkFee; //NOT USED\\n        Route[] route;\\n    }\\n\\n    struct Route {\\n        uint256 index; //Adapter at which index needs to be used\\n        address targetExchange;\\n        uint256 percent;\\n        bytes payload;\\n        uint256 networkFee; //NOT USED - Network fee is associated with 0xv3 trades\\n    }\\n\\n    struct MegaSwapPath {\\n        uint256 fromAmountPercent;\\n        Path[] path;\\n    }\\n\\n    struct Path {\\n        address to;\\n        uint256 totalNetworkFee; //NOT USED - Network fee is associated with 0xv3 trades\\n        Adapter[] adapters;\\n    }\\n\\n    function ethAddress() internal pure returns (address) {\\n        return ETH_ADDRESS;\\n    }\\n\\n    function maxUint() internal pure returns (uint256) {\\n        return MAX_UINT;\\n    }\\n\\n    function approve(\\n        address addressToApprove,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token != ETH_ADDRESS) {\\n            IERC20 _token = IERC20(token);\\n\\n            uint256 allowance = _token.allowance(address(this), addressToApprove);\\n\\n            if (allowance < amount) {\\n                _token.safeApprove(addressToApprove, 0);\\n                _token.safeIncreaseAllowance(addressToApprove, MAX_UINT);\\n            }\\n        }\\n    }\\n\\n    function transferTokens(\\n        address token,\\n        address payable destination,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (token == ETH_ADDRESS) {\\n                (bool result, ) = destination.call{ value: amount, gas: 10000 }(\\\"\\\");\\n                require(result, \\\"Failed to transfer Ether\\\");\\n            } else {\\n                IERC20(token).safeTransfer(destination, amount);\\n            }\\n        }\\n    }\\n\\n    function tokenBalance(address token, address account) internal view returns (uint256) {\\n        if (token == ETH_ADDRESS) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function permit(address token, bytes memory permit) internal {\\n        if (permit.length == 32 * 7) {\\n            (bool success, ) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n\\n        if (permit.length == 32 * 8) {\\n            (bool success, ) = token.call(abi.encodePacked(IERC20PermitLegacy.permit.selector, permit));\\n            require(success, \\\"Permit failed\\\");\\n        }\\n    }\\n\\n    function transferETH(address payable destination, uint256 amount) internal {\\n        if (amount > 0) {\\n            (bool result, ) = destination.call{ value: amount, gas: 10000 }(\\\"\\\");\\n            require(result, \\\"Transfer ETH failed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/weth/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external payable virtual;\\n\\n    function withdraw(uint256 amount) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/WethProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\n\\ncontract WethProvider {\\n    /*solhint-disable var-name-mixedcase*/\\n    address public immutable WETH;\\n\\n    /*solhint-enable var-name-mixedcase*/\\n\\n    constructor(address weth) public {\\n        WETH = weth;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/wombat/IWombatRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\nimport \\\"../Utils.sol\\\";\\n\\ninterface IWombatRouter {\\n    function swap(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _fromAmount,\\n        uint256 _minimumToAmount,\\n        address _to,\\n        uint256 _deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/wombat/Wombat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity 0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../weth/IWETH.sol\\\";\\nimport \\\"../WethProvider.sol\\\";\\nimport \\\"./IWombatRouter.sol\\\";\\nimport \\\"../Utils.sol\\\";\\n\\nabstract contract Wombat is WethProvider {\\n    function swapOnWombat(\\n        IERC20 fromToken,\\n        IERC20 toToken,\\n        uint256 fromAmount,\\n        address exchange\\n    ) internal {\\n        address _fromToken = address(fromToken) == Utils.ethAddress() ? WETH : address(fromToken);\\n        address _toToken = address(toToken) == Utils.ethAddress() ? WETH : address(toToken);\\n\\n        if (address(fromToken) == Utils.ethAddress()) {\\n            IWETH(WETH).deposit{ value: fromAmount }();\\n        }\\n\\n        Utils.approve(address(exchange), _fromToken, fromAmount);\\n\\n        IWombatRouter(exchange).swap(_fromToken, _toToken, fromAmount, 1, address(this), block.timestamp);\\n\\n        if (address(toToken) == Utils.ethAddress()) {\\n            IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetExchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.Route[]\",\"name\":\"route\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "BscAdapter02", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}