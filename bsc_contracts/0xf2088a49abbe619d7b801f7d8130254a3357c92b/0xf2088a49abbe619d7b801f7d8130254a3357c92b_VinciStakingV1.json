{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vinciStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.14 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./inheritables/tiers.sol\\\";\\nimport \\\"./inheritables/checkpoints.sol\\\";\\nimport \\\"./inheritables/penaltyPot.sol\\\";\\n\\n//                          &&&&&%%%%%%%%%%#########*\\n//                      &&&&&&&&%%%%%%%%%%##########(((((\\n//                   @&&&&&&&&&%%%%%%%%%##########((((((((((\\n//                @@&&&&&&&&&&%%%%%%%%%#########(((((((((((((((\\n//              @@@&&&&&&&&%%%%%%%%%%##########((((((((((((((///(\\n//            %@@&&&&&&               ######(                /////.\\n//           @@&&&&&&&&&           #######(((((((       ,///////////\\n//          @@&&&&&&&&%%%           ####((((((((((*   .//////////////\\n//         @@&&&&&&&%%%%%%          ##((((((((((((/  ////////////////*\\n//         &&&&&&&%%%%%%%%%          *(((((((((//// //////////////////\\n//         &&&&%%%%%%%%%####          .((((((/////,////////////////***\\n//        %%%%%%%%%%%########.          ((/////////////////***********\\n//         %%%%%##########((((/          /////////////****************\\n//         ##########((((((((((/          ///////*********************\\n//         #####((((((((((((/////          /*************************,\\n//          #(((((((((////////////          *************************\\n//           (((((//////////////***          ***********************\\n//            ,//////////***********        *************,*,,*,,**\\n//              ///******************      *,,,,,,,,,,,,,,,,,,,,,\\n//                ******************,,    ,,,,,,,,,,,,,,,,,,,,,\\n//                   ****,,*,,,,,,,,,,,  ,,,,,,,,,,,,,,,,,,,\\n//                      ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\n//                          .,,,,,,,,,,,,,,,,,,,,,,,\\n\\n/// @title Version 1 of Vinci staking pool\\n/// @notice A smart contract to handle staking of Vinci ERC20 token and grant Picasso club tiers and superstaker status\\n/// @dev The correct functioning of the contract having a positive funds for staking rewards\\ncontract VinciStakingV1 is AccessControl, TierManager, Checkpoints, PenaltyPot {\\n    bytes32 public constant CONTRACT_OPERATOR_ROLE = keccak256(\\\"CONTRACT_OPERATOR_ROLE\\\");\\n    bytes32 public constant CONTRACT_FUNDER_ROLE = keccak256(\\\"CONTRACT_FUNDER_ROLE\\\");\\n\\n    using SafeERC20 for IERC20;\\n\\n    // balances\\n    uint256 public vinciStakingRewardsFunds;\\n    // Tokens that are staked and actively earning rewards\\n    mapping(address => uint256) public activeStaking;\\n    // Tokens that have been unstaked, but are not claimable yet (2 weeks delay)\\n    mapping(address => uint256) public currentlyUnstakingBalance;\\n    // Timestamp when the currentlyUnstakingBalance is available for claim\\n    mapping(address => uint256) public unstakingReleaseTime;\\n    // Total vinci rewards at the end of the current staking period of each user\\n    mapping(address => uint256) public fullPeriodAprRewards;\\n    // Airdropped tokens of each user. They are unclaimable until crossing the next period\\n    mapping(address => uint256) public airdroppedBalance;\\n    // Tokens that have been unlocked in previous checkpoints and are now claimable\\n    mapping(address => uint256) public claimableBalance;\\n\\n    // constants\\n    uint256 public constant UNSTAKING_LOCK_TIME = 14 days;\\n    uint256 public constant BASE_APR = 550; // 5.5%\\n    uint256 public constant BASIS_POINTS = 10000;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event UnstakingInitiated(address indexed user, uint256 amount);\\n    event UnstakingCompleted(address indexed user, uint256 amount);\\n    event Claimed(address indexed user, uint256 amount);\\n    event AirdroppedBatch(address[] users, uint256[] amounts);\\n    event StakingRewardsFunded(address indexed funder, uint256 amount);\\n    event NonAllocatedStakingRewardsFundsRetrieved(address indexed funder, uint256 amount);\\n    event MissedRewardsPayout(address indexed user, uint256 entitledPayout, uint256 actualPayout);\\n    event MissedRewardsAllocation(address indexed user, uint256 entitledPayout, uint256 actualPayout);\\n    event StakingRewardsAllocated(address indexed user, uint256 amount);\\n    event StakeholderFinished(address indexed user);\\n    event Relocked(address indexed user);\\n    event CheckpointCrossed(address indexed user);\\n    event NotifyCannotCrossCheckpointYet(address indexed user);\\n\\n    error NothingToClaim();\\n    error NothingToWithdraw();\\n    error InvalidAmount();\\n    error CannotCrossCheckpointYet();\\n    error NonExistingStaker();\\n    error UnstakedAmountNotReleasedYet();\\n    error NotEnoughStakingBalance();\\n    error ArrayTooLong();\\n    error CantRelockBeforeCrossingCheckpoint();\\n    error CheckpointHasToBeCrossedFirst();\\n\\n    // Aggregation of all VINCI staked in the contract by all stakers\\n    uint256 public totalVinciStaked;\\n\\n    /// ERC20 vinci token\\n    IERC20 public immutable vinciToken;\\n\\n    constructor(ERC20 _vinciTokenAddress, uint128[] memory _tierThresholdsInVinci)\\n        TierManager(_tierThresholdsInVinci)\\n    {\\n        vinciToken = IERC20(_vinciTokenAddress);\\n\\n        // note that the deployer of the contract is automatically granted the DEFAULT_ADMIN_ROLE but not CONTRACT_FUNDER_ROLE\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CONTRACT_OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    /// ================== User functions =============================\\n\\n    /// @dev Stake VINCI tokens to the contract\\n    function stake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    /// @dev Contract operator can stake tokens on behalf of users\\n    function batchStakeTo(address[] calldata users, uint256[] calldata amounts)\\n        external\\n        onlyRole(CONTRACT_OPERATOR_ROLE)\\n    {\\n        require(users.length == amounts.length, \\\"Input lengths must match\\\");\\n        // This is gas inefficient, as the ERC20 transaction takes place for every stake, instead of grouping the\\n        // total amount and making a single transfer. However, this function is meant to be used only once at the\\n        // beginning and the saved gas  doesn't compensate the added contract complexity\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            _stake(users[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @dev Unstake VINCI tokens from the contract\\n    function unstake(uint256 amount) external {\\n        if (amount == 0) revert InvalidAmount();\\n        // unstaking has a high cost in this echosystem:\\n        // - loosing already earned staking rewards,\\n        // - being downgraded in tier\\n        // - a lockup of 2 weeks before the unstake can be completed\\n        // - potentially losing your staking streak if too much is unstaked\\n        address sender = msg.sender;\\n        // when unstaking, a percentage of the rewards, proportional to the current stake will be withdrawn as a penalty\\n        // from all the difference rewards sources: baseAPR, airdrops, penaltyPot.\\n        // This penalty is distributed to the penalty pot\\n        uint256 stakedBefore = activeStaking[sender];\\n        if (amount > stakedBefore) revert NotEnoughStakingBalance();\\n        // force users to cross checkpoint if timestamp allows it to avoid undesired contract states\\n        uint256 _checkpoint = checkpoint[sender];\\n        if (block.timestamp > _checkpoint) revert CheckpointHasToBeCrossedFirst();\\n        uint256 _userFullPeriodRewards = fullPeriodAprRewards[sender];\\n        // These rewards are rounded up due to BASIS_POINTS. Rounding issues may arise from there\\n        uint256 earnedRewards =\\n            _getCurrentUnclaimableRewardsFromBaseAPR(stakedBefore, _checkpoint, _userFullPeriodRewards);\\n        // the ratio between the penalization to the fullperiod and the penalization to the earned rewards is the same\\n        // the earned rewards (_getCurrentUnclaimableRewardsFromBaseAPR()) is calculated using the full period\\n        // as a baseline. Therefore, updating the fullperiod rewards is enough to also update the earned rewards\\n        uint256 fullPeriodRewardsReduction = _userFullPeriodRewards * amount / stakedBefore;\\n        uint256 penaltyToEarnedRewards = earnedRewards * amount / stakedBefore;\\n        // This always holds: fullPeriodRewardsReduction >= penaltyToEarnedRewards\\n        uint256 toRewardsFund = fullPeriodRewardsReduction - penaltyToEarnedRewards;\\n        // fullPeriodRewardsReduction will always be lower than fullPeriodAprRewards[sender] because it is taken as a ratio\\n        fullPeriodAprRewards[sender] -= fullPeriodRewardsReduction;\\n        // of the penalizatoin to the fullPeriodAprRewards, the part corresponding to the earned rewards goes to the\\n        // penaltyPot, while the rest goes back to the rewards fund\\n        vinciStakingRewardsFunds += toRewardsFund;\\n\\n        uint256 penaltyToAirdrops = airdroppedBalance[sender] * amount / stakedBefore;\\n        airdroppedBalance[sender] -= penaltyToAirdrops;\\n\\n        uint256 penaltyToPenaltyPot = _penalizePenaltyPotShare(sender, amount, stakedBefore);\\n\\n        uint256 totalPenalization = penaltyToEarnedRewards + penaltyToAirdrops + penaltyToPenaltyPot;\\n\\n        if (_isSuperstaker(sender)) {\\n            // we only reduce the amount eligible for penaltyPotRewards if already a superstaker\\n            // no need to _bufferPenaltyPot here, as it is already done by _penalizePenaltyPotShare() above\\n            _removeFromEligibleSupplyForPenaltyPot(amount);\\n        }\\n\\n        // It is OK that the penalized user also gets back a small fraction of its own penalty.\\n        // the fraction might not be so small if the staker is large ...\\n        _depositToPenaltyPot(totalPenalization);\\n\\n        // modify these ones only after the modifications to penalty pot\\n        totalVinciStaked -= amount;\\n        activeStaking[sender] -= amount;\\n        currentlyUnstakingBalance[sender] += amount;\\n        unstakingReleaseTime[sender] = block.timestamp + UNSTAKING_LOCK_TIME;\\n\\n        // in case of unstaking all the amount, the user looses tier, checkpoint history etc\\n        if (amount == stakedBefore) {\\n            // finished stakeholders can still claim pending claims or pending unstaking tokens\\n            _setTier(sender, 0);\\n            // deleting the checkpointMultiplierReduction will also remove the superstaker status\\n            _resetCheckpointInfo(sender);\\n            emit StakeholderFinished(sender);\\n        } else {\\n            uint256 currentTier = userTier[sender];\\n            // if current tier is 0, there is no need to update anything as it can only be downgraded\\n            if ((currentTier > 0) && (thresholds[currentTier - 1] > stakedBefore - amount)) {\\n                _setTier(sender, _calculateTier(stakedBefore - amount));\\n            }\\n        }\\n        emit UnstakingInitiated(sender, amount);\\n    }\\n\\n    /// @notice Function to claim rewards in the claimable balance\\n    function claim() external {\\n        // finished stakeholders should also be able to claim their tokens also after being finished as stakeholders\\n        address sender = msg.sender;\\n\\n        uint256 amount = claimableBalance[sender];\\n        if (amount == 0) revert NothingToClaim();\\n\\n        delete claimableBalance[sender];\\n        emit Claimed(sender, amount);\\n        _sendVinci(sender, amount);\\n    }\\n\\n    /// @notice Function to withdraw unstaked tokens, only after the lockup period has passed\\n    function withdraw() external {\\n        // finished stakeholders should also be able to withdraw their tokens also after being finished as stakeholders\\n        address sender = msg.sender;\\n\\n        if (block.timestamp < unstakingReleaseTime[sender]) revert UnstakedAmountNotReleasedYet();\\n\\n        uint256 amount = currentlyUnstakingBalance[sender];\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        // delele storage variables to get gas refund\\n        delete currentlyUnstakingBalance[sender];\\n        delete unstakingReleaseTime[sender];\\n        emit UnstakingCompleted(sender, amount);\\n        _sendVinci(sender, amount);\\n    }\\n\\n    /// @notice Function to relock the stake, which will reevaluate tier and postpone the checkpoint by the same amount\\n    ///         of months as the current period\\n    function relock() external {\\n        address sender = msg.sender;\\n        if (!_existingUser(sender)) revert NonExistingStaker();\\n        if (_canCrossCheckpoint(sender)) revert CantRelockBeforeCrossingCheckpoint();\\n\\n        uint256 staked = activeStaking[sender];\\n        uint256 previousNextCheckpoint = checkpoint[sender];\\n\\n        _setTier(sender, _calculateTier(staked));\\n        uint256 newCheckpoint = _postponeCheckpointFromCurrentTimestamp(sender);\\n\\n        // extend the baseAprBalanceNextCP with the length from current next checkpoint until new next checkpoint\\n        // if checkpoing[sender] < previousNextCheckpoint, tx would revert above due to _canCrossCheckpoint() = true\\n        uint256 extraRewards = _estimatePeriodRewards(staked, newCheckpoint - previousNextCheckpoint);\\n        uint256 currentFunds = vinciStakingRewardsFunds;\\n        if (extraRewards > currentFunds) {\\n            emit MissedRewardsAllocation(sender, extraRewards, currentFunds);\\n            extraRewards = currentFunds;\\n        }\\n        if (extraRewards > 0) {\\n            fullPeriodAprRewards[sender] += extraRewards;\\n            vinciStakingRewardsFunds -= extraRewards;\\n        }\\n\\n        emit Relocked(sender);\\n    }\\n\\n    /// @notice Allows a user to cross the checkpoint, and turn all the unvested rewards into claimable rewards\\n    function crossCheckpoint() external {\\n        if (!_canCrossCheckpoint(msg.sender)) revert CannotCrossCheckpointYet();\\n        _crossCheckpoint(msg.sender);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// Contract Management Functions\\n\\n    function distributePenaltyPot() external onlyRole(CONTRACT_OPERATOR_ROLE) {\\n        _distributePenaltyPot();\\n    }\\n\\n    /// @notice Allows the contract operator to cross the checkpoint in behalf of a user\\n    function crossCheckpointTo(address[] calldata to) external onlyRole(CONTRACT_OPERATOR_ROLE) {\\n        if (to.length > 250) revert ArrayTooLong();\\n        // here we don't revert if one of them cannot cross, we simply skip it but throw an event\\n        for (uint256 i = 0; i < to.length; i++) {\\n            if (_canCrossCheckpoint(to[i])) {\\n                _crossCheckpoint(to[i]);\\n            } else {\\n                emit NotifyCannotCrossCheckpointYet(to[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Allows airdropping vinci to multiple current stakers. IMPORTANT: if any address is not a current\\n    ///         staker, the whole transaction will revert. All addresses must have an active staking at the time of the\\n    ///         airdrop.\\n    function batchAirdrop(address[] calldata users, uint256[] calldata amount)\\n        external\\n        onlyRole(CONTRACT_OPERATOR_ROLE)\\n    {\\n        if (users.length != amount.length) revert(\\\"Lengths must match\\\");\\n        uint256 n = users.length;\\n\\n        uint256 total;\\n        for (uint256 i = 0; i < n; i++) {\\n            require(_existingUser(users[i]), \\\"Users must have active stake to receive airdrops\\\");\\n            airdroppedBalance[users[i]] += amount[i];\\n            total += amount[i];\\n        }\\n\\n        emit AirdroppedBatch(users, amount);\\n        _receiveVinci(total);\\n    }\\n\\n    // only the vinci team can fund the staking rewards, because they can retrieve it later\\n    function fundContractWithVinciForRewards(uint256 amount) external onlyRole(CONTRACT_FUNDER_ROLE) {\\n        if (amount == 0) revert InvalidAmount();\\n        vinciStakingRewardsFunds += amount;\\n        emit StakingRewardsFunded(msg.sender, amount);\\n        _receiveVinci(amount);\\n    }\\n\\n    function removeNonAllocatedStakingRewards(uint256 amount) external onlyRole(CONTRACT_FUNDER_ROLE) {\\n        vinciStakingRewardsFunds -= amount;\\n        emit NonAllocatedStakingRewardsFundsRetrieved(msg.sender, amount);\\n        _sendVinci(msg.sender, amount);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// View functions\\n\\n    /// @notice All unvested rewards that are not claimable yet. They can come from 3 different sources:\\n    ///         - airdoprs,\\n    ///         - corresponding share of the penaltyPot\\n    ///         - basic staking rewards (5.5% APR on the user's staking balance)\\n    function getTotalUnclaimableBalance(address user) public view returns (uint256) {\\n        uint256 stakingbalance = activeStaking[user];\\n        return airdroppedBalance[user] + _getAllocatedSharePenaltyPot(user, stakingbalance)\\n            + _getCurrentUnclaimableRewardsFromBaseAPR(stakingbalance, checkpoint[user], fullPeriodAprRewards[user]);\\n    }\\n\\n    /// @notice Part of the unvested rewards that come from airdrops\\n    function getUnclaimableFromAirdrops(address user) external view returns (uint256) {\\n        return airdroppedBalance[user];\\n    }\\n\\n    /// @notice Part of the unvested rewards that come from the basic staking rewards (5.5% on the staking balance)\\n    function getUnclaimableFromBaseApr(address user) external view returns (uint256) {\\n        return\\n            _getCurrentUnclaimableRewardsFromBaseAPR(activeStaking[user], checkpoint[user], fullPeriodAprRewards[user]);\\n    }\\n\\n    /// @notice Part of the unvested rewards that are the user's share of the current penalty pot\\n    ///         This unclaimable does not account for the buffered decimals. These are 'postponed' until next distribution\\n    function getUnclaimableFromPenaltyPot(address user) external view returns (uint256) {\\n        return _getAllocatedSharePenaltyPot(user, activeStaking[user]);\\n    }\\n\\n    /// @notice Estimates the unvested rewards comming from the penalty pot, including the tokens from the pot that\\n    ///         have not been distributed yet\\n    function estimatedShareOfPenaltyPot(address user) external view returns (uint256) {\\n        return _estimateUserShareOfPenaltyPot(user, activeStaking[user]);\\n    }\\n\\n    /// @notice Returns the current supply eligible for penalty pot rewards\\n    function getSupplyEligibleForPenaltyPot() external view returns (uint256) {\\n        return _getSupplyEligibleForAllocation();\\n    }\\n\\n    /// @notice When a user unstakes, those tokens are locked for 15 days, not earning rewards. Once the lockup period\\n    ///         ends, these toknes are available for withdraw. This function returns the amount of tokens available\\n    ///         for withdraw.\\n    function getUnstakeAmountAvailableForWithdrawal(address user) external view returns (uint256) {\\n        return (unstakingReleaseTime[user] > block.timestamp) ? 0 : currentlyUnstakingBalance[user];\\n    }\\n\\n    /// @notice When a user unstakes, a penalization is imposed on the three different sources of unvested rewards.\\n    ///         This function returns what would be the potential loss (aggregation of the three sources)\\n    ///         This will help being transparent with the user and let them know how much they will lose if they\\n    ///         actually unstake\\n    function estimateRewardsLossIfUnstaking(address user, uint256 unstakeAmount) external view returns (uint256) {\\n        return getTotalUnclaimableBalance(user) * unstakeAmount / activeStaking[user];\\n    }\\n\\n    /// @notice Total VINCI collected in the penalty pot from penalizations to unstakers\\n    function penaltyPot() external view returns (uint256) {\\n        return _getTotalPenaltyPot();\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// @notice Timestamp of the next checkpoint for the user\\n    function nextCheckpointTimestamp(address user) external view returns (uint256) {\\n        return checkpoint[user];\\n    }\\n\\n    /// @notice Duration in months of the current checkpoint period (it reduces every time a checkpoint is crossed)\\n    function currentCheckpointDurationInMonths(address user) external view returns (uint256) {\\n        return _checkpointMultiplier(user);\\n    }\\n\\n    /// @notice Returns if the checkpoint information of `user` is up-to-date\\n    ///         If the user does not exist, it also returns true, as there is no info to be updated\\n    function canCrossCheckpoint(address user) external view returns (bool) {\\n        return _canCrossCheckpoint(user);\\n    }\\n\\n    /// @notice Returns True if the user has earned the status of SuperStaker. This is gained once the user has\\n    ///         crossed at least one checkpoint with non-zero staking. The SuperStaker status is lost when all the\\n    ///          balance is unstaked\\n    function isSuperstaker(address user) external view returns (bool) {\\n        return _isSuperstaker(user);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// @notice Returns the minimum amount of VINCI to enter in `tier`\\n    function getTierThreshold(uint256 tier) external view returns (uint256) {\\n        return _tierThreshold(tier);\\n    }\\n\\n    /// @notice Returns the number of current tiers\\n    function getNumberOfTiers() external view returns (uint256) {\\n        return _numberOfTiers();\\n    }\\n\\n    /// @notice Returns the potential tier for a given `balance` of VINCI tokens if evaluated now\\n    function calculateTier(uint256 vinciBalance) external view returns (uint256) {\\n        return _calculateTier(vinciBalance);\\n    }\\n\\n    /// @notice Updates the thresholds to access each tier\\n    function updateTierThresholds(uint128[] memory tierThresholds) external onlyRole(CONTRACT_OPERATOR_ROLE) {\\n        _updateTierThresholds(tierThresholds);\\n    }\\n\\n    function getUserTier(address user) external view returns (uint256) {\\n        return _getUserTier(user);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// INTERNAL FUNCTIONS\\n\\n    function _stake(address user, uint256 amount) internal {\\n        if (amount == 0) revert InvalidAmount();\\n\\n        uint256 stakingBalance = activeStaking[user];\\n\\n        if (stakingBalance == 0) {\\n            // initiate stakers that have never staked before (or they unstaked everything)\\n            _initCheckpoint(user);\\n            _setTier(user, _calculateTier(amount));\\n        } else if (_canCrossCheckpoint(user)) {\\n            revert CheckpointHasToBeCrossedFirst();\\n        } else if (_isSuperstaker(user)) {\\n            // no need to track the supplyEligibleForPenaltyPot specific of a user, because that is exactly the activeStaking\\n            // We only need to buffer any penalty pot earned so far, before changing the activeStaking\\n            _bufferPenaltyPotAllocation(user, stakingBalance);\\n            // This addition is not specific for the user, but for the entire penalty pot supply\\n            _addToEligibleSupplyForPenaltyPot(amount);\\n        }\\n\\n        // we save the rewards for the entire period since now until next checkpoint here because they will only be\\n        // unlocked in the next checkpoint anyways\\n        uint256 rewards = _estimatePeriodRewards(amount, checkpoint[user] - block.timestamp);\\n        uint256 availableFunds = vinciStakingRewardsFunds;\\n        if (rewards > availableFunds) {\\n            // only one reading from storage to save gas\\n            emit MissedRewardsAllocation(user, rewards, availableFunds);\\n            rewards = availableFunds;\\n        } else {\\n            emit StakingRewardsAllocated(user, rewards);\\n        }\\n\\n        activeStaking[user] += amount;\\n        totalVinciStaked += amount;\\n        fullPeriodAprRewards[user] += rewards;\\n        vinciStakingRewardsFunds -= rewards;\\n\\n        emit Staked(user, amount);\\n        _receiveVinci(amount);\\n    }\\n\\n    // @dev The callers of this function need to make sure that the checkpoint can be crossed\\n    function _crossCheckpoint(address user) internal {\\n        uint256 activeStake = activeStaking[user];\\n        uint256 penaltyPotShare = _isSuperstaker(user) ? _redeemPenaltyPot(user, activeStake) : 0;\\n        uint256 _rewardsFunds = vinciStakingRewardsFunds;\\n\\n        uint256 claimableAddition = fullPeriodAprRewards[user] + airdroppedBalance[user] + penaltyPotShare;\\n\\n        delete airdroppedBalance[user];\\n\\n        // user will automatically become superStaker after the call to _postponeCheckpoint()\\n        if (!_isSuperstaker(user)) {\\n            _bufferPenaltyPotAllocation(user, 0);\\n            _addToEligibleSupplyForPenaltyPot(activeStake);\\n        }\\n\\n        // we store newCheckpoint in memory to avoid reading it in the rest of this function (to save gas)\\n        (uint256 missedPeriod, uint256 currentPeriodStartTime, uint256 newCheckpoint) = _postponeCheckpoint(user);\\n\\n        if (missedPeriod > 0) {\\n            // if the user missed a checkpoint, we need to allocate the rewards for the missed period\\n            // however, we need to update the rewardsPeriodStartTime to not double count the rewards\\n            uint256 missedRewards = _estimatePeriodRewards(activeStake, missedPeriod);\\n            // no need to be gas efficient here as this will happen very rarely\\n            if (missedRewards > _rewardsFunds) {\\n                // this is a missed PAYOUT because it goes directly into claimable\\n                emit MissedRewardsPayout(user, missedRewards, _rewardsFunds);\\n                missedRewards = _rewardsFunds;\\n            }\\n\\n            // these missed rewards would go straight into claimable, as they come from old uncrossed checkpoints\\n            claimableAddition += missedRewards;\\n            _rewardsFunds -= missedRewards;\\n        }\\n\\n        // only update storage variable if gt 0 to save gas\\n        if (claimableAddition > 0) {\\n            claimableBalance[user] += claimableAddition;\\n        }\\n\\n        // set the rewards that will be accrued during the next period. Do this only after postponing checkpoint\\n        uint256 rewards = _estimatePeriodRewards(activeStake, newCheckpoint - currentPeriodStartTime);\\n        if (rewards > _rewardsFunds) {\\n            emit MissedRewardsAllocation(user, rewards, _rewardsFunds);\\n            rewards = _rewardsFunds;\\n        }\\n        // when there are no funds in the contract, the rewards allocated are smaller, and that means that the rewards\\n        // will be smaller over the entier period\\n        fullPeriodAprRewards[user] = rewards;\\n        _rewardsFunds -= rewards;\\n\\n        // only update storage variable at the end with the new value after all modifications\\n        vinciStakingRewardsFunds = _rewardsFunds;\\n\\n        // Evaluate new tier every time the checkpoint is crossed\\n        _setTier(user, _calculateTier(activeStake));\\n        emit CheckpointCrossed(user);\\n    }\\n\\n    function _receiveVinci(uint256 amount) internal {\\n        vinciToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function _sendVinci(address to, uint256 amount) internal {\\n        vinciToken.safeTransfer(to, amount);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////\\n    /// Internal view/pure functions\\n\\n    function _estimatePeriodRewards(uint256 amount, uint256 duration) internal pure returns (uint256) {\\n        // This should never ever happen, but we put this to avoid underflows\\n        return amount * BASE_APR * duration / (BASIS_POINTS * 365 days);\\n    }\\n\\n    /// A user checkpoint=0 until the user is registered and it is set back to zero when is _finalized\\n    function _existingUser(address _user) internal view returns (bool) {\\n        return (checkpoint[_user] > 0) && (_user != address(0));\\n    }\\n\\n    function _getCurrentUnclaimableRewardsFromBaseAPR(\\n        uint256 stakingBalance,\\n        uint256 _checkpoint,\\n        uint256 _userFullPeriodRewards\\n    ) internal view returns (uint256) {\\n        // This is tricky as the rewards schedule can change with stakes and unstakes from users. However:\\n        // we know the final rewards because that is the `baseAprBalance` and we know how much time until the next checkpoint\\n        // Therefore, the rewards earned so far are the total minus the ones not earned yet, that will be earned from\\n        // now until the next checkpoint\\n        if (stakingBalance == 0) return 0;\\n        // if checkpoint can be crossed already, the total APR is the one accumulated in the full period\\n        if (_checkpoint <= block.timestamp) return _userFullPeriodRewards;\\n        // block.timestamp is always < checkpoint[user] because otherwise it could cross checkpoint\\n        uint256 futureRewards = _estimatePeriodRewards(stakingBalance, _checkpoint - block.timestamp);\\n        // this subtraction can underflow due to rounding issues in _estimatePeriodRewards()\\n        return futureRewards > _userFullPeriodRewards ? 0 : _userFullPeriodRewards - futureRewards;\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/inheritables/tiers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nerror NonExistingTier();\\nerror TooManyTiers();\\n\\ncontract TierManager is AccessControl {\\n    uint256 public constant MAX_NUMBER_OF_TIERS = 10;\\n\\n    /// User tier which is granted according to the tier thresholds in vinci.\\n    /// Tiers are re-evaluated in certain occasions (unstake, relock, crossing a checkpoint)\\n    mapping(address => uint256) public userTier;\\n\\n    // uint128 should be more than enough for the highest tier threshold at the lowest price possible\\n    uint128[] thresholds;\\n\\n    event TiersThresholdsUpdated(uint128[] vinciThresholds);\\n    event TierSet(address indexed user, uint256 newTier);\\n\\n    error NoTiersSet();\\n\\n    constructor(uint128[] memory _tierThresholdsInVinci) {\\n        _updateTierThresholds(_tierThresholdsInVinci);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////\\n    // View functions\\n\\n    /// @notice Returns the minimum amount of VINCI to enter in `tier`\\n    function _tierThreshold(uint256 tier) internal view returns (uint256) {\\n        if (tier == 0) return 0;\\n        if (tier > thresholds.length) revert NonExistingTier();\\n        return thresholds[tier - 1];\\n    }\\n\\n    /// @notice Returns the number of current tiers\\n    function _numberOfTiers() internal view returns (uint256) {\\n        return thresholds.length;\\n    }\\n\\n    /// @notice Returns the potential tier for a given `balance` of VINCI tokens if evaluated now\\n    function _calculateTier(uint256 vinciAmount) internal view returns (uint256 _tier) {\\n        if (thresholds.length == 0) revert NoTiersSet();\\n        if (vinciAmount == 0) return 0;\\n\\n        uint256 numberOfTiers = thresholds.length;\\n        uint256 tier = 0;\\n        for (uint256 i = 0; i < numberOfTiers + 1; i++) {\\n            if (tier == numberOfTiers) break;\\n            if (vinciAmount < thresholds[i]) break;\\n            tier += 1;\\n        }\\n        return tier;\\n    }\\n\\n    /// @notice Returns the current tier for a given user. It manages the edge case in which a user has the top tier,\\n    ///         and later the number of tiers is reduced. In this case the user should get the top tier. However, if\\n    ///         the number of tiers is increased again, it should get back the old tier\\n    function _getUserTier(address _user) internal view returns (uint256) {\\n        uint256 _tier = userTier[_user];\\n        uint256 nTiers = _numberOfTiers();\\n        return _tier > nTiers ? nTiers : _tier;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Management functions\\n\\n    /// @notice Allows to update the tier threholds in VINCI\\n    /// @dev    The contract owner will have execute this periodically to mimic the vinci price in usd for thresholds\\n    function _updateTierThresholds(uint128[] memory _tierThresholdsInVinci) internal {\\n        if (_tierThresholdsInVinci.length > MAX_NUMBER_OF_TIERS) revert TooManyTiers();\\n        require(_tierThresholdsInVinci.length > 0, \\\"input at least one threshold\\\");\\n        thresholds = _tierThresholdsInVinci;\\n        emit TiersThresholdsUpdated(_tierThresholdsInVinci);\\n    }\\n\\n    // @dev Sets the tier for a given user\\n    function _setTier(address _user, uint256 _newTier) internal {\\n        userTier[_user] = _newTier;\\n        emit TierSet(_user, _newTier);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/inheritables/checkpoints.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\ncontract Checkpoints {\\n    /// user timestamp when next checkpoint can be crossed\\n    mapping(address => uint256) internal checkpoint;\\n    /// checkpoints are postponed in multiples of 30 days. The checkpointReduction is how many blocks of 30 days the current checkpoint has been reduced from the BASE_CHECKPOINT_MULTIPLIER.\\n    mapping(address => uint256) internal checkpointMultiplierReduction; // Initialized at 0, increasing up to 5\\n\\n    /// the checkpoint multiplier is reduced by 1 block every time a user crosses a checkpoint. The starting multiplier is this\\n    uint256 internal constant BASE_CHECKPOINT_MULTIPLIER = 6;\\n    uint256 internal constant BASE_CHECKPOINT_DURATION = 30 days;\\n\\n    event CheckpointSet(address indexed user, uint256 newCheckpoint);\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Internal functions (inheritable by VinciStaking)\\n\\n    function _checkpointMultiplier(address user) internal view returns (uint256) {\\n        return BASE_CHECKPOINT_MULTIPLIER - checkpointMultiplierReduction[user];\\n    }\\n\\n    /// @dev    This function will update as many checkpoints as crossed\\n    ///         It will return the length of the missed period, the start of this checkpoint-period and the next checkpoint\\n    function _postponeCheckpoint(address user) internal returns (uint256, uint256, uint256) {\\n        bool reductorNeedsUpdate = false;\\n        uint256 missedPeriod;\\n        uint256 checkpointPeriodStart;\\n        uint256 nextCheckpoint = checkpoint[user];\\n\\n        // store these in memory for gas savings\\n        uint256 _reduction = checkpointMultiplierReduction[user];\\n        while (nextCheckpoint < block.timestamp) {\\n            // the checkpoint multiplier cannot be less than 1, so the reduction cannot be more than (BASE_CHECKPOINT_MULTIPLIER - 1)\\n            if (_reduction + 1 < BASE_CHECKPOINT_MULTIPLIER) {\\n                _reduction += 1;\\n                reductorNeedsUpdate = true;\\n            }\\n            // addition to the current checkpoint to ignore the delay from the time when it is possible and the moment when crossing is actually executed\\n            uint256 timeAddition = (BASE_CHECKPOINT_MULTIPLIER - _reduction) * BASE_CHECKPOINT_DURATION;\\n            nextCheckpoint += timeAddition;\\n            // if a user misses multiple periods, we need to compensate the APR lost from those periods\\n            if (nextCheckpoint < block.timestamp) {\\n                missedPeriod += timeAddition;\\n            }\\n        }\\n        // we only need to overwrite checkpointMultiplierReduction if it has actually changed\\n        if (reductorNeedsUpdate) {\\n            checkpointMultiplierReduction[user] = _reduction;\\n        }\\n        checkpoint[user] = nextCheckpoint;\\n        checkpointPeriodStart = nextCheckpoint - (BASE_CHECKPOINT_MULTIPLIER - _reduction) * BASE_CHECKPOINT_DURATION;\\n\\n        emit CheckpointSet(user, nextCheckpoint);\\n        return (missedPeriod, checkpointPeriodStart, nextCheckpoint);\\n    }\\n\\n    function _postponeCheckpointFromCurrentTimestamp(address user) internal returns (uint256) {\\n        // this does not postpone using the previous checkpoint as a starting point, but the current timestamp\\n        // It's onlhy meant to be used by relock()\\n        uint256 newCheckpoint = block.timestamp + _checkpointMultiplier(user) * BASE_CHECKPOINT_DURATION;\\n        checkpoint[user] = newCheckpoint;\\n        emit CheckpointSet(user, newCheckpoint);\\n        return newCheckpoint;\\n    }\\n\\n    function _initCheckpoint(address user) internal {\\n        uint256 userCheckpoint = block.timestamp + _checkpointMultiplier(user) * BASE_CHECKPOINT_DURATION;\\n        checkpoint[user] = userCheckpoint;\\n        emit CheckpointSet(user, userCheckpoint);\\n    }\\n\\n    function _resetCheckpointInfo(address _user) internal {\\n        // either of the following variables can be used to identify a 'finished' stakeholder\\n        delete checkpoint[_user];\\n        // deleting the checkpointMultiplierReduction will also remove the superstaker status\\n        delete checkpointMultiplierReduction[_user];\\n        emit CheckpointSet(_user, 0);\\n    }\\n\\n    /// @dev    The condition for being a super staker is to have crossed at least one checkpoint\\n    function _isSuperstaker(address user) internal view returns (bool) {\\n        return checkpointMultiplierReduction[user] > 0;\\n    }\\n\\n    function _canCrossCheckpoint(address user) internal view returns (bool) {\\n        // only allows existing users\\n        return (checkpoint[user] != 0) && (block.timestamp > checkpoint[user]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/inheritables/penaltyPot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n/// This contract handles the penalty pot.\\n/// There are two stages of the balance\\n/// Vinci tokens are first deposited into the penaltyPool\\n/// Regularly, the contract owner will 'distribute' the penaltyPool between users, allocating the amounts proportional\\n/// to their share of the supplyEligibleForAllocation\\n/// However, none of the two above are 'claimable' until a checkpoint is crossed and they go to the claimable balance\\n\\ncontract PenaltyPot {\\n    // Supply is tracked with limited number of decimals. This is done to avoid losing decimals in _distributePenaltyPot()\\n    uint256 public constant PENALTYPOT_SUPPLY_DECIMALS = 3;\\n    uint256 public constant PENALTYPOT_ROUNDING_FACTOR = 10 ** (18 - PENALTYPOT_SUPPLY_DECIMALS);\\n    uint256 internal supplyEligibleForAllocation;\\n    // The amount of vinci tokens that are allocated to each staked vinci token belonging to eligible supply\\n    uint256 internal allocationPerStakedVinci;\\n\\n    // The actual pool tracking all deposited tokens from penalized stakers\\n    uint256 internal penaltyPool;\\n    // In every distribution, some decimals would be lost, so they are buffered here\\n    uint256 internal bufferedVinci;\\n\\n    // These variables are used to track the decimals lost in supplyEligibleForAllocation in additions and removals\\n    uint256 internal bufferedDecimalsInSupplyAdditions;\\n    uint256 internal bufferedDecimalsInSupplyRemovals;\\n\\n    mapping(address => uint256) internal individualAllocationTracker;\\n    mapping(address => uint256) internal individualBuffer;\\n\\n    event DepositedToPenaltyPot(address user, uint256 amountDeposited);\\n    event PenaltyPotDistributed(uint256 amountDistributed, uint256 bufferedDecimals);\\n\\n    function _depositToPenaltyPot(uint256 amount) internal {\\n        penaltyPool += amount;\\n        emit DepositedToPenaltyPot(msg.sender, amount);\\n    }\\n\\n    /// @dev    Here the pool is distributed into individual allocations (not claimable yet)\\n    function _distributePenaltyPot() internal {\\n        uint256 eligibleSupply = supplyEligibleForAllocation;\\n\\n        if (eligibleSupply == 0) {\\n            bufferedVinci += penaltyPool;\\n            penaltyPool = 0;\\n            emit PenaltyPotDistributed(0, bufferedVinci);\\n            return;\\n        }\\n\\n        uint256 totalToDistribute = penaltyPool + bufferedVinci;\\n\\n        // eligible supply is divided by the PENALTYPOT_ROUNDING_FACTOR, so distributePerVinci (and therefore allocationPerStakedVinci)\\n        // are artificially boosted\\n        uint256 distributePerVinci = totalToDistribute / eligibleSupply;\\n        uint256 lostDecimals = totalToDistribute % eligibleSupply;\\n        // overwriting bufferedDecimals is intentional, as the old decimals are included in `totalToDistribute`\\n        bufferedVinci = lostDecimals;\\n        allocationPerStakedVinci += distributePerVinci;\\n        penaltyPool = 0;\\n\\n        emit PenaltyPotDistributed(distributePerVinci * eligibleSupply, lostDecimals);\\n    }\\n\\n    function _bufferPenaltyPotAllocation(address user, uint256 _stakingBalance) internal returns (uint256) {\\n        // the individualBuffer is already converted to the right amount of decimals\\n        // here we store the newBuffer in memory to save gas, to avoid read and writes of individualBuffer from storage\\n        uint256 newBuffer = _getAllocatedSharePenaltyPot(user, _stakingBalance);\\n\\n        individualBuffer[user] = newBuffer;\\n        individualAllocationTracker[user] = allocationPerStakedVinci;\\n        return newBuffer;\\n    }\\n\\n    function _addToEligibleSupplyForPenaltyPot(uint256 amount) internal {\\n        uint256 amountToAdd = amount + bufferedDecimalsInSupplyAdditions;\\n        supplyEligibleForAllocation += (amountToAdd / PENALTYPOT_ROUNDING_FACTOR);\\n        // overwriting is intentional, as the old decimals are included in `amountToAdd`\\n        bufferedDecimalsInSupplyAdditions = amountToAdd % PENALTYPOT_ROUNDING_FACTOR;\\n    }\\n\\n    function _removeFromEligibleSupplyForPenaltyPot(uint256 amount) internal {\\n        uint256 amountToRemove = amount + bufferedDecimalsInSupplyRemovals;\\n        supplyEligibleForAllocation -= (amountToRemove / PENALTYPOT_ROUNDING_FACTOR);\\n        // overwriting is intentional, as the old decimals are included in `amountToRemove`\\n        bufferedDecimalsInSupplyRemovals = amountToRemove % PENALTYPOT_ROUNDING_FACTOR;\\n    }\\n\\n    // @dev The penalization only needs to be done on the amount that has been already distributed. The non distribtued\\n    //      one is penalized automatically because of decreasing the share by unstaking\\n    function _penalizePenaltyPotShare(address user, uint256 unstakeAmount, uint256 stakingBalanceBefPenalization)\\n        internal\\n        returns (uint256)\\n    {\\n        // once buffered, there is no other allocation for user besides the `individualBuffer`\\n        uint256 updatedBuffer = _bufferPenaltyPotAllocation(user, stakingBalanceBefPenalization);\\n        uint256 penalization = updatedBuffer * unstakeAmount / stakingBalanceBefPenalization;\\n        updatedBuffer -= penalization;\\n        individualBuffer[user] = updatedBuffer;\\n        return penalization;\\n    }\\n\\n    // @dev This only redeems the amount that has been already distributed\\n    function _redeemPenaltyPot(address user, uint256 _stakingBalance) internal returns (uint256) {\\n        uint256 updatedBuffer = _getAllocatedSharePenaltyPot(user, _stakingBalance);\\n        individualAllocationTracker[user] = allocationPerStakedVinci;\\n        delete individualBuffer[user];\\n        return updatedBuffer;\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // @dev This one only shows the allocated penalty pot. The one that is actually asigned to a user\\n    //      The allocated is the one showing as unclaimable balance in VinciStaking\\n    function _getAllocatedSharePenaltyPot(address user, uint256 _stakingBalance) internal view returns (uint256) {\\n        return individualBuffer[user]\\n            + _stakingBalance * (allocationPerStakedVinci - individualAllocationTracker[user]) / PENALTYPOT_ROUNDING_FACTOR;\\n    }\\n\\n    // @dev This estimation takes into account both the distributed and the non-distributed amounts\\n    //      Note however that the distributed is not claimable yet either. This value however is not final until\\n    //      distributed.\\n    function _estimateUserShareOfPenaltyPot(address user, uint256 _stakingBalance) internal view returns (uint256) {\\n        if (supplyEligibleForAllocation == 0) return 0;\\n\\n        return _getAllocatedSharePenaltyPot(user, _stakingBalance)\\n            + (_stakingBalance * penaltyPool) / (supplyEligibleForAllocation * PENALTYPOT_ROUNDING_FACTOR);\\n    }\\n\\n    // @dev This is the penalty pot that has not been distributed yet\\n    function _getTotalPenaltyPot() internal view returns (uint256) {\\n        return penaltyPool + bufferedVinci;\\n    }\\n\\n    function _getSupplyEligibleForAllocation() internal view returns (uint256) {\\n        return (supplyEligibleForAllocation * PENALTYPOT_ROUNDING_FACTOR) + bufferedDecimalsInSupplyAdditions\\n            - bufferedDecimalsInSupplyRemovals;\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"foundry/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@forge/=foundry/lib/forge-std/\",\r\n      \"@libs/=foundry/lib/\",\r\n      \"@openzeppelin/=foundry/lib/openzeppelin-contracts/\",\r\n      \"ds-test/=foundry/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=foundry/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=foundry/lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_vinciTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128[]\",\"name\":\"_tierThresholdsInVinci\",\"type\":\"uint128[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotCrossCheckpointYet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CantRelockBeforeCrossingCheckpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointHasToBeCrossedFirst\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTiersSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistingStaker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistingTier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughStakingBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTiers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakedAmountNotReleasedYet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AirdroppedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CheckpointCrossed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCheckpoint\",\"type\":\"uint256\"}],\"name\":\"CheckpointSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDeposited\",\"type\":\"uint256\"}],\"name\":\"DepositedToPenaltyPot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entitledPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualPayout\",\"type\":\"uint256\"}],\"name\":\"MissedRewardsAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entitledPayout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualPayout\",\"type\":\"uint256\"}],\"name\":\"MissedRewardsPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NonAllocatedStakingRewardsFundsRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotifyCannotCrossCheckpointYet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDistributed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bufferedDecimals\",\"type\":\"uint256\"}],\"name\":\"PenaltyPotDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Relocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"StakeholderFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakingRewardsFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTier\",\"type\":\"uint256\"}],\"name\":\"TierSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"vinciThresholds\",\"type\":\"uint128[]\"}],\"name\":\"TiersThresholdsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakingCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakingInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_APR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_FUNDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TIERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTYPOT_ROUNDING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PENALTYPOT_SUPPLY_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airdroppedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vinciBalance\",\"type\":\"uint256\"}],\"name\":\"calculateTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canCrossCheckpoint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"}],\"name\":\"crossCheckpointTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"currentCheckpointDurationInMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentlyUnstakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePenaltyPot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeAmount\",\"type\":\"uint256\"}],\"name\":\"estimateRewardsLossIfUnstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"estimatedShareOfPenaltyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fullPeriodAprRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundContractWithVinciForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfTiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupplyEligibleForPenaltyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"getTierThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalUnclaimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnclaimableFromAirdrops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnclaimableFromBaseApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnclaimableFromPenaltyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnstakeAmountAvailableForWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isSuperstaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"nextCheckpointTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeNonAllocatedStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVinciStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstakingReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"tierThresholds\",\"type\":\"uint128[]\"}],\"name\":\"updateTierThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vinciStakingRewardsFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vinciToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VinciStakingV1", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005275e602238c85b204413116c1057aff5c60b2820000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000000000000000000000000069e10de76676d080000000000000000000000000000000000000000000000002116545850052128000000000000000000000000000000000000000000000000a56fa5b99019a5c80000000000000000000000000000000000000000000000033b2e3c9fd0803ce8000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}