{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract Selling is Ownable{\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private total_price = 100 * 10 ** 18;\r\n    uint256 private buy_amount = 50 * 10 ** 18;\r\n    uint256 private inviter_rewards = 30 * 10 ** 18;\r\n    uint256 private top_inviter_rewards =  20 * 10 ** 18;\r\n\r\n\r\n    address private immutable usdtAddress;\r\n    address private immutable defaultAddress;\r\n    address public  immutable salecoin;\r\n    \r\n\r\n    mapping(address=>address) public inviter;\r\n    mapping(address=>address[]) public binder;\r\n    mapping(address => uint256) public teamNum;\r\n    mapping(address => uint256) public rewards;\r\n\r\n    mapping (address=>bool) public bought;\r\n\r\n    ISwapRouter private  _router;\r\n    IERC20 USDT;\r\n\r\n    bool public status = true;\r\n\r\n    \r\n    constructor(){\r\n        _router = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n        salecoin = 0xF4f3e45507c85E36eE23E421FEB7cAcA4B7F0F8b;\r\n        defaultAddress = 0x5801ec90200bbCa54ACB82af0a4Af82365A93955;\r\n        USDT = IERC20(usdtAddress);\r\n        USDT.approve(address(_router), MAX);\r\n        USDT.approve(owner(), MAX);\r\n    }\r\n\r\n\r\n    function Buy(address _inviter) public {\r\n        require(status,\"not open\");\r\n        require(bought[_inviter] || _inviter == defaultAddress,\"invalid inviter\");\r\n        address buyer = msg.sender;\r\n        require(!bought[buyer],\"Only buy once\");\r\n        \r\n        USDT.transferFrom(buyer, address(this), total_price);\r\n        SwapTokenForBuyer(buyer);\r\n        bought[buyer] = true;\r\n    \r\n        address top_inviter;\r\n        top_inviter = inviter[_inviter];\r\n        if (top_inviter == address(0)){\r\n            top_inviter = defaultAddress;\r\n        }\r\n        else {\r\n            teamNum[top_inviter]+=1;\r\n        }\r\n\r\n        USDT.transfer(_inviter, inviter_rewards);\r\n        USDT.transfer(top_inviter, top_inviter_rewards);\r\n        rewards[_inviter] += inviter_rewards;\r\n        rewards[top_inviter] += top_inviter_rewards;\r\n\r\n        inviter[buyer] = _inviter;\r\n        binder[_inviter].push(buyer);\r\n        teamNum[_inviter]+=1;\r\n        \r\n\r\n    }\r\n    \r\n    function SwapTokenForBuyer(address _buyer) private  {\r\n        address[] memory path = new address[](2);\r\n        path[0] = usdtAddress;\r\n        path[1] = salecoin;\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            buy_amount,\r\n            0,\r\n            path,\r\n            _buyer,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function updateStatus(bool _status)public onlyOwner{\r\n        status = _status;\r\n    }\r\n\r\n\r\n    function updateParams(uint256 _total_price,uint256 _buy_amount,uint256 _inviter_rewards, uint256 _top_inviter_rewards)public onlyOwner{\r\n        require(_buy_amount+_inviter_rewards+_top_inviter_rewards ==_total_price,\"Wrong parameter\");\r\n        total_price = _total_price;\r\n        buy_amount = _buy_amount;\r\n        inviter_rewards = _inviter_rewards;\r\n        top_inviter_rewards = _top_inviter_rewards;\r\n    }\r\n    \r\n    function getBinderLength(address account) public view returns (uint256){\r\n        return binder[account].length;\r\n    }\r\n    \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_total_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buy_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inviter_rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_top_inviter_rewards\",\"type\":\"uint256\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Selling", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ac4e74694107c4f7b3c28c37ca77f02bec42d42a7cf38ed296354e1e806f80e"}