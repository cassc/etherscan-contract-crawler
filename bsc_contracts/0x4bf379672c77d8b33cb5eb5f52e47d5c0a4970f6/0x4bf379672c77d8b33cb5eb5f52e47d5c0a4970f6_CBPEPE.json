{"SourceCode": "/*===============================================================================\r\n * CashBack PEPE (CBPEPE) - Get Rewarded on every Transaction!\r\n *===============================================================================\r\n *\tA uinque token where all users get REWARDED (in BNB) for using the token \r\n *\tfor regular transactions! \r\n *\tImplements a uinique on-chain cashback system for all!\r\n *===============================================================================\r\n * FEATURES:\r\n * ---------------\r\n *\tTOTAL TAX: {BUY: 4%} {SELL: 4%}\r\n *----------------\r\n * (*)\t1% of TAX added to LIQUIDITY POOL\r\n *  \r\n * (*)\t3% of TAX converted to BNB and added to REWARD POOL!\r\n *\t\t================\r\n *\t\tcashback rules:\r\n *  \t================\r\n *\t\t* Traded tokens value must be atleast (10000 CBPEPE) to qualify.\r\n *\t\t* Sender and Reciever both get 10% BNB from REWARD POOL as CashBack!\r\n *\t\tEasy and simple. \r\n *\t\t================\r\n *\t\tThis way all transactions will be FREE (and in most cases you \r\n *\t\tget back REWARDS more than you pay for transaction FEES)\r\n *\t\tUse CBPEPE for TRADING on DEX or sending/recieving with other users. \r\n *\t\tEvery time you use CBPEPE, you will be rewarded!\r\n *\t\tUSE MORE, EARN MORE!\r\n *===============================================================================\r\n * The more you use the token, the more you will be rewarded!\r\n * JOIN THE REVOLUTION!\r\n *===============================================================================\r\n * Telegram: https://t.me/CBPEPE_CashBackPEPE\r\n *===============================================================================\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n\t\t// accountHash: Hash code for null address (0x0)\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {codehash := extcodehash(account)}\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; }\r\n    function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\t\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ITokenBank{\r\n\tevent Taxed(uint256 taxAmt, uint256 lqAmount, uint256 lqETH, uint256 trETH);\r\n\tfunction processTax(uint256 taxAmt) external returns(bool);\r\n\t\r\n\tevent AutoLiquify(uint256 indexed amountTokens, uint256 indexed amountETH);\r\n\tfunction processLiquidity() external;\r\n\t\r\n\tevent CashBack(uint256 indexed senderCB, uint256 indexed recipientCB);\r\n\tfunction processCashBack(address s, address r) external;\r\n\t\r\n\tfunction setMinLQ(uint256 amt) external;\r\n\tfunction setToken(address tk) external;\r\n\t\r\n}\r\n\r\nabstract contract Context {\r\n\taddress constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n\taddress routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    function _msgSender() internal view virtual returns (address){ return msg.sender; }\r\n}\r\n\r\nabstract contract Auth is Context {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\t\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner(){ require(isOwner(_msgSender()), \"NOT_OWNER\"); _; }\r\n    modifier authorized(){ require(isAuthorized(_msgSender()), \"UNAUTHORIZED\"); _; }\r\n\r\n    function authorize(address adr) public onlyOwner{ authorizations[adr] = true; }\r\n    function unauthorize(address adr) public onlyOwner{ authorizations[adr] = false; }\r\n    function isOwner(address account) public view returns (bool){ return account == owner; }\r\n    function isAuthorized(address adr) public view returns (bool){ return authorizations[adr]; }\r\n\r\n    event OwnershipTransferred(address owner);\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n}\r\n\r\ncontract CBPEPE is IBEP20, Auth {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tuint8 constant _decimals = 18;\r\n\t/*200 Million*/\r\n\tuint256 constant _totalSupply = 200 * 10**6 * 10**_decimals;\r\n\t\r\n\tmapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\t\r\n\tITokenBank public tokenbank;\r\n\tbool inSwap;\r\n    address public autoLiquidityReciever;\r\n\tuint256 public Tax;\r\n\tuint256 public CBTxAmount = 10000 * 10**_decimals;\r\n\terror BadTxAmount(uint256 amt);\r\n\t\r\n\tconstructor () Auth(_msgSender()){\r\n\t\ttransferOwnership(payable(0x0));\r\n\t\tautoLiquidityReciever = _msgSender();\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\t\r\n\tevent LogDeposit(address indexed, uint256 indexed);\r\n    receive() external payable { require(msg.value > 0); emit LogDeposit(_msgSender(), msg.value); }\r\n    fallback() external payable{ require(msg.value > 0); emit LogDeposit(_msgSender(), msg.value); }\r\n\t\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return \"CBPEPE\"; }\r\n    function name() external pure override returns (string memory) { return \"CashBack PEPE\"; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    \r\n\tfunction _approve( address owner, address spender, uint256 amount ) private {\r\n        require(owner != address(0) && spender != address(0), \"APPROVE_NULL_FAILED\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\t\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\t\r\n\tfunction getAllowance(address holder, address spender) external view returns(uint256){\r\n\t\treturn _allowances[holder][spender];\r\n\t}\r\n\t\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(_msgSender(), recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][_msgSender()] != type(uint256).max){\r\n            _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\t\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        //require( (_balances[sender] >= amount), \"INVALID_AMOUNT!\");\r\n\t\t//Minimum 1 CBPEPE transfer \r\n\t\tif( (amount < (1 * 10**18)) || (_balances[sender] < amount) ) revert BadTxAmount(amount);\r\n\t\t\r\n\t\t_balances[sender] = _balances[sender] - amount;\r\n\t\tuint256 _tax;\r\n\t\t\t\t\r\n\t\tif(!inSwap){\r\n\t\t\tif( sender != autoLiquidityReciever ){\r\n\t\t\t\tinSwap = true;\r\n\t\t\t\t_tax = ((amount.div(100)).mul(4));\r\n\t\t\t\t_balances[address(tokenbank)] += _tax;\r\n\t\t\t\tTax += _tax;\r\n\t\t\t\tif( !sender.isContract() ){\r\n\t\t\t\t\ttry tokenbank.processTax(Tax) returns(bool p0){\r\n\t\t\t\t\t\tif( p0 == true ){ Tax = 0; }\r\n\t\t\t\t\t}catch{}\r\n\t\t\t\t\t\r\n\t\t\t\t\ttry tokenbank.processLiquidity(){}catch{}\r\n\t\t\t\t}\r\n\t\t\t\tif( sender != recipient && (amount >= CBTxAmount) ){\r\n\t\t\t\t\ttry tokenbank.processCashBack(sender, recipient){}catch{}\r\n\t\t\t\t}\r\n\t\t\t\tinSwap = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_balances[recipient] = _balances[recipient] + ( amount - _tax );\r\n\t\t\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\t\r\n\tfunction setMinCBTxAmount(uint256 amt) external authorized{ CBTxAmount = amt; }\r\n\tfunction setRouterAddress(address a) external authorized{\r\n\t\trouterAddress = a;\r\n\t\t_allowances[address(tokenbank)][routerAddress] = type(uint256).max;\r\n\t}\r\n\t\r\n\t// Rescue Stuck Balances\r\n    function rescueToken(address ta, uint256 tokens) public authorized returns (bool success) {\r\n\t\trequire( ta != address(this) && ta != WBNB, \"NOT_ALLOWED\");\r\n        return IBEP20(ta).transfer(_msgSender(), tokens);\r\n    }\r\n\t\r\n\tfunction setTokenBank(address tb, bool shouldSetToken) public authorized {\r\n\t\ttokenbank = ITokenBank(tb);\r\n        _allowances[tb][routerAddress] = type(uint256).max;\r\n\t\t\r\n\t\tif(shouldSetToken) tokenbank.setToken(address(this));\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"BadTxAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CBTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ta\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setMinCBTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tb\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shouldSetToken\",\"type\":\"bool\"}],\"name\":\"setTokenBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenbank\",\"outputs\":[{\"internalType\":\"contract ITokenBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CBPEPE", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cb820025dbd688d20542bf0b674c82927d4f3a65b8a74bef570dfc4c35c9ded1"}