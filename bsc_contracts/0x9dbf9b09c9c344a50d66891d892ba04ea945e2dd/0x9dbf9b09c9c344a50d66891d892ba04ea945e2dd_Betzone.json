{"SourceCode": "// SPDX-Licence-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Betzone {\r\n     address public _owner = 0x866811B5D54ba17B04eE095de26b2E0c0F79d529; // change owner\r\n    address public _baseToken = 0x55d398326f99059fF775485246999027B3197955; /// chang thisthis\r\n\r\n    struct Bet {\r\n        bool paid;\r\n        address customer;\r\n        uint256 amount;\r\n        uint256[] selectedNumbers;\r\n    }\r\n\r\n    struct Bet_Details {\r\n        mapping(uint256 => Bet)  bets;\r\n        uint256 length;\r\n    }\r\n\r\n    uint256 public __jackpot_odd = 40;\r\n    uint256 public __number_odd = 30;\r\n    uint256 public __high_low_odd = 1;\r\n    uint256 public __odd_even_odd = 1;\r\n    uint256 public __blocks_odd = 2;\r\n\r\n    mapping(uint256 => Bet_Details) public bets;\r\n\r\n    function __changeOwner(address newOwner) public {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Only owner can change the contract owner.\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n\r\n    event betList(\r\n        uint256 indexed draw,\r\n        string indexed gametype,\r\n        address indexed winner,\r\n        uint256 betAmount,\r\n        uint256 payout,\r\n        uint256 odd,\r\n        uint256 win,\r\n        uint256[] selectedNumbers\r\n    );\r\n\r\n    function __setOdds(\r\n        uint256 _jackpot,\r\n        uint256 _number,\r\n        uint256 _highLow,\r\n        uint256 _oddEven,\r\n        uint256 _blocks\r\n    ) public {\r\n        require(msg.sender == _owner, \"Only owner can set odds.\");\r\n        __jackpot_odd = _jackpot;\r\n        __number_odd = _number;\r\n        __high_low_odd = _highLow;\r\n        __odd_even_odd = _oddEven;\r\n        __blocks_odd = _blocks;\r\n    }\r\n\r\n    function __getGameType(\r\n        uint256[] memory selectedNumbers\r\n    ) public pure returns (string memory) {\r\n        string memory gameType = \"number\";\r\n\r\n        if (selectedNumbers.length == 1 && selectedNumbers[0] == 0) {\r\n            gameType = \"jackpot\";\r\n        }\r\n\r\n        uint256 highCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 1; j <= 19; j++) {\r\n                if (selectedNumbers[i] == j) {\r\n                    highCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (highCount == 19) {\r\n            gameType = \"high_low\";\r\n        }\r\n\r\n        uint256 lowCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 20; j <= 38; j++) {\r\n                if (selectedNumbers[i] == j) {\r\n                    lowCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (lowCount == 19) {\r\n            gameType = \"high_low\";\r\n        }\r\n\r\n        uint256 oddCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 1; j <= 38; j++) {\r\n                if (j % 2 != 0) {\r\n                    if (selectedNumbers[i] == j) {\r\n                        oddCount++;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (oddCount == 19) {\r\n            gameType = \"odd_even\";\r\n        }\r\n\r\n        uint256 evenCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 1; j <= 38; j++) {\r\n                if (j % 2 == 0) {\r\n                    if (selectedNumbers[i] == j) {\r\n                        evenCount++;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (evenCount  == 19 ) {\r\n            gameType = \"odd_even\";\r\n        }\r\n\r\n        uint256 onesCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 1; j <= 9; j++) {\r\n                if (selectedNumbers[i] == j) {\r\n                    onesCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (onesCount ==  9 && selectedNumbers.length ==9 ) {\r\n            gameType = \"blocks\";\r\n        }\r\n\r\n        uint256 tensCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 10; j <= 19; j++) {\r\n                if (selectedNumbers[i] == j) {\r\n                    tensCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (tensCount == 10 && selectedNumbers.length ==10) {\r\n            gameType = \"blocks\";\r\n        }\r\n\r\n        uint256 twentiesCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 20; j <= 29; j++) {\r\n                if (selectedNumbers[i] == j) {\r\n                    twentiesCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (twentiesCount == 10 && selectedNumbers.length ==10) {\r\n            gameType = \"blocks\";\r\n        }\r\n\r\n        uint256 thirtiesCount = 0;\r\n        for (uint256 i = 0; i < selectedNumbers.length; i++) {\r\n            for (uint256 j = 30; j <= 38; j++) {\r\n                if (selectedNumbers[i] == j) {\r\n                    thirtiesCount++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (thirtiesCount == 9 && selectedNumbers.length ==9) {\r\n            gameType = \"blocks\";\r\n        }\r\n\r\n        return gameType;\r\n    }\r\n\r\n    function __bet(\r\n        uint256 draw,\r\n        uint256 betAmount,\r\n        uint256[] memory selectedNumbers\r\n    ) external {\r\n        require(\r\n            betAmount > 0,\r\n            \"The bet must be greater than the minimum value.\"\r\n        );\r\n\r\n        uint256 subTotal = betAmount * selectedNumbers.length;\r\n        uint256 index = bets[draw].length;\r\n          \r\n\r\n        bets[draw].bets[index].customer = msg.sender;\r\n        bets[draw].bets[index].amount = betAmount;\r\n        bets[draw].bets[index].selectedNumbers = selectedNumbers;\r\n        bets[draw].length += 1;\r\n\r\n        IBEP20(_baseToken).transferFrom(msg.sender, address(this), subTotal);\r\n    }\r\n\r\n    function __payOut(uint256 winningNumber, uint256 draw) public payable {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Only the owner has the ability to pay out.\"\r\n        );\r\n        uint256 index = bets[draw].length;\r\n  \r\n\r\n\r\n        for (uint256 i = 0; i < index; i++) {\r\n            Bet memory bet = bets[draw].bets[i];\r\n            require(bet.paid == false, \"There are no bets.\");\r\n            string memory gameType = __getGameType(bet.selectedNumbers);\r\n            uint256 odd = __number_odd;\r\n            uint256 pay = 0;\r\n            uint256 winning = 0;\r\n\r\n            for (uint256 j = 0; j < bet.selectedNumbers.length; j++) {\r\n                if (bet.selectedNumbers[j] == winningNumber) {\r\n                    if (\r\n                        keccak256(abi.encodePacked(gameType)) ==\r\n                        keccak256(abi.encodePacked(\"jackpot\"))\r\n                    ) {\r\n                        odd = __jackpot_odd;\r\n                    }\r\n                    if (\r\n                        keccak256(abi.encodePacked(gameType)) ==\r\n                        keccak256(abi.encodePacked(\"high_low\"))\r\n                    ) {\r\n                        odd = __high_low_odd;\r\n                    }\r\n                    if (\r\n                        keccak256(abi.encodePacked(gameType)) ==\r\n                        keccak256(abi.encodePacked(\"odd_even\"))\r\n                    ) {\r\n                        odd = __odd_even_odd;\r\n                    }\r\n                    if (\r\n                        keccak256(abi.encodePacked(gameType)) ==\r\n                        keccak256(abi.encodePacked(\"blocks\"))\r\n                    ) {\r\n                        odd = __blocks_odd;\r\n                    }\r\n\r\n                    uint256 win = bet.amount * odd;\r\n                    uint256 subTotal = bet.amount *\r\n                        bet.selectedNumbers.length;\r\n\r\n                    uint256 payOut = subTotal + win;\r\n\r\n                    pay += payOut;\r\n                    winning += win;\r\n                }\r\n            }\r\n            bet.paid = true;\r\n\r\n            if (pay > 0) {\r\n                IBEP20(_baseToken).transfer(address(bet.customer), pay);\r\n            }\r\n\r\n            emit betList(\r\n                draw,\r\n                gameType,\r\n                address(bet.customer),\r\n                bet.amount,\r\n                pay,\r\n                odd,\r\n                winning,\r\n                bet.selectedNumbers\r\n            ); // index\r\n\r\n            pay = 0;\r\n            winning =0;\r\n            odd = __number_odd;\r\n        }\r\n    }\r\n\r\n    function __getOwnerBalance() public view returns (uint256) {\r\n        return IBEP20(_baseToken).balanceOf(address(this));\r\n    }\r\n\r\n    function __withdraw(address payable destinationAddress) public {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Only the owner has the ability to withdraw funds.\"\r\n        );\r\n        uint256 balance = address(this).balance;\r\n        destinationAddress.transfer(balance);\r\n    }\r\n\r\n    function _setBaseToken(address token) public {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Only the owner has the ability to set base token.\"\r\n        );\r\n\r\n        _baseToken = token;\r\n    }\r\n\r\n    function __withdraw(address destinationAddress, address Token) public {\r\n        require(\r\n            msg.sender == _owner,\r\n            \"Only the owner has the ability to withdraw funds.\"\r\n        );\r\n        uint256 balance = IBEP20(Token).balanceOf(address(this));\r\n        IBEP20(Token).transfer(destinationAddress, balance);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"gametype\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"odd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"selectedNumbers\",\"type\":\"uint256[]\"}],\"name\":\"betList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"selectedNumbers\",\"type\":\"uint256[]\"}],\"name\":\"__bet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__blocks_odd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"__changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"selectedNumbers\",\"type\":\"uint256[]\"}],\"name\":\"__getGameType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__getOwnerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__high_low_odd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__jackpot_odd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__number_odd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__odd_even_odd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"winningNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"}],\"name\":\"__payOut\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_highLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oddEven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"__setOdds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"}],\"name\":\"__withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"__withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"_setBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Betzone", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://952b5cfee1e6c7a8e2cb3dbce9cea9ef2efb432fc0a6d25803bd4b9cf091f0e1"}