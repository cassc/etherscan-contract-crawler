{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n//SPDX-License-Identifier: MIT\r\n// import \"hardhat/console.sol\";\r\nstring constant FORBIDDEN = \"Auction: FORBIDDEN\";\r\n\r\nstring constant INVALID_TIMING = \"Auction: INVALID_TIMING\";\r\n\r\nstring constant INVALID_MIN_PRICE = \"Auction: INVALID_MIN_PRICE\";\r\n\r\nstring constant INVALID_PRICE_INCREMENT = \"Auction: INVALID_PRICE_INCREMENT\";\r\n\r\nstring constant INVALID_PRICE_RANGE =  \"Auction: INVALID_PRICE_RANGE\";\r\n\r\nstring constant ZERO_BALANCE = \"Auction: ZERO_BALANCE\";\r\n\r\nstring constant INVALID_BID = \"Auction: INVALID_BID\";\r\n\r\ncontract NFTAuction is Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => mapping(uint256 => Auction)) private auctions;\r\n    mapping(address => uint256[]) private tokens;\r\n\r\n    struct Auction {\r\n        uint64 auctionStart;\r\n        uint64 auctionEnd;\r\n        uint256 minPrice;\r\n        uint256 maxPrice;\r\n        uint256 priceIncrement;\r\n        address highestBidder;\r\n        address quote;\r\n        uint256 balance;\r\n        uint256 blockEnd;\r\n        bool locked;\r\n        mapping(address => uint256) bids;\r\n    }\r\n    \r\n\r\n    constructor() {}\r\n\r\n    fallback() external payable {\r\n        revert(FORBIDDEN);\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(FORBIDDEN);\r\n    }\r\n\r\n    function createAuction(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        address _quote,\r\n        uint64 _auctionStart,\r\n        uint64 _auctionEnd,\r\n        uint256 _minPrice,\r\n        uint256 _maxPrice,\r\n        uint256 _priceIncrement\r\n    ) external onlyOwner auctionNotExists(_nftAddress, _tokenId) {\r\n        require(\r\n            IERC721(_nftAddress).ownerOf(_tokenId) == _msgSender(),\r\n            ZERO_BALANCE\r\n        );\r\n        // console.log(block.timestamp );\r\n        require( _auctionEnd > block.timestamp  && _auctionEnd > _auctionStart, INVALID_TIMING);\r\n        require( _minPrice > 0, INVALID_MIN_PRICE);\r\n        require( _minPrice <= _maxPrice, INVALID_PRICE_RANGE);\r\n        if ( _minPrice == _maxPrice ) {\r\n            require( _priceIncrement == 0, INVALID_PRICE_INCREMENT);\r\n        } else {\r\n            require( _priceIncrement > 0, INVALID_PRICE_INCREMENT);\r\n        }\r\n       \r\n        IERC721(_nftAddress).transferFrom(_msgSender(), address(this), _tokenId);\r\n      \r\n        auctions[_nftAddress][_tokenId].auctionStart = _auctionStart;\r\n        auctions[_nftAddress][_tokenId].auctionEnd = _auctionEnd;\r\n        auctions[_nftAddress][_tokenId].minPrice = _minPrice;\r\n        auctions[_nftAddress][_tokenId].maxPrice = _maxPrice;\r\n        auctions[_nftAddress][_tokenId].priceIncrement = _priceIncrement;\r\n        auctions[_nftAddress][_tokenId].quote = _quote;\r\n        auctions[_nftAddress][_tokenId].balance = 0;\r\n\r\n        tokens[_nftAddress].push(_tokenId);\r\n    }\r\n\r\n    function closeAuction(address _nftAddress, uint256 _tokenId)\r\n        external\r\n        onlyOwner\r\n        auctionExists(_nftAddress,_tokenId)\r\n        auctionRunning(_nftAddress,_tokenId)\r\n       \r\n    {\r\n         auctions[_nftAddress][_tokenId].blockEnd = block.number;\r\n    }\r\n\r\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\r\n      \u2551          GETTERS            \u2551\r\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\r\n\r\n    function contractTokensInAuction(address _nftAddress) external view returns(uint256[] memory) \r\n    {\r\n        return tokens[_nftAddress];\r\n    }\r\n\r\n    function rules(address _nftAddress, uint256 _tokenId)  external auctionExists(_nftAddress, _tokenId) view returns(address quoteAddress, uint64 auctionStart, uint64 auctionEnd, uint256 minPrice, uint256 maxPrice, uint256 priceIncrement, bool running, bool finished) {\r\n        auctionStart =  auctions[_nftAddress][_tokenId].auctionStart;\r\n        auctionEnd =  auctions[_nftAddress][_tokenId].auctionEnd;\r\n        minPrice =   auctions[_nftAddress][_tokenId].minPrice;\r\n        maxPrice =   auctions[_nftAddress][_tokenId].maxPrice;\r\n        priceIncrement =  auctions[_nftAddress][_tokenId].priceIncrement;\r\n        quoteAddress =  auctions[_nftAddress][_tokenId].quote;\r\n        uint256 blockEnd = auctions[_nftAddress][_tokenId].blockEnd;\r\n       \r\n        running = block.timestamp < auctionEnd && block.timestamp > auctionStart && blockEnd == 0;\r\n        finished =  block.timestamp >= auctionEnd || blockEnd != 0;\r\n     }\r\n\r\n    function bestBid(address _nftAddress, uint256 _tokenId)\r\n        external auctionExists(_nftAddress, _tokenId) view returns(uint256 highestBid, address highestBidder)\r\n       \r\n    {\r\n        highestBidder = auctions[_nftAddress][_tokenId].highestBidder;\r\n        highestBid = auctions[_nftAddress][_tokenId].bids[highestBidder];\r\n    }\r\n\r\n    function bids(address _nftAddress, uint256 _tokenId)\r\n        external auctionExists(_nftAddress, _tokenId) view returns(uint256 highestBid, address highestBidder, uint256 userBid, bool userIsHighestBidder)\r\n       \r\n    {\r\n        highestBidder = auctions[_nftAddress][_tokenId].highestBidder;\r\n        highestBid = auctions[_nftAddress][_tokenId].bids[highestBidder];\r\n        userBid = auctions[_nftAddress][_tokenId].bids[_msgSender()];\r\n        userIsHighestBidder = highestBidder != address(0) && highestBidder ==  _msgSender();\r\n    }\r\n\r\n    function _balances(address _nftAddress, uint256 _tokenId) \r\n         internal auctionExists(_nftAddress, _tokenId) view returns(uint256 quoteBalance, uint256 nftBalance) \r\n    {\r\n        quoteBalance = auctions[_nftAddress][_tokenId].balance;\r\n        nftBalance =  IERC721(_nftAddress).ownerOf(_tokenId) == address(this) ? 1 : 0;\r\n    }\r\n\r\n    function balances(address _nftAddress, uint256 _tokenId) \r\n         external onlyOwner view returns(uint256 quoteBalance, uint256 nftBalance) \r\n    {\r\n        (quoteBalance, nftBalance) = _balances(_nftAddress, _tokenId);\r\n    }\r\n\r\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\r\n      \u2551          MAKE  BID          \u2551\r\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\r\n\r\n    function _buy(\r\n       \r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _bidAmount\r\n    )\r\n        internal\r\n    {  \r\n        uint256 _lastUserBid = auctions[_nftAddress][_tokenId].bids[_msgSender()];\r\n        uint256 _amount = _bidAmount.sub(_lastUserBid);\r\n        require( _amount > 0, INVALID_BID);\r\n        IERC20(auctions[_nftAddress][_tokenId].quote).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            _amount\r\n        );\r\n        auctions[_nftAddress][_tokenId].bids[_msgSender()] = _bidAmount;\r\n        auctions[_nftAddress][_tokenId].highestBidder = _msgSender();\r\n        auctions[_nftAddress][_tokenId].balance = auctions[_nftAddress][_tokenId].balance.add(_amount);\r\n        // stop auction\r\n        auctions[_nftAddress][_tokenId].blockEnd = block.number;\r\n\r\n    }\r\n\r\n    function _bid(\r\n       \r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint256 _bidAmount\r\n    )\r\n        internal\r\n    {\r\n\r\n        uint256 highestBid = auctions[_nftAddress][_tokenId].bids[auctions[_nftAddress][_tokenId].highestBidder];\r\n        require( _bidAmount >= auctions[_nftAddress][_tokenId].minPrice && _bidAmount >= highestBid.add(auctions[_nftAddress][_tokenId].priceIncrement), \"Auction: INVALID_BID\" );\r\n        uint256 _lastUserBid = auctions[_nftAddress][_tokenId].bids[_msgSender()];\r\n        uint256 _amount = _bidAmount.sub(_lastUserBid);\r\n       \r\n        IERC20(auctions[_nftAddress][_tokenId].quote).transferFrom(\r\n            _msgSender(),\r\n            address(this),\r\n            _amount\r\n        );\r\n        \r\n        auctions[_nftAddress][_tokenId].highestBidder = _msgSender();\r\n        auctions[_nftAddress][_tokenId].bids[msg.sender] = _bidAmount;\r\n        auctions[_nftAddress][_tokenId].balance = auctions[_nftAddress][_tokenId].balance.add(_amount);\r\n \r\n    }\r\n\r\n    function makeBid(\r\n        address _nftAddress,\r\n        uint256 _tokenId,\r\n        uint128 _bidAmount\r\n    )\r\n        external\r\n        auctionExists(_nftAddress, _tokenId)\r\n        auctionRunning(_nftAddress, _tokenId)\r\n        lock(_nftAddress, _tokenId)\r\n    {\r\n       \r\n        require(_bidAmount > 0, INVALID_BID);\r\n        if ( _bidAmount >=  auctions[_nftAddress][_tokenId].maxPrice) {\r\n            _buy( _nftAddress, _tokenId,  auctions[_nftAddress][_tokenId].maxPrice);\r\n        } else { \r\n            _bid(_nftAddress, _tokenId, _bidAmount);\r\n        }\r\n        \r\n    }\r\n\r\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\r\n      \u2551          WITHDRAW           \u2551\r\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\r\n\r\n    function _withdrawOwner(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n         onlyOwner\r\n    {\r\n       \r\n        address _highestBidder =  auctions[_nftAddress][_tokenId].highestBidder;\r\n\r\n        if (_highestBidder != address(0)) {\r\n            // transfer quote\r\n            uint256 _amount =  auctions[_nftAddress][_tokenId].bids[_highestBidder];\r\n            require(_amount > 0, \"Auction: WRONG_AMOUNT\");\r\n            auctions[_nftAddress][_tokenId].balance = auctions[_nftAddress][_tokenId].balance.sub(_amount);\r\n            delete auctions[_nftAddress][_tokenId].bids[_highestBidder];\r\n            IERC20( auctions[_nftAddress][_tokenId].quote).transfer(\r\n                _msgSender(),\r\n                _amount\r\n            );\r\n        } else {\r\n            // transfer back NFT\r\n            require(\r\n                IERC721(_nftAddress).ownerOf(_tokenId) == address(this),\r\n                ZERO_BALANCE\r\n            );\r\n\r\n            IERC721(_nftAddress).transferFrom(\r\n                address(this),\r\n                 _msgSender(),\r\n                _tokenId\r\n            );\r\n        }\r\n    }\r\n\r\n    function _withdrawWinner( address _nftAddress, uint256 _tokenId)\r\n        internal\r\n      \r\n        onlyWinner(_nftAddress, _tokenId)\r\n    {\r\n        require(\r\n            IERC721(_nftAddress).ownerOf(_tokenId) == address(this),\r\n           ZERO_BALANCE\r\n        );\r\n        // transfer NFT\r\n        IERC721(_nftAddress).transferFrom(address(this),_msgSender(), _tokenId);\r\n    }\r\n\r\n    function _withdrawLooser( address _nftAddress, uint256 _tokenId)\r\n        internal\r\n         \r\n        onlyLooser(_nftAddress, _tokenId)\r\n\r\n    {\r\n        uint256 _amount =  auctions[_nftAddress][_tokenId].bids[_msgSender()];\r\n        require(_amount > 0, ZERO_BALANCE);\r\n\r\n        auctions[_nftAddress][_tokenId].bids[_msgSender()] = 0;\r\n        IERC20( auctions[_nftAddress][_tokenId].quote).transfer(\r\n            _msgSender(),\r\n            _amount\r\n        );\r\n        auctions[_nftAddress][_tokenId].balance = auctions[_nftAddress][_tokenId].balance.sub(_amount);\r\n        delete auctions[_nftAddress][_tokenId].bids[_msgSender()];\r\n    }\r\n\r\n    function withdraw(address _nftAddress, uint256 _tokenId)\r\n        external\r\n        auctionExists(_nftAddress, _tokenId)\r\n        auctionValid(_nftAddress, _tokenId)\r\n        auctionFinished(_nftAddress, _tokenId)\r\n        lock(_nftAddress, _tokenId)\r\n    {\r\n       \r\n        address _highestBidder =  auctions[_nftAddress][_tokenId].highestBidder;\r\n      \r\n        if (_msgSender() == _highestBidder) {\r\n            _withdrawWinner(_nftAddress, _tokenId);\r\n        } else if (_msgSender() == owner()) {\r\n            _withdrawOwner(_nftAddress, _tokenId);\r\n        } else {\r\n            _withdrawLooser(_nftAddress, _tokenId);\r\n        }\r\n        (uint256 quoteBalance,uint256 nftBalance) = _balances(_nftAddress, _tokenId);\r\n        if ( quoteBalance == 0 && nftBalance == 0 ) {\r\n            delete auctions[_nftAddress][_tokenId];\r\n            uint256[] storage _tokens = tokens[_nftAddress];\r\n            for ( uint i = 0; i < _tokens.length; i++) {\r\n                if ( _tokens[i] == _tokenId) {\r\n                    _tokens[i] = _tokens[_tokens.length-1];\r\n                    _tokens.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\r\n      \u2551          MODIFIERS          \u2551\r\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\r\n\r\n    modifier lock(address _nftAddress, uint256 _tokenId) {\r\n       require(\r\n            !auctions[_nftAddress][_tokenId].locked,\r\n            \"Auction: LOCKED\"\r\n        );\r\n        auctions[_nftAddress][_tokenId].locked = true;\r\n        _;\r\n        auctions[_nftAddress][_tokenId].locked = false;\r\n    }\r\n\r\n\r\n    modifier auctionRunning(address _nftAddress, uint256 _tokenId) {\r\n        require(\r\n            _isAuctionRunning(_nftAddress, _tokenId),\r\n            \"Auction: NOT_RUNNING\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier auctionFinished(address _nftAddress, uint256 _tokenId) {\r\n        require(\r\n            _isAuctionFinished(_nftAddress, _tokenId),\r\n            \"Auction: NOT_FINISHED\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier auctionExists(address _nftAddress, uint256 _tokenId) {\r\n        require(_isAuctionExists(_nftAddress, _tokenId), \"Auction: NOT_EXISTS\");\r\n        _;\r\n    }\r\n\r\n    modifier auctionNotExists(address _nftAddress, uint256 _tokenId) {\r\n        require(\r\n            !_isAuctionExists(_nftAddress, _tokenId),\r\n            \"Auction: ALREADY_EXISTS\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier auctionValid(address _nftAddress, uint256 _tokenId) {\r\n        require(_isAuctionValid(_nftAddress, _tokenId), \"Auction: NOT_VALID\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWinner(address _nftAddress, uint256 _tokenId) {\r\n        require(_isAuctionWinner(_nftAddress, _tokenId), FORBIDDEN);\r\n        _;\r\n    }\r\n\r\n    modifier onlyLooser(address _nftAddress, uint256 _tokenId) {\r\n        require(\r\n            _isAuctionLooser(_nftAddress, _tokenId),\r\n            FORBIDDEN\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\r\n      \u2551    AUCTION CHECK FUNCTIONS   \u2551\r\n      \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d*/\r\n\r\n\r\n    function _isAuctionExists(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return auctions[_nftAddress][_tokenId].quote != address(0);\r\n    }\r\n\r\n    function _isAuctionRunning(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return block.timestamp > auctions[_nftAddress][_tokenId].auctionStart && block.timestamp < auctions[_nftAddress][_tokenId].auctionEnd && auctions[_nftAddress][_tokenId].blockEnd == 0;\r\n    }\r\n\r\n    function _isAuctionFinished(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return (auctions[_nftAddress][_tokenId].blockEnd != 0 || block.timestamp >= auctions[_nftAddress][_tokenId].auctionEnd);\r\n    }\r\n\r\n    function _isAuctionValid(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address _highestBidder = auctions[_nftAddress][_tokenId].highestBidder;\r\n        uint256 _highestBid = auctions[_nftAddress][_tokenId].bids[_highestBidder];\r\n        return\r\n            _highestBidder != address(0) &&\r\n            _highestBid >= auctions[_nftAddress][_tokenId].minPrice && \r\n            auctions[_nftAddress][_tokenId].maxPrice > 0 ? _highestBid <= auctions[_nftAddress][_tokenId].maxPrice : true;\r\n    }\r\n\r\n    function _isAuctionWinner(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        address _highestBidder = auctions[_nftAddress][_tokenId].highestBidder;\r\n        return _highestBidder != address(0) && _highestBidder == _msgSender();\r\n    }\r\n\r\n    function _isAuctionLooser(address _nftAddress, uint256 _tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n         return auctions[_nftAddress][_tokenId].bids[_msgSender()] != 0 && auctions[_nftAddress][_tokenId].highestBidder != _msgSender();\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"userIsHighestBidder\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"contractTokensInAuction\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quote\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_auctionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceIncrement\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_bidAmount\",\"type\":\"uint128\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"rules\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"quoteAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"auctionStart\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"auctionEnd\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceIncrement\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"running\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTAuction", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea91fccb0bd59db40380035cf13313f1cf5f9afda5631ff322457c53bddd457b"}