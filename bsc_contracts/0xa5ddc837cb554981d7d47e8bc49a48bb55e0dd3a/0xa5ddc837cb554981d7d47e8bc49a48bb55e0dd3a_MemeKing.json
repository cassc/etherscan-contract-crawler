{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    \r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    \r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                 assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address public _owner;\r\n    address private _previousOwner;\r\n    uint256 public _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n\r\n        //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n    \r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock.\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked.\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract MemeKing is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1*10**(8+18);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    string public _name = \"MemeKing\";\r\n    string public _symbol = \"MMK\";\r\n    uint256 public _decimals = 18;\r\n\r\n    // Fees\r\n\r\n    struct FeeSet {\r\n        uint256 rewardFee;\r\n        uint256 marketingFee;\r\n        uint256 distributionFee;\r\n        uint256 devFee;\r\n        uint256 burnFee;\r\n        uint256 liquidityFee;\r\n    }\r\n\r\n    struct FeeAddresses {\r\n        address rewardFund;\r\n        address marketingFund;\r\n        address devFund;\r\n        address burnAddress;\r\n    }\r\n\r\n    address public BURN = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 public ZERO = 0;\r\n    address public _rewardWalletAddress;\r\n    address public _marketingWalletAddress;\r\n\r\n    FeeSet public buyFees;\r\n    FeeSet public buyWhaleFee;\r\n\r\n    FeeSet public sellFees;\r\n    FeeSet public sellWhaleFee;\r\n\r\n    FeeAddresses private feeAddresses;\r\n\r\n    uint256 public _taxFee;\r\n    uint256 private _previousTaxFee;\r\n\r\n    uint256 public _devFee;\r\n    uint256 private _previousDevFee;\r\n\r\n    uint256 public _marketingFee;\r\n    uint256 public _previousMarketingFee;\r\n\r\n    uint256 public _liquidityFee;\r\n    uint256 private _previousLiquidityFee;\r\n\r\n    uint256 public _rewardFee;\r\n    uint256 private _previousRewardFee;\r\n\r\n    uint256 public _burnFee;\r\n    uint256 private _previousBurnFee;\r\n\r\n    // Uniswap Router\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    uint256 public denominator = 1000;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    uint256 public numTokensSellToAddToLiquidity =(_tTotal * 1 / denominator); // 0.1%\r\n    uint256 public whaleAmount = (_tTotal * 10/denominator); // 1%\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor (address _rewardFund, address _marketingFund, address _devFund) {\r\n\r\n        setSellFees(50, 50, 20, 10, 10, 10);\r\n        setBuyFees(0, 10, 10, 10, 10, 10);\r\n        setWhaleSellFee(200, 50, 20, 10, 10, 10);\r\n        setWhaleBuyFee(0, 5, 5, 5, 5, 5);\r\n\r\n        feeAddresses.burnAddress = BURN;\r\n        changeFeeStatus(feeAddresses.burnAddress, true);\r\n        changeRewardStatus(feeAddresses.burnAddress, true);\r\n        setFeeAddresses(_rewardFund, _marketingFund, _devFund);\r\n        \r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        // pancakeswap 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        // ropsten 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\r\n        \r\n        //exclude owner and this contract from fee\r\n\r\n        changeFeeStatus(_msgSender(), true);\r\n        changeRewardStatus(_msgSender(), true);\r\n\r\n        changeFeeStatus(address(this), true);\r\n        changeRewardStatus(address(this), true);\r\n    \r\n        _owner = _msgSender();\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n\t\t\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function deliver(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function changeRewardStatus(address account, bool value) public onlyOwner {\r\n        if(value) {\r\n            if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n            }\r\n            _isExcluded[account] = true;\r\n            _excluded.push(account);\r\n        } else {\r\n            for (uint256 i = 0; i < _excluded.length; i++) {\r\n                if (_excluded[i] == account) {\r\n                    _excluded[i] = _excluded[_excluded.length - 1];\r\n                    _tOwned[account] = 0;\r\n                    _isExcluded[account] = false;\r\n                    _excluded.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    /// @dev FEES\r\n\r\n    function changeFeeStatus(address account, bool value) public onlyOwner {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n    \r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDev) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tDev, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity, tDev);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tDev = calculateDevFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tDev);\r\n        return (tTransferAmount, tFee, tLiquidity, tDev);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tDev, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rDev = tDev.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rDev);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(address sender, uint256 tLiquidity) private {\r\n        if(tLiquidity > 0) {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n            if(_isExcluded[address(this)])\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);    \r\n            emit Transfer(sender, address(this), tLiquidity);   \r\n        }\r\n        \r\n    }\r\n    \r\n    function _takeDev(address sender, uint256 tDev) private {\r\n        if(tDev > 0) {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rDev = tDev.mul(currentRate);\r\n            _rOwned[feeAddresses.devFund] = _rOwned[feeAddresses.devFund].add(rDev);\r\n            if(_isExcluded[feeAddresses.devFund])\r\n                _tOwned[feeAddresses.devFund] = _tOwned[feeAddresses.devFund].add(tDev);\r\n\r\n            emit Transfer(sender, feeAddresses.devFund, tDev);\r\n        }\r\n    }\r\n\r\n    function _takeReward(address sender, uint256 tReward) private {\r\n        if(tReward > 0) {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rReward = tReward.mul(currentRate);\r\n            _rOwned[feeAddresses.rewardFund] = _rOwned[feeAddresses.rewardFund].add(rReward);\r\n            if(_isExcluded[feeAddresses.rewardFund])\r\n                _tOwned[feeAddresses.rewardFund] = _tOwned[feeAddresses.rewardFund].add(tReward);\r\n\r\n            emit Transfer(sender, feeAddresses.rewardFund, tReward);\r\n        }\r\n    }\r\n\r\n    function _takeMarketing(address sender, uint256 tMarketing) private {\r\n        if(tMarketing > 0) {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rMarketing = tMarketing.mul(currentRate);\r\n            _rOwned[feeAddresses.marketingFund] = _rOwned[feeAddresses.marketingFund].add(rMarketing);\r\n            if(_isExcluded[feeAddresses.marketingFund])\r\n                _tOwned[feeAddresses.marketingFund] = _tOwned[feeAddresses.marketingFund].add(tMarketing); \r\n\r\n            emit Transfer(sender, feeAddresses.marketingFund, tMarketing);\r\n        }\r\n    }\r\n\r\n    function _takeBurn(address sender, uint256 tBurn) private {\r\n        if(tBurn > 0) {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rBurn = tBurn.mul(currentRate);\r\n            _rOwned[feeAddresses.burnAddress] = _rOwned[feeAddresses.burnAddress].add(rBurn);\r\n            if(_isExcluded[feeAddresses.burnAddress])\r\n                _tOwned[feeAddresses.burnAddress] = _tOwned[feeAddresses.burnAddress].add(tBurn);\r\n\r\n            emit Transfer(sender, feeAddresses.burnAddress, tBurn);\r\n        }\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(denominator);\r\n    }\r\n\r\n    function calculateDevFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_devFee).div(denominator);\r\n    }\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(denominator);\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_burnFee).div(denominator);\r\n    }\r\n\r\n    function calculateRewardFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_rewardFee).div(denominator);\r\n    }\r\n\r\n    function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marketingFee).div(denominator);\r\n    }\r\n\r\n    function setWhalePercent(uint256 _whalePercent) public onlyOwner {\r\n        whaleAmount = (_tTotal * _whalePercent/denominator);\r\n    }\r\n    \r\n    function removeAllFee() private { \r\n        _previousTaxFee = _taxFee;\r\n        _previousDevFee = _devFee;\r\n        _previousMarketingFee = _marketingFee;\r\n        _previousLiquidityFee = _liquidityFee;\r\n        _previousRewardFee = _rewardFee;\r\n        _previousBurnFee = _burnFee;\r\n        \r\n        _taxFee = 0;\r\n        _devFee = 0;\r\n        _marketingFee = 0;\r\n        _liquidityFee = 0;\r\n        _rewardFee = 0;\r\n        _burnFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        _taxFee = _previousTaxFee;\r\n        _devFee = _previousDevFee;\r\n        _marketingFee = _previousMarketingFee;\r\n        _liquidityFee = _previousLiquidityFee;\r\n        _rewardFee = _previousRewardFee;\r\n        _burnFee = _previousBurnFee;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n       \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            contractTokenBalance = numTokensSellToAddToLiquidity;\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n        \r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        // if selling\r\n        if(automatedMarketMakerPairs[to]) {\r\n            _liquidityFee = sellFees.liquidityFee;\r\n            _rewardFee = sellFees.rewardFee;\r\n            _marketingFee = sellFees.marketingFee;\r\n            _taxFee = sellFees.distributionFee;\r\n            _devFee = sellFees.devFee;\r\n            _burnFee = sellFees.burnFee;\r\n\r\n\r\n            //if selling more than 1% apply whale fee\r\n            if(amount >= whaleAmount) {\r\n                _liquidityFee = sellWhaleFee.liquidityFee;\r\n                _rewardFee = sellWhaleFee.rewardFee;\r\n                _marketingFee = sellWhaleFee.marketingFee;\r\n                _taxFee = sellWhaleFee.distributionFee;\r\n                _devFee = sellWhaleFee.devFee;\r\n                _burnFee = sellWhaleFee.burnFee;\r\n            }\r\n        } else if (automatedMarketMakerPairs[from]) { // if buying\r\n            _liquidityFee = buyFees.liquidityFee;\r\n            _rewardFee = buyFees.rewardFee;\r\n            _marketingFee = buyFees.marketingFee;\r\n            _taxFee = buyFees.distributionFee;\r\n            _devFee = buyFees.devFee;\r\n            _burnFee = buyFees.burnFee;\r\n\r\n            // if buying more than 1% apply whale fee\r\n            if(amount >= whaleAmount) {\r\n                _liquidityFee = buyWhaleFee.liquidityFee;\r\n                _rewardFee = buyWhaleFee.rewardFee;\r\n                _marketingFee = buyWhaleFee.marketingFee;\r\n                _taxFee = buyWhaleFee.distributionFee;\r\n                _devFee = buyWhaleFee.devFee;\r\n                _burnFee = buyWhaleFee.burnFee;\r\n            }\r\n        } else { // if making simple transfer\r\n            takeFee = false;\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half); \r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDev) = _getValues(tAmount);\r\n        \r\n        uint256 _tFee = calculateBurnFee(tAmount);\r\n        uint256 _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeBurn(sender, _tFee);\r\n\r\n       _tFee = calculateMarketingFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeMarketing(sender, _tFee);\r\n        \r\n        _tFee = calculateRewardFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeReward(sender, _tFee);\r\n        \r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeDev(sender, tDev);\r\n        \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        \r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDev) = _getValues(tAmount);\r\n        \r\n        uint256 _tFee = calculateBurnFee(tAmount);\r\n        uint256 _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeBurn(sender, _tFee);\r\n\r\n        _tFee = calculateMarketingFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeMarketing(sender, _tFee);\r\n        \r\n        _tFee = calculateRewardFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeReward(sender, _tFee);\r\n\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeDev(sender, tDev);\r\n        \r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        \r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDev) = _getValues(tAmount);\r\n\r\n        uint256 _tFee = calculateBurnFee(tAmount);\r\n        uint256 _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeBurn(sender, _tFee);\r\n\r\n        _tFee = calculateMarketingFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeMarketing(sender, _tFee);\r\n        \r\n        _tFee = calculateRewardFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeReward(sender, _tFee);\r\n\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeDev(sender, tDev);\r\n\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n        \r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tDev) = _getValues(tAmount);\r\n        \r\n        uint256 _tFee = calculateBurnFee(tAmount);\r\n        uint256 _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeBurn(sender, _tFee);\r\n\r\n        _tFee = calculateMarketingFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeMarketing(sender, _tFee);\r\n        \r\n        _tFee = calculateRewardFee(tAmount);\r\n        _rFee = _tFee.mul(_getRate());\r\n        tTransferAmount = tTransferAmount.sub(_tFee);\r\n        rTransferAmount = rTransferAmount.sub(_rFee);\r\n        _takeReward(sender, _tFee);\r\n\r\n        _takeLiquidity(sender, tLiquidity);\r\n        _takeDev(sender, tDev);\r\n\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        \r\n        _reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 amountToUpdate) external onlyOwner {\r\n        numTokensSellToAddToLiquidity = amountToUpdate;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\r\n\t\trequire(pair != uniswapV2Pair, \"MemeKing: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n\t\t_setAutomatedMarketMakerPair(pair, value);\r\n\t}\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"MemeKing: Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n        changeRewardStatus(pair, value);\r\n\t}\r\n\r\n    function setFeeAddresses(address _rewardFund, address _marketingFund, address _devFund) public onlyOwner {\r\n        if(isExcludedFromFee(feeAddresses.rewardFund))\r\n            changeFeeStatus(feeAddresses.rewardFund, false);\r\n        if(isExcludedFromFee(feeAddresses.marketingFund))\r\n            changeFeeStatus(feeAddresses.marketingFund, false);\r\n        if(isExcludedFromFee(feeAddresses.devFund))\r\n            changeFeeStatus(feeAddresses.devFund, false);\r\n\r\n        if(isExcludedFromReward(feeAddresses.rewardFund))\r\n            changeRewardStatus(feeAddresses.rewardFund, false);\r\n        if(isExcludedFromReward(feeAddresses.marketingFund))\r\n            changeRewardStatus(feeAddresses.marketingFund, false);\r\n        if(isExcludedFromReward(feeAddresses.devFund))\r\n            changeRewardStatus(feeAddresses.devFund, false);\r\n\r\n        feeAddresses.rewardFund = _rewardFund;\r\n        feeAddresses.marketingFund = _marketingFund;\r\n        feeAddresses.devFund = _devFund;\r\n\r\n        changeFeeStatus(feeAddresses.rewardFund, true);\r\n        changeFeeStatus(feeAddresses.marketingFund, true);\r\n        changeFeeStatus(feeAddresses.devFund, true);\r\n\r\n        changeRewardStatus(feeAddresses.rewardFund, true);\r\n        changeRewardStatus(feeAddresses.marketingFund, true);\r\n        changeRewardStatus(feeAddresses.devFund, true);\r\n    }\r\n\r\n    function setSellFees(uint256 _newLiquidityFee, uint256 _newRewardFee, uint256 _newMarketingFee, uint256 _newDistributionFee, uint256 _newDevFee, uint256 _newBurnFee) public onlyOwner {\r\n        sellFees.liquidityFee = _newLiquidityFee;\r\n        sellFees.rewardFee = _newRewardFee;\r\n        sellFees.marketingFee = _newMarketingFee;\r\n        sellFees.distributionFee = _newDistributionFee;\r\n        sellFees.devFee = _newDevFee;\r\n        sellFees.burnFee= _newBurnFee;\r\n    }\r\n\r\n    function setBuyFees(uint256 _newLiquidityFee, uint256 _newRewardFee, uint256 _newMarketingFee, uint256 _newDistributionFee, uint256 _newDevFee, uint256 _newBurnFee) public onlyOwner {\r\n        buyFees.liquidityFee = _newLiquidityFee;\r\n        buyFees.rewardFee = _newRewardFee;\r\n        buyFees.marketingFee = _newMarketingFee;\r\n        buyFees.distributionFee = _newDistributionFee;\r\n        buyFees.devFee = _newDevFee;\r\n        buyFees.burnFee= _newBurnFee;\r\n    }\r\n\r\n    function setWhaleBuyFee(uint256 _newLiquidityFee, uint256 _newRewardFee, uint256 _newMarketingFee, uint256 _newDistributionFee, uint256 _newDevFee, uint256 _newBurnFee) public onlyOwner {\r\n        buyWhaleFee.liquidityFee = _newLiquidityFee;\r\n        buyWhaleFee.rewardFee = _newRewardFee;\r\n        buyWhaleFee.marketingFee = _newMarketingFee;\r\n        buyWhaleFee.distributionFee = _newDistributionFee;\r\n        buyWhaleFee.devFee = _newDevFee;\r\n        buyWhaleFee.burnFee= _newBurnFee;\r\n    }\r\n\r\n    function setWhaleSellFee(uint256 _newLiquidityFee, uint256 _newRewardFee, uint256 _newMarketingFee, uint256 _newDistributionFee, uint256 _newDevFee, uint256 _newBurnFee) public onlyOwner {\r\n        sellWhaleFee.liquidityFee = _newLiquidityFee;\r\n        sellWhaleFee.rewardFee = _newRewardFee;\r\n        sellWhaleFee.marketingFee = _newMarketingFee;\r\n        sellWhaleFee.distributionFee = _newDistributionFee;\r\n        sellWhaleFee.devFee = _newDevFee;\r\n        sellWhaleFee.burnFee= _newBurnFee;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardWalletAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWhaleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"changeFeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"changeRewardStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellWhaleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"distributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBurnFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devFund\",\"type\":\"address\"}],\"name\":\"setFeeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToUpdate\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBurnFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBurnFee\",\"type\":\"uint256\"}],\"name\":\"setWhaleBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_whalePercent\",\"type\":\"uint256\"}],\"name\":\"setWhalePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newRewardFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDistributionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBurnFee\",\"type\":\"uint256\"}],\"name\":\"setWhaleSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MemeKing", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008f0d64ede6dbef1dadc9690c11d48d2c194b635800000000000000000000000030df865f2b0ad1d62c5de63c6f4ac5347a1050df000000000000000000000000c4099efad478859ea86e2feeb3da6db248f7fa17", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e8a0ddc484e1518da528bbae4aeaacb36b88d34d583c02419f8dac0cf87c5d0"}