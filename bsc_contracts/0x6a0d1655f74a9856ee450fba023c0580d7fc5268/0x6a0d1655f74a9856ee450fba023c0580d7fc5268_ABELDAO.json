{"SourceCode": "/*\r\n\r\n_____/\\\\\\\\\\\\\\\\\\__________________________________/\\\\\\\\____________/\\\\\\\\______________________________        \r\n ___/\\\\\\\\\\\\\\\\\\\\\\\\\\_______________________________\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______________________________       \r\n  __/\\\\\\/////////\\\\\\___/\\\\\\\\\\\\\\\\\\_________________\\/\\\\\\//\\\\\\____/\\\\\\//\\\\\\______________________________      \r\n   _\\/\\\\\\_______\\/\\\\\\__/\\\\\\/////\\\\\\_____/\\\\\\\\\\\\\\\\__\\/\\\\\\\\///\\\\\\/\\\\\\/_\\/\\\\\\_____/\\\\\\\\\\\\\\\\___/\\\\\\____/\\\\\\_     \r\n    _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\____/\\\\\\/////\\\\\\_\\/\\\\\\__\\///\\\\\\/___\\/\\\\\\___/\\\\\\/////\\\\\\_\\///\\\\\\/\\\\\\/__    \r\n     _\\/\\\\\\/////////\\\\\\_\\/\\\\\\//////____/\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\____\\///_____\\/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\/____   \r\n      _\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________\\//\\\\///////___\\/\\\\\\_____________\\/\\\\\\_\\//\\\\///////______/\\\\\\/\\\\\\___  \r\n       _\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\__________\\//\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_____________\\/\\\\\\__\\//\\\\\\\\\\\\\\\\\\\\__/\\\\\\/\\///\\\\\\_ \r\n        _\\///________\\///__\\///____________\\//////////__\\///______________\\///____\\//////////__\\///____\\///__\r\n\r\nABEL DAO\u613f\u666f\uff1a\u5efa\u7acb\u4e00\u4e2a\u4ee5\u4eba\u4e3a\u672c\u7684\u4ef7\u503c\u7f51\u7edc\uff0c\u4eba\u4eba\u6570\u636e\u81ea\u6cbb\uff0c\u6240\u6709\u8d44\u4ea7\u5408\u6570\u636e\u5f52\u4e2a\u4eba\u6240\u6709\uff0c\u6ca1\u6709\u4eba\u548c\u673a\u6784\u53ef\u4ee5\u4fb5\u72af\u548c\u5265\u524a\u3002\r\n        \u5efa\u7acb\u4e00\u4e2a\u81ea\u6211\u6fc0\u52b1\u7684\u7ecf\u6d4e\u7ec4\u7ec7\uff0c\u5206\u5e03\u5f0f\u7684\u7ecf\u6d4e\u4f53\u7cfb\u548c\u6c11\u4e3b\u5316\u7684\u7ba1\u7406\uff0c\u5c06\u6280\u672f\u3001\u8d44\u672c\u548c\u4eba\u529b\u8d44\u6e90\u6709\u673a\u7ed3\u5408\u8d77\u6765\uff0c\u5e2e\u52a9\u793e\u533a\u7ec4\u7ec7\u7684\u6bcf\u4e2a\u6210\u5458\u5229\u76ca\u6700\u5927\u5316\u3002\r\n        \u4f7f\u547d\uff1a\u53d7\u4efb\u4e8e\u5371\u3001\u5949\u547d\u4e8e\u575a\u3001\u503e\u5df1\u4e4b\u529b\u3001\u6210\u5f7c\uff08\u5e01\uff09\u4e4b\u9053\uff08DAO\uff09\r\n        \u8fd0\u4f5c\u673a\u5236\uff1a\u6301\u6709AD\u4ee3\u5e01\u5373\u4e3a\u793e\u533a\u6210\u5458\uff0c\u4eab\u6709\u793e\u533a\u6295\u7968\u6743\u5229\u3002\u9009\u4e3e\u59d4\u5458\u4f1a\uff0c\u6210\u7acb\u57fa\u91d1\u4f1a\uff0c\u6bcf\u7b14\u4ea4\u66138%\u6ce8\u5165\u57fa\u91d1\u4f1a\u94b1\u5305\u3002\u57fa\u91d1\u4f1a\u5c06\u4f1a\u628a\u7a0e\u6536\u6295\u5165\u5230\u4ee5web3.0\u4e3a\u4e3b\u5bfc\u7684\u751f\u6001\uff0c\u521b\u9020\u4ef7\u503c\u53cd\u54fa\u793e\u533a\uff0c\u5b9e\u73b0\u751f\u6001\u81ea\u6cbb\u3002\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b); \r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ncontract ABELDAO {\r\n  using SafeMath for uint;\r\n  string public symbol;\r\n  string public  name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n  mapping(address => uint256) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  address public uniswapV2Pair;\r\n  uint256 maxnum ;\r\n  IUniswapV2Router02  uniswapV2Router;\r\n  //\u9501\u4ed3\u591a\u5c11\u533a\u5757\uff08\u6309\u533a\u5757\u7ebf\u6027\u91ca\u653e\uff09\r\n  uint256 locktime1 = 52560000;\r\n  uint256 locktime2 = 288000;\r\n  //\u5f00\u59cb\u91ca\u653e\u533a\u5757\r\n  uint256 lockstart1 = 15000000;\r\n  uint256 lockstart2 = 15000000;\r\n  //\u57fa\u91d1\u94b1\u5305\u5730\u5740\r\n  address vaultAddr = 0xebd03CEa0Fd747A0504Aee1B47CE614348ed8d96;\r\n  //\u6d41\u56de\u6bd4\u4f8b(\u9664\u4ee51000)\r\n  uint256 fee = 80;\r\n  address owner;\r\n  mapping (address => User) users;\r\n  struct User{\r\n    uint256 locktime;\r\n    uint256 lockstart;\r\n    uint256 lockamount;\r\n}\r\n  constructor() public {\r\n    symbol = \"AD\";\r\n    name = \"ABEL DAO\";\r\n    decimals = 18;\r\n\towner = msg.sender;\r\n    _totalSupply = 390000000 * 10**uint(decimals);\r\n    balances[msg.sender] = _totalSupply;\r\n\t        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n\t  maxnum = 100000 * 10**uint(decimals);\r\n  }\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  \t    //\u5408\u7ea6\u7ba1\u7406\u5458\u6709\u6743\u9650\r\n\tmodifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n    function setOwner(address newOwner) public onlyOwner returns(address){\r\n\r\n\towner = newOwner;\r\n\treturn newOwner;\r\n  }\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n  function transfer(address to, uint amount) public returns (bool) { \r\n    if(to != uniswapV2Pair){\r\n      require(balances[to].add(amount)<=maxnum);\r\n    }\r\n  User storage user = users[msg.sender];\r\n  uint256 locks;\r\n  if(user.lockstart.add(user.locktime)>block.number){\r\n      locks = (user.lockamount).div(user.locktime).mul(user.lockstart.add(user.locktime).sub(block.number));\r\n  }else{\r\n    locks = 0;\r\n  }\r\n  require(balances[msg.sender].sub(amount)>=locks);\r\n  \r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    if(msg.sender==uniswapV2Pair || to==uniswapV2Pair){\r\n    uint256 realAmount = amount.mul(1000-fee).div(1000);\r\n    balances[to] = balances[to].add(realAmount);\t\r\n    balances[vaultAddr] = balances[vaultAddr].add(amount.sub(realAmount));\r\n    emit Transfer(msg.sender, to, realAmount);\r\n    emit Transfer(msg.sender, vaultAddr, amount.sub(realAmount));\r\n  }else {\r\n      balances[to] = balances[to].add(amount);\r\n      emit Transfer(msg.sender, to, amount);\r\n  }\r\n    return true;\r\n  }\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    require(spender != address(0), \"spender address is a zero address\");   \r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n  function transferFrom(address from, address to, uint256 amount) public returns (bool) {  \r\n    \r\n    if(to != uniswapV2Pair){\r\n      require(balances[to].add(amount)<=maxnum);\r\n    }\r\n\r\n  User storage user = users[from];\r\n  uint256 locks;\r\n  if(user.lockstart.add(user.locktime)>block.number){\r\n      locks = (user.lockamount).div(user.locktime).mul(user.lockstart.add(user.locktime).sub(block.number));\r\n  }else{\r\n    locks = 0;\r\n  }\r\n    require(balances[from].sub(amount)>=locks);\r\n    balances[from] = balances[from].sub(amount);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\r\n\r\n  if(from==uniswapV2Pair || to==uniswapV2Pair){\r\n    uint256 realAmount = amount.mul(1000-fee).div(1000);\r\n    balances[to] = balances[to].add(realAmount);\t\r\n    balances[vaultAddr] = balances[vaultAddr].add(amount.sub(realAmount));\r\n    emit Transfer(from, to, realAmount);\r\n    emit Transfer(from, vaultAddr,amount.sub(realAmount));\r\n  }else {\r\n      balances[to] = balances[to].add(amount);\r\n      emit Transfer(from, to, amount);\r\n  }\r\n    \r\n    \r\n    return true;\r\n  }\r\n\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  //\u8bbe\u7f6e\u5355\u4e2a\u5730\u5740\u6700\u5927\u6301\u5e01\u91cf\u9632\u79d1\u5b66\u5bb6\uff08\u5982\u679c\u4e70\u5165\u540e\u5927\u4e8e\u8fd9\u4e2a\u6301\u5e01\u91cf\u4f1a\u4e70\u5165\u5931\u8d25\uff09\r\n  function setMaxNum(uint256 newMAX) public onlyOwner{\r\n    maxnum = newMAX;\r\n  }\r\n  //\u8bbe\u7f6e\u56de\u6d41\u6bd4\u4f8b\r\n  function setFee(uint256 newFee)public onlyOwner{\r\n    fee = newFee;\r\n  }\r\n    //\u8bbe\u7f6e\u56de\u6d41\u5730\u5740\r\n  function setvaultAddr(address newVaultAddr)public onlyOwner{\r\n    vaultAddr = newVaultAddr;\r\n  }\r\n  //\u4e00\u4e2a\u5730\u5740\u53ea\u80fd\u7528\u4e00\u79cd\u9501\u4ed3\u6a21\u5f0f\r\n  //\u7b2c\u4e00\u79cd\u9501\u4ed3\r\n  function lock1(address to,uint256 amount) public onlyOwner{\r\n    amount = amount * 10**uint(decimals);\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    balances[to] = balances[to].add(amount);\r\n    //\u9501\u4ed3\r\n   User storage user = users[to];\r\n   user.locktime = locktime1;\r\n   user.lockstart = lockstart1;\r\n   user.lockamount = amount;\r\n   emit Transfer(msg.sender, to, amount);\r\n  }\r\n  //\u7b2c\u4e8c\u79cd\u9501\u4ed3\r\n  function lock2(address to,uint256 amount) public onlyOwner{\r\n    amount = amount * 10**uint(decimals);\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    balances[to] = balances[to].add(amount);\r\n    //\u9501\u4ed3\r\n   User storage user = users[to];\r\n   user.locktime = locktime2;\r\n   user.lockstart = lockstart2;\r\n   user.lockamount = amount;\r\n   emit Transfer(msg.sender, to, amount);\r\n  }\r\n//\u7b2c\u4e09\u79cd\u9501\u4ed3\uff08\u81ea\u5b9a\u4e49\u9501\u4ed3\u65f6\u95f4\u548c\u5f00\u59cb\u65f6\u95f4\uff09\r\n  function lock3(uint256 locktime,uint256 lockstart,address to,uint256 amount) public onlyOwner{\r\n    amount = amount * 10**uint(decimals);\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    balances[to] = balances[to].add(amount);\r\n    //\u9501\u4ed3\r\n   User storage user = users[to];\r\n   user.locktime = locktime;\r\n   user.lockstart = lockstart;\r\n   user.lockamount = amount;\r\n   emit Transfer(msg.sender, to, amount);\r\n  }\r\n  //\u67e5\u8be2\u672a\u89e3\u9501\u7684\u5e01\u6570\u91cf\r\n  function lockNumber(address addr)view public returns(uint256){\r\n    User storage user = users[addr];\r\n  uint256 locks;\r\n  if(user.lockstart.add(user.locktime)>block.number){\r\n      locks = (user.lockamount).div(user.locktime).mul(user.lockstart.add(user.locktime).sub(block.number));\r\n  }else{\r\n    locks = 0;\r\n  }\r\n  return locks;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockstart\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMAX\",\"type\":\"uint256\"}],\"name\":\"setMaxNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVaultAddr\",\"type\":\"address\"}],\"name\":\"setvaultAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ABELDAO", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d86084ee9028d8a50bf11aaf5360b51caee0888816435c5841cca324850e529"}