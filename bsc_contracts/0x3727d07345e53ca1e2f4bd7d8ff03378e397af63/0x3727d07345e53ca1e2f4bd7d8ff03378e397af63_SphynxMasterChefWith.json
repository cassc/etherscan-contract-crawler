{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MasterChefLockStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport \\\"@sphynxswap/sphynx-swap-lib/contracts/math/SafeMath.sol\\\";\\nimport \\\"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/IBEP20.sol\\\";\\nimport \\\"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/SafeBEP20.sol\\\";\\nimport \\\"@sphynxswap/sphynx-swap-lib/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./SphynxToken.sol\\\";\\n\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract SphynxMasterChefWithLockStaking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of Sphynxs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accsphynxPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accsphynxPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. sphynxs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that sphynxs distribution occurs.\\n        uint256 accSphynxPerShare; // Accumulated Sphynxs per share, times 1e12. See below.\\n    }\\n\\n    // The sphynx TOKEN!\\n    SphynxToken public sphynx;\\n    // Dev address.\\n    address public devaddr;\\n    // sphynx tokens created per block.\\n    uint256 public sphynxPerBlock;\\n    // Bonus muliplier for early sphynx makers.\\n    uint256 public BONUS_MULTIPLIER = 1;\\n\\n    uint256 public toBurn = 20;\\n    bool public isMint;\\n    uint256 public stakedTokens;\\n\\n    uint256 public rewardBalance;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when sphynx mining starts.\\n    uint256 public startBlock;\\n    uint256 public stakingTime;\\n    uint256 public stakingPeriods = 3 days;\\n    uint256 public lockPeriods = 90 days;\\n    uint256 public penaltyFee = 37; // initial penaltyFee 37%\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    event SetDev(address newDev);\\n\\n    constructor(\\n        SphynxToken _sphynx,\\n        address _devaddr,\\n        uint256 _sphynxPerBlock,\\n        uint256 _startBlock,\\n        uint256 _startTime\\n    ) public {\\n        sphynx = _sphynx;\\n        devaddr = _devaddr;\\n        sphynxPerBlock = _sphynxPerBlock;\\n        startBlock = _startBlock;\\n        stakingTime = _startTime;\\n\\n        // staking pool\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _sphynx,\\n                allocPoint: 100,\\n                lastRewardBlock: startBlock,\\n                accSphynxPerShare: 0\\n            })\\n        );\\n\\n        totalAllocPoint = 100;\\n        isMint = true;\\n        stakedTokens = 0;\\n    }\\n\\n    function updateLockPeriods(uint256 _lockPeriods) external onlyOwner {\\n        lockPeriods = _lockPeriods;\\n    }\\n\\n    function updateStakingPeriods(uint256 _stakingPeriods) external onlyOwner {\\n        stakingPeriods = _stakingPeriods;\\n    }\\n\\n    function updateStakingTime(uint256 _stakingTime) external onlyOwner {\\n        stakingTime = _stakingTime;\\n    }\\n\\n    function updatePenaltyFee(uint256 _penaltyFee) external onlyOwner {\\n        require(_penaltyFee <= 80, \\\"over-max-percent\\\");\\n        penaltyFee = _penaltyFee;\\n    }\\n\\n    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\\n        BONUS_MULTIPLIER = multiplierNumber;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function depositRewardToken(uint256 _amount) external onlyOwner {\\n        rewardBalance = rewardBalance.add(_amount);\\n        IBEP20(sphynx).safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function stakingAvailable() public view returns (bool _available) {\\n        uint256 currentTime = block.timestamp;\\n        uint256 _stakingTime = stakingTime;\\n        if (\\n            _stakingTime <= currentTime &&\\n            currentTime <= (_stakingTime + stakingPeriods)\\n        ) {\\n            _available = true;\\n        } else if (\\n            currentTime > (lockPeriods + _stakingTime + stakingPeriods)\\n        ) {\\n            uint256 times = currentTime\\n                .sub(_stakingTime)\\n                .sub(stakingPeriods)\\n                .div(lockPeriods);\\n            if (times != 0) {\\n                _stakingTime = _stakingTime.add(stakingPeriods).add(\\n                    lockPeriods.mul(times)\\n                );\\n            }\\n            if (\\n                _stakingTime <= currentTime &&\\n                currentTime <= (_stakingTime + stakingPeriods)\\n            ) {\\n                _available = true;\\n            }\\n        }\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IBEP20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accSphynxPerShare: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's sphynx allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    function changeToBurn(uint256 value) public onlyOwner {\\n        toBurn = value;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    // View function to see pending sphynxs on frontend.\\n    function pendingSphynx(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accSphynxPerShare = pool.accSphynxPerShare;\\n        uint256 lpSupply = stakedTokens;\\n        if (_pid != 0) {\\n            lpSupply = pool.lpToken.balanceOf(address(this));\\n        }\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 sphynxReward = multiplier\\n                .mul(sphynxPerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accSphynxPerShare = accSphynxPerShare.add(\\n                sphynxReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        return\\n            user.amount.mul(accSphynxPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = stakedTokens;\\n        if (_pid != 0) {\\n            lpSupply = pool.lpToken.balanceOf(address(this));\\n        }\\n\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 sphynxReward = multiplier\\n            .mul(sphynxPerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n        if (isMint) {\\n            sphynx.mint(devaddr, sphynxReward.div(100));\\n            sphynx.mint(address(this), sphynxReward);\\n        }\\n\\n        pool.accSphynxPerShare = pool.accSphynxPerShare.add(\\n            sphynxReward.mul(1e12).div(lpSupply)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function _availableStaking() internal {\\n        uint256 currentTime = block.timestamp;\\n        bool flag = false;\\n        if (\\n            stakingTime <= currentTime &&\\n            currentTime <= (stakingTime + stakingPeriods)\\n        ) {\\n            flag = true;\\n        } else if (currentTime > (lockPeriods + stakingTime + stakingPeriods)) {\\n            uint256 times = currentTime\\n                .sub(stakingTime)\\n                .sub(stakingPeriods)\\n                .div(lockPeriods);\\n            stakingTime = stakingTime.add(stakingPeriods).add(\\n                lockPeriods.mul(times)\\n            );\\n            if (\\n                stakingTime <= currentTime &&\\n                currentTime <= (stakingTime + stakingPeriods)\\n            ) {\\n                flag = true;\\n            }\\n        }\\n        require(flag, \\\"not-able-to-staking\\\");\\n    }\\n\\n    // Deposit LP tokens to MasterChef for sphynx allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, \\\"deposit sphynx by staking\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accSphynxPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeSphynxTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            _availableStaking();\\n            pool.lpToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        require(_pid != 0, \\\"withdraw sphynx by unstaking\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accSphynxPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (pending > 0) {\\n            safeSphynxTransfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            bool _available = stakingAvailable();\\n            if (_available) {\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n            } else {\\n                uint256 _penaltyFee = _amount.mul(penaltyFee).div(100);\\n                pool.lpToken.safeTransfer(owner(), _penaltyFee);\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.sub(_penaltyFee));\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Stake sphynx tokens to MasterChef\\n    function enterStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        updatePool(0);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accSphynxPerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeSphynxTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            _availableStaking();\\n            pool.lpToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.amount = user.amount.add(_amount);\\n            stakedTokens = stakedTokens.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\n        emit Deposit(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw sphynx tokens from STAKING.\\n    function leaveStaking(uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[0];\\n        UserInfo storage user = userInfo[0][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(0);\\n        uint256 pending = user.amount.mul(pool.accSphynxPerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        if (pending > 0) {\\n            safeSphynxTransfer(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            stakedTokens = stakedTokens.sub(_amount);\\n            bool _available = stakingAvailable();\\n            if (_available) {\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n            } else {\\n                uint256 _penaltyFee = _amount.mul(penaltyFee).div(100);\\n                pool.lpToken.safeTransfer(owner(), _penaltyFee);\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.sub(_penaltyFee));\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accSphynxPerShare).div(1e12);\\n\\n        emit Withdraw(msg.sender, 0, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe sphynx transfer function, just in case if rounding error causes pool to not have enough sphynxs.\\n    function safeSphynxTransfer(address _to, uint256 _amount) internal {\\n        if (!isMint) {\\n            rewardBalance = rewardBalance.sub(_amount);\\n        }\\n        uint256 amount = _amount.mul(toBurn).div(100);\\n        if (amount > 0) {\\n            sphynx.transfer(0x000000000000000000000000000000000000dEaD, amount);\\n        }\\n        sphynx.transfer(_to, _amount.sub(amount));\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public {\\n        require(msg.sender == devaddr, \\\"dev: wut?\\\");\\n        devaddr = _devaddr;\\n        emit SetDev(_devaddr);\\n    }\\n\\n    // Sphynx has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\\n    function updateEmissionRate(uint256 _perBlock) public onlyOwner {\\n        massUpdatePools();\\n        sphynxPerBlock = _perBlock;\\n    }\\n\\n    // Set mintable of reward token\\n    function updateIsMint(bool _isMint) external onlyOwner {\\n        isMint = _isMint;\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport './IBEP20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            'SafeBEP20: approve from non-zero to non-zero allowance'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            'SafeBEP20: decreased allowance below zero'\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\nimport '../GSN/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SphynxToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@sphynxswap/sphynx-swap-lib/contracts/access/Manageable.sol';\\nimport '@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/BEP20.sol';\\nimport '@sphynxswap/swap-core/contracts/interfaces/ISphynxPair.sol';\\nimport '@sphynxswap/swap-core/contracts/interfaces/ISphynxFactory.sol';\\nimport '@sphynxswap/swap-periphery/contracts/interfaces/ISphynxRouter02.sol';\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(uint80 _roundId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint80 roundId,\\n\\t\\t\\tint256 answer,\\n\\t\\t\\tuint256 startedAt,\\n\\t\\t\\tuint256 updatedAt,\\n\\t\\t\\tuint80 answeredInRound\\n\\t\\t);\\n}\\n\\ncontract SphynxToken is BEP20, Manageable {\\n\\tusing SafeMath for uint256;\\n\\n\\tISphynxRouter02 public sphynxSwapRouter;\\n\\taddress public sphynxSwapPair;\\n\\n\\tbool private swapping;\\n\\n\\taddress public masterChef;\\n\\taddress public sphynxBridge;\\n\\n\\taddress payable public marketingWallet = payable(0x982687617bc9a76420138a0F82b2fC1B8B11BbE3);\\n\\taddress payable public developmentWallet = payable(0x4A48062b88d5B8e9f0B7A5149F87288899C2d7f9);\\n\\taddress public lotteryAddress;\\n\\n\\tuint256 public usdAmountToSwap = 500;\\n\\n\\tuint256 public marketingFee;\\n\\tuint256 public developmentFee;\\n\\tuint256 public lotteryFee;\\n\\tuint256 public totalFees;\\n\\tuint256 public blockNumber;\\n\\n\\tbool public SwapAndLiquifyEnabled = false;\\n\\tbool public sendToLottery = false;\\n\\n\\tAggregatorV3Interface internal priceFeed;\\n\\n\\t// exlcude from fees and max transaction amount\\n\\tmapping(address => bool) private _isExcludedFromFees;\\n\\n\\t// getting fee addresses\\n\\tmapping(address => bool) public _isGetFees;\\n\\n\\t// store addresses that are automated market maker pairs. Any transfer to these addresses\\n\\t// could be subject to a maximum transfer amount\\n\\tmapping(address => bool) public automatedMarketMakerPairs;\\n\\n\\tmodifier onlyMasterChefAndBridge() {\\n\\t\\trequire(msg.sender == masterChef || msg.sender == sphynxBridge, 'Permission Denied');\\n\\t\\t_;\\n\\t}\\n\\n\\t// Contract Events\\n\\tevent ExcludeFromFees(address indexed account, bool isExcluded);\\n\\tevent GetFee(address indexed account, bool isGetFee);\\n\\tevent ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\\n\\tevent SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n\\tevent MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\\n\\tevent DevelopmentWalletUpdated(address indexed newDevelopmentWallet, address indexed oldDevelopmentWallet);\\n\\tevent LotteryAddressUpdated(address indexed newLotteryAddress, address indexed oldLotteryAddress);\\n\\tevent UpdateSphynxSwapRouter(address indexed newAddress, address indexed oldAddress);\\n\\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n\\tevent UpdateSwapAndLiquify(bool value);\\n\\tevent UpdateSendToLottery(bool value);\\n\\tevent SetMarketingFee(uint256 value);\\n\\tevent SetDevelopmentFee(uint256 value);\\n\\tevent SetLotteryFee(uint256 value);\\n\\tevent SetAllFeeToZero(uint256 marketingFee, uint256 developmentFee, uint256 lotteryFee);\\n\\tevent MaxFees(uint256 marketingFee, uint256 developmentFee, uint256 lotteryFee);\\n\\tevent SetUsdAmountToSwap(uint256 usdAmountToSwap);\\n\\tevent SetBlockNumber(uint256 blockNumber);\\n\\tevent UpdateMasterChef(address masterChef);\\n\\tevent UpdateSphynxBridge(address sphynxBridge);\\n\\n\\tconstructor() public BEP20('Sphynx Token', 'SPHYNX') {\\n\\t\\tuint256 _marketingFee = 5;\\n\\t\\tuint256 _developmentFee = 5;\\n\\t\\tuint256 _lotteryFee = 1;\\n\\n\\t\\tmarketingFee = _marketingFee;\\n\\t\\tdevelopmentFee = _developmentFee;\\n\\t\\tlotteryFee = _lotteryFee;\\n\\t\\ttotalFees = _marketingFee.add(_developmentFee);\\n\\t\\tblockNumber = 0;\\n\\n\\t\\tISphynxRouter02 _sphynxSwapRouter = ISphynxRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // mainnet\\n\\t\\t// Create a sphynxswap pair for SPHYNX\\n\\t\\taddress _sphynxSwapPair = ISphynxFactory(_sphynxSwapRouter.factory()).createPair(address(this), _sphynxSwapRouter.WETH());\\n\\n\\t\\tsphynxSwapRouter = _sphynxSwapRouter;\\n\\t\\tsphynxSwapPair = _sphynxSwapPair;\\n\\n\\t\\t_setAutomatedMarketMakerPair(sphynxSwapPair, true);\\n\\n\\t\\t// exclude from paying fees or having max transaction amount\\n\\t\\texcludeFromFees(marketingWallet, true);\\n\\t\\texcludeFromFees(developmentWallet, true);\\n\\t\\texcludeFromFees(address(this), true);\\n\\t\\texcludeFromFees(owner(), true);\\n\\n\\t\\t// set getFee addresses\\n\\t\\t_isGetFees[address(_sphynxSwapRouter)] = true;\\n\\t\\t_isGetFees[_sphynxSwapPair] = true;\\n\\t\\tpriceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\n\\n\\t\\t_mint(owner(), 1000000000 * (10**18));\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t// mint function for masterchef;\\n\\tfunction mint(address to, uint256 amount) public onlyMasterChefAndBridge {\\n\\t\\t_mint(to, amount);\\n\\t}\\n\\n\\tfunction updateSwapAndLiquifiy(bool value) public onlyManager {\\n\\t\\tSwapAndLiquifyEnabled = value;\\n\\t\\temit UpdateSwapAndLiquify(value);\\n\\t}\\n\\n\\tfunction updateSendToLottery(bool value) public onlyManager {\\n\\t\\tsendToLottery = value;\\n\\t\\temit UpdateSendToLottery(value);\\n\\t}\\n\\n\\tfunction setMarketingFee(uint256 value) external onlyManager {\\n\\t\\trequire(value <= 5, 'SPHYNX: Invalid marketingFee');\\n\\t\\tmarketingFee = value;\\n\\t\\ttotalFees = marketingFee.add(developmentFee);\\n\\t\\temit SetMarketingFee(value);\\n\\t}\\n\\n\\tfunction setDevelopmentFee(uint256 value) external onlyManager {\\n\\t\\trequire(value <= 5, 'SPHYNX: Invalid developmentFee');\\n\\t\\tdevelopmentFee = value;\\n\\t\\ttotalFees = marketingFee.add(developmentFee);\\n\\t\\temit SetDevelopmentFee(value);\\n\\t}\\n\\n\\tfunction setLotteryFee(uint256 value) external onlyManager {\\n\\t\\trequire(value <= 1, 'SPHYNX: Invalid lotteryFee');\\n\\t\\tlotteryFee = value;\\n\\t\\temit SetLotteryFee(value);\\n\\t}\\n\\n\\tfunction setAllFeeToZero() external onlyOwner {\\n\\t\\tmarketingFee = 0;\\n\\t\\tdevelopmentFee = 0;\\n\\t\\tlotteryFee = 0;\\n\\t\\ttotalFees = 0;\\n\\t\\temit SetAllFeeToZero(marketingFee, developmentFee, lotteryFee);\\n\\t}\\n\\n\\tfunction maxFees() external onlyOwner {\\n\\t\\tmarketingFee = 5;\\n\\t\\tdevelopmentFee = 5;\\n\\t\\tlotteryFee = 1;\\n\\t\\ttotalFees = marketingFee.add(developmentFee);\\n\\t\\temit MaxFees(marketingFee, developmentFee, lotteryFee);\\n\\t}\\n\\n\\tfunction updateSphynxSwapRouter(address newAddress) public onlyManager {\\n\\t\\trequire(newAddress != address(sphynxSwapRouter), 'SPHYNX: The router already has that address');\\n\\t\\temit UpdateSphynxSwapRouter(newAddress, address(sphynxSwapRouter));\\n\\t\\tsphynxSwapRouter = ISphynxRouter02(newAddress);\\n\\t\\taddress _sphynxSwapPair;\\n\\t\\t_sphynxSwapPair = ISphynxFactory(sphynxSwapRouter.factory()).getPair(address(this), sphynxSwapRouter.WETH());\\n\\t\\tif(_sphynxSwapPair == address(0)) {\\n\\t\\t\\t_sphynxSwapPair = ISphynxFactory(sphynxSwapRouter.factory()).createPair(address(this), sphynxSwapRouter.WETH());\\n\\t\\t}\\n\\t\\t_setAutomatedMarketMakerPair(sphynxSwapPair, false);\\n\\t\\tsphynxSwapPair = _sphynxSwapPair;\\n\\t\\t_setAutomatedMarketMakerPair(sphynxSwapPair, true);\\n\\t}\\n\\n\\tfunction updateMasterChef(address _masterChef) public onlyManager {\\n\\t\\trequire(masterChef != _masterChef, 'SPHYNX: MasterChef already exists!');\\n\\t\\tmasterChef = _masterChef;\\n\\t\\temit UpdateMasterChef(_masterChef);\\n\\t}\\n\\n\\tfunction updateSphynxBridge(address _sphynxBridge) public onlyManager {\\n\\t\\trequire(sphynxBridge != _sphynxBridge, 'SPHYNX: SphynxBridge already exists!');\\n\\t\\t_isExcludedFromFees[sphynxBridge] = false;\\n\\t\\tsphynxBridge = _sphynxBridge;\\n\\t\\t_isExcludedFromFees[sphynxBridge] = true;\\n\\t\\temit UpdateSphynxBridge(_sphynxBridge);\\n\\t}\\n\\n\\tfunction excludeFromFees(address account, bool excluded) public onlyManager {\\n\\t\\trequire(_isExcludedFromFees[account] != excluded, \\\"SPHYNX: Account is already the value of 'excluded'\\\");\\n\\t\\t_isExcludedFromFees[account] = excluded;\\n\\n\\t\\temit ExcludeFromFees(account, excluded);\\n\\t}\\n\\n\\tfunction setFeeAccount(address account, bool isGetFee) public onlyManager {\\n\\t\\trequire(_isGetFees[account] != isGetFee, \\\"SPHYNX: Account is already the value of 'isGetFee'\\\");\\n\\t\\t_isGetFees[account] = isGetFee;\\n\\n\\t\\temit GetFee(account, isGetFee);\\n\\t}\\n\\n\\tfunction excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\t_isExcludedFromFees[accounts[i]] = excluded;\\n\\t\\t}\\n\\n\\t\\temit ExcludeMultipleAccountsFromFees(accounts, excluded);\\n\\t}\\n\\n\\tfunction setAutomatedMarketMakerPair(address pair, bool value) public onlyManager {\\n\\t\\t_setAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\\n\\t\\trequire(automatedMarketMakerPairs[pair] != value, 'SPHYNX: Automated market maker pair is already set to that value');\\n\\t\\tautomatedMarketMakerPairs[pair] = value;\\n\\n\\t\\temit SetAutomatedMarketMakerPair(pair, value);\\n\\t}\\n\\n\\tfunction setUsdAmountToSwap(uint256 _usdAmount) public onlyManager {\\n\\t\\tusdAmountToSwap = _usdAmount;\\n\\t\\temit SetUsdAmountToSwap(usdAmountToSwap);\\n\\t}\\n\\n\\tfunction updateMarketingWallet(address newMarketingWallet) public onlyManager {\\n\\t\\trequire(newMarketingWallet != marketingWallet, 'SPHYNX: The marketing wallet is already this address');\\n\\t\\texcludeFromFees(newMarketingWallet, true);\\n\\t\\texcludeFromFees(marketingWallet, false);\\n\\t\\temit MarketingWalletUpdated(newMarketingWallet, marketingWallet);\\n\\t\\tmarketingWallet = payable(newMarketingWallet);\\n\\t}\\n\\n\\tfunction updateDevelopmentgWallet(address newDevelopmentWallet) public onlyManager {\\n\\t\\trequire(newDevelopmentWallet != developmentWallet, 'SPHYNX: The development wallet is already this address');\\n\\t\\texcludeFromFees(newDevelopmentWallet, true);\\n\\t\\texcludeFromFees(developmentWallet, false);\\n\\t\\temit DevelopmentWalletUpdated(newDevelopmentWallet, developmentWallet);\\n\\t\\tdevelopmentWallet = payable(newDevelopmentWallet);\\n\\t}\\n\\n\\tfunction updateLotteryAddress(address newLotteryAddress) public onlyManager {\\n\\t\\trequire(newLotteryAddress != lotteryAddress, 'SPHYNX: The lottery wallet is already this address');\\n\\t\\texcludeFromFees(newLotteryAddress, true);\\n\\t\\texcludeFromFees(lotteryAddress, false);\\n\\t\\temit LotteryAddressUpdated(newLotteryAddress, lotteryAddress);\\n\\t\\tlotteryAddress = newLotteryAddress;\\n\\t}\\n\\n\\tfunction setBlockNumber() public onlyOwner {\\n\\t\\tblockNumber = block.number;\\n\\t\\temit SetBlockNumber(blockNumber);\\n\\t}\\n\\n\\tfunction isExcludedFromFees(address account) public view returns (bool) {\\n\\t\\treturn _isExcludedFromFees[account];\\n\\t}\\n\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal override {\\n\\t\\trequire(from != address(0), 'BEP20: transfer from the zero address');\\n\\t\\trequire(to != address(0), 'BEP20: transfer to the zero address');\\n\\n\\t\\tif (amount == 0) {\\n\\t\\t\\tsuper._transfer(from, to, 0);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n        if(SwapAndLiquifyEnabled) {\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            uint256 bnbTokenAmount = _getTokenAmountFromBNB();\\n\\n\\t\\t    bool canSwap = contractTokenBalance >= bnbTokenAmount;\\n\\n            if (canSwap && !swapping && !automatedMarketMakerPairs[from]) {\\n                swapping = true;\\n\\n                // Set number of tokens to sell to bnbTokenAmount\\n                contractTokenBalance = bnbTokenAmount;\\n                swapTokens(contractTokenBalance);\\n                swapping = false;\\n            }\\n        }\\n\\n\\t\\t// indicates if fee should be deducted from transfer\\n\\t\\tbool takeFee = true;\\n\\n\\t\\t// if any account belongs to _isExcludedFromFee account then remove the fee\\n\\t\\tif (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\n\\t\\t\\ttakeFee = false;\\n\\t\\t}\\n\\n\\t\\tif (takeFee) {\\n\\t\\t\\tif (block.number - blockNumber <= 10) {\\n\\t\\t\\t\\tuint256 afterBalance = balanceOf(to) + amount;\\n\\t\\t\\t\\trequire(afterBalance <= 250000 * (10**18), 'Owned amount exceeds the maxOwnedAmount');\\n\\t\\t\\t}\\n\\t\\t\\tuint256 fees;\\n\\t\\t\\tif (_isGetFees[from] || _isGetFees[to]) {\\n\\t\\t\\t\\tif (block.number - blockNumber <= 5) {\\n\\t\\t\\t\\t\\tfees = amount.mul(99).div(10**2);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfees = amount.mul(totalFees).div(10**2);\\n\\t\\t\\t\\t\\tif (sendToLottery) {\\n\\t\\t\\t\\t\\t\\tuint256 lotteryAmount = amount.mul(lotteryFee).div(10**2);\\n\\t\\t\\t\\t\\t\\tamount = amount.sub(lotteryAmount);\\n\\t\\t\\t\\t\\t\\tsuper._transfer(from, lotteryAddress, lotteryAmount);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tamount = amount.sub(fees);\\n\\t\\t\\t\\tsuper._transfer(from, address(this), fees);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tsuper._transfer(from, to, amount);\\n\\t}\\n\\n\\tfunction swapTokens(uint256 tokenAmount) private {\\n\\t\\tswapTokensForEth(tokenAmount);\\n\\t\\tuint256 swappedBNB = address(this).balance;\\n\\t\\tuint256 marketingBNB = swappedBNB.mul(marketingFee).div(totalFees);\\n\\t\\tuint256 developmentBNB = swappedBNB.sub(marketingBNB);\\n\\t\\ttransferBNBToMarketingWallet(marketingBNB);\\n\\t\\ttransferBNBToDevelopmentWallet(developmentBNB);\\n\\t}\\n\\n\\t// Swap tokens on PacakeSwap\\n\\tfunction swapTokensForEth(uint256 tokenAmount) private {\\n\\t\\t// generate the sphynxswap pair path of token -> weth\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = address(this);\\n\\t\\tpath[1] = sphynxSwapRouter.WETH();\\n\\n\\t\\t_approve(address(this), address(sphynxSwapRouter), tokenAmount);\\n\\n\\t\\t// make the swap\\n\\t\\tsphynxSwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\t\\ttokenAmount,\\n\\t\\t\\t0, // accept any amount of ETH\\n\\t\\t\\tpath,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getNativeAmountFromUSD() public returns (uint256 amount) {\\n\\t\\t(\\n            uint80 roundID, \\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n            uint80 answeredInRound\\n        ) = priceFeed.latestRoundData();\\n        amount = usdAmountToSwap.mul(10 ** 10).div(uint256(price));\\n\\t}\\n\\n\\tfunction _getTokenAmountFromBNB() internal returns (uint256) {\\n\\t\\tuint256 tokenAmount;\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = sphynxSwapRouter.WETH();\\n\\t\\tpath[1] = address(this);\\n\\n\\t\\tuint256 nativeAmountToSwap = getNativeAmountFromUSD();\\n\\t\\tuint256[] memory amounts = sphynxSwapRouter.getAmountsOut(nativeAmountToSwap, path);\\n\\t\\ttokenAmount = amounts[1];\\n\\t\\treturn tokenAmount;\\n\\t}\\n\\n\\tfunction transferBNBToMarketingWallet(uint256 amount) private {\\n\\t\\tmarketingWallet.transfer(amount);\\n\\t}\\n\\n\\tfunction transferBNBToDevelopmentWallet(uint256 amount) private {\\n\\t\\tdevelopmentWallet.transfer(amount);\\n\\t}\\n}\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            codehash := extcodehash(account)\\n        }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}('');\\n        require(success, 'Address: unable to send value, recipient may have reverted');\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, 'Address: low-level call failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), 'Address: call to non-contract');\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor() internal {}\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/access/Manageable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\nimport '../GSN/Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an manager) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the manager account will be the one that deploys the contract. This\\n * can later be changed with {transferManagement}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyManager`, which can be applied to your functions to restrict their use to\\n * the manager.\\n */\\ncontract Manageable is Context {\\n    address private _manager;\\n\\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial manager.\\n     */\\n    constructor() internal {\\n        address msgSender = _msgSender();\\n        _manager = msgSender;\\n        emit ManagementTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current manager.\\n     */\\n    function manager() public view returns (address) {\\n        return _manager;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the manager.\\n     */\\n    modifier onlyManager() {\\n        require(_manager == _msgSender(), 'Manageable: caller is not the manager');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without manager. It will not be possible to call\\n     * `onlyManager` functions anymore. Can only be called by the current manager.\\n     *\\n     * NOTE: Renouncing management will leave the contract without an manager,\\n     * thereby removing any functionality that is only available to the manager.\\n     */\\n    function renounceManagement() public onlyManager {\\n        emit ManagementTransferred(_manager, address(0));\\n        _manager = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers management of the contract to a new account (`newManager`).\\n     * Can only be called by the current manager.\\n     */\\n    function transferManagement(address newManager) public onlyManager {\\n        _transferManagement(newManager);\\n    }\\n\\n    /**\\n     * @dev Transfers management of the contract to a new account (`newManager`).\\n     */\\n    function _transferManagement(address newManager) internal {\\n        require(newManager != address(0), 'Manageable: new manager is the zero address');\\n        emit ManagementTransferred(_manager, newManager);\\n        _manager = newManager;\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/sphynx-swap-lib/contracts/token/BEP20/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.0;\\n\\nimport '../../access/Ownable.sol';\\nimport '../../GSN/Context.sol';\\nimport './IBEP20.sol';\\nimport '../../math/SafeMath.sol';\\nimport '../../utils/Address.sol';\\n\\n/**\\n * @dev Implementation of the {IBEP20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {BEP20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of BEP20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IBEP20-approve}.\\n */\\ncontract BEP20 is Context, IBEP20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external override view returns (address) {\\n        return owner();\\n    }\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() public override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() public override view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() public override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-totalSupply}.\\n     */\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-balanceOf}.\\n     */\\n    function balanceOf(address account) public override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {BEP20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {BEP20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {BEP20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {BEP20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\\n     * the total supply.\\n     *\\n     * Requirements\\n     *\\n     * - `msg.sender` must be the token owner\\n     */\\n    function mint(uint256 amount) public onlyOwner returns (bool) {\\n        _mint(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `msg.sender`, decreasing the total supply.\\n     *\\n     */\\n    function burn(uint256 amount) public returns (bool) {\\n        _burn(_msgSender(), amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), 'BEP20: transfer from the zero address');\\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\\n\\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: mint to the zero address');\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal {\\n        require(account != address(0), 'BEP20: burn from the zero address');\\n\\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), 'BEP20: approve from the zero address');\\n        require(spender != address(0), 'BEP20: approve to the zero address');\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller's allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(\\n            account,\\n            _msgSender(),\\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-core/contracts/interfaces/ISphynxPair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ISphynxPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function swapFee() external view returns (uint32);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n    function setSwapFee(uint32) external;\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-core/contracts/interfaces/ISphynxFactory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface ISphynxFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setSwapFee(address _pair, uint32 _swapFee) external;\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-periphery/contracts/interfaces/ISphynxRouter02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './ISphynxRouter01.sol';\\n\\ninterface ISphynxRouter02 is ISphynxRouter01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@sphynxswap/swap-periphery/contracts/interfaces/ISphynxRouter01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface ISphynxRouter01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract SphynxToken\",\"name\":\"_sphynx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sphynxPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"SetDev\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"changeToBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSphynx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSphynxPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sphynx\",\"outputs\":[{\"internalType\":\"contract SphynxToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sphynxPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_perBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isMint\",\"type\":\"bool\"}],\"name\":\"updateIsMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriods\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyFee\",\"type\":\"uint256\"}],\"name\":\"updatePenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriods\",\"type\":\"uint256\"}],\"name\":\"updateStakingPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingTime\",\"type\":\"uint256\"}],\"name\":\"updateStakingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SphynxMasterChefWithLockStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006c93931a8ac1a94b7dde231a19a33d2a5cf3bab400000000000000000000000004dc3d07820074cdbe4d1b2b4ef7c095fa52a10200000000000000000000000000000000000000000000000000000000cda2d2800000000000000000000000000000000000000000000000000000000000fc3cd60000000000000000000000000000000000000000000000000000000062455170", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}