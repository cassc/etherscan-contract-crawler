{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LESLARVERSE.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n//    __   __________   ___   ___ \\n//   / /  / __/ __/ /  / _ | / _ \\\\\\n//  / /__/ _/_\\\\ \\\\/ /__/ __ |/ , _/\\n// /____/___/___/____/_/ |_/_/|_| \\n// LESLARVERSE\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./abstracts/core/Tokenomics.sol\\\";\\nimport \\\"./abstracts/core/RFI.sol\\\";\\nimport \\\"./abstracts/features/Expensify.sol\\\";\\n\\ncontract LESLARVERSE is \\n\\tIERC20Metadata, \\n\\tContext, \\n\\tOwnable,\\n\\tTokenomics, \\n\\tRFI,\\n\\tExpensify\\n{\\n\\tusing SafeMath for uint256;\\n\\n\\tconstructor() {\\n\\t\\t// Set special addresses\\n\\t\\tspecialAddresses[owner()] = true;\\n\\t\\tspecialAddresses[address(this)] = true;\\n\\t\\tspecialAddresses[deadAddr] = true;\\n\\t\\t// Set limit exemptions\\n\\t\\tLimitExemptions memory exemptions;\\n\\t\\texemptions.fees = true;\\n\\t\\tlimitExemptions[owner()] = exemptions;\\n\\t\\tlimitExemptions[address(this)] = exemptions;\\n\\t}\\n\\n/* ------------------------------- IERC20 Meta ------------------------------ */\\n\\n\\tfunction name() external pure override returns(string memory) { return NAME;}\\n\\tfunction symbol() external pure override returns(string memory) { return SYMBOL;}\\n\\tfunction decimals() external pure override returns(uint8) { return DECIMALS; }\\t\\n\\n/* ---------------------------------- Circulating Supply ---------------------------------- */\\n\\n\\tfunction totalCirculatingSupply() public view returns(uint256) {\\n\\t\\treturn _tTotal.sub(balanceOf(deadAddr));\\n\\t}\\n\\n/* -------------------------------- Overrides ------------------------------- */\\n\\n\\tfunction beforeTokenTransfer(address from, address to, uint256 amount) \\n\\t\\tinternal \\n\\t\\toverride\\n\\t{\\n\\t\\t// Try to execute all our accumulator features.\\n\\t\\ttriggerFeatures(from);\\n\\t}\\n\\n\\tfunction takeFee(address from, address to) \\n\\t\\tinternal \\n\\t\\tview \\n\\t\\toverride \\n\\t\\treturns(bool) \\n\\t{\\n\\t\\treturn canTakeFee(from, to);\\n\\t}\\n\\n/* -------------------------- Accumulator Triggers -------------------------- */\\n\\n\\t/**\\n\\t* @notice Convenience wrapper function which tries to trigger our custom \\n\\t* features.\\n\\t*/\\n\\tfunction triggerFeatures(address from) private {\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n\\t\\t// First determine which triggers can be triggered.\\n\\t\\tif (!liquidityPools[from]) {\\n\\t\\t\\t// Avoid falling into a tx loop.\\n\\t\\t\\tif (!inTriggerProcess) {\\n\\t\\t\\t\\tif (canTax(contractTokenBalance)) {\\n\\t\\t\\t\\t\\t_triggerTax();\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n/* ---------------------------- Internal Triggers --------------------------- */\\n\\n\\t/**\\n\\t* @notice Triggers tax and updates triggerLog\\n\\t*/\\n\\tfunction _triggerTax() internal {\\n\\t\\ttaxify(accumulatedForTax);\\n\\t}\\n\\n/* ---------------------------- External Triggers --------------------------- */\\n\\n\\t/**\\n\\t* @notice Allows to trigger tax manually.\\n\\t*/\\n\\tfunction triggerTax() external onlyOwner {\\n\\t\\tuint256 contractTokenBalance = balanceOf(address(this));\\n\\t\\trequire(canTax(contractTokenBalance), \\\"Not enough tokens accumulated.\\\");\\n\\t\\t_triggerTax();\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/abstracts/core/Tokenomics.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Tokenomics is IERC20, Ownable {\\n\\tusing SafeMath for uint256;\\n    mapping (address => bool) private _isBot;\\n\\n\\t// Global toggle to avoid trigger loops\\n\\tbool internal inTriggerProcess;\\n\\n/* ---------------------------------- Token --------------------------------- */\\n\\n\\tstring internal constant NAME = \\\"LESLARVERSE\\\";\\n\\tstring internal constant SYMBOL = \\\"LLVERSE\\\";\\n\\n\\tuint8 internal constant DECIMALS = 9;\\n\\tuint256 internal constant ZEROES = 10 ** DECIMALS;\\n\\n\\tuint256 private constant MAX = ~uint256(0);\\n\\tuint256 internal constant _tTotal = 1000000000000 * ZEROES;\\n\\tuint256 internal _rTotal = (MAX - (MAX % _tTotal));\\n\\n\\taddress public deadAddr = 0x000000000000000000000000000000000000dEaD;\\n\\n/* ---------------------------------- EXEMPTION --------------------------------- */\\n\\n\\t// Sometimes you just have addresses which should be exempt from any \\n\\t// limitations and fees.\\n\\tmapping(address => bool) public specialAddresses;\\n\\n\\t// Toggle multiple exemptions from transaction limits.\\n\\tstruct LimitExemptions {\\n\\t\\tbool fees;\\n\\t}\\n\\n\\t// Keeps a record of addresses with limitation exemptions\\n\\tmapping(address => LimitExemptions) internal limitExemptions;\\n\\n/* ---------------------------------- Transactions ---------------------------------- */\\n\\n\\t// To keep track of all LPs.\\n\\tmapping(address => bool) public liquidityPools;\\n\\n\\t// Convenience enum to differentiate transaction limit types.\\n\\tenum TransactionLimitType { TRANSACTION, WALLET, SELL }\\n\\t// Convenience enum to differentiate transaction types.\\n\\tenum TransactionType { REGULAR, SELL, BUY }\\n\\n\\t/**\\n\\t* @notice Adds address to a liquidity pool map. Can be called externaly.\\n\\t*/\\n\\tfunction addAddressToLPs(address lpAddr) public onlyOwner {\\n\\t\\tliquidityPools[lpAddr] = true;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Removes address from a liquidity pool map. Can be called externaly.\\n\\t*/\\n\\tfunction removeAddressFromLPs(address lpAddr) public onlyOwner {\\n\\t\\tliquidityPools[lpAddr] = false;\\n\\t}\\n\\n\\tfunction getTransactionType(address from, address to) \\n\\t\\tinternal view returns(TransactionType)\\n\\t{\\n\\t\\tif (liquidityPools[from] && !liquidityPools[to]) {\\n\\t\\t\\t// LP -> addr\\n\\t\\t\\treturn TransactionType.BUY;\\n\\t\\t} else if (!liquidityPools[from] && liquidityPools[to]) {\\n\\t\\t\\t// addr -> LP\\n\\t\\t\\treturn TransactionType.SELL;\\n\\t\\t}\\n\\t\\treturn TransactionType.REGULAR;\\n\\t}\\n\\n/* ---------------------------------- Fees ---------------------------------- */\\n\\tuint256 internal _tFeeTotal;\\n\\n\\t// To be collected for tax\\n\\tuint256 public _taxFee = 75;\\n\\tuint256 public _reflectionFee = 25;\\n\\t// Used to cache fee when removing fee temporarily.\\n\\tuint256 internal _previousTaxFee = _taxFee;\\n\\t// Used to cache fee when removing fee temporarily.\\n\\tuint256 internal _previousReflectionFee = _reflectionFee;\\n\\t// Will keep tabs on the amount which should be taken from wallet for taxes.\\n\\tuint256 public accumulatedForTax = 0;\\n\\n\\t/**\\n\\t * @notice Allows setting Tax fee.\\n\\t */\\n\\tfunction setTaxFee(uint256 fee)\\n\\t\\texternal \\n\\t\\tonlyOwner\\n\\t\\tsameValue(_taxFee, fee)\\n\\t{\\n\\t\\trequire(fee <= 100, \\\"fee cannot be more than 100%\\\");\\n\\t\\t_taxFee = fee;\\n\\t}\\n\\n\\tfunction setReflectionFee(uint256 fee)\\n\\t\\texternal \\n\\t\\tonlyOwner\\n\\t\\tsameValue(_reflectionFee, fee)\\n\\t{\\n\\t\\trequire(fee <= 100, \\\"fee cannot be more than 100%\\\");\\n\\t\\t_reflectionFee = fee;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows temporarily set all feees to 0. \\n\\t * It can be restored later to the previous fees.\\n\\t */\\n\\tfunction disableAllFeesTemporarily()\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tremoveAllFee();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Restore all fees from previously set.\\n\\t */\\n\\tfunction restoreAllFees()\\n\\t\\texternal\\n\\t\\tonlyOwner\\n\\t{\\n\\t\\trestoreAllFee();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Temporarily stops all fees. Caches the fees into secondary variables,\\n\\t * so it can be reinstated later.\\n\\t */\\n\\tfunction removeAllFee() internal {\\n\\t\\tif (_reflectionFee == 0 && _taxFee == 0) return;\\n\\n\\t\\t_previousTaxFee = _taxFee;\\n\\t\\t_previousReflectionFee = _reflectionFee;\\n\\t\\t_taxFee = 0;\\n\\t\\t_reflectionFee = 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Restores all fees removed previously, using cached variables.\\n\\t */\\n\\tfunction restoreAllFee() internal {\\n\\t\\t_reflectionFee = _previousReflectionFee;\\n\\t\\t_taxFee = _previousTaxFee;\\n\\t}\\n\\n\\tfunction calculateTaxFee(\\n\\t\\tuint256 amount,\\n\\t\\tuint8 multiplier\\n\\t) internal view returns(uint256) {\\n\\t\\treturn amount.mul(_taxFee).mul(multiplier).div(10 ** 2);\\n\\t}\\n\\n\\tfunction calculateReflectionFee(\\n\\t\\tuint256 amount,\\n\\t\\tuint8 multiplier\\n\\t) internal view returns(uint256) {\\n\\t\\treturn amount.mul(_reflectionFee).mul(multiplier).div(10 ** 2);\\n\\t}\\n\\n/* --------------------------- Exemption Utilities -------------------------- */\\n\\n\\t/**\\n\\t* @notice External function allowing owner to toggle various limit exemptions\\n\\t* for any address.\\n\\t*/\\n\\tfunction toggleLimitExemptions(\\n\\t\\taddress addr, \\n\\t\\tbool feesToggle\\n\\t) \\n\\t\\tpublic \\n\\t\\tonlyOwner\\n\\t{\\n\\t\\tLimitExemptions memory ex = limitExemptions[addr];\\n\\t\\tex.fees = feesToggle;\\n\\t\\tlimitExemptions[addr] = ex;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Updates old and new wallet fee exemptions.\\n\\t*/\\n\\tfunction swapExcludedFromFee(address newWallet, address oldWallet) internal {\\n\\t\\tif (oldWallet != address(0)) {\\n\\t\\t\\ttoggleLimitExemptions(oldWallet, false);\\n\\t\\t}\\n\\t\\ttoggleLimitExemptions(newWallet, true);\\n\\t}\\n\\n/* --------------------------- Triggers and limits -------------------------- */\\n\\n\\t// One contract accumulates 0.01% of total supply, trigger tax wallet sendout.\\n\\tuint256 public minToTax = _tTotal.mul(1).div(10000);\\n\\n\\t/**\\n\\t@notice External function allowing to set minimum amount of tokens which trigger\\n\\t* tax send out.\\n\\t*/\\n\\tfunction setMinToTax(uint256 minTokens) \\n\\t\\texternal \\n\\t\\tonlyOwner \\n\\t\\tsupplyBounds(minTokens)\\n\\t{\\n\\t\\tminToTax = minTokens * 10 ** 9;\\n\\t}\\n\\n/* --------------------------------- IERC20 --------------------------------- */\\n\\tfunction totalSupply() external pure override returns(uint256) {\\n\\t\\treturn _tTotal;\\n\\t}\\n\\n\\tfunction totalFees() external view returns(uint256) { \\n\\t\\treturn _tFeeTotal; \\n\\t}\\n\\n/* ---------------------------- Anti Bot System --------------------------- */\\n\\n    function setAntibot(address account, bool _bot) external onlyOwner{\\n        require(_isBot[account] != _bot, \\\"Value already set\\\");\\n        _isBot[account] = _bot;\\n    }\\n\\n    function isBot(address account) public view returns(bool){\\n        return _isBot[account];\\n    }\\n\\n/* -------------------------------- Helpers ------------------------------- */\\n\\n    // Use this in case BNB are sent to the contract by mistake\\n    function rescueBNB(uint256 weiAmount) external onlyOwner{\\n        require(address(this).balance >= weiAmount, \\\"insufficient BNB balance\\\");\\n        payable(msg.sender).transfer(weiAmount);\\n    }\\n\\n    function rescueBEP20Tokens(address tokenAddress) external lockTheProcess onlyOwner{\\n        IERC20(tokenAddress).transfer(msg.sender, IERC20(tokenAddress).balanceOf(address(this)));\\n\\t\\tif(tokenAddress == address(this)) {\\n\\t\\t\\t// Reset the accumulator, only if tokens actually sent, otherwise we keep\\n\\t\\t\\t// acumulating until above mentioned things are fixed.\\n\\t\\t\\taccumulatedForTax = 0;\\n\\t\\t}\\n    }\\n\\n/* -------------------------------- Modifiers ------------------------------- */\\n\\n\\tmodifier supplyBounds(uint256 minTokens) {\\n\\t\\trequire(minTokens * 10 ** 9 > 0, \\\"Amount must be more than 0\\\");\\n\\t\\trequire(minTokens * 10 ** 9 <= _tTotal, \\\"Amount must be not bigger than total supply\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier sameValue(uint256 firstValue, uint256 secondValue) {\\n\\t\\trequire(firstValue != secondValue, \\\"Already set to this value.\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier lockTheProcess {\\n\\t\\tinTriggerProcess = true;\\n\\t\\t_;\\n\\t\\tinTriggerProcess = false;\\n\\t}\\n}\"\r\n    },\r\n    \"contracts/abstracts/core/RFI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../core/Tokenomics.sol\\\";\\n\\nabstract contract RFI is IERC20, Ownable, Tokenomics {\\n\\tusing SafeMath for uint256;\\n\\tuint256 public taxBuy = 3;\\n    uint256 public taxSell = 3;\\n\\tmapping(address => uint256) internal _rOwned;\\n\\tmapping(address => uint256) internal _tOwned;\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\n\\tstruct TValues {\\n\\t\\tuint256 tTransferAmount;\\n\\t\\tuint256 tFee;\\n\\t\\tuint256 trFee;\\n\\t}\\n\\n\\tstruct RValues {\\n\\t\\tuint256 rAmount;\\n\\t\\tuint256 rTransferAmount;\\n\\t\\tuint256 rFee;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t// Assigns all reflected tokens to the deployer on creation\\n\\t\\t_rOwned[_msgSender()] = _rTotal;\\n\\n\\t\\temit Transfer(address(0), _msgSender(), _tTotal);\\n\\t}\\n\\n\\t/**\\n\\t* @notice External function allowing owner toggle any address as special address.\\n\\t*/\\n\\tfunction toggleSpecialWallets(address specialAddr, bool toggle) \\n\\t\\texternal \\n\\t\\tonlyOwner \\n\\t{\\n\\t\\tspecialAddresses[specialAddr] = toggle;\\n\\t}\\n\\n/* --------------------------- TAX -------------------------- */\\n\\n\\t //Set tax buy on percent\\n\\tfunction setTaxBuy(uint256 _percent)external onlyOwner{\\n\\t\\trequire(_percent <= 90, \\\"Should be lower than 90%\\\");\\n\\t\\ttaxBuy = _percent;\\n\\t}\\n\\n\\t//Set tax sale on percent\\n\\tfunction setTaxSell(uint256 _percent)external onlyOwner{\\n\\t\\trequire(_percent <= 90, \\\"Should be lower than 90%\\\");\\n\\t\\ttaxSell = _percent;\\n\\t}\\n\\n\\tfunction _getValues(\\n\\t\\tuint256 tAmount,\\n        bool isSellType\\n\\t) private view returns(\\n\\t\\tTValues memory tValues, RValues memory rValues\\n\\t) {\\n\\t\\tuint256 taxAmount;\\n        if(isSellType){\\n            taxAmount = tAmount.mul(taxSell).div(10 ** 2); \\n        }else{\\n            taxAmount = tAmount.mul(taxBuy).div(10 ** 2);\\n        }\\n\\t\\tTValues memory tV = _getTValues(tAmount,taxAmount);\\n\\t\\tRValues memory rV = _getRValues(\\n\\t\\t\\ttAmount,\\n\\t\\t\\ttV.tFee,\\n\\t\\t\\ttV.trFee,\\n\\t\\t\\t_getRate()\\n\\t\\t);\\n\\t\\treturn (tV, rV);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates values for \\\"total\\\" states.\\n\\t * @param tAmount Token amount related to which, total values are calculated.\\n\\t */\\n\\tfunction _getTValues(\\n\\t\\tuint256 tAmount,\\n        uint256 amountAfterTax\\n\\t) private view returns(TValues memory tValues) {\\n\\t\\tTValues memory tV;\\n\\t\\ttV.trFee = calculateReflectionFee(amountAfterTax, 1);\\n\\t\\ttV.tFee = calculateTaxFee(amountAfterTax, 1);\\n\\n\\t\\tuint256 fees = tV.tFee.add(tV.trFee);\\n\\t\\ttV.tTransferAmount = tAmount.sub(fees);\\n\\t\\treturn tV;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates values for \\\"reflected\\\" states.\\n\\t * @param tAmount Token amount related to which, reflected values are calculated.\\n\\t * @param tFee Total fee related to which, reflected values are calculated.\\n\\t * @param currentRate Rate used to calculate reflected values.\\n\\t */\\n\\tfunction _getRValues(\\n\\t\\tuint256 tAmount,\\n\\t\\tuint256 tFee,\\n\\t\\tuint256 trFee,\\n\\t\\tuint256 currentRate\\n\\t) private pure returns(RValues memory rValues) {\\n\\t\\tRValues memory rV;\\n\\t\\trV.rAmount = tAmount.mul(currentRate);\\n\\t\\trV.rFee = trFee.mul(currentRate);\\n\\t\\tuint256 rFee = tFee.mul(currentRate);\\n\\t\\tuint256 fees = rV.rFee + rFee;\\n\\t\\trV.rTransferAmount = rV.rAmount.sub(fees);\\n\\t\\treturn rV;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates the rate of total suply to reflected supply.\\n\\t */\\n\\tfunction _getRate() private view returns(uint256) {\\n\\t\\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n\\t\\treturn rSupply.div(tSupply);\\n\\t}\\n\\n\\tfunction _reflectFee(\\n\\t\\tuint256 rFee,\\n\\t\\tuint256 tFee\\n\\t) private {\\n\\t\\t_rTotal = _rTotal.sub(rFee);\\n\\t\\t_tFeeTotal = _tFeeTotal.add(tFee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns totals for \\\"total\\\" supply and \\\"reflected\\\" supply.\\n\\t */\\n\\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\\n\\t\\tuint256 rSupply = _rTotal;\\n\\t\\tuint256 tSupply = _tTotal;\\n\\t\\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n\\t\\treturn (rSupply, tSupply);\\n\\t}\\n\\n\\tfunction tokenFromReflection(\\n\\t\\tuint256 rAmount\\n\\t) public view returns(uint256) {\\n\\t\\trequire(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n\\t\\tuint256 currentRate = _getRate();\\n\\t\\treturn rAmount.div(currentRate);\\n\\t}\\n\\n/* --------------------------------- Custom --------------------------------- */\\n\\n\\t/**\\n\\t * @notice ERC20 token transaction approval with allowance.\\n\\t */\\n\\tfunction rfiApprove(\\n\\t\\taddress ownr,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\trequire(ownr != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[ownr][spender] = amount;\\n\\t\\temit Approval(ownr, spender, amount);\\n\\t}\\n\\n\\tfunction _transfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\t// To flag the address is bot or not\\n\\t\\trequire(!isBot(msg.sender), \\\"Bot account has been detected, contact admin for further information\\\");\\n\\t\\trequire(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\t\\trequire(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n\\t\\t// Override this in the main contract to plug your features inside transactions.\\n\\t\\tbeforeTokenTransfer(from, to, amount);\\n\\n\\t\\t// Transfer amount, it will take tax, liquidity fee\\n\\t\\tbool take = takeFee(from, to);\\n\\t\\t_tokenTransfer(from, to, amount, take);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Performs token transfer with fees.\\n\\t * @param sender Address of the sender.\\n\\t * @param recipient Address of the recipient.\\n\\t * @param amount Amount of tokens to send.\\n\\t * @param take Toggle on/off fees.\\n\\t */\\n\\tfunction _tokenTransfer(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount,\\n\\t\\tbool take\\n\\t) private {\\n\\t\\tbool isSellType = getTransactionType(sender, recipient) == TransactionType.SELL;\\n\\t\\t// Remove fees for this transaction if needed.\\n\\t\\tif (!take)\\n\\t\\t\\tremoveAllFee();\\n\\n\\t\\t// Calculate all reflection magic...\\n\\t\\t(TValues memory tV, RValues memory rV) = _getValues(amount,isSellType);\\n\\n\\t\\t// Adjust reflection states\\n\\t\\t_rOwned[sender] = _rOwned[sender].sub(rV.rAmount);\\n\\t\\t_rOwned[recipient] = _rOwned[recipient].add(rV.rTransferAmount);\\n\\n\\t\\t// Calcuate fees. If above fees were removed, then these will obviously\\n\\t\\t// not take any fees.\\n\\t\\t_takeTax(tV.tFee);\\n\\t\\t_reflectFee(rV.rFee, tV.trFee);\\n\\n\\t\\temit Transfer(sender, recipient, tV.tTransferAmount);\\n\\n\\t\\t// Reinstate fees if they were removed for this transaction.\\n\\t\\tif (!take)\\n\\t\\t\\trestoreAllFee();\\n\\t}\\n\\n\\t/**\\n\\t* @notice Override this function to intercept the transaction and perform \\n\\t* additional checks or perform certain functions before allowing transaction\\n\\t* to complete. You can prevent transaction to complete here too.\\n\\t*/\\n\\tfunction beforeTokenTransfer(\\n\\t\\taddress from, \\n\\t\\taddress to, \\n\\t\\tuint256 amount\\n\\t) virtual internal {\\n\\n\\n\\t}\\n\\n\\tfunction takeFee(address from, address to) virtual internal returns(bool) {\\n\\n\\n\\t\\treturn true;\\n\\t}\\n\\n/* ---------------------------------- Fees ---------------------------------- */\\n\\n\\tfunction canTakeFee(address from, address to) \\n\\t\\tinternal view returns(bool) \\n\\t{\\t\\n\\t\\tbool take = true;\\n\\t\\tif (\\n\\t\\t\\tlimitExemptions[from].fees \\n\\t\\t\\t|| limitExemptions[to].fees \\n\\t\\t\\t|| specialAddresses[from] \\n\\t\\t\\t|| specialAddresses[to]\\n\\t\\t) { take = false; }\\n\\n\\t\\treturn take;\\n\\t}\\n\\n/* ------------------------------- Custom fees ------------------------------ */\\n\\t/**\\n\\t* @notice Collects tokens from tax fee. Accordingly adjusts \\\"reflected\\\" \\n\\tamounts. \\n\\t*/\\n\\tfunction _takeTax(\\n\\t\\tuint256 tFee\\n\\t) private {\\n\\t\\tuint256 currentRate = _getRate();\\n\\t\\tuint256 rFee = tFee.mul(currentRate);\\n\\t\\t_rOwned[address(this)] = _rOwned[address(this)].add(rFee);\\n\\t\\t// Keep tabs, so when processing is triggered, we know how much should we take.\\n\\t\\taccumulatedForTax = accumulatedForTax.add(tFee);\\n\\t}\\n\\n/* --------------------------------- IERC20 --------------------------------- */\\n\\n\\tfunction balanceOf(\\n\\t\\taddress account\\n\\t) public view override returns(uint256) {\\n\\t\\treturn tokenFromReflection(_rOwned[account]);\\n\\t}\\n\\n\\tfunction transfer(\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public override returns(bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction allowance(\\n\\t\\taddress ownr,\\n\\t\\taddress spender\\n\\t) public view override returns(uint256) {\\n\\t\\treturn _allowances[ownr][spender];\\n\\t}\\n\\n\\tfunction approve(\\n\\t\\taddress spender,\\n\\t\\tuint256 amount\\n\\t) public override returns(bool) {\\n\\t\\trfiApprove(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public override returns(bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\trfiApprove(\\n\\t\\t\\tsender,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\t_allowances[sender][_msgSender()].sub(\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\\"ERC20: transfer amount exceeds allowance\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction increaseAllowance(\\n\\t\\taddress spender,\\n\\t\\tuint256 addedValue\\n\\t) public virtual returns(bool) {\\n\\t\\trfiApprove(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].add(addedValue)\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction decreaseAllowance(\\n\\t\\taddress spender,\\n\\t\\tuint256 subtractedValue\\n\\t) public virtual returns(bool) {\\n\\t\\trfiApprove(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender]\\n\\t\\t\\t.sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n/* -------------------------------- Modifiers ------------------------------- */\\n\\n\\tmodifier onlyOwnerOrHolder {\\n\\t\\trequire(\\n\\t\\t\\towner() == _msgSender() || balanceOf(_msgSender()) > 0, \\n\\t\\t\\t\\\"Only the owner and the holder can use this feature.\\\"\\n\\t\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyHolder {\\n\\t\\trequire(\\n\\t\\t\\tbalanceOf(_msgSender()) > 0, \\n\\t\\t\\t\\\"Only the holder can use this feature.\\\"\\n\\t\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n}\"\r\n    },\r\n    \"contracts/abstracts/features/Expensify.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../core/Tokenomics.sol\\\";\\nimport \\\"../core/RFI.sol\\\";\\n\\nabstract contract Expensify is Ownable, Tokenomics, RFI {\\n\\tusing SafeMath for uint256;\\n\\taddress public buybackWallet;\\n\\taddress public treasuryWallet;\\n\\taddress public marketingWallet;\\n\\t// Expenses fee accumulated amount will be divided using these.\\n\\tuint256 public buybackShare = 33; // 33%\\n\\tuint256 public treasuryShare = 33; // 33%\\n\\tuint256 public marketingShare = 34; // 34%\\n\\n\\t/**\\n\\t* @notice External function allowing to set/change buyback wallet.\\n\\t* @param wallet: this wallet will receive buyback share.\\n\\t* @param share: multiplier will be divided by 100. 30 -> 30%, 3 -> 3% etc.\\n\\t*/\\n\\tfunction setBuybackWallet(address wallet, uint256 share) \\n\\t\\texternal onlyOwner legitWallet(wallet) \\n\\t{\\n\\t\\tbuybackWallet = wallet;\\n\\t\\tbuybackShare = share;\\n\\t\\tswapExcludedFromFee(wallet, buybackWallet);\\n\\t}\\n\\n\\t/**\\n\\t* @notice External function allowing to set/change treasury wallet.\\n\\t* @param wallet: this wallet will receive treasury share.\\n\\t* @param share: multiplier will be divided by 100. 30 -> 30%, 3 -> 3% etc.\\n\\t*/\\n\\tfunction setTreasuryWallet(address wallet, uint256 share) \\n\\t\\texternal onlyOwner legitWallet(wallet)\\n\\t{\\n\\t\\ttreasuryWallet = wallet;\\n\\t\\ttreasuryShare = share;\\n\\t\\tswapExcludedFromFee(wallet, treasuryWallet);\\n\\t}\\n\\n\\t/**\\n\\t* @notice External function allowing to set/change marketing wallet.\\n\\t* @param wallet: this wallet will receive marketing share.\\n\\t* @param share: multiplier will be divided by 100. 30 -> 30%, 3 -> 3% etc.\\n\\t*/\\n\\tfunction setMarketingWallet(address wallet, uint256 share) \\n\\t\\texternal onlyOwner legitWallet(wallet)\\n\\t{\\n\\t\\tmarketingWallet = wallet;\\n\\t\\tmarketingShare = share;\\n\\t\\tswapExcludedFromFee(wallet, marketingWallet);\\n\\t}\\n\\n\\t/** \\n\\t* @notice Checks if all required prerequisites are met for us to trigger \\n\\t* taxes send out event.\\n\\t*/\\n\\tfunction canTax(\\n\\t\\tuint256 contractTokenBalance\\n\\t) \\n\\t\\tinternal \\n\\t\\tview\\n\\t\\treturns(bool) \\n\\t{\\n\\t\\treturn contractTokenBalance >= accumulatedForTax\\n            && accumulatedForTax >= minToTax;\\n\\t}\\n\\n\\t/**\\n\\t* @notice Splits tokens into pieces for product dev, dev and marketing wallets \\n\\t* and sends them out.\\n\\t* Note: Shares must add up to 100, otherwise tax fee will not be \\n\\t\\tdistributed properly. And that can invite many other issues.\\n\\t\\tSo we can't proceed. You will see \\\"Taxify\\\" event triggered on \\n\\t\\tthe blockchain with \\\"0, 0, 0\\\" then. This will guide you to check and fix\\n\\t\\tyour share setup.\\n\\t\\tWallets must be set. But we will not use \\\"require\\\", so not to trigger \\n\\t\\ttransaction failure just because someone forgot to set up the wallet \\n\\t\\taddresses. If you see \\\"Taxify\\\" event with \\\"0, 0, 0\\\" values, then \\n\\t\\tcheck if you have set the wallets.\\n\\t\\t@param tokenAmount amount of tokens to take from balance and send out.\\n\\t*/\\n\\tfunction taxify(\\n\\t\\tuint256 tokenAmount\\n\\t) internal lockTheProcess {\\n\\t\\tuint256 buybackPiece;\\n\\t\\tuint256 treasuryPiece;\\n\\t\\tuint256 marketingPiece;\\n\\n\\t\\tif (\\n\\t\\t\\tbuybackShare.add(treasuryShare).add(marketingShare) == 100\\n\\t\\t\\t&& buybackWallet != address(0) \\n\\t\\t\\t&& treasuryWallet != address(0)\\n\\t\\t\\t&& marketingWallet != address(0)\\n\\t\\t) {\\n\\t\\t\\tbuybackPiece = tokenAmount.mul(buybackShare).div(100);\\n\\t\\t\\ttreasuryPiece = tokenAmount.mul(treasuryShare).div(100);\\n\\t\\t\\t// Make sure all tokens are distributed.\\n\\t\\t\\tmarketingPiece = tokenAmount.sub(buybackPiece).sub(treasuryPiece);\\n\\t\\t\\t_transfer(address(this), buybackWallet, buybackPiece);\\n\\t\\t\\t_transfer(address(this), treasuryWallet, treasuryPiece);\\n\\t\\t\\t_transfer(address(this), marketingWallet, marketingPiece);\\n\\t\\t\\t// Reset the accumulator, only if tokens actually sent, otherwise we keep\\n\\t\\t\\t// acumulating until above mentioned things are fixed.\\n\\t\\t\\taccumulatedForTax = 0;\\n\\t\\t}\\n\\t\\t\\n \\t\\temit TaxifyDone(buybackPiece, treasuryPiece, marketingPiece);\\n\\t}\\n\\n/* --------------------------------- Events --------------------------------- */\\n\\tevent TaxifyDone(\\n\\t\\tuint256 tokensSentToBuyback,\\n\\t\\tuint256 tokensSentToTreasury,\\n\\t\\tuint256 tokensSentToMarketing\\n\\t);\\n\\n\\n/* -------------------------------- Modifiers ------------------------------- */\\n\\n\\tmodifier legitWallet(address wallet) {\\n\\t\\trequire(wallet != address(0), \\\"Wallet address must be set!\\\");\\n\\t\\trequire(wallet != address(this), \\\"Wallet address can't be this contract.\\\");\\n\\t\\t_;\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSentToBuyback\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSentToTreasury\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSentToMarketing\",\"type\":\"uint256\"}],\"name\":\"TaxifyDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedForTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddr\",\"type\":\"address\"}],\"name\":\"addAddressToLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllFeesTemporarily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minToTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpAddr\",\"type\":\"address\"}],\"name\":\"removeAddressFromLPs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restoreAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bot\",\"type\":\"bool\"}],\"name\":\"setAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setBuybackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"}],\"name\":\"setMinToTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setReflectionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTaxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setTaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"specialAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"feesToggle\",\"type\":\"bool\"}],\"name\":\"toggleLimitExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"specialAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"toggleSpecialWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LESLARVERSE", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}