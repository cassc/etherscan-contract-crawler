{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-03-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\r\n// Pxcube Migration V1 To V2\r\n// \u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\u2b50\r\n\r\npragma solidity ^0.8.8;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external pure returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IEverMigrate {\r\n    function migrateTokens(address sourceToken, address toAddress, uint256 amount) external;\r\n    function returnTokens(address sourceToken, address toAddress, uint256 amount) external;\r\n    function tokenMigrateDetails(address sourceToken) external view returns (address targetToken, uint256 ratio);\r\n    function allSupportedTokens() external view returns (address[] memory);\r\n    function allSupportedTokensLength() external view returns (uint256);\r\n    function supportsToken(address sourceToken) external view returns(bool);\r\n    \r\n    event TokenAdded(address fromToken, address toToken, uint256 ratio);\r\n    event TokensMigrated(address fromToken, address toToken, uint256 amountIn, uint256 amountOut);\r\n    event TokensReturned(address token, address toAddress, uint256 amount);\r\n}\r\n\r\ncontract PERAMIGRATION is IEverMigrate, Context, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct TokenDetails {\r\n        address sourceToken;\r\n        address targetToken;\r\n        address devAddress;\r\n        uint256 ratio;\r\n        bool isPresent;\r\n    }\r\n\r\n    struct Transaction {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n        uint32 txnId;\r\n    }\r\n\r\n    struct ClaimData {\r\n        uint256 claimAt;\r\n        uint256 totalAmount;\r\n        uint256 claimedAmount;\r\n    }\r\n\r\n    mapping (address => TokenDetails) private _tokenList;\r\n    mapping(address =>  ClaimData) public userClaimData;\r\n    address[] private _allTokens;\r\n    bool public  claimEnabled = false;\r\n\r\n    \r\n    uint32 private _txnId = 0;\r\n\r\n    address public _targetToken;\r\n    mapping (address => mapping (address => Transaction[])) private _userTxns;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    function setClaimEnabled() external onlyOwner {\r\n        claimEnabled = true;\r\n    }\r\n\r\n    function addTokenDetails(\r\n        address sourceToken,\r\n        address targetToken,\r\n        address devAddress,\r\n        uint256 ratio) external onlyOwner {\r\n        _tokenList[sourceToken] = TokenDetails(sourceToken, targetToken, devAddress, ratio, true);\r\n        _allTokens.push(sourceToken);\r\n\r\n        emit TokenAdded(sourceToken, targetToken, ratio);\r\n    }\r\n\r\n    function migrateTokens(address sourceToken, address toAddress, uint256 amount)  external {\r\n        require(amount > 0, \"Amount should be greater than Zero\");\r\n        require(toAddress != address(0), \"ERC20: transfer to the zero address is not allowed\");\r\n        require(supportsToken(sourceToken), \"Unsupported sourceToken\");\r\n\r\n        TokenDetails memory tokenDetails = _tokenList[sourceToken];\r\n        uint256 amountOut = amount\r\n            .mul(10**IERC20(tokenDetails.targetToken).decimals())\r\n            .div(10**IERC20(tokenDetails.sourceToken).decimals())\r\n            .div(tokenDetails.ratio);\r\n\r\n        IERC20(tokenDetails.sourceToken).transferFrom(_msgSender(), tokenDetails.devAddress, amount);\r\n        \r\n        if (userClaimData[_msgSender()].totalAmount > 0) {\r\n            userClaimData[_msgSender()].totalAmount += amount;\r\n        } else {\r\n            userClaimData[_msgSender()] = ClaimData(\r\n                0, // Last claimed at\r\n                amount, // total tokens to be claimed\r\n                0 // claimed amount\r\n            );\r\n        }\r\n\r\n        Transaction[] storage userTxns = _userTxns[sourceToken][_msgSender()];\r\n        userTxns.push(\r\n            Transaction({\r\n                amount: amount,\r\n                timestamp: block.timestamp,\r\n                txnId: _txnId\r\n            })\r\n        );\r\n        _userTxns[sourceToken][_msgSender()] = userTxns;\r\n\r\n        _txnId = _txnId + 1;\r\n\r\n        emit TokensMigrated(tokenDetails.sourceToken, tokenDetails.targetToken, amount, amountOut);\r\n    }\r\n\r\n    function updateTargetToken(address _newTokenAddress)  external  onlyOwner {\r\n        _targetToken = _newTokenAddress;\r\n\r\n    }\r\n\r\n    function claimAmount()\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 amount = userClaimData[_msgSender()].totalAmount;\r\n        \r\n        require(amount > 0, \"Zero claim amount\");\r\n        require(claimEnabled, \"Claim not enabled yet\");\r\n        \r\n        require(\r\n            amount <= IERC20(_targetToken).balanceOf(address(this)),\r\n            \"Not enough tokens in the contract\"\r\n        );\r\n\r\n        require((claimEnabled == true), \"Claim is not enable\");\r\n\r\n        userClaimData[msg.sender].claimAt = block.timestamp;\r\n\r\n        userClaimData[msg.sender].claimedAmount += amount;\r\n\r\n        bool status = IERC20(_targetToken).transfer(msg.sender, amount);\r\n        require(status, \"Token transfer failed\");\r\n        userClaimData[msg.sender].totalAmount -= amount;\r\n\r\n        return true;\r\n    }\r\n\r\n    function userTransactionsLength(address sourceToken, address userAddress) \r\n        external view returns (uint256) {\r\n        return _userTxns[sourceToken][userAddress].length;\r\n    }\r\n\r\n    function userTransaction(address sourceToken, address userAddress, uint256 position)\r\n        external view returns (uint256, uint256, uint32) {\r\n        Transaction storage txn = _userTxns[sourceToken][userAddress][position];\r\n        \r\n        return (txn.amount, txn.timestamp, txn.txnId);\r\n    }\r\n    \r\n    function returnTokens(address sourceToken, address toAddress, uint256 amount)\r\n        external onlyOwner {\r\n        require(amount > 0, \"Amount should be greater than Zero\");\r\n        require(toAddress != address(0), \"ERC20: transfer to the zero address is not allowed\");\r\n        require(supportsToken(sourceToken), \"Unsupported sourceToken\");\r\n\r\n        IERC20(_targetToken).transfer(toAddress, amount);\r\n\r\n        emit TokensReturned(_targetToken, toAddress, amount);\r\n    }\r\n\r\n    function claimStuckTokens(address token) external onlyOwner {        \r\n        IERC20 ERC20token = IERC20(token);\r\n        uint256 balance = ERC20token.balanceOf(address(this));\r\n        ERC20token.transfer(msg.sender, balance);\r\n    }\r\n    \r\n    function tokenMigrateDetails(address sourceToken) \r\n        external \r\n        view \r\n    returns (address targetToken, uint256 ratio) {\r\n        require(supportsToken(sourceToken), \"Unsupported sourceToken\");\r\n        \r\n        TokenDetails storage details = _tokenList[sourceToken];\r\n\r\n        targetToken = _targetToken;\r\n        ratio = details.ratio;\r\n    }\r\n\r\n    function allSupportedTokens() external view returns (address[] memory supportedTokens) {\r\n        return _allTokens;\r\n    }\r\n\r\n    function allSupportedTokensLength() external view returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    function supportsToken(address sourceToken) public view returns(bool) {\r\n        if (_tokenList[sourceToken].isPresent) return true;\r\n\r\n        return false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"TokensMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReturned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"addTokenDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"supportedTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allSupportedTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setClaimEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"supportsToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"tokenMigrateDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTokenAddress\",\"type\":\"address\"}],\"name\":\"updateTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"userTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"userTransactionsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PERAMIGRATION", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e29cc3eaa1ab4cb5145900600990f7305d5261f8f5128911b3ba26e3b0b483c"}