{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ShinzaStaking {\r\n    using SafeMath for uint256;\r\n    BEP20 public SHINZA = BEP20(0x95637774Edc037b6939d82B6dc1dA376CB41C217);\r\n    BEP20 public USDT = BEP20(0x4010CaE364380483ED040a10B320c53a7D556f0E);\r\n    \r\n    address public creator;\r\n\r\n    uint256 private constant timeStep = 30 minutes;\r\n    \r\n    struct Player {\r\n        address referrer;\r\n        \r\n        uint256 stakeAmt;\r\n        uint256 totalBuzz;\r\n        uint256 withdraw;\r\n        uint256 profit;\r\n        uint256 profitTime;\r\n        uint256 referralBonus;\r\n        bool isReg;\r\n        bool isRoyal1;\r\n        bool isRoyal2;\r\n        bool isRoyal3;\r\n        bool isRoyal4;\r\n        bool isRoyal5;\r\n        bool isRoyal6;\r\n        mapping(uint256 => uint256) referral;\r\n        mapping(uint256 => uint256) levelTeam;\r\n        mapping(uint256 => uint256) levelBuzz;\r\n        mapping(uint256 => uint256) incomeArray;\r\n       \r\n    }\r\n\r\n    mapping(address => Player) public players;\r\n\r\n    struct Deposit{\r\n        uint256 amount;\r\n        uint256 roiAmt;\r\n        uint256 depTime;\r\n        uint256 expTime;\r\n    }\r\n\r\n    struct Withdraw{\r\n        uint256 amount;\r\n        uint256 paidTime;\r\n    }\r\n    \r\n    mapping(address => Deposit[]) public deposits;\r\n\r\n    mapping(address => Withdraw[]) public withdraws;\r\n    \r\n    \r\n    uint[] level_bonuses = [15, 8, 6, 3, 2, 1, 1, 1, 1, 1];  \r\n    uint[] teamBuzz = [10e18, 20e18, 30e18, 50e18, 50e18, 50e18, 50e18, 50e18, 50e18, 50e18];  \r\n    uint8 constant max_length = 10;\r\n    uint256 startTime;\r\n    uint256 sp = 1e4;\r\n\r\n    mapping(uint256 => uint256) r1amt;\r\n    mapping(uint256 => uint256) r2amt;\r\n    mapping(uint256 => uint256) r3amt;\r\n    mapping(uint256 => uint256) r4amt;\r\n    mapping(uint256 => uint256) r5amt;\r\n    mapping(uint256 => uint256) r6amt;\r\n\r\n    address[] royal1;\r\n    address[] royal2;\r\n    address[] royal3;\r\n    address[] royal4;\r\n    address[] royal5;\r\n    address[] royal6;\r\n\r\n    modifier onlyCreator{\r\n        require(creator==msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier security {\r\n        uint size;\r\n        address sandbox = msg.sender;\r\n        assembly { size := extcodesize(sandbox) }\r\n        require(size == 0, \"Smart contract detected!\");\r\n        _;\r\n    }\r\n    \r\n    constructor() public {\r\n        creator=msg.sender;\r\n        players[msg.sender].isReg = true;\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function contractInfo() public view returns(uint256 balance){\r\n       return (USDT.balanceOf(address(this)));\r\n    }\r\n    \r\n    function register(address _referrer) public security returns(bool done){\r\n        require(players[_referrer].isReg==true,\"Sponsor is not registered.\");\r\n        require(players[msg.sender].isReg==false,\"You are already registered.\");\r\n        players[msg.sender].referrer = _referrer;\r\n        players[msg.sender].isReg = true;\r\n        return true;\r\n    }\r\n\r\n    function deposit(uint256 _usdt) public security{\r\n        require(_usdt >= 1e18, \"Invalid Amount\");\r\n        USDT.transferFrom(msg.sender,address(this),_usdt);\r\n        require(players[msg.sender].isReg == true, \"Please register first!\");\r\n        uint256 preroi =  _usdt.mul(4).div(1000);\r\n        deposits[msg.sender].push(Deposit(\r\n            _usdt,\r\n            preroi,\r\n            block.timestamp,\r\n            block.timestamp+1 days //750 days\r\n        ));\r\n\r\n        if(players[msg.sender].profitTime==0){\r\n            players[msg.sender].profitTime = block.timestamp;\r\n        }\r\n        players[msg.sender].stakeAmt+=_usdt;\r\n        _setReferral(players[msg.sender].referrer,_usdt);\r\n        uint256 totalDays=getCurDay(startTime);\r\n        r1amt[totalDays]+=_usdt.mul(2).div(100);\r\n        r2amt[totalDays]+=_usdt.mul(5).div(100);\r\n        r3amt[totalDays]+=_usdt.mul(8).div(100);\r\n        r4amt[totalDays]+=_usdt.mul(12).div(100);\r\n        r5amt[totalDays]+=_usdt.mul(15).div(100);\r\n        r6amt[totalDays]+=_usdt.mul(20).div(100);\r\n\r\n        updateR1(totalDays);\r\n        updateR2(totalDays);\r\n        updateR3(totalDays);\r\n        updateR4(totalDays);\r\n        updateR5(totalDays);\r\n        updateR6(totalDays);\r\n       \r\n    }\r\n\r\n    function _setReferral(address _referral, uint256 _refAmount) private {\r\n        for(uint8 i = 0; i < level_bonuses.length; i++) {\r\n            players[_referral].levelTeam[i]++;\r\n            players[_referral].totalBuzz+=_refAmount;\r\n            players[_referral].levelBuzz[i]+=_refAmount;\r\n            \r\n            if(i==0 && (players[_referral].stakeAmt>=100e18 || players[_referral].levelTeam[0]>=1)){\r\n                players[_referral].referralBonus+=_refAmount.mul(level_bonuses[i]).div(100);\r\n                players[_referral].referral[i]+=_refAmount.mul(level_bonuses[i]).div(100);\r\n            }\r\n            if(i==1 && players[_referral].levelTeam[0]>=2){\r\n                players[_referral].referralBonus+=_refAmount.mul(level_bonuses[i]).div(100);\r\n                players[_referral].referral[i]+=_refAmount.mul(level_bonuses[i]).div(100);\r\n            }\r\n            if(i==2 && players[_referral].levelTeam[0]>=3){\r\n                players[_referral].referralBonus+=_refAmount.mul(level_bonuses[i]).div(100);\r\n                players[_referral].referral[i]+=_refAmount.mul(level_bonuses[i]).div(100);\r\n            }\r\n            if(i==3 && players[_referral].levelTeam[0]>=4){\r\n                players[_referral].referralBonus+=_refAmount.mul(level_bonuses[i]).div(100);\r\n                players[_referral].referral[i]+=_refAmount.mul(level_bonuses[i]).div(100);\r\n            }\r\n            if(i==4 && players[_referral].levelTeam[0]>=5){\r\n                players[_referral].referralBonus+=_refAmount.mul(level_bonuses[i]).div(100);\r\n                players[_referral].referral[i]+=_refAmount.mul(level_bonuses[i]).div(100);\r\n            }\r\n            if(i>=5 && players[_referral].levelTeam[0]>=6){\r\n                players[_referral].referralBonus+=_refAmount.mul(level_bonuses[i]).div(100);\r\n                players[_referral].referral[i]+=_refAmount.mul(level_bonuses[i]).div(100);\r\n            }\r\n            \r\n            if(players[_referral].totalBuzz>=15e18 && players[_referral].isRoyal1==false){ //15000\r\n                players[_referral].isRoyal1=true;\r\n                royal1.push(_referral);\r\n            }\r\n            if(players[_referral].totalBuzz>=50e18 && players[_referral].isRoyal2==false){ //50000 \r\n                players[_referral].isRoyal2=true;\r\n                royal2.push(_referral);\r\n            }\r\n            if(players[_referral].totalBuzz>=100e18 && players[_referral].isRoyal3==false){ //100000\r\n                players[_referral].isRoyal3=true;\r\n                royal3.push(_referral);\r\n            }\r\n            if(players[_referral].totalBuzz>=200e18 && players[_referral].isRoyal4==false){ //200000\r\n                players[_referral].isRoyal4=true;\r\n                royal4.push(_referral);\r\n            }\r\n            if(players[_referral].totalBuzz>=400e18 && players[_referral].isRoyal5==false){ //400000\r\n                players[_referral].isRoyal5=true;\r\n                royal5.push(_referral);\r\n            }\r\n            if(players[_referral].totalBuzz>=800e18 && players[_referral].isRoyal6==false){ //800000\r\n                players[_referral].isRoyal6=true;\r\n                royal6.push(_referral);\r\n            }\r\n            _referral = players[_referral].referrer;\r\n            if(_referral == address(0)) break;\r\n        }\r\n    }\r\n\r\n    function updateR1(uint256 totalDays) private {\r\n        if(r1amt[totalDays-1]>0 && royal1.length>0){\r\n            uint256 distLAmount=r1amt[totalDays-1].div(royal1.length);\r\n            for(uint256 i = 0; i < royal1.length; i++) {\r\n                players[royal1[i]].incomeArray[0]+=distLAmount;\r\n            }\r\n            r1amt[totalDays-1]=0;\r\n        }\r\n    }\r\n\r\n    function updateR2(uint256 totalDays) private {\r\n        if(r2amt[totalDays-1]>0 && royal2.length>0){\r\n            uint256 distLAmount=r2amt[totalDays-1].div(royal2.length);\r\n            for(uint256 i = 0; i < royal2.length; i++) {\r\n                players[royal2[i]].incomeArray[1]+=distLAmount;\r\n            }\r\n            r2amt[totalDays-1]=0;\r\n        }\r\n    }\r\n\r\n    function updateR3(uint256 totalDays) private {\r\n        if(r3amt[totalDays-1]>0 && royal3.length>0){\r\n            uint256 distLAmount=r3amt[totalDays-1].div(royal3.length);\r\n            for(uint8 i = 0; i < royal3.length; i++) {\r\n                players[royal3[i]].incomeArray[2]+=distLAmount;\r\n            }\r\n            r3amt[totalDays-1]=0;\r\n        }\r\n    }\r\n\r\n    function updateR4(uint256 totalDays) private {\r\n        if(r3amt[totalDays-1]>0 && royal4.length>0){\r\n            uint256 distLAmount=r4amt[totalDays-1].div(royal4.length);\r\n            for(uint8 i = 0; i < royal4.length; i++) {\r\n                players[royal4[i]].incomeArray[3]+=distLAmount;\r\n            }\r\n            r4amt[totalDays-1]=0;\r\n        }\r\n    }\r\n\r\n    function updateR5(uint256 totalDays) private {\r\n        if(r3amt[totalDays-1]>0 && royal5.length>0){\r\n            uint256 distLAmount=r5amt[totalDays-1].div(royal5.length);\r\n            for(uint8 i = 0; i < royal5.length; i++) {\r\n                players[royal5[i]].incomeArray[4]+=distLAmount;\r\n            }\r\n            r5amt[totalDays-1]=0;\r\n        }\r\n    }\r\n\r\n    function updateR6(uint256 totalDays) private {\r\n        if(r3amt[totalDays-1]>0 && royal6.length>0){\r\n            uint256 distLAmount=r6amt[totalDays-1].div(royal6.length);\r\n            for(uint8 i = 0; i < royal6.length; i++) {\r\n                players[royal6[i]].incomeArray[5]+=distLAmount;\r\n            }\r\n            r5amt[totalDays-1]=0;\r\n        }\r\n    }\r\n\r\n    function genProfit(address _user) internal{\r\n        uint256 temproi;\r\n        uint256 totalDays = getCurDay(players[_user].profitTime);\r\n        for(uint256 i = 0; i < deposits[_user].length; i++){\r\n            Deposit storage pl = deposits[_user][i];\r\n            if(pl.expTime>block.timestamp){\r\n                temproi+=totalDays.mul(pl.roiAmt);\r\n            }\r\n            \r\n        }\r\n        players[_user].profit+=temproi;\r\n        players[_user].profitTime=block.timestamp;\r\n    }\r\n\r\n   \r\n\r\n    function viewProfit(address _user) public view returns(uint256 temproi){\r\n        uint256 totalDays = getCurDay(players[_user].profitTime);\r\n        for(uint256 i = 0; i < deposits[_user].length; i++){\r\n            Deposit storage pl = deposits[_user][i];\r\n            if(pl.expTime>block.timestamp){\r\n                temproi+=totalDays.mul(pl.roiAmt);\r\n            }\r\n        }\r\n        return temproi+players[_user].profit;\r\n    }\r\n\r\n    function viewRoyal1() public view returns(address [] memory r1){\r\n        for(uint256 i = 0; i < royal1.length; i++){\r\n            r1[i] = royal1[i];\r\n        }\r\n        return r1;\r\n    }\r\n\r\n    function viewRoyal2() public view returns(address [] memory r2){\r\n        for(uint256 i = 0; i < royal2.length; i++){\r\n            r2[i] = royal2[i];\r\n        }\r\n        return r2;\r\n    }\r\n\r\n    function viewRoyal3() public view returns(address [] memory r3){\r\n        for(uint256 i = 0; i < royal3.length; i++){\r\n            r3[i] = royal3[i];\r\n        }\r\n        return r3;\r\n    }\r\n\r\n    function viewRoyal4() public view returns(address [] memory r4){\r\n        for(uint256 i = 0; i < royal4.length; i++){\r\n            r4[i] = royal4[i];\r\n        }\r\n        return r4;\r\n    }\r\n\r\n    function viewRoyal5() public view returns(address [] memory r5){\r\n        for(uint256 i = 0; i < royal5.length; i++){\r\n            r5[i] = royal5[i];\r\n        }\r\n        return r5;\r\n    }\r\n\r\n    function viewRoyal6() public view returns(address [] memory r6){\r\n        for(uint256 i = 0; i < royal6.length; i++){\r\n            r6[i] = royal6[i];\r\n        }\r\n        return r6;\r\n    }\r\n\r\n    function viewUserTeamDetails(address _user) public view returns(uint256 [max_length] memory myteam, uint256 [max_length] memory teamBussiness, uint256 [max_length] memory income){\r\n        for(uint256 i = 0; i < level_bonuses.length; i++){\r\n            myteam[i] = players[_user].levelTeam[i];\r\n            teamBussiness[i] = players[_user].levelTeam[i];\r\n            income[i] = players[_user].referral[i];\r\n        }\r\n        return (myteam,teamBussiness,income);\r\n    }\r\n\r\n    function viewRoyalty(address _user) public view returns(uint256 [6] memory royalties){\r\n        for(uint256 i = 0; i < 6; i++){\r\n            royalties[i] = players[_user].incomeArray[i];\r\n        }\r\n        return royalties;\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public security{\r\n        Player storage player = players[msg.sender];\r\n        genProfit(msg.sender);\r\n      \r\n        uint bonus = (player.profit + player.referralBonus + player.incomeArray[0] + player.incomeArray[1] + player.incomeArray[2] + player.incomeArray[3] + player.incomeArray[4] + player.incomeArray[5])-player.withdraw;\r\n        require(_amount<=bonus ,\"Amount exceeds withdrawable\");\r\n        uint256 coin = _amount.mul(sp).div(1e4);\r\n        SHINZA.transfer(msg.sender,coin);\r\n        \r\n        withdraws[msg.sender].push(Withdraw(\r\n            _amount,\r\n            block.timestamp\r\n        ));\r\n\r\n        player.withdraw+=_amount;\r\n    }\r\n\r\n\r\n\r\n    function gensp(uint256 amt) external onlyCreator security{\r\n        sp = amt;\r\n    }\r\n\r\n    function recoverProfit(address recover, address coin, uint256 amt) external onlyCreator security{\r\n        BEP20(coin).transfer(recover,amt);\r\n    }\r\n\r\n    function getCurDay(uint256 st) public view returns(uint256) {\r\n        return (block.timestamp.sub(st)).div(timeStep);\r\n    }\r\n\r\n}  \r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SHINZA\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract BEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"gensp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"st\",\"type\":\"uint256\"}],\"name\":\"getCurDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBuzz\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralBonus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isReg\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRoyal1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRoyal2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRoyal3\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRoyal4\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRoyal5\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRoyal6\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recover\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"recoverProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"temproi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRoyal1\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"r1\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRoyal2\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"r2\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRoyal3\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"r3\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRoyal4\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"r4\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRoyal5\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"r5\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewRoyal6\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"r6\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewRoyalty\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"royalties\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewUserTeamDetails\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"myteam\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"teamBussiness\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[10]\",\"name\":\"income\",\"type\":\"uint256[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ShinzaStaking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2c9d944387b99c40b12e1f6f1461a66192629125be87c0c76b798ae8f9ac09ef"}