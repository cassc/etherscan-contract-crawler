{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 value) external;\r\n    function transfer(address to, uint256 value) external;\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract VCGamersStaking is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    IERC20 public stakeToken;\r\n    IERC20 public rewardToken;\r\n    IERC20 public token3;\r\n    address public owner;\r\n    uint256 public maxStakeableToken;\r\n    uint256 public minimumStakeToken;\r\n    uint256 public maxpoolbalance;\r\n    uint256 public maxaccountbalance;\r\n    uint256 public totalUnStakedToken;\r\n    uint256 public totalStakedToken;\r\n    uint256 public totalClaimedRewardToken;\r\n    uint256 public totalStakers;\r\n    uint256 public percentDivider;\r\n    uint256 public totalFee;\r\n    uint256[5] public Duration = [30 days, 60 days, 90 days, 180 days, 360 days];\r\n    uint256 public Bonus;\r\n    struct Stake {\r\n        uint256 unstaketime;\r\n        uint256 staketime;\r\n        uint256 amount;\r\n        uint256 lastharvesttime;\r\n        uint256 harvestreward;\r\n        bool withdrawan;\r\n        bool unstaked;\r\n    }\r\n\r\n    struct User {\r\n        uint256 totalStakedTokenUser;\r\n        uint256 totalUnstakedTokenUser;\r\n        uint256 totalClaimedRewardTokenUser;\r\n        uint256 stakeCount;\r\n        bool alreadyExists;\r\n    }\r\n\r\n    mapping(address => User) public Stakers;\r\n    mapping(uint256 => address) public StakersID;\r\n    mapping(address => mapping(uint256 => Stake)) public stakersRecord;\r\n\r\n    event STAKE(address Staker, uint256 amount);\r\n    event HARVEST(address Staker, uint256 amount);\r\n    event UNSTAKE(address Staker, uint256 amount);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyowner() {\r\n        require(owner == msg.sender, \"only owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable _owner, address token1, address token2, uint256 _Bonus) {\r\n        owner = _owner;\r\n        stakeToken = IERC20(token1);\r\n        rewardToken = IERC20(token2);\r\n        Bonus = _Bonus;\r\n        totalFee = 0;\r\n        maxStakeableToken = 100000000000000000000000;\r\n        percentDivider = 1000;\r\n        minimumStakeToken = 100000000000000000000;\r\n        maxpoolbalance = 5000000000000000000000000;\r\n        maxaccountbalance = 100000000000000000000000;\r\n    }\r\n\r\n    function stake(uint256 amount1, uint256 timeperiod) public nonReentrant {\r\n\r\n        require(timeperiod >= 0 && timeperiod <= 4, \"Invalid Time Period\");\r\n        require(amount1 >= minimumStakeToken, \"stake min than minimum amount\");\r\n        require(amount1 <= maxStakeableToken, \"stake more than maximum amount\");\r\n\r\n        //pool limiter\r\n        require(totalStakedToken.add(amount1).sub(totalUnStakedToken) <= maxpoolbalance, \"Pool Staking quota runs out\");\r\n        //account limiter\r\n        require(Stakers[msg.sender].totalStakedTokenUser.add(amount1).sub(Stakers[msg.sender].totalUnstakedTokenUser) <= maxaccountbalance, \"Account Staking quota runs out\");\r\n\r\n        uint256 amount = amount1.sub((amount1.mul(totalFee)).div(percentDivider));\r\n        \r\n        if (!Stakers[msg.sender].alreadyExists) {\r\n            Stakers[msg.sender].alreadyExists = true;\r\n            StakersID[totalStakers] = msg.sender;\r\n            totalStakers++;\r\n        }\r\n\r\n        TransferHelper.safeTransferFrom(address(stakeToken), msg.sender, address(this), amount1);\r\n        uint256 index = Stakers[msg.sender].stakeCount;\r\n        Stakers[msg.sender].totalStakedTokenUser = Stakers[msg.sender]\r\n            .totalStakedTokenUser\r\n            .add(amount);\r\n        totalStakedToken = totalStakedToken.add(amount);\r\n        stakersRecord[msg.sender][index].unstaketime = timeperiod;\r\n        stakersRecord[msg.sender][index].staketime = block.timestamp;\r\n        stakersRecord[msg.sender][index].amount = amount;\r\n        stakersRecord[msg.sender][index].lastharvesttime = 0;\r\n        stakersRecord[msg.sender][index].harvestreward = 0;\r\n        Stakers[msg.sender].stakeCount++;\r\n        emit STAKE(msg.sender, amount);\r\n    }\r\n\r\n\r\n    function unstake(uint256 index) public nonReentrant {\r\n        uint256 timeperiod = Duration[stakersRecord[msg.sender][index].unstaketime];\r\n        uint256 unstaketime = stakersRecord[msg.sender][index].staketime.add(timeperiod);\r\n        require(!stakersRecord[msg.sender][index].unstaked, \"already unstaked\");\r\n        require(\r\n            unstaketime < block.timestamp,\r\n            \"cannot unstake after before duration\"\r\n        );\r\n\r\n        if(!stakersRecord[msg.sender][index].withdrawan){\r\n            harvest(index);\r\n        }\r\n        stakersRecord[msg.sender][index].unstaked = true;\r\n\r\n        TransferHelper.safeTransfer(address(stakeToken), msg.sender, stakersRecord[msg.sender][index].amount);\r\n        \r\n        totalUnStakedToken = totalUnStakedToken.add(\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n        Stakers[msg.sender].totalUnstakedTokenUser = Stakers[msg.sender]\r\n            .totalUnstakedTokenUser\r\n            .add(stakersRecord[msg.sender][index].amount);\r\n\r\n        emit UNSTAKE(\r\n            msg.sender,\r\n            stakersRecord[msg.sender][index].amount\r\n        );\r\n    }\r\n\r\n    function harvest(uint256 index) public nonReentrant {\r\n        require(\r\n            !stakersRecord[msg.sender][index].withdrawan,\r\n            \"already withdrawan\"\r\n        );\r\n        require(!stakersRecord[msg.sender][index].unstaked, \"already unstaked\");\r\n\r\n        uint256 rewardTillNow;\r\n        uint256 commontimestamp;\r\n\r\n        (rewardTillNow,commontimestamp) = realtimeRewardPerSecond(msg.sender , index);\r\n        stakersRecord[msg.sender][index].lastharvesttime = commontimestamp;\r\n\r\n        TransferHelper.safeTransfer(address(rewardToken), msg.sender, rewardTillNow);\r\n        totalClaimedRewardToken = totalClaimedRewardToken.add(\r\n            rewardTillNow\r\n        );\r\n\r\n        stakersRecord[msg.sender][index].harvestreward = stakersRecord[msg.sender][index].harvestreward.add(rewardTillNow);\r\n        Stakers[msg.sender].totalClaimedRewardTokenUser = Stakers[msg.sender]\r\n            .totalClaimedRewardTokenUser\r\n            .add(rewardTillNow);\r\n\r\n        uint256 timeperiod = Duration[stakersRecord[msg.sender][index].unstaketime];\r\n        uint256 unstaketime = stakersRecord[msg.sender][index].staketime.add(timeperiod);\r\n        if(commontimestamp == unstaketime){\r\n            stakersRecord[msg.sender][index].withdrawan = true;\r\n        }\r\n\r\n        emit HARVEST(\r\n            msg.sender,\r\n            rewardTillNow\r\n        );\r\n    }\r\n\r\n    function realtimeRewardPerSecond(address user, uint256 index) public view returns (uint256, uint256) {\r\n        require(!stakersRecord[user][index].withdrawan, \"already withdrawan\");\r\n        require(!stakersRecord[user][index].unstaked, \"already unstaked\");\r\n\r\n        uint256 commontimestamp;\r\n        uint256 stakedToken = totalStakedToken.sub(totalUnStakedToken);\r\n        uint256 lastharvesttime = stakersRecord[user][index].lastharvesttime;\r\n        uint256 amount = stakersRecord[user][index].amount;\r\n        uint256 timeperiod = Duration[stakersRecord[user][index].unstaketime];\r\n        uint256 unstaketime = stakersRecord[user][index].staketime.add(timeperiod);\r\n\r\n        if(lastharvesttime == 0){\r\n            lastharvesttime = stakersRecord[user][index].staketime;\r\n        }\r\n\r\n        if(block.timestamp < unstaketime) {\r\n            commontimestamp = block.timestamp;\r\n        } else {\r\n            commontimestamp = unstaketime;\r\n        }\r\n        \r\n        uint256 stakedSec = commontimestamp - lastharvesttime;\r\n        uint256 rewardPerToken = Bonus.mul(amount).div(stakedToken);\r\n        uint256 ret = rewardPerToken.mul(stakedSec).div(Duration[4]);\r\n        return (ret, commontimestamp);\r\n    }\r\n\r\n    function realtimeReward(address user) public view returns (uint256) {\r\n        uint256 ret;\r\n        for (uint256 i; i < Stakers[user].stakeCount; i++) {\r\n            (uint256 reward,) = realtimeRewardPerSecond(user , i);\r\n            ret += reward;\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyowner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyowner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n\r\n    }\r\n\r\n    function SetStakeLimits(uint256 _min, uint256 _max) external onlyowner {\r\n        minimumStakeToken = _min;\r\n        maxStakeableToken = _max;\r\n    }\r\n\r\n\r\n    function SetPoolLimits(uint256 _amount) external onlyowner {\r\n        maxpoolbalance = _amount;\r\n    }\r\n\r\n    function SetAccountLimits(uint256 _amount) external onlyowner {\r\n        maxaccountbalance = _amount;\r\n    }\r\n    \r\n    function SetTotalFees(uint256 _fee) external onlyowner {\r\n        totalFee = _fee;\r\n    }\r\n\r\n    function SetStakeDuration(\r\n        uint256 index,\r\n        uint256 duration\r\n    ) external onlyowner {\r\n        Duration[index] = duration;\r\n    }\r\n\r\n    function SetStakeBonus(\r\n        uint256 _Bonus\r\n    ) external onlyowner {\r\n        Bonus = _Bonus;\r\n    }\r\n\r\n\r\n    function withdrawBNB() public onlyowner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"does not have any balance\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function initToken(address addr) public onlyowner{\r\n        token3 = IERC20(addr);\r\n    }\r\n    function withdrawToken(uint256 amount) public onlyowner {\r\n        TransferHelper.safeTransfer(address(token3), msg.sender, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HARVEST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UNSTAKE\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetAccountLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SetPoolLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Bonus\",\"type\":\"uint256\"}],\"name\":\"SetStakeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"SetStakeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"SetStakeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetTotalFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnstakedTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimedRewardTokenUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"alreadyExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"StakersID\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"initToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxaccountbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxpoolbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"realtimeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"realtimeRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeperiod\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstaketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staketime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastharvesttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestreward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"withdrawan\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token3\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VCGamersStaking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000005411984fa971ec2857fd1a3855f4d2755fe07d980000000000000000000000001f36fb2d91d9951cf58ae4c1956c0b77e224f1e9000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000000000000000014542ba12a337c00000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0c06aaf94ee6bfda3cd619a8d3ad733fce9d5be211464bd69e3707d7887c628"}