{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint256);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint256(~uint256(0)));\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n}\r\n\r\ninterface IWBNB {\r\n    function withdraw(uint wad) external;//unwarp WBNB -> BNB\r\n}\r\n\r\ncontract Token is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address payable public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 public kb = 3;\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;\r\n    uint256 public maxWalletAmount;\r\n    bool public limitEnable = true;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _rewardList;\r\n    mapping(address => bool) public isMaxEatExempt;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public currency;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _rewardTokenDistributor;\r\n\r\n    uint256 public _buyFundFee;\r\n    uint256 public _buyLPFee;\r\n    uint256 public _buyRewardFee;\r\n    uint256 public buy_burnFee;\r\n    uint256 public _sellFundFee;\r\n    uint256 public _sellLPFee;\r\n    uint256 public _sellRewardFee;\r\n    uint256 public sell_burnFee;\r\n\r\n    mapping(address => uint256) public user2blocks;\r\n    uint256 public batchBots;\r\n    bool public enableKillBatchBots;\r\n    uint256 public killBatchBlockNumber;\r\n\r\n    bool public currencyIsEth;\r\n\r\n    address public ETH;\r\n    uint256 public startTradeBlock;\r\n\r\n    address public _mainPair;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    bool public enableOffTrade;\r\n    bool public enableKillBlock;\r\n    bool public enableRewardList;\r\n    bool public enableSwapLimit;\r\n    bool public enableWalletLimit;\r\n    bool public enableChangeTax;\r\n\r\n    address[] public rewardPath;\r\n\r\n    constructor(\r\n        string[] memory stringParams,\r\n        address[] memory addressParams,\r\n        uint256[] memory numberParams,\r\n        bool[] memory boolParams\r\n    ) {\r\n        _name = stringParams[0];\r\n        _symbol = stringParams[1];\r\n        _decimals = numberParams[0];\r\n        uint256 total = numberParams[1];\r\n        _tTotal = total;\r\n\r\n        fundAddress = payable(addressParams[0]);\r\n        generateLpReceiverAddr = fundAddress;\r\n        require(!isContract(fundAddress), \"fundaddress is a contract \");\r\n        currency = addressParams[1];\r\n        ISwapRouter swapRouter = ISwapRouter(addressParams[2]);\r\n        address ReceiveAddress = addressParams[3];\r\n        ETH = addressParams[4];\r\n\r\n        maxBuyAmount = numberParams[2];\r\n        maxSellAmount = numberParams[3];\r\n        require(\r\n            maxSellAmount >= maxBuyAmount,\r\n            \" maxSell should be > than maxBuy \"\r\n        );\r\n        require(address(this) > currency);\r\n        maxWalletAmount = numberParams[4];\r\n\r\n        enableOffTrade = boolParams[0];\r\n        enableKillBlock = boolParams[1];\r\n        enableRewardList = boolParams[2];\r\n\r\n        enableSwapLimit = boolParams[3];\r\n        enableWalletLimit = boolParams[4];\r\n        enableChangeTax = boolParams[5];\r\n        currencyIsEth = boolParams[6];\r\n        enableKillBatchBots = boolParams[7];\r\n        enableTransferFee = boolParams[8];\r\n        antiSYNC = boolParams[9];\r\n\r\n        if (currencyIsEth){\r\n            currency = swapRouter.WETH();\r\n        }\r\n\r\n        rewardPath = [currency];\r\n        if (currency != ETH) {\r\n            if (currencyIsEth == false) {\r\n                rewardPath.push(swapRouter.WETH());\r\n            }\r\n            if (ETH != swapRouter.WETH()) rewardPath.push(ETH);\r\n        }\r\n\r\n\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _allowances[address(ReceiveAddress)][address(swapRouter)] = MAX;\r\n        IERC20(currency).approve(address(swapRouter), MAX);\r\n\r\n        _userInfo[address(ReceiveAddress)].lpAmount = MAX / 2;\r\n        _userInfo[address(fundAddress)].lpAmount = MAX / 2;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), currency);\r\n        _mainPair = swapPair;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        _buyFundFee = numberParams[5];\r\n        _buyLPFee = numberParams[6];\r\n        _buyRewardFee = numberParams[7];\r\n        buy_burnFee = numberParams[8];\r\n\r\n        _sellFundFee = numberParams[9];\r\n        _sellLPFee = numberParams[10];\r\n        _sellRewardFee = numberParams[11];\r\n\r\n        sell_burnFee = numberParams[12];\r\n\r\n        if (enableTransferFee) {\r\n            transferFee =\r\n                _sellFundFee +\r\n                _sellLPFee +\r\n                _sellRewardFee +\r\n                sell_burnFee;\r\n        }\r\n\r\n        require(\r\n            _buyFundFee + _buyLPFee + _buyRewardFee + buy_burnFee < 2500,\r\n            \"fee too high\"\r\n        );\r\n        require(\r\n            _sellFundFee + _sellLPFee + _sellRewardFee + sell_burnFee < 2500,\r\n            \"fee too high\"\r\n        );\r\n\r\n        killBatchBlockNumber = numberParams[13];\r\n        kb = numberParams[14];\r\n        airdropNumbs = numberParams[15];\r\n        require(airdropNumbs <= 3, \"airdropNumbs should be <= 3\");\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        _allowances[ReceiveAddress][address(swapRouter)] = MAX;\r\n\r\n        _feeWhiteList[fundAddress] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        // _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        _swapRouters[address(swapRouter)] = true;\r\n\r\n        isMaxEatExempt[msg.sender] = true;\r\n        isMaxEatExempt[fundAddress] = true;\r\n        isMaxEatExempt[ReceiveAddress] = true;\r\n        isMaxEatExempt[address(swapRouter)] = true;\r\n        isMaxEatExempt[address(_mainPair)] = true;\r\n        isMaxEatExempt[address(this)] = true;\r\n        isMaxEatExempt[address(0xdead)] = true;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[\r\n            address(0x000000000000000000000000000000000000dEaD)\r\n        ] = true;\r\n\r\n        holderRewardCondition = 10 ** IERC20(ETH).decimals() / 10;\r\n\r\n        _tokenDistributor = new TokenDistributor(currency);\r\n        // _rewardTokenDistributor = new TokenDistributor(ETH);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    bool public antiSYNC;\r\n    function setAntiSYNCEnable(bool s) public onlyOwner {\r\n        antiSYNC = s;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (account == _mainPair && msg.sender == _mainPair && antiSYNC) {\r\n            require(_balances[_mainPair] > 0, \"!sync\");\r\n        }\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setisMaxEatExempt(address holder, bool exempt) external onlyOwner {\r\n        isMaxEatExempt[holder] = exempt;\r\n    }\r\n\r\n    function setkb(uint256 a) public onlyOwner {\r\n        kb = a;\r\n    }\r\n\r\n    function isReward(address account) public view returns (uint256) {\r\n        if (_rewardList[account]) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    bool public airdropEnable = true;\r\n\r\n    function setAirDropEnable(bool status) public onlyOwner {\r\n        airdropEnable = status;\r\n    }\r\n\r\n    function _basicTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    uint256 public airdropNumbs = 0;\r\n\r\n    function setAirdropNumbs(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 3, \"newValue must <= 3\");\r\n        airdropNumbs = newValue;\r\n    }\r\n\r\n    bool public enableTransferFee = false;\r\n\r\n    function setEnableTransferFee(bool status) public onlyOwner {\r\n        // enableTransferFee = status;\r\n        if (status) {\r\n            transferFee =\r\n                _sellFundFee +\r\n                _sellLPFee +\r\n                _sellRewardFee +\r\n                sell_burnFee;\r\n        } else {\r\n            transferFee = 0;\r\n        }\r\n    }\r\n\r\n    bool public isAddV2;\r\n    bool public isRemoveV2;\r\n\r\n    uint256 public numTokensSellRate = 100;// 100%\r\n    function setNumTokensSellRate(uint256 newValue) public onlyOwner{\r\n        require(newValue!=0,\"greater than 0\");\r\n        numTokensSellRate = newValue;\r\n    }\r\n\r\n    uint256 public swapAtAmount = 0;\r\n    function setSwapAtAmount(uint256 newValue) public onlyOwner{\r\n        swapAtAmount = newValue;\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                    uint256 denominator = rootK * 17 + (rootKLast * 8);\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n    }\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n    function updateLPAmount(address account, uint256 lpAmount) public onlyOwner {\r\n        _userInfo[account].lpAmount = lpAmount;\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool excludeLP, bool preLP\r\n    ) {\r\n        lpAmount = _userInfo[account].lpAmount;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n        excludeLP = excludeHolder[account];\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        preLP = userInfo.preLP;\r\n    }\r\n\r\n    function initLPAmounts(address[] memory accounts, uint256 lpAmount) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmount;\r\n            userInfo.preLP = true;\r\n            addHolder(accounts[i]);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function matchInitLPAmounts(address[] memory accounts) public onlyOwner {\r\n        uint256 len = accounts.length;\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = mainPair.balanceOf(accounts[i]) + 1;\r\n            userInfo.preLP = true;\r\n            addHolder(accounts[i]);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    mapping(address => bool) public _swapRouters;\r\n    function setSwapRouter(address addr, bool enable) external onlyOwner {\r\n        _swapRouters[addr] = enable;\r\n    }\r\n\r\n    bool public _strictCheck = true;\r\n    function setStrictCheck(bool enable) external onlyOwner{\r\n        _strictCheck = enable;\r\n    }\r\n\r\n    uint256 public checkRemoveMode = 1;\r\n    function changeCheckRemoveMode(\r\n        uint256 newValue\r\n    ) public onlyOwner {\r\n        checkRemoveMode = newValue;\r\n    }\r\n\r\n    function _strictCheckBuy(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther < rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /\r\n            (_balances[_mainPair] - amount);\r\n        } else {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = amount * rOther / (rThis - amount);\r\n                //strictCheckBuy\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / \r\n            (balanceOf(_mainPair) - amount);\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity_2(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, , uint256 balanceOther) = _getReserves();\r\n        //isRemoveLP\r\n        if (balanceOther <= rOther) {\r\n            liquidity = (amount * ISwapPair(_mainPair).totalSupply() + 1) /\r\n            (balanceOf(_mainPair) - amount - 1);\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther) {\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = currency;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (isReward(from) > 0) {\r\n            require(false, \"isReward > 0 !\");\r\n        }\r\n\r\n        if (inSwap) {\r\n            _basicTransfer(from, to, amount);\r\n            return;\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isSell;\r\n\r\n        bool isTransfer;\r\n        // bool isRemove;\r\n        // bool isAdd;\r\n\r\n        // if (to == _mainPair) {\r\n        //     isAdd = _isAddLiquidity();\r\n        //     isAddV2 = isAdd;\r\n        // } else if (from == _mainPair) {\r\n        //     isRemove = _isRemoveLiquidity();\r\n        //     isRemoveV2 = isRemove;\r\n        // }\r\n\r\n        if (\r\n            !_feeWhiteList[from] &&\r\n            !_feeWhiteList[to] &&\r\n            !_swapPairList[from] &&\r\n            !_swapPairList[to] &&\r\n            startTradeBlock == 0\r\n        ){\r\n            require(\r\n                !isContract(to),\"cant add other lp\"\r\n            );\r\n        }\r\n\r\n        if (\r\n            !_feeWhiteList[from] &&\r\n            !_feeWhiteList[to] &&\r\n            airdropEnable &&\r\n            airdropNumbs > 0 && \r\n            (\r\n                _swapPairList[from] || _swapPairList[to]\r\n            )\r\n        ) {\r\n            address ad;\r\n            for (uint256 i = 0; i < airdropNumbs; i++) {\r\n                ad = address(\r\n                    uint160(\r\n                        uint256(\r\n                            keccak256(\r\n                                abi.encodePacked(i, amount, block.timestamp)\r\n                            )\r\n                        )\r\n                    )\r\n                );\r\n                _basicTransfer(from, ad, 1);\r\n            }\r\n            amount -= airdropNumbs * 1;\r\n        }\r\n\r\n\r\n        bool isRemove;\r\n        bool isAdd;\r\n        UserInfo storage userInfo;\r\n\r\n        uint256 addLPLiquidity;\r\n        if (\r\n            _swapPairList[to] &&\r\n            _swapRouters[msg.sender]\r\n        ) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0 && !isContract(from)) {\r\n                userInfo = _userInfo[from];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                isAdd = true;\r\n                if (0 == startTradeBlock) {\r\n                    userInfo.preLP = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        uint256 removeLPLiquidity;\r\n        if(\r\n            _swapPairList[from]\r\n        ) {\r\n           if (_strictCheck) {\r\n                removeLPLiquidity = _strictCheckBuy(amount);\r\n            } else {\r\n                if (checkRemoveMode == 1){\r\n                    removeLPLiquidity = _isRemoveLiquidity(amount);\r\n                }else{\r\n                    removeLPLiquidity = _isRemoveLiquidity_2(amount);\r\n                }\r\n            }\r\n\r\n            if (removeLPLiquidity > 0) {\r\n                require(_userInfo[to].lpAmount >= removeLPLiquidity);\r\n                _userInfo[to].lpAmount -= removeLPLiquidity;\r\n                isRemove = true;\r\n            }\r\n\r\n        }\r\n\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (enableOffTrade) {\r\n                    bool star = startTradeBlock > 0;\r\n                    require(\r\n                        star || (0 < startLPBlock && isAdd), // _swapPairList[to]\r\n                        \"pausing\"\r\n                    );\r\n                }\r\n                if (\r\n                    enableOffTrade &&\r\n                    enableKillBlock &&\r\n                    block.number < startTradeBlock + kb &&\r\n                    !_swapPairList[to]\r\n                ) {\r\n                    _rewardList[to] = true;\r\n                    // _funTransfer(from, to, amount);\r\n                }\r\n\r\n                if (\r\n                    enableKillBatchBots &&\r\n                    _swapPairList[from] &&\r\n                    block.number < startTradeBlock + killBatchBlockNumber\r\n                ) {\r\n                    if (block.number != user2blocks[tx.origin]) {\r\n                        user2blocks[tx.origin] = block.number;\r\n                    } else {\r\n                        batchBots++;\r\n                        _funTransfer(from, to, amount);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (_swapPairList[to]) {\r\n                    if (!inSwap && !isAdd) {\r\n                        uint256 contractTokenBalance = _balances[address(this)];\r\n                        if (contractTokenBalance > swapAtAmount) {\r\n                            uint256 swapFee = _buyFundFee +\r\n                                _buyRewardFee +\r\n                                _buyLPFee +\r\n                                _sellFundFee +\r\n                                _sellRewardFee +\r\n                                _sellLPFee;\r\n                            uint256 numTokensSellToFund = amount * numTokensSellRate / 100;\r\n                            if (numTokensSellToFund > contractTokenBalance) {\r\n                                numTokensSellToFund = contractTokenBalance;\r\n                            }\r\n                            swapTokenForFund(numTokensSellToFund, swapFee);\r\n                        }\r\n                    }\r\n                }\r\n                if (!isAdd && !isRemove) takeFee = true; // just swap fee\r\n            }\r\n            if (_swapPairList[to]) {\r\n                isSell = true;\r\n            }\r\n        }\r\n\r\n        if (!_swapPairList[from] && !_swapPairList[to]) {\r\n            isTransfer = true;\r\n        }\r\n\r\n        _tokenTransfer(\r\n            from,\r\n            to,\r\n            amount,\r\n            takeFee,\r\n            isSell,\r\n            isTransfer,\r\n            isAdd,\r\n            isRemove\r\n        );\r\n\r\n        if (from != address(this)) {\r\n            if (isSell) {\r\n                addHolder(from);\r\n            }\r\n            processReward(lpRewardGas);\r\n        }\r\n    }\r\n\r\n    uint256 public lpRewardGas = 500000;\r\n    function setLpRewardGas(uint256 newValue) public onlyOwner{\r\n        require(newValue >= 200000 && newValue <= 2000000,\"too high or too low\");\r\n        lpRewardGas = newValue;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = (tAmount * 90) / 100;\r\n        _takeTransfer(sender, fundAddress, feeAmount);\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    uint256 public transferFee;\r\n    uint256 public addLiquidityFee;\r\n    uint256 public removeLiquidityFee;\r\n\r\n    function setTransferFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 2500, \"transfer > 25 !\");\r\n        transferFee = newValue;\r\n    }\r\n\r\n    function setAddLiquidityFee(uint256 newValue) public onlyOwner {\r\n        require(newValue <= 2500, \"add Lp > 25 !\");\r\n        addLiquidityFee = newValue;\r\n    }\r\n\r\n    function setRemoveLiquidityFee(uint256 newValue) public onlyOwner {\r\n        // require(newValue <= 9000, \"remove Lp> 50 !\");\r\n        removeLiquidityFee = newValue;\r\n    }\r\n\r\n    uint256 public canRemoveTime = 5 * 30 * 24 * 60 * 60;\r\n    function setCanRemoveTime(uint256 newValue) public onlyOwner{\r\n        canRemoveTime = newValue;\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell,\r\n        bool isTransfer,\r\n        bool isAdd,\r\n        bool isRemove\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            uint256 swapFee;\r\n            if (isSell) {\r\n                swapFee = _sellFundFee + _sellRewardFee + _sellLPFee;\r\n                if (enableSwapLimit) {\r\n                    require(tAmount <= maxSellAmount, \"over max sell amount\");\r\n                }\r\n            } else {\r\n                swapFee = _buyFundFee + _buyLPFee + _buyRewardFee;\r\n                if (enableSwapLimit) {\r\n                    require(tAmount <= maxBuyAmount, \"over max buy amount\");\r\n                }\r\n            }\r\n\r\n            uint256 swapAmount = (tAmount * swapFee) / 10000;\r\n            if (swapAmount > 0) {\r\n                feeAmount += swapAmount;\r\n                _takeTransfer(sender, address(this), swapAmount);\r\n            }\r\n\r\n            uint256 burnAmount;\r\n            if (!isSell) {\r\n                //buy\r\n                burnAmount = (tAmount * buy_burnFee) / 10000;\r\n            } else {\r\n                //sell\r\n                burnAmount = (tAmount * sell_burnFee) / 10000;\r\n            }\r\n            if (burnAmount > 0) {\r\n                feeAmount += burnAmount;\r\n                _takeTransfer(sender, address(0xdead), burnAmount);\r\n            }\r\n        }\r\n\r\n        if (isTransfer && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 transferFeeAmount;\r\n            transferFeeAmount = (tAmount * transferFee) / 10000;\r\n\r\n            if (transferFeeAmount > 0) {\r\n                feeAmount += transferFeeAmount;\r\n                _takeTransfer(sender, address(this), transferFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isAdd && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            uint256 addLiquidityFeeAmount;\r\n            addLiquidityFeeAmount = (tAmount * addLiquidityFee) / 10000;\r\n\r\n            if (addLiquidityFeeAmount > 0) {\r\n                feeAmount += addLiquidityFeeAmount;\r\n                _takeTransfer(sender, address(this), addLiquidityFeeAmount);\r\n            }\r\n        }\r\n\r\n        if (isRemove && !_feeWhiteList[sender] && !_feeWhiteList[recipient]) {\r\n            if (_userInfo[recipient].preLP) {\r\n                require(\r\n                    startTradeTime + canRemoveTime < block.timestamp\r\n                , \" cant remove \");\r\n                uint256 removeLiquidityFeeAmount;\r\n                removeLiquidityFeeAmount = (tAmount * removeLiquidityFee) / 10000;\r\n\r\n                if (removeLiquidityFeeAmount > 0) {\r\n                    feeAmount += removeLiquidityFeeAmount;\r\n                    _takeTransfer(\r\n                        sender,\r\n                        address(0xdead),\r\n                        removeLiquidityFeeAmount\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (!isMaxEatExempt[recipient] && enableWalletLimit)\r\n            require(\r\n                (_balances[recipient] + tAmount - feeAmount) <= maxWalletAmount,\r\n                \"over max wallet limit\"\r\n            );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n    event Failed_swapExactTokensForETHSupportingFeeOnTransferTokens();\r\n    // event Failed_addLiquidityETH();\r\n    event Failed_AddLiquidity();\r\n\r\n    uint256 public totalFundAmountReceive;\r\n\r\n    address public generateLpReceiverAddr;\r\n    function setGenerateLpReceiverAddr(address newAddr) public onlyOwner{\r\n        generateLpReceiverAddr = newAddr;\r\n    }\r\n\r\n    event tokenAmountDistribution(\r\n        uint256 toGenerateLp,\r\n        uint256 toFund,\r\n        uint256 sum\r\n    );\r\n\r\n    function swapTokenForFund(\r\n        uint256 tokenAmount,\r\n        uint256 swapFee\r\n    ) private lockTheSwap {\r\n        if (swapFee == 0 || tokenAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 lpFee = _sellLPFee + _buyLPFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / 2 / swapFee;\r\n        uint256 totalShare = swapFee - lpFee / 2;\r\n\r\n        IERC20 _c = IERC20(currency);\r\n\r\n        address[] memory toCurrencyPath = new address[](2);\r\n        toCurrencyPath[0] = address(this);\r\n        toCurrencyPath[1] = currency;\r\n        try\r\n            _swapRouter\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    tokenAmount - lpAmount,\r\n                    0,\r\n                    toCurrencyPath,\r\n                    address(_tokenDistributor),\r\n                    block.timestamp\r\n                )\r\n        {} catch {\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(0);\r\n        }\r\n\r\n        uint256 newBal = _c.balanceOf(address(_tokenDistributor));\r\n        if (newBal != 0) {\r\n            _c.transferFrom(\r\n                address(_tokenDistributor),\r\n                address(this),\r\n                newBal\r\n            );\r\n        }\r\n\r\n        uint256 lpCurrency = newBal * lpFee / 2 / totalShare;\r\n        uint256 toFundAmt = newBal * (_buyFundFee + _sellFundFee) / totalShare;\r\n\r\n        // fund\r\n        if (toFundAmt > 0) {\r\n            if (currencyIsEth){\r\n                IWBNB(currency).withdraw(toFundAmt);\r\n                fundAddress.transfer(toFundAmt);\r\n            }else{\r\n                _c.transfer(\r\n                    fundAddress,\r\n                    toFundAmt\r\n                );\r\n            }\r\n            totalFundAmountReceive += toFundAmt;\r\n        }\r\n\r\n        // generate lp\r\n        if (lpAmount > 0 && lpCurrency > 0) {\r\n            try\r\n                _swapRouter.addLiquidity(\r\n                    address(this),\r\n                    address(currency),\r\n                    lpAmount,\r\n                    lpCurrency,\r\n                    0,\r\n                    0,\r\n                    generateLpReceiverAddr,\r\n                    block.timestamp\r\n                )\r\n            {} catch {\r\n                emit Failed_AddLiquidity();\r\n            }\r\n        }\r\n\r\n        emit tokenAmountDistribution(\r\n            lpCurrency,\r\n            toFundAmt,\r\n            newBal - lpCurrency - toFundAmt\r\n        );\r\n\r\n        // lpreward\r\n        if (_buyRewardFee + _sellRewardFee == 0){\r\n            return;\r\n        }\r\n        \r\n        if (ETH == currency){\r\n            return;\r\n        }\r\n\r\n        try\r\n            _swapRouter\r\n                .swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    _c.balanceOf(address(this)),\r\n                    0,\r\n                    rewardPath,\r\n                    address(this),\r\n                    block.timestamp\r\n                )\r\n        {} catch {\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(1);\r\n        }\r\n\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function setFundAddress(address payable addr) external onlyOwner {\r\n        require(!isContract(addr), \"fundaddress is a contract \");\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    uint256 public startLPBlock;\r\n\r\n    function startLP() external onlyOwner {\r\n        require(0 == startLPBlock, \"startedAddLP\");\r\n        startLPBlock = block.number;\r\n    }\r\n\r\n    function stopLP() external onlyOwner {\r\n        startLPBlock = 0;\r\n    }\r\n\r\n    uint256 public startTradeTime;\r\n    function launch() external onlyOwner {\r\n        require(0 == startTradeBlock, \"already open\");\r\n        startTradeBlock = block.number;\r\n        startTradeTime = block.timestamp;\r\n    }\r\n\r\n    function waitToLaunch() public onlyOwner{\r\n        startTradeBlock = 0;\r\n    }\r\n\r\n    function setFeeWhiteList(\r\n        address[] calldata addr,\r\n        bool enable\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function completeCustoms(uint256[] calldata customs) external onlyOwner {\r\n        require(enableChangeTax, \"tax change disabled\");\r\n        _buyFundFee = customs[0];\r\n        _buyLPFee = customs[1];\r\n        _buyRewardFee = customs[2];\r\n        buy_burnFee = customs[3];\r\n\r\n        _sellFundFee = customs[4];\r\n        _sellLPFee = customs[5];\r\n        _sellRewardFee = customs[6];\r\n        sell_burnFee = customs[7];\r\n\r\n        // require(\r\n        //     _buyRewardFee + _buyLPFee + _buyFundFee + buy_burnFee < 2500,\r\n        //     \"fee too high\"\r\n        // );\r\n        // require(\r\n        //     _sellRewardFee + _sellLPFee + _sellFundFee + sell_burnFee < 2500,\r\n        //     \"fee too high\"\r\n        // );\r\n    }\r\n\r\n    function multi_bclist(\r\n        address[] calldata addresses,\r\n        bool value\r\n    ) public onlyOwner {\r\n        require(enableRewardList, \"rewardList disabled\");\r\n        // require(addresses.length < 201);\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            _rewardList[addresses[i]] = value;\r\n        }\r\n    }\r\n\r\n    function disableKillBatchBot() public onlyOwner {\r\n        enableKillBatchBots = false;\r\n    }\r\n\r\n    function disableSwapLimit() public onlyOwner {\r\n        enableSwapLimit = false;\r\n    }\r\n\r\n    function disableWalletLimit() public onlyOwner {\r\n        enableWalletLimit = false;\r\n    }\r\n\r\n    function disableChangeTax() public onlyOwner {\r\n        enableChangeTax = false;\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function changeSwapLimit(\r\n        uint256 _maxBuyAmount,\r\n        uint256 _maxSellAmount\r\n    ) external onlyOwner {\r\n        maxBuyAmount = _maxBuyAmount;\r\n        maxSellAmount = _maxSellAmount;\r\n        require(\r\n            maxSellAmount >= maxBuyAmount,\r\n            \" maxSell should be > than maxBuy \"\r\n        );\r\n    }\r\n\r\n    function changeWalletLimit(uint256 _amount) external onlyOwner {\r\n        maxWalletAmount = _amount;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        fundAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(\r\n        address token,\r\n        uint256 amount,\r\n        address to\r\n    ) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    address[] private holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => bool) excludeHolder;\r\n\r\n    function multiAddHolder(address[] calldata accounts) public onlyOwner{\r\n        for (uint256 i; i<accounts.length; i++) \r\n        {\r\n            if (ISwapPair(_mainPair).balanceOf(accounts[i]) > 0){\r\n                addHolder(accounts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 private progressRewardBlock;\r\n    uint256 public processRewardWaitBlock = 1;\r\n\r\n    function setProcessRewardWaitBlock(uint256 newValue) public onlyOwner {\r\n        processRewardWaitBlock = newValue;\r\n    }\r\n\r\n    function processReward(uint256 gas) private {\r\n        if (progressRewardBlock + processRewardWaitBlock > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 FIST = IERC20(ETH);\r\n\r\n        uint256 balance = FIST.balanceOf(address(this));\r\n        if (balance < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        // FIST.transferFrom(\r\n        //     address(_rewardTokenDistributor),\r\n        //     address(this),\r\n        //     balance\r\n        // );\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint256 holdTokenTotal = holdToken.totalSupply();\r\n\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        balance = FIST.balanceOf(address(this));\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            tokenBalance = holdToken.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !excludeHolder[shareHolder]) {\r\n                amount = (balance * tokenBalance) / holdTokenTotal;\r\n                if (amount > 0 && FIST.balanceOf(address(this)) > amount) {\r\n                    FIST.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = block.number;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"stringParams\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"addressParams\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numberParams\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"boolParams\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Failed_swapExactTokensForETHSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toGenerateLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toFund\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"name\":\"tokenAmountDistribution\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardTokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airdropNumbs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiSYNC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchBots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canRemoveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"changeCheckRemoveMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSellAmount\",\"type\":\"uint256\"}],\"name\":\"changeSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRemoveMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"customs\",\"type\":\"uint256[]\"}],\"name\":\"completeCustoms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyIsEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChangeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableKillBatchBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableChangeTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableKillBatchBots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableKillBlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOffTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRewardList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateLpReceiverAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"excludeLP\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preLP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAddV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxEatExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRemoveV2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killBatchBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"matchInitLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"multiAddHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"multi_bclist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewardWaitBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAddLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAirDropEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setAirdropNumbs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setAntiSYNCEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setCanRemoveTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEnableTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"}],\"name\":\"setGenerateLpReceiverAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setLpRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setProcessRewardWaitBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRemoveLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrictCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setisMaxEatExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"setkb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundAmountReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitToLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArgumentse4200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442544e42000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000587b0a043425b44ba17b3780d94cdb43d21e8fd800000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000000809c289da65ab11b0e17017ea1a3f3a4e43f5c00000000000000000000000055d398326f99059ff775485246999027b319795500000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000081742843d570d00000000000000000000000000000000000000000000000000081742843d570d00000000000000000000000000000000000000000000000000081742843d570d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000fa00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af5af21c5ffecae9207aae56d7f36bfb3d3347468cb55198439fb5197efcaf10"}