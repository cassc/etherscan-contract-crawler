{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() private view {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() private view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ncontract ONE_Staking is Ownable, ReentrancyGuard {\r\n    struct PoolInfo {\r\n        uint256 lockupDuration;\r\n        uint256 returnPer;\r\n    }\r\n    struct OrderInfo {\r\n        address beneficiary;\r\n        uint256 amount;\r\n        uint256 lockupDuration;\r\n        uint256 returnPer;\r\n        uint256 starttime;\r\n        uint256 endtime;\r\n        uint256 claimedReward;\r\n        bool claimed;\r\n    }\r\n    uint256 private constant _1Mint = 1 minutes;\r\n    uint256 private constant _2Months = 60 days;\r\n    uint256 private constant _3Months = 90 days;\r\n    uint256 private constant _190Days = 190 days;\r\n    uint256 private constant _369Days = 369 days;\r\n    uint256 private constant _669Days = 669 days;\r\n    uint256 private constant _days365 = 365 days;\r\n    IERC20 public token = IERC20(0xA75fC235FB39E8b5862Af643B8F30fEAAA0557C8);\r\n    bool private started = true;\r\n    uint256 public emergencyWithdrawFees = 5; // 5%\r\n    uint256 private latestOrderId = 0;\r\n    uint256 public totalStakers; // use\r\n    uint256 public totalStaked; // use\r\n\r\n    mapping(uint256 => PoolInfo) public pooldata;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => uint256) public totalRewardEarn;\r\n    mapping(uint256 => OrderInfo) public orders;\r\n    mapping(address => uint256[]) private orderIds;\r\n    mapping(address => mapping(uint256 => bool)) public hasStaked;\r\n    mapping(uint256 => uint256) public stakeOnPool;\r\n    mapping(uint256 => uint256) public rewardOnPool;\r\n    mapping(uint256 => uint256) public stakersPlan;\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 indexed lockupDuration,\r\n        uint256 amount,\r\n        uint256 returnPer\r\n    );\r\n    event Withdraw(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 reward,\r\n        uint256 total\r\n    );\r\n    event WithdrawAll(address indexed user, uint256 amount);\r\n    event RewardClaimed(address indexed user, uint256 reward);\r\n\r\n    constructor() {\r\n        pooldata[1].lockupDuration = _1Mint;\r\n        pooldata[1].returnPer = 18; // 18%\r\n\r\n        pooldata[2].lockupDuration = _2Months;\r\n        pooldata[2].returnPer = 36; // 36%\r\n\r\n        pooldata[3].lockupDuration = _3Months;\r\n        pooldata[3].returnPer = 49; // 49%\r\n\r\n        pooldata[4].lockupDuration = _190Days;\r\n        pooldata[4].returnPer = 69; // 69%\r\n\r\n        pooldata[5].lockupDuration = _369Days;\r\n        pooldata[5].returnPer = 89; // 89%\r\n\r\n        pooldata[6].lockupDuration = _669Days;\r\n        pooldata[6].returnPer = 149; // 149%\r\n    }\r\n\r\n    function deposit(uint256 _amount, uint256 _lockupDuration) external {\r\n        PoolInfo storage pool = pooldata[_lockupDuration];\r\n        require(\r\n            pool.lockupDuration > 0,\r\n            \"TokenStaking: asked pool does not exist\"\r\n        );\r\n        require(started, \"TokenStaking: staking not yet started\");\r\n        require(_amount > 0, \"TokenStaking: stake amount must be non zero\");\r\n        require(\r\n            token.transferFrom(_msgSender(), address(this), _amount),\r\n            \"TokenStaking: token transferFrom via deposit not succeeded\"\r\n        );\r\n\r\n        orders[++latestOrderId] = OrderInfo(\r\n            _msgSender(),\r\n            _amount,\r\n            pool.lockupDuration,\r\n            pool.returnPer,\r\n            block.timestamp,\r\n            block.timestamp + pool.lockupDuration,\r\n            0,\r\n            false\r\n        );\r\n\r\n        if (!hasStaked[msg.sender][_lockupDuration]) {\r\n            stakersPlan[_lockupDuration] = stakersPlan[_lockupDuration] + 1;\r\n            totalStakers = totalStakers + 1;\r\n        }\r\n\r\n        //updating staking status\r\n\r\n        hasStaked[msg.sender][_lockupDuration] = true;\r\n        stakeOnPool[_lockupDuration] = stakeOnPool[_lockupDuration] + _amount;\r\n        totalStaked = totalStaked + _amount;\r\n        balanceOf[_msgSender()] += _amount;\r\n        orderIds[_msgSender()].push(latestOrderId);\r\n        emit Deposit(\r\n            _msgSender(),\r\n            pool.lockupDuration,\r\n            _amount,\r\n            pool.returnPer\r\n        );\r\n    }\r\n\r\n    function withdraw(uint256 orderId) external nonReentrant {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStaking: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        require(\r\n            _msgSender() == orderInfo.beneficiary,\r\n            \"TokenStaking: caller is not the beneficiary\"\r\n        );\r\n        require(!orderInfo.claimed, \"TokenStaking: order already unstaked\");\r\n        require(\r\n            block.timestamp >= orderInfo.endtime,\r\n            \"TokenStaking: stake locked until lock duration completion\"\r\n        );\r\n\r\n        uint256 claimAvailable = pendingRewards(orderId);\r\n        uint256 total = orderInfo.amount + claimAvailable;\r\n\r\n        totalRewardEarn[_msgSender()] += claimAvailable;\r\n\r\n        orderInfo.claimedReward += claimAvailable;\r\n        balanceOf[_msgSender()] -= orderInfo.amount;\r\n        orderInfo.claimed = true;\r\n\r\n        require(\r\n            token.transfer(address(_msgSender()), total),\r\n            \"TokenStaking: token transfer via withdraw not succeeded\"\r\n        );\r\n        rewardOnPool[orderInfo.lockupDuration] =\r\n            rewardOnPool[orderInfo.lockupDuration] +\r\n            claimAvailable;\r\n        emit Withdraw(_msgSender(), orderInfo.amount, claimAvailable, total);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 orderId) external nonReentrant {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStaking: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        require(\r\n            _msgSender() == orderInfo.beneficiary,\r\n            \"TokenStaking: caller is not the beneficiary\"\r\n        );\r\n        require(!orderInfo.claimed, \"TokenStaking: order already unstaked\");\r\n\r\n        uint256 claimAvailable = pendingRewards(orderId);\r\n        uint256 fees = (orderInfo.amount * emergencyWithdrawFees) / 100;\r\n        orderInfo.amount -= fees;\r\n        uint256 total = orderInfo.amount + claimAvailable;\r\n\r\n        totalRewardEarn[_msgSender()] += claimAvailable;\r\n\r\n        orderInfo.claimedReward += claimAvailable;\r\n\r\n        balanceOf[_msgSender()] -= (orderInfo.amount + fees);\r\n\r\n        orderInfo.claimed = true;\r\n\r\n        require(\r\n            token.transfer(address(_msgSender()), total),\r\n            \"TokenStaking: token transfer via emergency withdraw not succeeded\"\r\n        );\r\n        rewardOnPool[orderInfo.lockupDuration] =\r\n            rewardOnPool[orderInfo.lockupDuration] +\r\n            claimAvailable;\r\n        emit WithdrawAll(_msgSender(), total);\r\n    }\r\n\r\n    function claimRewards(uint256 orderId) external nonReentrant {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStaking: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        require(\r\n            _msgSender() == orderInfo.beneficiary,\r\n            \"TokenStaking: caller is not the beneficiary\"\r\n        );\r\n        require(!orderInfo.claimed, \"TokenStaking: order already unstaked\");\r\n\r\n        uint256 claimAvailable = pendingRewards(orderId);\r\n        totalRewardEarn[_msgSender()] += claimAvailable;\r\n\r\n        orderInfo.claimedReward += claimAvailable;\r\n\r\n        require(\r\n            token.transfer(address(_msgSender()), claimAvailable),\r\n            \"TokenStaking: token transfer via claim rewards not succeeded\"\r\n        );\r\n        rewardOnPool[orderInfo.lockupDuration] =\r\n            rewardOnPool[orderInfo.lockupDuration] +\r\n            claimAvailable;\r\n        emit RewardClaimed(address(_msgSender()), claimAvailable);\r\n    }\r\n\r\n    function pendingRewards(uint256 orderId) public view returns (uint256) {\r\n        require(\r\n            orderId <= latestOrderId,\r\n            \"TokenStaking: INVALID orderId, orderId greater than latestOrderId\"\r\n        );\r\n\r\n        OrderInfo storage orderInfo = orders[orderId];\r\n        if (!orderInfo.claimed) {\r\n            if (block.timestamp >= orderInfo.endtime) {\r\n                uint256 APY = (orderInfo.amount * orderInfo.returnPer) / 100;\r\n                uint256 reward = (APY * orderInfo.lockupDuration) / _days365;\r\n                uint256 claimAvailable = reward - orderInfo.claimedReward;\r\n                return claimAvailable;\r\n            } else {\r\n                uint256 stakeTime = block.timestamp - orderInfo.starttime;\r\n                uint256 APY = (orderInfo.amount * orderInfo.returnPer) / 100;\r\n                uint256 reward = (APY * stakeTime) / _days365;\r\n                uint256 claimAvailableNow = reward - orderInfo.claimedReward;\r\n                return claimAvailableNow;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setPlansApy(\r\n        uint256 plan1Apy,\r\n        uint256 plan2Apy,\r\n        uint256 plan3Apy,\r\n        uint256 plan4Apy,\r\n        uint256 plan5Apy,\r\n        uint256 plan6Apy\r\n    ) external onlyOwner {\r\n        pooldata[1].returnPer = plan1Apy;\r\n        pooldata[2].returnPer = plan2Apy;\r\n        pooldata[3].returnPer = plan3Apy;\r\n        pooldata[4].returnPer = plan4Apy;\r\n        pooldata[5].returnPer = plan5Apy;\r\n        pooldata[6].returnPer = plan6Apy;\r\n    }\r\n\r\n    function toggleStaking(bool _start) external onlyOwner returns (bool) {\r\n        started = _start;\r\n        return true;\r\n    }\r\n\r\n    function investorOrderIds(address investor)\r\n        external\r\n        view\r\n        returns (uint256[] memory ids)\r\n    {\r\n        uint256[] memory arr = orderIds[investor];\r\n        return arr;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnPer\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupDuration\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"investorOrderIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnPer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"starttime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pooldata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnPer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardOnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plan1Apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan2Apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan3Apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan4Apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan5Apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plan6Apy\",\"type\":\"uint256\"}],\"name\":\"setPlansApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeOnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakersPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_start\",\"type\":\"bool\"}],\"name\":\"toggleStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ONE_Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1443dae57175fec9fd48ca01261ca61c1403b8bafd7ba96436d7086bf3a8bed8"}