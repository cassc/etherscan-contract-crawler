{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface INFT {\r\n    function ownerOf(uint256 tokenid) external view returns (address);\r\n    function getNftData(uint256 tokenid) external view returns (uint256,uint256);\r\n    function updateActionBlock(uint256 tokenid,uint256 amount) external returns (bool);\r\n    function processTokenRequest(address account,uint256 actionBlock) external returns (uint256);\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IUser {\r\n    function getUserData(address account) external view returns (address,uint256,bool);\r\n    function getUserReferrals(address account,uint256 level) external view returns (address[] memory);\r\n    function registerExt(address account,address referral,uint256 unilevel) external returns (bool);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Role is Ownable {\r\n    mapping(address => mapping(string => bool)) _isRole;\r\n\r\n    event updateAccountRole(address indexed account, string indexed role, bool flag);\r\n\r\n    constructor() {}\r\n\r\n    function checkRole(address account,string memory role) public view virtual returns (bool) {\r\n        return _isRole[account][role];\r\n    }\r\n\r\n    modifier onlyRole(string memory role) {\r\n        require(_isRole[_msgSender()][role], \"Ownable: caller have no role permission\");\r\n        _;\r\n    }\r\n\r\n    function updateRole(address account,string memory role,bool flag) public virtual onlyOwner {\r\n       _flagRole(account,role,flag);\r\n    }\r\n\r\n    function _flagRole(address account,string memory role,bool flag) internal virtual {\r\n        _isRole[account][role] = flag;\r\n        emit updateAccountRole(account, role, flag);\r\n    }\r\n}\r\n\r\ncontract TwinSmartDAPP is Ownable,Role {\r\n\r\n    event newNftMinted(address indexed account,uint256 typeNft,uint256 tokenid);\r\n    event claim(address indexed account,uint256 typeNft,uint256 tokenid,uint256 amount);\r\n\r\n    address userAddress = 0x78fd91f7D11E9a017F0830480DC44Ca38CA1f075;\r\n    address tokenAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n    \r\n    address root = 0x198ba893D19a605885f15386Cb3E9E23d2D07913;\r\n    address treasuryWallet = 0x89a0D696B3bD4b58C024f44005c19f6f3E508194;\r\n    address rewardWallet = 0x088EC15fE53970a02E90A05Ebb11346a6063Eaca;\r\n\r\n    uint256 public listingFee = 50;\r\n    uint256 public toTreasury = 850;\r\n    uint256 public toReward = 100;\r\n    uint256 public toReferral = 50;\r\n    uint256 public denominator = 1000;\r\n\r\n    uint256[] NftROI = [ 100, 125, 150 ];\r\n    uint256[] NftMatching = [ 100, 50 ];\r\n    uint256[] NftPrice = [ 100 * 1e18, 300 * 1e18, 300 * 1e18 ];\r\n    address[] NftAddress = [\r\n        0x1b08b47a4DcBB742cb678547bD218773Ae8565AD,\r\n        0x0EC157C0E38642c590834a12b7Dd9c02d3532e58,\r\n        0xbBd86D48F68A39740165E1C9119B2D70A702BF1F\r\n    ];\r\n\r\n    mapping(address => uint256) public claimed;\r\n    mapping(uint256 => mapping(address => uint256)) public listingPrice;\r\n    mapping(address => mapping(uint256 => uint256)) public earned;\r\n\r\n    bool locked;\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function getNftData() public view returns (uint256[] memory,uint256[] memory,uint256[] memory,address[] memory) {\r\n        return (NftROI,NftMatching,NftPrice,NftAddress);\r\n    }\r\n\r\n    function getUnclaimAmount(uint256 tokenid,uint256 typeNft) public view returns (uint256) {\r\n        uint256 month = 2592000;\r\n        INFT nft = INFT(NftAddress[typeNft]);\r\n        (,uint256 actionBlock) = nft.getNftData(tokenid);\r\n        uint256 tick = block.timestamp - actionBlock;\r\n        uint256 rewardPerMonth = NftPrice[typeNft] * NftROI[typeNft] / denominator;\r\n        return rewardPerMonth * tick / month;\r\n    }\r\n\r\n    function isListing(uint256 tokenid,address contractAddress) public view returns (uint256) {\r\n        INFT nft = INFT(contractAddress);\r\n        bool isApproved = nft.isApprovedForAll(nft.ownerOf(tokenid),address(this));\r\n        if(isApproved && listingPrice[tokenid][contractAddress]>0){\r\n            return listingPrice[tokenid][contractAddress];\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function register(address account,address referral) public payable returns (bool) {\r\n        IUser user = IUser(userAddress);\r\n        (,,bool registered) = user.getUserData(account);\r\n        (,,bool checkRef) = user.getUserData(referral);\r\n        require(!registered,\"Minter: this account was registered\");\r\n        require(checkRef,\"Minter: referral was not registered\");\r\n        user.registerExt(account,referral,NftMatching.length);\r\n        sendValue();\r\n        return true;\r\n    }\r\n\r\n    function claimReward(uint256 tokenid,uint256 typeNft) public payable returns (bool) {\r\n        uint256 reward = getUnclaimAmount(tokenid,typeNft);\r\n        INFT nft = INFT(NftAddress[typeNft]);\r\n        IERC20 token = IERC20(tokenAddress);\r\n        IUser user = IUser(userAddress);\r\n        address[] memory upline = new address[](NftMatching.length);\r\n        upline = user.getUserReferrals(nft.ownerOf(tokenid),NftMatching.length);\r\n        token.transferFrom(rewardWallet,nft.ownerOf(tokenid),reward);\r\n        claimed[nft.ownerOf(tokenid)] += reward;\r\n        for(uint256 i = 0; i < NftMatching.length; i++){\r\n            uint256 amountToMatching = reward * NftMatching[i] / denominator;\r\n            token.transferFrom(rewardWallet,upline[i],amountToMatching);\r\n            earned[upline[i]][i] += amountToMatching;\r\n        }\r\n        nft.updateActionBlock(tokenid,block.timestamp);\r\n        sendValue();\r\n        emit claim(nft.ownerOf(tokenid),typeNft,tokenid,reward);\r\n        return true;\r\n    }\r\n\r\n    function mintNft(address account,uint256 typeNft) public payable noReentrant returns (bool) {\r\n        require(NftPrice[typeNft]>0,\"Minter: this NFT type was not active\");\r\n        IUser user = IUser(userAddress);\r\n        (address referral,,bool registered) = user.getUserData(account);\r\n        require(registered,\"Minter: account was not registered\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 amountToTreasury = NftPrice[typeNft] * toTreasury / denominator;\r\n        uint256 amountToReward = NftPrice[typeNft] * toReward / denominator;\r\n        uint256 amountToReferral = NftPrice[typeNft] * toReferral / denominator;\r\n        token.transferFrom(_msgSender(),treasuryWallet,amountToTreasury);\r\n        token.transferFrom(_msgSender(),rewardWallet,amountToReward);\r\n        token.transferFrom(_msgSender(),referral,amountToReferral);\r\n        earned[referral][0] += amountToReferral;\r\n        INFT nft = INFT(NftAddress[typeNft]);\r\n        uint256 newTokenid = nft.processTokenRequest(account,block.timestamp);\r\n        sendValue();\r\n        emit newNftMinted(account,typeNft,newTokenid);\r\n        return true;\r\n    }\r\n\r\n    function buyNftFromMarket(uint256 tokenid,address contractAddress) public payable noReentrant returns (bool) {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        INFT nft = INFT(contractAddress);\r\n        uint256 price = isListing(tokenid,contractAddress);\r\n        require(price>0,\"Minter: this nft not for sale\");\r\n        uint256 amountToFee = price * listingFee / denominator;\r\n        token.transferFrom(_msgSender(),treasuryWallet,amountToFee);\r\n        token.transferFrom(_msgSender(),nft.ownerOf(tokenid),price - amountToFee);\r\n        nft.safeTransferFrom(nft.ownerOf(tokenid),_msgSender(),tokenid);\r\n        listingPrice[tokenid][contractAddress] = 0;\r\n        return true;\r\n    }\r\n\r\n    function listing(uint256 tokenid,address contractAddress,uint256 amount) public returns (bool) {\r\n        INFT nft = INFT(contractAddress);\r\n        require(nft.ownerOf(tokenid)==msg.sender,\"Minter: account not owned nft\");\r\n        listingPrice[tokenid][contractAddress] = amount;\r\n        return true;\r\n    }\r\n\r\n    function updateListingFee(uint256 amount) public onlyOwner returns (bool) {\r\n        listingFee = amount;\r\n        return true;\r\n    }\r\n\r\n    function updateClaimed(address account,uint256 amount) public onlyRole(\"PERMIT\") returns (bool) {\r\n        claimed[account] = amount;\r\n        return true;\r\n    }\r\n\r\n    function updateEarned(address account,uint256 slot,uint256 amount) public onlyRole(\"PERMIT\") returns (bool) {\r\n        earned[account][slot] = amount;\r\n        return true;\r\n    }\r\n\r\n    function updateTokenAddress(address contractAddress) public onlyOwner returns (bool) {\r\n        tokenAddress = contractAddress;\r\n        return true;\r\n    }\r\n\r\n    function updateDepositAmount(uint256 treasury,uint256 reward,uint256 referral,uint256 deno) public onlyOwner returns (bool) {\r\n        toTreasury = treasury;\r\n        toReward = reward;\r\n        toReferral = referral;\r\n        denominator = deno;\r\n        return true;\r\n    }\r\n\r\n    function updateWallet(address treasury,address reward) public onlyOwner returns (bool) {\r\n        treasuryWallet = treasury;\r\n        rewardWallet = reward;\r\n        return true;\r\n    }\r\n\r\n    function updateNft(uint256[] memory roi,uint256[] memory matching,uint256[] memory price,address[] memory contractAddress) public onlyOwner returns (bool) {\r\n        NftROI = roi;\r\n        NftMatching = matching;\r\n        NftPrice = price;\r\n        NftAddress = contractAddress;\r\n        return true;\r\n    }\r\n\r\n    function sendValue() internal {\r\n        if(address(this).balance>0){\r\n            (bool success,) = root.call{ value: address(this).balance }(\"\");\r\n            require(success);\r\n        }\r\n    }\r\n\r\n    function callFunction(address to,bytes memory data,uint256 value) public onlyOwner returns (bytes memory) {\r\n        if(value>0){\r\n            (bool success,bytes memory result) = to.call{ value: value }(data);\r\n            require(success);\r\n            return result;\r\n        }else{\r\n            (bool success,bytes memory result) = to.call(data);\r\n            require(success);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeNft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeNft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"newNftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateAccountRole\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"buyNftFromMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"callFunction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"checkRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeNft\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNftData\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"typeNft\",\"type\":\"uint256\"}],\"name\":\"getUnclaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"listing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typeNft\",\"type\":\"uint256\"}],\"name\":\"mintNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deno\",\"type\":\"uint256\"}],\"name\":\"updateDepositAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateEarned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateListingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"roi\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"matching\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"price\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"contractAddress\",\"type\":\"address[]\"}],\"name\":\"updateNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TwinSmartDAPP", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://507b45632b81ac3cff2b45b58fe22ee1e6f2125c1506204c88985323788c902a"}