{"SourceCode": "pragma solidity ^0.8.15;\r\npragma experimental ABIEncoderV2;\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex;\r\n                // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, \"e0\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"e1\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// abstract contract ReentrancyGuard {\r\n//     uint256 private constant _NOT_ENTERED = 1;\r\n//     uint256 private constant _ENTERED = 2;\r\n//     uint256 private _status;\r\n\r\n//     constructor() internal {\r\n//         _status = _NOT_ENTERED;\r\n//     }\r\n\r\n//     modifier nonReentrant() {\r\n//         require(_status != _ENTERED, \"e0\");\r\n//         _status = _ENTERED;\r\n//         _;\r\n//         _status = _NOT_ENTERED;\r\n//     }\r\n// }\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value : value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC721Enumerable {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\ninterface swapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n}\r\n\r\ninterface rewardOsPlus {\r\n    function refererAddressList(address _user) external view returns (address);\r\n\r\n    function addRewardList(address _user, uint256 _rewardAmount, uint256 _type) external;\r\n\r\n    function refererRate() external view returns (uint256);\r\n\r\n    function userRate() external view returns (uint256);\r\n}\r\n\r\n\r\ncontract nftOrderPool is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    address payable public devAddress;\r\n    IERC20 public ETH;\r\n    uint256 public orderNum = 0;\r\n    uint256 public swapFee = 5;\r\n    mapping(address => bool) public erc20tokenWhiteList;\r\n    mapping(IERC721Enumerable => bool) public erc721tokenWhiteList;\r\n\r\n    EnumerableSet.UintSet private okOrderList;\r\n    mapping(IERC721Enumerable => EnumerableSet.UintSet) private nftOkOrderList;\r\n    mapping(address => EnumerableSet.UintSet) private userOkOrderList;\r\n\r\n    bool public useRewardOsPlus = false;\r\n    rewardOsPlus public rewardOsPlusAddress;\r\n    swapItem public swapConfig;\r\n\r\n    struct swapItem {\r\n        swapRouter routerAddress;\r\n        swapRouter routerAddress2;\r\n        IERC20 rewardToken;\r\n        address[] swapErc20Path;\r\n        address[] swapEthPath;\r\n    }\r\n\r\n\r\n    struct orderItem {\r\n        uint256 orderId;\r\n        address payable owner;\r\n        IERC721Enumerable nftToken;\r\n        uint256 tokenId;\r\n        address erc20Token;\r\n        uint256 price;\r\n        bool orderStatus;\r\n        string orderMd5;\r\n        uint256 time;\r\n        uint256 blocokNum;\r\n        string name;\r\n        string symbol;\r\n        string tokenURI;\r\n    }\r\n\r\n    struct massInfoItem {\r\n        orderItem orderItem2;\r\n        string name2;\r\n        string symbol2;\r\n        uint256 decimals2;\r\n        uint256 price2;\r\n        string tokenURI2;\r\n    }\r\n\r\n    mapping(uint256 => orderItem) public orderItemInfo;\r\n    mapping(IERC721Enumerable => uint256[]) public nftAddressOrderList;\r\n    mapping(uint256 => bool) public orderStatusList;\r\n    mapping(address => uint256[]) public userOrderList;\r\n    mapping(string => bool) public orderMd5StatusList;\r\n    mapping(string => uint256) public orderMd5List;\r\n    mapping(IERC721Enumerable => mapping(uint256 => uint256)) public nftTokenLastOrderIdList;\r\n\r\n    event createNftOrderEvent(uint256 orderId, address owner, IERC721Enumerable nftToken, uint256 tokenId, address erc20Token, uint256 price, bool orderStatus, string orderMd5, uint256 time, uint256 blocokNum);\r\n    event widthDrawEvent(uint256 _orderId, address owner, IERC721Enumerable nftToken, uint256 tokenId);\r\n    event swapEvent(uint256 _orderId, IERC721Enumerable nftToken, uint256 tokenId, address erc20Token, address owner, address buyer, uint256 price, uint256 fee, uint256 toUser);\r\n\r\n    constructor()  {\r\n        devAddress = payable(msg.sender);\r\n    }\r\n\r\n    function setSwapConfig(swapRouter _routerAddress, swapRouter _routerAddress2, IERC20 _rewardToken, address[]  memory _swapErc20Path, address[]  memory _swapEthPath) external onlyOwner {\r\n        swapConfig = swapItem(_routerAddress, _routerAddress2, _rewardToken, _swapErc20Path, _swapEthPath);\r\n    }\r\n\r\n    function setEth(IERC20 _ETH) external onlyOwner {\r\n        ETH = _ETH;\r\n    }\r\n\r\n    function setRewardOsPlus(bool _useRewardOsPlus, rewardOsPlus _rewardOsPlusAddress) external onlyOwner {\r\n        useRewardOsPlus = _useRewardOsPlus;\r\n        rewardOsPlusAddress = _rewardOsPlusAddress;\r\n    }\r\n\r\n    function setDevAddress(address payable _devAddress) external onlyOwner {\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function setSwapFee(uint256 _fee) public onlyOwner {\r\n        swapFee = _fee;\r\n    }\r\n\r\n    function setErc20WhiteList(address[] memory _addressList, bool _status) external onlyOwner {\r\n        for (uint256 i = 0; i < _addressList.length; i++) {\r\n            erc20tokenWhiteList[_addressList[i]] = _status;\r\n        }\r\n    }\r\n\r\n    function setErc721WhiteList(IERC721Enumerable[] memory _addressList, bool _status) external onlyOwner {\r\n        for (uint256 i = 0; i < _addressList.length; i++) {\r\n            erc721tokenWhiteList[_addressList[i]] = _status;\r\n        }\r\n    }\r\n\r\n    function getTokenIdSaleStatus(IERC721Enumerable _nftToken, uint256 _tokenId) public view returns (bool, uint256, massInfoItem memory) {\r\n        if (nftTokenLastOrderIdList[_nftToken][_tokenId] > 0) {\r\n            (orderItem memory orderItem2, string memory name2, string memory symbol2, uint256 decimals2, uint256 price2,string memory tokenURI2) = getTokenInfoByIndex(nftTokenLastOrderIdList[_nftToken][_tokenId]);\r\n            return (orderItemInfo[nftTokenLastOrderIdList[_nftToken][_tokenId]].orderStatus, nftTokenLastOrderIdList[_nftToken][_tokenId], massInfoItem(orderItem2, name2, symbol2, decimals2, price2, tokenURI2));\r\n        } else {\r\n            (orderItem memory orderItem2, string memory name2, string memory symbol2, uint256 decimals2, uint256 price2,string memory tokenURI2) = getTokenInfoByIndex(0);\r\n            if (orderItemInfo[nftTokenLastOrderIdList[_nftToken][_tokenId]].nftToken == _nftToken && orderItemInfo[nftTokenLastOrderIdList[_nftToken][_tokenId]].tokenId == _tokenId) {\r\n                return (orderItemInfo[nftTokenLastOrderIdList[_nftToken][_tokenId]].orderStatus, nftTokenLastOrderIdList[_nftToken][_tokenId], massInfoItem(orderItem2, name2, symbol2, decimals2, price2, tokenURI2));\r\n            } else {\r\n                return (false, 0, massInfoItem(orderItem2, name2, symbol2, decimals2, price2, tokenURI2));\r\n            }\r\n        }\r\n    }\r\n\r\n    function createNftOrder(IERC721Enumerable _nftToken, uint256 _tokenId, address _erc20Token, uint256 _price, string memory _orderMd5, uint256 _time) public nonReentrant {\r\n        require(erc20tokenWhiteList[_erc20Token], \"e001\");\r\n        require(orderMd5StatusList[_orderMd5] == false, \"e002\");\r\n        require(erc721tokenWhiteList[_nftToken], \"e003\");\r\n        _nftToken.transferFrom(msg.sender, address(this), _tokenId);\r\n        orderItemInfo[orderNum] = orderItem(orderNum, payable(msg.sender), _nftToken, _tokenId, _erc20Token, _price, true, _orderMd5, _time, block.number, _nftToken.name(), _nftToken.symbol(), _nftToken.tokenURI(_tokenId));\r\n        emit createNftOrderEvent(orderNum, msg.sender, _nftToken, _tokenId, _erc20Token, _price, true, _orderMd5, _time, block.number);\r\n        nftAddressOrderList[_nftToken].push(orderNum);\r\n        orderStatusList[orderNum] = true;\r\n        orderMd5List[_orderMd5] = orderNum;\r\n        userOrderList[msg.sender].push(orderNum);\r\n        nftTokenLastOrderIdList[_nftToken][_tokenId] = orderNum;\r\n\r\n        okOrderList.add(orderNum);\r\n        nftOkOrderList[_nftToken].add(orderNum);\r\n        userOkOrderList[msg.sender].add(orderNum);\r\n\r\n        orderNum = orderNum.add(1);\r\n        orderMd5StatusList[_orderMd5] = true;\r\n    }\r\n\r\n    function createNftOrderWithEth(IERC721Enumerable _nftToken, uint256 _tokenId, uint256 _price, string memory _orderMd5, uint256 _time) public nonReentrant {\r\n        require(orderMd5StatusList[_orderMd5] == false, \"e001\");\r\n        require(erc721tokenWhiteList[_nftToken], \"e002\");\r\n        _nftToken.transferFrom(msg.sender, address(this), _tokenId);\r\n        orderItemInfo[orderNum] = orderItem(orderNum, payable(msg.sender), _nftToken, _tokenId, address(0), _price, true, _orderMd5, _time, block.number, _nftToken.name(), _nftToken.symbol(), _nftToken.tokenURI(_tokenId));\r\n        emit createNftOrderEvent(orderNum, msg.sender, _nftToken, _tokenId, address(0), _price, true, _orderMd5, _time, block.number);\r\n        nftAddressOrderList[_nftToken].push(orderNum);\r\n        orderStatusList[orderNum] = true;\r\n        orderMd5List[_orderMd5] = orderNum;\r\n        userOrderList[msg.sender].push(orderNum);\r\n        nftTokenLastOrderIdList[_nftToken][_tokenId] = orderNum;\r\n\r\n        okOrderList.add(orderNum);\r\n        nftOkOrderList[_nftToken].add(orderNum);\r\n        userOkOrderList[msg.sender].add(orderNum);\r\n\r\n        orderNum = orderNum.add(1);\r\n        orderMd5StatusList[_orderMd5] = true;\r\n    }\r\n\r\n    function widthDraw(uint256 _orderId) public nonReentrant {\r\n        require(orderStatusList[_orderId] == true, \"e001\");\r\n        require(orderItemInfo[_orderId].owner == msg.sender, \"e002\");\r\n        orderItemInfo[_orderId].nftToken.transferFrom(address(this), msg.sender, orderItemInfo[_orderId].tokenId);\r\n        orderItemInfo[_orderId].orderStatus = false;\r\n        orderStatusList[_orderId] = false;\r\n\r\n        okOrderList.remove(_orderId);\r\n        nftOkOrderList[orderItemInfo[_orderId].nftToken].remove(_orderId);\r\n        userOkOrderList[msg.sender].remove(_orderId);\r\n\r\n        emit widthDrawEvent(_orderId, msg.sender, orderItemInfo[_orderId].nftToken, orderItemInfo[_orderId].tokenId);\r\n    }\r\n    \r\n    function setApprovedForSwapAndFarm(uint256 _amount) external onlyOwner {\r\n        require(address(swapConfig.routerAddress2) != address(0));\r\n        IERC20(swapConfig.swapErc20Path[0]).approve(address(swapConfig.routerAddress2), _amount);\r\n    }\r\n\r\n    function swap(uint256 _orderId) public nonReentrant {\r\n        require(orderStatusList[_orderId] == true, \"e001\");\r\n        //orderItem memory _orderItem = orderItemInfo[_orderId];\r\n        require(IERC20(orderItemInfo[_orderId].erc20Token).balanceOf(msg.sender) >= orderItemInfo[_orderId].price, \"e002\");\r\n        uint256 fee = orderItemInfo[_orderId].price.mul(swapFee).div(100);\r\n        uint256 toUser = orderItemInfo[_orderId].price.sub(fee);\r\n        IERC20(orderItemInfo[_orderId].erc20Token).safeTransferFrom(msg.sender, orderItemInfo[_orderId].owner, toUser);\r\n\r\n\r\n        if (useRewardOsPlus) {\r\n            uint256 devFee = fee.mul(50).div(100);\r\n            uint256 rewardAmount = fee.sub(devFee);\r\n            IERC20(orderItemInfo[_orderId].erc20Token).safeTransferFrom(msg.sender, devAddress, devFee);\r\n            IERC20(orderItemInfo[_orderId].erc20Token).safeTransferFrom(msg.sender, address(this), rewardAmount);\r\n            IERC20(orderItemInfo[_orderId].erc20Token).approve(address(swapConfig.routerAddress), rewardAmount);\r\n             (uint256[] memory amounts2) = swapConfig.routerAddress2.swapExactTokensForTokens(\r\n                rewardAmount,\r\n                0,\r\n                swapConfig.swapErc20Path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            rewardAmount = amounts2[1];\r\n            {\r\n                address referer = rewardOsPlusAddress.refererAddressList(msg.sender);\r\n                if (referer == address(0)) {\r\n                    swapConfig.rewardToken.safeTransfer(address(1), rewardAmount);\r\n                } else {\r\n                    uint256 rewardAmountForUser = rewardAmount.mul(rewardOsPlusAddress.userRate()).div(100);\r\n                    uint256 rewardAmountForReferer = rewardAmount.sub(rewardAmountForUser);\r\n                    swapConfig.rewardToken.safeTransfer(msg.sender, rewardAmountForUser);\r\n                    swapConfig.rewardToken.safeTransfer(referer, rewardAmountForReferer);\r\n                }\r\n                rewardOsPlusAddress.addRewardList(msg.sender, rewardAmount, 5);\r\n            }\r\n\r\n        } else {\r\n            IERC20(orderItemInfo[_orderId].erc20Token).safeTransferFrom(msg.sender, devAddress, fee);\r\n        }\r\n\r\n\r\n        orderItemInfo[_orderId].nftToken.transferFrom(address(this), msg.sender, orderItemInfo[_orderId].tokenId);\r\n        orderStatusList[_orderId] = false;\r\n        orderItemInfo[_orderId].orderStatus = false;\r\n\r\n        okOrderList.remove(_orderId);\r\n        nftOkOrderList[orderItemInfo[_orderId].nftToken].remove(_orderId);\r\n        userOkOrderList[orderItemInfo[_orderId].owner].remove(_orderId);\r\n\r\n        emit swapEvent(_orderId, orderItemInfo[_orderId].nftToken, orderItemInfo[_orderId].tokenId, orderItemInfo[_orderId].erc20Token, orderItemInfo[_orderId].owner, msg.sender, orderItemInfo[_orderId].price, fee, toUser);\r\n    }\r\n\r\n    function swapWithEth(uint256 _orderId) public payable nonReentrant {\r\n        require(orderStatusList[_orderId] == true, \"e001\");\r\n        require(msg.value == orderItemInfo[_orderId].price, \"e002\");\r\n        uint256 fee = orderItemInfo[_orderId].price.mul(swapFee).div(100);\r\n        uint256 toUser = orderItemInfo[_orderId].price.sub(fee);\r\n        orderItemInfo[_orderId].owner.transfer(toUser);\r\n\r\n        if (useRewardOsPlus) {\r\n            uint256 devFee = fee.mul(50).div(100);\r\n            uint256 rewardAmount = fee.sub(devFee);\r\n            devAddress.transfer(devFee);\r\n            (uint256[] memory amounts) = swapConfig.routerAddress.swapExactETHForTokens{value : rewardAmount}(\r\n                0,\r\n                swapConfig.swapEthPath,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            (uint256[] memory amounts2) = swapConfig.routerAddress2.swapExactTokensForTokens(amounts[1], 0, swapConfig.swapErc20Path, address(this), block.timestamp);\r\n            rewardAmount = amounts2[1];\r\n            {\r\n                address referer = rewardOsPlusAddress.refererAddressList(msg.sender);\r\n                if (referer == address(0)) {\r\n                    swapConfig.rewardToken.safeTransfer(address(1), rewardAmount);\r\n                } else {\r\n                    uint256 rewardAmountForUser = rewardAmount.mul(rewardOsPlusAddress.userRate()).div(100);\r\n                    uint256 rewardAmountForReferer = rewardAmount.sub(rewardAmountForUser);\r\n                    swapConfig.rewardToken.safeTransfer(msg.sender, rewardAmountForUser);\r\n                    swapConfig.rewardToken.safeTransfer(referer, rewardAmountForReferer);\r\n                }\r\n                rewardOsPlusAddress.addRewardList(msg.sender, rewardAmount, 5);\r\n            }\r\n        } else {\r\n            devAddress.transfer(fee);\r\n        }\r\n\r\n        orderItemInfo[_orderId].nftToken.transferFrom(address(this), msg.sender, orderItemInfo[_orderId].tokenId);\r\n        orderStatusList[_orderId] = false;\r\n        orderItemInfo[_orderId].orderStatus = false;\r\n\r\n        okOrderList.remove(_orderId);\r\n        nftOkOrderList[orderItemInfo[_orderId].nftToken].remove(_orderId);\r\n        userOkOrderList[orderItemInfo[_orderId].owner].remove(_orderId);\r\n\r\n        emit swapEvent(_orderId, orderItemInfo[_orderId].nftToken, orderItemInfo[_orderId].tokenId, orderItemInfo[_orderId].erc20Token, orderItemInfo[_orderId].owner, msg.sender, orderItemInfo[_orderId].price, fee, toUser);\r\n    }\r\n\r\n    function getWrongTokens(IERC20 _token) public onlyOwner {\r\n        uint256 amount = _token.balanceOf(address(this));\r\n        require(amount > 0, \"e001\");\r\n        _token.safeTransfer(msg.sender, amount);\r\n    }\r\n\r\n    function getStatusOkInfoList(uint256[] memory _orderIdList) public view returns (massInfoItem[] memory) {\r\n        uint256 okNum = 0;\r\n        for (uint256 i = 0; i < _orderIdList.length; i++) {\r\n            if (orderItemInfo[_orderIdList[i]].orderStatus == true) {\r\n                okNum = okNum.add(1);\r\n            }\r\n        }\r\n        uint256 k = 0;\r\n        massInfoItem[] memory x = new massInfoItem[](okNum);\r\n        for (uint256 i = 0; i < _orderIdList.length; i++) {\r\n            if (orderItemInfo[_orderIdList[i]].orderStatus == true) {\r\n                (orderItem memory orderItem2, string memory name2, string memory symbol2, uint256 decimals2, uint256 price2,string memory tokenURI2) = getTokenInfoByIndex(_orderIdList[i]);\r\n                x[k] = massInfoItem(orderItem2, name2, symbol2, decimals2, price2, tokenURI2);\r\n                k = k.add(1);\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function getStatusOkIdList(uint256[] memory _orderIdList) public view returns (uint256[] memory) {\r\n        uint256 okNum = 0;\r\n        for (uint256 i = 0; i < _orderIdList.length; i++) {\r\n            if (orderItemInfo[_orderIdList[i]].orderStatus == true) {\r\n                okNum = okNum.add(1);\r\n            }\r\n        }\r\n        uint256 k = 0;\r\n        uint256[] memory x = new uint256[](okNum);\r\n        for (uint256 i = 0; i < _orderIdList.length; i++) {\r\n            if (orderItemInfo[_orderIdList[i]].orderStatus == true) {\r\n                x[k] = _orderIdList[i];\r\n                k = k.add(1);\r\n            }\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function getTokenInfoByIndex(uint256 index) public view returns (orderItem memory orderItem2, string memory name2, string memory symbol2, uint256 decimals2, uint256 price2, string memory tokenURI2){\r\n        orderItem2 = orderItemInfo[index];\r\n        if (orderItem2.erc20Token == address(0)) {\r\n            name2 = ETH.name();\r\n            symbol2 = ETH.symbol();\r\n            decimals2 = ETH.decimals();\r\n        } else {\r\n            name2 = IERC20(orderItem2.erc20Token).name();\r\n            symbol2 = IERC20(orderItem2.erc20Token).symbol();\r\n            decimals2 = IERC20(orderItem2.erc20Token).decimals();\r\n        }\r\n        price2 = orderItem2.price.mul(1e18).div(10 ** decimals2);\r\n        tokenURI2 = orderItem2.nftToken.tokenURI(orderItem2.tokenId);\r\n    }\r\n\r\n    function getTokenInfoByOrderMd5(string memory _orderMd5) public view returns (orderItem memory orderItem2, string memory name2, string memory symbol2, uint256 decimals2, uint256 price2){\r\n        orderItem2 = orderItemInfo[orderMd5List[_orderMd5]];\r\n        if (orderItem2.erc20Token == address(0)) {\r\n            name2 = ETH.name();\r\n            symbol2 = ETH.symbol();\r\n            decimals2 = ETH.decimals();\r\n        } else {\r\n            name2 = IERC20(orderItem2.erc20Token).name();\r\n            symbol2 = IERC20(orderItem2.erc20Token).symbol();\r\n            decimals2 = IERC20(orderItem2.erc20Token).decimals();\r\n        }\r\n        price2 = orderItem2.price.mul(1e18).div(10 ** decimals2);\r\n    }\r\n\r\n    function getUserOkOrderIdList(address _user) public view returns (uint256[] memory) {\r\n        uint256[] memory userOrderIdList = userOrderList[_user];\r\n        uint256[] memory userOkOrderIdList = getStatusOkIdList(userOrderIdList);\r\n        return userOkOrderIdList;\r\n    }\r\n\r\n    function getUserOkOrderInfoList(address _user) public view returns (massInfoItem[] memory) {\r\n        uint256[] memory userOrderIdList = userOrderList[_user];\r\n        massInfoItem[] memory userOkOrderIdList = getStatusOkInfoList(userOrderIdList);\r\n        return userOkOrderIdList;\r\n    }\r\n\r\n    function getOkOrderList() external view returns (uint256[] memory OkOrderList_) {\r\n        OkOrderList_ = okOrderList.values();\r\n    }\r\n\r\n    function getOkOrderListByIndexList(uint256[] memory _indexList) external view returns (uint256[] memory OkOrderList_) {\r\n        OkOrderList_ = new uint256[](_indexList.length);\r\n        for (uint256 i = 0; i < _indexList.length; i++) {\r\n            OkOrderList_[i] = okOrderList.at(_indexList[i]);\r\n        }\r\n    }\r\n\r\n    function getNftOkOrderList(IERC721Enumerable _nftToken) external view returns (uint256[] memory nftOkOrderList_) {\r\n        nftOkOrderList_ = nftOkOrderList[_nftToken].values();\r\n    }\r\n\r\n    function getNftOkOrderListByIndexList(IERC721Enumerable _nftToken, uint256[] memory _indexList) external view returns (uint256[] memory nftOkOrderList_) {\r\n        nftOkOrderList_ = new uint256[](_indexList.length);\r\n        for (uint256 i = 0; i < _indexList.length; i++) {\r\n            nftOkOrderList_[i] = nftOkOrderList[_nftToken].at(_indexList[i]);\r\n        }\r\n    }\r\n\r\n    function getUserOkOrderList(address _user) external view returns (uint256[] memory userOkOrderList_) {\r\n        userOkOrderList_ = userOkOrderList[_user].values();\r\n    }\r\n\r\n    function getUserOkOrderListByIndexList(address _user, uint256[] memory _indexList) external view returns (uint256[] memory userOkOrderList_) {\r\n        userOkOrderList_ = new uint256[](_indexList.length);\r\n        for (uint256 i = 0; i < _indexList.length; i++) {\r\n            userOkOrderList_[i] = userOkOrderList[_user].at(_indexList[i]);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"}],\"name\":\"createNftOrderEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toUser\",\"type\":\"uint256\"}],\"name\":\"swapEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"widthDrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"createNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"createNftOrderWithEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc20tokenWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc721tokenWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"name\":\"getNftOkOrderList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftOkOrderList_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexList\",\"type\":\"uint256[]\"}],\"name\":\"getNftOkOrderListByIndexList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftOkOrderList_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOkOrderList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"OkOrderList_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexList\",\"type\":\"uint256[]\"}],\"name\":\"getOkOrderListByIndexList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"OkOrderList_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIdList\",\"type\":\"uint256[]\"}],\"name\":\"getStatusOkIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIdList\",\"type\":\"uint256[]\"}],\"name\":\"getStatusOkInfoList\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.orderItem\",\"name\":\"orderItem2\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price2\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI2\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.massInfoItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenIdSaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.orderItem\",\"name\":\"orderItem2\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price2\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI2\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.massInfoItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTokenInfoByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.orderItem\",\"name\":\"orderItem2\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price2\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI2\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orderMd5\",\"type\":\"string\"}],\"name\":\"getTokenInfoByOrderMd5\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.orderItem\",\"name\":\"orderItem2\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOkOrderIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOkOrderInfoList\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.orderItem\",\"name\":\"orderItem2\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price2\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI2\",\"type\":\"string\"}],\"internalType\":\"struct nftOrderPool.massInfoItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserOkOrderList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userOkOrderList_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexList\",\"type\":\"uint256[]\"}],\"name\":\"getUserOkOrderListByIndexList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"userOkOrderList_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftAddressOrderList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTokenLastOrderIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderItemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"nftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"orderStatus\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"orderMd5\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocokNum\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"orderMd5List\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"orderMd5StatusList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderStatusList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardOsPlusAddress\",\"outputs\":[{\"internalType\":\"contract rewardOsPlus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setApprovedForSwapAndFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setErc20WhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable[]\",\"name\":\"_addressList\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setErc721WhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_ETH\",\"type\":\"address\"}],\"name\":\"setEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useRewardOsPlus\",\"type\":\"bool\"},{\"internalType\":\"contract rewardOsPlus\",\"name\":\"_rewardOsPlusAddress\",\"type\":\"address\"}],\"name\":\"setRewardOsPlus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract swapRouter\",\"name\":\"_routerAddress2\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_swapErc20Path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_swapEthPath\",\"type\":\"address[]\"}],\"name\":\"setSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapConfig\",\"outputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract swapRouter\",\"name\":\"routerAddress2\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"swapWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useRewardOsPlus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userOrderList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"widthDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "nftOrderPool", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dae94322005507a6f86d33574b108bd5bdeae38162ba94d6ea5584bc83aad184"}