{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0;\r\n\r\n// @title DELTIN Staking\r\n// @title Website https://deltincoin.live/\r\n// @title Interface : Token Standard #20. https://github.com/ethereum/EIPs/issue\r\n\r\ninterface BEP20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract DELTIN_Staking {\r\n    using SafeMath for uint256;\r\n\r\n    address public signer;\r\n    \r\n    BEP20 DELTIN = BEP20(0x40E307b10aA3F1EACEA7f8ba52577c0eaA381f6e);\r\n\r\n    event Deposit(address buyer, uint256 amount);\r\n    event Sell(address buyer, address coin, uint256 amount);\r\n    \r\n    // @dev Detects Authorized Signer.\r\n    modifier onlySigner(){\r\n        require(msg.sender == signer,\"You are not authorized signer.\");\r\n        _;\r\n    }\r\n\r\n    // @dev Returns coin balance on this contract.\r\n    function getBalanceSheet(address _coin) public view returns(uint256 bal){\r\n        bal =  BEP20(_coin).balanceOf(address(this));\r\n        return bal;\r\n    }\r\n\r\n    // @dev Restricts unauthorized access by another contract.\r\n    modifier security{\r\n        uint size;\r\n        address sandbox = msg.sender;\r\n        assembly  { size := extcodesize(sandbox) }\r\n        require(size == 0,\"Smart Contract detected.\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        signer = msg.sender;\r\n    }\r\n    \r\n    // @dev Deposit coins which are available in this contract.\r\n    function deposit(uint256 _amount) public security{\r\n        require(DELTIN.transferFrom(msg.sender,address(this),_amount));\r\n        emit Deposit(msg.sender, _amount.div(1e18));\r\n    }\r\n\r\n    // @dev Sell coins to buyer\r\n    function sell(address buyer, address _coin, uint _amount) external onlySigner security{\r\n        require(BEP20(_coin).balanceOf(address(this))>=_amount,\"Insufficient Fund!\");\r\n        BEP20(_coin).transfer(buyer, _amount);\r\n        emit Sell(buyer, _coin, _amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"coin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"}],\"name\":\"getBalanceSheet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DELTIN_Staking", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bb4d6a82b8b7776cf6f15aa9d6d34c66c8d354aab26328c3960a8485856b5fce"}