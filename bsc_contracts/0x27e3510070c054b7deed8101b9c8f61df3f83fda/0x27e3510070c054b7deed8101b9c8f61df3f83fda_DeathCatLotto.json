{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\nDeath Cat Lotto\r\nhttps://www.deathcat.info\r\nhttps://t.me/DeathCatGlobal\r\nhttps://x.com/DeathCatGlobal\r\n */\r\n \r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\ncontract DeathCatLotto is ReentrancyGuard, Ownable {\r\nconstructor(address initialOwner) Ownable(initialOwner) {\r\n}\r\n\r\nfunction generateRandomNumber() internal view returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(block.timestamp, blockhash(block.number - 1))));\r\n}\r\n\r\n    uint256 public currentLotteryId;\r\n    uint256 public currentTicketId;\r\n    uint256 public ticketPrice = 0.05 ether;\r\n    uint256 public serviceFee = 5000;\r\n    uint256 public numberWinner;\r\n\r\n    enum Status {\r\n        Close,\r\n        Open,\r\n        Claimable\r\n    }\r\n\r\n    struct Lottery {\r\n        Status status;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 firstTicketId;\r\n        uint256 transferJackpot;\r\n        uint256 lastTicketId;\r\n        uint256[3] winningNumbers;\r\n        uint256 totalPayout;\r\n        uint256 commision;\r\n        uint256 winnerCount;\r\n    }\r\n\r\n    struct Ticket {\r\n        uint256 ticketId;\r\n        address owner;\r\n        uint256[3] chooseNumbers;\r\n    }\r\n\r\n    mapping(uint256 => Lottery) private _lotteries;\r\n    mapping(uint256 => Ticket) private _tickets;\r\n    mapping(uint256 => mapping(uint32 => uint256)) private _numberTicketsPerLotteryId;\r\n    mapping(address => mapping(uint256 => uint256[])) private _userTicketIdsPerLotteryId;\r\n    mapping(address => mapping(uint256 => uint256)) public _winnersPerLotteryId;\r\n\r\n    event LotteryWinnerNumber(uint256 indexed lotteryId, uint256[3] finalNumber);\r\n    event LotteryClose(uint256 indexed lotteryId, uint256 lastTicketId);\r\n    event LotteryOpen(uint256 indexed lotteryId, uint256 startTime, uint256 endTime, uint256 ticketPrice, uint256 firstTicketId, uint256 transferJackpot, uint256 lastTicketId, uint256 totalPayout);\r\n    event TicketsPurchase(address indexed buyer, uint256 indexed lotteryId, uint256[3] chooseNumbers);\r\n\r\n    function openLottery() external onlyOwner nonReentrant {\r\n        currentLotteryId++;\r\n        currentTicketId++;\r\n        uint256 fundJackpot;\r\n        if (currentLotteryId > 1) {\r\n            if (_lotteries[currentLotteryId - 1].winnerCount > 0) {\r\n                fundJackpot = 1 ether;\r\n            } else {\r\n                fundJackpot = _lotteries[currentLotteryId - 1].transferJackpot;\r\n            }\r\n        } else {\r\n            fundJackpot = 1 ether;\r\n        }\r\n        uint256 endTime = block.timestamp + 1 minutes;\r\n        _lotteries[currentLotteryId] = Lottery({\r\n            status: Status.Open,\r\n            startTime: block.timestamp,\r\n            endTime: endTime,\r\n            firstTicketId: currentTicketId,\r\n            transferJackpot: fundJackpot,\r\n            winningNumbers: [uint256(0), uint256(0), uint256(0)],\r\n            lastTicketId: currentTicketId,\r\n            totalPayout: 0,\r\n            commision: 0,\r\n            winnerCount: 0\r\n        });\r\n        emit LotteryOpen(currentLotteryId, block.timestamp, endTime, ticketPrice, currentTicketId, fundJackpot, currentTicketId, 0);\r\n    }\r\n\r\n    function buyTickets(uint256[3] calldata numbers) public payable nonReentrant {\r\n        require(msg.value >= ticketPrice, \"Funds not available to complete transaction\");\r\n        uint256 commisionFee = (ticketPrice * serviceFee) / 10000;\r\n        _lotteries[currentLotteryId].commision += commisionFee;\r\n        uint256 netEarn = ticketPrice - commisionFee;\r\n        _lotteries[currentLotteryId].transferJackpot += netEarn;\r\n        _userTicketIdsPerLotteryId[msg.sender][currentLotteryId].push(currentTicketId);\r\n        _tickets[currentTicketId] = Ticket({\r\n            ticketId: currentTicketId,\r\n            owner: msg.sender,\r\n            chooseNumbers: numbers\r\n        });\r\n        currentTicketId++;\r\n        _lotteries[currentLotteryId].lastTicketId = currentTicketId;\r\n        emit TicketsPurchase(msg.sender, currentLotteryId, numbers);\r\n    }\r\n\r\n    function closeLottery() external onlyOwner {\r\n        require(_lotteries[currentLotteryId].status == Status.Open, \"Lottery not open\");\r\n        require(block.timestamp > _lotteries[currentLotteryId].endTime, \"Lottery not over\");\r\n        _lotteries[currentLotteryId].lastTicketId = currentTicketId;\r\n        _lotteries[currentLotteryId].status = Status.Close;\r\n    }\r\n\r\n    function drawNumbers() external onlyOwner nonReentrant {\r\n        require(_lotteries[currentLotteryId].status == Status.Close, \"Lottery not close\");\r\n        uint256 randomNumber = generateRandomNumber();\r\n        uint256[3] memory finalNumbers;\r\n\r\n        for (uint256 i = 0; i < 3; i++) {\r\n            uint256 num;\r\n            num = (randomNumber % 20) + 1;\r\n            randomNumber = uint256(keccak256(abi.encodePacked(randomNumber)));\r\n            finalNumbers[i] = num;\r\n        }\r\n        _lotteries[currentLotteryId].winningNumbers = finalNumbers;\r\n        _lotteries[currentLotteryId].totalPayout = _lotteries[currentLotteryId].transferJackpot;\r\n    }\r\n\r\n    function countWinners() external onlyOwner {\r\n        require(_lotteries[currentLotteryId].status == Status.Close, \"Lottery not close\");\r\n        require(_lotteries[currentLotteryId].status != Status.Claimable, \"Lottery Already Counted\");\r\n        delete numberWinner;\r\n        uint256 firstTicketId = _lotteries[currentLotteryId].firstTicketId;\r\n        uint256 lastTicketId = _lotteries[currentLotteryId].lastTicketId;\r\n        uint256[3] memory winOrder;\r\n        winOrder = _lotteries[currentLotteryId].winningNumbers;\r\n        bytes32 encodeWin = keccak256(abi.encodePacked(winOrder));\r\n        for (uint256 i = firstTicketId; i < lastTicketId; i++) {\r\n            address buyer = _tickets[i].owner;\r\n            uint256[3] memory userNum = _tickets[i].chooseNumbers;\r\n            bytes32 encodeUser = keccak256(abi.encodePacked(userNum));\r\n            if (encodeUser == encodeWin) {\r\n                numberWinner++;\r\n                _lotteries[currentLotteryId].winnerCount = numberWinner;\r\n                _winnersPerLotteryId[buyer][currentLotteryId] = 1;\r\n            }\r\n        }\r\n        if (numberWinner > 0) {\r\n            _lotteries[currentLotteryId].totalPayout = _lotteries[currentLotteryId].transferJackpot;\r\n        } else {\r\n            _lotteries[currentLotteryId].totalPayout = 0;\r\n            uint256 nextLottoId = currentLotteryId + 1;\r\n            _lotteries[nextLottoId].transferJackpot = _lotteries[currentLotteryId].transferJackpot + 0.001 ether;\r\n        }\r\n        _lotteries[currentLotteryId].status = Status.Claimable;\r\n    }\r\n\r\n    function claimPrize(uint256 _lottoId) external nonReentrant {\r\n        require(_lotteries[_lottoId].status == Status.Claimable, \"Not Payable\");\r\n        require(_lotteries[_lottoId].winnerCount > 0, \"Not Payable\");\r\n        require(_winnersPerLotteryId[msg.sender][_lottoId] == 1, \"Not Payable\");\r\n        uint256 winners = _lotteries[_lottoId].winnerCount;\r\n        uint256 payout = _lotteries[_lottoId].totalPayout / winners;\r\n        payable(msg.sender).transfer(payout);\r\n        _winnersPerLotteryId[msg.sender][_lottoId] = 0;\r\n    }\r\n\r\n    function viewTickets(uint256 ticketId) external view returns (address, uint256[3] memory) {\r\n        address buyer;\r\n        buyer = _tickets[ticketId].owner;\r\n        uint256[3] memory numbers;\r\n        numbers = _tickets[ticketId].chooseNumbers;\r\n        return (buyer, numbers);\r\n    }\r\n\r\n    function viewLottery(uint256 _lotteryId) external view returns (Lottery memory) {\r\n        return _lotteries[_lotteryId];\r\n    }\r\n\r\n    function getBalance() external view onlyOwner returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function fundContract() external payable onlyOwner {}\r\n\r\n    function withdraw() public onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function getCurrentJackpot() public view returns (uint256) {\r\n        return _lotteries[currentLotteryId].transferJackpot;\r\n    }\r\n\r\n    \r\n    function setTicketPrice(uint256 _ticketPrice) external onlyOwner {\r\n        ticketPrice = _ticketPrice;\r\n    }\r\n\r\n    function setServiceFee(uint256 _serviceFee) external onlyOwner {\r\n        require(_serviceFee <= 10000, \"Service fee should be between 0 and 10000\");\r\n        serviceFee = _serviceFee;\r\n    }\r\n\r\n    function getJackpotPercentage() public view returns (uint256) {\r\n        return 10000 - serviceFee;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastTicketId\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferJackpot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastTicketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"finalNumber\",\"type\":\"uint256[3]\"}],\"name\":\"LotteryWinnerNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"chooseNumbers\",\"type\":\"uint256[3]\"}],\"name\":\"TicketsPurchase\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_winnersPerLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"numbers\",\"type\":\"uint256[3]\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lottoId\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTicketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpotPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberWinner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceFee\",\"type\":\"uint256\"}],\"name\":\"setServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"viewLottery\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DeathCatLotto.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferJackpot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"winningNumbers\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winnerCount\",\"type\":\"uint256\"}],\"internalType\":\"struct DeathCatLotto.Lottery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"viewTickets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DeathCatLotto", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000643fadd85b7bb9cd7671c64ed5eccd33fd5abe8b", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://77b28af30042978c7c2859c1a5721b74b23d5aa84e2c84da71b4b5caf8f04c6e"}