{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-07-02\r\n*/\r\n\r\n// SPDX-License-Identifier: CC-BY-SA 4.0\r\n// https://creativecommons.org/licenses/by-sa/4.0/\r\n\r\npragma solidity 0.8.11;\r\n\r\ncontract Staking{\r\n\r\n    constructor(ERC20 _Token, uint256 _RewardFactor, uint256 _MinimumTime, uint256 _WithdrawTime){\r\n        Token = _Token;\r\n        RewardFactor = _RewardFactor;\r\n        MinimumTime = _MinimumTime;\r\n        WithdrawTime = _WithdrawTime;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    ERC20 Token;\r\n    \r\n    mapping(address => uint256) public TimeStaked;\r\n    mapping(address => uint256) public TokensStaked;\r\n    mapping(address => uint256) public TimeFactor;\r\n    mapping(address => uint256) public TimeClaim;\r\n    address [] private user;\r\n    mapping(address => uint256) public PendingReward;\r\n    address public owner;\r\n    uint256 public RewardFactor;\r\n    uint256 public MinimumTime;\r\n    uint256 public WithdrawTime;\r\n\r\n    event Stake(address account, uint256 amount);\r\n    event ClaimRewards(address account, uint256 amount);\r\n    event Withdraw(address account, uint256 amount);\r\n    event TransferOwnership(address prevOwner, address newOwner);\r\n    event ChangeToken(ERC20 prevToken, ERC20 newToken);\r\n    event ChangeReward(uint256 prevReward, uint256 newReward);\r\n    event ChangeWithdrawTime(uint256 prevTime, uint256 newTime);\r\n    event ChangeMinimumStakeTime(uint256 prevTime, uint256 newTime);\r\n\r\n\r\n    modifier onlyOwner() {\r\n        \r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        \r\n        require(newOwner != address(0), \"Owner can't be zero address\");\r\n        emit TransferOwnership(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function EditToken(ERC20 newToken) public onlyOwner {\r\n        require(Token != newToken, \"Token must be different\");\r\n        emit ChangeToken(Token, newToken);\r\n        Token = newToken;\r\n    }\r\n\r\n    function EditReward(uint256 BPSperDay) public onlyOwner {\r\n        require(RewardFactor != BPSperDay, \"Reward must be different\");\r\n        SaveRewards();\r\n        emit ChangeReward(RewardFactor, BPSperDay);\r\n        RewardFactor = BPSperDay;\r\n    }\r\n\r\n    function SweepToken(ERC20 TokenAddress) public onlyOwner {\r\n        \r\n        require(TokenAddress != Token, \"This token is currently being used as rewards! You cannot sweep it while its being used!\");\r\n        TokenAddress.transfer(msg.sender, TokenAddress.balanceOf(address(this))); \r\n    }\r\n\r\n    function EditWithdrawTime(uint256 HowManyBlocks) public onlyOwner {\r\n        require(WithdrawTime != HowManyBlocks, \"WithdrawTime must be different\");\r\n        emit ChangeWithdrawTime(WithdrawTime, HowManyBlocks);\r\n        WithdrawTime = HowManyBlocks;\r\n    }\r\n\r\n    function EditMinimumStakeTime(uint256 HowManyBlocks) public onlyOwner {\r\n        require(MinimumTime != HowManyBlocks, \"MinimumTime must be different\");\r\n        emit ChangeMinimumStakeTime(MinimumTime, HowManyBlocks);\r\n        MinimumTime = HowManyBlocks;\r\n    }\r\n\r\n    function stake(uint256 amount) public {\r\n\r\n        require(Token.balanceOf(msg.sender) > 0, \"You don't have any tokens to stake!\");\r\n        \r\n        if(TokensStaked[msg.sender] == 0){RecordReward(msg.sender, true);}\r\n        else{RecordReward(msg.sender, false);}\r\n \r\n        Token.transferFrom(msg.sender, address(this), amount);\r\n        TokensStaked[msg.sender] += amount; \r\n\r\n        user.push(msg.sender); \r\n\r\n        TimeFactor[msg.sender] = block.timestamp;\r\n\r\n        emit Stake(msg.sender, amount);\r\n    }\r\n\r\n    function claimRewards() public {\r\n\r\n        require(block.timestamp - TimeClaim[msg.sender] > MinimumTime, \"You cannot claim rewards as the lock is still active\");\r\n        require(TokensStaked[msg.sender] > 0, \"There is nothing to claim as you haven't staked anything\");\r\n\r\n        RecordReward(msg.sender, true);\r\n        uint256 reward = PendingReward[msg.sender];\r\n        PendingReward[msg.sender] = 0;\r\n\r\n        Token.transfer(msg.sender, reward);\r\n\r\n        emit ClaimRewards(msg.sender, reward);\r\n    }\r\n\r\n    function Unstake(uint256 amount) public {\r\n\r\n        require(block.timestamp - TimeFactor[msg.sender] > WithdrawTime, \"You cannot withdraw as the withdraw cooldown is active\");\r\n        require(TokensStaked[msg.sender] > 0, \"There is nothing to withdraw as you haven't staked anything\");\r\n\r\n        require(TokensStaked[msg.sender] >= amount, \"You cannot withdraw more tokens than you have staked\");\r\n\r\n        RecordReward(msg.sender, false);\r\n\r\n        TokensStaked[msg.sender] -= amount;\r\n        \r\n        Token.transfer(msg.sender, amount); \r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n  \r\n    function CalculateTime(address YourAddress) internal view returns (uint256){\r\n\r\n        uint256 Time = block.timestamp - TimeStaked[YourAddress];\r\n        \r\n        return Time;\r\n    }\r\n\r\n    function CalculateRewards(address YourAddress, uint256 StakeTime) internal view returns (uint256){\r\n\r\n        return (StakeTime * RewardFactor * (TokensStaked[YourAddress]/100000))/86400;\r\n    }\r\n\r\n    function displayTotalStaked() public view returns(uint256){\r\n    \r\n        return Token.balanceOf(address(this));\r\n    }\r\n\r\n    function RecordReward(address User, bool ResetClaim) internal {\r\n\r\n        uint256 Unclaimed = CalculateRewards(User, CalculateTime(User));\r\n        TimeStaked[User] = block.timestamp; \r\n        if(ResetClaim) TimeClaim[User] = block.timestamp;\r\n        PendingReward[User] += Unclaimed;\r\n    }\r\n\r\n    function SaveRewards() internal {\r\n\r\n        for(uint256 i = 0; i < user.length; i++) {\r\n            if(TokensStaked[user[i]] == 0) continue;\r\n\r\n            RecordReward(user[i], false);\r\n        }\r\n    }\r\n\r\n    function CalculateDailyReward(address YourAddress) public view returns(uint256){\r\n\r\n        return RewardFactor * (TokensStaked[YourAddress]/100000);\r\n    }\r\n\r\n    function CheckRewards(address YourAddress) public view returns (uint256){\r\n        \r\n        return(CalculateRewards(YourAddress, CalculateTime(YourAddress))) + PendingReward[YourAddress];\r\n    }\r\n\r\n    function APYtoBPS(uint APY) public pure returns(uint){\r\n\r\n        APY *= 10e18;\r\n        APY /= 365;\r\n\r\n        return APY/10e15;\r\n    }\r\n\r\n}\r\n\r\ninterface ERC20{\r\n    function transferFrom(address, address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n    function balanceOf(address) external view returns(uint256);\r\n    function decimals() external view returns (uint8);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_RewardFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MinimumTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_WithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"ChangeMinimumStakeTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"ChangeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"prevToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"ChangeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"}],\"name\":\"ChangeWithdrawTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"}],\"name\":\"APYtoBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"YourAddress\",\"type\":\"address\"}],\"name\":\"CalculateDailyReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"YourAddress\",\"type\":\"address\"}],\"name\":\"CheckRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"HowManyBlocks\",\"type\":\"uint256\"}],\"name\":\"EditMinimumStakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"BPSperDay\",\"type\":\"uint256\"}],\"name\":\"EditReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"EditToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"HowManyBlocks\",\"type\":\"uint256\"}],\"name\":\"EditWithdrawTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinimumTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"SweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TimeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TimeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TimeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"displayTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000088cf50037f8069071cd56f641a81b369a5fd3a42000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000002580000000000000000000000000000000000000000000000000000000000000258", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://10154d8562406108cad4cc450b44ed3667023fa781d7d392e47e051d2f024745"}