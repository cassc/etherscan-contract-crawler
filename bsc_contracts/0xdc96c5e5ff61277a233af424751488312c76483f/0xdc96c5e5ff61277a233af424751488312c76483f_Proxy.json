{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\ncontract Proxy {\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    modifier ifAdmin() {\\n        if (msg.sender == admin()) {\\n            _;\\n        } else {\\n            _delegate();\\n        }\\n    }\\n\\n    constructor() public {\\n        address admin = msg.sender;\\n        bytes32 slot = _ADMIN_SLOT;\\n        assembly {\\n            sstore(slot, admin)\\n        }\\n    }\\n    function implementation() public view returns (address) {\\n        return _implementation();\\n    }\\n\\n    function _implementation() internal view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    function setImplementation(address newImplementation) external ifAdmin {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n    function admin() public view returns (address) {\\n        return _admin();\\n    }\\n\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        bytes32 slot = _ADMIN_SLOT;\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    function _delegate() internal {\\n        address _implementation = _implementation();\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), _implementation, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    fallback () payable external {\\n        require(msg.sender != _admin(), \\\"admin cannot fallback to proxy target\\\");\\n        _delegate();\\n    }\\n\\n    receive () payable external {\\n        require(msg.sender != _admin(), \\\"admin cannot fallback to proxy target\\\");\\n        _delegate();\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}