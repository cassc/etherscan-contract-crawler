{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-10-30\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n// library for address array \r\nlibrary AddressArrayLib {\r\n    using AddressArrayLib for addresses;\r\n\r\n    struct addresses {\r\n        address[] array;\r\n    }\r\n\r\n    function add(addresses storage self, address _address)\r\n        external\r\n    {\r\n        if(! exists(self, _address)){\r\n            self.array.push(_address);\r\n        }\r\n    }\r\n\r\n    function getIndexByAddress(\r\n        addresses storage self,\r\n        address _address\r\n    ) internal view returns (uint256, bool) {\r\n        uint256 index;\r\n        bool exists_;\r\n\r\n        for (uint256 i = 0; i < self.array.length; i++) {\r\n            if (self.array[i] == _address) {\r\n                index = i;\r\n                exists_ = true;\r\n\r\n                break;\r\n            }\r\n        }\r\n        return (index, exists_);\r\n    }\r\n\r\n    function removeAddress(\r\n        addresses storage self,\r\n        address _address\r\n    ) internal {\r\n       for (uint256 i = 0; i < self.array.length; i++) {\r\n            if (\r\n                self.array[i] == _address \r\n            ) {\r\n                delete self.array[i];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function exists(\r\n        addresses storage self,\r\n        address _address\r\n    ) internal view returns (bool) {\r\n        for (uint256 i = 0; i < self.array.length; i++) {\r\n            if (\r\n                self.array[i] == _address \r\n            ) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Staking contract\r\n * @author Yogesh Singh\r\n * @notice This contract will store and manage staking at APY defined by owner\r\n * @dev Store, calculate, collect and transefer stakes and rewards to end user\r\n */\r\ncontract Staking is Ownable{\r\n\r\n    using SafeMath for uint;\r\n    \r\n    // Custom lib for managing address[]\r\n    using AddressArrayLib for AddressArrayLib.addresses;\r\n\r\n    // Annual Percentage Yeild * 1000\r\n    uint public APY;\r\n\r\n    // Panic unstake Percentage * 1000\r\n    uint public panicUnstakePercentage;\r\n\r\n    uint private APYTime = 365 days;\r\n\r\n    // Lock duration in seconds\r\n    uint public unstakeLockPeriod;\r\n    \r\n    address public burnAddress;\r\n \r\n    // Address for erc20 Token\r\n    address public erc20Token;\r\n    \r\n    // Token to manage ERC20 \r\n    IERC20 private token;\r\n\r\n    // Structure to store StakeHoders details\r\n    struct  stakeDetails {\r\n        uint stake;\r\n        uint reward;\r\n        uint lastRewardCalculated;\r\n    }\r\n\r\n    // mapping to store current status for stakeHolder\r\n    mapping(address => stakeDetails) public stakeHolders;\r\n\r\n    // Store all the stakeholders\r\n    AddressArrayLib.addresses stakers;\r\n\r\n    // Strcture to store unStake requests for user\r\n    struct unStakeDetails {\r\n        uint amount;\r\n        uint lockingTime;\r\n    }\r\n\r\n    // mapping to store current status for stakeHolder\r\n    mapping(address => unStakeDetails[]) public unstakeRequests;\r\n\r\n    // Events\r\n    event Staked(\r\n        address indexed staker,\r\n        uint amount,\r\n        uint timestamp\r\n    );\r\n    event UnstakeRequested(\r\n        address indexed staker,\r\n        uint amount,\r\n        uint timestamp\r\n    );\r\n    event Unstaked(\r\n        address indexed staker,\r\n        uint amount,\r\n        uint timestamp,\r\n        uint indexed isPanic\r\n    );\r\n    event RewardClaimed(\r\n        address indexed staker,\r\n        uint amount,\r\n        uint timestamp\r\n    );\r\n\r\n    /**\r\n     * @notice Constructor will set make you Owner of this contract,\r\n     * set APY percentage and also store which Crypto Currency to manage\r\n     * @param _APY Annual Percentage Yield * 1000\r\n     * @param _panicUnstakePercentage Panic unstake Percentage * 1000\r\n     * @param _erc20Token Address of erc20Token\r\n     * @param _unstakeLockPeriod Unstake lock duration in days\r\n     */\r\n    constructor(uint _APY, uint _panicUnstakePercentage, address _erc20Token, uint _unstakeLockPeriod, address _burnAddress){\r\n        transferOwnership(msg.sender);\r\n        APY = _APY;\r\n        erc20Token = _erc20Token;\r\n        token = IERC20(_erc20Token);\r\n        panicUnstakePercentage = _panicUnstakePercentage;\r\n        unstakeLockPeriod = _unstakeLockPeriod * (1 days);\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev This function is used to calculate current reward for stakeHolder\r\n     * @param _stakeHolder The address of stakeHolder to calculate reward till current block\r\n     * @return reward calculated till current block\r\n     */\r\n    function _calculateReward(address _stakeHolder) internal view returns(uint reward){\r\n        stakeDetails memory stakeDetail = stakeHolders[_stakeHolder];\r\n        \r\n        if (stakeDetail.stake > 0){\r\n            // Without safemath formula for explanation\r\n            // reward = (\r\n            //     (stakeDetail.stake * APY * (block.timestamp - stakeDetail.lastRewardCalculated)) /\r\n            //     (APYTime * 100 * 1000)\r\n            // );\r\n    \r\n            reward = stakeDetail.stake.mul(APY).mul(\r\n                block.timestamp.sub(stakeDetail.lastRewardCalculated)\r\n            ).div(\r\n                APYTime.mul(100).mul(1000)\r\n            );\r\n        }\r\n        else{\r\n            reward = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This function is used to calculate Total reward for stakeHolder\r\n     * @param _stakeHolder The address of stakeHolder to calculate Total reward \r\n     * @return reward total reward \r\n     */\r\n    function calculateReward(address _stakeHolder) public view returns(uint reward){\r\n        stakeDetails memory stakeDetail = stakeHolders[_stakeHolder];\r\n        reward = stakeDetail.reward + _calculateReward(_stakeHolder);\r\n    }\r\n\r\n    /**\r\n     * @param amount The amount user wants to add into his stake\r\n     */\r\n    function stake(uint amount) public {\r\n\r\n        // Check if amount is allowed to spend the token\r\n        require(token.allowance(msg.sender, address(this)) >= amount, \"Staking: Must allow Spending\");\r\n        \r\n        // Transfer the token to contract\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n\r\n        // Calculate the last reward\r\n        uint uncalculatedReward = _calculateReward(msg.sender);\r\n\r\n        // Update the stake details\r\n        stakeHolders[msg.sender].stake += amount;\r\n        stakeHolders[msg.sender].reward += uncalculatedReward;\r\n        stakeHolders[msg.sender].lastRewardCalculated = block.timestamp;\r\n\r\n        // Add into the array\r\n        stakers.add(msg.sender);\r\n        emit Staked(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the current reward, add with previous reward, Transefer\r\n     * it to sender and update reward to 0\r\n     * @notice This function will transfer the reward earned till now.\r\n     */\r\n    function claimReward() public {\r\n        // Calculate the last reward\r\n        uint uncalculatedReward = _calculateReward(msg.sender);\r\n\r\n        // transfer the reward to stakeHolder\r\n        // token.transfer(msg.sender, stakeHolders[msg.sender].reward + uncalculatedReward);\r\n\r\n        // Check for the allowance and transfer from the owners account\r\n        require(\r\n            token.allowance(owner(), address(this)) > stakeHolders[msg.sender].reward + uncalculatedReward,\r\n            \"Sraking: Insufficient reward allowance from the Admin\"\r\n        );\r\n\r\n        token.transferFrom(owner(), msg.sender, stakeHolders[msg.sender].reward + uncalculatedReward);\r\n\r\n        emit RewardClaimed(msg.sender, stakeHolders[msg.sender].reward + uncalculatedReward, block.timestamp);\r\n\r\n        // Update the stake details\r\n        stakeHolders[msg.sender].reward = 0;\r\n        stakeHolders[msg.sender].lastRewardCalculated = block.timestamp;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev calculate and update the reward, substract the unstaking amount and transfer to lock\r\n     * @notice This function will calculate you reward till now and lock you requested \r\n     * unstake amount to lock state where it can be claimed after lock duration.\r\n     * @param amount amount sender want's to unstake from his current stakings.\r\n     */\r\n    function requestUnstake(uint amount) public{\r\n        // check if user have balance he requested for unstaking\r\n        require(stakeHolders[msg.sender].stake >= amount, \"Staking: Requested unstaking more than balance\");\r\n\r\n        // Calculate the last reward\r\n        uint uncalculatedReward = _calculateReward(msg.sender);\r\n\r\n        // Update the stake details\r\n        stakeHolders[msg.sender].stake -= amount;\r\n        stakeHolders[msg.sender].reward += uncalculatedReward;\r\n        stakeHolders[msg.sender].lastRewardCalculated = block.timestamp;\r\n\r\n        // store unstakable amount details\r\n        unStakeDetails memory _unstakeDetail = unStakeDetails(amount, block.timestamp);\r\n\r\n        // update the list of amount requested to unstake till now.\r\n        unstakeRequests[msg.sender].push(_unstakeDetail);\r\n        emit UnstakeRequested(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Sum the unstake amounts requested by user before lock date.\r\n     * @notice This function will return the sum of claimable unstake amount.\r\n     * @param _stakeHolder Address of stakeHolder\r\n     * @return availableAmount The amount that have completed lock duration\r\n     */\r\n    function getUnstakableAmount(address _stakeHolder) view public returns (uint availableAmount){\r\n        availableAmount = 0;\r\n        for (uint i=0; i < unstakeRequests[_stakeHolder].length; i++){\r\n            if (unstakeRequests[_stakeHolder][i].lockingTime + unstakeLockPeriod < block.timestamp){\r\n                availableAmount += unstakeRequests[_stakeHolder][i].amount;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Sum the locked amounts requested by user.\r\n     * @notice This function will return the sum of locked amount.\r\n     * @param _stakeHolder Address of stakeHolder\r\n     * @return availableAmount The amount that are locked\r\n     */\r\n    function getLockedAmount(address _stakeHolder) view public returns (uint availableAmount){\r\n        availableAmount = 0;\r\n        for (uint i=0; i < unstakeRequests[_stakeHolder].length; i++){\r\n            availableAmount += unstakeRequests[_stakeHolder][i].amount;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates APY for the contract\r\n     * @notice This function will update APY and allowed to owner only\r\n     * @param _APY Annual Percentage Yield * 1000\r\n     */\r\n    function setAPY(uint _APY) public onlyOwner {\r\n        APY = _APY;\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates UnstakeLockPeriod for the contract\r\n     * @notice This function will update UnstakeLockPeriod and allowed to owner only\r\n     * @param _unstakeLockPeriod Unstake lock duration\r\n     */\r\n    function setUnstakeLockPeriod(uint _unstakeLockPeriod) public onlyOwner{\r\n        unstakeLockPeriod = _unstakeLockPeriod * (1 days);\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates PanicUnstakePercentage for the contract\r\n     * @notice This function will update PanicUnstakePercentage and allowed to owner only\r\n     * @param _panicUnstakePercentage Panic unstake Percentage * 1000\r\n     */\r\n    function setPanicUnstakePercentage(uint _panicUnstakePercentage) public onlyOwner {\r\n        panicUnstakePercentage = _panicUnstakePercentage;\r\n    }\r\n    \r\n    /**\r\n     * @dev Updates burnAddress for the contract\r\n     * @notice This function will update burnAddress and allowed to owner only\r\n     * @param _burnAddress Burn address for afen\r\n     */\r\n    function setBurnAddress(address _burnAddress) public onlyOwner {\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @dev Sum the unstakable amount delete and transfer the request to _stakeHolder\r\n     * @notice This function will transfer the unstable amount to your wallet\r\n     */\r\n    function finizeUnstake() public {\r\n        uint availableAmount = 0;\r\n        for (uint i=0; i < unstakeRequests[msg.sender].length; ){\r\n\r\n            // Check if the unstake request have passed the lock duration\r\n            if (unstakeRequests[msg.sender][i].lockingTime + unstakeLockPeriod < block.timestamp){\r\n\r\n                // Add amount to the sum\r\n                availableAmount += unstakeRequests[msg.sender][i].amount;\r\n\r\n                // Delete the detail\r\n                unstakeRequests[msg.sender][i] = unstakeRequests[msg.sender][unstakeRequests[msg.sender].length - 1];\r\n                unstakeRequests[msg.sender].pop();\r\n\r\n            }\r\n            else{\r\n                i++; // Increament value only if not delete from the list\r\n            }\r\n        }\r\n\r\n        require(availableAmount > 0, \"You don't have any unstakeble amount\");\r\n\r\n        // Send the unstaked amout to stakeHolder\r\n        token.transfer(msg.sender, availableAmount);\r\n        emit Unstaked(msg.sender, availableAmount, block.timestamp, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev calculate and update the reward, transfer the requested amount \r\n     * to user and update the unstaked request and staked amount\r\n     * @notice This function will return maximum amount requested from user \r\n     * panic unstake will charge `panicUnstakePercentage/1000` percentage\r\n     * @param amount amount sender want's to panically unstake from his current stakings.\r\n     */\r\n    function panicUnstake(uint amount) public {\r\n        uint availableAmount = 0;\r\n        for (uint i=0; i < unstakeRequests[msg.sender].length; ){\r\n\r\n            // Check if the required amount is completed\r\n            if (unstakeRequests[msg.sender][i].amount + availableAmount <= amount){\r\n\r\n                // Add amount to the sum\r\n                availableAmount += unstakeRequests[msg.sender][i].amount;\r\n\r\n                // Delete the detail\r\n                unstakeRequests[msg.sender][i] = unstakeRequests[msg.sender][unstakeRequests[msg.sender].length - 1];\r\n                unstakeRequests[msg.sender].pop();\r\n            }\r\n\r\n            else{\r\n                // Update current unstake request's amount \r\n                uint requiredAmount = amount - availableAmount;\r\n                unstakeRequests[msg.sender][i].amount -= requiredAmount;\r\n                availableAmount += requiredAmount;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Calculate panic unstake charges\r\n        uint panicUnstakeCharges = availableAmount.mul(panicUnstakePercentage).div(\r\n            100*1000\r\n        );\r\n\r\n        // require(availableAmount > amount, \"You don't have any unstakeble amount\");\r\n\r\n        // Send the unstaked amout to stakeHolder\r\n        token.transfer(msg.sender, availableAmount - panicUnstakeCharges);\r\n\r\n        // Burn panic unstake charges\r\n        token.transfer(burnAddress, panicUnstakeCharges);\r\n\r\n        emit Unstaked(msg.sender, availableAmount, block.timestamp, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array of stakeholder\r\n     * @notice This function will give list of stakers who have staked any amount.\r\n     * @return stakers.array the list os stakeholders\r\n     */\r\n    function getStakers() public view returns(address[] memory) {   \r\n        return stakers.array;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate and return total staked amount till now.\r\n     * @notice This function will give you total of staked amount till now.\r\n     * @return _totalStaked The sum of all staked amount\r\n     */\r\n    function totalStaked() public view returns (uint _totalStaked){\r\n        uint sum = 0;\r\n        for (uint i=0; i<stakers.array.length; i++){\r\n            sum += stakeHolders[stakers.array[i]].stake;\r\n        }\r\n        _totalStaked = sum;\r\n    }\r\n\r\n    /** \r\n     * @dev Calculate and return total undelivered rewards till now.\r\n     * @notice This function will give you total of unclaimed rewards till now.\r\n     * @return _totalReward Total ou unclaimed reward till now.\r\n     */\r\n    function totalReward() public view returns (uint _totalReward) {\r\n        uint sum = 0;\r\n        for (uint i=0; i<stakers.array.length; i++){\r\n            sum += stakeHolders[stakers.array[i]].reward;\r\n            sum += _calculateReward(stakers.array[i]);\r\n        }\r\n        _totalReward = sum;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check if contract have suffecient reward allowance or not\r\n     * @notice This function will return if it has sufficient fund for paying the reward\r\n     * @return True if have sufficient allowance for paying all the rewards\r\n     */\r\n    function haveSuffecientAllowanceForReward() public view returns(bool) {\r\n        return token.allowance(owner(), address(this)) > totalReward();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_panicUnstakePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeLockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnstakeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"isPanic\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeHolder\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finizeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeHolder\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeHolder\",\"type\":\"address\"}],\"name\":\"getUnstakableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haveSuffecientAllowanceForReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"panicUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"panicUnstakePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"}],\"name\":\"setAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_panicUnstakePercentage\",\"type\":\"uint256\"}],\"name\":\"setPanicUnstakePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeLockPeriod\",\"type\":\"uint256\"}],\"name\":\"setUnstakeLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardCalculated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000001388000000000000000000000000d0840d5f67206f865aee7cce075bd4484cd3cc81000000000000000000000000000000000000000000000000000000000000000700000000000000000000000078968896cda3f4d1bae8baec5532fb7fe8cee277", "EVMVersion": "Default", "Library": "AddressArrayLib:014959e792c00686046f8ab38297c1195b32ffff", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://618078dec19948cc619be8135382fbda043515fdd81f5c79342af461fe8f61ce"}