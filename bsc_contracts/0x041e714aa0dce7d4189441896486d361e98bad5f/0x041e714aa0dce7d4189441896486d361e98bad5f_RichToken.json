{"SourceCode": "// Sources flattened with hardhat v2.7.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.0\r\n// SPDX-License-Identifier: MIT\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File contracts/ERC20/IRichToken.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRichToken is IERC20 {\r\n    event Recharge(address indexed from, address indexed to, uint256 value);\r\n    event MintSelf(address indexed to, uint256 value, uint tax);\r\n    function transferAccount(address from, address to, uint256 amount) external returns (bool);\r\n    function getBurnAddress() external view returns(address);\r\n    function getRichFarmByAddress(address account) external view returns (address, uint);\r\n    function getCapValue() external view returns(uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Market/ILandMarket.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILandMarket {\r\n    event PutShopLand(uint indexed landId, address indexed seller, uint price, uint _timeStamp);\r\n    event GetOffShopLand(uint indexed landId, address indexed seller);\r\n    event BuyShopLand(uint indexed landId, address indexed buyer, address indexed seller, uint price);\r\n    function getShopByLandId(uint _landId) external view returns(address, uint, uint, uint);\r\n    function getOffShopLand(uint _landId) external returns(uint);\r\n    function putShopLand(uint _landId,uint _sellPrice) external returns(uint);\r\n    function delLandSalesInfo(uint _landId) external;\r\n    function addLandSalesInfo(uint _landId, address _seller, uint _sellPrice) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/Land/ILandCore.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILandCore is IERC721 {\r\n    event NewLand(address indexed to, uint indexed landId, uint8 landType, uint8 landStage, string ident, uint code, uint landPrice);\r\n    event StageStart(uint8 landStage, bool status);\r\n    event StageConfig(uint8 stageId, uint8 landType, uint256 stagePrice, uint stageTotalNumber, uint airdropTotalNumber);\r\n    event StageIncrease(uint8 stageId, uint8 landType, uint256 stagePrice, uint stageIncreaseNumber, uint airdropIncreaseNumber);\r\n    function getCEO() external view returns(address);\r\n    function getCFO() external view returns(address);\r\n    function getCOO() external view returns(address);\r\n    function getCSO() external view returns(address);\r\n    function getOpenedLandCount() external view returns(uint);\r\n    function transferByMainContract(address from, address to, uint256 tokenId) external;\r\n    function safeTransferByMainContract(address from, address to, uint256 tokenId) external;\r\n    function getLandByTokenId(uint _tokenId) external view returns(\r\n        uint8,\r\n        uint8,\r\n        string memory,\r\n        uint,\r\n        uint,\r\n        address,\r\n        uint,\r\n        uint\r\n    ) ;\r\n    function getLandStageInfo(uint _tokenId) external view returns (uint8, uint8, uint256, uint, uint ,uint,uint);\r\n}\r\n\r\n\r\n// File contracts/Utils/IRCUtils.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRCUtils {\r\n//    function getCrossLinkByIndex(uint _x, uint _y) external view returns (uint);\r\n//    function setCrossLink(uint _x, uint _y, uint _indexId) external;\r\n//    function getCrossLink(uint _x, uint _y, uint _len) external view returns(uint[] memory);\r\n    function createIdent(uint _len, uint _max, uint _landType) external returns (string memory);\r\n    function stringConcat(string memory _a, string memory _b) external view returns(string memory);\r\n}\r\n\r\n\r\n// File contracts/Promotion/IHire.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IHire {\r\n    function getOwnerByTokenId(uint _tokenId) external view returns(address, address, uint, uint, uint);\r\n    function getHireInfoByTokenId(uint _tokenId) external view returns(address, address, uint, uint, uint, uint);\r\n    function settleHireByDep() external;\r\n    function getExpireHireNum() external view returns(uint);\r\n}\r\n\r\n\r\n// File contracts/Dependency/FarmDep.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract FarmDep is Pausable{\r\n    address public whitelistSetterAddress;\r\n    IRichToken private richTokenInter;\r\n    ILandCore private landCodeInter;\r\n    ILandMarket private landMarketInter;\r\n    IRCUtils private rcUtilsInter;\r\n    IHire private hireInter;\r\n    address public richTokenAddress;\r\n    address public landCoreAddress;\r\n    address public landMarketAddress;\r\n    address public hireAddress;\r\n    address public rcUtilsAddress;\r\n    address[] private farmDeps;\r\n    // 1/10000\r\n    uint public burnPoint = 1;\r\n    uint public fundPoint = 50;\r\n    uint public minPrice = 10 * (10 ** 9);\r\n    uint public minTaxPrice = 3 * (10 ** 9);\r\n    address owner;\r\n\r\n    event SetFarmDeps(address _op , address _delAddr);\r\n    event DelFarmDeps(address _op , address _delAddr);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        whitelistSetterAddress = msg.sender;\r\n    }\r\n\r\n    modifier onlyWhitelistSetter() {\r\n        require(msg.sender == whitelistSetterAddress || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRichToken() {\r\n        require(richTokenAddress==msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyLandCode() {\r\n        require(landCoreAddress==msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyLandMarket() {\r\n        require(landMarketAddress==msg.sender);\r\n        _;\r\n    }\r\n\r\n    function setWhitelistSetter(address _newSetter) external onlyOwner {\r\n        whitelistSetterAddress = _newSetter;\r\n    }\r\n\r\n    function setRichToken(address _newAddress) external onlyWhitelistSetter {\r\n        richTokenAddress = _newAddress;\r\n        richTokenInter = IRichToken(_newAddress);\r\n        farmDeps.push(_newAddress);\r\n    }\r\n\r\n    function setLandCore(address _newAddress) external onlyWhitelistSetter {\r\n        landCoreAddress = _newAddress;\r\n        landCodeInter = ILandCore(_newAddress);\r\n        farmDeps.push(_newAddress);\r\n    }\r\n\r\n    function setLandMarket(address _newAddress) external onlyWhitelistSetter {\r\n        landMarketAddress = _newAddress;\r\n        landMarketInter = ILandMarket(_newAddress);\r\n        farmDeps.push(_newAddress);\r\n    }\r\n\r\n    function setRcUtilsAddress(address _newAddress) external onlyWhitelistSetter {\r\n        rcUtilsAddress = _newAddress;\r\n        rcUtilsInter = IRCUtils(_newAddress);\r\n        farmDeps.push(_newAddress);\r\n    }\r\n\r\n    function setHire(address _newAddress) external onlyWhitelistSetter {\r\n        hireAddress = _newAddress;\r\n        hireInter = IHire(_newAddress);\r\n        farmDeps.push(_newAddress);\r\n    }\r\n\r\n    function setBurnPoint(uint _point) external onlyWhitelistSetter {\r\n        require(_point <= 100);\r\n        burnPoint = _point;\r\n    }\r\n\r\n    function setFundPoint(uint _point) external onlyWhitelistSetter {\r\n        require(_point <= 1000);\r\n        fundPoint = _point;\r\n    }\r\n\r\n    function setMinTaxPrice(uint _minTaxPrice) external onlyWhitelistSetter {\r\n        minTaxPrice = _minTaxPrice;\r\n    }\r\n\r\n    function setMinPrice(uint _value) external onlyWhitelistSetter{\r\n        minPrice = _value;\r\n    }\r\n\r\n    function setFarmDeps(address _newAddress) external onlyOwner{\r\n        farmDeps.push(_newAddress);\r\n        emit SetFarmDeps(msg.sender, _newAddress);\r\n    }\r\n\r\n    function delFarmDeps(address _address) external onlyOwner{\r\n        for (uint i = 0; i < farmDeps.length; i++){\r\n            if (farmDeps[i] == _address) {\r\n                farmDeps[i] = address(0);\r\n            }\r\n        }\r\n        emit DelFarmDeps(msg.sender, _address);\r\n    }\r\n\r\n    function getFarmDeps() public view returns(address[] memory) {\r\n        return farmDeps;\r\n    }\r\n\r\n    function getCEO() public view returns(address) {\r\n        return landCodeInter.getCEO();\r\n    }\r\n\r\n    function getCFO() public view returns(address) {\r\n        return landCodeInter.getCFO();\r\n    }\r\n\r\n    function getCOO() public view returns(address) {\r\n        return landCodeInter.getCOO();\r\n    }\r\n\r\n    function getCSO() public view returns(address) {\r\n        return landCodeInter.getCSO();\r\n    }\r\n\r\n    function getBurn() public view returns(address) {\r\n        return richTokenInter.getBurnAddress();\r\n    }\r\n\r\n    function getBurnPoint() public view returns(uint){\r\n        return burnPoint;\r\n    }\r\n\r\n    function getFundPoint() public view returns(uint){\r\n        return fundPoint;\r\n    }\r\n\r\n    function setPause() external onlyWhitelistSetter whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function setUnpause() external onlyWhitelistSetter whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/SafeMath.sol@v4.4.0\r\n\r\n//  MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/ERC20Burnable.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    using SafeMath for uint256;\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\r\n            amount,\r\n            \"ERC20: burn amount exceeds allowance\"\r\n        );\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/RichFarmStorage.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract RichFarmStorage {\r\n\r\n    struct RichFarm {\r\n        address account;\r\n        uint recharge;\r\n    }\r\n    mapping(address => RichFarm) public accountToRichFarm;\r\n}\r\n\r\n\r\n// File contracts/ERC20/RichTokenCover.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract RichTokenCover is ERC20, IRichToken, ERC20Burnable, RichFarmStorage {\r\n    using SafeMath for uint256;\r\n    address internal owner;\r\n    uint256 private _totalMinted;\r\n    uint256 private _cap = 50 * 100000000 * (10 ** uint256(decimals()));\r\n    FarmDep internal farmDep;\r\n    address public teamAddr;\r\n    address private burnAddr;\r\n    address public fundAddr;\r\n    constructor(address _farmDep, address _teamAddr, address _burnAddr, address _fundAddr, address _pvsAddr, address _marketAddr) {\r\n        farmDep = FarmDep(_farmDep);\r\n        owner = msg.sender;\r\n        teamAddr = _teamAddr;\r\n        burnAddr = _burnAddr;\r\n        fundAddr = _fundAddr;\r\n        super._mint(_teamAddr, _cap.mul(5).div(100));\r\n        super._mint(_pvsAddr, _cap.mul(5).div(100));\r\n        super._mint(_marketAddr, _cap.mul(10).div(100));\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"caller not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier minAmount(uint _amount) {\r\n        require(_amount > farmDep.minTaxPrice(), \"amount < minTaxPrice\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRichTokenDep() {\r\n        address[] memory deps = farmDep.getFarmDeps();\r\n        address depAddress;\r\n        for (uint i = 0; i < deps.length;i++) {\r\n            if (msg.sender == deps[i]) {\r\n                depAddress = deps[i];\r\n                break;\r\n            }\r\n        }\r\n        require(msg.sender == depAddress, \"is not richToken dependency\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        ILandCore landCoreInter = ILandCore(farmDep.landCoreAddress());\r\n        require(\r\n            msg.sender == landCoreInter.getCEO() ||\r\n            msg.sender == landCoreInter.getCFO() ||\r\n            msg.sender == landCoreInter.getCOO() ||\r\n            msg.sender == landCoreInter.getCSO()\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyCFO() {\r\n        ILandCore landCoreInter = ILandCore(farmDep.landCoreAddress());\r\n        require(msg.sender == landCoreInter.getCFO());\r\n        _;\r\n    }\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal override {\r\n        super._mint(account, amount);\r\n        _totalMinted = _totalMinted.add(amount);\r\n    }\r\n\r\n    function getBurnAddress() external view override returns(address){\r\n        return burnAddr;\r\n    }\r\n\r\n    function totalMinted() public view returns (uint256) {\r\n        return _totalMinted;\r\n    }\r\n\r\n    function mint(address to, uint _rchAmount) public onlyCFO minAmount(_rchAmount) {\r\n        ILandCore landCoreInter = ILandCore(farmDep.landCoreAddress());\r\n        RichFarm memory _richFarm = accountToRichFarm[to];\r\n        uint tax = farmDep.minTaxPrice();\r\n        uint payAmount = _rchAmount.sub(tax);\r\n        if (_richFarm.recharge >= _rchAmount) {\r\n            _transfer(landCoreInter.getCFO(), to, payAmount);\r\n            _transfer(landCoreInter.getCFO(), landCoreInter.getCOO(), tax);\r\n            accountToRichFarm[to].recharge = _richFarm.recharge.sub(_rchAmount);\r\n        }else{\r\n            if (0 <= _richFarm.recharge && _richFarm.recharge < tax) {\r\n                _transfer(landCoreInter.getCFO(), to, accountToRichFarm[to].recharge);\r\n                _mint(to, payAmount.sub(_richFarm.recharge));\r\n                uint mintAmount = _rchAmount.sub(_richFarm.recharge);\r\n                uint fund = mintAmount.mul(farmDep.fundPoint()).div(10000);\r\n                _mint(fundAddr, fund);\r\n                _mint(landCoreInter.getCOO(), tax);\r\n                uint burn = mintAmount.mul(farmDep.burnPoint()).div(10000);\r\n                _transferBurnFromTaxAddress(burn);\r\n                accountToRichFarm[to].recharge = 0;\r\n            }else {\r\n                _transfer(landCoreInter.getCFO(), landCoreInter.getCOO(), tax);\r\n                _transfer(landCoreInter.getCFO(), to, accountToRichFarm[to].recharge.sub(tax));\r\n                uint mintAmount = _rchAmount.sub(accountToRichFarm[to].recharge);\r\n                _mint(to, mintAmount);\r\n                uint fund = mintAmount.mul(farmDep.fundPoint()).div(10000);\r\n                _mint(fundAddr, fund);\r\n                uint burn = mintAmount.mul(farmDep.burnPoint()).div(10000);\r\n                _transferBurnFromTaxAddress(burn);\r\n                accountToRichFarm[to].recharge = 0;\r\n            }\r\n        }\r\n        emit MintSelf(to, _rchAmount, tax);\r\n    }\r\n\r\n    struct mintBulkParam {\r\n        address to;\r\n        uint amount;\r\n    }\r\n\r\n    function mintBulk(mintBulkParam[] memory _minters) public onlyCFO{\r\n        for (uint i=0; i< _minters.length; i++) {\r\n            mint(_minters[i].to, _minters[i].amount);\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n        require(!farmDep.paused(), \"ERC20Pausable: token transfer while paused\");\r\n        if (from == address(0)) {\r\n            require(totalMinted().add(amount) <= _cap.mul(80).div(100), \"ERC20Capped: cap exceeded\");\r\n        }\r\n    }\r\n\r\n    function transferAccount(address from, address to, uint256 amount) external override onlyRichTokenDep() returns (bool) {\r\n        require(validBalanceWithTax(from, amount, 0), \"insufficient balance\");\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function validBalanceWithTax(address from, uint _amount, uint _tax) internal view returns (bool){\r\n        if (balanceOf(from)>= _amount.add(_tax)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n//    function mintExpand(address to, uint256 _amount) external override onlyRichTokenDep() {\r\n//        _mint(to, _amount);\r\n//    }\r\n\r\n    function _transferBurnFromTaxAddress(uint _burn) internal {\r\n        if (balanceOf(farmDep.getCOO()) > _burn) {\r\n            _transfer(farmDep.getCOO(), this.getBurnAddress(), _burn);\r\n        }\r\n    }\r\n\r\n    function getRichFarmByAddress(address account) external view override returns (address, uint) {\r\n        RichFarm memory _richFarm = accountToRichFarm[account];\r\n        return (_richFarm.account, _richFarm.recharge);\r\n    }\r\n\r\n    function getCapValue() external view override returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Core/RichToken.sol\r\n\r\n//  MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract RichToken is RichTokenCover{\r\n    using SafeMath for uint256;\r\n\r\n    constructor(\r\n        address _farmDep,\r\n        address _teamAddr,\r\n        address _burnAddr,\r\n        address _fundAddr,\r\n        address _pvsAddr,\r\n        address _marketAddr\r\n    )\r\n    ERC20(\"RichToken\", \"RCH\")\r\n    RichTokenCover(_farmDep, _teamAddr, _burnAddr, _fundAddr, _pvsAddr, _marketAddr){\r\n\r\n    }\r\n\r\n    modifier validBalance(uint _amount) {\r\n        require(balanceOf(msg.sender) >= _amount, \"insufficient balance\");\r\n        _;\r\n    }\r\n    function recharge(uint _amount) public minAmount(_amount) validBalance(_amount) {\r\n        transfer(farmDep.getCFO(), _amount);\r\n        accountToRichFarm[msg.sender] = RichFarm(msg.sender, accountToRichFarm[msg.sender].recharge.add(_amount));\r\n        emit Recharge(msg.sender, farmDep.getCFO(), _amount);\r\n    }\r\n\r\n    function getMinTaxPrice() public view returns(uint){\r\n        return farmDep.minTaxPrice();\r\n    }\r\n\r\n    function getBurnPoint() public view returns(uint){\r\n        return farmDep.getBurnPoint();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmDep\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teamAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burnAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pvsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"MintSelf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Recharge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountToRichFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recharge\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCapValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRichFarmByAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rchAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RichTokenCover.mintBulkParam[]\",\"name\":\"_minters\",\"type\":\"tuple[]\"}],\"name\":\"mintBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RichToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e4a5830c14023159fcf6d0d9be930461fdac27dc00000000000000000000000083cf49a8bfe0d956625cea36a2d91da1289812e60000000000000000000000005eb1eb142b8e2bb1c94cabca2be52c11e597f5d9000000000000000000000000d225c39990a525ea6b12c96839ed3d79ab7012630000000000000000000000001e940faf8cec26c760810fc4a2245148f3fff74700000000000000000000000017ad963ff1efe03516485f12db1add9627787720", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://53229266838a54aa378cd06d72afb9a0d04364cfe14c400541176aaf23e97b1d"}