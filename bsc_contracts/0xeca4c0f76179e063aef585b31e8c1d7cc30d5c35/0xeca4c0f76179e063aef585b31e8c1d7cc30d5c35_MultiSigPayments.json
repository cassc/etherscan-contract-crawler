{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n/**\r\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\n*/\r\ninterface IERC1155TokenReceiver {\r\n    /**\r\n        @notice Handle the receipt of a single ERC1155 token type.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n        This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\r\n        This function MUST revert if it rejects the transfer.\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _id        The ID of the token being transferred\r\n        @param _value     The amount of tokens being transferred\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    */\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @notice Handle the receipt of multiple ERC1155 token types.\r\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n        This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\r\n        This function MUST revert if it rejects the transfer(s).\r\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param _from      The address which previously owned the token\r\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\r\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\r\n        @param _data      Additional data with no specified format\r\n        @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n    @author The Calystral Team\r\n    @title The RegistrableContractState's Interface\r\n*/\r\ninterface IRegistrableContractState is IERC165 {\r\n    /*==============================\r\n    =           EVENTS             =\r\n    ==============================*/\r\n    /// @dev MUST emit when the contract is set to an active state.\r\n    event Activated();\r\n    /// @dev MUST emit when the contract is set to an inactive state.\r\n    event Inactivated();\r\n\r\n    /*==============================\r\n    =          FUNCTIONS           =\r\n    ==============================*/\r\n    /**\r\n        @notice Sets the contract state to active.\r\n        @dev Sets the contract state to active.\r\n    */\r\n    function setActive() external;\r\n\r\n    /**\r\n        @notice Sets the contract state to inactive.\r\n        @dev Sets the contract state to inactive.\r\n    */\r\n    function setInactive() external;\r\n\r\n    /**\r\n        @dev Sets the registry contract object.\r\n        Reverts if the registryAddress doesn't implement the IRegistry interface.\r\n        @param registryAddress The registry address\r\n    */\r\n    function setRegistry(address registryAddress) external;\r\n\r\n    /**\r\n        @notice Returns the current contract state.\r\n        @dev Returns the current contract state.\r\n        @return The current contract state (true == active; false == inactive)\r\n    */\r\n    function getIsActive() external view returns (bool);\r\n\r\n    /**\r\n        @notice Returns the Registry address.\r\n        @dev Returns the Registry address.\r\n        @return The Registry address\r\n    */\r\n    function getRegistryAddress() external view returns (address);\r\n\r\n    /**\r\n        @notice Returns the current address associated with `key` identifier.\r\n        @dev Look-up in the Registry.\r\n        Returns the current address associated with `key` identifier.\r\n        @return The key identifier\r\n    */\r\n    function getContractAddress(uint256 key) external view returns (address);\r\n}\r\n\r\n/// @author Stefan George - <stefan.george@consensys.net> - adjusted by the Calystral Team\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\ninterface IMultiSigAdmin is IERC1155TokenReceiver, IRegistrableContractState {\r\n    /*==============================\r\n    =           EVENTS             =\r\n    ==============================*/\r\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\r\n    event Revocation(address indexed sender, uint256 indexed transactionId);\r\n    event Submission(uint256 indexed transactionId);\r\n    event Execution(uint256 indexed transactionId);\r\n    event ExecutionFailure(uint256 indexed transactionId);\r\n    event Deposit(address indexed sender, uint256 value);\r\n    event OwnerAddition(address indexed owner);\r\n    event OwnerRemoval(address indexed owner);\r\n    event RequirementChange(uint256 required);\r\n\r\n    /*==============================\r\n    =          FUNCTIONS           =\r\n    ==============================*/\r\n    /// @dev Fallback function allows to deposit ether.\r\n    receive() external payable;\r\n\r\n    /// @dev Allows an owner to submit and confirm a transaction.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return transactionId transactionId Returns transaction ID.\r\n    function submitTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) external returns (uint256 transactionId);\r\n\r\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of new owner.\r\n    function addOwner(address owner) external;\r\n\r\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner.\r\n    function removeOwner(address owner) external;\r\n\r\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\r\n    /// @param owner Address of owner to be replaced.\r\n    /// @param newOwner Address of new owner.\r\n    function replaceOwner(address owner, address newOwner) external;\r\n\r\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n    /// @param _required Number of required confirmations.\r\n    function changeRequirement(uint256 _required) external;\r\n\r\n    /// @dev Allows an owner to confirm a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function confirmTransaction(uint256 transactionId) external;\r\n\r\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function revokeConfirmation(uint256 transactionId) external;\r\n\r\n    /// @dev Allows anyone to execute a confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    function executeTransaction(uint256 transactionId) external;\r\n\r\n    /*==============================\r\n    =          VIEW & PURE         =\r\n    ==============================*/\r\n    /// @dev Returns the confirmation status of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return isConfirmed Confirmation status.\r\n    function isConfirmed(uint256 transactionId) external view returns (bool);\r\n\r\n    /// @dev Returns number of confirmations of a transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return count Number of confirmations.\r\n    function getConfirmationCount(uint256 transactionId)\r\n        external\r\n        view\r\n        returns (uint256 count);\r\n\r\n    /// @dev Returns total number of transactions after filers are applied.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return count Total number of transactions after filters are applied.\r\n    function getTransactionCount(bool pending, bool executed)\r\n        external\r\n        view\r\n        returns (uint256 count);\r\n\r\n    /// @dev Returns list of owners.\r\n    /// @return owners List of owner addresses.\r\n    function getOwners() external view returns (address[] memory);\r\n\r\n    /// @dev Returns the amount of required confirmations.\r\n    /// @return required Amount of required confirmations.\r\n    function getRequired() external view returns (uint256);\r\n\r\n    /// @dev Returns array with owner addresses, which confirmed transaction.\r\n    /// @param transactionId Transaction ID.\r\n    /// @return _confirmations Returns array of owner addresses.\r\n    function getConfirmations(uint256 transactionId)\r\n        external\r\n        view\r\n        returns (address[] memory _confirmations);\r\n\r\n    /// @dev Returns list of transaction IDs in defined range.\r\n    /// @param from Index start position of transaction array.\r\n    /// @param to Index end position of transaction array.\r\n    /// @param pending Include pending transactions.\r\n    /// @param executed Include executed transactions.\r\n    /// @return _transactionIds Returns array of transaction IDs.\r\n    function getTransactionIds(\r\n        uint256 from,\r\n        uint256 to,\r\n        bool pending,\r\n        bool executed\r\n    ) external view returns (uint256[] memory _transactionIds);\r\n}\r\n\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\n/// @author Stefan George - <stefan.george@consensys.net> - adjusted by the Calystral Team\r\ninterface IMultiSigPayments is IMultiSigAdmin {\r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    /**\r\n        @dev MUST emit when a token allowance changes.\r\n        The `tokenAddress` argument MUST be the token address.\r\n        The `allowed` argument MUST be the allowance.\r\n    */\r\n    event OnTokenUpdate(address indexed tokenAddress, bool allowed);\r\n    /**\r\n        @dev MUST emit when the withdraw address changes.\r\n        The `withdrawAddress` argument MUST be the withdraw address.\r\n    */\r\n    event OnWithdrawAddressUpdate(address withdrawAddress);\r\n    /**\r\n        @dev MUST emit when an is payed with ETH.\r\n        The `orderId` argument MUST be the orderId.\r\n        The `amount` argument MUST be the amount payed in WEI.\r\n    */\r\n    event OnPayedNativeCurrencyOrder(uint256 indexed orderId, uint256 amount);\r\n    /**\r\n        @dev MUST emit when an is payed with a token.\r\n        The `orderId` argument MUST be the orderId.\r\n        The `tokenAddress` argument MUST be the token's contract address.\r\n        The `amount` argument MUST be the amount payed in full DECIMALS of the token.\r\n    */\r\n    event OnPayedTokenOrder(\r\n        uint256 indexed orderId,\r\n        address indexed tokenAddress,\r\n        uint256 amount\r\n    );\r\n    /**\r\n        @dev MUST emit when ETH is withdrawn through withdraw function.\r\n        The `receiver` argument MUST be the receiving address.\r\n        The `amount` argument MUST be the amount payed in WEI.\r\n    */\r\n    event OnEthWithdraw(address indexed receiver, uint256 amount);\r\n    /**\r\n        @dev MUST emit when a token is withdrawn through withdrawToken function.\r\n        The `receiver` argument MUST be the receiving address.\r\n        The `tokenAddress` argument MUST be the token's contract address.\r\n        The `amount` argument MUST be the amount payed in full DECIMALS of the token.\r\n    */\r\n    event OnTokenWithdraw(\r\n        address indexed receiver,\r\n        address indexed tokenAddress,\r\n        uint256 amount\r\n    );\r\n\r\n    /*==============================\r\n    =          FUNCTIONS           =\r\n    ==============================*/\r\n    /**\r\n        @notice Used to pay an open order with ETH.\r\n        @dev Payable function used to pay a created order in ETH. \r\n        @param orderId The orderId\r\n    */\r\n    function payNativeCurrencyOrder(uint256 orderId) external payable;\r\n\r\n    /**\r\n        @notice Used to pay an open order with an allowed ERC20 token.\r\n        @dev Used to pay a created order with an allowed ERC20 token.\r\n        @param orderId      The orderId\r\n        @param tokenAddress The smart contract address of the ERC20 token\r\n        @param amount       The amount of tokens payed\r\n    */\r\n    function payTokenOrder(\r\n        uint256 orderId,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n        @notice Adds or removes a specific ERC20 token for payments.\r\n        @dev Adds or removes the address of an ERC20 contract for valid payment options.\r\n        @param tokenAddress The smart contract address of the ERC20 token\r\n        @param allowed      True or False as the allowence\r\n    */\r\n    function updateAllowedToken(address tokenAddress, bool allowed) external;\r\n\r\n    /**\r\n        @notice Withdraws ETH to the specified withdraw address.\r\n        @dev Withdraws ETH to the specified `_withdrawAddress`.\r\n    */\r\n    function withdraw() external;\r\n\r\n    /**\r\n        @notice Withdraws a token to the specified withdraw address.\r\n        @dev Withdraws a token to the specified `_withdrawAddress`.\r\n        @param tokenAddress The smart contract address of the ERC20 token\r\n    */\r\n    function withdrawToken(address tokenAddress) external;\r\n\r\n    /**\r\n        @notice Updated the withdraw address.\r\n        @dev Updates `_withdrawAddress`.\r\n        @param withdrawAddress The withdraw address\r\n    */\r\n    function updateWithdrawAddress(address payable withdrawAddress) external;\r\n\r\n    /**\r\n        @notice Used to check if a specific token is allowed providing the token's contract address.\r\n        @dev Used to check if a specific token is allowed providing the token's contract address.\r\n        @param tokenAddress The smart contract address of the ERC20 token\r\n        @return             Returns True or False\r\n    */\r\n    function isTokenAllowed(address tokenAddress) external view returns (bool);\r\n\r\n    /**\r\n        @notice Used to check if a specific order is payed already by orderId.\r\n        @dev Used to check if a specific order is payed already by orderId.\r\n        @param orderId  The orderId\r\n        @return         Returns True or False\r\n    */\r\n    function isOrderIdExecuted(uint256 orderId) external view returns (bool);\r\n\r\n    /**\r\n        @notice Gets the withdraw address.\r\n        @dev Gets the `_withdrawAddress`.\r\n        @return Returns the withdraw address\r\n    */\r\n    function getWithdrawAddress() external view returns (address);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor() {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n/**\r\n    @author The Calystral Team\r\n    @title The Registry's Interface\r\n*/\r\ninterface IRegistry is IRegistrableContractState {\r\n    /*==============================\r\n    =           EVENTS             =\r\n    ==============================*/\r\n    /**\r\n        @dev MUST emit when an entry in the Registry is set or updated.\r\n        The `key` argument MUST be the key of the entry which is set or updated.\r\n        The `value` argument MUST be the address of the entry which is set or updated.\r\n    */\r\n    event EntrySet(uint256 indexed key, address value);\r\n    /**\r\n        @dev MUST emit when an entry in the Registry is removed.\r\n        The `key` argument MUST be the key of the entry which is removed.\r\n        The `value` argument MUST be the address of the entry which is removed.\r\n    */\r\n    event EntryRemoved(uint256 indexed key, address value);\r\n\r\n    /*==============================\r\n    =          FUNCTIONS           =\r\n    ==============================*/\r\n    /**\r\n        @notice Sets the MultiSigAdmin contract as Registry entry 1.\r\n        @dev Sets the MultiSigAdmin contract as Registry entry 1.\r\n        @param msaAddress The contract address of the MultiSigAdmin\r\n    */\r\n    function initializeMultiSigAdmin(address msaAddress) external;\r\n\r\n    /**\r\n        @notice Checks if the registry Map contains the key.\r\n        @dev Returns true if the key is in the registry map. O(1).\r\n        @param key  The key to search for\r\n        @return     The boolean result\r\n    */\r\n    function contains(uint256 key) external view returns (bool);\r\n\r\n    /**\r\n        @notice Returns the registry map length.\r\n        @dev Returns the number of key-value pairs in the registry map. O(1).\r\n        @return     The registry map length\r\n    */\r\n    function length() external view returns (uint256);\r\n\r\n    /**\r\n        @notice Returns the key-value pair stored at position `index` in the registry map.\r\n        @dev Returns the key-value pair stored at position `index` in the registry map. O(1).\r\n        Note that there are no guarantees on the ordering of entries inside the\r\n        array, and it may change when more entries are added or removed.\r\n        Requirements:\r\n        - `index` must be strictly less than {length}.\r\n        @param index    The position in the registry map\r\n        @return         The key-value pair as a tuple\r\n    */\r\n    function at(uint256 index) external view returns (uint256, address);\r\n\r\n    /**\r\n        @notice Tries to return the value associated with `key`.\r\n        @dev Tries to return the value associated with `key`.  O(1).\r\n        Does not revert if `key` is not in the registry map.\r\n        @param key    The key to search for\r\n        @return       The key-value pair as a tuple\r\n    */\r\n    function tryGet(uint256 key) external view returns (bool, address);\r\n\r\n    /**\r\n        @notice Returns the value associated with `key`.\r\n        @dev Returns the value associated with `key`.  O(1).\r\n        Requirements:\r\n        - `key` must be in the registry map.\r\n        @param key    The key to search for\r\n        @return       The contract address\r\n    */\r\n    function get(uint256 key) external view returns (address);\r\n\r\n    /**\r\n        @notice Returns all indices, keys, addresses.\r\n        @dev Returns all indices, keys, addresses as three seperate arrays.\r\n        @return Indices, keys, addresses\r\n    */\r\n    function getAll()\r\n        external\r\n        view\r\n        returns (\r\n            uint256[] memory,\r\n            uint256[] memory,\r\n            address[] memory\r\n        );\r\n\r\n    /**\r\n        @notice Adds a key-value pair to a map, or updates the value for an existing\r\n        key.\r\n        @dev Adds a key-value pair to the registry map, or updates the value for an existing\r\n        key. O(1).\r\n        Returns true if the key was added to the registry map, that is if it was not\r\n        already present.\r\n        @param key    The key as an identifier\r\n        @param value  The address of the contract\r\n        @return       Success as a bool\r\n    */\r\n    function set(uint256 key, address value) external returns (bool);\r\n\r\n    /**\r\n        @notice Removes a value from the registry map.\r\n        @dev Removes a value from the registry map. O(1).\r\n        Returns true if the key was removed from the registry map, that is if it was present.\r\n        @param key    The key as an identifier\r\n        @return       Success as a bool\r\n    */\r\n    function remove(uint256 key) external returns (bool);\r\n\r\n    /**\r\n        @notice Sets a contract state to active.\r\n        @dev Sets a contract state to active.\r\n        @param key    The key as an identifier\r\n    */\r\n    function setContractActiveByKey(uint256 key) external;\r\n\r\n    /**\r\n        @notice Sets a contract state to active.\r\n        @dev Sets a contract state to active.\r\n        @param contractAddress The contract's address\r\n    */\r\n    function setContractActiveByAddress(address contractAddress) external;\r\n\r\n    /**\r\n        @notice Sets all contracts within the registry to state active.\r\n        @dev Sets all contracts within the registry to state active.\r\n        Does NOT revert if any contract doesn't implement the RegistrableContractState interface.\r\n        Does NOT revert if it is an externally owned user account.\r\n    */\r\n    function setAllContractsActive() external;\r\n\r\n    /**\r\n        @notice Sets a contract state to inactive.\r\n        @dev Sets a contract state to inactive.\r\n        @param key    The key as an identifier\r\n    */\r\n    function setContractInactiveByKey(uint256 key) external;\r\n\r\n    /**\r\n        @notice Sets a contract state to inactive.\r\n        @dev Sets a contract state to inactive.\r\n        @param contractAddress The contract's address\r\n    */\r\n    function setContractInactiveByAddress(address contractAddress) external;\r\n\r\n    /**\r\n        @notice Sets all contracts within the registry to state inactive.\r\n        @dev Sets all contracts within the registry to state inactive.\r\n        Does NOT revert if any contract doesn't implement the RegistrableContractState interface.\r\n        Does NOT revert if it is an externally owned user account.\r\n    */\r\n    function setAllContractsInactive() external;\r\n}\r\n\r\n/**\r\n    @author The Calystral Team\r\n    @title A helper parent contract: Pausable & Registry\r\n*/\r\ncontract RegistrableContractState is IRegistrableContractState, ERC165 {\r\n    /*==============================\r\n    =          CONSTANTS           =\r\n    ==============================*/\r\n\r\n    /*==============================\r\n    =            STORAGE           =\r\n    ==============================*/\r\n    /// @dev Current contract state\r\n    bool private _isActive;\r\n    /// @dev Current registry pointer\r\n    address private _registryAddress;\r\n\r\n    /*==============================\r\n    =          MODIFIERS           =\r\n    ==============================*/\r\n    modifier isActive() {\r\n        _isActiveCheck();\r\n        _;\r\n    }\r\n\r\n    modifier isAuthorizedAdmin() {\r\n        _isAuthorizedAdmin();\r\n        _;\r\n    }\r\n\r\n    modifier isAuthorizedAdminOrRegistry() {\r\n        _isAuthorizedAdminOrRegistry();\r\n        _;\r\n    }\r\n\r\n    /*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/\r\n    /**\r\n        @notice Creates and initializes the contract.\r\n        @dev Creates and initializes the contract.\r\n        Registers all implemented interfaces.\r\n        Inheriting contracts are INACTIVE by default.\r\n    */\r\n    constructor(address registryAddress) {\r\n        _registryAddress = registryAddress;\r\n\r\n        _registerInterface(type(IRegistrableContractState).interfaceId);\r\n    }\r\n\r\n    /*==============================\r\n    =      PUBLIC & EXTERNAL       =\r\n    ==============================*/\r\n\r\n    /*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/\r\n    function setActive() external override isAuthorizedAdminOrRegistry() {\r\n        _isActive = true;\r\n\r\n        emit Activated();\r\n    }\r\n\r\n    function setInactive() external override isAuthorizedAdminOrRegistry() {\r\n        _isActive = false;\r\n\r\n        emit Inactivated();\r\n    }\r\n\r\n    function setRegistry(address registryAddress)\r\n        external\r\n        override\r\n        isAuthorizedAdmin()\r\n    {\r\n        _registryAddress = registryAddress;\r\n\r\n        try\r\n            _registryContract().supportsInterface(type(IRegistry).interfaceId)\r\n        returns (bool supportsInterface) {\r\n            require(\r\n                supportsInterface,\r\n                \"The provided contract does not implement the Registry interface\"\r\n            );\r\n        } catch {\r\n            revert(\r\n                \"The provided contract does not implement the Registry interface\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /*==============================\r\n    =          VIEW & PURE         =\r\n    ==============================*/\r\n    function getIsActive() public view override returns (bool) {\r\n        return _isActive;\r\n    }\r\n\r\n    function getRegistryAddress() public view override returns (address) {\r\n        return _registryAddress;\r\n    }\r\n\r\n    function getContractAddress(uint256 key)\r\n        public\r\n        view\r\n        override\r\n        returns (address)\r\n    {\r\n        return _registryContract().get(key);\r\n    }\r\n\r\n    /*==============================\r\n    =      INTERNAL & PRIVATE      =\r\n    ==============================*/\r\n    /**\r\n        @dev Returns the target Registry object.\r\n        @return The target Registry object\r\n    */\r\n    function _registryContract() internal view returns (IRegistry) {\r\n        return IRegistry(_registryAddress);\r\n    }\r\n\r\n    /**\r\n        @dev Checks if the contract is in an active state.\r\n        Reverts if the contract is INACTIVE.\r\n    */\r\n    function _isActiveCheck() internal view {\r\n        require(_isActive == true, \"The contract is not active\");\r\n    }\r\n\r\n    /**\r\n        @dev Checks if the msg.sender is the Admin.\r\n        Reverts if msg.sender is not the Admin.\r\n    */\r\n    function _isAuthorizedAdmin() internal view {\r\n        require(msg.sender == getContractAddress(1), \"Unauthorized call\");\r\n    }\r\n\r\n    /**\r\n        @dev Checks if the msg.sender is the Admin or the Registry.\r\n        Reverts if msg.sender is not the Admin or the Registry.\r\n    */\r\n    function _isAuthorizedAdminOrRegistry() internal view {\r\n        require(\r\n            msg.sender == _registryAddress ||\r\n                msg.sender == getContractAddress(1),\r\n            \"Unauthorized call\"\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n    Note: Simple contract to use as base for const vals\r\n*/\r\ncontract CommonConstants {\r\n    bytes4 internal constant ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n    bytes4 internal constant ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\r\n}\r\n\r\n/// @author Stefan George - <stefan.george@consensys.net> - adjusted by the Calystral Team\r\n/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.\r\ncontract MultiSigAdmin is\r\n    IMultiSigAdmin,\r\n    RegistrableContractState,\r\n    CommonConstants\r\n{\r\n    /*==============================\r\n    =          CONSTANTS           =\r\n    ==============================*/\r\n    uint256 public constant MAX_OWNER_COUNT = 50;\r\n\r\n    /*==============================\r\n    =            STORAGE           =\r\n    ==============================*/\r\n    mapping(uint256 => Transaction) public transactions;\r\n    mapping(uint256 => mapping(address => bool)) public confirmations;\r\n    mapping(address => bool) public isOwner;\r\n    address[] public owners;\r\n    uint256 public required;\r\n    uint256 public transactionCount;\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 value;\r\n        bytes data;\r\n        bool executed;\r\n    }\r\n\r\n    /*==============================\r\n    =          MODIFIERS           =\r\n    ==============================*/\r\n    modifier isAuthorizedWallet() {\r\n        require(\r\n            msg.sender == address(this),\r\n            \"Can only be executed by the wallet contract itself.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isAuthorizedOwner(address owner) {\r\n        require(isOwner[owner], \"This address is not an owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier ownerDoesNotExist(address owner) {\r\n        require(!isOwner[owner], \"This address is an owner.\");\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId) {\r\n        require(\r\n            transactions[transactionId].destination != address(0x0),\r\n            \"The transaction destination does not exist.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId, address owner) {\r\n        require(\r\n            confirmations[transactionId][owner],\r\n            \"The owner did not confirm this transactionId yet.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId, address owner) {\r\n        require(\r\n            !confirmations[transactionId][owner],\r\n            \"This owner did confirm this transactionId already.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId) {\r\n        require(\r\n            !transactions[transactionId].executed,\r\n            \"This transactionId is executed already.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != address(0x0), \"The zero-address is not allowed.\");\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\r\n        require(\r\n            ownerCount <= MAX_OWNER_COUNT &&\r\n                _required <= ownerCount &&\r\n                _required != 0 &&\r\n                ownerCount != 0,\r\n            \"This change in requirement is not allowed.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param _required Number of required confirmations.\r\n    /// @param registryAddress The registry address\r\n    constructor(\r\n        address[] memory _owners,\r\n        uint256 _required,\r\n        address registryAddress\r\n    )\r\n        validRequirement(_owners.length, _required)\r\n        RegistrableContractState(registryAddress)\r\n    {\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            require(\r\n                !isOwner[_owners[i]] && _owners[i] != address(0x0),\r\n                \"An owner address is included multiple times or as the zero-address.\"\r\n            );\r\n            isOwner[_owners[i]] = true;\r\n        }\r\n        owners = _owners;\r\n        required = _required;\r\n\r\n        _registerInterface(type(IERC1155TokenReceiver).interfaceId); // 0x4e2312e0\r\n        _registerInterface(type(IMultiSigAdmin).interfaceId);\r\n    }\r\n\r\n    /*==============================\r\n    =      PUBLIC & EXTERNAL       =\r\n    ==============================*/\r\n    receive() external payable override {\r\n        if (msg.value > 0) {\r\n            emit Deposit(msg.sender, msg.value);\r\n        }\r\n    }\r\n\r\n    function submitTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) public override returns (uint256 transactionId) {\r\n        transactionId = addTransaction(destination, value, data);\r\n        confirmTransaction(transactionId);\r\n    }\r\n\r\n    /*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/\r\n    function addOwner(address owner)\r\n        public\r\n        override\r\n        isAuthorizedWallet()\r\n        ownerDoesNotExist(owner)\r\n        notNull(owner)\r\n        validRequirement(owners.length + 1, required)\r\n    {\r\n        isOwner[owner] = true;\r\n        owners.push(owner);\r\n        emit OwnerAddition(owner);\r\n    }\r\n\r\n    function removeOwner(address owner)\r\n        public\r\n        override\r\n        isAuthorizedWallet()\r\n        isAuthorizedOwner(owner)\r\n    {\r\n        isOwner[owner] = false;\r\n        for (uint256 i = 0; i < owners.length - 1; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = owners[owners.length - 1];\r\n                break;\r\n            }\r\n        owners.pop(); //owners.length -= 1;\r\n        if (required > owners.length) changeRequirement(owners.length);\r\n        emit OwnerRemoval(owner);\r\n    }\r\n\r\n    function replaceOwner(address owner, address newOwner)\r\n        public\r\n        override\r\n        isAuthorizedWallet()\r\n        isAuthorizedOwner(owner)\r\n        ownerDoesNotExist(newOwner)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++)\r\n            if (owners[i] == owner) {\r\n                owners[i] = newOwner;\r\n                break;\r\n            }\r\n        isOwner[owner] = false;\r\n        isOwner[newOwner] = true;\r\n        emit OwnerRemoval(owner);\r\n        emit OwnerAddition(newOwner);\r\n    }\r\n\r\n    function changeRequirement(uint256 _required)\r\n        public\r\n        override\r\n        isAuthorizedWallet()\r\n        validRequirement(owners.length, _required)\r\n    {\r\n        required = _required;\r\n        emit RequirementChange(_required);\r\n    }\r\n\r\n    function confirmTransaction(uint256 transactionId)\r\n        public\r\n        override\r\n        isAuthorizedOwner(msg.sender)\r\n        transactionExists(transactionId)\r\n        notConfirmed(transactionId, msg.sender)\r\n    {\r\n        confirmations[transactionId][msg.sender] = true;\r\n        emit Confirmation(msg.sender, transactionId);\r\n        executeTransaction(transactionId);\r\n    }\r\n\r\n    function revokeConfirmation(uint256 transactionId)\r\n        public\r\n        override\r\n        isAuthorizedOwner(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        confirmations[transactionId][msg.sender] = false;\r\n        emit Revocation(msg.sender, transactionId);\r\n    }\r\n\r\n    function executeTransaction(uint256 transactionId)\r\n        public\r\n        override\r\n        isAuthorizedOwner(msg.sender)\r\n        confirmed(transactionId, msg.sender)\r\n        notExecuted(transactionId)\r\n    {\r\n        if (isConfirmed(transactionId)) {\r\n            Transaction storage txn = transactions[transactionId];\r\n            txn.executed = true;\r\n            if (\r\n                external_call(\r\n                    txn.destination,\r\n                    txn.value,\r\n                    txn.data.length,\r\n                    txn.data\r\n                )\r\n            ) {\r\n                emit Execution(transactionId);\r\n            } else {\r\n                emit ExecutionFailure(transactionId);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*==============================\r\n    =          VIEW & PURE         =\r\n    ==============================*/\r\n    function isConfirmed(uint256 transactionId)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (confirmations[transactionId][owners[i]]) count += 1;\r\n            if (count == required) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getConfirmationCount(uint256 transactionId)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i = 0; i < owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) count += 1;\r\n    }\r\n\r\n    function getTransactionCount(bool pending, bool executed)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 count)\r\n    {\r\n        for (uint256 i = 0; i < transactionCount; i++)\r\n            if (\r\n                (pending && !transactions[i].executed) ||\r\n                (executed && transactions[i].executed)\r\n            ) count += 1;\r\n    }\r\n\r\n    function getOwners() public view override returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function getRequired() public view override returns (uint256) {\r\n        return required;\r\n    }\r\n\r\n    function getConfirmations(uint256 transactionId)\r\n        public\r\n        view\r\n        override\r\n        returns (address[] memory _confirmations)\r\n    {\r\n        address[] memory confirmationsTemp = new address[](owners.length);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i = 0; i < owners.length; i++)\r\n            if (confirmations[transactionId][owners[i]]) {\r\n                confirmationsTemp[count] = owners[i];\r\n                count += 1;\r\n            }\r\n        _confirmations = new address[](count);\r\n        for (i = 0; i < count; i++) _confirmations[i] = confirmationsTemp[i];\r\n    }\r\n\r\n    function getTransactionIds(\r\n        uint256 from,\r\n        uint256 to,\r\n        bool pending,\r\n        bool executed\r\n    ) public view override returns (uint256[] memory _transactionIds) {\r\n        uint256[] memory transactionIdsTemp = new uint256[](transactionCount);\r\n        uint256 count = 0;\r\n        uint256 i;\r\n        for (i = 0; i < transactionCount; i++)\r\n            if (\r\n                (pending && !transactions[i].executed) ||\r\n                (executed && transactions[i].executed)\r\n            ) {\r\n                transactionIdsTemp[count] = i;\r\n                count += 1;\r\n            }\r\n        _transactionIds = new uint256[](to - from);\r\n        for (i = from; i < to; i++)\r\n            _transactionIds[i - from] = transactionIdsTemp[i];\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return ERC1155_ACCEPTED;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return ERC1155_BATCH_ACCEPTED;\r\n    }\r\n\r\n    /*==============================\r\n    =      INTERNAL & PRIVATE      =\r\n    ==============================*/\r\n    // call has been separated into its own function in order to take advantage\r\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\r\n    function external_call(\r\n        address destination,\r\n        uint256 value,\r\n        uint256 dataLength,\r\n        bytes memory data\r\n    ) internal returns (bool) {\r\n        bool result;\r\n        assembly {\r\n            let x := mload(0x40) // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\r\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\r\n            result := call(\r\n                sub(gas(), 34710), // 34710 is the value that solidity is currently emitting\r\n                // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\r\n                // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\r\n                destination,\r\n                value,\r\n                d,\r\n                dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\r\n                x,\r\n                0 // Output is ignored, therefore the output size is zero\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\r\n    /// @param destination Transaction target address.\r\n    /// @param value Transaction ether value.\r\n    /// @param data Transaction data payload.\r\n    /// @return transactionId Returns transaction ID.\r\n    function addTransaction(\r\n        address destination,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal notNull(destination) returns (uint256 transactionId) {\r\n        transactionId = transactionCount;\r\n        transactions[transactionId] = Transaction({\r\n            destination: destination,\r\n            value: value,\r\n            data: data,\r\n            executed: false\r\n        });\r\n        transactionCount += 1;\r\n        emit Submission(transactionId);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/// @title Multisignature Payments wallet\r\n/// @author The Calystral Team\r\ncontract MultiSigPayments is IMultiSigPayments, MultiSigAdmin {\r\n    /*==============================\r\n    =          CONSTANTS           =\r\n    ==============================*/\r\n\r\n    /*==============================\r\n    =            STORAGE           =\r\n    ==============================*/\r\n    /// @dev token address => allowance\r\n    mapping(address => bool) private _tokenAddressIsAllowed;\r\n    /// @dev orderId => execution\r\n    mapping(uint256 => bool) private _orderIdIsExecuted;\r\n    /// @dev The address where any withdraw value is send to\r\n    address payable private _withdrawAddress;\r\n\r\n    /*==============================\r\n    =          MODIFIERS           =\r\n    ==============================*/\r\n\r\n    /*==============================\r\n    =          CONSTRUCTOR         =\r\n    ==============================*/\r\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\r\n    /// @param _owners List of initial owners.\r\n    /// @param allowedTokens List of allowed tokens.\r\n    /// @param _required Number of required confirmations.\r\n    /// @param registryAddress The registry address\r\n    /// @param withdrawAddress The withdraw address\r\n    constructor(\r\n        address[] memory _owners,\r\n        address[] memory allowedTokens,\r\n        uint256 _required,\r\n        address registryAddress,\r\n        address payable withdrawAddress\r\n    ) MultiSigAdmin(_owners, _required, registryAddress) {\r\n        require(\r\n            withdrawAddress != address(0),\r\n            \"A withdraw address is required\"\r\n        );\r\n\r\n        for (uint256 index = 0; index < allowedTokens.length; index++) {\r\n            _updateAllowedToken(allowedTokens[index], true);\r\n        }\r\n\r\n        _updateWithdrawAddress(withdrawAddress);\r\n\r\n        _registerInterface(type(IMultiSigPayments).interfaceId);\r\n    }\r\n\r\n    /*==============================\r\n    =      PUBLIC & EXTERNAL       =\r\n    ==============================*/\r\n    function payNativeCurrencyOrder(uint256 orderId)\r\n        external\r\n        payable\r\n        override\r\n        isActive()\r\n    {\r\n        require(\r\n            !_orderIdIsExecuted[orderId],\r\n            \"This order is executed already.\"\r\n        );\r\n        _orderIdIsExecuted[orderId] = true;\r\n        OnPayedNativeCurrencyOrder(orderId, msg.value);\r\n    }\r\n\r\n    function payTokenOrder(\r\n        uint256 orderId,\r\n        address tokenAddress,\r\n        uint256 amount\r\n    ) external override isActive() {\r\n        require(\r\n            _tokenAddressIsAllowed[tokenAddress],\r\n            \"This token is not allowed.\"\r\n        );\r\n        require(\r\n            !_orderIdIsExecuted[orderId],\r\n            \"This order is executed already.\"\r\n        );\r\n        IERC20 tokenContract = IERC20(tokenAddress);\r\n\r\n        bool success =\r\n            tokenContract.transferFrom(msg.sender, address(this), amount);\r\n        require(success, \"Paying the order with tokens failed.\");\r\n\r\n        _orderIdIsExecuted[orderId] = true;\r\n        OnPayedTokenOrder(orderId, tokenAddress, amount);\r\n    }\r\n\r\n    /*==============================\r\n    =          RESTRICTED          =\r\n    ==============================*/\r\n    function updateAllowedToken(address tokenAddress, bool allowed)\r\n        public\r\n        override\r\n        isAuthorizedWallet()\r\n    {\r\n        _updateAllowedToken(tokenAddress, allowed);\r\n    }\r\n\r\n    function updateWithdrawAddress(address payable withdrawAddress)\r\n        public\r\n        override\r\n        isAuthorizedWallet()\r\n    {\r\n        _updateWithdrawAddress(withdrawAddress);\r\n    }\r\n\r\n    function withdraw() external override isAuthorizedOwner(msg.sender) {\r\n        uint256 amount = address(this).balance;\r\n        _withdrawAddress.transfer(amount);\r\n\r\n        emit OnEthWithdraw(_withdrawAddress, amount);\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress)\r\n        external\r\n        override\r\n        isAuthorizedOwner(msg.sender)\r\n    {\r\n        IERC20 erc20Contract = IERC20(tokenAddress);\r\n        uint256 amount = erc20Contract.balanceOf(address(this));\r\n        erc20Contract.transfer(_withdrawAddress, amount);\r\n\r\n        emit OnTokenWithdraw(_withdrawAddress, tokenAddress, amount);\r\n    }\r\n\r\n    /*==============================\r\n    =          VIEW & PURE         =\r\n    ==============================*/\r\n    function isTokenAllowed(address tokenAddress)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _tokenAddressIsAllowed[tokenAddress];\r\n    }\r\n\r\n    function isOrderIdExecuted(uint256 orderId)\r\n        public\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        return _orderIdIsExecuted[orderId];\r\n    }\r\n\r\n    function getWithdrawAddress() public view override returns (address) {\r\n        return _withdrawAddress;\r\n    }\r\n\r\n    /*==============================\r\n    =      INTERNAL & PRIVATE      =\r\n    ==============================*/\r\n    function _updateWithdrawAddress(address payable withdrawAddress) private {\r\n        _withdrawAddress = withdrawAddress;\r\n        OnWithdrawAddressUpdate(withdrawAddress);\r\n    }\r\n\r\n    function _updateAllowedToken(address tokenAddress, bool allowed) private {\r\n        _tokenAddressIsAllowed[tokenAddress] = allowed;\r\n        OnTokenUpdate(tokenAddress, allowed);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"allowedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Inactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnEthWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnPayedNativeCurrencyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnPayedTokenOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"OnTokenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnTokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"OnWithdrawAddressUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"isOrderIdExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"payNativeCurrencyOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payTokenOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"updateWithdrawAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MultiSigPayments", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "1337", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000e9f589b4b59e17d85527b3814c3cfcc3d863472e00000000000000000000000022de936854e40350d01f47724fd047d4de0f26a1000000000000000000000000000000000000000000000000000000000000000300000000000000000000000022de936854e40350d01f47724fd047d4de0f26a100000000000000000000000099723a4a9d9b3c3cecba16e2e3ed924abd1d55f6000000000000000000000000b224cb543fa10cf2983c557c029cd874c1ace0cc0000000000000000000000000000000000000000000000000000000000000008000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000e09fabb73bd3ade0a17ecc321fd13a19e81ce820000000000000000000000002170ed0880ac9a755fd29b2688956bd959f933f80000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2143822cc5a06f62c9b1d75ab52f7fc37cf1ef04ba3f5dbc79542677942665e7"}