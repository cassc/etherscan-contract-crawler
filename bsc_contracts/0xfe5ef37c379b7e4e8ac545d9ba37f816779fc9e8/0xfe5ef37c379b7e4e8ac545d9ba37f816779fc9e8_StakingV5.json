{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface mintToken {\\n    function mint(address _to, uint256 _amount) external returns (bool);\\n}\\n\\ncontract StakingV5 is Ownable, ReentrancyGuard {\\n    //test\\n    address public sgtAddress =\\n        address(0xd7c8c78245C0b5fEde797f899C77CD6A18d4dd40); //busd 0xD6055D2543BB3A5e60ca7b40c7c369B55e337098\\n    address public eneAddress =\\n        address(0x4a71a0DE094b2afbFe88FdB6b2a3825B25B2dbCC);\\n    address public lpAddress =\\n        address(0xd7c8c78245C0b5fEde797f899C77CD6A18d4dd40);\\n    //test net\\n    // address private constant uniswapRouterAddress = address(0x07d090e7FcBC6AFaA507A3441C7c5eE507C457e6);\\n    //main net\\n\\n    struct plan {\\n        bool isOpen;\\n        uint256 rate;\\n        uint256 rateBase;\\n        uint256 lockDays;\\n        address tokenAddress; //reward\\n    }\\n    mapping(uint256 => plan) plans;\\n    struct order {\\n        bool isExist;\\n        uint256 lpNumber;\\n        uint256 buyTime;\\n        uint256 endTime;\\n        uint256 unlockTime;\\n        uint256 received;\\n        uint256 reward;\\n        uint256 rate;\\n        uint256 rateBase;\\n        address tokenAddress; //reward\\n    }\\n    mapping(address => mapping(uint256 => mapping(uint256 => order))) userOrders;\\n    mapping(address => mapping(uint256 => uint256)) public orderIds;\\n\\n    struct userInfo {\\n        uint256 lp;\\n        uint256 receivedSgt;\\n        uint256 receivedEne;\\n    }\\n\\n    mapping(address => userInfo) public userInfos;\\n    uint256 public totalLp = 0;\\n\\n    constructor() {\\n        plans[1] = plan(true, 5, 100, 100, sgtAddress);\\n        plans[2] = plan(true, 11, 100, 200, sgtAddress);\\n        plans[3] = plan(true, 20, 100, 300, sgtAddress);\\n\\n        plans[4] = plan(true, 50, 100, 100, eneAddress);\\n    }\\n\\n    function setPlan(\\n        uint256 id,\\n        bool _isOpen,\\n        uint256 _rate,\\n        uint256 _rateBase,\\n        uint256 _lockDays,\\n        address _tokenAddress\\n    ) external onlyOwner {\\n        plans[id] = plan(_isOpen, _rate, _rateBase, _lockDays, _tokenAddress);\\n    }\\n\\n    function setSgtAddress(address _sgtAddress) external onlyOwner {\\n        sgtAddress = _sgtAddress;\\n    }\\n\\n    function setEneAddress(address _eneAddress) external onlyOwner {\\n        eneAddress = _eneAddress;\\n    }\\n\\n    function setLpAddress(address _lpAddress) external onlyOwner {\\n        lpAddress = _lpAddress;\\n    }\\n\\n    function getPlan(uint256 id) public view returns (plan memory) {\\n        return plans[id];\\n    }\\n\\n    function getOrder(\\n        address userAddress,\\n        uint256 planId,\\n        uint256 id\\n    ) public view returns (order memory) {\\n        return userOrders[userAddress][planId][id];\\n    }\\n\\n    // the next order id\\n    function getOrderNum(\\n        address userAddress,\\n        uint256 planId\\n    ) public view returns (uint256) {\\n        return orderIds[userAddress][planId];\\n    }\\n\\n    event PledgeLp(\\n        address user,\\n        uint256 planId,\\n        uint256 amount,\\n        uint256 time,\\n        uint256 unlockTime\\n    );\\n\\n    function pledgeLp(uint256 planId, uint256 amount) public nonReentrant {\\n        require(msg.sender == tx.origin, \\\"no contract\\\");\\n        require(plans[planId].isOpen, \\\"plan not open\\\");\\n        require(amount > 0, \\\"amount less\\\");\\n        require(\\n            IERC20(lpAddress).transferFrom(\\n                address(msg.sender),\\n                address(this),\\n                amount\\n            ),\\n            \\\"transfer pledgeLP failed\\\"\\n        );\\n\\n        //create order\\n\\n        uint256 unlockTime = block.timestamp + plans[planId].lockDays * 86400;\\n        userOrders[msg.sender][planId][orderIds[msg.sender][planId]] = order(\\n            true,\\n            amount,\\n            block.timestamp,\\n            0,\\n            unlockTime,\\n            0,\\n            0,\\n            plans[planId].rate,\\n            plans[planId].rateBase,\\n            plans[planId].tokenAddress\\n        );\\n        orderIds[msg.sender][planId]++;\\n\\n        //total\\n        userInfos[msg.sender].lp += amount;\\n        totalLp += amount;\\n\\n        emit PledgeLp(msg.sender, planId, amount, block.timestamp, unlockTime);\\n    }\\n\\n    event UnpledgeLp(address user, uint256 orderId, uint256 time);\\n\\n    function unpledgeLp(uint256 planId, uint256 orderId) public nonReentrant {\\n        require(msg.sender == tx.origin, \\\"no contract\\\");\\n        order storage order_info = userOrders[msg.sender][planId][orderId];\\n        require(order_info.isExist, \\\"order not exist\\\");\\n        require(order_info.endTime == 0, \\\"order is end\\\");\\n        require(block.timestamp >= order_info.unlockTime, \\\"order is lock\\\");\\n\\n        require(\\n            IERC20(lpAddress).transfer(\\n                address(msg.sender),\\n                order_info.lpNumber\\n            ),\\n            \\\"transfer pledgeLP failed\\\"\\n        );\\n\\n        order_info.endTime = block.timestamp;\\n\\n        //total\\n        userInfos[msg.sender].lp -= order_info.lpNumber;\\n        totalLp -= order_info.lpNumber;\\n\\n        emit UnpledgeLp(msg.sender, orderId, block.timestamp);\\n    }\\n\\n    function earn(\\n        address userAddress,\\n        uint256 planId,\\n        uint256 orderId\\n    ) public view returns (uint256) {\\n        order storage order_info = userOrders[userAddress][planId][orderId];\\n        if (order_info.isExist == false) {\\n            return 0;\\n        }\\n        if (block.timestamp < order_info.unlockTime) {\\n            return 0;\\n        }\\n        return (order_info.lpNumber * order_info.rate) / order_info.rateBase;\\n    }\\n\\n    event GetReward(\\n        address user,\\n        uint256 orderId,\\n        uint256 amount,\\n        uint256 time\\n    );\\n\\n    function getReward(uint256 planId, uint256 orderId) public nonReentrant {\\n        require(msg.sender == tx.origin, \\\"no contract\\\");\\n        order storage order_info = userOrders[msg.sender][planId][orderId];\\n        require(order_info.isExist, \\\"order not exist\\\");\\n        require(block.timestamp > order_info.unlockTime, \\\"locktime\\\");\\n        require(order_info.received == 0, \\\"claimed already\\\");\\n        uint256 reward = earn(msg.sender, planId, orderId);\\n        require(reward > 0, \\\"no reward\\\");\\n        address rewardToken = order_info.tokenAddress;\\n        if (rewardToken == sgtAddress) {\\n            require(\\n                IERC20(order_info.tokenAddress).transfer(\\n                    address(msg.sender),\\n                    reward\\n                ),\\n                \\\"transfer reward token failed\\\"\\n            );\\n            userInfos[msg.sender].receivedSgt += reward;\\n        } else {\\n            require(\\n                mintToken(order_info.tokenAddress).mint(\\n                    address(msg.sender),\\n                    reward\\n                ),\\n                \\\"mint failed\\\"\\n            );\\n            userInfos[msg.sender].receivedEne += reward;\\n        }\\n\\n        order_info.received += reward;\\n\\n        emit GetReward(msg.sender, orderId, reward, block.timestamp);\\n    }\\n\\n    function gettoken(address tokenAddress) public onlyOwner {\\n        require(\\n            IERC20(tokenAddress).transfer(\\n                msg.sender,\\n                IERC20(tokenAddress).balanceOf(address(this))\\n            ),\\n            \\\"transfer token failed\\\"\\n        );\\n    }\\n\\n    event Relock(\\n        address user,\\n        uint256 planId,\\n        uint256 orderId,\\n        uint256 amount,\\n        uint256 time\\n    );\\n\\n    function relock(uint256 planId, uint256 orderId) external nonReentrant {\\n        require(msg.sender == tx.origin, \\\"no contract\\\");\\n        order storage order_info = userOrders[msg.sender][planId][orderId];\\n        require(order_info.isExist, \\\"order not exist\\\");\\n        require(order_info.endTime == 0, \\\"order is end\\\");\\n        require(block.timestamp >= order_info.unlockTime, \\\"order is lock\\\");\\n        require(plans[planId].isOpen, \\\"plan not open\\\");\\n\\n        // end order\\n        order_info.endTime = block.timestamp;\\n\\n        //create order\\n        uint256 amount = order_info.lpNumber;\\n        uint256 unlockTime = block.timestamp + plans[planId].lockDays * 86400;\\n        userOrders[msg.sender][planId][orderIds[msg.sender][planId]] = order(\\n            true,\\n            amount,\\n            block.timestamp,\\n            0,\\n            unlockTime,\\n            0,\\n            0,\\n            plans[planId].rate,\\n            plans[planId].rateBase,\\n            plans[planId].tokenAddress\\n        );\\n        orderIds[msg.sender][planId]++;\\n        emit Relock(msg.sender, planId, orderId, amount, block.timestamp);\\n    }\\n\\n    function writeGetRewardByOwner(\\n        address _address,\\n        uint256 _planId,\\n        uint256 _orderId,\\n        order memory _order\\n    ) public onlyOwner {\\n        writeUserOrders(_address, _planId, _orderId, _order);\\n        if (_order.tokenAddress == sgtAddress) {\\n            userInfos[_address].receivedSgt += _order.received;\\n        } else {\\n            userInfos[_address].receivedEne += _order.received;\\n        }\\n        emit GetReward(_address, _orderId, _order.received, _order.endTime);\\n    }\\n\\n    function writeUnPledgeByOwner(\\n        address _address,\\n        uint256 _planId,\\n        uint256 _orderId,\\n        order memory _order\\n    ) public onlyOwner {\\n        writeUserOrders(_address, _planId, _orderId, _order);\\n        //total\\n        userInfos[_address].lp += _order.lpNumber;\\n        totalLp -= _order.lpNumber;\\n        emit UnpledgeLp(_address, _orderId, _order.endTime);\\n    }\\n\\n    function writeUserOrders(\\n        address _address,\\n        uint256 _plainId,\\n        uint256 _orderId,\\n        order memory _order\\n    ) public onlyOwner {\\n        userOrders[_address][_plainId][_orderId] = _order;\\n    }\\n\\n    function writePledgeByOwner(\\n        address _address,\\n        uint256 _planId,\\n        order memory _order\\n    ) public onlyOwner {\\n        uint256 currentOrderId = getOrderNum(_address, _planId);\\n        writeUserOrders(_address, _planId, currentOrderId, _order);\\n        orderIds[_address][_planId]++;\\n        uint amount = _order.lpNumber;\\n        userInfos[_address].lp += amount;\\n        totalLp += amount;\\n\\n        emit PledgeLp(\\n            msg.sender,\\n            _planId,\\n            amount,\\n            _order.buyTime,\\n            _order.unlockTime\\n        );\\n    }\\n\\n    function addOrdersBatchByOwner(\\n        address[] memory _addresses,\\n        uint256[] memory _planIds,\\n        uint256[] memory _orderIds,\\n        order[] memory _orders\\n    ) public onlyOwner {\\n        require(\\n            _addresses.length == _planIds.length &&\\n                _planIds.length == _orders.length &&\\n                _orderIds.length == _orders.length,\\n            \\\"Input arrays length mismatch\\\"\\n        );\\n\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            userOrders[_addresses[i]][_planIds[i]][_orderIds[i]] = _orders[i];\\n        }\\n    }\\n\\n    function addUserInfosBatchByOwner(\\n        address[] memory _addresses,\\n        userInfo[] memory _userInfos\\n    ) public onlyOwner {\\n        require(\\n            _addresses.length == _userInfos.length,\\n            \\\"Input arrays length mismatch\\\"\\n        );\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            userInfos[_addresses[i]] = _userInfos[i];\\n        }\\n    }\\n\\n     function addOrderIdsBatchByOwner(\\n        address[] memory _addresses,\\n        uint256[] memory _planIds,\\n        uint256[] memory _orderIds\\n    ) public onlyOwner {\\n        require(\\n            _addresses.length == _orderIds.length && _planIds.length == _orderIds.length,\\n            \\\"Input arrays length mismatch\\\"\\n        );\\n        for (uint i = 0; i < _addresses.length; i++) {\\n            orderIds[_addresses[i]][_planIds[i]] = _orderIds[i];\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"GetReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"PledgeLp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Relock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"UnpledgeLp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_planIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_orderIds\",\"type\":\"uint256[]\"}],\"name\":\"addOrderIdsBatchByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_planIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_orderIds\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.order[]\",\"name\":\"_orders\",\"type\":\"tuple[]\"}],\"name\":\"addOrdersBatchByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedSgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedEne\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingV5.userInfo[]\",\"name\":\"_userInfos\",\"type\":\"tuple[]\"}],\"name\":\"addUserInfosBatchByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"earn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"}],\"name\":\"getOrderNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.plan\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"gettoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pledgeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eneAddress\",\"type\":\"address\"}],\"name\":\"setEneAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"name\":\"setLpAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sgtAddress\",\"type\":\"address\"}],\"name\":\"setSgtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sgtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"unpledgeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedSgt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedEne\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"writeGetRewardByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"writePledgeByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"writeUnPledgeByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_plainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lpNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateBase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct StakingV5.order\",\"name\":\"_order\",\"type\":\"tuple\"}],\"name\":\"writeUserOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingV5", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}