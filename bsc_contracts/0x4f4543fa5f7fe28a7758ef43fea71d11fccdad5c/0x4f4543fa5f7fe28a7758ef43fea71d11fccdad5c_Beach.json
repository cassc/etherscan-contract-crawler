{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address \r\n    sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address token0, address token1) external view returns (address);\r\n\r\n}\r\n\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _previousOwner = _owner ;\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function previousOwner() public view returns (address) {\r\n        return _previousOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract Beach is Context, IBEP20, Ownable {\r\n    \r\n    struct FeeExcluded { \r\n            bool bothFee;\r\n            bool buyFeeOnly;\r\n            bool sellFeeOnly;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IPancakeRouter02 private pancakeV2Router;\r\n    address public pancakeswapPair;\r\n\r\n\r\n    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address public previousRouterAddress;\r\n\r\n\r\n    string private constant _name = \"Beach Token\";\r\n    string private constant _symbol = \"BEACH\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 10000000000 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public _BEACHBurned;\r\n    bool public tradeAllowed = false;\r\n    bool private liquidityAdded = false;\r\n    bool private inSwap = false;\r\n    bool public swapEnabled = false;\r\n    bool public feeEnabled = false;\r\n    \r\n    bool public buyFeeEnabled = false;\r\n    bool public sellFeeEnabled = false;\r\n    \r\n\r\n    bool private limitTX = false;\r\n    uint256 private _maxTxAmount = _tTotal;\r\n\r\n    uint256 private _contractFee ;\r\n    uint256 private _tempContractFee ;\r\n    \r\n    uint256 private _burn ;\r\n    uint256 private _boostFee ;\r\n    uint256 private _futureFee ;\r\n    uint256 private _conduitFee; \r\n\r\n\r\n    uint256 private _buyContractFee;\r\n    uint256 private _buyBurn;\r\n    uint256 private _buyBoostFee ;\r\n    uint256 private _buyFutureFee ;\r\n    uint256 private _buyConduitFee ;\r\n\r\n\r\n    uint256 private _sellContractFee;\r\n    uint256 private _sellBurn;\r\n    uint256 private _sellBoostFee ;\r\n    uint256 private _sellFutureFee ;\r\n    uint256 private _sellConduitFee ;\r\n    \r\n\r\n    uint public currentBuyFee ;\r\n    uint public currentSellFee ;\r\n\r\n\r\n    uint256 private _maxBuyAmount;\r\n    address payable private _development;\r\n    address payable private _boost;\r\n    address payable private _conduitAddress;\r\n\r\n\r\n    \r\n    address public targetToken = 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3; \r\n    address public boostFund = 0xa638F4Bb8202049eb4A6782511c3b8A64A2F90a1;\r\n\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => FeeExcluded) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isBlacklisted;\r\n\r\n    struct User {\r\n        uint256 buy;\r\n        uint256 sell;\r\n        bool exists;\r\n    }\r\n\r\n    event MaxBuyAmountUpdated(uint _maxBuyAmount);\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    \r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n\r\n    }\r\n\r\n    constructor(address payable addr1, address payable addr2,address payable addr3 ,address addr4) {\r\n        _development = addr1;\r\n        _boost = addr2;\r\n        _conduitAddress = addr3;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        _isExcludedFromFee[owner()] = FeeExcluded(true,true,true);\r\n        _isExcludedFromFee[address(this)] = FeeExcluded(true,true,true);\r\n        _isExcludedFromFee[_development] = FeeExcluded(true,true,true);\r\n        _isExcludedFromFee[_boost] = FeeExcluded(true,true,true);\r\n        _isExcludedFromFee[addr4] = FeeExcluded(true,true,true);\r\n        _isExcludedFromFee[_conduitAddress] = FeeExcluded(true,true,true);\r\n\r\n\r\n        IPancakeRouter02 _pancakeV2Router = IPancakeRouter02(routerAddress);\r\n        pancakeV2Router = _pancakeV2Router;\r\n        pancakeswapPair = IPancakeFactory(pancakeV2Router.factory()).createPair(address(this), pancakeV2Router.WETH());\r\n        _isExcludedFromFee[routerAddress] = FeeExcluded(true,true,true);\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n\r\n        _sellContractFee = 12;\r\n        _sellBurn = 3; \r\n        _sellConduitFee = _sellContractFee.div(3);\r\n        _tempContractFee = 9;\r\n        _sellBoostFee = _tempContractFee.div(4); \r\n        _sellFutureFee = _tempContractFee.div(1);\r\n        currentSellFee = 15;\r\n        sellFeeEnabled = true;\r\n\r\n\r\n\r\n        _buyContractFee = 8; \r\n        _buyBurn = 2;\r\n         _buyConduitFee = _buyContractFee.div(2);\r\n        _tempContractFee = 6;\r\n        _buyBoostFee = _tempContractFee.div(2); \r\n        _buyFutureFee = _tempContractFee.div(2);\r\n        currentBuyFee = 10;\r\n        buyFeeEnabled = true;\r\n\r\n\r\n\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function setTargetAddress(address target_adr) external onlyOwner {\r\n        targetToken = target_adr;\r\n    }\r\n\r\n    function changeDevelopmentAddress(address payable _addy) external onlyOwner {\r\n        _development = _addy;\r\n        _isExcludedFromFee[_development] = FeeExcluded(true,true,true);\r\n\r\n    }\r\n\r\n    function changeBoostAddress(address payable _addy) external onlyOwner {        \r\n        _boost = _addy;\r\n        _isExcludedFromFee[_boost] = FeeExcluded(true,true,true);\r\n    }\r\n    \r\n    function changeConduitAddress(address payable _address) external onlyOwner {        \r\n        _conduitAddress = _address;\r\n        _isExcludedFromFee[_conduitAddress] = FeeExcluded(true,true,true);\r\n    }\r\n\r\n    function setExcludeFromBothFees(address _address) external  onlyOwner {\r\n        _isExcludedFromFee[_address] = FeeExcluded(true,true,true);\r\n    }\r\n    \r\n    function setExcludeFromBuyFeeOnlyFees(address _address) external  onlyOwner {\r\n        _isExcludedFromFee[_address] = FeeExcluded(false,true,false);\r\n    }\r\n\r\n    function setExcludeFromSellFeeOnlyFees(address _address) external  onlyOwner {\r\n        _isExcludedFromFee[_address] = FeeExcluded(false,false,true);\r\n    }\r\n\r\n    function setIncludeInFees(address _address) external  onlyOwner {\r\n        _isExcludedFromFee[_address] = FeeExcluded(false,false,false);\r\n    }\r\n\r\n    function checkExcludedAddress(address _address) public view returns(bool bothFee,bool buyFeeOnly,bool sellFeeOnly){\r\n       FeeExcluded memory feeObj = _isExcludedFromFee[_address];\r\n       return (feeObj.bothFee,feeObj.buyFeeOnly,feeObj.sellFeeOnly);\r\n\r\n    }\r\n\r\n\r\n\r\n    function setAddressIsBlackListed(address _address, bool _bool) external onlyOwner {\r\n        _isBlacklisted[_address] = _bool;\r\n    }\r\n\r\n    function viewIsBlackListed(address _address) public view returns(bool) {\r\n        return _isBlacklisted[_address];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function setFeeEnabled(bool enable) external onlyOwner {\r\n        feeEnabled = enable;\r\n    }\r\n\r\n    \r\n    function enableBuyFee() external onlyOwner {\r\n        buyFeeEnabled = true;\r\n    }\r\n\r\n    function disableBuyFee() external onlyOwner {\r\n        buyFeeEnabled = false;\r\n    }\r\n\r\n    function enableSellFee() external onlyOwner {\r\n        sellFeeEnabled = true;\r\n    }\r\n\r\n    function disableSellFee() external onlyOwner {\r\n        sellFeeEnabled = false;\r\n    }\r\n\r\n    function setLimitTx(bool enable) external onlyOwner {\r\n        limitTX = enable;\r\n    }\r\n\r\n    function enableTrading(bool enable) external onlyOwner {\r\n        require(liquidityAdded);\r\n        tradeAllowed = enable;\r\n    }\r\n\r\n    function changeRouterAddress(address _addr) external onlyOwner {\r\n        previousRouterAddress = routerAddress;\r\n        routerAddress = _addr;\r\n        _isExcludedFromFee[previousRouterAddress] = FeeExcluded(false,false,false);\r\n\r\n\r\n        IPancakeRouter02 _pancakeV2Router = IPancakeRouter02(routerAddress);\r\n        pancakeV2Router = _pancakeV2Router;    \r\n        _isExcludedFromFee[routerAddress] = FeeExcluded(true,true,true);\r\n    }\r\n\r\n    \r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        \r\n        _approve(address(this), address(pancakeV2Router), _tTotal);\r\n        pancakeV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        swapEnabled = true;\r\n        liquidityAdded = true;\r\n        feeEnabled = true;\r\n        tradeAllowed  = true;\r\n        limitTX = true;\r\n        _maxTxAmount = 100000000 * 10**9; \r\n        _maxBuyAmount = 20000000 * 10**9; \r\n        IBEP20(pancakeswapPair).approve(address(pancakeV2Router),type(uint256).max);\r\n    }\r\n\r\n\r\n    function manualSwapTokensForEth() external onlyOwner() {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n\r\n    function manualDistributeETH() external onlyOwner() {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        _boost.transfer(contractETHBalance); \r\n\r\n    }\r\n\r\n    function manualSwapEthForTargetToken(uint amount) external onlyOwner() {\r\n        swapETHfortargetToken(amount);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Amount must be greater than 0\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        emit MaxTxAmountUpdated(_maxTxAmount);\r\n    }\r\n\r\n\r\n    function amountInPool() public view returns (uint) {\r\n        return balanceOf(pancakeswapPair);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal,\"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        bool  chargeTax = true;\r\n        bool _exludeFee = false;\r\n    \r\n        if (from != owner() && to != owner() && !_isExcludedFromFee[from].bothFee && !_isExcludedFromFee[to].bothFee) {\r\n            require(tradeAllowed);\r\n            require(!_isBlacklisted[from] && !_isBlacklisted[to]);\r\n\r\n            if (from == pancakeswapPair && to != address(pancakeV2Router)) {\r\n                if (limitTX) {\r\n                    require(amount <= _maxTxAmount,\"Amount is greater then maxTxAmount\");\r\n                }\r\n\r\n                chargeTax = buyFeeEnabled;\r\n                setBuyFeeOnTrancation();\r\n                _exludeFee = _isExcludedFromFee[to].buyFeeOnly;\r\n                \r\n\r\n                uint contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    swapETHfortargetToken(address(this).balance);\r\n                }\r\n            }\r\n\r\n            if(to == address(pancakeswapPair) || to == address(pancakeV2Router) ) {\r\n                \r\n                chargeTax = sellFeeEnabled;\r\n                setSellFeeOnTrancation();\r\n                _exludeFee = _isExcludedFromFee[from].sellFeeOnly;\r\n\r\n\r\n                uint contractTokenBalance = balanceOf(address(this)); \r\n                if (!inSwap && from != pancakeswapPair && swapEnabled) {\r\n                    \r\n                    if (limitTX) {\r\n                    require(amount <= balanceOf(pancakeswapPair).mul(3).div(100) && amount <= _maxTxAmount,\"Amount is greater then maxTxAmount and 3% of liquidity pool\");\r\n                    }\r\n\r\n                    uint initialETHBalance = address(this).balance;\r\n\r\n                    if (contractTokenBalance > 0){\r\n                        \r\n                        if(_conduitFee > 0){\r\n                            uint conduitShare = contractTokenBalance.div(_conduitFee); \r\n                            contractTokenBalance = contractTokenBalance.sub(conduitShare);\r\n                            _transfer(address(this), _conduitAddress, conduitShare); \r\n                        } \r\n\r\n                    swapTokensForEth(contractTokenBalance);\r\n                    _boostFee = _sellBoostFee;\r\n                    _futureFee =_sellFutureFee;\r\n                    uint newETHBalance = address(this).balance; \r\n                    uint ethToDistribute = newETHBalance.sub(initialETHBalance);\r\n                    if (ethToDistribute > 0) {\r\n                        distributeETH(ethToDistribute);\r\n                    }\r\n\r\n                    }\r\n                    \r\n                }\r\n                chargeTax = sellFeeEnabled;\r\n                setSellFeeOnTrancation();\r\n                _exludeFee = _isExcludedFromFee[from].sellFeeOnly;\r\n\r\n            }\r\n        }\r\n    \r\n        \r\n        \r\n        bool takeFee = true;\r\n\r\n        if (_isExcludedFromFee[from].bothFee || _isExcludedFromFee[to].bothFee || !feeEnabled || !chargeTax || _exludeFee) {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        removeAllFee;\r\n    }\r\n\r\n\r\n    function removeAllFee() private {\r\n        if (_contractFee == 0 && _burn == 0) return;\r\n        _contractFee = 0;\r\n        _burn = 0;\r\n        _boostFee = 0 ;\r\n        _futureFee =0 ;\r\n        _conduitFee = 0;\r\n    }\r\n\r\n    function setBuyFeeOnTrancation() private {\r\n        _contractFee = _buyContractFee;\r\n        _burn = _buyBurn;\r\n        _boostFee = _buyBoostFee ;\r\n        _futureFee =_buyFutureFee ;\r\n        _conduitFee = _buyConduitFee;\r\n    }\r\n\r\n    function setSellFeeOnTrancation() private {\r\n        _contractFee = _sellContractFee;\r\n        _burn = _sellBurn;\r\n        _boostFee = _sellBoostFee ;\r\n        _futureFee =_sellFutureFee ;\r\n        _conduitFee = _sellConduitFee;\r\n    }\r\n\r\n\r\n    function setBuyFee(uint256  _per ) external onlyOwner() {\r\n\r\n        if (_per == 0 )\r\n        {\r\n        _buyContractFee = 0;\r\n        _buyBurn = 0;\r\n        _buyBoostFee =0;\r\n        _buyFutureFee = 0;\r\n        _buyConduitFee = 0;\r\n\r\n        currentBuyFee = 0;\r\n        buyFeeEnabled = false;\r\n        }else if (_per == 5){\r\n        _buyContractFee = 4;\r\n        _buyBurn = 1;\r\n        _buyConduitFee = _buyContractFee.div(1);\r\n        _tempContractFee = 3;\r\n        _buyBoostFee = _tempContractFee.div(2); \r\n        _buyFutureFee = _tempContractFee.div(1);\r\n\r\n        currentBuyFee = 5;\r\n        buyFeeEnabled = true;\r\n        }else if (_per == 10){\r\n        _buyContractFee = 8;\r\n        _buyBurn = 2;\r\n         _buyConduitFee = _buyContractFee.div(2);\r\n        _tempContractFee = 6;\r\n        _buyBoostFee = _tempContractFee.div(2); \r\n        _buyFutureFee = _tempContractFee.div(2);\r\n        \r\n        currentBuyFee = 10;\r\n        buyFeeEnabled = true;\r\n        }else {\r\n            revert(\" Invalid input for buy tax. supported input are  5% and 10%\");\r\n        }\r\n \r\n    }\r\n\r\n    function setSellFee(uint256  _per ) external onlyOwner() {\r\n        if (_per == 0 )\r\n        {\r\n        _sellContractFee = 0;\r\n        _sellBurn = 0;\r\n        _sellBoostFee = 0;\r\n        _sellFutureFee = 0;\r\n        _sellConduitFee = 0;\r\n\r\n        currentSellFee = 0;\r\n        sellFeeEnabled = false;\r\n        }else if (_per == 10){\r\n        _sellContractFee = 8; \r\n        _sellBurn = 2;\r\n        _sellConduitFee = _sellContractFee.div(2);\r\n        _tempContractFee = 6;\r\n        _sellBoostFee = _tempContractFee.div(2); \r\n        _sellFutureFee = _tempContractFee.div(2);\r\n\r\n        currentSellFee = 10;\r\n        sellFeeEnabled = true;\r\n        }else if (_per == 15){\r\n        _sellContractFee = 12;\r\n        _sellBurn = 3; \r\n        _sellConduitFee =_sellContractFee.div(3);\r\n        _tempContractFee = 9;\r\n        _sellBoostFee = _tempContractFee.div(4); \r\n        _sellFutureFee = _tempContractFee.div(1);\r\n\r\n        currentSellFee = 15;\r\n        sellFeeEnabled = true;\r\n        }\r\n        else {\r\n            revert(\" Invalid input for sell tax. supported input are  10% and 15%\");\r\n        }\r\n \r\n    }\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        if (!takeFee) removeAllFee();\r\n        _transferStandard(sender, recipient, amount);\r\n        if (!takeFee) removeAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 amount) private {\r\n        (uint256 tAmount, uint256 tBurn) = _BEACHEthBurn(amount); \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tTeam) = _getValues(tAmount, tBurn); \r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n        _takeTeam(tTeam);\r\n        emit Transfer(sender, recipient, tTransferAmount); \r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate = _getRate(); \r\n        uint256 rTeam = tTeam.mul(currentRate); \r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam); \r\n    }\r\n\r\n    function _BEACHEthBurn(uint amount) private returns (uint, uint) {\r\n        uint orgAmount = amount; \r\n        uint256 currentRate = _getRate(); \r\n        uint256 tBurn = amount.mul(_burn).div(100); \r\n        uint256 rBurn = tBurn.mul(currentRate); \r\n        _tTotal = _tTotal.sub(tBurn);  \r\n        _rTotal = _rTotal.sub(rBurn);  \r\n        _BEACHBurned = _BEACHBurned.add(tBurn); \r\n        return (orgAmount, tBurn);\r\n    }\r\n\r\n\r\n    function _getValues(uint256 tAmount, uint256 tBurn) private view returns (uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tTeam) = _getTValues(tAmount, _contractFee, tBurn);\r\n        uint256 currentRate = _getRate(); \r\n        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(tAmount, tTeam, tBurn, currentRate);\r\n        return (rAmount, rTransferAmount, tTransferAmount, tTeam); \r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 teamFee, uint256 tBurn) private pure returns (uint256,  uint256) {\r\n        uint256 tTeam = tAmount.mul(teamFee).div(100); \r\n        uint256 tTransferAmount = tAmount.sub(tTeam).sub(tBurn); \r\n        return (tTransferAmount, tTeam); \r\n    }\r\n\r\n \r\n    function _getRValues(uint256 tAmount, uint256 tTeam,uint256 tBurn, uint256 currentRate) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rBurn =  tBurn.mul(currentRate); \r\n        uint256 rTransferAmount = rAmount.sub(rTeam).sub(rBurn); \r\n        return (rAmount, rTransferAmount); \r\n    }\r\n\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal; \r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeV2Router.WETH();\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n     function swapETHfortargetToken(uint ethAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeV2Router.WETH();\r\n        path[1] = address(targetToken);\r\n\r\n        _approve(address(this), address(pancakeV2Router), ethAmount);\r\n        pancakeV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: ethAmount}(ethAmount,path,address(boostFund),block.timestamp);\r\n    }\r\n\r\n    function distributeETH(uint256 amount) private {\r\n        if(_futureFee > 0 && _boostFee > 0){\r\n            _development.transfer(amount.div(_futureFee));  \r\n            _boost.transfer(amount.div(_boostFee)); \r\n            }\r\n        }\r\n    \r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"addr3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BEACHBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"changeBoostAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeConduitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addy\",\"type\":\"address\"}],\"name\":\"changeDevelopmentAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkExcludedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"bothFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"buyFeeOnly\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sellFeeOnly\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDistributeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwapEthForTargetToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapTokensForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAddressIsBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_per\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setExcludeFromBothFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setExcludeFromBuyFeeOnlyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setExcludeFromSellFeeOnlyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setIncludeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setLimitTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_per\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_adr\",\"type\":\"address\"}],\"name\":\"setTargetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewIsBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Beach", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000cc41b6e83ca8b5e33d7578a545f5819fdd920bac000000000000000000000000a638f4bb8202049eb4a6782511c3b8a64a2f90a1000000000000000000000000a638f4bb8202049eb4a6782511c3b8a64a2f90a10000000000000000000000000317e732882664c864d8719fc2d43b0138048dfb", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://457c641d88a4f0fade8282a498975f38fa46afde5d992dbed71826ff11f40c0d"}