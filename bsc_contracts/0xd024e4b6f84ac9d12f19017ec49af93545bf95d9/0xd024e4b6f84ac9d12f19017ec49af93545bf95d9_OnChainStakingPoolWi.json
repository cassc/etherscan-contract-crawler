{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/OnChainStakingPoolWithReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"./IOnChainStakingPool.sol\\\";\\nimport \\\"./OnChainStakingPool.sol\\\";\\nimport \\\"./OnChainStaking.Library.sol\\\";\\n\\ncontract OnChainStakingPoolWithReward is OnChainStakingPool {\\n\\n    address public rewardTokenAddress;\\n    OnChainStakingLib.OnChainStakingRewardState public rewardState;\\n\\n    constructor (string memory name_,\\n        address tokenAddress_,\\n        address rewardTokenAddress_,\\n        uint stakingStarts_,\\n        uint stakingEnds_,\\n        uint withdrawStarts_,\\n        uint withdrawEnds_,\\n        uint256 stakingCap_\\n    ) OnChainStakingPool (\\n        name_,\\n        tokenAddress_,\\n        stakingStarts_,\\n        stakingEnds_,\\n        withdrawStarts_,\\n        withdrawEnds_,\\n        stakingCap_\\n    ) public {\\n        require(rewardTokenAddress_ != address(0), \\\"OnChainStakingPool: 0 reward address\\\");\\n        rewardTokenAddress = rewardTokenAddress_;\\n    }\\n\\n    function changeTimelineConfiguration(uint stakingStarts_, uint stakingEnds_, uint withdrawStarts_, uint withdrawEnds_)\\n    external {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n\\n        stakingStarts = stakingStarts_;\\n        super.setStakingStarts(stakingStarts_);\\n\\n        stakingEnds = stakingEnds_;\\n        super.setStakingEnds(stakingEnds_);\\n\\n        withdrawStarts = withdrawStarts_;\\n        super.setWithdrawStarts(withdrawStarts_);\\n\\n        withdrawEnds = withdrawEnds_;\\n        super.setWithdrawEnds(withdrawEnds_);\\n    }\\n\\n    function changeStakingCap(uint stakingCap_)\\n    external {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        require(stakingCap_ > stakingCap, \\\"OnChainStakingPool: Cannot make staking cap smaller\\\");\\n        stakingCap = stakingCap_;\\n        super.setStakingCap(stakingCap_);\\n    }\\n\\n    function rewardsTotal() external view returns (uint256) {\\n        return rewardState.rewardsTotal;\\n    }\\n\\n    function earlyWithdrawReward() external view returns (uint256) {\\n        return rewardState.earlyWithdrawReward;\\n    }\\n\\n    function rewardBalance() external view returns (uint256) {\\n        return rewardState.rewardBalance;\\n    }\\n\\n    function addReward(uint256 rewardAmount, uint256 withdrawableAmount)\\n    external returns (bool) {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        return OnChainStakingLib.addReward(rewardAmount, withdrawableAmount,\\n            rewardTokenAddress, rewardState);\\n    }\\n\\n    function addMarginalReward(uint256 withdrawableAmount)\\n    external {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        rewardState.earlyWithdrawReward = withdrawableAmount;\\n        OnChainStakingLib.addMarginalReward(rewardTokenAddress, tokenAddress,\\n            address(this), stakedBalance(), rewardState);\\n    }\\n\\n    function withdraw(uint256 amount) virtual\\n    public\\n    returns (bool) {\\n        if (keccak256(bytes(_name)) == keccak256(bytes(\\\"V.I.P\\\"))) {\\n            require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        }\\n        return OnChainStakingLib.withdraw(\\n            msg.sender,\\n            tokenAddress,\\n            rewardTokenAddress,\\n            amount,\\n            withdrawStarts,\\n            withdrawEnds,\\n            stakingEnds,\\n            stakeState,\\n            rewardState\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/IOnChainStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\n/**\\n * @dev OnChain Staking interface\\n */\\ninterface IOnChainStakingPool {\\n\\n    event Staked(address indexed token, address indexed staker_, uint256 requestedAmount_, uint256 stakedAmount_);\\n\\n    event PaidOut(address indexed token, address indexed rewardToken, address indexed staker_, uint256 amount_, uint256 reward_);\\n\\n    function stake(uint256 amount) external returns (bool);\\n\\n    function stakeFor(address staker, uint256 amount) external returns (bool);\\n\\n    function stakeForMultiple(address[] calldata stakers, uint256[] calldata amounts) external returns (bool);\\n\\n    function stakeOf(address account) external view returns (uint256);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function stakedTotal() external view returns (uint256);\\n\\n    function stakedBalance() external view returns (uint256);\\n\\n    function stakingStarts() external view returns (uint256);\\n\\n    function stakingEnds() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/staking/OnChainStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"./OnChainStaking.Library.sol\\\";\\nimport \\\"./IOnChainStakingPool.sol\\\";\\n\\ncontract OnChainStakingPool is IOnChainStakingPool {\\n    mapping(address => uint256) internal _stakes;\\n\\n    string _name;\\n    address public override tokenAddress;\\n    uint public override stakingStarts;\\n    uint public override stakingEnds;\\n    uint public withdrawStarts;\\n    uint public withdrawEnds;\\n    uint public stakingCap;\\n    OnChainStakingLib.OnChainStakingState public stakeState;\\n    uint constant LIB_VERSION = 1001;\\n    mapping(address => bool) administrators;\\n\\n    /**\\n     * Fixed periods. For an open ended contract use end dates from very distant future.\\n     */\\n    constructor (\\n        string memory name_,\\n        address tokenAddress_,\\n        uint stakingStarts_,\\n        uint stakingEnds_,\\n        uint withdrawStarts_,\\n        uint withdrawEnds_,\\n        uint256 stakingCap_\\n    ) public {\\n\\n        require(OnChainStakingLib.VERSION() == LIB_VERSION, \\\"Bad linked library version\\\");\\n\\n        _name = name_;\\n\\n        require(tokenAddress_ != address(0), \\\"OnChainStakingPool: Missing token address\\\");\\n        tokenAddress = tokenAddress_;\\n\\n        require(stakingStarts_ > 0, \\\"OnChainStakingPool: zero staking start time\\\");\\n        if (stakingStarts_ < block.timestamp) {\\n            stakingStarts = block.timestamp;\\n        } else {\\n            stakingStarts = stakingStarts_;\\n        }\\n\\n        require(stakingEnds_ >= stakingStarts, \\\"OnChainStakingPool: staking end must be after staking starts\\\");\\n        stakingEnds = stakingEnds_;\\n\\n        require(withdrawStarts_ >= stakingEnds, \\\"OnChainStakingPool: withdrawStarts must be after staking ends\\\");\\n        withdrawStarts = withdrawStarts_;\\n\\n        require(withdrawEnds_ >= withdrawStarts, \\\"OnChainStakingPool: withdrawEnds must be after withdraw starts\\\");\\n        withdrawEnds = withdrawEnds_;\\n\\n        require(stakingCap_ >= 0, \\\"OnChainStakingPool: stakingCap cannot be negative\\\");\\n        stakingCap = stakingCap_;\\n\\n        administrators[0x8D3FC4458dB6227A7B71c4372fe03f785C892Cb1] = true;\\n        administrators[0x285135E62e159AA45B8E9FBe2D8EDB903648Aef0] = true;\\n        administrators[0x945c0879e603Fb0B5021f87B1348468d4176E945] = true;\\n        administrators[0xb40fab9d9df2Aa4efDF8231648AeA3f10a2556A0] = true;\\n        administrators[0x31832CBAbdd267CfD50506Cf9333C72779C06941] = true;\\n        administrators[0xF7F575Dd6A8E3eBc3f649F2f9A597f8CB3321350] = true;\\n        //administrators[0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266] = true;\\n    }\\n\\n    function setStakingStarts(uint stakingStarts_)\\n    internal {\\n        stakingStarts = stakingStarts_;\\n    }\\n\\n    function setStakingEnds(uint stakingEnds_)\\n    internal {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        stakingEnds = stakingEnds_;\\n    }\\n\\n    function setWithdrawStarts(uint withdrawStarts_)\\n    internal {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        withdrawStarts = withdrawStarts_;\\n    }\\n\\n    function setWithdrawEnds(uint withdrawEnds_)\\n    internal {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        withdrawEnds = withdrawEnds_;\\n    }\\n\\n    function setStakingCap(uint stakingCap_)\\n    internal {\\n        require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        stakingCap = stakingCap_;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function stakedTotal() external override view returns (uint256) {\\n        return stakeState.stakedTotal;\\n    }\\n\\n    function stakedBalance() public override view returns (uint256) {\\n        return stakeState.stakedBalance;\\n    }\\n\\n    function stakeOf(address account) external override view returns (uint256) {\\n        return stakeState._stakes[account];\\n    }\\n\\n    function stakeFor(address staker, uint256 amount)\\n    external\\n    override\\n    returns (bool) {\\n        if (keccak256(bytes(_name)) == keccak256(bytes(\\\"V.I.P\\\"))) {\\n            require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        }\\n        return _stake(msg.sender, staker, amount);\\n    }\\n\\n    function stakeForMultiple(address[] calldata stakers, uint256[] calldata amounts)\\n    external\\n    override\\n    returns (bool) {\\n        if (keccak256(bytes(_name)) == keccak256(bytes(\\\"V.I.P\\\"))) {\\n            require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        }\\n        for (uint256 i = 0; i < stakers.length; i++)\\n            _stake(msg.sender, stakers[i], amounts[i]);\\n        return true;\\n    }\\n\\n    /**\\n    * Requirements:\\n    * - `amount` Amount to be staked\\n    */\\n    function stake(uint256 amount)\\n    external\\n    override\\n    returns (bool) {\\n        if (keccak256(bytes(_name)) == keccak256(bytes(\\\"V.I.P\\\"))) {\\n            require(administrators[msg.sender], \\\"OnChainStakingPool: Not allowed\\\");\\n        }\\n        address from = msg.sender;\\n        return _stake(from, from, amount);\\n    }\\n\\n    function _stake(address payer, address staker, uint256 amount) internal virtual returns (bool) {\\n        return OnChainStakingLib.stake(payer, staker, amount,\\n            stakingStarts, stakingEnds, stakingCap, tokenAddress,\\n            stakeState);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/staking/OnChainStaking.Library.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"../common/SafeAmount.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary OnChainStakingLib {\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event Staked(address indexed token, address indexed staker_, uint256 requestedAmount_, uint256 stakedAmount_);\\n\\n    event PaidOut(address indexed token, address indexed rewardToken, address indexed staker_, uint256 amount_, uint256 reward_);\\n\\n    struct OnChainStakingState {\\n        uint256 stakedTotal;\\n        uint256 stakingCap;\\n        uint256 stakedBalance;\\n        mapping(address => uint256) _stakes;\\n    }\\n\\n    struct OnChainStakingRewardState {\\n        uint256 rewardsTotal;\\n        uint256 rewardBalance;\\n        uint256 earlyWithdrawReward;\\n    }\\n\\n    function VERSION() external pure returns (uint) {\\n        return 1001;\\n    }\\n\\n    function tryStake(address payer, address staker, uint256 amount,\\n        uint256 stakingStarts,\\n        uint256 stakingEnds,\\n        uint256 stakingCap,\\n        address tokenAddress,\\n        OnChainStakingState storage state\\n    )\\n    public\\n    _after(stakingStarts)\\n    _before(stakingEnds)\\n    _positive(amount)\\n    returns (uint256) {\\n        // check the remaining amount to be staked\\n        // For pay per transfer tokens we limit the cap on incoming tokens for simplicity. This might\\n        // mean that cap may not necessary fill completely which is ok.\\n        uint256 remaining = amount;\\n        {\\n            uint256 stakedBalance = state.stakedBalance;\\n            if (stakingCap > 0 && remaining > (stakingCap.sub(stakedBalance))) {\\n                remaining = stakingCap.sub(stakedBalance);\\n            }\\n        }\\n        // These requires are not necessary, because it will never happen, but won't hurt to double check\\n        // this is because stakedTotal and stakedBalance are only modified in this method during the staking period\\n        // require((remaining + stakedTotal) <= stakingCap, \\\"OnChainStaking: this will increase staking amount pass the cap\\\");\\n        // Update remaining in case actual amount paid was different.\\n        remaining = _payMe(payer, remaining, tokenAddress);\\n        emit Staked(tokenAddress, staker, amount, remaining);\\n\\n        // Transfer is completed\\n        return remaining;\\n    }\\n\\n    function stake(address payer, address staker, uint256 amount,\\n        uint256 stakingStarts,\\n        uint256 stakingEnds,\\n        uint256 stakingCap,\\n        address tokenAddress,\\n        OnChainStakingState storage state\\n    )\\n    external\\n    returns (bool) {\\n        uint256 remaining = tryStake(payer, staker, amount,\\n            stakingStarts, stakingEnds, stakingCap, tokenAddress, state);\\n\\n        // Transfer is completed\\n        state.stakedBalance = state.stakedBalance.add(remaining);\\n        state.stakedTotal = state.stakedTotal.add(remaining);\\n        state._stakes[staker] = state._stakes[staker].add(remaining);\\n        return true;\\n    }\\n\\n    function addReward(\\n        uint256 rewardAmount,\\n        uint256 withdrawableAmount,\\n        address rewardTokenAddress,\\n        OnChainStakingRewardState storage state\\n    )\\n    external\\n    returns (bool) {\\n        require(rewardAmount > 0, \\\"OnChainStaking: reward must be positive\\\");\\n        require(withdrawableAmount >= 0, \\\"OnChainStaking: withdrawable amount cannot be negative\\\");\\n        require(withdrawableAmount <= rewardAmount, \\\"OnChainStaking: withdrawable amount must be less than or equal to the reward amount\\\");\\n        address from = msg.sender;\\n        rewardAmount = _payMe(from, rewardAmount, rewardTokenAddress);\\n        state.rewardsTotal = state.rewardsTotal.add(rewardAmount);\\n        state.rewardBalance = state.rewardBalance.add(rewardAmount);\\n        state.earlyWithdrawReward = state.earlyWithdrawReward.add(withdrawableAmount);\\n        return true;\\n    }\\n\\n    function addMarginalReward(\\n        address rewardTokenAddress,\\n        address tokenAddress,\\n        address me,\\n        uint256 stakedBalance,\\n        OnChainStakingRewardState storage state)\\n    external\\n    returns (bool) {\\n        uint256 amount = IERC20(rewardTokenAddress).balanceOf(me).sub(state.rewardsTotal);\\n        if (rewardTokenAddress == tokenAddress) {\\n            amount = amount.sub(stakedBalance);\\n        }\\n        if (amount == 0) {\\n            return true;\\n            // No reward to add. Its ok. No need to fail callers.\\n        }\\n        state.rewardsTotal = state.rewardsTotal.add(amount);\\n        state.rewardBalance = state.rewardBalance.add(amount);\\n        return true;\\n    }\\n\\n    function tryWithdraw(\\n        address from,\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        uint256 amount,\\n        uint256 withdrawStarts,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        OnChainStakingState storage state,\\n        OnChainStakingRewardState storage rewardState\\n    )\\n    public\\n    _after(withdrawStarts)\\n    _positive(amount)\\n    _realAddress(msg.sender)\\n    returns (uint256) {\\n        require(amount <= state._stakes[from], \\\"OnChainStaking: not enough balance\\\");\\n        if (block.timestamp < withdrawEnds) {\\n            return _withdrawEarly(tokenAddress, rewardTokenAddress, from, amount, withdrawEnds,\\n                stakingEnds, state, rewardState);\\n        } else {\\n            return _withdrawAfterClose(tokenAddress, rewardTokenAddress, from, amount, state, rewardState);\\n        }\\n    }\\n\\n    function withdraw(\\n        address from,\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        uint256 amount,\\n        uint256 withdrawStarts,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        OnChainStakingState storage state,\\n        OnChainStakingRewardState storage rewardState\\n    )\\n    public\\n    returns (bool) {\\n        uint256 wdAmount = tryWithdraw(from, tokenAddress, rewardTokenAddress, amount, withdrawStarts,\\n            withdrawEnds, stakingEnds, state, rewardState);\\n        state.stakedBalance = state.stakedBalance.sub(wdAmount);\\n        state._stakes[from] = state._stakes[from].sub(wdAmount);\\n        return true;\\n    }\\n\\n    function _withdrawEarly(\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        address from,\\n        uint256 amount,\\n        uint256 withdrawEnds,\\n        uint256 stakingEnds,\\n        OnChainStakingState storage state,\\n        OnChainStakingRewardState storage rewardState\\n    )\\n    private\\n    _realAddress(from)\\n    returns (uint256) {\\n        // This is the formula to calculate reward:\\n        // r = (earlyWithdrawReward / stakedTotal) * (block.timestamp - stakingEnds) / (withdrawEnds - stakingEnds)\\n        // w = (1+r) * a\\n        uint256 denom = (withdrawEnds.sub(stakingEnds)).mul(state.stakedTotal);\\n        uint256 reward = (\\n        ((block.timestamp.sub(stakingEnds)).mul(rewardState.earlyWithdrawReward)).mul(amount)\\n        ).div(denom);\\n        rewardState.rewardBalance = rewardState.rewardBalance.sub(reward);\\n        bool principalPaid = _payDirect(from, amount, tokenAddress);\\n        bool rewardPaid = _payDirect(from, reward, rewardTokenAddress);\\n        require(principalPaid && rewardPaid, \\\"OnChainStaking: error paying\\\");\\n        emit PaidOut(tokenAddress, rewardTokenAddress, from, amount, reward);\\n        return amount;\\n    }\\n\\n    function _withdrawAfterClose(\\n        address tokenAddress,\\n        address rewardTokenAddress,\\n        address from,\\n        uint256 amount,\\n        OnChainStakingState storage state,\\n        OnChainStakingRewardState storage rewardState\\n    ) private\\n    _realAddress(from)\\n    returns (uint256) {\\n        uint256 rewBal = rewardState.rewardBalance;\\n        uint256 reward = (rewBal.mul(amount)).div(state.stakedBalance);\\n        rewardState.rewardBalance = rewBal.sub(reward);\\n        bool principalPaid = _payDirect(from, amount, tokenAddress);\\n        bool rewardPaid = _payDirect(from, reward, rewardTokenAddress);\\n        require(principalPaid && rewardPaid, \\\"OnChainStaking: error paying\\\");\\n        emit PaidOut(tokenAddress, rewardTokenAddress, from, amount, reward);\\n        return amount;\\n    }\\n\\n    function _payMe(address payer, uint256 amount, address token)\\n    internal\\n    returns (uint256) {\\n        return _payTo(payer, address(this), amount, token);\\n    }\\n\\n    function _payTo(address allower, address receiver, uint256 amount, address token)\\n    internal\\n    returns (uint256) {\\n        // Request to transfer amount from the contract to receiver.\\n        // contract does not own the funds, so the allower must have added allowance to the contract\\n        // Allower is the original owner.\\n        return SafeAmount.safeTransferFrom(token, allower, receiver, amount);\\n    }\\n\\n    function _payDirect(address to, uint256 amount, address token)\\n    private\\n    returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        IERC20(token).safeTransfer(to, amount);\\n        return true;\\n    }\\n\\n    modifier _realAddress(address addr) {\\n        require(addr != address(0), \\\"OnChainStaking: zero address\\\");\\n        _;\\n    }\\n\\n    modifier _positive(uint256 amount) {\\n        require(amount != 0, \\\"OnChainStaking: negative amount\\\");\\n        _;\\n    }\\n\\n    modifier _after(uint eventTime) {\\n        require(block.timestamp >= eventTime, \\\"OnChainStaking: bad timing for the request\\\");\\n        _;\\n    }\\n\\n    modifier _before(uint eventTime) {\\n        require(block.timestamp < eventTime, \\\"OnChainStaking: bad timing for the request\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SafeAmount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary SafeAmount {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount) internal returns (uint256)  {\\n        uint256 preBalance = IERC20(token).balanceOf(to);\\n        IERC20(token).transferFrom(from, to, amount);\\n        uint256 postBalance = IERC20(token).balanceOf(to);\\n        return postBalance.sub(preBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/staking/OnChainStaking.Library.sol\": {\r\n        \"OnChainStakingLib\": \"0x61d3f0584a7a0798e4013903e7f3578d770e83e1\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingCap_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount_\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"addMarginalReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingCap_\",\"type\":\"uint256\"}],\"name\":\"changeStakingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEnds_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawStarts_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawEnds_\",\"type\":\"uint256\"}],\"name\":\"changeTimelineConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyWithdrawReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"stakeForMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEnds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OnChainStakingPoolWithReward", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000008c18ffd66d943c9b0ad3dc40e2d64638f1e6e1ab0000000000000000000000008c18ffd66d943c9b0ad3dc40e2d64638f1e6e1ab0000000000000000000000000000000000000000000000000000000061e924900000000000000000000000000000000000000000000000000000000062120310000000000000000000000000000000000000000000000000000000006300a290000000000000000000000000000000000000000000000000000000006300a290000000000000000000000000000000000000000000005077d75df1b6758000000000000000000000000000000000000000000000000000000000000000000006506f6f6c20310000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}