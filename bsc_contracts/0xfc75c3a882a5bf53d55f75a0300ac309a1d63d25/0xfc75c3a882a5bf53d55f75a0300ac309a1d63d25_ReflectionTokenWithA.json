{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Tokens/ReflectionTokens/ReflectionTokenWithAntibot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\\n}\\ninterface IGemAntiBot {\\n    function setTokenOwner(address owner) external;\\n\\n    function onPreTransferCheck(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\\ninterface IUniswapV2Caller {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        address router,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external;\\n}\\ninterface IFee {\\n    function payFee(\\n        uint256 _tokenType\\n    ) external payable;\\n}\\ncontract ReflectionTokenWithAntibot is IERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n    IUniswapV2Caller public constant uniswapV2Caller =\\n        IUniswapV2Caller(0x617715A9Bf6dD62D1Beb70F29914Fcf821933B39);\\n    IFee public constant feeContract = IFee(0x91aE509B6c2641Ec0301525c56bc77D5b9B7aAde);\\n    address public gemAntiBot;\\n    bool public antiBotEnabled;\\n    address public baseTokenForPair;\\n    uint8 private _decimals;\\n    mapping(address => uint256) private _rOwned;\\n    mapping(address => uint256) private _tOwned;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcluded;\\n    address[] private _excluded;\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal;\\n    uint256 private _rTotal;\\n    uint256 private _tFeeTotal;\\n    string private _name;\\n    string private _symbol;\\n\\n    uint256 private _rewardFee;\\n    uint256 private _previousRewardFee;\\n\\n    uint256 private _liquidityFee;\\n    uint256 private _previousLiquidityFee;\\n\\n    uint256 private _marketingFee;\\n    uint256 private _previousMarketingFee;\\n    bool private inSwapAndLiquify;\\n    uint16 public sellRewardFee;\\n    uint16 public buyRewardFee;\\n    uint16 public sellLiquidityFee;\\n    uint16 public buyLiquidityFee;\\n\\n    uint16 public sellMarketingFee;\\n    uint16 public buyMarketingFee;\\n\\n    address public marketingWallet;\\n    bool public isMarketingFeeBaseToken;\\n\\n\\n    uint256 public minAmountToTakeFee;\\n    uint256 public maxWallet;\\n    uint256 public maxTransactionAmount;\\n\\n    IUniswapV2Router02 public mainRouter;\\n    address public mainPair;\\n    mapping(address => bool) public isExcludedFromMaxTransactionAmount;\\n\\n    mapping(address => bool) public isExcludedFromFee;\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    uint256 private _liquidityFeeTokens;\\n    uint256 private _marketingFeeTokens;\\n\\n    event UpdateLiquidityFee(\\n        uint16 newSellLiquidityFee,\\n        uint16 newBuyLiquidityFee,\\n        uint16 oldSellLiquidityFee,\\n        uint16 oldBuyLiquidityFee\\n    );\\n    event UpdateMarketingFee(\\n        uint16 newSellMarketingFee,\\n        uint16 newBuyMarketingFee,\\n        uint16 oldSellMarketingFee,\\n        uint16 oldBuyMarketingFee\\n    );\\n    event UpdateRewardFee(\\n        uint16 newSellRewardFee,\\n        uint16 newBuyRewardFee,\\n        uint16 oldSellRewardFee,\\n        uint16 oldBuyRewardFee\\n    );  \\n    event UpdateMarketingWallet(\\n        address indexed newMarketingWallet,\\n        bool newIsMarketingFeeBaseToken,\\n        address indexed oldMarketingWallet,\\n        bool oldIsMarketingFeeBaseToken\\n    );\\n\\n    event UpdateMinAmountToTakeFee(uint256 newMinAmountToTakeFee, uint256 oldMinAmountToTakeFee);\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool value);\\n    event ExcludedFromFee(address indexed account, bool isEx);\\n    event SwapAndLiquify(uint256 tokensForLiquidity, uint256 baseTokenForLiquidity);\\n    event MarketingFeeTaken(\\n        uint256 marketingFeeTokens,\\n        uint256 marketingFeeBaseTokenSwapped\\n    );\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldRouter);\\n    event ExcludedFromMaxTransactionAmount(address indexed account, bool isExcluded);\\n    event UpdateMaxWallet(uint256 newMaxWallet, uint256 oldMaxWallet);\\n    event UpdateMaxTransactionAmount(uint256 newMaxTransactionAmount, uint256 oldMaxTransactionAmount);\\n    constructor(\\n        string memory __name,\\n        string memory __symbol,\\n        uint8 __decimals,\\n        uint256 _totalSupply,\\n        uint256 _maxWallet,\\n        uint256 _maxTransactionAmount,\\n        address[4] memory _accounts,\\n        bool _isMarketingFeeBaseToken,\\n        uint16[6] memory _fees\\n    ) payable {\\n        feeContract.payFee{value: msg.value}(2);   \\n        baseTokenForPair=_accounts[2];\\n        _decimals = __decimals;\\n        _name = __name;\\n        _symbol = __symbol;\\n        _tTotal = _totalSupply ;\\n        _rTotal = (MAX - (MAX % _tTotal));\\n        _rOwned[_msgSender()] = _rTotal;\\n        require(_accounts[0] != address(0), \\\"marketing wallet can not be 0\\\");\\n        require(_accounts[1] != address(0), \\\"Router address can not be 0\\\");\\n        require(_fees[0]+(_fees[2])+(_fees[4]) <= 200, \\\"sell fee <= 20%\\\");\\n        require(_fees[1]+(_fees[3])+(_fees[5]) <= 200, \\\"buy fee <= 20%\\\");\\n        gemAntiBot = _accounts[3];\\n        IGemAntiBot(gemAntiBot).setTokenOwner(msg.sender);\\n        antiBotEnabled = true;\\n        marketingWallet = _accounts[0];\\n        isMarketingFeeBaseToken = _isMarketingFeeBaseToken;\\n        emit UpdateMarketingWallet(\\n            marketingWallet,\\n            isMarketingFeeBaseToken,\\n            address(0),\\n            false\\n        );\\n        mainRouter = IUniswapV2Router02(_accounts[1]);\\n        if(baseTokenForPair != mainRouter.WETH()){            \\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \\n        }\\n        _approve(address(this), address(uniswapV2Caller), MAX);\\n        _approve(address(this), address(mainRouter), MAX);\\n        emit UpdateUniswapV2Router(address(mainRouter), address(0));\\n        mainPair = IUniswapV2Factory(mainRouter.factory()).createPair(\\n            address(this),\\n            baseTokenForPair\\n        );\\n        sellLiquidityFee = _fees[0];\\n        buyLiquidityFee = _fees[1];\\n        emit UpdateLiquidityFee(\\n            sellLiquidityFee,\\n            buyLiquidityFee,\\n            0,\\n            0\\n        );\\n        sellMarketingFee = _fees[2];\\n        buyMarketingFee = _fees[3];\\n        emit UpdateMarketingFee(\\n            sellMarketingFee,\\n            buyMarketingFee,\\n            0,\\n            0\\n        );\\n        sellRewardFee = _fees[4];\\n        buyRewardFee = _fees[5];\\n        emit UpdateRewardFee(\\n            sellRewardFee,\\n            buyRewardFee,\\n            0,\\n            0\\n        );\\n        minAmountToTakeFee = _totalSupply/(10000);\\n        emit UpdateMinAmountToTakeFee(minAmountToTakeFee, 0);\\n        require(_maxTransactionAmount>=_totalSupply / 10000, \\\"maxTransactionAmount >= total supply / 10000\\\");\\n        require(_maxWallet>=_totalSupply / 10000, \\\"maxWallet >= total supply / 10000\\\");\\n        maxWallet=_maxWallet;\\n        emit UpdateMaxWallet(maxWallet, 0);\\n        maxTransactionAmount=_maxTransactionAmount;\\n        emit UpdateMaxTransactionAmount(maxTransactionAmount, 0);\\n\\n        _isExcluded[address(0xdead)] = true;\\n        _excluded.push(address(0xdead));\\n        _isExcluded[address(this)] = true;\\n        _excluded.push(address(this));\\n        \\n        isExcludedFromFee[address(this)] = true;\\n        isExcludedFromFee[marketingWallet] = true;\\n        isExcludedFromFee[_msgSender()] = true;\\n        isExcludedFromFee[address(0xdead)] = true;\\n        isExcludedFromMaxTransactionAmount[address(0xdead)]=true;\\n        isExcludedFromMaxTransactionAmount[address(this)]=true;\\n        isExcludedFromMaxTransactionAmount[marketingWallet]=true;\\n        isExcludedFromMaxTransactionAmount[_msgSender()]=true;\\n        _setAutomatedMarketMakerPair(mainPair, true);\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n    }\\n\\n    function setUsingAntiBot(bool enabled_) external onlyOwner {\\n        antiBotEnabled = enabled_;\\n    }\\n    function updateUniswapV2Pair(address _baseTokenForPair) external onlyOwner\\n    {\\n        require(\\n            _baseTokenForPair != baseTokenForPair,\\n            \\\"The baseTokenForPair already has that address\\\"\\n        );\\n        baseTokenForPair=_baseTokenForPair;\\n        mainPair = IUniswapV2Factory(mainRouter.factory()).createPair(\\n            address(this),\\n            baseTokenForPair\\n        );\\n        if(baseTokenForPair != mainRouter.WETH()){\\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \\n        }\\n        _setAutomatedMarketMakerPair(mainPair, true);\\n    }\\n\\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\\n        require(\\n            newAddress != address(mainRouter),\\n            \\\"The router already has that address\\\"\\n        );\\n        emit UpdateUniswapV2Router(newAddress, address(mainRouter));\\n        mainRouter = IUniswapV2Router02(newAddress);\\n        _approve(address(this), address(mainRouter), MAX);\\n        if(baseTokenForPair != mainRouter.WETH()){\\n            IERC20(baseTokenForPair).approve(address(mainRouter), MAX);            \\n        } \\n        address _mainPair = IUniswapV2Factory(mainRouter.factory())\\n            .createPair(address(this), baseTokenForPair);\\n        mainPair = _mainPair;\\n        _setAutomatedMarketMakerPair(mainPair, true);\\n    }\\n    function updateMaxWallet(uint256 _maxWallet) external onlyOwner {\\n        require(_maxWallet>=_tTotal / 10000, \\\"maxWallet >= total supply / 10000\\\");\\n        emit UpdateMaxWallet(_maxWallet, maxWallet);\\n        maxWallet = _maxWallet;\\n    }\\n\\n    function updateMaxTransactionAmount(uint256 _maxTransactionAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(_maxTransactionAmount>=_tTotal / 10000, \\\"maxTransactionAmount >= total supply / 10000\\\");\\n        emit UpdateMaxTransactionAmount(_maxTransactionAmount, maxTransactionAmount);\\n        maxTransactionAmount = _maxTransactionAmount;\\n    }   \\n    function _tokenTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) private {\\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n    }\\n\\n    function _transferStandard(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity,\\n            uint256 tMarketing\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\n        _takeLiquidity(tLiquidity, tMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferToExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity,\\n            uint256 tMarketing\\n        ) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\n        _takeLiquidity(tLiquidity, tMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferFromExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity,\\n            uint256 tMarketing\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\n        _takeLiquidity(tLiquidity, tMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _transferBothExcluded(\\n        address sender,\\n        address recipient,\\n        uint256 tAmount\\n    ) private {\\n        (\\n            uint256 rAmount,\\n            uint256 rTransferAmount,\\n            uint256 rFee,\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity,\\n            uint256 tMarketing\\n        ) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender]-(tAmount);\\n        _rOwned[sender] = _rOwned[sender]-(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient]+(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient]+(rTransferAmount);\\n        _takeLiquidity(tLiquidity, tMarketing);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal-(rFee);\\n        _tFeeTotal = _tFeeTotal+(tFee);\\n    }\\n\\n    function _getValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            uint256 tTransferAmount,\\n            uint256 tFee,\\n            uint256 tLiquidity,\\n            uint256 tMarketing\\n        ) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\n            tAmount,\\n            tFee,\\n            tLiquidity,\\n            tMarketing,\\n            _getRate()\\n        );\\n        return (\\n            rAmount,\\n            rTransferAmount,\\n            rFee,\\n            tTransferAmount,\\n            tFee,\\n            tLiquidity,\\n            tMarketing\\n        );\\n    }\\n\\n    function _getTValues(uint256 tAmount)\\n        private\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 tFee = calculateRewardFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tMarketing = calculateMarketingFee(tAmount);\\n        uint256 tTransferAmount = tAmount-(tFee)-(tLiquidity)-(\\n            tMarketing\\n        );\\n        return (tTransferAmount, tFee, tLiquidity, tMarketing);\\n    }\\n\\n    function _getRValues(\\n        uint256 tAmount,\\n        uint256 tFee,\\n        uint256 tLiquidity,\\n        uint256 tMarketing,\\n        uint256 currentRate\\n    )\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 rAmount = tAmount*(currentRate);\\n        uint256 rFee = tFee*(currentRate);\\n        uint256 rLiquidity = tLiquidity*(currentRate);\\n        uint256 rMarketing = tMarketing*(currentRate);\\n        uint256 rTransferAmount = rAmount-(rFee)-(rLiquidity)-(\\n            rMarketing\\n        );\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n\\n    function _getRate() private view returns (uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply/(tSupply);\\n    }\\n\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (\\n                _rOwned[_excluded[i]] > rSupply ||\\n                _tOwned[_excluded[i]] > tSupply\\n            ) return (_rTotal, _tTotal);\\n            rSupply = rSupply-(_rOwned[_excluded[i]]);\\n            tSupply = tSupply-(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal/(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n\\n    function removeAllFee() private {\\n        _previousRewardFee = _rewardFee;\\n        _previousLiquidityFee = _liquidityFee;\\n        _previousMarketingFee = _marketingFee;\\n\\n        _marketingFee = 0;\\n        _rewardFee = 0;\\n        _liquidityFee = 0;\\n    }\\n\\n    function restoreAllFee() private {\\n        _rewardFee = _previousRewardFee;\\n        _liquidityFee = _previousLiquidityFee;\\n        _marketingFee = _previousMarketingFee;\\n    }\\n\\n    function calculateRewardFee(uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return _amount*(_rewardFee)/(10**3);\\n    }\\n\\n    function calculateLiquidityFee(uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return _amount*(_liquidityFee)/(10**3);\\n    }\\n\\n    function calculateMarketingFee(uint256 _amount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return _amount*(_marketingFee)/(10**3);\\n    }\\n\\n    function _takeLiquidity(uint256 tLiquidity, uint256 tMarketing) private {\\n        _liquidityFeeTokens = _liquidityFeeTokens+(tLiquidity);\\n        _marketingFeeTokens = _marketingFeeTokens+(tMarketing);\\n        uint256 currentRate = _getRate();\\n        uint256 rLiquidity = tLiquidity*(currentRate);\\n        uint256 rMarketing = tMarketing*(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)]+(rLiquidity)+(\\n            rMarketing\\n        );\\n        if (_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)]+(tLiquidity)+(\\n                tMarketing\\n            );\\n    }\\n\\n    /////////////////////////////////////////////////////////////////////////////////\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()]-amount\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender]+(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender]-(\\n                subtractedValue\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function isExcludedFromReward(address account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _isExcluded[account];\\n    }\\n\\n    function totalFees() external view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (, uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n\\n    function tokenFromReflection(uint256 rAmount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(\\n            rAmount <= _rTotal,\\n            \\\"Amount must be less than total reflections\\\"\\n        );\\n        uint256 currentRate = _getRate();\\n        return rAmount/(currentRate);\\n    }\\n\\n    function excludeFromReward(address account) public onlyOwner {\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        require(\\n            _excluded.length + 1 <= 50,\\n            \\\"Cannot exclude more than 50 accounts.  Include a previously excluded address.\\\"\\n        );\\n        if (_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n\\n    function includeInReward(address account) public onlyOwner {\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                uint256 prev_rOwned=_rOwned[account];\\n                _rOwned[account]=_tOwned[account]*_getRate();\\n                _rTotal=_rTotal-prev_rOwned+_rOwned[account];\\n                _isExcluded[account] = false;\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    modifier lockTheSwap() {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n\\n    function updateLiquidityFee(\\n        uint16 _sellLiquidityFee,\\n        uint16 _buyLiquidityFee\\n    ) external onlyOwner {\\n        require(\\n            _sellLiquidityFee+(sellMarketingFee)+(sellRewardFee) <= 200,\\n            \\\"sell fee <= 20%\\\"\\n        );\\n        require(\\n            _buyLiquidityFee+(buyMarketingFee)+(buyRewardFee) <= 200,\\n            \\\"buy fee <= 20%\\\"\\n        );\\n        emit UpdateLiquidityFee(\\n            _sellLiquidityFee,\\n            _buyLiquidityFee,\\n            sellLiquidityFee,\\n            buyLiquidityFee\\n        );\\n        sellLiquidityFee = _sellLiquidityFee;\\n        buyLiquidityFee = _buyLiquidityFee;\\n    }\\n\\n    function updateMarketingFee(\\n        uint16 _sellMarketingFee,\\n        uint16 _buyMarketingFee\\n    ) external onlyOwner {\\n        require(\\n            _sellMarketingFee+(sellLiquidityFee)+(sellRewardFee) <= 200,\\n            \\\"sell fee <= 20%\\\"\\n        );\\n        require(\\n            _buyMarketingFee+(buyLiquidityFee)+(buyRewardFee) <= 200,\\n            \\\"buy fee <= 20%\\\"\\n        );\\n        emit UpdateMarketingFee(\\n            _sellMarketingFee,\\n            _buyMarketingFee,\\n            sellMarketingFee,\\n            buyMarketingFee\\n        );\\n        sellMarketingFee = _sellMarketingFee;\\n        buyMarketingFee = _buyMarketingFee;        \\n    }\\n\\n    function updateRewardFee(\\n        uint16 _sellRewardFee,\\n        uint16 _buyRewardFee\\n    ) external onlyOwner {\\n        require(\\n            _sellRewardFee+(sellLiquidityFee)+(sellMarketingFee) <= 200,\\n            \\\"sell fee <= 20%\\\"\\n        );\\n        require(\\n            _buyRewardFee+(buyLiquidityFee)+(buyMarketingFee) <= 200,\\n            \\\"buy fee <= 20%\\\"\\n        );\\n        emit UpdateRewardFee(\\n            _sellRewardFee, \\n            _buyRewardFee,\\n            sellRewardFee, \\n            buyRewardFee\\n        );\\n        sellRewardFee = _sellRewardFee;\\n        buyRewardFee = _buyRewardFee;\\n    }\\n\\n    function updateMarketingWallet(\\n        address _marketingWallet,\\n        bool _isMarketingFeeBaseToken\\n    ) external onlyOwner {\\n        require(_marketingWallet != address(0), \\\"marketing wallet can't be 0\\\");\\n        emit UpdateMarketingWallet(_marketingWallet, _isMarketingFeeBaseToken,\\n            marketingWallet, isMarketingFeeBaseToken);\\n        marketingWallet = _marketingWallet;\\n        isMarketingFeeBaseToken = _isMarketingFeeBaseToken;\\n        isExcludedFromFee[_marketingWallet] = true;\\n        isExcludedFromMaxTransactionAmount[_marketingWallet] = true;\\n    }\\n\\n    function updateMinAmountToTakeFee(uint256 _minAmountToTakeFee)\\n        external\\n        onlyOwner\\n    {\\n        require(_minAmountToTakeFee > 0, \\\"minAmountToTakeFee > 0\\\");\\n        emit UpdateMinAmountToTakeFee(_minAmountToTakeFee, minAmountToTakeFee);\\n        minAmountToTakeFee = _minAmountToTakeFee;      \\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value)\\n        public\\n        onlyOwner\\n    {\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(\\n            automatedMarketMakerPairs[pair] != value,\\n            \\\"Automated market maker pair is already set to that value\\\"\\n        );\\n        automatedMarketMakerPairs[pair] = value;\\n        if (value) excludeFromReward(pair);\\n        else includeInReward(pair);\\n        isExcludedFromMaxTransactionAmount[pair] = value;\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function excludeFromFee(address account, bool isEx) external onlyOwner {\\n        require(isExcludedFromFee[account] != isEx, \\\"already\\\");\\n        isExcludedFromFee[account] = isEx;\\n        emit ExcludedFromFee(account, isEx);\\n    }\\n    function excludeFromMaxTransactionAmount(address account, bool isEx)\\n        external\\n        onlyOwner\\n    {\\n        require(isExcludedFromMaxTransactionAmount[account]!=isEx, \\\"already\\\");\\n        isExcludedFromMaxTransactionAmount[account] = isEx;\\n        emit ExcludedFromMaxTransactionAmount(account, isEx);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");   \\n        if (!inSwapAndLiquify && antiBotEnabled && !isExcludedFromFee[from] && !isExcludedFromFee[to]) {\\n            IGemAntiBot(gemAntiBot).onPreTransferCheck(from, to, amount);\\n        }     \\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        bool overMinimumTokenBalance = contractTokenBalance >=\\n            minAmountToTakeFee;\\n\\n        // Take Fee\\n        if (\\n            !inSwapAndLiquify &&\\n            overMinimumTokenBalance &&\\n            balanceOf(mainPair) > 0 &&\\n            automatedMarketMakerPairs[to]\\n        ) {\\n            takeFee();\\n        }\\n        removeAllFee();\\n\\n        // If any account belongs to isExcludedFromFee account then remove the fee\\n        if (\\n            !inSwapAndLiquify &&\\n            !isExcludedFromFee[from] &&\\n            !isExcludedFromFee[to]\\n        ) {\\n            // Buy\\n            if (automatedMarketMakerPairs[from]) {\\n                _rewardFee = buyRewardFee;\\n                _liquidityFee = buyLiquidityFee;\\n                _marketingFee = buyMarketingFee;\\n            }\\n            // Sell\\n            else if (automatedMarketMakerPairs[to]) {\\n                _rewardFee = sellRewardFee;\\n                _liquidityFee = sellLiquidityFee;\\n                _marketingFee = sellMarketingFee;\\n            }\\n        }\\n        _tokenTransfer(from, to, amount);\\n        restoreAllFee();\\n        if (!inSwapAndLiquify) {\\n            if (!isExcludedFromMaxTransactionAmount[from]) {\\n                require(\\n                    amount < maxTransactionAmount,\\n                    \\\"ERC20: exceeds transfer limit\\\"\\n                );\\n            }\\n            if (!isExcludedFromMaxTransactionAmount[to]) {\\n                require(\\n                    balanceOf(to) < maxWallet,\\n                    \\\"ERC20: exceeds max wallet limit\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    function takeFee() private lockTheSwap {\\n        uint256 contractBalance = balanceOf(address(this));\\n        uint256 totalTokensTaken = _liquidityFeeTokens+(_marketingFeeTokens);\\n        if (totalTokensTaken == 0 || contractBalance < totalTokensTaken) {\\n            return;\\n        }\\n\\n        // Halve the amount of liquidity tokens\\n        uint256 tokensForLiquidity = _liquidityFeeTokens / 2;\\n        uint256 initialBaseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance\\n            : IERC20(baseTokenForPair).balanceOf(address(this));\\n        uint256 baseTokenForLiquidity;\\n        if (isMarketingFeeBaseToken) {\\n            uint256 tokensForSwap=tokensForLiquidity+_marketingFeeTokens;\\n            if(tokensForSwap>0)\\n                swapTokensForBaseToken(tokensForSwap);\\n            uint256 baseTokenBalance = baseTokenForPair==mainRouter.WETH() ? address(this).balance-initialBaseTokenBalance\\n                : IERC20(baseTokenForPair).balanceOf(address(this))-initialBaseTokenBalance;\\n            uint256 baseTokenForMarketing = baseTokenBalance*(_marketingFeeTokens)/tokensForSwap;\\n            baseTokenForLiquidity = baseTokenBalance - baseTokenForMarketing;\\n            if(baseTokenForMarketing>0){\\n                if(baseTokenForPair==mainRouter.WETH()){\\n                    (bool success, )=address(marketingWallet).call{value: baseTokenForMarketing}(\\\"\\\");\\n                    if(success){                        \\n                        emit MarketingFeeTaken(0, baseTokenForMarketing);\\n                    }\\n                }else{\\n                    IERC20(baseTokenForPair).safeTransfer(marketingWallet, baseTokenForMarketing);\\n                    emit MarketingFeeTaken(0, baseTokenForMarketing);\\n                }                \\n            }            \\n        } else {\\n            if(tokensForLiquidity>0)\\n                swapTokensForBaseToken(tokensForLiquidity);\\n            baseTokenForLiquidity = baseTokenForPair==mainRouter.WETH() ? address(this).balance-initialBaseTokenBalance\\n                : IERC20(baseTokenForPair).balanceOf(address(this))-initialBaseTokenBalance;\\n            if(_marketingFeeTokens>0){\\n                _transfer(address(this), marketingWallet, _marketingFeeTokens);\\n                emit MarketingFeeTaken(_marketingFeeTokens, 0);\\n            }   \\n        }\\n\\n        if (tokensForLiquidity > 0 && baseTokenForLiquidity > 0) {\\n            addLiquidity(tokensForLiquidity, baseTokenForLiquidity);\\n            emit SwapAndLiquify(tokensForLiquidity, baseTokenForLiquidity);\\n        }\\n        _marketingFeeTokens = 0;\\n        _liquidityFeeTokens = 0;\\n        _transfer(address(this), owner(), balanceOf(address(this)));       \\n    }\\n    \\n    function swapTokensForBaseToken(uint256 tokenAmount) private {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = baseTokenForPair;\\n        if (path[1] == mainRouter.WETH()){\\n            mainRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                tokenAmount,\\n                0, // accept any amount of BaseToken\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n        }else{\\n            uniswapV2Caller.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    address(mainRouter),\\n                    tokenAmount,\\n                    0, // accept any amount of BaseToken\\n                    path,\\n                    block.timestamp\\n                );\\n        }\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 baseTokenAmount) private {\\n        if (baseTokenForPair == mainRouter.WETH()) \\n            mainRouter.addLiquidityETH{value: baseTokenAmount}(\\n                address(this),\\n                tokenAmount,\\n                0, // slippage is unavoidable\\n                0, // slippage is unavoidable\\n                address(0xdead),\\n                block.timestamp\\n            );\\n        else\\n            mainRouter.addLiquidity(\\n                address(this),\\n                baseTokenForPair,\\n                tokenAmount,\\n                baseTokenAmount,\\n                0,\\n                0,\\n                address(0xdead),\\n                block.timestamp\\n            );\\n    }\\n    function withdrawETH() external onlyOwner {\\n        (bool success, )=address(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Failed in withdrawal\\\");\\n    }\\n    function withdrawToken(address token) external onlyOwner{\\n        require(address(this) != token, \\\"Not allowed\\\");\\n        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"__decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[4]\",\"name\":\"_accounts\",\"type\":\"address[4]\"},{\"internalType\":\"bool\",\"name\":\"_isMarketingFeeBaseToken\",\"type\":\"bool\"},{\"internalType\":\"uint16[6]\",\"name\":\"_fees\",\"type\":\"uint16[6]\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeBaseTokenSwapped\",\"type\":\"uint256\"}],\"name\":\"MarketingFeeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensForLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenForLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellLiquidityFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"UpdateLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellMarketingFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"UpdateMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newIsMarketingFeeBaseToken\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldIsMarketingFeeBaseToken\",\"type\":\"bool\"}],\"name\":\"UpdateMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTransactionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinAmountToTakeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinAmountToTakeFee\",\"type\":\"uint256\"}],\"name\":\"UpdateMinAmountToTakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newSellRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBuyRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldSellRewardFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldBuyRewardFee\",\"type\":\"uint16\"}],\"name\":\"UpdateRewardFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenForPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeContract\",\"outputs\":[{\"internalType\":\"contract IFee\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemAntiBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMarketingFeeBaseToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToTakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"setUsingAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Caller\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Caller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint16\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellMarketingFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyMarketingFee\",\"type\":\"uint16\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMarketingFeeBaseToken\",\"type\":\"bool\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmountToTakeFee\",\"type\":\"uint256\"}],\"name\":\"updateMinAmountToTakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_sellRewardFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_buyRewardFee\",\"type\":\"uint16\"}],\"name\":\"updateRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseTokenForPair\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ReflectionTokenWithAntibot", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda100000000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000658ae7e13d357a94a97d7688eaf73f5e8619740b00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000c3bce28cc68136c16a15215c8b530e01db0368c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c47505265666c656374696f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034750520000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}