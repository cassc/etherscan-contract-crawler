{"SourceCode": "//\r\n// \r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\n/********************************************************************************************\r\n  INTERFACE\r\n********************************************************************************************/\r\n\r\ninterface IERC20 {\r\n    \r\n    // EVENT \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // FUNCTION\r\n\r\n    function name() external view returns (string memory);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IPair {\r\n\r\n    // FUNCTION\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IFactory {\r\n\r\n    // FUNCTION\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\r\n    // FUNCTION\r\n\r\n    function WETH() external pure returns (address);\r\n        \r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n    \r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface ICommonError {\r\n\r\n    // ERROR\r\n\r\n    error CannotUseCurrentAddress(address current);\r\n\r\n    error CannotUseCurrentValue(uint256 current);\r\n\r\n    error CannotUseCurrentState(bool current);\r\n\r\n    error InvalidAddress(address invalid);\r\n\r\n    error InvalidValue(uint256 invalid);\r\n}\r\n\r\n/********************************************************************************************\r\n  ACCESS\r\n********************************************************************************************/\r\n\r\nabstract contract Ownable {\r\n    \r\n    // DATA\r\n\r\n    address private _owner;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    // ERROR\r\n\r\n    error InvalidOwner(address account);\r\n\r\n    error UnauthorizedAccount(address account);\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    // EVENT\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // FUNCTION\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != msg.sender) {\r\n            revert UnauthorizedAccount(msg.sender);\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert InvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/********************************************************************************************\r\n  TOKEN\r\n********************************************************************************************/\r\n\r\ncontract PartyParrot is Ownable, ICommonError, IERC20 {\r\n\r\n    // DATA\r\n\r\n    IRouter public router;\r\n\r\n    string private constant NAME = \"deca\";\r\n    string private constant SYMBOL = \"deca\";\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public constant FEEDENOMINATOR = 10_000;\r\n\r\n    uint256 public buyFee = 0;\r\n    uint256 public buyBurnFee = 0;\r\n    uint256 public buyMarketingFee = 0;\r\n    uint256 public sellFee = 0;\r\n    uint256 public sellBurnFee = 0;\r\n    uint256 public sellMarketingFee = 0;\r\n    uint256 public transferFee = 0;\r\n    uint256 public transferBurnFee = 0;\r\n    uint256 public transferMarketingFee = 0;\r\n    uint256 public walletLimit = 1;\r\n    uint256 public walletLimitTime = 10 seconds;\r\n    uint256 public tradeStartTime = 0;\r\n    uint256 public totalFeeCollected = 0;\r\n    uint256 public totalFeeRedeemed = 0;\r\n    uint256 public totalTriggerZeusBuyback = 0;\r\n    uint256 public lastTriggerZeusTimestamp = 0;    \r\n    uint256 public minSwap = 1_000 ether;\r\n\r\n    bool private constant ISPARTYP = true;\r\n\r\n    bool public tradeEnabled = false;\r\n    bool public isFeeActive = false;\r\n    bool public isFeeLocked = false;\r\n    bool public isSwapEnabled = false;\r\n    bool public inSwap = false;\r\n\r\n    address public immutable PROJECTOWNER;\r\n    address public feeReceiver;\r\n\r\n    address public pair;\r\n    \r\n    // MAPPING\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludeFromFees;\r\n    mapping(address => bool) public isExcludeFromWalletLimits;\r\n    mapping(address => bool) public isPairLP;\r\n\r\n    // MODIFIER\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // ERROR\r\n\r\n    error InvalidTradeEnabledState(bool current);\r\n\r\n    error InvalidFeeActiveState(bool current);\r\n\r\n    error InvalidSwapEnabledState(bool current);\r\n\r\n    error PresaleAlreadyFinalized(bool current);\r\n\r\n    error ExceedMaxFeeAllowed(uint256 limit);\r\n\r\n    error ExceedWalletLimit(uint256 limit);\r\n\r\n    error TradeDisabled();\r\n\r\n    error CannotUseCurrentFees();\r\n\r\n    error FeeUpdateLocked();\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address feeReceiverAdr,\r\n        address routerAdr\r\n    ) Ownable (msg.sender) {\r\n        if (feeReceiverAdr == address(0)) {\r\n            revert InvalidAddress(feeReceiverAdr);\r\n        }\r\n        if (routerAdr == address(0)) {\r\n            revert InvalidAddress(routerAdr);\r\n        }\r\n        feeReceiver = feeReceiverAdr;\r\n        PROJECTOWNER = msg.sender;\r\n        _mint(msg.sender, 100_000_000 * 10**DECIMALS);\r\n\r\n        router = IRouter(routerAdr);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        isPairLP[pair] = true;\r\n\r\n        isExcludeFromFees[msg.sender] = true;\r\n        isExcludeFromFees[address(router)] = true;\r\n\r\n        isExcludeFromWalletLimits[msg.sender] = true;\r\n        isExcludeFromWalletLimits[pair] = true;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, address caller, uint256 timestamp);\r\n\r\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, address caller, uint256 timestamp);\r\n\r\n    event UpdateFeeActive(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event UpdateFeeLocked(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event UpdateFeeReceiver(address oldReceiver, address newReceiver, address caller, uint256 timestamp);\r\n\r\n    event UpdateBuyFee(uint256 oldBurnFee, uint256 oldMarketingFee, uint256 newBurnFee, uint256 newMarketingFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateSellFee(uint256 oldBurnFee, uint256 oldMarketingFee, uint256 newBurnFee, uint256 newMarketingFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateTransferFee(uint256 oldBurnFee, uint256 oldMarketingFee, uint256 newBurnFee, uint256 newMarketingFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n        \r\n    event AutoRedeem(uint256 feeDistribution, uint256 amountToRedeem, address caller, uint256 timestamp);\r\n\r\n    event EnableTrading(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event ExcludeFromFees(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n    \r\n    event ExcludeFromWalletLimits(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrading() external onlyOwner {\r\n        if (tradeEnabled) { revert InvalidTradeEnabledState(tradeEnabled); }\r\n        if (isFeeActive) { revert InvalidFeeActiveState(isFeeActive); }\r\n        if (isSwapEnabled) { revert InvalidSwapEnabledState(isSwapEnabled); }\r\n        tradeEnabled = true;\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n        tradeStartTime = block.timestamp;\r\n    }\r\n\r\n    /* Redeem */\r\n\r\n    function autoRedeem(uint256 amountToRedeem) public swapping {          \r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n        \r\n        emit AutoRedeem(amountToRedeem, amountToRedeem, msg.sender, block.timestamp);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            feeReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function isPartyParrot() external pure returns (bool) {\r\n        return ISPARTYP;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(address(0xdead)) - balanceOf(address(0));\r\n    }\r\n\r\n    function checkWalletLimit(uint256 amount, address to) public view {\r\n        uint256 limit = totalSupply() * walletLimit / FEEDENOMINATOR;\r\n        if ((tradeStartTime < 1 || block.timestamp - tradeStartTime < walletLimitTime) && !isExcludeFromWalletLimits[to]) {\r\n            if (balanceOf(to) + amount > limit) {\r\n                revert ExceedWalletLimit(limit);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getBuyFee() public view returns (uint256, uint256) {\r\n        uint256 diff = block.timestamp - tradeStartTime;\r\n        if (diff <= 3 minutes) {\r\n            return (100, 2_400);\r\n        }\r\n        if (diff > 3 minutes && diff <= 7 minutes) {\r\n            return (100, 900);\r\n        }\r\n        if (diff > 7 minutes && diff <= 460 seconds) {\r\n            return (0, 0);\r\n        }\r\n        return (buyBurnFee, buyMarketingFee);\r\n    }\r\n\r\n    function getSellFee() public view returns (uint256, uint256) {\r\n        uint256 diff = block.timestamp - tradeStartTime;\r\n        if (diff <= 3 minutes) {\r\n            return (100, 3_000);\r\n        }\r\n        if (diff > 3 minutes && diff <= 7 minutes) {\r\n            return (100, 900);\r\n        }\r\n        if (diff > 7 minutes && diff <= 460 seconds) {\r\n            return (100, 9_800);\r\n        }\r\n        return (sellBurnFee, sellMarketingFee);\r\n    }\r\n\r\n    function getTransferFee() public view returns (uint256, uint256) {\r\n        uint256 diff = block.timestamp - tradeStartTime;\r\n        if (diff <= 3 minutes) {\r\n            return (0, 0);\r\n        }\r\n        if (diff > 3 minutes && diff <= 7 minutes) {\r\n            return (0, 0);\r\n        }\r\n        if (diff > 7 minutes && diff <= 460 seconds) {\r\n            return (0, 0);\r\n        }\r\n        return (transferBurnFee, transferMarketingFee);\r\n    }\r\n\r\n    /* Update */\r\n\r\n    function updateRouter(address newRouter) external onlyOwner {\r\n        if (address(router) == newRouter) { revert CannotUseCurrentAddress(newRouter); }\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        \r\n        isExcludeFromFees[newRouter] = true;\r\n\r\n        emit UpdateRouter(oldRouter, newRouter, msg.sender, block.timestamp);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        isPairLP[pair] = true;\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external onlyOwner {\r\n        if (minSwap == newMinSwap) { revert CannotUseCurrentValue(newMinSwap); }\r\n        uint256 oldMinSwap = minSwap;\r\n        minSwap = newMinSwap;\r\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateFeeActive(bool newStatus) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\r\n        if (isFeeActive == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isFeeActive;\r\n        isFeeActive = newStatus;\r\n        emit UpdateFeeActive(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newBurnFee, uint256 newMarketingFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\r\n        if (newBurnFee == buyBurnFee && newMarketingFee == buyMarketingFee) { revert CannotUseCurrentFees(); }\r\n        if (newBurnFee + newMarketingFee >= 1_000) { revert ExceedMaxFeeAllowed(1_000); }\r\n        uint256 oldBurnFee = buyBurnFee;\r\n        uint256 oldMarketingFee = buyMarketingFee;\r\n        buyBurnFee = newBurnFee;\r\n        buyMarketingFee = newMarketingFee;\r\n        emit UpdateBuyFee(oldBurnFee, oldMarketingFee, newBurnFee, newMarketingFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateSellFee(uint256 newBurnFee, uint256 newMarketingFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\r\n        if (newBurnFee == sellBurnFee && newMarketingFee == sellMarketingFee) { revert CannotUseCurrentFees(); }\r\n        if (newBurnFee + newMarketingFee >= 1_000) { revert ExceedMaxFeeAllowed(1_000); }\r\n        uint256 oldBurnFee = sellBurnFee;\r\n        uint256 oldMarketingFee = sellMarketingFee;\r\n        sellBurnFee = newBurnFee;\r\n        sellMarketingFee = newMarketingFee;\r\n        emit UpdateSellFee(oldBurnFee, oldMarketingFee, newBurnFee, newMarketingFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateTransferFee(uint256 newBurnFee, uint256 newMarketingFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeUpdateLocked(); }\r\n        if (newBurnFee == transferBurnFee && newMarketingFee == transferMarketingFee) { revert CannotUseCurrentFees(); }\r\n        if (newBurnFee + newMarketingFee >= 1_000) { revert ExceedMaxFeeAllowed(1_000); }\r\n        uint256 oldBurnFee = transferBurnFee;\r\n        uint256 oldMarketingFee = transferMarketingFee;\r\n        transferBurnFee = newBurnFee;\r\n        transferMarketingFee = newMarketingFee;\r\n        emit UpdateTransferFee(oldBurnFee, oldMarketingFee, newBurnFee, newMarketingFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateFeeReceiver(address newReceiver) external onlyOwner {\r\n        if (feeReceiver == newReceiver) { revert CannotUseCurrentAddress(newReceiver); }\r\n        address oldReceiver = feeReceiver;\r\n        feeReceiver = newReceiver;\r\n        emit UpdateFeeReceiver(oldReceiver, newReceiver, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateSwapEnabled(bool newStatus) external onlyOwner {\r\n        if (isSwapEnabled == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isSwapEnabled;\r\n        isSwapEnabled = newStatus;\r\n        emit UpdateSwapEnabled(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromFees(address user, bool newStatus) external onlyOwner {\r\n        if (isExcludeFromFees[user] == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isExcludeFromFees[user];\r\n        isExcludeFromFees[user] = newStatus;\r\n        emit ExcludeFromFees(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromWalletLimits(address user, bool newStatus) external onlyOwner {\r\n        if (isExcludeFromWalletLimits[user] == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isExcludeFromWalletLimits[user];\r\n        isExcludeFromWalletLimits[user] = newStatus;\r\n        emit ExcludeFromWalletLimits(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setPairLP(address lpPair, bool status) external onlyOwner {\r\n        if (isPairLP[lpPair] == status) { revert CannotUseCurrentState(status); }\r\n        if (IPair(lpPair).token0() != address(this) && IPair(lpPair).token1() != address(this)) { revert InvalidAddress(lpPair); }\r\n        isPairLP[lpPair] = status;\r\n    }\r\n\r\n    /* Fee */\r\n\r\n    function takeBuyFee(address from, uint256 amount, uint256 burn, uint256 marketing) internal swapping returns (uint256) {\r\n        uint256 burnAmount = amount * burn / FEEDENOMINATOR;\r\n        uint256 marketingAmount = amount * marketing / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - burnAmount - marketingAmount;\r\n        if (burnAmount + marketingAmount > 0) {\r\n            tallyCollection(from, burnAmount, marketingAmount);\r\n        }\r\n        return newAmount;\r\n    }\r\n\r\n    function takeSellFee(address from, uint256 amount, uint256 burn, uint256 marketing) internal swapping returns (uint256) {\r\n        uint256 burnAmount = amount * burn / FEEDENOMINATOR;\r\n        uint256 marketingAmount = amount * marketing / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - burnAmount - marketingAmount;\r\n        if (burnAmount + marketingAmount > 0) {\r\n            tallyCollection(from, burnAmount, marketingAmount);\r\n        }\r\n        return newAmount;\r\n    }\r\n\r\n    function takeTransferFee(address from, uint256 amount, uint256 burn, uint256 marketing) internal swapping returns (uint256) {\r\n        uint256 burnAmount = amount * burn / FEEDENOMINATOR;\r\n        uint256 marketingAmount = amount * marketing / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - burnAmount - marketingAmount;\r\n        if (burnAmount + marketingAmount > 0) {\r\n            tallyCollection(from, burnAmount, marketingAmount);\r\n        }\r\n        return newAmount;\r\n    }\r\n\r\n    function tallyCollection(address from, uint256 collectBurnFee, uint256 collectMarketingFee) internal swapping {\r\n        uint256 totalFee = collectBurnFee + collectMarketingFee;\r\n        totalFeeCollected += totalFee;\r\n        totalFeeRedeemed += collectBurnFee;\r\n        _basicTransfer(from, address(0xdead), collectBurnFee);\r\n        _basicTransfer(from, address(this), collectMarketingFee);\r\n    }\r\n\r\n    /* Buyback */\r\n\r\n    function triggerZeusBuyback(uint256 amount) external onlyOwner {\r\n        totalTriggerZeusBuyback += amount;\r\n        lastTriggerZeusTimestamp = block.timestamp;\r\n        buyTokens(amount, address(0xdead));\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        if (msg.sender == address(0xdead)) { revert InvalidAddress(address(0xdead)); }\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        } (0, path, to, block.timestamp);\r\n    }\r\n\r\n    /* ERC20 Standard */\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return NAME;\r\n    }\r\n    \r\n    function symbol() external view virtual override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    function decimals() external view virtual override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        return _transfer(provider, to, amount);\r\n    }\r\n    \r\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[provider][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        return _transfer(from, to, amount);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(provider, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        if (account == address(0)) { revert InvalidAddress(account); }\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\r\n        if (provider == address(0)) { revert InvalidAddress(provider); }\r\n        if (spender == address(0)) { revert InvalidAddress(spender); }\r\n\r\n        _allowances[provider][spender] = amount;\r\n        emit Approval(provider, spender, amount);\r\n    }\r\n    \r\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(provider, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Additional */\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Overrides */\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\r\n        if (from == address(0)) { revert InvalidAddress(from); }\r\n        if (to == address(0)) { revert InvalidAddress(to); }\r\n\r\n        if (!tradeEnabled && !isExcludeFromFees[from] && !isExcludeFromFees[to]) {\r\n            revert TradeDisabled();\r\n        }\r\n\r\n        if (inSwap || isExcludeFromFees[from]) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if (from != pair && isSwapEnabled && balanceOf(address(this)) >= minSwap && totalFeeCollected - totalFeeRedeemed >= minSwap) {\r\n            autoRedeem(minSwap);\r\n        }\r\n\r\n        uint256 newAmount = amount;\r\n\r\n        if (isFeeActive && !isExcludeFromFees[from] && !isExcludeFromFees[to]) {\r\n            newAmount = _beforeTokenTransfer(from, to, amount);\r\n        }\r\n\r\n        checkWalletLimit(newAmount, to);\r\n\r\n        require(_balances[from] >= newAmount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = _balances[from] - newAmount;\r\n            _balances[to] += newAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, newAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {\r\n        uint256 burn = 0;\r\n        uint256 marketing = 0;\r\n        \r\n        if (isPairLP[from]) {\r\n            (burn, marketing) = getBuyFee();\r\n            if (burn + marketing > 0) {\r\n                return takeBuyFee(from, amount, burn, marketing);\r\n            }\r\n        }\r\n        if (isPairLP[to]) {\r\n            (burn, marketing) = getSellFee();\r\n            if (burn + marketing > 0) {\r\n                return takeSellFee(from, amount, burn, marketing);\r\n            }\r\n        }\r\n        if (!isPairLP[from] && !isPairLP[to]) {\r\n            (burn, marketing) = getTransferFee();\r\n            if (burn + marketing > 0) {\r\n                return takeTransferFee(from, amount, burn, marketing);\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverAdr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAdr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"CannotUseCurrentAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotUseCurrentFees\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"CannotUseCurrentState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"CannotUseCurrentValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxFeeAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ExceedWalletLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeUpdateLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalid\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidFeeActiveState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidSwapEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidTradeEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalid\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"PresaleAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TradeDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ExcludeFromWalletLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECTOWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkWalletLimit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromWalletLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPairLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPartyParrot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTriggerZeusTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"setExcludeFromWalletLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpPair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPairLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTriggerZeusBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLimitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PartyParrot", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a9ea3fd97f651bf8f99c733ae483c5fc6d209e300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4edd9ab6a96db1ad0c218eedaefc36c089c0b7967e6534295981fe9ca0d5efde"}