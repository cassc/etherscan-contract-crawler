{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.6;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n// import \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n// import \"@openzeppelin/contracts/utils/Counters.sol\";\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\ncontract NFTMasterMarket is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Counters for Counters.Counter;\r\n\r\n    address[] public adminList;\r\n\r\n    address public BASEADDRESS;\r\n\r\n    address[] public allowedPayTokens;\r\n\r\n    /* fee */\r\n    address public feeTo;\r\n\r\n    // fee pay token list (token > fee)\r\n    mapping(address => uint256) public feePayTokenList;\r\n    \r\n    // copyright type\r\n    uint256 public copyrightType = 1;\r\n\r\n    /* owner miner === type = 1 */\r\n    // nft owner miner (NFTtoken > rate)\r\n    mapping(address => uint256) public ownerMinerFeeRate;\r\n\r\n    /* original miner === type = 2 */\r\n    uint256 public oriMinerFeeRate;\r\n\r\n    // nft original miner (NFTtoken > tokenId > address)\r\n    mapping(address => mapping(uint256 => address)) public originMiner;\r\n\r\n    constructor() public {\r\n        adminList.push(msg.sender);\r\n        BASEADDRESS = address(1);\r\n\r\n        feeTo = msg.sender;\r\n    }\r\n\r\n    /* admin */\r\n    // set admin list\r\n    function setAdminList(address[] memory _list) public nonReentrant onlyOwner {\r\n        require(_list.length > 0, \"NONEMPTY_ADDRESS_LIST\");\r\n        \r\n        for ( uint256 nIndex = 0; nIndex < _list.length; nIndex++){\r\n            require(_list[nIndex] != address(0), \"ADMIN_NONEMPTY_ADDRESS\");\r\n        }\r\n        adminList = _list;\r\n    }\r\n\r\n    // get admin list\r\n    function getAdminList() public view returns (address[] memory) {\r\n        return adminList;\r\n    }\r\n\r\n    function onlyAdminCheck(address _adminAddress) internal view returns (bool) {\r\n        for ( uint256 nIndex = 0; nIndex < adminList.length; nIndex++){\r\n            if (adminList[nIndex] == _adminAddress) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(onlyAdminCheck(msg.sender) == true, \"ONLY_ADMIN_OPERATE\");\r\n\r\n        _;\r\n    }\r\n\r\n    /* pay info */\r\n    // add pay token allow\r\n    function addAllowedPayTokens(address _token) public onlyAdmin nonReentrant {\r\n        require(_token != address(0), \"NONEMPTY_ADDRESS\");\r\n        require(checkPayTokenIsAllowed(_token) == false, \"TOKEN_ALREADY_ALLOWED\");\r\n        allowedPayTokens.push(_token);\r\n    }\r\n    \r\n    // check pay token allow\r\n    function checkPayTokenIsAllowed(address _token) public view returns (bool) {\r\n        for (uint256 _index = 0; _index < allowedPayTokens.length; _index++) {\r\n            if (allowedPayTokens[_index] == _token) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /* fee */\r\n    // set feeTo\r\n    function setFeeTo(address _feeTo) public onlyAdmin nonReentrant {\r\n        require(_feeTo != address(0), \"NONEMPTY_ADDRESS\");\r\n        feeTo = _feeTo;\r\n    }\r\n\r\n    // get feeTo\r\n    function getFeeTo() public view returns (address) {\r\n        return feeTo;\r\n    }\r\n    \r\n    // set pay token fee\r\n    function setPayTokenFee(address token, uint256 amount) public onlyAdmin nonReentrant {\r\n        require(token != address(0), \"NONEMPTY_ADDRESS\");\r\n        require(checkPayTokenIsAllowed(token), \"TOKEN_NOT_ALLOWED\");\r\n        require(amount < 5000, \"AMOUNT_OVERFLOW\");\r\n        \r\n        feePayTokenList[token] = amount;\r\n    }\r\n    \r\n    // get pay token fee\r\n    function getPayTokenFee(address token) public view returns (uint256) {\r\n        return feePayTokenList[token];\r\n    }\r\n\r\n    /* owners miner */\r\n    // set owner miner fee\r\n    function setOwnerMinerFeeRate(address[] memory _tokenList, uint256[] memory _rateList) public onlyAdmin nonReentrant {\r\n        require(_tokenList.length > 0, \"NONEMPTY_ADDRESS_LIST\");\r\n        require(_tokenList.length == _rateList.length, \"INCONSISTENT_LENGTH\");\r\n\r\n        for ( uint256 _dd = 0; _dd < _tokenList.length; _dd++){\r\n            address _token = _tokenList[_dd];\r\n            uint256 _rate = _rateList[_dd];\r\n            require(_token != address(0), \"NONEMPTY_ADDRESS\");\r\n            require(_rate < 5000, \"AMOUNT_OVERFLOW\");\r\n            ownerMinerFeeRate[_token] = _rate;\r\n        }\r\n    }\r\n\r\n    // get owner miner fee\r\n    function getOwnerMinerFeeRate(address _token) public view returns (uint256) {\r\n        require(_token != address(0), \"NONEMPTY_ADDRESS\");\r\n        return ownerMinerFeeRate[_token];\r\n    }\r\n\r\n    /* original miner */\r\n    // set original miner fee\r\n    function setOriMinerFeeRate(uint256 _rate) public onlyAdmin nonReentrant {\r\n        require(_rate < 5000, \"AMOUNT_OVERFLOW\");\r\n        oriMinerFeeRate = _rate;\r\n    }\r\n\r\n    // get original miner fee\r\n    function getOriMinerFeeRate() public view returns (uint256) {\r\n        return oriMinerFeeRate;\r\n    }\r\n\r\n    // set original miner\r\n    function setOriMiner(address[] memory _tokenList, uint256[] memory _tokenIdList, address[] memory _oriAddressList) public onlyAdmin nonReentrant {\r\n        require(_tokenList.length > 0, \"NONEMPTY_ADDRESS_LIST\");\r\n        require((_tokenList.length == _tokenIdList.length) && (_tokenList.length == _oriAddressList.length), \"INCONSISTENT_LENGTH\");\r\n\r\n        for ( uint256 _dd = 0; _dd < _tokenList.length; _dd++){\r\n            address _token = _tokenList[_dd];\r\n            uint256 _tokenId = _tokenIdList[_dd];\r\n            address _oriAddress = _oriAddressList[_dd];\r\n            require(_token != address(0), \"NONEMPTY_ADDRESS\");\r\n            originMiner[_token][_tokenId] = _oriAddress;\r\n        }\r\n    }\r\n\r\n    // get original miner\r\n    function getOriMiner(address _token, uint256 _tokenId) public view returns (address) {\r\n        require(_token != address(0), \"NONEMPTY_ADDRESS\");\r\n        return originMiner[_token][_tokenId];\r\n    }\r\n\r\n    /* other */\r\n    // set copyright type\r\n    function setCopyrightType(uint256 _type) public onlyAdmin nonReentrant {\r\n        require(_type > 0, \"TYPE_ERROR\");\r\n        copyrightType = _type;\r\n    }\r\n\r\n    // get copyright rate\r\n    function getCopyrightRate(address _token) public view returns (uint256) {\r\n        uint256 _rate = 0;\r\n        if ( copyrightType == 1 ) {\r\n            _rate = ownerMinerFeeRate[_token];\r\n        } else {\r\n            _rate = oriMinerFeeRate;\r\n        }\r\n        return _rate;\r\n    }\r\n\r\n    /* order */    \r\n    // order id\r\n    Counters.Counter public _orderIds;\r\n\r\n    // order info\r\n    struct OrderInfo{\r\n        uint256 OrderId;\r\n        address OrderOwner;\r\n        address NFTToken;\r\n        uint256[] TokenID;\r\n        address PayToken;\r\n        uint256 PayAmount;\r\n        uint256 SoldStatus;// 0-sold out, 1-sold, 2-be sold\r\n    }\r\n    \r\n    // order list (orderID > orderInfo)\r\n    mapping(uint256 => OrderInfo) public orderList;\r\n    \r\n    // order id list\r\n    uint256[] public orderIdList;\r\n    \r\n    // check orderid is existed\r\n    function orderIdIsExisted(uint256 _orderId) public view returns (bool){\r\n        bool isExisted = false;\r\n        if (orderList[_orderId].OrderId == _orderId) {\r\n            return true;\r\n        }\r\n        return isExisted;\r\n    }\r\n\r\n    // get order info\r\n    function getOrderInfo(uint256 _orderID) public view returns (uint256, address, address, uint256[] memory, address, uint256, uint256) {\r\n        uint256 _id = _orderID;\r\n        uint256 _orderId = orderList[_id].OrderId;\r\n        address _orderOwner = orderList[_id].OrderOwner;\r\n        address _nftToken = orderList[_id].NFTToken;\r\n        uint256[] memory _tokenID = orderList[_id].TokenID;\r\n        address _payToken = orderList[_id].PayToken;\r\n        uint256 _payAmount = orderList[_id].PayAmount;\r\n        uint256 _soldStatus = orderList[_id].SoldStatus;\r\n        return (_orderId, _orderOwner, _nftToken, _tokenID, _payToken, _payAmount, _soldStatus);\r\n    }\r\n\r\n    // order\r\n    event SoldOrder(address _user, address _token, uint256[] _tokenIDList, address _payToken, uint256 _payAmount, uint256 _orderID);\r\n    event SoldOutOrder(address _user, address _token, uint256[] _tokenIDList, uint256 _orderID);\r\n    event PurchaseOrder(address _user, address _recipient, address _token, uint256[] _tokenIDList, address _payToken, uint256 _payAmount, uint256 _orderID);\r\n    event PurchaseOrderMutil(address _user, uint256[] _orderIDList);\r\n    event TransferMutil(address _user, address _recipient, address _token, uint256[] _tokenIDList);\r\n    \r\n    // sold order\r\n    function soldOrder(address _token, uint256[] memory _tokenIDList, address _payToken, uint256 _payAmount) public nonReentrant returns (uint256) {\r\n        require(_tokenIDList.length > 0, \"NONEMPTY_TOKEN_LIST\");\r\n        require((_token != address(0)) && (_payToken != address(0)) && (_token != _payToken), \"TOKEN_ERROR\");\r\n\r\n        require(checkPayTokenIsAllowed(_payToken), \"PAY_TOKEN_NOT_ALLOWED\");\r\n        require(_payAmount > 0, \"PAY_AMOUNT_ERROR\");\r\n\r\n        for( uint256 _d = 0; _d < _tokenIDList.length; _d++ ) {\r\n            require(IERC721(_token).ownerOf(_tokenIDList[_d]) == msg.sender, \"NFT_NOT_OWNER\");\r\n        }\r\n        \r\n        _orderIds.increment();\r\n        uint256 newOrderId = _orderIds.current();\r\n        \r\n        orderIdList.push(newOrderId);\r\n        orderList[newOrderId] = OrderInfo(newOrderId, msg.sender, _token, _tokenIDList, _payToken, _payAmount, 1);\r\n\r\n        for( uint256 _i = 0; _i < _tokenIDList.length; _i++ ) {\r\n            IERC721(_token).transferFrom(msg.sender, address(this), _tokenIDList[_i]);\r\n        }\r\n        \r\n        emit SoldOrder(msg.sender, _token, _tokenIDList, _payToken, _payAmount, newOrderId);\r\n\r\n        return newOrderId;\r\n    }\r\n    \r\n    // sold out order\r\n    function soldOutOrder(uint256 _orderID) public nonReentrant {\r\n        require(_orderID > 0, \"ORDER_ERROR\");\r\n        require(orderIdIsExisted(_orderID), \"ORDER_NOT_EXISTED\");\r\n        require(orderList[_orderID].OrderOwner == msg.sender, \"ORDER_OWNER_ERROR\");\r\n        require(orderList[_orderID].SoldStatus == 1, \"ORDER_CANNOT_OPERATE\");\r\n        \r\n        orderList[_orderID].SoldStatus = 0;\r\n        \r\n        address _token = orderList[_orderID].NFTToken;\r\n        uint256[] memory _tokenIDList = orderList[_orderID].TokenID;\r\n\r\n        for(uint256 _i = 0; _i < _tokenIDList.length; _i++){\r\n            IERC721(_token).safeTransferFrom(address(this), msg.sender, _tokenIDList[_i]);\r\n        }\r\n        \r\n        emit SoldOutOrder(msg.sender, _token, _tokenIDList, _orderID);\r\n    }\r\n    \r\n    // calculate arrival amount\r\n    function calculateArrivalAmount(uint256 amount, address token) public view returns (uint256 tokenFee, uint256 amountValid, uint256 rate) {\r\n        require(amount > 0, \"AMOUNT_ERROR\");\r\n        require(token != address(0), \"NONEMPTY_ADDRESS\");\r\n        require(checkPayTokenIsAllowed(token), \"PAY_TOKEN_NOT_ALLOWED\");\r\n\r\n        rate = feePayTokenList[token];\r\n        if(rate > 0){\r\n            tokenFee = amount.mul(rate).div(10000);\r\n            amountValid = amount.sub(tokenFee);\r\n        }else{\r\n            tokenFee = 0;\r\n            amountValid = amount;\r\n        }\r\n    }\r\n    \r\n    // purchase order\r\n    function purchaseOrder(uint256 _orderID) public payable nonReentrant {\r\n        require(_orderID > 0, \"ORDER_ERROR\");\r\n        require(orderIdIsExisted(_orderID), \"ORDER_NOT_EXISTED\");\r\n        require(orderList[_orderID].SoldStatus == 1, \"ORDER_CANNOT_OPERATE\");\r\n        \r\n        orderList[_orderID].SoldStatus = 2;\r\n\r\n        _purchaseOrder(_orderID, true);\r\n    }\r\n\r\n    // purchase order process\r\n    function _purchaseOrder(uint256 orderID, bool checkBaseStatus) private {\r\n        uint256 _orderID = orderList[orderID].OrderId;\r\n        address _payToken = orderList[_orderID].PayToken;\r\n        uint256 _payAmount = orderList[_orderID].PayAmount;\r\n        address _orderOwner = orderList[_orderID].OrderOwner;\r\n        address _nftToken = orderList[_orderID].NFTToken;\r\n        uint256[] memory _tokenID = orderList[_orderID].TokenID;\r\n        \r\n        // calculate arrival amount\r\n        (uint256 tokenFee, uint256 amountValid, uint256 rate) = calculateArrivalAmount(_payAmount, _payToken);\r\n            \r\n        if( _payToken == BASEADDRESS ){\r\n            if ( checkBaseStatus ) {\r\n                require(msg.value == _payAmount, \"PAY_AMOUNT_ERROR\");\r\n            }\r\n            \r\n            if( (tokenFee > 0) && (rate > 0) && (feeTo != address(0)) ){\r\n                address payable _feeTo = address(uint160(feeTo));\r\n                _feeTo.transfer(tokenFee);\r\n            }\r\n\r\n            if ( copyrightType == 1 ) {\r\n                uint256 _rateTotal = ownerMinerFeeRate[_nftToken];\r\n                address _nftOwner = Ownable(_nftToken).owner();\r\n                if( (_rateTotal > 0) && (_nftOwner != address(0)) ){\r\n                    uint256 _payAmountTotal = _payAmount;\r\n                    uint256 _ownerFee = _payAmountTotal.mul(_rateTotal).div(10000);\r\n                    if( _ownerFee > 0 ){\r\n                        address payable _ownerFeeTo = address(uint160(_nftOwner));\r\n                        if( amountValid >= _ownerFee ) {\r\n                            _ownerFeeTo.transfer(_ownerFee);\r\n                            amountValid = amountValid.sub(_ownerFee);\r\n                        } else {\r\n                            _ownerFeeTo.transfer(amountValid);\r\n                            amountValid = 0;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                uint256 _tokenIDLen = _tokenID.length;\r\n                uint256 _oriMinerFeeRateEach = oriMinerFeeRate.div(_tokenIDLen);\r\n                if( _oriMinerFeeRateEach > 0 ){\r\n                    uint256 _payAmountTotal = _payAmount;\r\n                    for(uint256 _dd = 0; _dd < _tokenIDLen; _dd++){\r\n                        address _originMiner = originMiner[_nftToken][_tokenID[_dd]];\r\n                        if( _originMiner != address(0) ){\r\n                            uint256 _oriFee = _payAmountTotal.mul(_oriMinerFeeRateEach).div(10000);\r\n                            if( _oriFee > 0) {\r\n                                address payable _oriFeeTo = address(uint160(_originMiner));\r\n                                if( amountValid >= _oriFee ) {\r\n                                    _oriFeeTo.transfer(_oriFee);\r\n                                    amountValid = amountValid.sub(_oriFee);\r\n                                } else {\r\n                                    _oriFeeTo.transfer(amountValid);\r\n                                    amountValid = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            address payable _orderOwnerAddress = address(uint160(_orderOwner));\r\n            _orderOwnerAddress.transfer(amountValid);\r\n            \r\n        } else {\r\n            // other token\r\n            if( (tokenFee > 0) && (rate > 0) && (feeTo != address(0)) ){\r\n                IERC20(_payToken).safeTransferFrom(msg.sender, feeTo, tokenFee);\r\n            }\r\n\r\n            if ( copyrightType == 1 ) {\r\n                uint256 _rateTotal = ownerMinerFeeRate[_nftToken];\r\n                address _nftOwner = Ownable(_nftToken).owner();\r\n                if( (_rateTotal > 0) && (_nftOwner != address(0)) ){\r\n                    uint256 _payAmountTotal = _payAmount;\r\n                    uint256 _ownerFee = _payAmountTotal.mul(_rateTotal).div(10000);\r\n                    if( _ownerFee > 0 ){\r\n                        address _payTokenAddr = _payToken;\r\n                        if( amountValid >= _ownerFee ) {\r\n                            IERC20(_payTokenAddr).safeTransferFrom(msg.sender, _nftOwner, _ownerFee);\r\n                            amountValid = amountValid.sub(_ownerFee);\r\n                        } else {\r\n                            IERC20(_payTokenAddr).safeTransferFrom(msg.sender, _nftOwner, amountValid);\r\n                            amountValid = 0;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                uint256 _tokenIDLen = _tokenID.length;\r\n                uint256 _oriMinerFeeRateEach = oriMinerFeeRate.div(_tokenIDLen);\r\n                if( _oriMinerFeeRateEach > 0 ){\r\n                    address _payTokenAddr = _payToken;\r\n                    uint256 _payAmountTotal = _payAmount;\r\n                    for(uint256 _dd = 0; _dd < _tokenIDLen; _dd++){\r\n                        address _originMiner = originMiner[_nftToken][_tokenID[_dd]];\r\n                        if( _originMiner != address(0) ){\r\n                            uint256 _oriFee = _payAmountTotal.mul(_oriMinerFeeRateEach).div(10000);\r\n                            if( _oriFee > 0 ) {\r\n                                if( amountValid >= _oriFee ) {\r\n                                    IERC20(_payTokenAddr).safeTransferFrom(msg.sender, _originMiner, _oriFee);\r\n                                    amountValid = amountValid.sub(_oriFee);\r\n                                } else {\r\n                                    IERC20(_payTokenAddr).safeTransferFrom(msg.sender, _originMiner, amountValid);\r\n                                    amountValid = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            IERC20(_payToken).safeTransferFrom(msg.sender, _orderOwner, amountValid);\r\n        }\r\n\r\n        for(uint256 _i = 0; _i < _tokenID.length; _i++){\r\n            IERC721(_nftToken).safeTransferFrom(address(this), msg.sender, _tokenID[_i]);\r\n        }\r\n\r\n        emit PurchaseOrder(_orderOwner, msg.sender, _nftToken, _tokenID, _payToken, _payAmount, _orderID);\r\n    }\r\n\r\n    // purchase order mutil\r\n    function purchaseOrderMutil(uint256[] memory _orderIDList) public payable nonReentrant {\r\n        uint256 _orderIDListLen = _orderIDList.length;\r\n        require(_orderIDListLen > 0, \"NONEMPTY_ORDER_LIST\");\r\n\r\n        uint256 _payBaseAmount = 0;\r\n        for ( uint256 _dd = 0; _dd < _orderIDListLen; _dd++ ) {\r\n            uint256 _orderID = _orderIDList[_dd];\r\n            require(_orderID > 0, \"ORDER_ERROR\");\r\n            require(orderIdIsExisted(_orderID), \"ORDER_NOT_EXISTED\");\r\n            require(orderList[_orderID].SoldStatus == 1, \"ORDER_CANNOT_OPERATE\");\r\n            require(orderList[_orderID].TokenID.length == 1, \"ORDER_TOKEN_ID_ERROR\");\r\n\r\n            address _payToken = orderList[_orderID].PayToken;\r\n            // check orderId repetition\r\n            if( (_dd > 0) && (_orderIDListLen > 1) ){\r\n                uint256 _tmp = _dd.sub(1);\r\n                require(_orderIDList[_tmp] != _orderIDList[_dd], \"ORDER_ERROR\");\r\n\r\n                address _payTokenTmp = orderList[_orderIDList[_tmp]].PayToken;\r\n                require(_payToken == _payTokenTmp, \"ORDER_PAY_TOKEN_ERROR\");\r\n            }\r\n\r\n            if( _payToken == BASEADDRESS ) {\r\n                uint256 _payAmount = orderList[_orderID].PayAmount;\r\n                _payBaseAmount = _payBaseAmount.add(_payAmount);\r\n            }\r\n\r\n            orderList[_orderID].SoldStatus = 2;\r\n        }\r\n\r\n        // check base pay amount\r\n        if( _payBaseAmount > 0 ){\r\n            require(msg.value == _payBaseAmount, \"PAY_BASE_AMOUNT_ERROR\");\r\n        }\r\n\r\n        // transfer\r\n        for ( uint256 _index = 0; _index < _orderIDListLen; _index++ ) {\r\n            uint256 _orderID = _orderIDList[_index];\r\n            _purchaseOrder(_orderID, false);\r\n        }\r\n\r\n        emit PurchaseOrderMutil(msg.sender, _orderIDList);\r\n    }\r\n\r\n    // transfer mutil\r\n    function transferMutil(address _recipient, address _token, uint256[] memory _tokenIDList) public nonReentrant {\r\n        require(_tokenIDList.length > 0, \"NONEMPTY_TOKEN_LIST\");\r\n\r\n        for( uint256 _d = 0; _d < _tokenIDList.length; _d++ ) {\r\n            require(IERC721(_token).ownerOf(_tokenIDList[_d]) == msg.sender, \"NFT_NOT_OWNER\");\r\n        }\r\n\r\n        for( uint256 _i = 0; _i < _tokenIDList.length; _i++ ) {\r\n            IERC721(_token).safeTransferFrom(msg.sender, _recipient, _tokenIDList[_i]);\r\n        }\r\n        \r\n        emit TransferMutil(msg.sender, _recipient, _token, _tokenIDList);\r\n    }\r\n\r\n    // get user nft mutil\r\n    function getUserNftMutil(address[] memory _tokenList, address _user) public view returns(address[] memory, uint256[] memory) {\r\n        uint256 _tokenListlen = _tokenList.length;\r\n        require(_tokenListlen > 0, \"TOKEN_ERROR\");\r\n        require(_user != address(0), \"NONEMPTY_ADDRESS\");\r\n\r\n        uint256 _tokenIdListlen = 0;\r\n\r\n        uint256[] memory _balanceList = new uint256[](_tokenListlen);\r\n        for ( uint256 _d = 0; _d < _tokenListlen; _d++ ) {\r\n            address _token = _tokenList[_d];\r\n            require(_token != address(0), \"NONEMPTY_ADDRESS\");\r\n\r\n            uint256 _balance = IERC721(_token).balanceOf(_user);\r\n            _balanceList[_d] = _balance;\r\n\r\n            _tokenIdListlen = _tokenIdListlen.add(_balance);\r\n        }\r\n\r\n        uint256[] memory _tokenIdList = new uint256[](_tokenIdListlen);\r\n        address[] memory _tokenListFormat = new address[](_tokenIdListlen);\r\n        uint256 _tmp = 0;\r\n        for ( uint256 _dd = 0; _dd < _tokenListlen; _dd++ ) {\r\n            address _token = _tokenList[_dd];\r\n            uint256 _balance = _balanceList[_dd];\r\n\r\n            if ( _balance > 0 ){\r\n                for ( uint256 _ind = 0; _ind < _balance; _ind++ ) {\r\n                    _tokenListFormat[_tmp] = _token;\r\n                    _tokenIdList[_tmp] = IERC721Enumerable(_token).tokenOfOwnerByIndex(_user, _ind);\r\n                    _tmp = _tmp.add(1);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (_tokenListFormat, _tokenIdList);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIDList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"PurchaseOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_orderIDList\",\"type\":\"uint256[]\"}],\"name\":\"PurchaseOrderMutil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIDList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"SoldOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIDList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"SoldOutOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenIDList\",\"type\":\"uint256[]\"}],\"name\":\"TransferMutil\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASEADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_orderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addAllowedPayTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adminList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedPayTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateArrivalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountValid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"checkPayTokenIsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"copyrightType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feePayTokenList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getCopyrightRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"getOrderInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOriMiner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOriMinerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getOwnerMinerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPayTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserNftMutil\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"orderIdIsExisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OrderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"OrderOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"NFTToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"PayToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"PayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SoldStatus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oriMinerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"originMiner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerMinerFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"purchaseOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_orderIDList\",\"type\":\"uint256[]\"}],\"name\":\"purchaseOrderMutil\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"setAdminList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"setCopyrightType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTo\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_oriAddressList\",\"type\":\"address[]\"}],\"name\":\"setOriMiner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setOriMinerFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rateList\",\"type\":\"uint256[]\"}],\"name\":\"setOwnerMinerFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPayTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDList\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payAmount\",\"type\":\"uint256\"}],\"name\":\"soldOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"soldOutOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDList\",\"type\":\"uint256[]\"}],\"name\":\"transferMutil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFTMasterMarket", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://067fe5c41760bcf6cb48d746ca47e8235fccefbdee2a2f65988a6db700aef03e"}