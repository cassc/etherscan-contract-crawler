{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DevFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract DevFeeManager is Ownable {\\r\\n    struct TokenInfo {\\r\\n        IERC20 lpToken;\\r\\n        uint256 oldBalance;\\r\\n        uint256 runningTotal;\\r\\n    }\\r\\n\\r\\n    TokenInfo[] public tokenInfo;\\r\\n    address[] public users;\\r\\n    address[] public usersTemp;\\r\\n    uint256 public stageBlock;\\r\\n    mapping(address => uint256) public allocation; //number between 0 and 10000 (0.00% and 100.00%)\\r\\n    mapping(address => uint256) public allocationTemp; //number between 0 and 10000 (0.00% and 100.00%)\\r\\n    mapping(address => bool) public addedTokens;\\r\\n    mapping(uint256 => mapping(address => uint256)) tokensClaimed;\\r\\n    address public multiSigOne = address(0);\\r\\n    address public multiSigTwo = address(0);\\r\\n    mapping(address => bool) public signed;\\r\\n\\r\\n    modifier onlySigner() {\\r\\n        require(msg.sender == multiSigOne || msg.sender == multiSigTwo);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function initialize(\\r\\n        address[] memory _address,\\r\\n        uint256[] memory _allocations,\\r\\n        address _multiSigOne,\\r\\n        address _multiSigTwo\\r\\n    ) public onlyOwner {\\r\\n        require(multiSigOne == address(0) && multiSigTwo == address(0));\\r\\n        require(_multiSigOne != address(0) && _multiSigTwo != address(0));\\r\\n        require(verifyAllocations(_address, _allocations));\\r\\n        for (uint256 i = 0; i < _allocations.length; i++) {\\r\\n            allocation[_address[i]] = _allocations[i];\\r\\n            users.push(_address[i]);\\r\\n        }\\r\\n        multiSigOne = _multiSigOne;\\r\\n        multiSigTwo = _multiSigTwo;\\r\\n    }\\r\\n\\r\\n    function verifyAllocations(\\r\\n        address[] memory _address,\\r\\n        uint256[] memory _allocations\\r\\n    ) public pure returns (bool) {\\r\\n        if (_address.length != _allocations.length) {\\r\\n            return false;\\r\\n        }\\r\\n        uint256 sum = 0;\\r\\n        for (uint256 i = 0; i < _allocations.length; i++) {\\r\\n            sum += _allocations[i];\\r\\n        }\\r\\n        return sum == 10000;\\r\\n    }\\r\\n\\r\\n    function Sign() public {\\r\\n        require(msg.sender == multiSigOne || msg.sender == multiSigTwo);\\r\\n        require(!signed[msg.sender]);\\r\\n        require(block.number - stageBlock > 50);\\r\\n        signed[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function Unsign() public {\\r\\n        require(msg.sender == multiSigOne || msg.sender == multiSigTwo);\\r\\n        require(signed[msg.sender]);\\r\\n        signed[msg.sender] = false;\\r\\n    }\\r\\n\\r\\n    function updateEarned() public {\\r\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\r\\n            uint256 tokenBalance = tokenInfo[i].lpToken.balanceOf(\\r\\n                address(this)\\r\\n            );\\r\\n            uint256 tokenEarned = tokenBalance - tokenInfo[i].oldBalance;\\r\\n            tokenInfo[i].oldBalance = tokenBalance;\\r\\n            tokenInfo[i].runningTotal += tokenEarned;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimForUser(address user) private {\\r\\n        claimForUserHelper(user, 0, tokenInfo.length);\\r\\n    }\\r\\n\\r\\n    function widthdraw() public {\\r\\n        updateEarned();\\r\\n        claimForUser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function widthdrawAll() public {\\r\\n        updateEarned();\\r\\n        for (uint256 j = 0; j < users.length; j++) {\\r\\n            claimForUser(users[j]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimForUserHelper(\\r\\n        address user,\\r\\n        uint256 tokensStart,\\r\\n        uint256 tokensEnd\\r\\n    ) private {\\r\\n        for (uint256 i = tokensStart; i < tokensEnd; i++) {\\r\\n            uint256 allocatedTokens = (allocation[user] *\\r\\n                tokenInfo[i].runningTotal) /\\r\\n                10000 -\\r\\n                tokensClaimed[i][user];\\r\\n            if (allocatedTokens != 0) {\\r\\n                tokenInfo[i].lpToken.transfer(user, allocatedTokens);\\r\\n                tokenInfo[i].oldBalance -= allocatedTokens;\\r\\n                tokensClaimed[i][user] += allocatedTokens;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function widthdraw(uint256 tokensStart, uint256 tokensEnd) public {\\r\\n        updateEarned();\\r\\n        claimForUserHelper(msg.sender, tokensStart, tokensEnd);\\r\\n    }\\r\\n\\r\\n    function widthdrawAll(uint256 tokensStart, uint256 tokensEnd) public {\\r\\n        updateEarned();\\r\\n        for (uint256 j = 0; j < users.length; j++) {\\r\\n            claimForUserHelper(users[j], tokensStart, tokensEnd);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stageUserAllocationChanges(\\r\\n        address[] memory _address,\\r\\n        uint256[] memory _allocations\\r\\n    ) public onlyOwner {\\r\\n        require(verifyAllocations(_address, _allocations));\\r\\n        usersTemp = _address;\\r\\n        for (uint256 i = 0; i < _allocations.length; i++) {\\r\\n            allocationTemp[_address[i]] = _allocations[i];\\r\\n        }\\r\\n        signed[multiSigOne] = false;\\r\\n        signed[multiSigTwo] = false;\\r\\n        stageBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function setUserAllocationChanges() public {\\r\\n        require(signed[multiSigOne] && signed[multiSigTwo]);\\r\\n        widthdrawAll();\\r\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\r\\n            tokenInfo[i].runningTotal = 0;\\r\\n            tokenInfo[i].oldBalance = 0;\\r\\n            for (uint256 j = 0; j < users.length; j++) {\\r\\n                tokensClaimed[i][users[j]] = 0;\\r\\n            }\\r\\n        }\\r\\n        users = usersTemp;\\r\\n        for (uint256 i = 0; i < usersTemp.length; i++) {\\r\\n            allocation[users[i]] = allocationTemp[users[i]];\\r\\n        }\\r\\n        signed[multiSigOne] = false;\\r\\n        signed[multiSigTwo] = false;\\r\\n    }\\r\\n\\r\\n    function setUserAllocationChangesNoWithdraw() public {\\r\\n        require(signed[multiSigOne] && signed[multiSigTwo]);\\r\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\r\\n            tokenInfo[i].runningTotal = 0;\\r\\n            tokenInfo[i].oldBalance = 0;\\r\\n            for (uint256 j = 0; j < users.length; j++) {\\r\\n                tokensClaimed[i][users[j]] = 0;\\r\\n            }\\r\\n        }\\r\\n        users = usersTemp;\\r\\n        for (uint256 i = 0; i < usersTemp.length; i++) {\\r\\n            allocation[users[i]] = allocationTemp[users[i]];\\r\\n        }\\r\\n        signed[multiSigOne] = false;\\r\\n        signed[multiSigTwo] = false;\\r\\n    }\\r\\n\\r\\n    function addTokens(address[] memory _address) public onlySigner {\\r\\n        for (uint256 i = 0; i < _address.length; i++) {\\r\\n            require(!addedTokens[_address[i]], \\\"cant add dupe Token\\\");\\r\\n            tokenInfo.push(\\r\\n                TokenInfo({\\r\\n                    lpToken: IERC20(_address[i]),\\r\\n                    runningTotal: 0,\\r\\n                    oldBalance: 0\\r\\n                })\\r\\n            );\\r\\n            addedTokens[_address[i]] = true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Sign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Unsign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"}],\"name\":\"addTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocationTemp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_multiSigOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_multiSigTwo\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSigTwo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUserAllocationChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUserAllocationChangesNoWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stageBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"stageUserAllocationChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runningTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateEarned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usersTemp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_address\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocations\",\"type\":\"uint256[]\"}],\"name\":\"verifyAllocations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensEnd\",\"type\":\"uint256\"}],\"name\":\"widthdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensEnd\",\"type\":\"uint256\"}],\"name\":\"widthdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DevFeeManager", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}