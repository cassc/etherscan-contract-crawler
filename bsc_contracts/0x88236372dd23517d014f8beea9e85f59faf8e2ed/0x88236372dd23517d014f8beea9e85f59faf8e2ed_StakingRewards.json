{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/libs/Address.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// File: contracts/libs/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IDeployStakingParams.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IDeployStakingParams {\r\n    struct DeployStakingParams {\r\n        address factory;\r\n        address creator;\r\n        address pair;\r\n        address stakingToken;\r\n        address rewardToken;\r\n        uint periodDuration;\r\n        uint rewardRate;\r\n        uint startTime;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IStakingFactory.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IStakingFactory is IDeployStakingParams {\r\n\r\n    function deployParams() external view returns(DeployStakingParams memory paras);\r\n\r\n    function WETH() external view returns(address);\r\n\r\n    function factoryOwner() external view returns(address);\r\n\r\n    // function isAdmin(address account) external view returns(address);\r\n\r\n    function swapRouter() external view returns(address);\r\n\r\n    function isRewardOperator(address account) external view returns(bool);\r\n\r\n    function isRewardSigner(address account) external view returns(bool);\r\n}\r\n\r\n// File: contracts/swap-interfaces/ISwapRouter.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISwapRouter {\r\n    function factory() external view returns(address);\r\n\r\n    function WETH() external view returns(address);\r\n\r\n    function creatorOf(address pair) external view returns(address);\r\n\r\n    function baseTokenOf(address pair) external view returns(address);\r\n\r\n    function sellUserRateOf(address pair) external view returns(uint);\r\n\r\n    function sellLpRateOf(address pair) external view returns(uint);\r\n\r\n    function sellOtherFeesLengthOf(address pair) external view returns(uint);\r\n\r\n    function sellOtherFeeToOf(address pair,uint index) external view returns(address);\r\n\r\n    function sellOtherFeeRateOf(address pair,uint index) external view returns(uint);\r\n\r\n    function sellLpReceiverOf(address pair) external;\r\n\r\n    function sellBurnRateOf(address pair) external view returns(uint);\r\n\r\n    function sellStopBurnSupplyOf(address pair) external view returns(uint);\r\n\r\n    function isWhiteList(address pair,address account) external view returns(bool);\r\n\r\n    function setSellLpReceiver(address pair,address receiver) external;\r\n\r\n    function setWhiteList(address pair,address account,bool status) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n// File: contracts/swap-interfaces/IWETH.sol\r\n\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n// File: contracts/libs/Context.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n// File: contracts/libs/Pausable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/StakingRewards.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingRewards is Pausable,ReentrancyGuard,IDeployStakingParams {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint private constant RATE_PERCISION = 10000;\r\n    // address private constant ETHAddress = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    address private immutable factory;\r\n    address private creator;\r\n    address private immutable pair;\r\n    address private immutable stakingToken;\r\n    address private immutable rewardToken;\r\n    uint private immutable periodDuration;\r\n    uint private rewardRate;\r\n    uint private immutable startTime;\r\n\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n    bytes32 public constant WITHDRAW_REWARDS_PERMIT_TYPEHASH = keccak256(\"claim(address account,address token,uint256 amount,uint256 rand)\");\r\n    bytes32 public constant NOTIFY_REWARDS_PERMIT_TYPEHASH = keccak256(\"notifyRewards(uint256 epoch)\");\r\n    bytes32 public immutable DOMAIN_SEPARATOR;\r\n\r\n    mapping(uint256 => bool) public isUsedRand;\r\n    mapping(uint256 => bool) public isNotifiedEpoch;\r\n\r\n    event Staked(address user,uint amount,uint blockTime);\r\n    event RewardPaid(address user, address token,uint256 reward,uint rand,uint blockTime);\r\n    event SwapedRewards(uint removedLpAmount,uint remainLpAmount,uint rewardAmount, uint blockTime);\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == creator,\"caller must be creator\");\r\n        _;\r\n    }\r\n\r\n    constructor() {        \r\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\"StakingRewards\")), block.chainid, address(this)));\r\n\r\n        DeployStakingParams memory paras = IStakingFactory(msg.sender).deployParams();\r\n        factory = paras.factory;\r\n        creator = paras.creator;\r\n        pair = paras.pair;\r\n        stakingToken = paras.stakingToken;\r\n        rewardToken = paras.rewardToken;\r\n        periodDuration = paras.periodDuration;\r\n        rewardRate = paras.rewardRate;\r\n        startTime = paras.startTime;\r\n\r\n        address router = IStakingFactory(msg.sender).swapRouter();\r\n        IERC20(paras.stakingToken).safeApprove(router,type(uint256).max); \r\n        IERC20(paras.rewardToken).safeApprove(router,type(uint256).max);\r\n        IERC20(paras.pair).safeApprove(router,type(uint256).max);\r\n    }\r\n\r\n    function stake(uint amount) external payable whenNotPaused nonReentrant {\r\n        require(amount > 0,\"amount can not be 0\");\r\n        require(block.timestamp >= startTime,\"not start\");\r\n        uint receivedAmount = _transferFrom(msg.sender,stakingToken,amount);\r\n\r\n        _addLiquidity(receivedAmount);\r\n\r\n        emit Staked(msg.sender, receivedAmount, block.timestamp);\r\n    }\r\n\r\n    function claim(address account, uint amount,uint rand,uint8 v,bytes32 r,bytes32 s) external whenNotPaused nonReentrant {\r\n        require(account != address(0),\"account can not be address 0\");\r\n        require(amount > 0,\"amount can not be 0\");\r\n        require(rand > 0,\"rand can not be 0\");\r\n        require(account == msg.sender,\"caller must be account\");\r\n        require(!isUsedRand[rand],\"rand used\");\r\n        isUsedRand[rand] = true;\r\n    \r\n        address signatory = recoverWithdrawRewardsSign(account,rewardToken,amount,rand,v,r,s);\r\n        require(signatory != address(0), \"invalid signature\");\r\n        require(IStakingFactory(factory).isRewardSigner(signatory), \"unauthorized\");\r\n\r\n        _transferTo(rewardToken,account,amount);\r\n\r\n        emit RewardPaid(account,rewardToken, amount,rand,block.timestamp);\r\n    }\r\n\r\n    function recoverWithdrawRewardsSign(address account,address token, uint amount,uint rand,uint8 v,bytes32 r,bytes32 s) public view returns(address){\r\n        bytes32 structHash = keccak256(abi.encode(WITHDRAW_REWARDS_PERMIT_TYPEHASH, account, token, amount, rand));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n\r\n        return signatory;\r\n    }\r\n\r\n    function notifyRewards(uint epoch,uint8 v,bytes32 r,bytes32 s) external nonReentrant {\r\n        require(_calcPeriodStart(startTime,periodDuration).add(epoch.mul(periodDuration)) <= block.timestamp,\"can not notify future rewards\");\r\n        require(!isNotifiedEpoch[epoch],\"notified\");\r\n        isNotifiedEpoch[epoch] = true;\r\n        address signer = recoverNotifyRewardsSign(epoch,v,r,s);\r\n        require(IStakingFactory(factory).isRewardOperator(signer),\"unauthorized\");\r\n\r\n        uint lpAmount = IERC20(pair).balanceOf(address(this)).mul(rewardRate) / RATE_PERCISION;\r\n        uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\r\n        _removeLiquidityForRewards(lpAmount);\r\n        uint rewardAmount = IERC20(rewardToken).balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        emit SwapedRewards(lpAmount,IERC20(pair).balanceOf(address(this)),rewardAmount,block.timestamp);\r\n    }\r\n\r\n    function recoverNotifyRewardsSign(uint epoch,uint8 v,bytes32 r,bytes32 s) public view returns(address){\r\n        bytes32 structHash = keccak256(abi.encode(NOTIFY_REWARDS_PERMIT_TYPEHASH, epoch));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n\r\n        return signatory;\r\n    }\r\n    \r\n    function _transferFrom(address from,address token,uint amount) internal returns(uint receivedAmount){\r\n        address weth = IStakingFactory(factory).WETH();\r\n        if(token == weth){\r\n            require(msg.value >= amount,\"insufficient input value\");\r\n            IWETH(weth).deposit{value : msg.value}();\r\n            return msg.value;\r\n        }\r\n\r\n        uint beforeBalance = IERC20(token).balanceOf(address(this));\r\n        IERC20(token).transferFrom(from, address(this), amount);\r\n        return IERC20(token).balanceOf(address(this)).sub(beforeBalance);\r\n    }\r\n\r\n    function _transferTo(address token,address to,uint amount) internal {\r\n        address weth = IStakingFactory(factory).WETH();\r\n        if(token == weth){\r\n            IWETH(weth).withdraw(amount);\r\n            _safeTransferETH(to,amount);\r\n        }else{\r\n            IERC20(token).safeTransfer(to,amount);\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint stakeAmount) internal {\r\n        uint stakingTokenAmount = stakeAmount / 2;\r\n        ISwapRouter router = ISwapRouter(IStakingFactory(factory).swapRouter());\r\n        address[] memory path = new address[](2);\r\n        path[0] = stakingToken;\r\n        path[1] = rewardToken;\r\n        uint balanceBefore = IERC20(rewardToken).balanceOf(address(this));\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(stakingTokenAmount,1,path,address(this),type(uint256).max);\r\n        uint swapedAmount = IERC20(rewardToken).balanceOf(address(this)).sub(balanceBefore);\r\n\r\n        router.addLiquidity(stakingToken, rewardToken, stakingTokenAmount, swapedAmount, 1, 1, address(this), type(uint256).max);\r\n    }\r\n\r\n    function _removeLiquidityForRewards(uint lpAmount) internal {\r\n        if(lpAmount == 0){\r\n            return;\r\n        }\r\n        ISwapRouter router = ISwapRouter(IStakingFactory(factory).swapRouter());\r\n        router.removeLiquidity(stakingToken, rewardToken, lpAmount, 1, 1, address(this), type(uint256).max);\r\n        address[] memory path = new address[](2);\r\n        path[0] = stakingToken;\r\n        path[1] = rewardToken;\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(IERC20(path[0]).balanceOf(address(this)),1,path,address(this),type(uint256).max);\r\n    }\r\n\r\n    function _calcPeriodStart(uint _utcTime, uint _periodDuration) internal pure returns(uint){\r\n        uint utcPeriodStart = _utcTime - (_utcTime % _periodDuration);\r\n\r\n        return utcPeriodStart - 28800;\r\n    }\r\n\r\n    function _safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n\r\n    function setRewardRate(uint _rate) external onlyCreator {\r\n        require(_rate <= RATE_PERCISION,\"rate too large\");\r\n        rewardRate = _rate;\r\n    }\r\n\r\n    function takeToken(address token,address to,uint amount) external onlyCreator {\r\n        require(msg.sender == creator,\"caller must be creator\");\r\n        if(token == address(0) || token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)){\r\n            _safeTransferETH(to,amount);\r\n        }else{\r\n            IERC20(token).safeTransfer(to,amount);\r\n        }\r\n    }\r\n\r\n    function setPauseStatus(bool _paused) external {\r\n        require(msg.sender == creator || msg.sender == IStakingFactory(factory).factoryOwner(),\"caller must be creator\");\r\n        if(_paused){\r\n            _pause();\r\n        }else{\r\n            _unpause();\r\n        }\r\n    }\r\n\r\n    function transferCreator(address newCreator) external {\r\n        require(newCreator != address(0),\"new creator can not be address 0\");\r\n        require(msg.sender == creator || msg.sender == IStakingFactory(factory).factoryOwner(),\"caller must be creator\");\r\n        creator = newCreator;\r\n    }\r\n\r\n    function infos() external view returns(\r\n        address _factory,\r\n        address _creator,\r\n        address _pair,\r\n        address _stakingToken,\r\n        address _rewardToken,\r\n        uint _periodDuration,\r\n        uint _rewardRate,\r\n        uint _startTime\r\n    ){\r\n        _factory = factory;\r\n        _creator = creator;\r\n        _pair = pair;\r\n        _stakingToken = stakingToken;\r\n        _rewardToken = rewardToken;\r\n        _periodDuration = periodDuration;\r\n        _rewardRate = rewardRate;\r\n        _startTime = startTime;\r\n    }\r\n}\r\n// File: contracts/libs/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: contracts/swap-interfaces/ISwapERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISwapERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n// File: contracts/swap-interfaces/ISwapPair.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface ISwapPair is ISwapERC20 {\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n\r\n    function burnToken(address token,uint amount) external;\r\n}\r\n// File: contracts/swap-interfaces/ISwapFactory.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISwapFactory {\r\n\r\n    function initCodeHash() external view returns (bytes32);\r\n\r\n    function feeTo() external view returns(address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint index) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function swapFee() external view returns (uint256);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function liquidityFee() external view returns(uint256);\r\n\r\n    function sortTokens(address tokenA, address tokenB) external view returns (address token0, address token1);\r\n\r\n    function pairFor(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\r\n\r\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external view returns (uint256 amountB);\r\n\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut, address token0, address token1) external view returns (uint256 amountOut);\r\n\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut, address token0, address token1) external view returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function router() external view returns(address);\r\n}\r\n// File: contracts/StakingFactory.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract CfoTakeableV2 is Ownable {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public cfo;\r\n\r\n    modifier onlyCfoOrOwner {\r\n        require(msg.sender == cfo || msg.sender == owner(),\"onlyCfo: forbidden\");\r\n        _;\r\n    }\r\n\r\n    constructor(){\r\n        cfo = msg.sender;\r\n    }\r\n\r\n    function takeToken(address token,address to,uint256 amount) public onlyCfoOrOwner {\r\n        require(token != address(0),\"invalid token\");\r\n        require(amount > 0,\"amount can not be 0\");\r\n        require(to != address(0),\"invalid to address\");\r\n        IERC20(token).safeTransfer(to, amount);\r\n    }\r\n\r\n    function takeETH(address to,uint256 amount) public onlyCfoOrOwner {\r\n        require(amount > 0,\"amount can not be 0\");\r\n        require(address(this).balance>=amount,\"insufficient balance\");\r\n        require(to != address(0),\"invalid to address\");\r\n        \r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function takeAllToken(address token, address to) public {\r\n        uint balance = IERC20(token).balanceOf(address(this));\r\n        if(balance > 0){\r\n            takeToken(token, to, balance);\r\n        }\r\n    }\r\n\r\n    function takeAllETH(address to) public {\r\n        uint balance = address(this).balance;\r\n        if(balance > 0){\r\n            takeETH(to, balance);\r\n        }\r\n    }\r\n\r\n    function setCfo(address _cfo) external onlyOwner {\r\n        require(_cfo != address(0),\"_cfo can not be address 0\");\r\n        cfo = _cfo;\r\n    }\r\n}\r\n\r\ncontract StakingFactory is CfoTakeableV2,ReentrancyGuard,IStakingFactory {\r\n    using SafeERC20 for IERC20;\r\n\r\n    uint private constant RATE_PERCISION = 10000;\r\n\r\n    DeployStakingParams private tempDeployParams;\r\n\r\n    address public override swapRouter;\r\n    mapping(address => bool) public override isRewardOperator;\r\n    mapping(address => bool) public override isRewardSigner;\r\n    mapping(uint256 => address) public allStakings;\r\n    uint public allStakingsLength;\r\n    mapping(address => uint256) public stakingIndexOf;\r\n    mapping(address => address) public pairStakingOf;\r\n\r\n    uint public createETHFee;\r\n\r\n    event StakingCreated(address caller,address stakingPool,uint blockTime);\r\n\r\n    constructor(\r\n        address _swapRouter\r\n    ){\r\n        require(_swapRouter!=address(0),\"swap router can not be address 0\");\r\n        swapRouter = _swapRouter;\r\n    }\r\n\r\n    function create(\r\n        address pair,\r\n        uint periodDuration,\r\n        uint rewardRate,\r\n        uint initLpAmount,\r\n        uint startTime\r\n    ) external payable nonReentrant {\r\n        require(msg.value >= createETHFee,\"insufficient input value\");\r\n        require(pair != address(0),\"invalid pair\");\r\n        require(pairStakingOf[pair] == address(0),\"pair staking pool already existed\");\r\n        address stakingToken = ISwapRouter(swapRouter).baseTokenOf(pair);\r\n        require(stakingToken != address(0),\"invalid pair: 2\");\r\n        require(ISwapPair(pair).factory() == ISwapRouter(swapRouter).factory(),\"invalid pair: 3\");\r\n        require(periodDuration >= 60 && periodDuration % 60 == 0,\"invalid period duration\");\r\n        require(rewardRate <= RATE_PERCISION,\"invalid reward rate\");\r\n        require(initLpAmount > 0,\"init lp amount can not be 0\");\r\n        require(startTime >= block.timestamp,\"invalid start time\");\r\n        require(ISwapRouter(swapRouter).creatorOf(pair) == msg.sender,\"caller must be pair creator\");\r\n\r\n        address rewardToken;\r\n        {\r\n            (address t0,address t1) = (ISwapPair(pair).token0(),ISwapPair(pair).token1());\r\n            rewardToken = stakingToken == t0 ? t1 : t0;\r\n        }\r\n\r\n        tempDeployParams.creator = msg.sender;\r\n        tempDeployParams.factory = address(this);\r\n        tempDeployParams.pair = pair;\r\n        tempDeployParams.stakingToken = stakingToken;\r\n        tempDeployParams.rewardToken = rewardToken;\r\n        tempDeployParams.periodDuration = periodDuration;\r\n        tempDeployParams.rewardRate = rewardRate;\r\n        tempDeployParams.startTime = startTime;\r\n\r\n        address stakingPool = address(new StakingRewards{\r\n            salt: keccak256(abi.encode(stakingToken, rewardToken, allStakingsLength))\r\n        }());\r\n        IERC20(pair).safeTransferFrom(msg.sender,stakingPool,initLpAmount);\r\n        delete tempDeployParams;\r\n\r\n        pairStakingOf[pair] = stakingPool;\r\n        ISwapRouter(swapRouter).setSellLpReceiver(pair,stakingPool);\r\n        ISwapRouter(swapRouter).setWhiteList(pair,stakingPool,true);\r\n\r\n        uint len = allStakingsLength;\r\n        allStakings[len] = stakingPool;\r\n        stakingIndexOf[stakingPool] = len;\r\n        allStakingsLength = len + 1;\r\n\r\n        emit StakingCreated(msg.sender,stakingPool,block.timestamp);\r\n    }\r\n\r\n    function factoryOwner() external view override returns(address){\r\n        return owner();\r\n    }\r\n\r\n    function deployParams() external view override returns(DeployStakingParams memory){\r\n        DeployStakingParams memory item = tempDeployParams;\r\n        return item;\r\n    }\r\n\r\n    function WETH() external view override returns(address){\r\n        return ISwapRouter(swapRouter).WETH();\r\n    }\r\n\r\n    function setRewardOperator(address account,bool status) external onlyOwner {\r\n        require(account!=address(0),\"account can not be address 0\");\r\n        isRewardOperator[account] = status;\r\n    }\r\n\r\n    function setRewardSigner(address account,bool status) external onlyOwner {\r\n        require(account!=address(0),\"account can not be address 0\");\r\n        isRewardSigner[account] = status;\r\n    }\r\n\r\n    function setCreateETHFee(uint fee) external onlyOwner {\r\n        createETHFee = fee;        \r\n    }\r\n\r\n    function setSwapRouter(address _swapRouter) external onlyOwner {\r\n        swapRouter = _swapRouter;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removedLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainLpAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"SwapedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NOTIFY_REWARDS_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_REWARDS_PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isNotifiedEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isUsedRand\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"notifyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverNotifyRewardsSign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rand\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"recoverWithdrawRewardsSign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPauseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCreator\",\"type\":\"address\"}],\"name\":\"transferCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a3277056c4cfe060303b671b80be22f0ec1282323f6bfe144e14a58fb0aa05ad"}