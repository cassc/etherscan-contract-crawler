{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/vip/interfaces/ILock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\ninterface ILock {\\r\\n    function locking(address account, uint256 lock) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/nft/vip/pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"./interfaces/ILock.sol\\\";\\r\\nimport \\\"contracts/util/console.sol\\\";\\r\\n\\r\\ncontract TokenReceiver {\\r\\n    //\u56de\u6d41\\r\\n    constructor(address token) {\\r\\n        IERC20(token).approve(msg.sender, type(uint256).max);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract VIPPOOL is IERC721Receiver {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    enum opreate {\\r\\n        stake,\\r\\n        upStake,\\r\\n        claim\\r\\n    }\\r\\n\\r\\n    struct StakedInfo {\\r\\n        uint index;\\r\\n        uint stakedAmount;\\r\\n        uint updateTime;\\r\\n        uint available;\\r\\n        uint accruedReward;\\r\\n    }\\r\\n    struct expInfo {\\r\\n        address user;\\r\\n        uint endTime;\\r\\n        uint count;\\r\\n    }\\r\\n    StakedInfo public globalStakedInfo;\\r\\n    mapping(address => StakedInfo) public userStakedInfos;\\r\\n\\r\\n    mapping(address => uint[]) public ownerTokens;\\r\\n    mapping(uint => address) public tokenToAddress;\\r\\n\\r\\n    expInfo[] public globalExpInfo;\\r\\n\\r\\n    address public owner;\\r\\n    address public card;\\r\\n    address public asdic;\\r\\n    address public lock;\\r\\n    address public tokenReceiver;\\r\\n\\r\\n    uint public startTime;\\r\\n    uint public yearHalfCount;\\r\\n    uint public yearHalfAmount = 15000000e18;\\r\\n    uint public expLastIn;\\r\\n    uint public subHalfTime = 365 days;\\r\\n    uint public backFlowAmount;\\r\\n    uint public expireTime = 365 days;\\r\\n\\r\\n    constructor(address _asdic, address _lock, address _card) {\\r\\n        owner = msg.sender;\\r\\n        asdic = _asdic;\\r\\n        lock = _lock;\\r\\n        card = _card;\\r\\n        IERC20(asdic).approve(lock, type(uint).max);\\r\\n        tokenReceiver = address(new TokenReceiver(_asdic));\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setSubHalfTima(uint _time) external onlyOwner {\\r\\n        require(_time > 0, \\\"SubHalfTime less than zero\\\");\\r\\n        subHalfTime = _time;\\r\\n    }\\r\\n\\r\\n    function setToken(address _token) external onlyOwner {\\r\\n        asdic = _token;\\r\\n    }\\r\\n\\r\\n    function setExpireTime(uint _expireTime) external onlyOwner {\\r\\n        expireTime = _expireTime;\\r\\n    }\\r\\n\\r\\n    function setOwner(address _address) external onlyOwner returns (bool) {\\r\\n        require(_address != address(0), \\\"Pool Owner address can not zero\\\");\\r\\n        owner = _address;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function getOwnerTokens(\\r\\n        address account\\r\\n    ) external view returns (uint[] memory) {\\r\\n        return ownerTokens[account];\\r\\n    }\\r\\n\\r\\n    function expire() public returns (bool) {\\r\\n        uint cTime = block.timestamp;\\r\\n        expInfo[] storage infoExp = globalExpInfo;\\r\\n\\r\\n        StakedInfo storage infoGlo = globalStakedInfo;\\r\\n\\r\\n        StakedInfo storage infoUser;\\r\\n\\r\\n        uint _yearhalf = halfYear();\\r\\n        uint release;\\r\\n        uint value;\\r\\n        for (\\r\\n            uint i = 0;\\r\\n            infoExp.length > expLastIn &&\\r\\n                i < 20 &&\\r\\n                infoExp[expLastIn].endTime <= cTime;\\r\\n            i++\\r\\n        ) {\\r\\n            infoUser = userStakedInfos[infoExp[expLastIn].user];\\r\\n            release = _yearhalf.mul(\\r\\n                infoExp[expLastIn].endTime.sub(infoGlo.updateTime)\\r\\n            );\\r\\n\\r\\n            release = release.div(infoGlo.stakedAmount);\\r\\n            infoGlo.index += release;\\r\\n            infoGlo.updateTime = infoExp[expLastIn].endTime;\\r\\n\\r\\n            //********************************************************* */\\r\\n\\r\\n            value = infoGlo.index.sub(infoUser.index);\\r\\n\\r\\n            value = value.mul(infoUser.stakedAmount);\\r\\n\\r\\n            infoUser.available += value;\\r\\n\\r\\n            infoUser.index = infoGlo.index;\\r\\n\\r\\n            //*********************************************************** */\\r\\n\\r\\n            infoGlo.stakedAmount -= infoExp[expLastIn].count;\\r\\n            infoUser.stakedAmount -= infoExp[expLastIn].count;\\r\\n\\r\\n            infoUser = userStakedInfos[infoExp[expLastIn].user];\\r\\n            expLastIn++;\\r\\n\\r\\n            if (expLastIn >= infoExp.length) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (expLastIn < infoExp.length) {\\r\\n            if (infoExp[expLastIn].endTime <= cTime) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateIndex(opreate _oprea, uint count) internal {\\r\\n        StakedInfo storage info = globalStakedInfo;\\r\\n        uint _time = block.timestamp;\\r\\n        if (info.updateTime == 0 || info.stakedAmount == 0) {\\r\\n            info.updateTime = _time;\\r\\n            info.stakedAmount += count;\\r\\n            halfYear();\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint release = halfYear();\\r\\n        release = release.mul(_time - info.updateTime);\\r\\n        release = release.div(info.stakedAmount);\\r\\n        info.index += release;\\r\\n\\r\\n        if (_oprea == opreate.stake) {\\r\\n            info.stakedAmount += count;\\r\\n        }\\r\\n        info.updateTime = _time;\\r\\n    }\\r\\n\\r\\n    function updateUserIndex(\\r\\n        address user,\\r\\n        opreate _oprea,\\r\\n        uint count,\\r\\n        uint endTime\\r\\n    ) internal {\\r\\n        StakedInfo storage info = userStakedInfos[user];\\r\\n        uint time = block.timestamp;\\r\\n        uint value;\\r\\n        info.updateTime = time;\\r\\n\\r\\n        value = info.stakedAmount.mul(globalStakedInfo.index - info.index);\\r\\n\\r\\n        info.available += value;\\r\\n\\r\\n        if (_oprea == opreate.stake) {\\r\\n            info.stakedAmount += count;\\r\\n            info.index = globalStakedInfo.index;\\r\\n\\r\\n            globalExpInfo.push(\\r\\n                expInfo({user: user, endTime: endTime, count: count})\\r\\n            );\\r\\n        }\\r\\n\\r\\n        info.index = globalStakedInfo.index;\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        address sender = msg.sender;\\r\\n        if (!expire()) return; // \u672a\u5c06\u5230\u671f\u6e05\u7406\u5b8c\\r\\n\\r\\n        updateIndex(opreate.claim, 0);\\r\\n        updateUserIndex(sender, opreate.claim, 0, 0);\\r\\n\\r\\n        StakedInfo storage userStakedInfo = userStakedInfos[sender];\\r\\n\\r\\n        if (userStakedInfo.available > 0) {\\r\\n            uint temp = userStakedInfo.available;\\r\\n            IERC20(asdic).transfer(sender, temp.mul(30).div(100));\\r\\n            ILock(lock).locking(sender, temp.mul(70).div(100));\\r\\n            userStakedInfo.accruedReward += temp;\\r\\n            userStakedInfo.available = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function halfYear() internal returns (uint) {\\r\\n        require(subHalfTime > 0, \\\"SubHalf time error\\\");\\r\\n        startTime = startTime == 0 ? block.timestamp : startTime;\\r\\n        uint yearCount = (block.timestamp - startTime).div(subHalfTime);\\r\\n        uint value;\\r\\n        if (yearHalfCount <= yearCount) {\\r\\n            yearHalfCount = yearCount + 1;\\r\\n            uint backflow = IERC20(asdic).balanceOf(address(tokenReceiver));\\r\\n            if (backflow > 0) {\\r\\n                IERC20(asdic).transferFrom(\\r\\n                    tokenReceiver,\\r\\n                    address(this),\\r\\n                    backflow.div(2)\\r\\n                );\\r\\n                backFlowAmount = backflow.div(2);\\r\\n            }\\r\\n\\r\\n            yearHalfAmount = yearHalfAmount.div(2);\\r\\n        }\\r\\n        value = backFlowAmount + yearHalfAmount;\\r\\n        return value.div(subHalfTime);\\r\\n    }\\r\\n\\r\\n    function getHalfYear() internal view returns (uint) {\\r\\n        if (yearHalfAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint value = backFlowAmount + yearHalfAmount;\\r\\n        return value.div(subHalfTime);\\r\\n    }\\r\\n\\r\\n    function awaitGetAmount(address user) external view returns (uint) {\\r\\n        StakedInfo memory infoGlo = globalStakedInfo;\\r\\n        StakedInfo memory infoUser;\\r\\n\\r\\n        uint release;\\r\\n        uint step = expLastIn;\\r\\n        uint value;\\r\\n        uint tempIndex;\\r\\n        uint tempUpdate;\\r\\n        uint tempStakeAmount;\\r\\n        uint tempUserIndex;\\r\\n        uint tempUserAmount;\\r\\n        uint sameAddressData; //\u76f8\u540c\u5730\u5740\u65f6\u8fdb\u884c\u6570\u636e\u7d2f\u52a0\\r\\n        for (\\r\\n            uint i = 0;\\r\\n            i < 200 &&\\r\\n                globalExpInfo.length > step &&\\r\\n                globalExpInfo[step].endTime <= block.timestamp;\\r\\n            i++\\r\\n        ) {\\r\\n            infoUser = userStakedInfos[globalExpInfo[step].user];\\r\\n            //********************************************* */\\r\\n            release = getHalfYear().mul(\\r\\n                globalExpInfo[step].endTime - infoGlo.updateTime\\r\\n            );\\r\\n\\r\\n            release = release.div(infoGlo.stakedAmount);\\r\\n            infoGlo.index += release;\\r\\n\\r\\n            infoGlo.stakedAmount =\\r\\n                infoGlo.stakedAmount -\\r\\n                globalExpInfo[step].count;\\r\\n            infoGlo.updateTime = globalExpInfo[step].endTime; //\u66f4\u65b0\u5168\u5c40\u65f6\u95f4\\r\\n            //************************************************* */\\r\\n\\r\\n            tempIndex = infoGlo.index;\\r\\n            tempUpdate = infoGlo.updateTime;\\r\\n            tempStakeAmount = infoGlo.stakedAmount;\\r\\n            if (user == globalExpInfo[step].user) {\\r\\n                tempUserIndex = tempUserIndex == 0\\r\\n                    ? infoUser.index\\r\\n                    : tempUserIndex;\\r\\n                sameAddressData +=\\r\\n                    (infoGlo.index - tempUserIndex) *\\r\\n                    infoUser.stakedAmount;\\r\\n                infoUser.stakedAmount = infoUser.stakedAmount.sub(\\r\\n                    globalExpInfo[step].count\\r\\n                );\\r\\n\\r\\n                tempUserIndex = tempIndex;\\r\\n                tempUserAmount = infoUser.stakedAmount;\\r\\n            }\\r\\n\\r\\n            step++;\\r\\n            if (step >= globalExpInfo.length) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        infoUser = userStakedInfos[user];\\r\\n\\r\\n        if (infoGlo.stakedAmount == 0) return sameAddressData;\\r\\n\\r\\n        tempIndex = tempIndex == 0 ? infoGlo.index : tempIndex;\\r\\n        tempUpdate = tempUpdate == 0 ? infoGlo.updateTime : tempUpdate;\\r\\n        tempStakeAmount = tempStakeAmount == 0\\r\\n            ? infoGlo.stakedAmount\\r\\n            : tempStakeAmount;\\r\\n        tempUserIndex = tempUserIndex == 0 ? infoUser.index : tempUserIndex;\\r\\n        tempUserAmount = tempUserAmount == 0\\r\\n            ? infoUser.stakedAmount\\r\\n            : tempUserAmount;\\r\\n\\r\\n        release =\\r\\n            ((block.timestamp - tempUpdate) * getHalfYear()) /\\r\\n            tempStakeAmount;\\r\\n\\r\\n        release = tempIndex + release;\\r\\n\\r\\n        value = (release - tempUserIndex) * tempUserAmount;\\r\\n\\r\\n        value = value + sameAddressData + infoUser.available;\\r\\n\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    function pledgeNft(uint[] memory _tokenIds) external returns (bool) {\\r\\n        require(_tokenIds.length > 0, \\\"The pledge nft 's count can't zero\\\");\\r\\n        address _sender = msg.sender;\\r\\n        if (!expire()) return false; // \u672a\u5c06\u5230\u671f\u6e05\u7406\u5b8c\\r\\n        for (uint i = 0; i < _tokenIds.length; i++) {\\r\\n            IERC721(card).transferFrom(_sender, address(0xDead), _tokenIds[i]);\\r\\n\\r\\n            ownerTokens[_sender].push(_tokenIds[i]);\\r\\n            tokenToAddress[_tokenIds[i]] = _sender;\\r\\n        }\\r\\n\\r\\n        updateIndex(opreate.stake, _tokenIds.length);\\r\\n        updateUserIndex(\\r\\n            _sender,\\r\\n            opreate.stake,\\r\\n            _tokenIds.length,\\r\\n            block.timestamp + expireTime\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint,\\r\\n        bytes memory\\r\\n    ) public pure returns (bytes4) {\\r\\n        return this.onERC721Received.selector;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/util/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary console {\\r\\n    address constant CONSOLE_ADDRESS =\\r\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\r\\n\\r\\n    function _sendLogPayload(bytes memory payload) private view {\\r\\n        uint256 payloadLength = payload.length;\\r\\n        address consoleAddress = CONSOLE_ADDRESS;\\r\\n        assembly {\\r\\n            let payloadStart := add(payload, 32)\\r\\n            let r := staticcall(\\r\\n                gas(),\\r\\n                consoleAddress,\\r\\n                payloadStart,\\r\\n                payloadLength,\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function log() internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\r\\n    }\\r\\n\\r\\n    function logInt(int p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logUint(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logString(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBool(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logAddress(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes(bytes memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logByte(bytes1 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes1(bytes1 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes2(bytes2 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes3(bytes3 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes4(bytes4 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes5(bytes5 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes6(bytes6 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes7(bytes7 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes8(bytes8 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes9(bytes9 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes10(bytes10 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes11(bytes11 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes12(bytes12 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes13(bytes13 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes14(bytes14 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes15(bytes15 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes16(bytes16 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes17(bytes17 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes18(bytes18 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes19(bytes19 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes20(bytes20 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes21(bytes21 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes22(bytes22 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes23(bytes23 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes24(bytes24 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes25(bytes25 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes26(bytes26 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes27(bytes27 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes28(bytes28 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes29(bytes29 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes30(bytes30 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes31(bytes31 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes32(bytes32 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        uint p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(uint,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        uint p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        bool p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        uint p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        bool p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        string memory p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(string,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        bool p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(bool,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        uint p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        uint p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,uint,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        uint p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        bool p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        string memory p1,\\r\\n        address p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,string,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        bool p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        bool p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,bool,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        uint p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,uint,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        uint p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        bool p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        string memory p2,\\r\\n        address p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,string,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        bool p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,bool,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,uint)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(\\r\\n        address p0,\\r\\n        address p1,\\r\\n        address p2,\\r\\n        string memory p3\\r\\n    ) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,string)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,bool)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"log(address,address,address,address)\\\",\\r\\n                p0,\\r\\n                p1,\\r\\n                p2,\\r\\n                p3\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asdic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_card\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"asdic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"awaitGetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backFlowAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"card\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expLastIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expireTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOwnerTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"globalExpInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalStakedInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"pledgeNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expireTime\",\"type\":\"uint256\"}],\"name\":\"setExpireTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSubHalfTima\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subHalfTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearHalfAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yearHalfCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VIPPOOL", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e1c0a5e553c30e776026e8176516ab32107098be0000000000000000000000003c7b915afd6aba4d33ae95fd5b0c0e02a34e9fca000000000000000000000000cf7edf1fdc4d29cc4c6d0101d28f75457b7f8e1d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}