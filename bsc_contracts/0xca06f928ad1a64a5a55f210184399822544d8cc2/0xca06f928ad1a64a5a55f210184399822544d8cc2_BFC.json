{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.6;\r\n\r\ninterface ILPStaking {\r\n    function initalize(address token) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract BFC {\r\n    string public name = \"BraveFutureCoin\";\r\n    string public symbol = \"BFC\";\r\n    uint8 public decimals = 9;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    // \u7c7b\u4f3c\u4e8e\u91d1\u878d\u4e2d\u7684\u901a\u7f29\u6982\u5ff5\uff1a\"\u5982\u679c\u8d27\u5e01\u603b\u91cf\u51cf\u5c11\uff0c\u6bcf\u4e2a\u4eba\u624b\u4e0a\u7684\u8d27\u5e01\u5c31\u53d8\u5f97\u66f4\u503c\u94b1\u4e86\uff0c\u76f8\u5f53\u4e8e\u53d8\u76f8\u5b8c\u6210\u4e86\u5206\u7ea2\"\r\n    uint256 public constant MAX = ~uint256(0);\r\n    uint256 public _tTotal = 2100000 * 10**decimals; //84W \u771f\u6b63\u7684\u53d1\u884c\u91cf\uff08\u6bd4\u5982\u53d1\u884c\u4e86 1w \u679a\u5e01\uff0c\u7cbe\u5ea6\u4e3a0\uff0c_tTotal = 10000\uff09\r\n    uint256 public publishTotal = 840000 * 10**decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal)); // \u6700\u5927\u7684\u4e00\u4e2a\u53ef\u4ee5\u6574\u9664 _tTotal \u7684\u6570\uff0c\u8fd9\u4e2a\u6570\u5b57\u7c7b\u4f3c\u4e8e\u201c\u865a\u62df\u7684\u8d27\u5e01\u603b\u91cf\u201d\r\n    mapping(address => uint256) public _rOwned; // \u5b58\u50a8\u7528\u6237\u7684\u865a\u62df\u6570\u91cf\r\n    mapping(address => uint256) public _tOwned; //\u4e0d\u53c2\u4e0e\u5206\u7ea2\u7684\u6301\u6709\u6570\u91cf\r\n    uint256 public _tFeeTotal;\r\n\r\n    mapping(address => bool) public isWhiteList; //\u6392\u9664\u624b\u7eed\u8d39\r\n    mapping(address => bool) public isExcludedBonus; //\u6ca1\u6709\u53cd\u5c04\u6536\u76ca\uff0c\u6ca1\u6709\u5206\u7ea2\r\n    address[] public _excludedBonus; //\u6ca1\u6709\u53cd\u5c04\u6536\u76ca\uff0c\u6ca1\u6709\u5206\u7ea2 \u540d\u5355\r\n\r\n    uint256 public _taxFee = 2;\r\n    uint256 public _liquidityFee = 2; //2%\u56de\u6d41\u6d41\u52a8\u6c60\r\n    uint256 public _marketFee = 1; //1%\u56de\u8d2dqucc\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public usdtPair;\r\n    address public quccPair;\r\n    mapping(address => bool) public isMarketPair; //lp\u5730\u5740\r\n\r\n    address public owner;\r\n    address public daoAddress = 0x85de54E3f3a6865E8891F70926AC1A1b3fb1FaE7;\r\n\r\n    address private routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //uniswapRouter\r\n    address public quccAddress = 0x3c48e47703F16818d7368DBA98897FA35B80F53D; //uniswapRouter\r\n    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955; //uniswapRouter\r\n    address public marketAddress = 0x000000000000000000000000000000000000dEaD; //qucc\u63a5\u6536(\u9ed1\u6d1e) \u8425\u9500\u5730\u5740\r\n\r\n    bool public inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true; //\u5f00\u542f\u56de\u6d41\r\n    bool public swapAndLiquifyByLimitOnly = false; //\u6bcf\u6b21\u56de\u6d41\u4ec5\u4f7f\u7528minimumTokensBeforeSwap\r\n    uint256 public minimumTokensBeforeSwap = 500 * 10**decimals; //LP\u624b\u7eed\u8d39\u5230\u8fbe2500W\u6570\u91cf,\u6267\u884c\u56de\u8d2d\u64cd\u4f5c 5000W / 2\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed holder,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SwapTokensForTokens(uint256 amountIn, address[] path);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address _lpStakeAddr) {\r\n        owner = msg.sender;\r\n        ILPStaking(_lpStakeAddr).initalize(address(this));\r\n\r\n        _init(_lpStakeAddr);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _init(address _lpStakeAddr) internal {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        allowance[address(this)][address(uniswapV2Router)] = MAX;\r\n\r\n        usdtPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            usdtAddress\r\n        );\r\n\r\n        quccPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            quccAddress\r\n        );\r\n\r\n        address ethPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        //\u8bbe\u7f6elp\u5730\u5740, \u6392\u9664\u6301\u5e01\u5206\u7ea2\r\n        setMarketPairStatus(quccPair, true);\r\n        setMarketPairStatus(usdtPair, true);\r\n        setMarketPairStatus(ethPair, true);\r\n\r\n        //\u6392\u9664\u6301\u5e01\u5206\u7ea2\r\n        _setExcludeBonus(_lpStakeAddr);\r\n        _setExcludeBonus(marketAddress);\r\n        _setExcludeBonus(address(this));\r\n\r\n        //\u6392\u9664\u624b\u7eed\u8d39\r\n        isWhiteList[_lpStakeAddr] = true;\r\n        isWhiteList[marketAddress] = true;\r\n        isWhiteList[owner] = true;\r\n        isWhiteList[daoAddress] = true;\r\n        isWhiteList[address(this)] = true;\r\n        isWhiteList[address(0)] = true;\r\n\r\n        //\u9884\u53d1\u5e03token\r\n        _rOwned[daoAddress] = _rTotal;\r\n        emit Transfer(address(0), daoAddress, _tTotal);\r\n\r\n        uint256 lpStakeTotal = _tTotal - publishTotal;\r\n        _tokenTransfer(daoAddress, _lpStakeAddr, lpStakeTotal);\r\n    }\r\n\r\n    function setOwner(address owner_) public onlyOwner {\r\n        owner = owner_;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (isExcludedBonus[account]) {\r\n            return _tOwned[account]; //\u4e0d\u53c2\u4e0e\u5206\u7ea2\r\n        }\r\n\r\n        return tokenFromReflection(_rOwned[account]); //\u53c2\u4e0e\u5206\u7ea2\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, allowance[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance[msg.sender][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance[msg.sender][spender] - subtractedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        // \u771f\u5b9e\u7684\u4f59\u989d = \u865a\u62df\u4f59\u989d / (\u865a\u62df\u8d27\u5e01\u603b\u91cf / \u771f\u5b9e\u8d27\u5e01\u603b\u91cf)\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _getRate() public view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excludedBonus.length; i++) {\r\n            if (\r\n                _rOwned[_excludedBonus[i]] > rSupply ||\r\n                _tOwned[_excludedBonus[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply -= _rOwned[_excludedBonus[i]];\r\n            tSupply -= _tOwned[_excludedBonus[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _approve(\r\n        address holder,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(holder != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[holder][spender] = amount;\r\n        emit Approval(holder, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private returns (bool) {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        //\u6267\u884c\u56de\u8d2d\u64cd\u4f5c\r\n        if (\r\n            swapAndLiquifyEnabled &&\r\n            !inSwapAndLiquify &&\r\n            !isMarketPair[sender] &&\r\n            sender != address(this) &&\r\n            recipient != marketAddress\r\n        ) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >=\r\n                minimumTokensBeforeSwap;\r\n\r\n            if (overMinimumTokenBalance) {\r\n                if (swapAndLiquifyByLimitOnly) {\r\n                    contractTokenBalance = minimumTokensBeforeSwap;\r\n                }\r\n\r\n                _swapTokensForEth(contractTokenBalance);\r\n            }\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    //\u6b63\u5e38\u8f6c\u8d26\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount * currentRate;\r\n\r\n        // \u6263\u9664\u53d1\u9001\u4eba\u865a\u62df\u4f59\u989d 100%\r\n        _subOwned(sender, tAmount, rAmount);\r\n\r\n        //\u5b9e\u9645\u5230\u8d26\u6570\u91cf\r\n        uint256 finalTAmount = tAmount;\r\n\r\n        if (\r\n            isMarketPair[recipient] &&\r\n            !isWhiteList[sender] &&\r\n            !isWhiteList[recipient]\r\n        ) {\r\n            finalTAmount = takeFee(sender, currentRate, tAmount); //\u6263\u51cf\u624b\u7eed\u8d39\r\n            rAmount = finalTAmount * currentRate;\r\n        }\r\n\r\n        // \u63a5\u6536\u4eba\u6536\u5230 88%\r\n        _addOwned(recipient, finalTAmount, rAmount);\r\n        emit Transfer(sender, recipient, finalTAmount);\r\n    }\r\n\r\n    function _subOwned(\r\n        address sender,\r\n        uint256 tAmount,\r\n        uint256 rAmount\r\n    ) private {\r\n        _changeOwned(sender, tAmount, rAmount, false);\r\n    }\r\n\r\n    function _addOwned(\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 rAmount\r\n    ) private {\r\n        _changeOwned(recipient, tAmount, rAmount, true);\r\n    }\r\n\r\n    function _changeOwned(\r\n        address account,\r\n        uint256 tAmount,\r\n        uint256 rAmount,\r\n        bool isAdd\r\n    ) private {\r\n        if (isAdd) {\r\n            if (isExcludedBonus[account]) {\r\n                _tOwned[account] += tAmount;\r\n            }\r\n            _rOwned[account] += rAmount;\r\n        } else {\r\n            if (isExcludedBonus[account]) {\r\n                _tOwned[account] -= tAmount;\r\n            }\r\n            _rOwned[account] -= rAmount;\r\n        }\r\n    }\r\n\r\n    //\u6263\u51cf\u624b\u7eed\u8d39\r\n    function takeFee(\r\n        address sender,\r\n        uint256 currentRate,\r\n        uint256 tAmount\r\n    ) internal returns (uint256 finalTAmount) {\r\n        uint256 _tAmount = 0;\r\n\r\n        // \u56de\u6d41\r\n        _tAmount += _chargeUserFee(\r\n            sender,\r\n            usdtPair,\r\n            tAmount,\r\n            _liquidityFee,\r\n            currentRate\r\n        );\r\n\r\n        // \u56de\u8d2dqucc\r\n        _tAmount += _chargeUserFee(\r\n            sender,\r\n            address(this),\r\n            tAmount,\r\n            _marketFee,\r\n            currentRate\r\n        );\r\n\r\n        // \u901a\u7f29\u865a\u62df\u603b\u91cf-\u6301\u5e01\u5206\u7ea2\r\n        _tAmount += _takeTaxFee(tAmount, currentRate);\r\n\r\n        return tAmount - _tAmount;\r\n    }\r\n\r\n    //\u7ed9\u624b\u7eed\u8d39\u7528\u6237\u5206\u914d\u624b\u7eed\u8d39\r\n    function _chargeUserFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 _userFee,\r\n        uint256 currentRate\r\n    ) private returns (uint256 _tAmount) {\r\n        if (_userFee == 0) return 0;\r\n\r\n        _tAmount = (tAmount * _userFee) / 100;\r\n        uint256 _rAmount = _tAmount * currentRate;\r\n\r\n        _addOwned(recipient, _tAmount, _rAmount);\r\n        emit Transfer(sender, recipient, _tAmount);\r\n    }\r\n\r\n    //\u624b\u7eed\u8d39\u5206\u7ea2\r\n    function _takeTaxFee(uint256 tAmount, uint256 currentRate)\r\n        private\r\n        returns (uint256 _tAmount)\r\n    {\r\n        if (_taxFee == 0) return 0;\r\n\r\n        _tAmount = (tAmount * _taxFee) / 100;\r\n        uint256 _rAmount = _tAmount * currentRate;\r\n\r\n        // \u5269\u4e0b3%\u6263\u9664\u603b\u7684\u865a\u62df\u8d27\u5e01\uff0c\u8fd9\u65f6\u5019\u6240\u6709\u4eba\u7684 banlanceOf \u51fd\u6570\u8ba1\u7b97\u90fd\u4f1a\u6309\u7167\u6bd4\u4f8b\u589e\u957f\r\n        // _rTotal = _rTotal - rProfit;\r\n        _rTotal -= _rAmount;\r\n        _tFeeTotal = _tFeeTotal + _tAmount;\r\n        return _tAmount;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u624b\u7eed\u8d39\r\n    function setTxTaxes(\r\n        uint256 taxFee,\r\n        uint256 liquidityFee,\r\n        uint256 marketFee\r\n    ) external onlyOwner {\r\n        _taxFee = taxFee;\r\n        _liquidityFee = liquidityFee;\r\n        _marketFee = marketFee;\r\n    }\r\n\r\n    function swapFeeTokens(uint256 tokenAmount) external onlyOwner {\r\n        _swapTokensForEth(tokenAmount);\r\n    }\r\n\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) external onlyOwner {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = quccAddress;\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            marketAddress,\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n\r\n    function setMarketPairStatus(address _pair, bool newValue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        isMarketPair[_pair] = newValue;\r\n        if (newValue) {\r\n            //\u6d41\u52a8\u6c60\u4e0d\u53c2\u4e0e\u6301\u5e01\u5206\u7ea2\r\n            _setExcludeBonus(_pair);\r\n        } else {\r\n            _setIncludeBonus(_pair);\r\n        }\r\n    }\r\n\r\n    // \u6392\u9664\u5206\u7ea2\u5956\u52b1\r\n    function excludeBonus(address account) external onlyOwner {\r\n        require(!isExcludedBonus[account], \"Account is already excluded\");\r\n        _setExcludeBonus(account);\r\n    }\r\n\r\n    //\u52a0\u5165\u5206\u7ea2\u5956\u52b1\r\n    function includeBonus(address account) external onlyOwner {\r\n        require(isExcludedBonus[account], \"Account is already excluded\");\r\n        _setIncludeBonus(account);\r\n    }\r\n\r\n    function _setExcludeBonus(address account) private {\r\n        if (!isExcludedBonus[account]) {\r\n            isExcludedBonus[account] = true;\r\n            _excludedBonus.push(account);\r\n        }\r\n    }\r\n\r\n    function _setIncludeBonus(address account) private {\r\n        if (isExcludedBonus[account]) {\r\n            for (uint256 i = 0; i < _excludedBonus.length; i++) {\r\n                if (_excludedBonus[i] == account) {\r\n                    _excludedBonus[i] = _excludedBonus[\r\n                        _excludedBonus.length - 1\r\n                    ];\r\n                    _tOwned[account] = 0;\r\n                    isExcludedBonus[account] = false;\r\n                    _excludedBonus.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function setisWhiteList(address account, bool newValue) external onlyOwner {\r\n        isWhiteList[account] = newValue;\r\n    }\r\n\r\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner {\r\n        minimumTokensBeforeSwap = newLimit;\r\n    }\r\n\r\n    function setMarketingWalletAddress(address newAddress) external onlyOwner {\r\n        marketAddress = newAddress;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n    }\r\n\r\n    function setSwapAndLiquifyByLimitOnly(bool newValue) external onlyOwner {\r\n        swapAndLiquifyByLimitOnly = newValue;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpStakeAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_excludedBonus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwapAndLiquify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedBonus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publishTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quccAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quccPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setMarketPairStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMarketingWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyByLimitOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"}],\"name\":\"setTxTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"setisWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyByLimitOnly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"swapFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BFC", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002bd753b7685968041591173f3aa109af7097c887", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://853df960e4c9e3d652dd94daa5fcb467dba72edb64712afcb76c9cd0a23ba0c8"}