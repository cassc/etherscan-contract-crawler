{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71\r\n\u3010B\u3011\u3010o\u3011\u3010m\u3011\u3010b\u3011\u3010B\u3011\u3010n\u3011\u3010b\u3011\r\n\u3010B\u3011\u3010o\u3011\u3010m\u3011\u3010b\u3011\u3010B\u3011\u3010n\u3011\u3010b\u3011\r\n\u3010B\u3011\u3010o\u3011\u3010m\u3011\u3010b\u3011\u3010B\u3011\u3010n\u3011\u3010b\u3011\r\n\u3010B\u3011\u3010o\u3011\u3010m\u3011\u3010b\u3011\u3010B\u3011\u3010n\u3011\u3010b\u3011\r\n\ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71 \ud83c\udd71\ud83c\udd7e\ud83c\udd7c\ud83c\udd71\ud83c\udd71\ud83c\udd7d\ud83c\udd71\r\n*/\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor () {\r\n      address msgSender = _msgSender();\r\n      _owner = msgSender;\r\n      emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view returns (address) {\r\n      return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n      require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n      _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n      emit OwnershipTransferred(_owner, address(0));\r\n      _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n      require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n      emit OwnershipTransferred(_owner, newOwner);\r\n      _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BombBnb is Context, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private BOMBS_TO_HATCH_1MINERS = 1080000; //for final version should be seconds in a day\r\n    uint256 private PSN = 10000;\r\n    uint256 private PSNH = 5000;\r\n    uint256 private devFeeVal = 2;\r\n    bool private initialized = false;\r\n    address payable private recAdd;\r\n    mapping(address => uint256) private hatcheryMiners;\r\n    uint256 public BOOST_FEE = 1500000000000000000 wei;\r\n    mapping(address => uint256) private claimedBombs;\r\n    mapping(address => uint256) private lastHatch;\r\n    uint256 private marketBombs;\r\n    address private rugIncurance = 0xc6fba69677767a480edDE365d3EaEb6Cd546e09C;\r\n\r\n    struct Rewards {\r\n        address ref;\r\n        address upline1;\r\n        address upline2;\r\n        address upline3;\r\n    }\r\n    struct Timelock {\r\n        address _userAddress;\r\n        uint256 deadline;\r\n    }\r\n\r\n    struct AntiWhale {\r\n        address _userTrackAddress;\r\n        uint256 _amountInvest;\r\n    }\r\n    struct AntiWhaleOn {\r\n        address _userAddressOn;\r\n        uint256 status_id;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    event NewUpline(\r\n        address referal,\r\n        address indexed upline1,\r\n        address indexed upline2,\r\n        address indexed upline3\r\n    );\r\n\r\n    mapping(address => Rewards) public rewards;\r\n    mapping(address => Timelock) public timelock;\r\n    mapping(address => AntiWhale) public antiwhale;\r\n    mapping(address => AntiWhaleOn) public antiwhaleon;\r\n    uint256 private boombsValue2 = 6;\r\n    uint256 private plentyFeeVal = 40;\r\n\r\n    constructor() {\r\n        recAdd = payable(msg.sender);\r\n    }\r\n\r\n    function hatchBombs() public {\r\n        require(initialized);\r\n        uint256 bombsUsed = getMyBombs(msg.sender);\r\n        uint256 newMiners = SafeMath.div(bombsUsed, BOMBS_TO_HATCH_1MINERS);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(\r\n            hatcheryMiners[msg.sender],\r\n            newMiners\r\n        );\r\n        claimedBombs[msg.sender] = 0;\r\n        lastHatch[msg.sender] = block.timestamp;\r\n\r\n        address upline1reward = rewards[msg.sender].upline1;\r\n        address upline2reward = rewards[msg.sender].upline2;\r\n        address upline3reward = rewards[msg.sender].upline3;\r\n\r\n        //send referral bombs\r\n      if (upline1reward != address(0)) {\r\n            claimedBombs[upline1reward] = SafeMath.add(\r\n                claimedBombs[upline1reward],\r\n                SafeMath.div((bombsUsed * 7), 100)\r\n            );\r\n        }\r\n\r\n        if (upline2reward != address(0)) {\r\n            claimedBombs[upline2reward] = SafeMath.add(\r\n                claimedBombs[upline2reward],\r\n                SafeMath.div((bombsUsed * 4), 100)\r\n            );\r\n        }\r\n        if (upline3reward != address(0)) {\r\n            claimedBombs[upline3reward] = SafeMath.add(\r\n                claimedBombs[upline3reward],\r\n                SafeMath.div((bombsUsed * 3), 100)\r\n            );\r\n        }\r\n\r\n        //boost market to nerf miners hoarding\r\n        marketBombs = SafeMath.add(marketBombs, SafeMath.div(bombsUsed, 5));\r\n    }\r\n\r\n    function BoostBombs() public payable {\r\n        // problem 3: this issue is fixed by me but please take a look okay\r\n        require(initialized);\r\n        require(msg.value == BOOST_FEE, \"Insufficient funds\");\r\n        uint256 dev_Boost_treasury = SafeMath.div((msg.value * 40), 100);\r\n        payable(rugIncurance).transfer(dev_Boost_treasury);\r\n        hatcheryMiners[msg.sender] = SafeMath.add(\r\n            hatcheryMiners[msg.sender],\r\n            500\r\n        );\r\n    }\r\n\r\n    function sellBombs() public {\r\n        require(initialized);\r\n        // Timer to set again after withdraw\r\n        require(\r\n            block.timestamp > timelock[msg.sender].deadline,\r\n            \"You are not allowed to withdraw\"\r\n        );\r\n        uint256 timer = block.timestamp + 7 days;\r\n        timelock[msg.sender] = Timelock(msg.sender, timer);\r\n        uint256 hasBombs = getMyBombs(msg.sender);\r\n        uint256 bombValue = calculateBombSell(hasBombs);\r\n        uint256 fee = devFee(bombValue);\r\n        uint256 fee2 = plentyFee(bombValue);\r\n        lastHatch[msg.sender] = block.timestamp;\r\n        marketBombs = SafeMath.add(marketBombs, hasBombs);\r\n        // Anti Whale Detection\r\n        if (bombValue > antiwhale[msg.sender]._amountInvest) {\r\n            if (antiwhaleon[msg.sender].status_id == 0) {\r\n                recAdd.transfer(fee);\r\n                uint256 bombRewardie = SafeMath.div((bombValue * 50), 100);\r\n                // uint256 bombRewardie2 = SafeMath.div((bombRewardie*), 100);\r\n                // claimedBombs[msg.sender] = bombRewardie2;\r\n                uint256 finalReward = SafeMath.sub(bombValue, bombRewardie);\r\n                claimedBombs[msg.sender] = bombRewardie;\r\n                payable(msg.sender).transfer(SafeMath.sub(finalReward, fee));\r\n            } else {\r\n                // Anti Whale Detection Fee applied if he has disable the status of Anti Whale\r\n                payable(recAdd).transfer(fee2);\r\n                claimedBombs[msg.sender] = 0;\r\n                payable(msg.sender).transfer(SafeMath.sub(bombValue, fee2));\r\n            }\r\n        } else {\r\n            // those who has invested less go smooth trade. For Safety purpose.\r\n            payable(recAdd).transfer(fee);\r\n            claimedBombs[msg.sender] = 0;\r\n            payable(msg.sender).transfer(SafeMath.sub(bombValue, fee));\r\n        }\r\n    }\r\n\r\n    function bombRewards(address adr) public view returns (uint256) {\r\n        uint256 hasBombs = getMyBombs(adr);\r\n        uint256 bombValue = calculateBombSell(hasBombs);\r\n        return bombValue;\r\n    }\r\n\r\n    function buyBombs(address ref) public payable {\r\n        require(initialized);\r\n        require(ref != msg.sender, \"User can't refer themselves\");\r\n        uint256 bombsBought = calculateBombBuy(\r\n            msg.value,\r\n            SafeMath.sub(address(this).balance, msg.value)\r\n        );\r\n        bombsBought = SafeMath.sub(bombsBought, devFee(bombsBought));\r\n        uint256 fee = bombValue2(msg.value);\r\n        payable(rugIncurance).transfer(fee);\r\n        claimedBombs[msg.sender] = SafeMath.add(\r\n            claimedBombs[msg.sender],\r\n            bombsBought\r\n        );\r\n\r\n        //antiwhale system\r\n        uint256 investAmount = antiwhale[msg.sender]._amountInvest;\r\n        uint256 investedAmount = SafeMath.add(msg.value, investAmount);\r\n        // added values\r\n        antiwhale[msg.sender] = AntiWhale(msg.sender, investedAmount);\r\n        antiwhaleon[msg.sender] = AntiWhaleOn(msg.sender, 0);\r\n\r\n        // antiwhale system end\r\n\r\n        // Level 1 Detection\r\n        address _upline1 = rewards[ref].ref;\r\n\r\n        // level 2 detection\r\n        address _upline2 = rewards[_upline1].upline1;\r\n\r\n        // level 3 detection\r\n        address _upline3 = rewards[_upline2].upline1;\r\n\r\n        rewards[msg.sender] = Rewards(msg.sender, ref, _upline2, _upline3);\r\n        emit NewUpline(msg.sender, ref, _upline2, _upline3);\r\n\r\n        uint256 timer = block.timestamp + 7 days;\r\n        timelock[msg.sender] = Timelock(msg.sender, timer);\r\n    }\r\n\r\n    function AntiWhaleStatusOff() public {\r\n        antiwhaleon[msg.sender] = AntiWhaleOn(msg.sender, 1);\r\n    }\r\n\r\n    function AntiWhaleStatusOn() public {\r\n        antiwhaleon[msg.sender] = AntiWhaleOn(msg.sender, 0);\r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) private view returns (uint256) {\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateBombSell(uint256 bombs) public view returns (uint256) {\r\n        return calculateTrade(bombs, marketBombs, address(this).balance);\r\n    }\r\n\r\n    function calculateBombBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketBombs);\r\n    }\r\n\r\n    function calculateBombBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateBombBuy(eth, address(this).balance);\r\n    }\r\n\r\n    function devFee(uint256 amount) private view returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, devFeeVal), 100);\r\n    }\r\n\r\n    function bombValue2(uint256 amount) private view returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, boombsValue2), 100);\r\n    }\r\n\r\n    function plentyFee(uint256 amount) private view returns (uint256) {\r\n        return SafeMath.div(SafeMath.mul(amount, plentyFeeVal), 100);\r\n    }\r\n\r\n    function seedMarket() public payable onlyOwner {\r\n        require(marketBombs == 0);\r\n        initialized = true;\r\n        marketBombs = 108000000000;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getMyMiners(address adr) public view returns (uint256) {\r\n        return hatcheryMiners[adr];\r\n    }\r\n\r\n    function getMyBombs(address adr) public view returns (uint256) {\r\n        return SafeMath.add(claimedBombs[adr], getBombsSinceLastHatch(adr));\r\n    }\r\n\r\n    function getBombsSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsPassed = min(\r\n            BOMBS_TO_HATCH_1MINERS,\r\n            SafeMath.sub(block.timestamp, lastHatch[adr])\r\n        );\r\n        return SafeMath.mul(secondsPassed, hatcheryMiners[adr]);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline2\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline3\",\"type\":\"address\"}],\"name\":\"NewUpline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AntiWhaleStatusOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AntiWhaleStatusOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOOST_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BoostBombs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"antiwhale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_userTrackAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountInvest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"antiwhaleon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_userAddressOn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"status_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"bombRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"buyBombs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateBombBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateBombBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bombs\",\"type\":\"uint256\"}],\"name\":\"calculateBombSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getBombsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyBombs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatchBombs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upline1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upline2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"upline3\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBombs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BombBnb", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://218878186443a1f0e44946423bd0470ea141ff014f96dc50b7ef39020fc202de"}