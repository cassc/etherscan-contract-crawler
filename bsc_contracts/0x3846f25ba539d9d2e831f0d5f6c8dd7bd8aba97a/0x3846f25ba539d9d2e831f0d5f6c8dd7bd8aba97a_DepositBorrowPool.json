{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract DepositBorrowPool {\r\n    struct TokenInfo {\r\n        IERC20 token;\r\n        uint256 depositAPY;\r\n        uint256 borrowAPY;\r\n        uint256 maxLTV;\r\n        uint256 liquidationThreshold;\r\n        uint256 liquidationPenalty;\r\n        mapping(address => uint256) depositBalances;\r\n        mapping(address => uint256) borrowBalances;\r\n        mapping(address => uint256) depositTimestamps;\r\n        mapping(address => uint256) borrowTimestamps;\r\n    }\r\n\r\n    mapping(address => TokenInfo) public tokens;\r\n    address public owner;\r\n    bool public isPoolActive;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    // Function to add new token to the pool\r\n    function addToken(address _tokenAddress, uint256 _depositAPY, uint256 _borrowAPY, uint256 _maxLTV, uint256 _liquidationThreshold, uint256 _liquidationPenalty) external onlyOwner {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        token.token = IERC20(_tokenAddress);\r\n        token.depositAPY = _depositAPY;\r\n        token.borrowAPY = _borrowAPY;\r\n        token.maxLTV = _maxLTV;\r\n        token.liquidationThreshold = _liquidationThreshold;\r\n        token.liquidationPenalty = _liquidationPenalty;\r\n    }\r\n\r\n    // Deposit function\r\n    function deposit(address _tokenAddress, uint256 _amount) external {\r\n        require(isPoolActive, \"Pool is not active\");\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        require(address(token.token) != address(0), \"Token not supported\");\r\n\r\n        token.token.transferFrom(msg.sender, address(this), _amount);\r\n        _compoundInterest(_tokenAddress, msg.sender, true);\r\n        token.depositBalances[msg.sender] += _amount;\r\n        token.depositTimestamps[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    // Withdraw function\r\n    function withdraw(address _tokenAddress, uint256 _amount) external {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        require(token.depositBalances[msg.sender] >= _amount, \"Insufficient balance\");\r\n\r\n        _compoundInterest(_tokenAddress, msg.sender, true);\r\n        token.depositBalances[msg.sender] -= _amount;\r\n        token.token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    // Borrow function\r\n    function borrow(address _tokenAddress, uint256 _amount) external {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        uint256 maxBorrowValue = token.depositBalances[msg.sender] * token.maxLTV / 100;\r\n        require(_amount <= maxBorrowValue, \"Borrow amount exceeds max LTV\");\r\n\r\n        _compoundInterest(_tokenAddress, msg.sender, false);\r\n        token.borrowBalances[msg.sender] += _amount;\r\n        token.borrowTimestamps[msg.sender] = block.timestamp;\r\n        token.token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    // Repay function\r\n    function repay(address _tokenAddress, uint256 _amount) external {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        require(token.borrowBalances[msg.sender] >= _amount, \"Repay amount exceeds borrow\");\r\n\r\n        _compoundInterest(_tokenAddress, msg.sender, false);\r\n        token.borrowBalances[msg.sender] -= _amount;\r\n        token.token.transferFrom(msg.sender, address(this), _amount);\r\n    }\r\n\r\n    // Check for liquidation\r\n    function checkLiquidation(address _tokenAddress, address _user) public view returns (bool) {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        uint256 collateralValue = token.depositBalances[_user];\r\n        uint256 borrowValue = token.borrowBalances[_user];\r\n        return borrowValue >= (collateralValue * token.liquidationThreshold) / 100;\r\n    }\r\n\r\n    // Liquidation function\r\n    function liquidate(address _tokenAddress, address _user) external {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        require(checkLiquidation(_tokenAddress, _user), \"Position not subject to liquidation\");\r\n\r\n        uint256 collateralValue = token.depositBalances[_user];\r\n        uint256 debtValue = token.borrowBalances[_user];\r\n        uint256 discountedCollateral = collateralValue * (100 - token.liquidationPenalty) / 100;\r\n        \r\n        require(debtValue <= discountedCollateral, \"Not enough collateral to cover the debt\");\r\n\r\n        uint256 collateralToLiquidate = debtValue * 100 / (100 - token.liquidationPenalty);\r\n        token.depositBalances[_user] -= collateralToLiquidate;\r\n        token.token.transfer(msg.sender, collateralToLiquidate);\r\n        token.borrowBalances[_user] -= debtValue;\r\n    }\r\n\r\n    // Compound interest function\r\n    function _compoundInterest(address _tokenAddress, address _user, bool isDepositor) internal {\r\n        TokenInfo storage token = tokens[_tokenAddress];\r\n        uint256 principal = isDepositor ? token.depositBalances[_user] : token.borrowBalances[_user];\r\n        uint256 rate = isDepositor ? token.depositAPY : token.borrowAPY;\r\n        uint256 timeElapsed = block.timestamp - (isDepositor ? token.depositTimestamps[_user] : token.borrowTimestamps[_user]);\r\n        \r\n        if (timeElapsed > 0 && principal > 0) {\r\n            uint256 interest = principal * rate / 100 * timeElapsed / 365 days;\r\n            if (isDepositor) {\r\n                token.depositBalances[_user] += interest;\r\n            } else {\r\n                token.borrowBalances[_user] += interest;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Toggle pool activity\r\n    function togglePoolActivity() external onlyOwner {\r\n        isPoolActive = !isPoolActive;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPenalty\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPoolActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePoolActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPenalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DepositBorrowPool", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48f6425fdf447a26b0a4189be436071ae73a9c1e652f56edbcab20b36a62d2d8"}