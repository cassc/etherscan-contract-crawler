{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.15;\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactory02 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IPair02 {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin, \r\n        address[] calldata path, \r\n        address to, uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n    function setRewardToken(address token) external;\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return (msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n     constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20{\r\n\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    \r\n    address private _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IERC20 public rewardToken = IERC20(0x6d342877fC199c629f49A5C6C521C297b15BC92d);\r\n    IRouter02 router;\r\n\r\n    address[] private _shareholders;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n    mapping (address => uint256) private _shareholderLastClaims;\r\n    uint256 public currentIndex;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 3 hours;\r\n    uint256 public minDistribution = 1 * (10 ** 18);\r\n\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor (address router_) {\r\n        router = IRouter02(router_);\r\n        _token = msg.sender;\r\n    }\r\n\r\n    function setRewardToken(address newToken_) external override onlyToken {\r\n        rewardToken = IERC20(newToken_);\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external override onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares - (shares[shareholder].amount) + (amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyToken {\r\n        uint256 balanceBefore = rewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(rewardToken);\r\n        IERC20(router.WETH()).approve(address(router), msg.value);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = rewardToken.balanceOf(address(this)) - (balanceBefore);\r\n\r\n        totalDividends = totalDividends + (amount);\r\n        dividendsPerShare = dividendsPerShare + (dividendsPerShareAccuracyFactor * (amount) / (totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyToken {\r\n        uint256 shareholderCount = _shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n            }\r\n\r\n            if(shouldDistribute(_shareholders[currentIndex])){\r\n                distributeDividend(_shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + gasLeft - gasleft();\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return _shareholderLastClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed + (amount);\r\n            rewardToken.transfer(shareholder, amount);\r\n            _shareholderLastClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + (amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function claimDividend(address shareholder) external onlyToken{\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends - (shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share * (dividendsPerShare) / (dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = _shareholders.length;\r\n        _shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        _shareholders[shareholderIndexes[shareholder]] = _shareholders[_shareholders.length-1];\r\n        shareholderIndexes[_shareholders[_shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        _shareholders.pop();\r\n    }\r\n}\r\n\r\ncontract BabyCookieSale is ERC20, Ownable {\r\n    using Address for address payable;\r\n\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromReward;\r\n    mapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\r\n    address payable public teamWallet = payable(0x47De816EA5AFdd0efF1A6a614ee9F800f7E5973C);\r\n    address payable public marketingWallet = payable(0xf619EFbB9a3E3d4f23Af81c7c8Ce79DE98Bd0f71);\r\n    address public liquidityWallet;\r\n\r\n    address constant private  DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    struct Ratios {\r\n        uint16 team;\r\n        uint16 marketing;\r\n        uint16 rewards;\r\n        uint16 total;\r\n    }\r\n    \r\n    // Ratios cannot be changed\r\n    Ratios public ratios = Ratios({\r\n        team: 100,\r\n        marketing: 300,\r\n        rewards: 500,\r\n        total: 900\r\n    });\r\n\r\n    uint256 public totalFees = 9;\r\n\r\n    uint256 public maxWalletLimit = 1_200_000 * 10**18; // 1.2%\r\n    \r\n    IRouter02 public dexRouter;\r\n    address public dexPair;\r\n    uint256 public swapThreshold = 10_000 * 10**18; // 0.01%\r\n\r\n    bool private _isLiquefying;\r\n\r\n    modifier lockTheSwap {\r\n    if (!_isLiquefying) {\r\n        _isLiquefying = true;\r\n        _;\r\n        _isLiquefying = false;\r\n    }}\r\n\r\n    DividendDistributor distributor;\r\n    uint256 distributorGas = 750000;\r\n\r\n\r\n    // Before this date, only certain addresses can send tokens\r\n    uint256 public launchStartedTimestamp = 1666728000;\r\n\r\n    // Only these addresses will be able to send token before the launch.\r\n    // Generally it is the owner and the address of the presale which are added\r\n    mapping (address => bool) private _presaleAddresses;\r\n\r\n\r\n    // Any transfer to these addresses could be subject to some sell/buy taxes\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    event DistributorGasUpdated(uint256 newGas, uint256 oldGas);\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeFromMaxWalletLimit(address indexed account, bool isExcluded);\r\n    event ExcludeFromReward(address indexed account, bool isExcluded);\r\n\r\n    event AddAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event Router02Updated(address indexed newAddress, address indexed oldAddress);\r\n\r\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n    event TeamWalletUpdated(address indexed newTeamWallet, address indexed oldTeamWallet);\r\n\r\n    event Burn(uint256 amount);\r\n\r\n    event FeesUpdated(uint8 newFees);\r\n\r\n    event MaxSellLimitUpdated(uint256 amount);\r\n    event MaxWalletLimitUpdated(uint256 amount);\r\n    event MaxBuyLimitUpdated(uint256 amount);\r\n    event SwapThresholdUpdated(uint256 amount);\r\n\r\n    event LaunchStartedTimestampUpdated(uint256 timestamp);\r\n    event PresaleAddressAdded(address indexed account);\r\n\r\n    event SwapAndDistribute(uint256 tokensSwapped,uint256 bnbReceived);\r\n\r\n    event DistributionCriteriaUpdated(uint256 minPeriod, uint256 minDistribution);\r\n    event RewardTokenUpdated(address indexed newToken);\r\n\r\n    event Claim(address indexed account);\r\n\r\n    constructor() ERC20(\"Baby CookieSale\", \"BABY COOKIE\") {\r\n        // Create supply\r\n        _mint(msg.sender, 100_000_000 * 10**18);\r\n\r\n        dexRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    \tdistributor = new DividendDistributor(address(dexRouter));\r\n        liquidityWallet = owner();\r\n\r\n        dexPair = IFactory02(dexRouter.factory())\r\n            .createPair(address(this), dexRouter.WETH());\r\n        _setAutomatedMarketMakerPair(dexPair, true);\r\n\r\n        addPresaleAddresses(owner());\r\n\r\n        excludeFromReward(address(this),true);\r\n        excludeFromReward(address(DEAD),true);\r\n\r\n        _isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\r\n\r\n    }\r\n\r\n    receive() external payable {\r\n  \t}\r\n    \r\n    function excludeFromReward(address account, bool excluded) public onlyOwner {\r\n        require((account != address(this) && account != dexPair) || excluded, \"BABY COOKIE: Main pair and contract's addresses cannot be included from rewards\");\r\n        _isExcludedFromReward[account] = excluded;\r\n        if(excluded){\r\n            distributor.setShare(account, 0);\r\n        }else{\r\n            distributor.setShare(account, balanceOf(account));\r\n        }\r\n        emit ExcludeFromReward(account, excluded);\r\n\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded, \"BABY COOKIE: Account has already the value of 'excluded'\");\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromMaxWalletLimit(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromMaxWalletLimit[account] != excluded, \"BABY COOKIE: Account has already the value of 'excluded'\");\r\n        _isExcludedFromMaxWalletLimit[account] = excluded;\r\n        emit ExcludeFromMaxWalletLimit(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != dexPair, \"BABY COOKIE: The main pair cannot be removed from automatedMarketMakerPairs\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(automatedMarketMakerPairs[pair] != value, \"BABY COOKIE: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n        excludeFromReward(pair,value);\r\n        _isExcludedFromMaxWalletLimit[pair] = value;\r\n\r\n        emit AddAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setNewRouter02(address newRouter_) public onlyOwner {\r\n        IRouter02 newRouter = IRouter02(newRouter_);\r\n        address newPair = IFactory02(newRouter.factory()).getPair(address(this), newRouter.WETH());\r\n        if (newPair == address(0)) {\r\n            newPair = IFactory02(newRouter.factory()).createPair(address(this), newRouter.WETH());\r\n        }\r\n        dexPair = newPair;\r\n        dexRouter = IRouter02(newRouter_);\r\n    }\r\n\r\n\r\n    function setFees(uint8 newFee) external onlyOwner {\r\n        require(newFee <= 9 && newFee >=0,\"BABY COOKIE: Total fees must be between 0 and 9\");\r\n        totalFees = newFee;\r\n        emit FeesUpdated(newFee);\r\n    }\r\n\r\n    function setMaxWalletLimit(uint256 amount) external onlyOwner {\r\n        require(amount >= 500_000 && amount <= 2_000_000, \"BABY COOKIE: Amount must be bewteen 500,000 and 2,000,000\");\r\n        maxWalletLimit = amount *10**18;\r\n        emit MaxWalletLimitUpdated(amount);\r\n    }\r\n\r\n    function setSwapThreshold(uint256 amount) external onlyOwner {\r\n        require(amount >= 1 && amount <= 1_000_000, \"BABY COOKIE: Amount must be bewteen 1 and 1 000 000\");\r\n        swapThreshold = amount *10**18;\r\n        emit SwapThresholdUpdated(amount);\r\n\r\n    }\r\n\r\n    function setLaunchTimestamp(uint256 timestamp) external onlyOwner {\r\n        require(launchStartedTimestamp > block.timestamp, \"BABY COOKIE: Updating the timestamp is not allowed if the launch is already started\");\r\n        launchStartedTimestamp = timestamp;\r\n        emit LaunchStartedTimestampUpdated(timestamp);\r\n\r\n    }\r\n\r\n    // For adding presale addresses\r\n    function addPresaleAddresses(address account) public onlyOwner {\r\n        require(!_presaleAddresses[account],\"BABY COOKIE: This account is already added\");\r\n        _presaleAddresses[account] = true;\r\n        _isExcludedFromMaxWalletLimit[account] = true;\r\n        excludeFromReward(account,true);\r\n        _isExcludedFromFees[account] = true;\r\n        emit PresaleAddressAdded(account);\r\n    }\r\n\r\n    function setLiquidityWallet(address newWallet) public onlyOwner {\r\n        require(newWallet != liquidityWallet, \"BABY COOKIE: The liquidity wallet has already this address\");\r\n        emit LiquidityWalletUpdated(newWallet, liquidityWallet);\r\n        liquidityWallet = newWallet;\r\n    }\r\n    function setMarketingWallet(address payable newWallet) external onlyOwner {\r\n        require(newWallet != marketingWallet, \"BABY COOKIE: The marketing wallet has already this address\");\r\n        emit MarketingWalletUpdated(newWallet,marketingWallet);\r\n        marketingWallet = newWallet;\r\n    }\r\n\r\n    function setTeamWallet(address payable newWallet) external onlyOwner {\r\n        require(newWallet != teamWallet, \"BABY COOKIE: The team wallet has already this address\");\r\n        emit TeamWalletUpdated(newWallet,teamWallet);\r\n        teamWallet = newWallet;\r\n    }\r\n\r\n    function burn(uint256 amount) external returns (bool) {\r\n        _transfer(_msgSender(), DEAD, amount);\r\n        emit Burn(amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"BABY COOKIE: Transfer from the zero address\");\r\n        require(to != address(0), \"BABY COOKIE: Transfer to the zero address\");\r\n        require(amount >= 0, \"BABY COOKIE: Transfer amount must be greater or equals to zero\");\r\n\r\n        bool launchAlreadyStarted = block.timestamp >= launchStartedTimestamp;\r\n\r\n        if(!launchAlreadyStarted) {\r\n            require(_presaleAddresses[from], \"BABY COOKIE: This account is not allowed to send tokens before launch is started\");\r\n        }\r\n        bool isBuyTransfer = automatedMarketMakerPairs[from];\r\n        bool isSellTransfer = automatedMarketMakerPairs[to];\r\n\r\n        if(launchAlreadyStarted && !isSellTransfer && !isBuyTransfer && !_isExcludedFromMaxWalletLimit[to]) {\r\n            require(balanceOf(to) + amount <= maxWalletLimit, \"BABY COOKIE: Amount exceeds the maxWalletLimit.\");\r\n        }\r\n\r\n\r\n        bool takeFee = launchAlreadyStarted && !_isLiquefying && (isBuyTransfer || isSellTransfer);\r\n        // Remove fees if one of the address is excluded from fees\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) takeFee = false;\r\n\r\n        bool canSwap =  balanceOf(address(this)) >= swapThreshold;\r\n\r\n        if(launchAlreadyStarted && canSwap &&!_isLiquefying &&!automatedMarketMakerPairs[from] /* not during buying */) {\r\n            _isLiquefying = true;\r\n            swapAndDistribute(swapThreshold);\r\n            _isLiquefying = false;\r\n        }\r\n        uint256 amountWithoutFees = amount;\r\n        if(takeFee) {\r\n            amountWithoutFees = amount - amount * totalFees / 100;\r\n  \r\n            if(amount != amountWithoutFees) super._transfer(from, address(this), amount - amountWithoutFees);\r\n        }\r\n        // Buy\r\n        if(isBuyTransfer){\r\n            if(!_isExcludedFromMaxWalletLimit[to]) require(balanceOf(to) + amountWithoutFees <= maxWalletLimit, \"BABY COOKIE: Amount exceeds the maxWalletLimit.\");\r\n        }\r\n        super._transfer(from, to, amountWithoutFees);\r\n\r\n        processRewards(from, to);\r\n    }\r\n\r\n    function processRewards(address from, address to) internal {\r\n        if (!_isExcludedFromReward[from]) {\r\n            try distributor.setShare(from, balanceOf(from)) {} catch {}\r\n        }\r\n        if (!_isExcludedFromReward[to]) {\r\n            try distributor.setShare(to, balanceOf(to)) {} catch {}\r\n        }\r\n        if(getLaunchStarted()) {\r\n        try distributor.process(distributorGas) {} catch {}\r\n        }\r\n        \r\n    }\r\n\r\n    function swapAndDistribute(uint256 tokenAmount) private {\r\n        uint256 initialBalance = address(this).balance;\r\n        // Swap tokens for BNB\r\n        swapTokensForBNB(tokenAmount);\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n        uint256 rewardsBalance = (newBalance * ratios.rewards) / ratios.total;\r\n        uint256 marketingBalance = (newBalance * ratios.marketing) / ratios.total;\r\n        uint256 teamBalance = newBalance - rewardsBalance - marketingBalance;\r\n        marketingWallet.sendValue(marketingBalance);\r\n        teamWallet.sendValue(teamBalance);\r\n        try distributor.deposit{value: rewardsBalance}() {} catch {}\r\n\r\n    }\r\n\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n    }\r\n\r\n    function tryToDistributeTokensManually() external payable onlyOwner {        \r\n        if(\r\n            getLaunchStarted() && \r\n            !_isLiquefying\r\n        ) {\r\n            _isLiquefying = true;\r\n\r\n            swapAndDistribute(balanceOf(address(this)));\r\n\r\n            _isLiquefying = false;\r\n        }\r\n    } \r\n    // Airdrop\r\n    function batchTokensTransfer(address[] calldata _accounts, uint256[] calldata _amounts) external onlyOwner {\r\n        require(_accounts.length <= 200, \"BABY COOKIE: 200 addresses maximum\");\r\n        require(_accounts.length == _amounts.length, \"BABY COOKIE: Account array must have the same size as the amount array\");\r\n        require(_isExcludedFromReward[_msgSender()], \"BABY COOKIE: Owner must be excluded from reward\");\r\n        for (uint i = 0; i < _accounts.length; i++) {\r\n            if (_accounts[i] != address(0)) {\r\n                super._transfer(_msgSender(), _accounts[i], _amounts[i]);\r\n                if (!_isExcludedFromReward[_accounts[i]]) {\r\n                    try distributor.setShare(_accounts[i], balanceOf(_accounts[i])) {} catch {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getStuckBNBs(address payable to) external onlyOwner {\r\n        require(address(this).balance > 0, \"BABY COOKIE: There are no BNBs in the contract\");\r\n        to.transfer(address(this).balance);\r\n    } \r\n\r\n    function getStuckTokens(address payable to, address token, uint256 amount) external onlyOwner {\r\n        require(IERC20(token).balanceOf(address(this)) > 0, \"BABY COOKIE: There are tokens in the contract\");\r\n        require(token != address(this),\"BABY COOKIE: Baby CookieSale tokens cannot be got from the contract\");\r\n        IERC20(token).transfer(to,amount);\r\n    }\r\n\r\n\r\n    function setDistributorSettings(uint256 newGas) external onlyOwner {\r\n        require(newGas >= 100000 && newGas <= 900_000, \"BABY COOKIE: Gas must be between 100,000 and 900,000\");\r\n        require(newGas != distributorGas, \"BABY COOKIE: DistributorGas is already this value\");\r\n        distributorGas = newGas;\r\n        emit DistributorGasUpdated(newGas, distributorGas);\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 minPeriod_, uint256 minDistribution_) external onlyOwner {\r\n        distributor.setDistributionCriteria(minPeriod_, minDistribution_);\r\n        emit DistributionCriteriaUpdated(minPeriod_,minDistribution_);\r\n    }\r\n\r\n    function claimReward(address account) external {\r\n        distributor.claimDividend(account);\r\n        emit Claim(account);\r\n    }\r\n\r\n    function setRewardToken(address newToken) external onlyOwner {\r\n        distributor.setRewardToken(newToken);\r\n        emit RewardTokenUpdated(newToken);\r\n        \r\n    }\r\n\r\n    function getCirculatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(address(0));\r\n    }\r\n\r\n    function getLaunchStarted() public view returns (bool) {\r\n        return block.timestamp >= launchStartedTimestamp;\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function isExcludedFromMaxWalletLimit(address account) public view returns(bool) {\r\n        return _isExcludedFromMaxWalletLimit[account];\r\n    }\r\n\r\n    function isExcludedFromRewards(address account) public view returns(bool) {\r\n        return _isExcludedFromReward[account];    \r\n    }\r\n\r\n    function getTotalShares() public view returns(uint256) {\r\n        return distributor.totalShares();\r\n    }\r\n\r\n    function getTotalDividends() public view returns(uint256) {\r\n        return distributor.totalDividends();\r\n    }\r\n\r\n    function getTotalDistributed() public view returns(uint256) {\r\n        return distributor.totalDistributed();\r\n    }\r\n\r\n    function getCurrentIndex() public view returns(uint256) {\r\n        return distributor.currentIndex();\r\n    }\r\n\r\n    function getUnpaidEarnings(address account) public view returns(uint256) {\r\n        return distributor.getUnpaidEarnings(account);\r\n    }\r\n    \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AddAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDistribution\",\"type\":\"uint256\"}],\"name\":\"DistributionCriteriaUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldGas\",\"type\":\"uint256\"}],\"name\":\"DistributorGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newFees\",\"type\":\"uint8\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LaunchStartedTimestampUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityWallet\",\"type\":\"address\"}],\"name\":\"LiquidityWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxBuyLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxSellLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxWalletLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PresaleAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"RewardTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"Router02Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndDistribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTeamWallet\",\"type\":\"address\"}],\"name\":\"TeamWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPresaleAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTokensTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLaunchStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getStuckBNBs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchStartedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratios\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"team\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"marketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rewards\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDistribution_\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newGas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setLaunchTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setLiquidityWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter_\",\"type\":\"address\"}],\"name\":\"setNewRouter02\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryToDistributeTokensManually\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BabyCookieSale", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1018edbff154e7c6e095ea224fa2e6aa860c450493f15be1168462d6df8916c4"}