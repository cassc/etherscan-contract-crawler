{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Copyright (c) 2021 onPlanet.io All rights reserved.\r\n// onPlanet licenses this file to you under the MIT license.\r\n\r\n/*\r\n[TOKEN DESCRIPTION]\r\nonPlanet is a dApp for crypto enthusiasts and influencers to connect and grow the crypto industry.\r\nIt\u2019s a launch pad, an incubator for building teams and projects for raising funds and launching Creator Tokens. \r\nIt\u2019s a connected, social hub for thought leaders to emerge and brands to monetize.\r\n \r\n[TOKENOMICS BREAKDOWN]\r\nOn onPlanet token txns 10% buyback and business development fees are collected:\r\n* 5% for token Buyback from the market, \r\n    which are immediately burned- creating shrinking supply and rising price floor.\r\n* 5% for Business Development (Development, Sustainability and Marketing.\r\n              \u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2584\u2584\r\n                      \u2580\u2588\u2588\u2588\u2588\u2584\r\n                         \u2580\u2588\u2588\u2588\u2588\u2584\r\n                            \u2588\u2588\u2588\u2588\u2584    \u2580\u2584\r\n                              \u2588\u2588\u2588\u2588     \u2588\r\n                                \u2588\u2588\u2588    \u2580\r\n                                 \u2588\u2588\u2588\r\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588     \u2584\u2588\u2584     \u2588\u2588      \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\r\n \u2588\u258c      \u2588  \u2588\u2588\u2588\u2588    \u2588\u2588 \u2588\u258c     \u2588\u2588  \u2588\u2588\u2588    \u2588\u2588\u2580\u2588\u2588    \u2588\u2588\u2588\u2588    \u2588\u2588  \u2588            \u2588\u2588\r\n \u2588\u258c      \u2588  \u2588\u258c  \u2588\u2588\u2584 \u2588\u2588 \u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2588\u2588  \u2588\u2588\u2588   \u2588\u2588\u2584\u2584\u2584\u2588\u2588   \u2588\u258c  \u2588\u2588\u2584 \u2588\u2588  \u2588\u2588\u2580\u2580\u2580\u2580       \u2588\u2588\r\n \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u258c    \u2580\u2588\u2588\u2588 \u2588\u258c         \u2588\u2588\u258c \u2584\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\u2584 \u2588\u258c    \u2580\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2588\u2588\r\n                                  \u2588\u2588\r\n                                 \u2588\u2588\u2580\r\n                                 \u2588\u2580\r\n                                \u2588\u2580\r\n                               \u2588\u2580\r\n[GO TO WEBSITE]\r\nLearn more about onPlanet and the onPlanet Ecosystem at: https://onPlanet.io\r\n*/\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    \r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// helper methods for discovering LP pair addresses\r\nlibrary PairHelper {\r\n    bytes private constant token0Selector =\r\n        abi.encodeWithSelector(IUniswapV2Pair.token0.selector);\r\n    bytes private constant token1Selector =\r\n        abi.encodeWithSelector(IUniswapV2Pair.token1.selector);\r\n\r\n    function token0(address pair) internal view returns (address) {\r\n        return token(pair, token0Selector);\r\n    }\r\n\r\n    function token1(address pair) internal view returns (address) {\r\n        return token(pair, token1Selector);\r\n    }\r\n\r\n    function token(address pair, bytes memory selector)\r\n        private\r\n        view\r\n        returns (address)\r\n    {\r\n        // Do not check if pair is not a contract to avoid warning in txn log\r\n        if (!isContract(pair)) return address(0); \r\n\r\n        (bool success, bytes memory data) = pair.staticcall(selector);\r\n\r\n        if (success && data.length >= 32) {\r\n            return abi.decode(data, (address));\r\n        }\r\n        \r\n        return address(0);\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _buybackOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyBuybackOwner() {\r\n        require(\r\n            _buybackOwner == _msgSender(),\r\n            \"Ownable: caller is not the buyback owner\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _buybackOwner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function transferBuybackOwnership(address newOwner)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n\r\n        emit OwnershipTransferred(_buybackOwner, newOwner);\r\n        _buybackOwner = newOwner;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function buybackOwner() public view returns (address) {\r\n        return _buybackOwner;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract OnPlanet is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using PairHelper for address;\r\n\r\n    struct TransferDetails {\r\n        uint112 balance0;\r\n        uint112 balance1;\r\n        uint32 blockNumber;\r\n        address to;\r\n        address origin;\r\n    }\r\n    TransferDetails lastTransfer;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 10**9 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    string private _name = \"onPlanet\";\r\n    string private _symbol = \"OP\";\r\n\r\n    // Large data type for maths\r\n    uint256 private constant _decimals = 18;\r\n\r\n    // Short data type for decimals function (no per function conversion)\r\n    uint8 private constant _decimalsShort = uint8(_decimals);\r\n\r\n    address public zeroAddress = 0x0000000000000000000000000000000000000000;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public stakingAddress = 0xA158EBfaf40c3b2D5678D95cbD14d1428aDd7F37;\r\n\r\n    // Development, Marketing and Staking Wallets will all utilize Multi=signature Gnosis Safes\r\n    address payable public devAddress= payable(0x4A6ee106205E3cB8733C91488e931982bE23d5B6);\r\n    address payable public marketingAddress = payable(0xCbFF8fcdc1C5cfEA6FAf6f2eb2f042575c47ec73);\r\n\r\n    \r\n    mapping (address => uint256) private _rOwned; \r\n    mapping (address => uint256) private _tOwned; \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private lastCoolDownTrade;\r\n\r\n    address[] private hodler;\r\n    address[] private _excluded;\r\n    address[] public allEcosystemContracts;\r\n    mapping(address => bool) private _isHodler;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isOnPlanetEcosystemContract;\r\n\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint256) private firstSellTime;\r\n    mapping(address => uint256) private sellNumbers;\r\n   \r\n    uint256 public _inTaxFee;\r\n    uint256 public _inBuybackFee;\r\n    uint256 public _inTeamFee;\r\n\r\n    uint256 public _outTaxFee;\r\n    uint256 public _outBuybackFee;\r\n    uint256 public _outTeamFee;\r\n\r\n    uint256 public _taxFee;\r\n    uint256 private _defaultTaxFee;\r\n\r\n    uint256 public _buybackFee;\r\n    uint256 private _defaultBuybackFee;\r\n\r\n    uint256 public _teamFee;\r\n    uint256 private _defaultTeamFee;\r\n\r\n    bool public ethBuyBack = true;\r\n    bool public isReflection = true;\r\n\r\n    bool public buyBackEnabled = false;\r\n    bool public swapAndLiquifyEnabled = false;\r\n\r\n    bool public multiFeeOn = true;\r\n\r\n    uint256 public _maxSellCount = 3;\r\n    uint256 public _maxTxAmount = 5000000 * 10**_decimals;\r\n    uint256 public minimumTokensBeforeSwap = 125000 * 10**_decimals;\r\n\r\n    uint256 private buyBackUpperLimit = 10 * 10**_decimals;\r\n    uint256 private buyBackTriggerTokenLimit = 1 * 10**6 * 10**_decimals;\r\n    uint256 private buyBackMinAvailability = 1 * 10**_decimals; //1 BNB\r\n\r\n    uint256 private buyVolume = 0;\r\n    uint256 private sellVolume = 0;\r\n\r\n    uint256 private nextBuybackAmount = 0;\r\n    uint256 private buyBackTriggerVolume = 100 * 10**6 * 10**_decimals;\r\n\r\n    uint256 private tradingStart = MAX;\r\n    uint256 private tradingStartCooldown = MAX;\r\n\r\n\r\n    uint256 private constant _FALSE = 1;\r\n    uint256 private constant _TRUE = 2;\r\n\r\n    uint256 private _checkingTokens;\r\n    uint256 private _inSwapAndLiquify;\r\n\r\n    uint256 private _tFeeTotal;\r\n    uint256 private _tradeStartMaxTxAmount = _tTotal.div(1000); // Max txn 0.1% of supply\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router; \r\n    address public uniswapV2Pair;   \r\n    \r\n    address public _buyback_token_addr = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    \r\n    event BuyBackEnabledUpdated(bool enabled);\r\n    event EthBuyBack(bool enabled);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event SwapETHForTokens(uint256 amountIn, address[] path);\r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event SwapTokensForTokens(uint256 amountIn, address[] path);\r\n\r\n    event ExcludeFromFeeUpdated(address account);\r\n    event IncludeInFeeUpdated(address account);\r\n\r\n    event LiquidityFeeUpdated(uint256 prevValue, uint256 newValue);\r\n    event MaxTxAmountUpdated(uint256 prevValue, uint256 newValue);\r\n    \r\n    event MinTokensBeforeSwapUpdated(uint256 prevValue, uint256 newValue);\r\n    event BuybackMinAvailabilityUpdated(uint256 prevValue, uint256 newValue);\r\n\r\n    event BuybackUpperLimitUpdated(uint256 prevValue, uint256 newValue);\r\n    event BuyBackTriggerTokenLimitUpdated(uint256 prevValue, uint256 newValue);\r\n\r\n    event TradingEnabled();\r\n    event StakingAddressUpdated(address _addr);\r\n\r\n    event OnPlanetEcosystemContractAdded(address contractAddress);\r\n    event OnPlanetEcosystemContractRemoved(address contractAddress);\r\n    \r\n    modifier lockTheSwap() {\r\n        require(_inSwapAndLiquify != _TRUE, \"This must be false\");\r\n        _inSwapAndLiquify = _TRUE;\r\n        _;\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _inSwapAndLiquify = _FALSE;\r\n    }\r\n\r\n    modifier tokenCheck() {\r\n        require(_checkingTokens != _TRUE, \"This must be false\");\r\n        _checkingTokens = _TRUE;\r\n        _;\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _checkingTokens = _FALSE;\r\n    }\r\n\r\n    constructor() {\r\n\r\n\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        _tOwned[_msgSender()] = _tTotal;\r\n\r\n        _checkingTokens = _FALSE;\r\n        _inSwapAndLiquify = _FALSE;\r\n\r\n        //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //Pancakeswap router mainnet - BSC\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); //Testnet\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506); //Sushiswap router mainnet - Polygon\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Uniswap V2 router mainnet - ETH\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xa5e0829caced8ffdd4de3c43696c57f7d7a678ff); //Quickswap V2 router mainnet - Polygon\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xBBe737384C2A26B15E23a181BDfBd9Ec49E00248); //Pinksale Testnet\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _isExcluded[uniswapV2Pair] = true; \r\n        _excluded.push(uniswapV2Pair);\r\n\r\n        _isHodler[owner()] = true;\r\n        hodler.push(owner());\r\n\r\n        _isHodler[address(this)] = true;\r\n        hodler.push(address(this));\r\n\r\n        _isHodler[uniswapV2Pair] = true;\r\n        hodler.push(uniswapV2Pair);\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimalsShort;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function manualBuyback(uint256 amount, uint256 numOfDecimals)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        require(amount > 0 && numOfDecimals >= 0, \"Invalid Input\");\r\n\r\n        uint256 value = amount.mul(10**18).div(10**numOfDecimals);\r\n\r\n        if(ethBuyBack){\r\n            swapETHForTokensNoFee(\r\n                address(this),\r\n                stakingAddress,\r\n                value\r\n            );\r\n        }else{\r\n            swapTokensForTokens(\r\n                _buyback_token_addr,\r\n                address(this),\r\n                stakingAddress,\r\n                value\r\n            );\r\n        }\r\n    }\r\n\r\n    function buyBackTokens(uint256 amount) private lockTheSwap {\r\n        if (amount > 0) {\r\n            swapETHForTokensNoFee(\r\n                address(this),\r\n                stakingAddress,\r\n                amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 initialBalance;\r\n        uint256 transferredBalance;\r\n\r\n        require(_buybackFee > 0, \"buybackFee can't be zero\");\r\n        require(_teamFee > 0, \"teamFee can't be zero\");\r\n\r\n        if(ethBuyBack) {\r\n            initialBalance = address(this).balance;\r\n            swapTokensForEth(\r\n                address(this),\r\n                address(this),\r\n                contractTokenBalance\r\n            );\r\n            transferredBalance = address(this).balance.sub(initialBalance);\r\n            if(_teamFee != 0 && _buybackFee != 0 && _buybackFee + _teamFee != 0){\r\n                transferToAddressETH(marketingAddress, transferredBalance.mul(_teamFee).div(_buybackFee + _teamFee).div(2));\r\n                transferToAddressETH(devAddress, transferredBalance.mul(_teamFee).div(_buybackFee + _teamFee).div(2));\r\n            }\r\n       } else {\r\n            initialBalance = IERC20(_buyback_token_addr).balanceOf(address(this));\r\n            swapTokensForTokens(\r\n                address(this),\r\n                _buyback_token_addr,\r\n                address(this),\r\n                contractTokenBalance\r\n            );\r\n            transferredBalance = IERC20(_buyback_token_addr).balanceOf(address(this)).sub(initialBalance);\r\n            if(_teamFee != 0 && _buybackFee != 0 && _buybackFee + _teamFee != 0){\r\n                IERC20(_buyback_token_addr).transfer(marketingAddress, transferredBalance.mul(_teamFee).div(_buybackFee + _teamFee).div(2));\r\n                IERC20(_buyback_token_addr).transfer(devAddress, transferredBalance.mul(_teamFee).div(_buybackFee + _teamFee).div(2));\r\n            }\r\n       }\r\n    }\r\n\r\n    function setBuybackUpperLimit(uint256 buyBackLimit, uint256 numOfDecimals)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        // lower boundary for buyBackUpperLimit is 0.00001 bnb\r\n        // upper boundary for buyBackUpperLimit is 1000 bnb\r\n\r\n        require(buyBackLimit > 0, \"Buyback upper limit must be greater than one bnb\");\r\n        require(buyBackLimit <= 1000, \"Buyback upper limit must be lower than 1000 bnb\");\r\n        require(numOfDecimals <= 5, \"numOfDecimals must be less or equal to 5\");\r\n\r\n        uint256 prevValue = buyBackUpperLimit;\r\n\r\n        buyBackUpperLimit = buyBackLimit.mul(10**18).div(10**numOfDecimals);\r\n        emit BuybackUpperLimitUpdated(prevValue, buyBackUpperLimit);\r\n    }\r\n\r\n    function setBuybackTriggerTokenLimit(uint256 _buyBackTriggerLimit)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        // converting weis into tokens\r\n        uint buyBackTriggerLimit = _buyBackTriggerLimit.mul(10**18);\r\n\r\n        // lower boundary for buyBackTriggerTokenLimit is 1 OP\r\n        // upper boundary for buyBackTriggerTokenLimit is 1% of the total supply\r\n\r\n        require(buyBackTriggerLimit > 0,  \"should be more than zero\");\r\n        require(buyBackTriggerLimit <= _tTotal.mul(1).div(100),  \"should be less then 1% of _tTotal\");\r\n\r\n        uint256 prevValue = buyBackTriggerTokenLimit;\r\n\r\n        buyBackTriggerTokenLimit = buyBackTriggerLimit;\r\n\r\n        emit BuyBackTriggerTokenLimitUpdated(\r\n            prevValue,\r\n            buyBackTriggerTokenLimit\r\n        );\r\n    }\r\n\r\n    function setBuybackMinAvailability(uint256 amount, uint256 numOfDecimals)\r\n        external\r\n        onlyBuybackOwner\r\n    {\r\n        \r\n        // lower boundary for buyBackMinAvailability is 0.00001 bnb\r\n        // upper boundary for buyBackMinAvailability is 1000 bnb\r\n\r\n        require(amount > 0, \"buyBack Min Availability must be greater than zero\");\r\n        require(amount <= 1000, \"buyBack Min Availability must be less or equal to 1000\");\r\n        \r\n        require(numOfDecimals <= 5, \"numOfDecimals must be less or equal to 5\");\r\n\r\n        uint256 prevValue = buyBackMinAvailability;\r\n\r\n        buyBackMinAvailability = amount.mul(10**18).div(10**numOfDecimals);\r\n        emit BuybackMinAvailabilityUpdated(prevValue, buyBackMinAvailability);\r\n    }\r\n\r\n    function setBuyBackEnabled(bool _enabled) public onlyBuybackOwner {\r\n        buyBackEnabled = _enabled;\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setTradingEnabled(uint256 _tradeStartDelay, uint256 _tradeStartCoolDown) external onlyOwner {\r\n        require(_tradeStartDelay < 10, \"tradeStartDelay should be less than 10 minutes\");\r\n        require(_tradeStartCoolDown < 120, \"tradeStartCoolDown should be less than 120 minutes\");\r\n        require(_tradeStartDelay < _tradeStartCoolDown, \"tradeStartDelay must be less than tradeStartCoolDown\");\r\n        \r\n        // Can only be called once\r\n        require(tradingStart == MAX && tradingStartCooldown == MAX, \"Trading has already started\");\r\n        \r\n        // Set initial values\r\n        _inTaxFee = _outTaxFee  = _taxFee = _defaultTaxFee = 2;\r\n        _inBuybackFee = _outBuybackFee = _buybackFee = _defaultBuybackFee = 5;\r\n        _inTeamFee = _outTeamFee = _teamFee =_defaultTeamFee = 3;\r\n\r\n        _maxTxAmount = _tradeStartMaxTxAmount;\r\n\r\n        setBuyBackEnabled(true);\r\n        setSwapAndLiquifyEnabled(true);\r\n        // Add time buffer to allow switching on trading on every chain\r\n        // before announcing to community\r\n        tradingStart = block.timestamp + _tradeStartDelay * 1 minutes;\r\n        tradingStartCooldown = tradingStart + _tradeStartCoolDown * 1 minutes;\r\n        // Announce to blockchain immediately, even though trades\r\n        // can't start until delay passes (snipers no sniping)\r\n        emit TradingEnabled();\r\n    }\r\n\r\n    function isTradingEnabled() public view returns (bool) {\r\n        // Trading has been set and has time buffer has elapsed\r\n        // return tradingStart < block.timestamp;\r\n        return block.timestamp > tradingStart;\r\n    }\r\n\r\n    function inTradingStartCoolDown() public view returns (bool) {\r\n\r\n        // Check if trading is enabled \r\n        // If yes, check current status and return a bool accordingly\r\n        // If not, just return true \r\n\r\n        if(isTradingEnabled()){\r\n            return tradingStartCooldown >= block.timestamp;\r\n        }\r\n        else {\r\n            return true;\r\n        }   \r\n\r\n    }\r\n\r\n    function maxTxCooldownAmount() public view returns (uint256) {\r\n        return _tTotal.div(2000);\r\n    }\r\n\r\n    function inTokenCheck() private view returns (bool) {\r\n        return _checkingTokens == _TRUE;\r\n    }\r\n\r\n    function inSwapAndLiquify() private view returns (bool) {\r\n        return _inSwapAndLiquify == _TRUE;\r\n    }\r\n\r\n    function setReflectionOn(bool enabled)public onlyOwner{\r\n        isReflection = enabled;\r\n    }\r\n\r\n    function transferBalance(address payable _transferWallet) external onlyOwner {\r\n        require(_transferWallet != zeroAddress, \"Transfer Wallet cannot be zero address\");\r\n        require(_transferWallet != deadAddress, \"Transfer Wallet cannot be dead address\");\r\n        require(address(this).balance != 0, \"Transfer BNB amount cannot be zero\");\r\n        _transferWallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!bots[from] && !bots[to], \"ERR: banned transfer\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!inTokenCheck(), \"Invalid reentrancy from token0/token1 balanceOf check\");\r\n\r\n        address _owner = owner();\r\n        bool isIgnoredAddress = from == _owner || to == _owner ||\r\n             _isOnPlanetEcosystemContract[from] || _isOnPlanetEcosystemContract[to];\r\n\r\n        require(amount <= _maxTxAmount || isIgnoredAddress, \"Transfer amount exceeds the maxTxAmount\");\r\n\r\n        bool _isTradingEnabled = isTradingEnabled();\r\n        require(_isTradingEnabled || isIgnoredAddress, \"Trading is not enabled\");\r\n\r\n        bool notInSwapAndLiquify = !inSwapAndLiquify();\r\n        if (inTradingStartCoolDown() && !isIgnoredAddress && notInSwapAndLiquify) {\r\n            validateDuringTradingCoolDown(to, from, amount);\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n        // Following block is for the contract to convert the tokens to ETH and do the buy back\r\n        if (!inSwapAndLiquify() && swapAndLiquifyEnabled && to == uniswapV2Pair) {\r\n            if (overMinimumTokenBalance) {\r\n                contractTokenBalance = minimumTokensBeforeSwap;\r\n                swapTokens(contractTokenBalance);\r\n            }\r\n\r\n            if (buyBackEnabled && address(this).balance > buyBackMinAvailability \r\n                && buyVolume.add(sellVolume) > buyBackTriggerVolume) \r\n            {\r\n\r\n                if (nextBuybackAmount > address(this).balance) {\r\n                    nextBuybackAmount = address(this).balance;\r\n                }\r\n                \r\n                if (nextBuybackAmount > 0) {\r\n                    buyBackTokens(nextBuybackAmount);\r\n                    nextBuybackAmount = 0; //reset the next buyback amount\r\n                    buyVolume = 0; //reset the buy volume\r\n                    sellVolume = 0; // reset the sell volume\r\n                }\r\n            }\r\n        }\r\n\r\n        // Compute Sell Volume and set the next buyback amount\r\n        if (to == uniswapV2Pair) {\r\n            sellVolume = sellVolume.add(amount);\r\n            if (amount > buyBackTriggerTokenLimit) {\r\n                uint256 balance = address(this).balance;\r\n                if (balance > buyBackUpperLimit) balance = buyBackUpperLimit;\r\n                nextBuybackAmount = nextBuybackAmount.add(balance.div(100));\r\n            }\r\n            \r\n            _taxFee = _inTaxFee;\r\n            _buybackFee = _inBuybackFee;\r\n            _teamFee = _inTeamFee;\r\n\r\n            if(multiFeeOn){\r\n                if(firstSellTime[from] + (1 days) < block.timestamp){\r\n                    sellNumbers[from] = 0;\r\n                }\r\n\r\n                if (sellNumbers[from] == 0) {\r\n                    firstSellTime[from] = block.timestamp;\r\n                }\r\n                \r\n                sellNumbers[from] = sellNumbers[from] + 1;\r\n\r\n                if (sellNumbers[from] >= _maxSellCount ) { \r\n                    setMultiFee();\r\n                }\r\n            }\r\n        }\r\n\r\n        // Compute Buy Volume\r\n        if (from == uniswapV2Pair) {\r\n            buyVolume = buyVolume.add(amount);\r\n\r\n            _taxFee = _outTaxFee;\r\n            _buybackFee = _outBuybackFee;\r\n            _teamFee = _outTeamFee;\r\n        }\r\n        \r\n        bool takeFee = true;\r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        \r\n        // For safety Liquidity Adds should only be done by an owner, \r\n        // and transfers to and from onPlanet Ecosystem contracts\r\n        // are not considered LP adds\r\n        if (isIgnoredAddress || buybackOwner() == _msgSender()) {\r\n            // Clear transfer data\r\n            _clearTransferIfNeeded();\r\n        } else if (notInSwapAndLiquify) {\r\n            // Not in a swap during a LP add, so record the transfer details\r\n            _recordPotentialLiquidityAddTransaction(to);\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function _recordPotentialLiquidityAddTransaction(address to)\r\n        private\r\n        tokenCheck {\r\n        uint112 balance0 = uint112(balanceOf(to));\r\n        address token1 = to.token1();\r\n        if (token1 == address(this)) {\r\n            // Switch token so token1 is always other side of pair\r\n            token1 = to.token0();\r\n        }\r\n\r\n        uint112 balance1;\r\n        if (token1 == address(0)) {\r\n            // Not a LP pair, or not yet (contract being created)\r\n            balance1 = 0;\r\n        } else {\r\n            balance1 = uint112(IERC20(token1).balanceOf(to));\r\n        }\r\n\r\n\r\n        lastTransfer = TransferDetails({\r\n            balance0: balance0,\r\n            balance1: balance1,\r\n            blockNumber: uint32(block.number),\r\n            to: to,\r\n            origin: tx.origin\r\n        });    \r\n    }\r\n\r\n    function _clearTransferIfNeeded() private {\r\n        // Not Liquidity Add or is owner, clear data from same block to allow balanceOf\r\n        if (lastTransfer.blockNumber == uint32(block.number)) {\r\n            // Don't need to clear if different block\r\n            lastTransfer = TransferDetails({\r\n                balance0: 0,\r\n                balance1: 0,\r\n                blockNumber: 0,\r\n                to: address(0),\r\n                origin: address(0)\r\n            });        \r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(\r\n        address tokenAddress,\r\n        address toAddress,\r\n        uint256 tokenAmount\r\n    ) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenAddress;\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        IERC20(tokenAddress).approve(address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function swapETHForTokensNoFee(\r\n        address tokenAddress,\r\n        address toAddress,\r\n        uint256 amount\r\n    ) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = tokenAddress;\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokens{\r\n            value: amount\r\n        }(\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp.add(300)\r\n        );\r\n\r\n        emit SwapETHForTokens(amount, path);\r\n    }\r\n\r\n    function swapTokensForTokens(\r\n        address fromTokenAddress,\r\n        address toTokenAddress,\r\n        address toAddress,\r\n        uint256 tokenAmount\r\n    ) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](3);\r\n        path[0] = fromTokenAddress;\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = toTokenAddress;\r\n\r\n        IERC20(fromTokenAddress).approve(address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of Tokens\r\n            path,\r\n            toAddress, // The contract\r\n            block.timestamp.add(120)\r\n        );\r\n\r\n        emit SwapTokensForTokens(tokenAmount, path);\r\n    }\r\n\r\n    function validateDuringTradingCoolDown(address to, address from, uint256 amount) private {\r\n        address pair = uniswapV2Pair;\r\n        bool disallow;\r\n\r\n        // Disallow multiple same source trades in same block\r\n        if (from == pair) {\r\n            disallow = lastCoolDownTrade[to] == block.number || lastCoolDownTrade[tx.origin] == block.number;\r\n            lastCoolDownTrade[to] = block.number;\r\n            lastCoolDownTrade[tx.origin] = block.number;\r\n        } else if (to == pair) {\r\n            disallow = lastCoolDownTrade[from] == block.number || lastCoolDownTrade[tx.origin] == block.number;\r\n            lastCoolDownTrade[from] = block.number;\r\n            lastCoolDownTrade[tx.origin] = block.number;\r\n        }\r\n\r\n\r\n        require(!disallow, \"Multiple trades in same block from same source are not allowed during trading start cooldown\");\r\n        require(amount <= maxTxCooldownAmount(), \"Max transaction is 0.05% of total supply during trading start cooldown\");\r\n    }\r\n\r\n    // account must be recorded in _transfer and same block\r\n    function _validateIfLiquidityAdd(address account, uint112 balance0)\r\n        private\r\n        view\r\n    {\r\n        // Test to see if this tx is part of a Liquidity Add\r\n        // using the data recorded in _transfer\r\n        TransferDetails memory _lastTransfer = lastTransfer;\r\n        if (_lastTransfer.origin == tx.origin) {\r\n            // May be same transaction as _transfer, check LP balances\r\n            address token1 = account.token1();\r\n\r\n            if (token1 == address(this)) {\r\n                // Switch token so token1 is always other side of pair\r\n                token1 = account.token0();\r\n            }\r\n\r\n            // Not LP pair\r\n            if (token1 == address(0)) return;\r\n\r\n            uint112 balance1 = uint112(IERC20(token1).balanceOf(account));\r\n\r\n            if (balance0 > _lastTransfer.balance0 &&\r\n                balance1 > _lastTransfer.balance1) {\r\n                // Both pair balances have increased, this is a Liquidty Add\r\n                require(false, \"Liquidity can be added by the owner only\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function buyBackUpperLimitAmount() public view returns (uint256) {\r\n        return buyBackUpperLimit;\r\n    }\r\n    \r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _rOwned[account] = _tOwned[account].mul(_getRate());\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!_isHodler[recipient] && amount > 0){\r\n            _isHodler[recipient] = true;\r\n            hodler.push(recipient);\r\n        }\r\n        restoreAllFee();\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\t    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateTaxFee(tAmount);\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n    \r\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_taxFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    \r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_buybackFee + _teamFee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_taxFee == 0 && _buybackFee == 0 && _teamFee == 0) return;\r\n        \r\n        _taxFee = 0;\r\n        _buybackFee = 0;\r\n        _teamFee = 0;\r\n    }\r\n    \r\n    function restoreAllFee() private {\r\n        if(isReflection)\r\n            _taxFee = _defaultTaxFee;\r\n        else\r\n            _taxFee = 0;\r\n\r\n        _buybackFee = _defaultBuybackFee;\r\n        _teamFee = _defaultTeamFee;\r\n    }\r\n\r\n    function setMultiFee() private {\r\n        _taxFee = 2;\r\n        _buybackFee = 6;\r\n        _teamFee = 25;\r\n    }\r\n\r\n    function setBotAddress(address _botAddress, bool enabled) public onlyOwner {\r\n        bots[_botAddress] = enabled;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n \r\n    function setDefaultInFeePercent(uint256 tax, uint256 buyback, uint256 team) external onlyOwner() {\r\n        _inTaxFee = tax;\r\n        _inBuybackFee = buyback;\r\n        _inTeamFee = team;\r\n    }\r\n\r\n    function setDefaultOutFeePercent(uint256 tax, uint256 buyback, uint256 team) external onlyOwner() {\r\n        _outTaxFee = tax;\r\n        _outBuybackFee = buyback;\r\n        _outTeamFee = team;\r\n    }\r\n\r\n    function setMultiFeeOn(bool isMultiFee) external onlyOwner(){\r\n        multiFeeOn = isMultiFee;\r\n    }\r\n    \r\n    function setMaxSellCount(uint256 maxCount) external onlyOwner(){\r\n        _maxSellCount = maxCount;\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        _maxTxAmount = maxTxAmount.mul(10**18);\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(uint256 _minimumTokensBeforeSwap) external onlyOwner() {\r\n        require(_minimumTokensBeforeSwap > 0, \"Minimum amount for token swap must be greater than zero\");\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap.mul(10**18);\r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner() {\r\n        require(_marketingAddress != zeroAddress, \"Marketing wallet cannot be zero address\");\r\n        require(_marketingAddress != deadAddress, \"Marketing wallet cannot be dead address\");\r\n\r\n        marketingAddress = payable(_marketingAddress);\r\n    }\r\n\r\n    function setDeveloperAddress(address _devAddress) external onlyOwner(){\r\n        require(_devAddress != zeroAddress, \"Dev team wallet cannot be zero address\");\r\n        require(_devAddress != deadAddress, \"Dev team wallet cannot be dead address\");\r\n\r\n        devAddress = payable(_devAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setEthBuyback(bool _enabled) public onlyOwner {\r\n        ethBuyBack = _enabled;\r\n        emit EthBuyBack(_enabled);\r\n    }\r\n\r\n    function setReflectionEnabled(bool _enabled) public onlyOwner {\r\n        isReflection = _enabled;\r\n\r\n        if(isReflection){\r\n            for (uint256 i = _excluded.length - 1; i > 0; i--) {\r\n                _tOwned[_excluded[i]] = 0;\r\n                _isExcluded[_excluded[i]] = false;\r\n                _excluded.pop();\r\n            }\r\n        }else{\r\n            for(uint256 i = 0; i < hodler.length; i++){\r\n                if(_rOwned[hodler[i]] > 0) {\r\n                    _tOwned[hodler[i]] = tokenFromReflection(_rOwned[hodler[i]]);\r\n                }\r\n                _isExcluded[hodler[i]] = true;\r\n                _excluded.push(hodler[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setBuyBackTokenAddress(address _addr) public onlyOwner {\r\n        require(_addr != zeroAddress, \"Buyback token address cannot be zero address\");\r\n        require(_addr != deadAddress, \"Buyback token address cannot be dead address\");\r\n        _buyback_token_addr = _addr;\r\n    }\r\n\r\n    function updateStakingAddress(address _addr) public onlyOwner {\r\n        stakingAddress = _addr;\r\n        emit StakingAddressUpdated(_addr);\r\n    }\r\n\r\n    function allEcosystemContractsLength() external view returns (uint) {\r\n        return allEcosystemContracts.length;\r\n    }\r\n\r\n    function _onPlanetEcosystemContractAdd(address contractAddress) external onlyOwner {\r\n        _isOnPlanetEcosystemContract[contractAddress] = true;\r\n        allEcosystemContracts.push(contractAddress);\r\n\r\n        emit OnPlanetEcosystemContractAdded(contractAddress);\r\n        excludeFromFee(contractAddress);\r\n    }\r\n\r\n    function onPlanetEcosystemContractRemove(address contractAddress) external onlyOwner {\r\n        require(\r\n            _isOnPlanetEcosystemContract[contractAddress],\r\n            \"contractAddress is not included as onPlanet Ecosystem contract\"\r\n        );\r\n\r\n        _isOnPlanetEcosystemContract[contractAddress] = false;\r\n\r\n        for (uint256 i = 0; i < allEcosystemContracts.length; i++) {\r\n            if (allEcosystemContracts[i] == contractAddress) {\r\n                allEcosystemContracts[i] = allEcosystemContracts[allEcosystemContracts.length - 1];\r\n                allEcosystemContracts.pop();\r\n                includeInFee(contractAddress);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        emit OnPlanetEcosystemContractRemoved(contractAddress);\r\n    }\r\n    \r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256){\r\n        uint256 balance0 = _balanceOf(account);\r\n        uint256 balance1 = tokenFromReflection(_rOwned[account]);\r\n\r\n        if (\r\n            !inSwapAndLiquify() &&\r\n            lastTransfer.blockNumber == uint32(block.number) &&\r\n            account == lastTransfer.to\r\n        ) {\r\n            // Balance being checked is same address as last to in _transfer\r\n            // check if likely same txn and a Liquidity Add\r\n            _validateIfLiquidityAdd(account, uint112(balance0));\r\n        }\r\n\r\n        if(isReflection && !_isExcluded[account])\r\n            return balance1;\r\n\r\n        return balance0;\r\n    }\r\n\r\n    function _balanceOf(address account) private view returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuyBackTriggerTokenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackMinAvailabilityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"BuybackUpperLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"EthBuyBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeFromFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeInFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OnPlanetEcosystemContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"OnPlanetEcosystemContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StakingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyback_token_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxSellCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"_onPlanetEcosystemContractAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_outBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_outTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_outTeamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allEcosystemContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allEcosystemContractsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackUpperLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBuyBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inTradingStartCoolDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"manualBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxCooldownAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiFeeOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"onPlanetEcosystemContractRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setBotAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setBuyBackTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setBuybackMinAvailability\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyBackTriggerLimit\",\"type\":\"uint256\"}],\"name\":\"setBuybackTriggerTokenLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfDecimals\",\"type\":\"uint256\"}],\"name\":\"setBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"setDefaultInFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"team\",\"type\":\"uint256\"}],\"name\":\"setDefaultOutFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDeveloperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setEthBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isMultiFee\",\"type\":\"bool\"}],\"name\":\"setMultiFeeOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setReflectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setReflectionOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeStartDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeStartCoolDown\",\"type\":\"uint256\"}],\"name\":\"setTradingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_transferWallet\",\"type\":\"address\"}],\"name\":\"transferBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferBuybackOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OnPlanet", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b46b44e362c5f446c911d2f2d8041ba005aee763f4a9b0418f44b12616a3141c"}