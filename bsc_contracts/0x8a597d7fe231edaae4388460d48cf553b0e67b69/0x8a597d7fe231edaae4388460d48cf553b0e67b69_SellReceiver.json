{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IMDB {\r\n    function getOwner() external view returns (address);\r\n}\r\n\r\ninterface IYieldFarm {\r\n    function depositRewards(uint256 amount) external;\r\n}\r\n\r\ninterface IAutoFarm {\r\n    function compound() external;\r\n}\r\n\r\ncontract SellReceiver {\r\n\r\n    // router\r\n    IUniswapV2Router02 router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    // MDB token\r\n    address public token = 0x0557a288A93ed0DF218785F2787dac1cd077F8f3;\r\n\r\n    // Recipients Of Fees\r\n    address public trustFund = 0x45F8F3a7A91e302935eB644f371bdE63D0b1bAc6;\r\n    address public marketing = 0x511DEaD182a47c60034FEdf36eA0714972625E85;\r\n    address public yieldFarm = 0x08254Df4F9461f8Fc15235be5092862BfF4824d4;\r\n    address public staking = 0xe8f699B68ddE8e59DBe8fdF20955931B25fe7dFa;\r\n    address public MDBPFarm = 0x65545d6eBf5F4245Ca2f9c90468dE38fE88E3672;\r\n    address public BNBAutoFarm = 0x805Cc5aA1EBeE725250084D2ECcD9473c8bE46A9;\r\n\r\n    // Token -> BNB\r\n    address[] path;\r\n\r\n    /**\r\n        Minimum Amount Of MDB In Contract To Trigger `trigger` Unless `approved`\r\n            If Set To A Very High Number, Only Approved May Call Trigger Function\r\n            If Set To A Very Low Number, Anybody May Call At Their Leasure\r\n     */\r\n    uint256 public minimumTokensRequiredToTrigger;\r\n\r\n    // Trust Fund Allocation\r\n    uint256 public marketingPercentage = 200;\r\n    uint256 public trustFundPercentage = 536;\r\n\r\n    // Address => Can Call Trigger\r\n    mapping ( address => bool ) public approved;\r\n\r\n    // Events\r\n    event Approved(address caller, bool isApproved);\r\n    event MinTriggerAmountUpdated(uint256 newMinTriggerAmount);\r\n    event TrustFundPercentageUpdated(uint256 newTrustFundPercentage);\r\n    event MarketingPercentageUpdated(uint256 newMarketingPercentage); \r\n    event TokenUpdated(address newToken);\r\n    event TrustFundUpdated(address newTrustFund);\r\n    event MarketingUpdated(address newMarketing);\r\n    event YieldFarmUpdated(address newYieldFarm);\r\n    event StakingUpdated(address newStaking);\r\n    event MDBPFarmUpdated(address newMDBPFarm);\r\n    event BNBAutoFarmUpdated(address newBNBAutoFarm);\r\n\r\n    modifier onlyOwner(){\r\n        require(\r\n            msg.sender == IMDB(token).getOwner(),\r\n            'Only MDB Owner'\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n\r\n        // Sell Path\r\n        path = new address[](2);\r\n        path[0] = token;\r\n        path[1] = router.WETH();\r\n\r\n        // set initial approved\r\n        approved[msg.sender] = true;\r\n\r\n        // only approved can trigger at the start\r\n        minimumTokensRequiredToTrigger = 10**30;\r\n    }\r\n\r\n    function trigger() external {\r\n\r\n        // MDB Balance In Contract\r\n        uint balance = IERC20(token).balanceOf(address(this));\r\n\r\n        if (balance < minimumTokensRequiredToTrigger && !approved[msg.sender]) {\r\n            return;\r\n        }\r\n\r\n        uint toSell = balance * ( marketingPercentage + trustFundPercentage ) / 1000;\r\n        uint toSend = balance - toSell;\r\n        uint forFarms = toSend / 3;\r\n        uint forStaking = toSend - ( 2 * forFarms );\r\n\r\n        // Send to standard farm\r\n        IERC20(token).approve(yieldFarm, forFarms);\r\n        IYieldFarm(yieldFarm).depositRewards(forFarms);\r\n\r\n        // send to auto farm\r\n        IERC20(token).transfer(MDBPFarm, forFarms);\r\n\r\n        // Send to staking\r\n        IERC20(token).transfer(staking, forStaking);\r\n\r\n        // compound auto yield farms\r\n        IAutoFarm(MDBPFarm).compound();\r\n        IAutoFarm(BNBAutoFarm).compound();\r\n        \r\n        // sell MDB in contract for BNB\r\n        IERC20(token).approve(address(router), toSell);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(toSell, 0, path, address(this), block.timestamp + 300);\r\n\r\n        if (address(this).balance > 0) {\r\n            // fraction out bnb received\r\n            uint part1 = address(this).balance * trustFundPercentage / ( marketingPercentage + trustFundPercentage );\r\n            uint part2 = address(this).balance - part1;\r\n\r\n            // send to destinations\r\n            _send(trustFund, part1);\r\n            _send(marketing, part2);\r\n        }\r\n    }\r\n\r\n    function setApproved(address caller, bool isApproved) external onlyOwner {\r\n        approved[caller] = isApproved;\r\n        emit Approved(caller, isApproved);\r\n    }\r\n    function setMinTriggerAmount(uint256 minTriggerAmount) external onlyOwner {\r\n        minimumTokensRequiredToTrigger = minTriggerAmount;\r\n        emit MinTriggerAmountUpdated(minTriggerAmount);\r\n    }\r\n    function setTrustFundPercentage(uint256 newAllocatiton) external onlyOwner {\r\n        require(newAllocatiton <= 1000, \"Invalid allocation\");\r\n        trustFundPercentage = newAllocatiton;\r\n        emit TrustFundPercentageUpdated(newAllocatiton);\r\n    }\r\n    function setMarketingPercentage(uint256 newAllocatiton) external onlyOwner {\r\n        require(newAllocatiton <= 1000, \"Invalid allocation\");\r\n        marketingPercentage = newAllocatiton;\r\n        emit MarketingPercentageUpdated(newAllocatiton);\r\n    }\r\n\r\n    function setToken(address newToken) external onlyOwner {\r\n        require(newToken != address(0), \"Invalid token address\");\r\n        require(IERC20(newToken).totalSupply() > 0, \"Invalid ERC20 token\");\r\n        token = newToken;\r\n        emit TokenUpdated(newToken);\r\n    }\r\n\r\n    function setTrustFund(address newTrustFund) external onlyOwner {\r\n        trustFund = newTrustFund;\r\n        emit TrustFundUpdated(newTrustFund);\r\n    }\r\n\r\n    function setMarketing(address newMarketing) external onlyOwner {\r\n        marketing = newMarketing;\r\n        emit MarketingUpdated(newMarketing);\r\n    }\r\n\r\n    function setYieldFarm(address newYieldFarm) external onlyOwner {\r\n        yieldFarm = newYieldFarm;\r\n        emit YieldFarmUpdated(newYieldFarm);\r\n    }\r\n\r\n    function setStaking(address newStaking) external onlyOwner {\r\n        staking = newStaking;\r\n        emit StakingUpdated(newStaking);\r\n    }\r\n\r\n    function setMDBPFarm(address newMDBPFarm) external onlyOwner {\r\n        MDBPFarm = newMDBPFarm;\r\n        emit MDBPFarmUpdated(newMDBPFarm);\r\n    }\r\n\r\n    function setBNBAutoFarm(address newBNBAutoFarm) external onlyOwner {\r\n        BNBAutoFarm = newBNBAutoFarm;\r\n        emit BNBAutoFarmUpdated(newBNBAutoFarm);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(s);\r\n    }\r\n    \r\n    function withdraw(address _token) external onlyOwner {\r\n        IERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n    receive() external payable {}\r\n\r\n    function _send(address recipient, uint amount) internal {\r\n        (bool s,) = payable(recipient).call{value: amount}(\"\");\r\n        require(s, 'Failure On Token Transfer');\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBNBAutoFarm\",\"type\":\"address\"}],\"name\":\"BNBAutoFarmUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMDBPFarm\",\"type\":\"address\"}],\"name\":\"MDBPFarmUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingPercentage\",\"type\":\"uint256\"}],\"name\":\"MarketingPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketing\",\"type\":\"address\"}],\"name\":\"MarketingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinTriggerAmount\",\"type\":\"uint256\"}],\"name\":\"MinTriggerAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStaking\",\"type\":\"address\"}],\"name\":\"StakingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTrustFundPercentage\",\"type\":\"uint256\"}],\"name\":\"TrustFundPercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTrustFund\",\"type\":\"address\"}],\"name\":\"TrustFundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newYieldFarm\",\"type\":\"address\"}],\"name\":\"YieldFarmUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNBAutoFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MDBPFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensRequiredToTrigger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBNBAutoFarm\",\"type\":\"address\"}],\"name\":\"setBNBAutoFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMDBPFarm\",\"type\":\"address\"}],\"name\":\"setMDBPFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketing\",\"type\":\"address\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAllocatiton\",\"type\":\"uint256\"}],\"name\":\"setMarketingPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTriggerAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStaking\",\"type\":\"address\"}],\"name\":\"setStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTrustFund\",\"type\":\"address\"}],\"name\":\"setTrustFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAllocatiton\",\"type\":\"uint256\"}],\"name\":\"setTrustFundPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newYieldFarm\",\"type\":\"address\"}],\"name\":\"setYieldFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustFundPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFarm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SellReceiver", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76bebc157a8a2b7b97378893790355423320cc444b4b458e08c34ae71d28b340"}