{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\ncontract BEP20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BEP20 is BEP20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract DetailedBEP20 is BEP20 {\r\n    string public name;\r\n    string public symbol;\r\n    string public note;\r\n    uint8 public decimals;\r\n\r\n    constructor(string _name, string _symbol, string _note, uint8 _decimals) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        note = _note;\r\n        decimals = _decimals;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender != address(0) && (msg.sender == owner || msg.sender == admin));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        require(newOwner != owner);\r\n        require(newOwner != admin);\r\n\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setAdmin(address newAdmin) onlyOwner public {\r\n        require(admin != newAdmin);\r\n        require(owner != newAdmin);\r\n\r\n        admin = newAdmin;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a); // overflow check\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract BasicToken is BEP20Basic {\r\n    using SafeMath for uint256;\r\n\r\n                       mapping(address => uint256) balances;\r\n\r\n    uint256 _totalSupply;\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev transfer token for a specified address\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount to be transferred.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\ncontract BEP20Token is BasicToken, BEP20 {\r\n    using SafeMath for uint256;\r\n                       mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract BurnableToken is BasicToken, Ownable {\r\n    string internal constant INVALID_TOKEN_VALUES = 'Invalid token values';\r\n    string internal constant NOT_ENOUGH_TOKENS = 'Not enough tokens';\r\n\r\n    // events\r\n    event Burn(address indexed burner, uint256 amount);\r\n\r\n\r\n\r\n    // reduce sender balance and Token total supply\r\n    function burn(uint256 _value) onlyOwner public {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n    // reduce address balance and Token total supply\r\n\r\n\r\n\r\n}\r\n\r\ncontract TokenLock is Ownable {\r\n    using SafeMath for uint256;\r\n    struct TokenLockInfo { // token of `amount` cannot be moved before `time`\r\n        uint256 amount; // locked amount\r\n        uint256 time; // unix timestamp\r\n    }\r\n\r\n    struct TokenLockState {\r\n        uint256 latestReleaseTime;\r\n        TokenLockInfo[] tokenLocks; // multiple token locks can exist\r\n    }\r\n\r\n    mapping(address => TokenLockState) lockingStates;\r\n    mapping(address => bool) addresslock;\r\n    mapping(address => uint256) lockbalances;\r\n\r\n    event AddTokenLockDate(address indexed to, uint256 time, uint256 amount);\r\n    event AddTokenLock(address indexed to, uint256 amount);\r\n\r\n    // calculate the amount of tokens an address can use\r\n    function getMinLockedAmount(address _addr) view public returns (uint256 locked) {\r\n        uint256 i;\r\n        uint256 a;\r\n        uint256 t;\r\n        uint256 lockSum = 0;\r\n\r\n        // if the address has no limitations just return 0\r\n        TokenLockState storage lockState = lockingStates[_addr];\r\n        if (lockState.latestReleaseTime < now) {\r\n            return 0;\r\n        }\r\n\r\n        for (i=0; i<lockState.tokenLocks.length; i++) {\r\n            a = lockState.tokenLocks[i].amount;\r\n            t = lockState.tokenLocks[i].time;\r\n\r\n            if (t > now) {\r\n                lockSum = lockSum.add(a);\r\n            }\r\n        }\r\n\r\n        return lockSum;\r\n    }\r\n\r\n    function lockVolumeAddress(address _sender) view public returns (uint256 locked) {\r\n        return lockbalances[_sender];\r\n    }\r\n\r\n    function addTokenLockDate(address _addr, uint256 _value, uint256 _release_time) onlyOwnerOrAdmin public {\r\n        require(_addr != address(0));\r\n        require(_value > 0);\r\n        require(_release_time > now);\r\n\r\n        TokenLockState storage lockState = lockingStates[_addr]; // assigns a pointer. change the member value will update struct itself.\r\n        if (_release_time > lockState.latestReleaseTime) { \r\n            lockState.latestReleaseTime = _release_time; \r\n        }\r\n        lockState.tokenLocks.push(TokenLockInfo(_value, _release_time)); \r\n\r\n        emit AddTokenLockDate(_addr, _release_time, _value);\r\n    }\r\n\r\n    function addTokenLock(address _addr, uint256 _value) onlyOwnerOrAdmin public {\r\n        require(_addr != address(0));\r\n        require(_value >= 0);\r\n\r\n        lockbalances[_addr] = _value;\r\n\r\n        emit AddTokenLock(_addr, _value);\r\n    }\r\n}\r\n\r\ncontract DTR is BurnableToken, DetailedBEP20, BEP20Token, TokenLock {\r\n    using SafeMath for uint256;\r\n\r\n    // events\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    string public constant symbol = \"DTR\";\r\n    string public constant name = \"DOTORI\";\r\n    string public constant note = \"Cyworld\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 constant TOTAL_SUPPLY = 10000000000 *(10**uint256(decimals));\r\n\r\n    constructor() DetailedBEP20(name, symbol, note, decimals) public {\r\n        _totalSupply = TOTAL_SUPPLY;\r\n\r\n        // initial supply belongs to owner\r\n        balances[owner] = _totalSupply;\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    // modifiers\r\n    // checks if the address can transfer tokens\r\n    modifier canTransfer(address _sender, uint256 _value) {\r\n        require(_sender != address(0));\r\n        require((_sender == owner || _sender == admin) || ( (!addresslock[_sender] && canTransferIfLocked(_sender, _value) && canTransferIfLocked(_sender, _value)) )  );\r\n\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address newAdmin) onlyOwner public {\r\n        address oldAdmin = admin;\r\n        super.setAdmin(newAdmin);\r\n        approve(oldAdmin, 0);\r\n        approve(newAdmin, TOTAL_SUPPLY);\r\n    }\r\n\r\n    modifier onlyValidDestination(address to) {\r\n        require(to != address(0x0));\r\n        require(to != address(this));\r\n        //require(to != owner);\r\n        _;\r\n    }\r\n\r\n    function canTransferIfLocked(address _sender, uint256 _value) public view returns(bool) {\r\n        uint256 after_math = balances[_sender].sub(_value);\r\n\r\n        return after_math >= (getMinLockedAmount(_sender) + lockVolumeAddress(_sender));\r\n    }\r\n\r\n    function LockTransferAddress(address _sender) public view returns(bool) {\r\n        return addresslock[_sender];\r\n    }\r\n\r\n    // override function using canTransfer on the sender address\r\n    function transfer(address _to, uint256 _value) onlyValidDestination(_to) canTransfer(msg.sender, _value) public returns (bool success) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    // transfer tokens from one address to another\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyValidDestination(_to) canTransfer(_from, _value) public returns (bool success) {\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); // this will throw if we don't have enough allowance\r\n\r\n        // this event comes from BasicToken.sol\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function() public payable { // don't send eth directly to token contract\r\n        revert();\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_release_time\",\"type\":\"uint256\"}],\"name\":\"addTokenLockDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"lockVolumeAddress\",\"outputs\":[{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"note\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getMinLockedAmount\",\"outputs\":[{\"name\":\"locked\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransferIfLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LockTransferAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addTokenLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddTokenLockDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddTokenLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "DTR", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://56338215263534d99ab83631d31bd4f08b2ec4801a82d826546becc3cdcbdcb4"}