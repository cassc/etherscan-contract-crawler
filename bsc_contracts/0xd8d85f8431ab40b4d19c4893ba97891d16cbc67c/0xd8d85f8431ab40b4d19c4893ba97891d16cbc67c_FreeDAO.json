{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-27\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n// daotool.app\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function getPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n    function claimDividend(address holder) external;\r\n} \r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n\r\n    using SafeMath for uint256;\r\n    address _token;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IDEXRouter router;\r\n\r\n    address routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    IBEP20 RewardToken; \r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n\t\r\n\tuint256 public openDividends;\r\n\t\r\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 60 minutes;\r\n    uint256 public minDistribution;\r\n\r\n    uint256 currentIndex;\r\n\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n    constructor (address _router,address _RewardToken) {\r\n        router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(routerAddress);\r\n        address RewardTokenSet = _RewardToken != address(0) ? address(_RewardToken) : address(0x97e4f3D9c5F3d4a8B5768e3ccC28bdBD26C88f3B);\r\n        router = IDEXRouter(routerAddress);  \r\n\t\tRewardToken = IBEP20(address(RewardTokenSet));\r\n        openDividends=10**RewardToken.decimals();\r\n        minDistribution = 20 * (10 ** RewardToken.decimals());\r\n\t\t\r\n        _token = msg.sender;\r\n    }\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external override onlyOwner {\r\n        minPeriod = newMinPeriod;\r\n        minDistribution = newMinDistribution;\r\n    }\r\n    function setopenDividends(uint256 _openDividends ) external   onlyOwner {\r\n        openDividends = _openDividends*10**RewardToken.decimals();\r\n \r\n    }\r\n    function setRewardDividends(address shareholder,uint256 amount ) external  onlyOwner {\r\n \r\n\t\tRewardToken.transfer(shareholder, amount);\r\n \r\n    }\t\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyOwner {\r\n\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() external payable override onlyOwner {\r\n\r\n        uint256 balanceBefore = RewardToken.balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(RewardToken);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = RewardToken.balanceOf(address(this)).sub(balanceBefore);\r\n        totalDividends = totalDividends.add(amount);\r\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n    }\r\n\r\n    function process(uint256 gas) external override onlyOwner {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 iterations = 0;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n\r\n            if(currentIndex >= shareholderCount){ currentIndex = 0; }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0 && totalDividends  >= openDividends){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            RewardToken.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n        }\r\n\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    \r\n    function claimDividend(address holder) external override {\r\n        distributeDividend(holder);\r\n    }\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner; \r\n\r\n    constructor(address _owner) {\r\n        owner = _owner; \r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract owner\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    } \r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(address(0));\r\n        owner = address(0);\r\n    } \r\n    /**\r\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner onlyOwner\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr; \r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ncontract FreeDAO is IBEP20 , Auth { \r\n    using SafeMath for uint256;\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8   internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    string public tokenType=\"FreeDAO\";\r\n    string public version=\"2\";\r\n    function name() external view override returns (string memory) { return _name; }\r\n    function symbol() external view override returns (string memory) { return _symbol; }\r\n    function decimals() external view override returns (uint8) { return _decimals; }\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {_allowances[msg.sender][spender] = amount;emit Approval(msg.sender, spender, amount);return true;}\r\n    function approveMax(address spender) external returns (bool) {return approve(spender, uint256(2**256-1));}\r\n    event TokenCreated(address indexed owner,address indexed token,string tokenType,string version);\r\n\r\n    address DEAD = address(0xdEaD);\r\n    address ZERO = address(0);\r\n    address routerAddress;\r\n    address public RewardToken;\r\n    address[] public marketingAddress;\r\n    uint256[] public marketingShare;\r\n    uint256 internal sharetotal;\r\n    address public ceo;\r\n    function setCeo(address ceo_)public {\r\n        if(msg.sender==ceo) ceo=ceo_;\r\n    }\r\n \r\n    function setMarketing(address[] calldata list ,uint256[] memory share) external  {\r\n        require(msg.sender==ceo,\"Just CEO\");\r\n        require(list.length>0,\"DAO:Can't be Empty\");\r\n        require(list.length==share.length,\"DAO:number must be the same\");\r\n        uint256 total=0;\r\n        for (uint256 i = 0; i < share.length; i++) {\r\n            total=total.add(share[i]);\r\n        }\r\n        require(total>0,\"DAO:share must greater than zero\");\r\n        marketingAddress=list;\r\n        marketingShare=share;\r\n        sharetotal=total;\r\n    }\r\n    function getMarketingCount() public view returns(uint256){\r\n        return marketingAddress.length;\r\n    } \r\n\r\n    struct Limit{\r\n        uint256 txMax;\r\n        uint256 positionMax;\r\n        bool whale;\r\n        uint256 part;\r\n    }\r\n    Limit public limit;\r\n    function setLimit(uint256  txMax,uint256 positionMax,bool whale,uint256 part) external onlyOwner {\r\n        require(part>=txMax && part>=positionMax,\"DAO:part must greater than positionMax&txMax\"); \r\n        if(!whale){\r\n            limit=Limit(1000,1000,false,part);\r\n        }\r\n        else{\r\n            require(txMax>=1 && txMax*1000/part<=1000,\"DAO:positionMax must greater than zero\"); \r\n            require(positionMax>=1 && positionMax*1000/part<=1000,\"DAO:positionMax must greater than zero\"); \r\n             limit=Limit(txMax,positionMax,true,part);\r\n        } \r\n    }\r\n\r\n    struct Exempt{\r\n        uint8 fee;\r\n        bool txLimit;\r\n        bool positionLimit;\r\n        bool dividend;\r\n    }\r\n    IDEXRouter public router;\r\n    mapping(address=>bool) public pairs;\r\n    function setPair(address _token) public{\r\n        address pair=IDEXFactory(router.factory()).getPair(address(_token), address(this));\r\n        if(pair==address(0))pair = IDEXFactory(router.factory()).createPair(address(_token), address(this));\r\n        require(pair!=address(0), \"pair is not found\");\r\n        pairs[pair]=true;\r\n    }\r\n\r\n    mapping(address=>Exempt) public ex; \r\n    function setEx(address[] calldata  users,uint8 fee,bool txLimit,bool positionLimit,bool dividend) external onlyOwner {\r\n        uint256 count = users.length; \r\n        bool oldDividend;\r\n        for (uint256 i = 0; i < count; i++) {\r\n            require( users[i] != address(this)  && !pairs[users[i]], \"This account  can't be set\");\r\n            oldDividend=ex[users[i]].dividend;\r\n            ex[users[i]]=Exempt(fee,txLimit,positionLimit,dividend);\r\n            if(oldDividend != dividend && allot.rewards>0) {\r\n                dividendDistributor.setShare(users[i],dividend?0:_balances[users[i]]);\r\n            }\r\n        }\r\n    }\r\n    struct Fee{\r\n        uint256 buy; \r\n        uint256 sell;\r\n        uint256 transfer;\r\n        uint256 part;\r\n    }    \r\n    Fee public fees;\r\n    Fee public newf; \r\n\r\n    struct Allot{\r\n        uint256 marketing;\r\n        uint256 liquidity;\r\n        uint256 rewards;\r\n        uint256 burn;\r\n        uint256 total;\r\n    }\r\n    Allot public allot;\r\n  \r\n\r\n    function init(uint256[4] memory f_,uint256[4] memory a_,address routerAddress_,address token_) external onlyOwner{\r\n        require(f_[0]*100/f_[3]<25 && f_[1]*100/f_[3]<25 && f_[2]*100/f_[3]<25, \"This account can't be set\");\r\n        newf=Fee(f_[0],f_[1],f_[2],f_[3]);\r\n        if(a_[2]>0){\r\n            require(token_!=address(0),\"DAO:\");\r\n            dividendDistributor=new DividendDistributor(routerAddress,token_);\r\n         } \r\n        uint256 total =a_[0].add(a_[1]).add(a_[2]).add(a_[3]);\r\n        allot=Allot(a_[0],a_[1],a_[2],a_[3],total); \r\n\r\n        router = IDEXRouter(routerAddress_);\r\n        address pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        pairs[pair]=true;\r\n        _allowances[address(this)][address(router)] = uint256(2**256-1);\r\n         ex[pair]=Exempt(0,true,true,true);\r\n\r\n\r\n\r\n        step=1;\r\n    }\r\n \r\n    uint8 public step; \r\n\r\n    function launch() internal { \r\n        step=2; //\u7a0e\u6740\u6a21\u5f0f\r\n        fees=Fee(99,99,99,100); \r\n    } \r\n\r\n    DividendDistributor public dividendDistributor;\r\n    uint256 distributorGas = 150000;\r\n\r\n    bool internal isAutoSwaping;\r\n    struct AutoSwap{\r\n        bool enabled;\r\n        bool limit;\r\n        uint256 min;\r\n        uint256 max;\r\n        uint256 part;\r\n    }\r\n    AutoSwap public autoSwap;\r\n    function setAutoSwap(bool enabled, uint256 newSwapMin, uint256 newSwapMax, bool swapByLimitOnly,uint256 part) external onlyOwner {\r\n        autoSwap=AutoSwap(enabled,swapByLimitOnly,newSwapMin,newSwapMax,part);\r\n    }    \r\n    modifier justTransfer {\r\n        isAutoSwaping = true;\r\n        _;\r\n        isAutoSwaping = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_,\r\n        uint256 totalSupply_,\r\n        address[] memory marketingAddress_,\r\n        uint256[] memory marketingShare_,\r\n        address serviceAddress\r\n    ) payable  Auth(msg.sender) {\r\n        _name =name_;\r\n        _symbol = symbol_; \r\n        _decimals=decimals_;\r\n        require(decimals_<=36, \"decimals max is 36\");\r\n\r\n        _totalSupply = totalSupply_ *10**_decimals;\r\n        ceo=msg.sender; \r\n        limit=Limit(1000,1000,false,1000);\r\n\t\tautoSwap=AutoSwap(true,true,5,10,1000); \r\n\r\n\r\n \r\n        marketingAddress = marketingAddress_;\r\n        marketingShare=marketingShare_; \r\n\r\n        ex[msg.sender]=Exempt(4,true,true,true);\r\n        ex[address(this)]=Exempt(4,true,true,true);\r\n        ex[DEAD]=Exempt(4,true,true,true);\r\n        ex[ZERO]=Exempt(4,true,true,true);\r\n        uint256 sharetotal_;\r\n        for (uint256 i = 0; i < marketingAddress.length; i++) {\r\n            ex[marketingAddress[i]]=Exempt(4,true,true,false);\r\n            sharetotal_ +=marketingShare[i];\r\n        }\r\n        sharetotal=sharetotal_;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0),msg.sender, _totalSupply);\r\n        emit TokenCreated(msg.sender, address(this), tokenType, version);\r\n        payable(serviceAddress).transfer(msg.value);\r\n    }\r\n    \r\n    receive() external payable { } \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function _initOk() public  onlyOwner{\r\n        require(step==2,\"DAO:must step 1\");\r\n        step=3;\r\n        fees=newf;\r\n    }\r\n\r\n    function claim() public {\r\n        dividendDistributor.claimDividend(msg.sender);\r\n    }\r\n\r\n    function changeDistributionCriteria(uint256 newinPeriod, uint256 newMinDistribution) external onlyOwner {\r\n        dividendDistributor.setDistributionCriteria(newinPeriod, newMinDistribution);\r\n    }\r\n\t\r\n    function changeopenDividends(uint256 openDividends) external onlyOwner {\r\n        dividendDistributor.setopenDividends(openDividends);\r\n    }\r\n\t\r\n    function changeDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 450000 && gas >= 100000);\r\n        distributorGas = gas;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != uint256(2**256-1)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n    function Airdrop(address[] calldata list, uint256 amount)\r\n        public\r\n        justTransfer\r\n    {\r\n        require(step>0,\"DAO:Transfer mast after init\");\r\n        address _sender = msg.sender;\r\n        require(_sender==ceo,\"DAO:Transfer mast CEO\");  \r\n        uint256 count = list.length;\r\n        uint256 senderBalance = amount.mul(count);\r\n        require(\r\n            balanceOf(_sender) >= senderBalance,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        for (uint256 i = 0; i < count; i++) {\r\n            _basicTransfer(_sender, list[i], amount); \r\n            if( allot.rewards>0) {\r\n                _setShare(list[i]); \r\n            }\r\n        }\r\n    }\r\n    function getPart(uint256 point,uint256 part)internal view returns(uint256){\r\n        return _totalSupply.mul(point).div(part);\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        \r\n        if(step==1 && pairs[recipient]) {\r\n            require(_balances[sender] > 0);\r\n            launch();\r\n        }\r\n        if(isAutoSwaping){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(_balances[sender].sub(amount)==0) amount=amount.sub(1); \r\n\t\trequire(amount>0,\"Insufficient Balance\");\r\n        if(!pairs[sender]  && autoSwap.enabled && _balances[address(this)] >=getPart(autoSwap.min,autoSwap.part)){ swapBack(); }\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        \r\n        if(!ex[recipient].txLimit && limit.whale)\r\n        {\r\n            require(amount <= getPart(limit.txMax,limit.part));\r\n            require(_balances[recipient].add(amount) <= getPart(limit.positionMax,limit.part));\r\n        } \r\n\r\n        uint256 finalAmount = takeFee(sender, recipient, amount);\r\n        _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n        if( allot.rewards>0) {\r\n            _setShare(sender);\r\n            _setShare(recipient); \r\n            try dividendDistributor.process(distributorGas) {} catch {}\r\n        }\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        require(step>1,\"ERC20: Transaction failed\");\r\n        if(ex[sender].fee==4 || ex[recipient].fee==4 ) return amount;\r\n        require(ex[sender].fee!=1&&ex[sender].fee!=3&&ex[recipient].fee!=2&&ex[recipient].fee!=3, \"ERC20: Transaction failed\");\r\n        uint256 feeApplicable;\r\n        if(pairs[recipient])feeApplicable=fees.sell;\r\n        else if(pairs[sender])feeApplicable=fees.buy;\r\n        else feeApplicable=fees.transfer;\r\n        uint256 feeAmount = amount.mul(feeApplicable).div(fees.part);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        return amount.sub(feeAmount);\r\n    }\r\n    function _setShare(address account) internal {\r\n        if(!ex[account].dividend) {\r\n            try dividendDistributor.setShare(account, _balances[account]) {} catch {}\r\n        }\r\n    }\r\n\r\n    function recoverBEP20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        require(msg.sender==ceo); \r\n        IBEP20(tokenAddress).transfer(msg.sender, tokenAmount);\r\n    }\r\n    function recoverBNB(uint256 tokenAmount) public onlyOwner {\r\n        require(msg.sender==ceo); \r\n        payable(address(msg.sender)).transfer(tokenAmount);\r\n    }\r\n\t\r\n    function swapBack() internal justTransfer {\r\n        \r\n        uint256 tokensToLiquify = _balances[address(this)];\r\n        uint256 max=getPart(autoSwap.max,autoSwap.part);\r\n        if(autoSwap.limit)tokensToLiquify = tokensToLiquify>max?max:tokensToLiquify;\r\n        \r\n        uint256 amountToBurn = tokensToLiquify.mul(allot.burn).div(allot.total);\r\n        uint256 amountToLiquify = tokensToLiquify.mul(allot.liquidity).div(allot.total).div(2);\r\n        uint256 amountToSwap = tokensToLiquify.sub(amountToLiquify).sub(amountToBurn);\r\n\r\n        if(amountToBurn>0)_basicTransfer(address(this),address(DEAD),amountToBurn);\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ); \r\n\r\n        uint256 amountBNB = address(this).balance;\r\n        uint256 totalBNBFee = allot.total.sub(allot.liquidity.div(2)).sub(allot.burn);\r\n        uint256 amountBNBLiquidity = amountBNB.mul(allot.liquidity).div(totalBNBFee).div(2);\r\n        uint256 amountBNBReflection = amountBNB.mul(allot.rewards).div(totalBNBFee);\r\n        uint256 amountBNBMarketing = amountBNB.sub(amountBNBLiquidity).sub(amountBNBReflection);\r\n\r\n        if(amountBNBReflection>0){\r\n            try dividendDistributor.deposit{value: amountBNBReflection}() {} catch {}\r\n        }\r\n\r\n        if(amountBNBMarketing>0){\r\n            uint256 cakeBNB;\r\n            bool tmpSuccess;\r\n            for (uint256 i = 0; i < marketingAddress.length; i++) {\r\n                cakeBNB=amountBNBMarketing.mul(marketingShare[i]).div(sharetotal);\r\n                (tmpSuccess,) = payable(marketingAddress[i]).call{value: cakeBNB, gas: 30000}(\"\");\r\n                \r\n            }\r\n            tmpSuccess = false; \r\n        }\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            emit AddLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n    event AddLiquify(uint256 amountBNB, uint256 amount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"marketingAddress_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"marketingShare_\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"serviceAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initOk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newinPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDistribution\",\"type\":\"uint256\"}],\"name\":\"changeDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"changeDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openDividends\",\"type\":\"uint256\"}],\"name\":\"changeopenDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendDistributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"txLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dividend\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"f_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"a_\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"routerAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSwapMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swapByLimitOnly\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setAutoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ceo_\",\"type\":\"address\"}],\"name\":\"setCeo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"txLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"positionLimit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dividend\",\"type\":\"bool\"}],\"name\":\"setEx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionMax\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whale\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"share\",\"type\":\"uint256[]\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FreeDAO", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000fdb05cb0f552325f4c2b911618e71c8b7b88888800000000000000000000000000000000000000000000000000000000000000076672656564616f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076672656564616f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000fdb05cb0f552325f4c2b911618e71c8b7b88888800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a78759a4a1849f9e7a6bdda1a95364be89679c5373af24a519744183a90fadb0"}