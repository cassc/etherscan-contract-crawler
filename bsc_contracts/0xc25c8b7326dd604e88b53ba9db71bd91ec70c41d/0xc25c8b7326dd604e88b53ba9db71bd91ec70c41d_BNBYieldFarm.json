{"SourceCode": "// SPDX-License-Identifier: GNU General Public License v3.0 (GNU GPLv3)\r\n\r\npragma solidity >=0.8.0;\r\n\r\nstruct Tariff {\r\n    uint8 life_days;\r\n    uint8 percent;\r\n}\r\n\r\nstruct Deposit {\r\n    uint8 tariff;\r\n    uint256 amount;\r\n    uint256 time;\r\n}\r\n\r\nstruct Player {\r\n    address up_line;\r\n    uint256 referrals;\r\n    uint256 referral_bonus;\r\n    uint256 last_payout;\r\n    uint256 total_invested;\r\n    uint256 total_withdrawn;\r\n    uint256 total_referral_bonus;\r\n    Deposit[] deposits;\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract BNBYieldFarm is Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    uint256 public invested;\r\n    uint256 public withdrawn;\r\n    uint256 public referral_bonus;\r\n\r\n    uint16 constant PERCENT_DIVIDER = 1000;\r\n    uint8 constant FEE = 100;\r\n    uint8 constant FEE_BONUS = 20;\r\n\r\n    mapping(uint8 => Tariff) public tariffs;\r\n    mapping(address => Player) public players;\r\n\r\n    //-------------------------------------------------------------------------\r\n    // EVENTS\r\n    //-------------------------------------------------------------------------\r\n\r\n    event UpLine(\r\n        address indexed addr,\r\n        address indexed upline\r\n    );\r\n\r\n    event NewDeposit(\r\n        address indexed addr,\r\n        uint256 amount,\r\n        uint8 tariff\r\n    );\r\n\r\n    event BonusPayout(\r\n        address indexed addr,\r\n        address indexed from,\r\n        uint256 amount\r\n    );\r\n\r\n    event Withdraw(\r\n        address indexed addr,\r\n        uint256 amount\r\n    );\r\n\r\n    //-------------------------------------------------------------------------\r\n    // MODIFIERS\r\n    //-------------------------------------------------------------------------\r\n\r\n    modifier notContract() {\r\n        require(!address(msg.sender).isContract(), \"contract not allowed\");\r\n        require(msg.sender == tx.origin, \"proxy contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // CONSTRUCTOR\r\n    //-------------------------------------------------------------------------\r\n\r\n    constructor() {\r\n        uint8 tariffPercent = 102;\r\n        for (uint8 tariffDuration = 20; tariffDuration <= 100; tariffDuration += 5) {\r\n            tariffs[tariffDuration] = Tariff(tariffDuration, tariffPercent);\r\n            tariffPercent += 3;\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // STATE MODIFYING FUNCTIONS \r\n    //-------------------------------------------------------------------------\r\n\r\n    function deposit(uint8 _tariff, address _up_line) external payable notContract() {\r\n        require(tariffs[_tariff].life_days > 0, \"Tariff not found\");\r\n        require(msg.value >= 0.01 ether, \"Minimum deposit amount is 0.01 BNB\");\r\n\r\n        Player storage player = players[msg.sender];\r\n\r\n        _setUpLine(msg.sender, _up_line);\r\n\r\n        player.deposits.push(Deposit({\r\n            tariff : _tariff,\r\n            amount : msg.value,\r\n            time : block.timestamp\r\n        }));\r\n\r\n        player.total_invested += msg.value;\r\n        invested += msg.value;\r\n\r\n        _refPayout(msg.sender, msg.value);\r\n\r\n        uint256 fee = msg.value.mul(FEE).div(PERCENT_DIVIDER);\r\n        payable(owner()).transfer(fee);\r\n\r\n        emit NewDeposit(msg.sender, msg.value, _tariff);\r\n    }\r\n\r\n    function withdraw() external notContract() {\r\n        Player storage player = players[msg.sender];\r\n\r\n        uint256 amount = this.payoutOf(msg.sender);\r\n        uint256 bonus = player.referral_bonus;\r\n\r\n        if (bonus > 0) {\r\n            player.referral_bonus = 0;\r\n            amount += bonus;\r\n        }\r\n\r\n        require(amount > 0, \"User has no dividends\");\r\n\r\n        uint256 contractBalance = address(this).balance;\r\n        if (contractBalance < amount) {\r\n            player.referral_bonus = amount - contractBalance;\r\n            player.total_referral_bonus += player.referral_bonus;\r\n            amount = contractBalance;\r\n        }\r\n\r\n        player.total_withdrawn += amount;\r\n        player.last_payout = block.timestamp;\r\n        withdrawn += amount;\r\n\r\n        payable(msg.sender).transfer(amount);\r\n\r\n        emit Withdraw(msg.sender, amount);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // HELPER FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function _refPayout(address _address, uint256 _amount) private {\r\n        address up_line = players[_address].up_line;\r\n\r\n        if (up_line != address(0)) {\r\n            uint256 bonus = _amount.mul(FEE_BONUS).div(PERCENT_DIVIDER);\r\n\r\n            players[up_line].referral_bonus += bonus;\r\n            players[up_line].total_referral_bonus += bonus;\r\n\r\n            referral_bonus += bonus;\r\n\r\n            emit BonusPayout(up_line, _address, bonus);\r\n        }\r\n    }\r\n\r\n    function _setUpLine(address _address, address _up_line) private {\r\n        if (players[_address].up_line == address(0) && _address != owner()) {\r\n            if (players[_up_line].deposits.length == 0) {\r\n                _up_line = owner();\r\n            }\r\n\r\n            players[_address].up_line = _up_line;\r\n            players[_up_line].referrals += 1;\r\n\r\n            emit UpLine(_address, _up_line);\r\n        }\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // VIEW FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function payoutOf(address _address) view external returns (uint256 totalPayout) {\r\n        Player storage player = players[_address];\r\n\r\n        for (uint256 i = 0; i < player.deposits.length; i++) {\r\n            Deposit storage playerDeposit = player.deposits[i];\r\n            Tariff storage tariff = tariffs[playerDeposit.tariff];\r\n\r\n            uint256 share = playerDeposit.amount.mul(tariff.percent).div(100);\r\n            uint256 time_end = playerDeposit.time + (tariff.life_days * 1 days);\r\n            uint256 from = player.last_payout > playerDeposit.time ? player.last_payout : playerDeposit.time;\r\n            uint256 to = time_end < block.timestamp ? time_end : block.timestamp;\r\n\r\n            if (from < to) {\r\n                share = share\r\n                    .mul(to.sub(from))\r\n                    .div(tariff.life_days)\r\n                    .div(1 days);\r\n\r\n                totalPayout += share;\r\n            }\r\n        }\r\n\r\n        return totalPayout;\r\n    }\r\n\r\n    function userInfo(address _address) view external returns (\r\n        uint256 withdrawable,\r\n        uint256 total_invested,\r\n        uint256 total_withdrawn,\r\n        uint256 total_referral_bonus,\r\n        uint256 referrals,\r\n        uint256 deposits\r\n    ) {\r\n        Player storage player = players[_address];\r\n\r\n        uint256 payout = this.payoutOf(_address) + player.referral_bonus;\r\n\r\n        return (\r\n            payout,\r\n            player.total_invested,\r\n            player.total_withdrawn,\r\n            player.total_referral_bonus,\r\n            player.referrals,\r\n            player.deposits.length\r\n        );\r\n    }\r\n\r\n    function userDepositInfo(address _address, uint256 index) view external returns (\r\n        uint8 life_days,\r\n        uint256 percent,\r\n        uint256 amount,\r\n        uint256 start,\r\n        uint256 finish\r\n    ) {\r\n        Player storage player = players[_address];\r\n        Deposit storage playerDeposit = player.deposits[index];\r\n        Tariff storage depositTariff = tariffs[playerDeposit.tariff];\r\n\r\n        life_days = depositTariff.life_days;\r\n        percent = depositTariff.percent;\r\n        amount = playerDeposit.amount;\r\n        start = playerDeposit.time;\r\n        finish = playerDeposit.time + (depositTariff.life_days * 1 days);\r\n    }\r\n\r\n    function contractInfo() view external returns (\r\n        uint256 _balance,\r\n        uint256 _invested,\r\n        uint256 _withdrawn,\r\n        uint256 _referral_bonus\r\n    ) {\r\n        return (\r\n            address(this).balance,\r\n            invested,\r\n            withdrawn,\r\n            referral_bonus\r\n        );\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BonusPayout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tariff\",\"type\":\"uint8\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"UpLine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referral_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_tariff\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_up_line\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"payoutOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"up_line\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_referral_bonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral_bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tariffs\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"life_days\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"life_days\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_referral_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BNBYieldFarm", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4179e44d9a6a35b2a3661ffe3578e72b56807e4dc6e254794485ab05fe4fee33"}