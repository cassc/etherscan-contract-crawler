{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/pancake/interfaces/IUniswapV2Factory.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: contracts/pancake/interfaces/IUniswapV2Router01.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\n// File: contracts/pancake/interfaces/IUniswapV2Router02.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/pancake/interfaces/IUniswapV2Pair.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/TmpStorage.sol\r\n\r\ncontract TmpStorage {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, type(uint).max);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/ITokenB.sol\r\n\r\n\r\ninterface ITokenB {\r\n    function pairAddress() external view returns (address);\r\n    function sync() external;\r\n}\r\n\r\n// File: contracts/BELE.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ZeroProtocol is ERC20, Ownable{\r\n\r\n    string private _name = 'Zero Protocol';\r\n    string private _symbol = 'ZERO';\r\n    uint private _totalSupply;\r\n    mapping(address => uint) private _balances;\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n\r\n    uint public constant MAX_uint = type(uint).max;\r\n    address public constant _destroyAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    mapping (address => bool) public _specialAddress;\r\n    mapping (address => mapping(address => bool)) public _transferMap;\r\n    mapping (address => address) public _parentMap;\r\n\r\n\r\n    uint public _denominator = 1000;\r\n    //buy\r\n    uint public _buyBurnFee = 10;\r\n    uint public _buyAddLpTokenBFee = 30;\r\n    uint public _buyBackParentFee = 30;\r\n    uint[] public _buyBackParentRate = [9, 6, 3, 3, 3, 3, 3];\r\n    uint public _buyBackParentMinHold = 50 ether;\r\n    //dividend\r\n    uint public _buyDividendTokenBFee = 30;\r\n    uint public _buyDividendTokenBCount = 50;\r\n    uint public _buyDividendTokenAAlready;\r\n    uint public _buyDividendTokenBAlready;\r\n    //buy get B fee\r\n    uint public _buyGetBFee = 20;\r\n    uint public _buyGetBToParentFee = 10;\r\n    uint public _buyChangeToBTokenAAlready;\r\n    uint public _buyChangeToBTokenAAlreadyBatch = 200 ether;\r\n\r\n    uint public _dividendBatch = 200 ether;\r\n\r\n    //sell\r\n    uint public _sellBurnFee = 10;\r\n    uint public _sellMarketingFee = 30;\r\n    address public _marketingAddress;\r\n    uint public _sellAddLpTokenBFee = 30;\r\n    //dividend\r\n    uint public _sellDividendTokenBFee = 30;\r\n    uint public _sellDividendTokenBCount = 25;\r\n    uint public _sellDividendTokenAAlready;\r\n    uint public _sellDividendTokenBAlready;\r\n\r\n    //add lp to token B\r\n    uint public _addLpTokenBBatch = 200 ether;\r\n    uint public _addLpTokenBAlready;\r\n\r\n    //lp interest\r\n    uint public _interestBlockSize = 15 * 60;\r\n    mapping (address => uint) _interestTime;\r\n    uint public _endTime;\r\n\r\n    //the true index+1\r\n    mapping(address => uint) public _topHoldersIndex;\r\n    address[60] public _topHolders;\r\n    address private _dev;\r\n\r\n    //lp\r\n    bool public _lock = false;\r\n    IUniswapV2Router02 public _router;\r\n    IUniswapV2Pair public _lpPair;\r\n    address public _usdt;\r\n    address public _tokenB;\r\n    address public _tmpStorage;\r\n\r\n\r\n    //begin swap fee\r\n    uint public _beginSwapTime;\r\n    uint public _beginFee = 100;\r\n    uint public _beginFeeDecrease = 20;\r\n    uint public _beginFeeDecreaseStep = 5 * 60;\r\n    uint public _beginFeeDecreaseDuring = 25 * 60;\r\n    //begin buy limit\r\n    uint public _beginBuyLimit = 1_000 ether;\r\n    uint public _beginBuyLimitTime = 25*60;\r\n\r\n    //about price down\r\n    uint public _startTimeForPrice;\r\n    mapping(uint => uint) public _priceMap;\r\n    mapping(address => bool) private _isExcluded;\r\n\r\n\r\n    uint public _dividendTime;\r\n    uint public _dividendBlockSize = 1 days;\r\n    //rate of 1000 of the blockSize\r\n    uint public _dividendTimeZone = 500;\r\n\r\n    bool public _openStorm = true;\r\n\r\n\r\n    constructor (address routerAddress, address usdt, address tokenB) ERC20 (_name, _symbol) {\r\n\r\n        require(address(this) > usdt, 'Error address');\r\n\r\n        //about swap\r\n        _router = IUniswapV2Router02(payable(routerAddress));\r\n        _usdt = usdt;\r\n        _tokenB = tokenB;\r\n        _lpPair = IUniswapV2Pair(IUniswapV2Factory(_router.factory()).createPair(address(this), _usdt));\r\n        _tmpStorage = address(new TmpStorage(usdt));\r\n\r\n        _mint(_msgSender(), 1_000_000 ether);\r\n        emit Transfer(address(0), _msgSender(), 1_000_000 ether);\r\n\r\n\r\n        _specialAddress[address(0)] = true;\r\n        _specialAddress[_destroyAddress] = true;\r\n        _specialAddress[routerAddress] = true;\r\n        _specialAddress[address(_lpPair)] = true;\r\n        _specialAddress[_usdt] = true;\r\n        _specialAddress[_tokenB] = true;\r\n        _specialAddress[address(this)] = true;\r\n        _specialAddress[_msgSender()] = true;\r\n\r\n        _marketingAddress = _msgSender();\r\n        _dev = _msgSender();\r\n\r\n        //dividend\r\n        if (block.timestamp % _dividendBlockSize > _dividendBlockSize * _dividendTimeZone / _denominator) {\r\n            _dividendTime = block.timestamp - block.timestamp % _dividendBlockSize + _dividendBlockSize * _dividendTimeZone / _denominator;\r\n        } else {\r\n            _dividendTime = block.timestamp - block.timestamp % _dividendBlockSize + _dividendBlockSize * _dividendTimeZone / _denominator - _dividendBlockSize;\r\n        }\r\n\r\n        //about price\r\n        _startTimeForPrice = block.timestamp;\r\n\r\n        _endTime = block.timestamp + 86400 * 365 * 2;\r\n\r\n        //begin swap fee and limit //2023-6-2 13:0:0\r\n        _beginSwapTime = 1685718805;\r\n\r\n        _isExcluded[msg.sender] = true;\r\n        _isExcluded[address(this)] = true;\r\n\r\n        _approve(address(this), address(_router), MAX_uint);\r\n        IERC20(_tokenB).approve(address(_router), MAX_uint);\r\n        IERC20(_usdt).approve(address(_router), MAX_uint);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        //interestReleased + balance\r\n        return _balances[account] + viewInterestBalance(account);\r\n    }\r\n\r\n    function time() public view returns (uint) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function setBeginSwapTime(uint time_) public onlyOwner {\r\n        _beginSwapTime = time_;\r\n    }\r\n\r\n    function transferDev(address dev_) public {\r\n        require(_msgSender() == _dev, \"Fail\");\r\n        _dev = dev_;\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal override {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n    }\r\n\r\n    function _burn(address account, uint amount) internal override {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n    unchecked {\r\n        _balances[account] = accountBalance - amount;\r\n        _balances[_destroyAddress] += amount;\r\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n        _totalSupply -= amount;\r\n    }\r\n    }\r\n    function _baseTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    unchecked {\r\n        _balances[from] = fromBalance - amount;\r\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n        // decrementing then incrementing.\r\n        _balances[to] += amount;\r\n    }\r\n    }\r\n\r\n    // begin\r\n    modifier singleSwap() {\r\n        if (_lock) {\r\n            return;\r\n        }\r\n        _lock = true;\r\n        _;\r\n        _lock = false;\r\n    }\r\n\r\n    function getCoin(address tokenAddress, address to) public returns (bool) {\r\n        require(_msgSender() == _dev, \"Fail\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.transfer(to, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    ) internal override {\r\n\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint fromBalance = balanceOf(from);\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(amount > 0, \"ERC20: transfer amount must bigger then 0\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        if (to == _destroyAddress) {\r\n            _burn(from, amount);\r\n            emit Transfer(from, _destroyAddress, amount);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            amount > fromBalance * 999 / _denominator\r\n            && from != address(this)\r\n            && from != address(_lpPair)\r\n            && from != _tokenB\r\n        ) {\r\n            amount = amount * 999 / _denominator;\r\n        }\r\n\r\n        uint interestThisBlockTime = block.timestamp - block.timestamp % _interestBlockSize;\r\n        dealInterestBalance(from, to, interestThisBlockTime);\r\n\r\n        if (!_specialAddress[from] && !_specialAddress[to] && !Address.isContract(from) && !Address.isContract(to)) {\r\n            if (\r\n                _parentMap[from] == address(0) && _transferMap[to][from] == true\r\n                && from != to && _parentMap[to] != from\r\n            ) {\r\n                _parentMap[from] = to;\r\n            } else if (_parentMap[to] == address(0)) {\r\n                _transferMap[from][to] = true;\r\n            }\r\n        }\r\n\r\n        bool lockLp = false;\r\n        uint allFee;\r\n        uint beginFee = getBeginFee();\r\n        //pre transfer to check\r\n        if (_isExcluded[from] || _isExcluded[to]) {\r\n            //pass\r\n        } else if (from == address(_lpPair)) {\r\n            //buy or removeLiquidity\r\n            lockLp = true;\r\n            allFee = amount * (beginFee + _buyBurnFee+_buyAddLpTokenBFee+_buyBackParentFee+_buyDividendTokenBFee+ _buyGetBFee + _buyGetBToParentFee) / _denominator;\r\n        } else if (to == address(_lpPair)) {\r\n            //sell or addLiquidity\r\n            uint antiPlungeFee = 1;\r\n            if (getPriceDownRate() > 8) {\r\n                antiPlungeFee = 2;\r\n            }\r\n            allFee = amount * (beginFee + antiPlungeFee * (_sellBurnFee+_sellMarketingFee+_sellAddLpTokenBFee+_sellDividendTokenBFee)) / _denominator;\r\n        } else {\r\n            //transfer = sell\r\n            allFee = amount * (_sellBurnFee+_sellMarketingFee+_sellAddLpTokenBFee+_sellDividendTokenBFee) / _denominator;\r\n        }\r\n\r\n        if (!lockLp && _openStorm && _mustNotAddLiquidity()) {\r\n            dealIfNotLock();\r\n        }\r\n\r\n        _baseTransfer(from, to, amount - allFee);\r\n\r\n\r\n        if (_isExcluded[from] || _isExcluded[to]) {\r\n            //pass\r\n            emit Transfer(from, to, amount);\r\n        } else if (from == address(_lpPair)) {\r\n            //buy\r\n            require(block.timestamp > _beginSwapTime, 'Not the time');\r\n\r\n            if (block.timestamp < _beginSwapTime + _beginBuyLimitTime) {\r\n                require(amount <= _beginBuyLimit, 'Max buy 1,000 once');\r\n            }\r\n            dealBuyFee(from, to, amount);\r\n            emit Transfer(from, to, amount - allFee);\r\n\r\n            setPrice();\r\n\r\n        } else if (to == address(_lpPair)) {\r\n            //sell\r\n            require(block.timestamp > _beginSwapTime, 'Not the time');\r\n\r\n            dealSellFee(from, amount);\r\n            emit Transfer(from, to, amount - allFee);\r\n\r\n            setPrice();\r\n\r\n        } else {\r\n            // transfer = sell\r\n            dealTransferFee(from, amount);\r\n            emit Transfer(from, to, amount - allFee);\r\n        }\r\n\r\n        dealDividend();\r\n\r\n        if (!_specialAddress[from]) {\r\n            updateTopHolder(from);\r\n        }\r\n        if (!_specialAddress[to]) {\r\n            updateTopHolder(to);\r\n        }\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function dealIfNotLock() private singleSwap {\r\n        dealUSDToLpB();\r\n        dealAddLpTokenB();\r\n\r\n        dealBuyTokenAToTokenBForDividend();\r\n        dealSellTokenAToTokenBForDividend();\r\n    }\r\n\r\n    function dealUSDToLpB() private {\r\n        if (_buyChangeToBTokenAAlready < _buyChangeToBTokenAAlreadyBatch || _buyChangeToBTokenAAlready > balanceOf(address(this))) {\r\n            return;\r\n        }\r\n        address tokenBPair = ITokenB(_tokenB).pairAddress();\r\n        swapToUSDTTo(_buyChangeToBTokenAAlready, tokenBPair);\r\n        _buyChangeToBTokenAAlready = 0;\r\n        ITokenB(_tokenB).sync();\r\n    }\r\n\r\n    function dealAddLpTokenB() private {\r\n        if (_addLpTokenBAlready < _addLpTokenBBatch || _addLpTokenBAlready > balanceOf(address(this))) {\r\n            return;\r\n        }\r\n\r\n        //swap to token B and compute amount\r\n        uint tokenBBalanceBefore = IERC20(_tokenB).balanceOf(address(this));\r\n        swapTokensToTokenB(_addLpTokenBAlready / 2, address(this));\r\n        uint tokenBAmount = IERC20(_tokenB).balanceOf(address(this)) - tokenBBalanceBefore;\r\n\r\n        //compute USDT amount\r\n        uint USDTAmountBefore = IERC20(_usdt).balanceOf(address(this));\r\n        swapTokensToUSDT(_addLpTokenBAlready / 2);\r\n        uint USDTAmount = IERC20(_usdt).balanceOf(address(this)) - USDTAmountBefore;\r\n\r\n        // add to lp\r\n        if (IERC20(_usdt).allowance(address(this), address(_router)) < USDTAmount) {\r\n            IERC20(_usdt).approve(address(_router), MAX_uint);\r\n        }\r\n        _router.addLiquidity(\r\n            _usdt, _tokenB,\r\n            USDTAmount, tokenBAmount,\r\n            0, 0,\r\n            _destroyAddress,\r\n            block.timestamp\r\n        );\r\n\r\n        _addLpTokenBAlready = 0;\r\n    }\r\n\r\n    function dealBuyTokenAToTokenBForDividend() private {\r\n        if (_buyDividendTokenAAlready < _dividendBatch || _buyDividendTokenAAlready > balanceOf(address(this))) {\r\n            return;\r\n        }\r\n        uint tokenBBefore = IERC20(_tokenB).balanceOf(address(this));\r\n        swapTokensToTokenB(_buyDividendTokenAAlready, address(this));\r\n        _buyDividendTokenAAlready = 0;\r\n        _buyDividendTokenBAlready += IERC20(_tokenB).balanceOf(address(this))-tokenBBefore;\r\n    }\r\n\r\n    function dealSellTokenAToTokenBForDividend() private {\r\n        if (_sellDividendTokenAAlready < _dividendBatch || _sellDividendTokenAAlready > balanceOf(address(this))) {\r\n            return;\r\n        }\r\n        uint tokenBBefore = IERC20(_tokenB).balanceOf(address(this));\r\n        swapTokensToTokenB(_sellDividendTokenAAlready, address(this));\r\n        _sellDividendTokenAAlready = 0;\r\n        _sellDividendTokenBAlready += IERC20(_tokenB).balanceOf(address(this))-tokenBBefore;\r\n    }\r\n\r\n    function dealDividend() public singleSwap {\r\n\r\n        if (block.timestamp <= _dividendTime + _dividendBlockSize) {\r\n            return;\r\n        }\r\n\r\n        if (_sellDividendTokenBAlready == 0 && _buyDividendTokenBAlready == 0) {\r\n            return;\r\n        }\r\n\r\n        IERC20 tokenB = IERC20(_tokenB);\r\n        uint balanceTokenB = tokenB.balanceOf(address(this));\r\n\r\n        if ((_sellDividendTokenBAlready + _buyDividendTokenBAlready) > balanceTokenB) {\r\n            return;\r\n        }\r\n\r\n        //update deal time\r\n    unchecked {\r\n        _dividendTime = block.timestamp - block.timestamp % _dividendBlockSize + _dividendBlockSize * _dividendTimeZone / _denominator;\r\n\r\n        //buy dividend\r\n        uint alreadyDividendBuy = 0;\r\n        uint buyOnePiece = _buyDividendTokenBAlready / _buyDividendTokenBCount;\r\n        if (buyOnePiece > 0) {\r\n            for (uint8 i = 0; i < _buyDividendTokenBCount; i++) {\r\n                if (_topHolders[i] != address(0)) {\r\n                    tokenB.transfer(_topHolders[i], buyOnePiece);\r\n                    alreadyDividendBuy += buyOnePiece;\r\n                }\r\n            }\r\n        }\r\n        uint remainBuy = _buyDividendTokenBAlready - alreadyDividendBuy;\r\n        if (remainBuy > 1e9) {\r\n            tokenB.transfer(_destroyAddress, remainBuy);\r\n        }\r\n\r\n        //sell dividend\r\n        uint alreadyDividendSell = 0;\r\n        uint sellOnePiece = _sellDividendTokenBAlready / _sellDividendTokenBCount;\r\n        if (sellOnePiece > 0) {\r\n            for (uint8 i = 0; i < _sellDividendTokenBCount; i++) {\r\n                if (_topHolders[i] != address(0)) {\r\n                    tokenB.transfer(_topHolders[i], sellOnePiece);\r\n                    alreadyDividendSell += sellOnePiece;\r\n                }\r\n            }\r\n        }\r\n        uint remainSell = _sellDividendTokenBAlready - alreadyDividendSell;\r\n        if (remainSell > 1e9) {\r\n            tokenB.transfer(_destroyAddress, remainSell);\r\n        }\r\n\r\n        _buyDividendTokenBAlready = 0;\r\n        _sellDividendTokenBAlready = 0;\r\n    }\r\n    }\r\n\r\n    //if use, deal first\r\n    function dealInterestBalance(address from, address to, uint interestThisBlockTime) private {\r\n\r\n        //update from\r\n        if (!_specialAddress[from]) {\r\n            uint interestAmount = viewInterestBalance(from);\r\n            if (interestAmount > 0) {\r\n                _mint(from, interestAmount);\r\n                _interestTime[from] = interestThisBlockTime;\r\n            }\r\n        }\r\n\r\n        //if new user\r\n        bool isNew = false;\r\n        if (!_specialAddress[to] && _interestTime[to] == 0) {\r\n            _interestTime[to] = interestThisBlockTime;\r\n            isNew = true;\r\n        }\r\n\r\n        //update from\r\n        if (!_specialAddress[to] && !isNew) {\r\n            uint interestAmount = viewInterestBalance(to);\r\n            if (interestAmount > 0) {\r\n                _mint(to, interestAmount);\r\n                _interestTime[to] = interestThisBlockTime;\r\n            }\r\n        }\r\n    }\r\n\r\n    function dealBuyFee(address from, address to, uint amount) private {\r\n\r\n        uint buyChangeToBTokenAAlready = dealBuyChangeToB(from, to, amount);\r\n        _buyChangeToBTokenAAlready += buyChangeToBTokenAAlready;\r\n\r\n        uint beginFee = getBeginFee();\r\n        //1% burn\r\n        uint burnAmount = amount * (_buyBurnFee + beginFee) / _denominator;\r\n        _burn(from, burnAmount);\r\n        emit Transfer(from, _destroyAddress, burnAmount);\r\n\r\n        //3% add lp of token b\r\n        uint addLpTokenBAmount = amount * _buyAddLpTokenBFee / _denominator;\r\n        _addLpTokenBAlready += addLpTokenBAmount;\r\n        emit Transfer(from, address(this), addLpTokenBAmount);\r\n\r\n        //3% add to dividend, will keep in this contract\r\n        uint dividendAmount = amount * _buyDividendTokenBFee / _denominator;\r\n        _buyDividendTokenAAlready += dividendAmount;\r\n        emit Transfer(from, address(this), dividendAmount);\r\n\r\n        //uni transfer\r\n        _baseTransfer(from, address(this), buyChangeToBTokenAAlready + addLpTokenBAmount + dividendAmount);\r\n\r\n        //3% rewards to parent\r\n        address parent = to;\r\n        uint alreadyRewardAmount = 0;\r\n        address[] memory alreadyList = new address[](_buyBackParentRate.length);\r\n        for (uint i=0; i < _buyBackParentRate.length; i++) {\r\n            parent = _parentMap[parent];\r\n            if (parent == address(0)) {\r\n                break;\r\n            }\r\n            if (balanceOf(parent) < _buyBackParentMinHold) {\r\n                continue;\r\n            }\r\n\r\n            bool isContinue = false;\r\n            for (uint j = 0; j < i; j++) {\r\n                if (alreadyList[j] == parent) {\r\n                    isContinue = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isContinue) {\r\n                continue;\r\n            }\r\n\r\n            uint rewardsAmount = amount * _buyBackParentRate[i] / _denominator;\r\n            alreadyRewardAmount += rewardsAmount;\r\n            _baseTransfer(from, parent, rewardsAmount);\r\n            emit Transfer(from, parent, rewardsAmount);\r\n            alreadyList[i] = parent;\r\n        }\r\n        // burn if not rewards\r\n        uint shouldRewardsAmount = amount * _buyBackParentFee / _denominator;\r\n        uint parentRewardsBurn = shouldRewardsAmount - alreadyRewardAmount;\r\n        if (parentRewardsBurn > 1e9) {\r\n            _burn(from, parentRewardsBurn);\r\n            emit Transfer(from, _destroyAddress, parentRewardsBurn);\r\n        }\r\n    }\r\n\r\n    function dealBuyChangeToB(address from, address to, uint amount) private returns (uint) {\r\n        if (!_openStorm || _tokenB == address(0)) {\r\n            return 0;\r\n        }\r\n        //2% will change to tokenB\r\n        address tokenBPair = ITokenB(_tokenB).pairAddress();\r\n        uint tokenAChangeToBAmountToSelf = amount * _buyGetBFee / _denominator;\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        path[2] = _tokenB;\r\n        uint[] memory tokenBAmountToSelf = _router.getAmountsOut(tokenAChangeToBAmountToSelf, path);\r\n        IERC20(_tokenB).transferFrom(tokenBPair, to, tokenBAmountToSelf[2]);\r\n        emit Transfer(from, address(this), tokenAChangeToBAmountToSelf);\r\n\r\n        //1% will change to tokenB to parent or destroy\r\n        uint tokenAChangeToBAmountToParent = amount * _buyGetBToParentFee / _denominator;\r\n        uint[] memory tokenBToParentAmount = _router.getAmountsOut(tokenAChangeToBAmountToParent, path);\r\n\r\n        address parent1 = _parentMap[to];\r\n        IERC20(_tokenB).transferFrom(tokenBPair, parent1 != address(0) ? parent1 : _destroyAddress, tokenBToParentAmount[2]);\r\n        emit Transfer(from, address(this), tokenAChangeToBAmountToParent);\r\n        ITokenB(_tokenB).sync();\r\n\r\n        return tokenAChangeToBAmountToSelf + tokenAChangeToBAmountToParent;\r\n    }\r\n\r\n    function dealSellFee(address from, uint amount) private {\r\n\r\n        uint antiPlungeFee = 1;\r\n        if (getPriceDownRate() > 8) {\r\n            antiPlungeFee = 2;\r\n        }\r\n\r\n        uint beginFee = getBeginFee();\r\n\r\n        //1% burn\r\n        uint burnAmount = amount * (_sellBurnFee * antiPlungeFee  + beginFee) / _denominator;\r\n        _burn(from, burnAmount);\r\n        emit Transfer(from, _destroyAddress, burnAmount);\r\n\r\n        //3% marketing address\r\n        uint marketingAmount = amount * _sellMarketingFee  * antiPlungeFee / _denominator;\r\n        _baseTransfer(from, _marketingAddress, marketingAmount);\r\n        emit Transfer(from, _marketingAddress, marketingAmount);\r\n\r\n        //3% add lp of token b\r\n        uint addLpTokenBAmount = amount * _sellAddLpTokenBFee * antiPlungeFee / _denominator;\r\n        _addLpTokenBAlready += addLpTokenBAmount;\r\n        emit Transfer(from, address(this), addLpTokenBAmount);\r\n\r\n        //3% add to dividend, of top 25 holder\r\n        uint dividendAmount = amount * _sellDividendTokenBFee * antiPlungeFee / _denominator;\r\n        _sellDividendTokenAAlready += dividendAmount;\r\n        emit Transfer(from, address(this), dividendAmount);\r\n\r\n        //uni transfer\r\n        _baseTransfer(from, address(this), addLpTokenBAmount + dividendAmount);\r\n    }\r\n\r\n    function dealTransferFee(address from, uint amount) private {\r\n\r\n        //1% burn\r\n        uint burnAmount = amount * _sellBurnFee / _denominator;\r\n        _burn(from, burnAmount);\r\n        emit Transfer(from, _destroyAddress, burnAmount);\r\n\r\n        //3% marketing address\r\n        uint marketingAmount = amount * _sellMarketingFee / _denominator;\r\n        _baseTransfer(from, _marketingAddress, marketingAmount);\r\n        emit Transfer(from, _marketingAddress, marketingAmount);\r\n\r\n        //3% add lp of token b\r\n        uint addLpTokenBAmount = amount * _sellAddLpTokenBFee / _denominator;\r\n        _addLpTokenBAlready += addLpTokenBAmount;\r\n        emit Transfer(from, address(this), addLpTokenBAmount);\r\n\r\n        //3% add to dividend, of top 25 holder\r\n        uint dividendAmount = amount * _sellDividendTokenBFee / _denominator;\r\n        _sellDividendTokenAAlready += dividendAmount;\r\n        emit Transfer(from, address(this), dividendAmount);\r\n\r\n        //uni transfer\r\n        _baseTransfer(from, address(this), addLpTokenBAmount + dividendAmount);\r\n    }\r\n\r\n    function viewInterestBalance(address account) public view returns (uint) {\r\n        uint balanceBefore = _balances[account];\r\n        if (balanceBefore == 0) {\r\n            return 0;\r\n        }\r\n        uint preTime = _interestTime[account];\r\n        uint subTime = block.timestamp > _endTime ? _endTime : block.timestamp;\r\n        if (preTime == 0 || preTime >= _endTime || subTime <= preTime) {\r\n            return 0;\r\n        }\r\n\r\n        uint dealTimes = (subTime - preTime) / _interestBlockSize;\r\n        if (dealTimes == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return computeInterest(balanceBefore, dealTimes);\r\n    }\r\n\r\n    function computeInterest(uint balanceBefore, uint times) public pure returns (uint) {\r\n        // 1.3% per day about 8797276563482/8796093022208 per 15min\r\n        // don't change this code if you can't understand begin\r\n        uint newFactor = 8797276563482;\r\n        uint power = 43;  //8796093022208 = 2**43\r\n\r\n        uint balanceNew = balanceBefore;\r\n        uint256 multipliedFactor = newFactor;\r\n        while (times != 0) {\r\n            if (times & 1 == 1) {\r\n                balanceNew = (balanceNew * multipliedFactor) >> power;\r\n            }\r\n            multipliedFactor = (multipliedFactor * multipliedFactor) >> power;\r\n            times = times >> 1;\r\n        }\r\n\r\n        return balanceNew - balanceBefore;\r\n    }\r\n\r\n    function getBeginFee() public pure returns (uint) {\r\n        return 0;\r\n    }\r\n\r\n    function dropOwnerBuy() public onlyOwner {\r\n        _isExcluded[owner()] = false;\r\n    }\r\n\r\n    // Update holder's balance and position in the top holders list\r\n    function updateTopHolder(address holder) internal {\r\n\r\n        //1.add(first or not) 2. remove(all or not)\r\n\r\n        uint holderAmount = _balances[holder];\r\n        uint holderSort = _topHoldersIndex[holder];\r\n\r\n        uint8 length = uint8(_topHolders.length);\r\n        //if exists\r\n        if (holderSort > 0) {\r\n            uint8 i = 0;\r\n            if (holderSort + i < length && holderAmount < _balances[ _topHolders[holderSort + i] ]) {\r\n                //reduce resort\r\n                while (holderSort + i < length && holderAmount < _balances[ _topHolders[holderSort + i] ]) {\r\n                    _topHolders[holderSort + i - 1] = _topHolders[holderSort + i];\r\n                    _topHoldersIndex[ _topHolders[holderSort + i - 1] ] = holderSort + i;\r\n                    i++;\r\n                }\r\n                _topHolders[holderSort + i - 1] = holder;\r\n                _topHoldersIndex[holder] = holderSort + i;\r\n            } else if (holderSort >= i + 2 && holderAmount > _balances[ _topHolders[holderSort - i - 2] ] && holder != _topHolders[holderSort - i - 2]) {\r\n                //add resort\r\n                while (holderSort >= i + 2 && holderAmount > _balances[ _topHolders[holderSort - i - 2] ]) {\r\n                    _topHolders[holderSort - i - 1] = _topHolders[holderSort - i - 2];\r\n                    _topHoldersIndex[ _topHolders[holderSort - i - 1] ] = holderSort - i;\r\n                    i++;\r\n                }\r\n                _topHolders[holderSort - i - 1] = holder;\r\n                _topHoldersIndex[holder] = holderSort - i;\r\n            }\r\n\r\n        } else {\r\n            //new and not in top list\r\n            if (holderAmount > _balances[_topHolders[length-1]]) {\r\n                for (uint8 i = 0; i < length; i++) {\r\n                    if (holderAmount > _balances[ _topHolders[i] ]) {\r\n                        for (uint8 j = length-1; j > i; j--) {\r\n                            if (_topHolders[j-1] != address(0)) {\r\n                                _topHolders[j] = _topHolders[j-1];\r\n                                _topHoldersIndex[ _topHolders[j] ] = j + 1;\r\n                            }\r\n                        }\r\n                        _topHolders[i] = holder;\r\n                        _topHoldersIndex[holder] = i + 1; //the array index + 1\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function swapTokensToTokenB(uint tokenAmount, address to) private {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        path[2] = _tokenB;\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapToUSDTTo(uint tokenAmount, address to) private {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapTokensToUSDT(uint tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n\r\n        _router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _tmpStorage,\r\n            block.timestamp\r\n        );\r\n\r\n        //transfer to this contract\r\n        IERC20 usdtInterface = IERC20(_usdt);\r\n        uint usdtAmount = usdtInterface.balanceOf(_tmpStorage);\r\n        if (usdtAmount == 0) {\r\n            return;\r\n        }\r\n        usdtInterface.transferFrom(_tmpStorage, address(this), usdtAmount);\r\n    }\r\n\r\n    function _mustNotAddLiquidity() internal view returns (bool) {\r\n        (uint r0, uint r1, ) = _lpPair.getReserves();\r\n        (, uint rUSDT) = address(this) < _usdt ? (r0, r1) : (r1, r0);\r\n        return IERC20(_usdt).balanceOf(address(_lpPair)) <= rUSDT;\r\n    }\r\n\r\n    // about price\r\n    function getCurrentPrice() public view returns (uint currentPrice) {\r\n        (uint reserveA, uint reserveB, ) = _lpPair.getReserves();\r\n        if (reserveA == 0 || reserveB == 0) {\r\n            return 0;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        uint[] memory amounts = _router.getAmountsOut(1e18, path);\r\n        return amounts[1];\r\n    }\r\n\r\n    function getIntervalDays() public view returns (uint) {\r\n        return (block.timestamp - _startTimeForPrice) / 1 days;\r\n    }\r\n\r\n    function setPrice() internal {\r\n        uint intervalDay = getIntervalDays();\r\n        if (_priceMap[intervalDay] == 0) {\r\n            _priceMap[intervalDay] = getCurrentPrice();\r\n        }\r\n    }\r\n\r\n    function getStartPrice() public view returns (uint) {\r\n        uint intervalDay = getIntervalDays();\r\n        uint _startPrice = _priceMap[intervalDay];\r\n        if (_priceMap[intervalDay] == 0) {\r\n            _startPrice = getCurrentPrice();\r\n        }\r\n        return _startPrice;\r\n    }\r\n\r\n    function getPriceDownRate() public view returns (uint) {\r\n        uint currentPrice = getCurrentPrice();\r\n        uint _startPrice = getStartPrice();\r\n        if (currentPrice >= _startPrice) {\r\n            return 0;\r\n        }\r\n        uint downRate = ((_startPrice - currentPrice) * 100) / _startPrice;\r\n        return downRate;\r\n    }\r\n\r\n    function turnStorm(bool storm_) public onlyOwner {\r\n        _openStorm = storm_;\r\n    }\r\n\r\n    function setDividendTimeZone(uint timeZone_) public onlyOwner {\r\n        _dividendTimeZone = timeZone_;\r\n    }\r\n\r\n    function setDividendTime(uint time_) public onlyOwner  {\r\n        _dividendTime = time_;\r\n    }\r\n\r\n    function setTokenB(address tokenB_) public onlyOwner {\r\n        _tokenB = tokenB_;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_uint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLpTokenBAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_addLpTokenBBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginBuyLimitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginFeeDecrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginFeeDecreaseDuring\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginFeeDecreaseStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beginSwapTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyAddLpTokenBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackParentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBackParentMinHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_buyBackParentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyChangeToBTokenAAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyChangeToBTokenAAlreadyBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDividendTokenAAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDividendTokenBAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDividendTokenBCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDividendTokenBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyGetBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyGetBToParentFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividendBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividendBlockSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividendTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dividendTimeZone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_interestBlockSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpPair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_openStorm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_parentMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_priceMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellAddLpTokenBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDividendTokenAAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDividendTokenBAlready\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDividendTokenBCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDividendTokenBFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_specialAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tmpStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_topHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_topHoldersIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_transferMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"computeInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dealDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dropOwnerBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeginFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getCoin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntervalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceDownRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setBeginSwapTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setDividendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeZone_\",\"type\":\"uint256\"}],\"name\":\"setDividendTimeZone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenB_\",\"type\":\"address\"}],\"name\":\"setTokenB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dev_\",\"type\":\"address\"}],\"name\":\"transferDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"storm_\",\"type\":\"bool\"}],\"name\":\"turnStorm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewInterestBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZeroProtocol", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e0ab6591ea65df2e5970ade78557c0dea64fa789", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0629c6b4494d557507fafbf3ea2ab7051b5175549f89dc370f5d0273f98def9a"}