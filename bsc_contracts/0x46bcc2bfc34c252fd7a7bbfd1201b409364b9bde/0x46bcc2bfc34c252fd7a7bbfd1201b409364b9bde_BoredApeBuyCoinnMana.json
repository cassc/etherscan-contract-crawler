{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\"SafeERC20: approve from non-zero to non-zero allowance\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n\r\ncontract BoredApeBuyCoinnManage is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    address public constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    string private _name = \"BoredApeBuyCoinnManage\";\r\n    string private _symbol = \"BoredApeBuyCoinnManage\";\r\n\r\n    IUniswapV2Router01 public swapRouter;\r\n    IERC20 public UsdtToken;\r\n    IERC20 public coinToken;\r\n    uint256 public slipCoe=950;// slipCoe/1000\r\n\r\n    address public fundAddress;\r\n    uint256 public byPriceUsdt=10*10**18;\r\n    struct sBuyPropertys {\r\n        uint256 id;\r\n        address addr;\r\n        uint256 buyAmount;\r\n        uint256 time;\r\n    }\r\n\r\n    mapping(uint256 => sBuyPropertys) private _buyPropertys;\r\n    mapping(address => uint256[]) private _buyIds;\r\n    uint256 private _sumCount;\r\n    \r\n    mapping (address => uint256) private _balances;\r\n    uint256 private _totalSupply;\r\n\r\n    mapping (address => bool) private _Is_WhiteContractArr;\r\n    address[] private _WhiteContractArr;\r\n    \r\n    event BuyCoins(address indexed user, uint256 amount,uint256 id);\r\n\r\n    constructor(){\r\n        coinToken = IERC20(0xdd079B3678dfB01e451Ae58A37B0dEb39C90aDF3);\r\n        UsdtToken = IERC20(0xFE3B8Dc3929E578019110Dc21546043787958818);\r\n        swapRouter = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        fundAddress = 0x0ff1A9FB9712DaD271dE16C2fCFD82AC89b7BE57;\r\n    }\r\n    \r\n    /* ========== VIEWS ========== */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n   function balanceOf(address account) external view  returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function totalSupply() external view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function sumCount() external view returns(uint256){\r\n        return _sumCount;\r\n    }\r\n\r\n    //read info\r\n    function buyInfo(uint256 iD) external view returns (\r\n        uint256 id,\r\n        address addr,\r\n        uint256 buyAmount,\r\n        uint256 time\r\n        ) {\r\n        require(iD <= _sumCount, \"BoredApeBuyCoinnManage: exist num!\");\r\n        id = _buyPropertys[iD].id;\r\n        addr = _buyPropertys[iD].addr;\r\n        buyAmount = _buyPropertys[iD].buyAmount;\r\n        time = _buyPropertys[iD].time;\r\n        return (id,addr,buyAmount,time);\r\n    }\r\n    function buyNum(address addr) external view returns (uint256) {\r\n        return _buyIds[addr].length;\r\n    }\r\n    function buyIthId(address addr,uint256 ith) external view returns (uint256) {\r\n        require(ith < _buyIds[addr].length, \"BoredApeBuyCoinnManage: not exist!\");\r\n        return _buyIds[addr][ith];\r\n    }\r\n\r\n    function buyInfos(uint256 fromId,uint256 toId) external view returns (\r\n        uint256[] memory idArr,\r\n        address[] memory addrArr,\r\n        uint256[] memory buyAmountArr,\r\n        uint256[] memory timeArr\r\n        ) {\r\n        require(toId <= _sumCount, \"BoredApeBuyCoinnManage: exist num!\");\r\n        require(fromId <= toId, \"BoredApeBuyCoinnManage: exist num!\");\r\n        idArr = new uint256[](toId-fromId+1);\r\n        addrArr = new address[](toId-fromId+1);\r\n        buyAmountArr = new uint256[](toId-fromId+1);\r\n        timeArr = new uint256[](toId-fromId+1);\r\n        uint256 i=0;\r\n        for(uint256 ith=fromId; ith<=toId; ith++) {\r\n            idArr[i] = _buyPropertys[ith].id;\r\n            addrArr[i] = _buyPropertys[ith].addr;\r\n            buyAmountArr[i] = _buyPropertys[ith].buyAmount;\r\n            timeArr[i] = _buyPropertys[ith].time;\r\n            i = i+1;\r\n        }\r\n        return (idArr,addrArr,buyAmountArr,timeArr);\r\n    }\r\n    \r\n    function isWhiteContract(address account) public view returns (bool) {\r\n        if(!account.isContract()) return true;\r\n        return _Is_WhiteContractArr[account];\r\n    }\r\n    function getWhiteAccountNum() public view returns (uint256){\r\n        return _WhiteContractArr.length;\r\n    }\r\n    function getWhiteAccountIth(uint256 ith) public view returns (address WhiteAddress){\r\n        require(ith <_WhiteContractArr.length, \"BoredApeBuyCoinnManage: not in White Adress\");\r\n        return _WhiteContractArr[ith];\r\n    }\r\n    //---write---//\r\n    function buyCoin(uint256 amount,uint256 time) external nonReentrant{\r\n        uint256 amountUsdt = amount*byPriceUsdt;\r\n        require(isWhiteContract(_msgSender()), \"BoredApeBuyCoinnManage: Contract not in white list!\");\r\n       \r\n        swapTokensForToken(amountUsdt);\r\n\r\n        _sumCount = _sumCount.add(1);\r\n        _buyIds[_msgSender()].push(_sumCount);\r\n\r\n        _buyPropertys[_sumCount].id = _sumCount;\r\n        _buyPropertys[_sumCount].addr = _msgSender();\r\n        _buyPropertys[_sumCount].buyAmount = amount;\r\n        _buyPropertys[_sumCount].time = time;\r\n\r\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\r\n        _totalSupply = _totalSupply.add(amount);\r\n        emit BuyCoins(msg.sender, amount, _sumCount);\r\n    }\r\n\r\n    function swapTokensForToken(uint256 amountIn) private  {\r\n        UsdtToken.transferFrom(_msgSender(), address(this), amountIn);\r\n\r\n        UsdtToken.safeApprove(address(swapRouter), amountIn);\r\n\r\n        address[] memory path;\r\n        path = new address[](2);\r\n        path[0] = address(UsdtToken);\r\n        path[1] = address(coinToken);\r\n\r\n        uint256[] memory amountOut = swapRouter.getAmountsOut(amountIn, path);\r\n        uint256 amountOutMin = amountOut[1]*slipCoe/1000;\r\n\r\n        swapRouter.swapExactTokensForTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            path,\r\n            DEAD_ADDRESS,\r\n            block.timestamp\r\n        );\r\n    }\r\n    //---write onlyOwner---//\r\n   function setParameters(address coinAddr,address usdtAddr, address swapRouterAddr,address fundAddr) external onlyOwner {\r\n        coinToken = IERC20(coinAddr);\r\n        UsdtToken = IERC20(usdtAddr);\r\n        swapRouter = IUniswapV2Router01(swapRouterAddr);\r\n        fundAddress = fundAddr;\r\n    }\r\n   function setSlipCoe(uint256 tSlipCoe) external onlyOwner {\r\n        require(tSlipCoe <= 1000, \"BoredApeBuyCoinnManage:SlipCoe too big\");\r\n        slipCoe = tSlipCoe;\r\n    }\r\n    function addWhiteAccount(address account) external onlyOwner{\r\n        require(!_Is_WhiteContractArr[account], \"BoredApeBuyCoinnManage:Account is already White list\");\r\n        require(account.isContract(), \"BoredApeBuyCoinnManage: not Contract Adress\");\r\n        _Is_WhiteContractArr[account] = true;\r\n        _WhiteContractArr.push(account);\r\n    }\r\n    function removeWhiteAccount(address account) external onlyOwner{\r\n        require(_Is_WhiteContractArr[account], \"BoredApeBuyCoinnManage:Account is already out White list\");\r\n        for (uint256 i = 0; i < _WhiteContractArr.length; i++){\r\n            if (_WhiteContractArr[i] == account){\r\n                _WhiteContractArr[i] = _WhiteContractArr[_WhiteContractArr.length - 1];\r\n                _WhiteContractArr.pop();\r\n                _Is_WhiteContractArr[account] = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"BuyCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UsdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"buyCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iD\",\"type\":\"uint256\"}],\"name\":\"buyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toId\",\"type\":\"uint256\"}],\"name\":\"buyInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"idArr\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"addrArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"buyAmountArr\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timeArr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"buyIthId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"buyNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"byPriceUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ith\",\"type\":\"uint256\"}],\"name\":\"getWhiteAccountIth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"WhiteAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhiteAccountNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhiteAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"coinAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouterAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAddr\",\"type\":\"address\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tSlipCoe\",\"type\":\"uint256\"}],\"name\":\"setSlipCoe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slipCoe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoredApeBuyCoinnManage", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5683a8d6093db9ecf659417d1ade49429a4724d0623b7245012616a82362f7dd"}