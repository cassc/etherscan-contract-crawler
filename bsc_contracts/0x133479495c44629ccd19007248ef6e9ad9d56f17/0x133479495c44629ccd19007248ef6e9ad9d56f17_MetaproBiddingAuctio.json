{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Counter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Counters {\\n    struct Counter {\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Referral.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Define the struct in the SharedStruct contract\\ncontract Referral {\\n    struct ReferralFees {\\n        // @dev: Level 1 referral fee - integer value - example: 1000 -> 10%\\n        uint256 level1ReferrerFee;\\n        // @dev: Level 1 referral fee - integer value - example: 1000 -> 10%\\n        uint256 level2ReferrerFee;\\n        // @dev: Level 1 referral fee - integer value - example: 1000 -> 10%\\n        uint256 level3ReferrerFee;\\n    }\\n}\\n\\n//  referral\\ninterface MetaproReferral {\\n    function saveReferralDeposit(\\n        address _referrer,\\n        address _contractAddress,\\n        uint256 _auctionId,\\n        uint256 _tokenId,\\n        address _depositer,\\n        uint256 _level,\\n        uint256 _provision\\n    ) external;\\n\\n    function setReferral(address _referred, address _referrer) external;\\n\\n    function getReferral(address _referred) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Royalty.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Define the struct in the SharedStruct contract\\ncontract Royalty {\\n    struct RoyaltyTeamMember {\\n        address member;\\n        // @dev: royalty fee - integer value - example: 1000 -> 10%\\n        uint256 royaltyFee;\\n    }\\n\\n    struct RoyaltyTeamConfiguration {\\n        uint256 teamId;\\n        uint256 tokenId;\\n        address teamOwner;\\n    }\\n}\\n\\n//  royalty\\ninterface MetaproRoyalty {\\n    function getTeamMembers(uint256 _tokenId, address _tokenContractAddress)\\n        external\\n        view\\n        returns (Royalty.RoyaltyTeamMember[] memory);\\n\\n    function getTeam(uint256 _tokenId, address _tokenContractAddress)\\n        external\\n        view\\n        returns (Royalty.RoyaltyTeamConfiguration memory);\\n}\\n\"\r\n    },\r\n    \"contracts/MetaproAuction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"./libraries/Counter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./libraries/Royalty.sol\\\";\\nimport \\\"./libraries/Referral.sol\\\";\\n\\ncontract MetaproBiddingAuctionV1UAT is Ownable, ReentrancyGuard, ERC1155Holder {\\n    using Counters for Counters.Counter;\\n    using SafeMath for uint256;\\n\\n    struct AuctionConfiguration {\\n        // @dev: nft token id\\n        uint256 tokenId;\\n        // @dev: Token quantity in Auction\\n        uint256 tokenQuantity;\\n        // @dev: floor price per 1 nft token - value in busd\\n        uint256 tokenFloorPrice;\\n        // @dev: Max bid in Auction in token quantity\\n        uint256 maxBidTokenQuantity;\\n        // @dev: Auction starting block\\n        uint256 startBlock;\\n        // @dev: Auction ending block\\n        uint256 endBlock;\\n        // @dev: Auction operator\\n        address operator;\\n        // @dev: Auction validity - value in boolean\\n        bool valid;\\n        // @dev: Auction id\\n        uint256 auctionId;\\n    }\\n\\n    struct AuctionBid {\\n        // @dev: Auction bidder address\\n        address bidder;\\n        // @dev: AuctionBid token quantity\\n        uint256 tokenQuantity;\\n        // @dev: AuctionBid value - value in busd\\n        uint256 pricePerToken;\\n        // @dev: AuctionBid block number\\n        uint256 bidBlockNumber;\\n        // @dev: AuctionBid accepted value - above floorPrice is accepted by default\\n        bool accepted;\\n        // @dev: AuctionBid validity - value in boolean\\n        bool valid;\\n    }\\n\\n    struct TokenAuction {\\n        uint256 tokenId;\\n        address tokenContractAddress;\\n        bool active;\\n    }\\n\\n    mapping(uint256 => AuctionConfiguration) private auctions;\\n\\n    mapping(uint256 => AuctionBid[]) private auctionsBids;\\n\\n    mapping(address => uint256[]) private walletAuctionIds;\\n\\n    uint256[] private createdAuctionIds;\\n\\n    // @dev: dictionary with auction bids amount for withdraw/giveBack purposes\\n    mapping(uint256 => uint256) public auctionBalance;\\n\\n    // @dev: dictionary with auctionId => operatorWithdrawed\\n    mapping(uint256 => bool) private operatorWithdrawn;\\n\\n    // @dev: dictionary with ins token contract address auctionId -> auctionTokenContractAddress ERC1155\\n    mapping(uint256 => address) public auctionTokenContractAddress;\\n\\n    // @dev: dictionary with insId => Referral.ReferralFees\\n    mapping(uint256 => Referral.ReferralFees) public auctionReferralFees;\\n\\n    // @dev: dictionary with auctionId => Royalty.RoyaltyTeamMember[]\\n    mapping(uint256 => Royalty.RoyaltyTeamMember[])\\n        public auctionRoyaltyTeamMembers;\\n\\n    // uint256 with a break between auction endBlock and a block from which finalization by the bidder is enabled\\n    uint256 public finalizationBlockDelay = 5760; // 5760 / 4 = 24h\\n\\n    // Contracts\\n    IERC20 public busd;\\n    MetaproReferral public metaproReferral;\\n    MetaproRoyalty public metaproRoyalty;\\n\\n    //Contract addresses\\n    address private busdAddress;\\n    address private referralAddress;\\n    address private royaltyAddress;\\n    address public tressuryAddress;\\n\\n    uint256 public treasuryFee = 500; // 500 = 5%\\n\\n    Counters.Counter private currentAuctionId = Counters.Counter(1);\\n\\n    event AuctionBidAccepted(uint256 indexed auctionId, address indexed bidder);\\n    event AuctionFinalizedByParticipant(\\n        uint256 indexed auctionId,\\n        address indexed participant\\n    );\\n\\n    event OperatorWithdraw(\\n        uint256 _auctionId,\\n        address _target,\\n        uint256 _earnings,\\n        uint256 _tokenAmount\\n    );\\n\\n    modifier finalizeEnabled(uint256 _auctionId) {\\n        AuctionConfiguration memory auction = auctions[_auctionId];\\n        // Check if auction already exists and is valid\\n        require(\\n            auction.auctionId != 0 && auction.valid,\\n            \\\"MetaproAuction: Auction does not exist and can not be finalized\\\"\\n        );\\n        // Check if current block is higher than endBlock + 24h in blocks\\n        require(\\n            block.number > auction.endBlock + finalizationBlockDelay ||\\n                block.number < auction.startBlock,\\n            \\\"MetaproAuction: Auction can not be finalized\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        address _busdAddress,\\n        address _tressuryAddress,\\n        address _referralAddress,\\n        address _royaltyAddress\\n    ) {\\n        busd = IERC20(_busdAddress);\\n        tressuryAddress = _tressuryAddress;\\n        metaproReferral = MetaproReferral(_referralAddress);\\n        referralAddress = _referralAddress;\\n        metaproRoyalty = MetaproRoyalty(_royaltyAddress);\\n        royaltyAddress = _royaltyAddress;\\n    }\\n\\n    function createAuction(\\n        uint256 _tokenId,\\n        address _tokenContractAddress,\\n        uint256 _tokenQuantity,\\n        uint256 _maxBidTokenQuantity,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _tokenFloorPrice,\\n        uint256 _level1ReferralFee,\\n        uint256 _level2ReferralFee,\\n        uint256 _level3ReferralFee,\\n        bytes memory _data\\n    ) public nonReentrant {\\n        // Check if provided tokenContractAddress is valid\\n        require(\\n            Address.isContract(_tokenContractAddress),\\n            \\\"MetaproAuction: provide a valid ERC1155 contract address\\\"\\n        );\\n        // Check if provided referrals fees are valid\\n        require(\\n            _level1ReferralFee.add(_level2ReferralFee).add(\\n                _level3ReferralFee\\n            ) <= 1500,\\n            \\\"MetaproAuction: the sum of referral fees can not be greater than 15%\\\"\\n        );\\n        // Check if provided tokenId is valid\\n        require(\\n            _tokenId > 0,\\n            \\\"MetaproAuction: invalid tokenId, value must be positive number\\\"\\n        );\\n        // Check is balance of a given ERC1155 token is valid\\n        require(\\n            IERC1155(_tokenContractAddress).balanceOf(msg.sender, _tokenId) >=\\n                _tokenQuantity,\\n            \\\"MetaproAuction: insufficient ERC1155 balance, the value must be at least equal to tokenQuentity\\\"\\n        );\\n        require(\\n            _tokenFloorPrice > 0,\\n            \\\"MetaproAuction: pricePerToken must be greater than 0\\\"\\n        );\\n\\n        require(\\n            _startBlock >= block.number,\\n            \\\"MetaproAuction: Auction start block must be in the future\\\"\\n        );\\n        require(\\n            _endBlock > _startBlock,\\n            \\\"MetaproAuction: Auction end block must be after auction start block\\\"\\n        );\\n\\n        require(\\n            _tokenQuantity > 0,\\n            \\\"MetaproAuction: Token quantity must be positive value\\\"\\n        );\\n\\n        //Transfer auction NFTs to this contract\\n        IERC1155(_tokenContractAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _tokenId,\\n            _tokenQuantity,\\n            _data\\n        );\\n\\n        auctionTokenContractAddress[\\n            currentAuctionId.current()\\n        ] = _tokenContractAddress;\\n\\n        saveAuctionReferralFees(\\n            _level1ReferralFee,\\n            _level2ReferralFee,\\n            _level3ReferralFee\\n        );\\n\\n        saveAuctionRoyaltyFees(currentAuctionId.current(), _tokenId);\\n        auctions[currentAuctionId.current()] = AuctionConfiguration({\\n            tokenId: _tokenId,\\n            tokenQuantity: _tokenQuantity,\\n            tokenFloorPrice: _tokenFloorPrice,\\n            maxBidTokenQuantity: _maxBidTokenQuantity,\\n            startBlock: _startBlock,\\n            endBlock: _endBlock,\\n            operator: msg.sender,\\n            valid: true,\\n            auctionId: currentAuctionId.current()\\n        });\\n        createdAuctionIds.push(currentAuctionId.current());\\n        walletAuctionIds[msg.sender].push(currentAuctionId.current());\\n        currentAuctionId.increment();\\n    }\\n\\n    // Function that saves auction referral fees\\n    function saveAuctionReferralFees(\\n        uint256 _level1ReferralFee,\\n        uint256 _level2ReferralFee,\\n        uint256 _level3ReferralFee\\n    ) private {\\n        Referral.ReferralFees memory feesConfig = Referral.ReferralFees(\\n            _level1ReferralFee,\\n            _level2ReferralFee,\\n            _level3ReferralFee\\n        );\\n        auctionReferralFees[currentAuctionId.current()] = feesConfig;\\n    }\\n\\n    // Function that saves auction royalty fees\\n    function saveAuctionRoyaltyFees(\\n        uint256 _auctionId,\\n        uint256 _tokenId\\n    ) private {\\n        Royalty.RoyaltyTeamMember[] memory teamMembers = metaproRoyalty\\n            .getTeamMembers(_tokenId, auctionTokenContractAddress[_auctionId]);\\n\\n        Royalty.RoyaltyTeamMember[]\\n            storage royaltyAuctionFees = auctionRoyaltyTeamMembers[_auctionId];\\n\\n        for (uint256 i = 0; i < teamMembers.length; ++i) {\\n            royaltyAuctionFees.push(teamMembers[i]);\\n        }\\n    }\\n\\n    // Function fro getting current auction Id\\n    function getCurrentAuctionId() public view returns (uint256) {\\n        // Get current auction id substracted by 1\\n        return currentAuctionId.current().sub(1);\\n    }\\n\\n    // Function to get auction by id\\n    function getAuctionById(\\n        uint256 _auctionId\\n    ) public view returns (AuctionConfiguration memory) {\\n        require(\\n            _auctionId > 0,\\n            \\\"MetaproAuction: AuctionId must be positive value\\\"\\n        );\\n        return auctions[_auctionId];\\n    }\\n\\n    function getAuctionBidsById(\\n        uint256 _auctionId\\n    ) public view returns (AuctionBid[] memory) {\\n        require(\\n            _auctionId > 0,\\n            \\\"MetaproAuction: AuctionId must be positive value\\\"\\n        );\\n        uint256 correctArraySize = 0;\\n        for (uint256 i = 0; i < auctionsBids[_auctionId].length; i++) {\\n            if (auctionsBids[_auctionId][i].bidder != address(0)) {\\n                correctArraySize += 1;\\n            }\\n        }\\n\\n        AuctionBid[] memory auctionBids = new AuctionBid[](correctArraySize);\\n        uint256 correctIndex = 0;\\n        for (uint256 i = 0; i < auctionsBids[_auctionId].length; i++) {\\n            if (auctionsBids[_auctionId][i].bidder != address(0)) {\\n                auctionBids[correctIndex] = auctionsBids[_auctionId][i];\\n                correctIndex++;\\n            }\\n        }\\n\\n        return auctionBids;\\n    }\\n\\n    // Function for getting Auction[] by tokenId\\n    function getTokenAuctions(\\n        uint256 _tokenId\\n    ) public view returns (AuctionConfiguration[] memory) {\\n        uint256 correctArraySize = 0;\\n\\n        for (uint256 i = 0; i <= getCurrentAuctionId(); i++) {\\n            if (auctions[i].tokenId == _tokenId) {\\n                correctArraySize += 1;\\n            }\\n        }\\n\\n        AuctionConfiguration[]\\n            memory tokenAuctions = new AuctionConfiguration[](correctArraySize);\\n\\n        uint256 correctIndex = 0;\\n        for (uint256 i = 0; i <= getCurrentAuctionId(); i++) {\\n            if (auctions[i].tokenId == _tokenId) {\\n                tokenAuctions[correctIndex] = auctions[i];\\n                correctIndex++;\\n            }\\n        }\\n\\n        return tokenAuctions;\\n    }\\n\\n    function getAuctionTokens() public view returns (TokenAuction[] memory) {\\n        uint256 correctArraySize = 0;\\n\\n        for (uint256 i = 0; i <= getCurrentAuctionId(); i++) {\\n            if (auctions[i].valid) {\\n                correctArraySize += 1;\\n            }\\n        }\\n\\n        TokenAuction[] memory auctionsTokenIds = new TokenAuction[](\\n            correctArraySize\\n        );\\n\\n        uint256 correctIndex = 0;\\n        for (uint256 i = 0; i <= getCurrentAuctionId(); i++) {\\n            AuctionConfiguration memory auction = auctions[i];\\n            if (auctions[i].valid) {\\n                auctionsTokenIds[correctIndex].tokenId = auction.tokenId;\\n                auctionsTokenIds[correctIndex]\\n                    .tokenContractAddress = auctionTokenContractAddress[\\n                    auction.auctionId\\n                ];\\n                auctionsTokenIds[correctIndex].active =\\n                    auction.endBlock > block.number &&\\n                    auction.startBlock < block.number;\\n                correctIndex++;\\n            }\\n        }\\n\\n        return auctionsTokenIds;\\n    }\\n\\n    // Get all available auctions\\n    function getAllAuctions()\\n        public\\n        view\\n        returns (AuctionConfiguration[] memory)\\n    {\\n        AuctionConfiguration[] memory allAuctions = new AuctionConfiguration[](\\n            createdAuctionIds.length\\n        );\\n\\n        for (uint256 i = 0; i < createdAuctionIds.length; i++) {\\n            allAuctions[i] = auctions[createdAuctionIds[i]];\\n        }\\n\\n        return allAuctions;\\n    }\\n\\n    // Get auctions's heighest bid\\n    function getAuctionHeighestBid(\\n        uint256 _auctionId\\n    ) public view returns (AuctionBid memory) {\\n        // Check if auction for given id exists\\n        require(\\n            auctions[_auctionId].valid,\\n            \\\"MetaproAuction: Auction for given id does not exists\\\"\\n        );\\n        AuctionBid[] memory auctionBids = getAuctionBidsById(_auctionId);\\n        // Check if auction has bids\\n        require(\\n            auctionBids.length > 0,\\n            \\\"MetaproAuction: Auction for given id does not have any bids\\\"\\n        );\\n        AuctionBid memory heighestBid;\\n        for (uint256 i = 0; i < auctionBids.length; i++) {\\n            if (auctionBids[i].valid) {\\n                if (heighestBid.pricePerToken == 0) {\\n                    heighestBid = auctionBids[i];\\n                } else if (\\n                    auctionBids[i].pricePerToken > heighestBid.pricePerToken\\n                ) {\\n                    heighestBid = auctionBids[i];\\n                }\\n            }\\n        }\\n\\n        return heighestBid;\\n    }\\n\\n    function placeBid(\\n        uint256 _auctionId,\\n        uint256 _pricePerToken,\\n        uint256 _tokenQuantity,\\n        address _referrer\\n    ) public {\\n        AuctionConfiguration storage auctionConfig = auctions[_auctionId];\\n\\n        // Check if auction is exists\\n        require(\\n            auctionConfig.auctionId > 0,\\n            \\\"MetaproAuction: Auction for given auctionId does not exists\\\"\\n        );\\n\\n        // Check if msg.sender is not auction operator\\n        require(\\n            auctionConfig.operator != msg.sender,\\n            \\\"MetaproAuction: Auction operator cannot bid for given auctionId\\\"\\n        );\\n\\n        // Check if auction is not ended that means auction end block is lower than current block\\n        require(\\n            auctionConfig.endBlock > block.number &&\\n                auctionConfig.startBlock < block.number,\\n            \\\"MetaproAuction: To place a bid auction must be active\\\"\\n        );\\n\\n        require(\\n            auctionConfig.valid && !operatorWithdrawn[_auctionId],\\n            \\\"MetaproAuction: Auction for given auctionId is finished\\\"\\n        );\\n        require(\\n            _tokenQuantity <= auctionConfig.tokenQuantity,\\n            \\\"MetaproAuction: Bid token quantity exceeds auction token quantity\\\"\\n        );\\n\\n        require(\\n            auctionConfig.maxBidTokenQuantity > 0\\n                ? _tokenQuantity <= auctionConfig.maxBidTokenQuantity\\n                : true,\\n            \\\"MetaproAuction: Bid token quantity exceeds max bid token quantity\\\"\\n        );\\n\\n        bool alreadyBidded = false;\\n\\n        for (uint256 i = 0; i < auctionsBids[_auctionId].length; i++) {\\n            // Check if wallet address already bidded for given auctionId\\n            if (\\n                auctionsBids[_auctionId][i].bidder == msg.sender &&\\n                auctionsBids[_auctionId][i].valid\\n            ) {\\n                // Check if bid is heigher than previous bid\\n                require(\\n                    _pricePerToken >=\\n                        auctionsBids[_auctionId][i].pricePerToken &&\\n                        _tokenQuantity >=\\n                        auctionsBids[_auctionId][i].tokenQuantity,\\n                    \\\"MetaproAuction: Bid price per token or token quantity is lower than in previous bid\\\"\\n                );\\n                // Balance to be filled after bid increase\\n                uint256 missingBalance = _pricePerToken.mul(_tokenQuantity).sub(\\n                    auctionsBids[_auctionId][i].pricePerToken.mul(\\n                        auctionsBids[_auctionId][i].tokenQuantity\\n                    )\\n                );\\n                busd.transferFrom(msg.sender, address(this), missingBalance);\\n\\n                auctionBalance[_auctionId] += missingBalance;\\n                auctionsBids[_auctionId][i].accepted =\\n                    _pricePerToken >= auctionConfig.tokenFloorPrice;\\n                auctionsBids[_auctionId][i].tokenQuantity = _tokenQuantity;\\n                auctionsBids[_auctionId][i].pricePerToken = _pricePerToken;\\n                alreadyBidded = true;\\n            }\\n        }\\n\\n        if (!alreadyBidded) {\\n            AuctionBid memory bidConfiguration = AuctionBid({\\n                bidder: msg.sender,\\n                tokenQuantity: _tokenQuantity,\\n                pricePerToken: _pricePerToken,\\n                accepted: _pricePerToken >= auctionConfig.tokenFloorPrice,\\n                bidBlockNumber: block.number,\\n                valid: true\\n            });\\n            // Send busd tokens to the contract address from bidder wallet address\\n            busd.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _tokenQuantity.mul(_pricePerToken)\\n            );\\n            auctionBalance[_auctionId] += _tokenQuantity * _pricePerToken;\\n            auctionsBids[_auctionId].push(bidConfiguration);\\n        }\\n        metaproReferral.setReferral(msg.sender, _referrer);\\n        addAuctionIdToWallet(msg.sender, _auctionId);\\n    }\\n\\n    // Add auctionId to walletAuctionIds when auctionId is not already added\\n    function addAuctionIdToWallet(address _wallet, uint256 _auctionId) private {\\n        bool auctionIdExists = false;\\n        for (uint256 i = 0; i < walletAuctionIds[_wallet].length; i++) {\\n            if (walletAuctionIds[_wallet][i] == _auctionId) {\\n                auctionIdExists = true;\\n            }\\n        }\\n        if (!auctionIdExists) {\\n            walletAuctionIds[_wallet].push(_auctionId);\\n        }\\n    }\\n\\n    function getWalletBidAcceptedTokenQuantity(\\n        uint256 _auctionId,\\n        address _bidder\\n    ) public view returns (uint256) {\\n        AuctionConfiguration memory auction = auctions[_auctionId];\\n        uint256 allAcceptedTokenQuantity = getRequiredToBeSoldTokenQuantity(\\n            _auctionId\\n        );\\n        uint256 disposedTokenQuantity = 0;\\n        uint256 bidderAcceptedTokenQuantity = 0;\\n        if (getAuctionBidsById(_auctionId).length == 0) {\\n            return bidderAcceptedTokenQuantity;\\n        }\\n        AuctionBid[]\\n            memory sortedBids = sortByPricePerTokenAndBlockNumberDescending(\\n                getAuctionBidsById(_auctionId)\\n            );\\n        uint256 index = 0;\\n        do {\\n            AuctionBid memory singleBid = sortedBids[index];\\n            // Check if pricePerToken is higher or equal with auction floor price\\n            // We need to auto pass bids above floor price\\n            if (singleBid.accepted) {\\n                // Check if allAcceptedTokenQuantity has some space for another bid and how many\\n                if (\\n                    disposedTokenQuantity + singleBid.tokenQuantity <=\\n                    auction.tokenQuantity\\n                ) {\\n                    if (singleBid.bidder == _bidder) {\\n                        bidderAcceptedTokenQuantity += singleBid.tokenQuantity;\\n                    }\\n                    disposedTokenQuantity += singleBid.tokenQuantity;\\n                } else {\\n                    uint256 tokensLeft = allAcceptedTokenQuantity -\\n                        disposedTokenQuantity;\\n                    disposedTokenQuantity += tokensLeft;\\n                    if (singleBid.bidder == _bidder) {\\n                        bidderAcceptedTokenQuantity += tokensLeft;\\n                    }\\n                }\\n            }\\n            index++;\\n            // Check if bid value is higher than\\n        } while (index <= sortedBids.length - 1);\\n        return bidderAcceptedTokenQuantity;\\n    }\\n\\n    // Get auction bids required to sold token quantity\\n    function getRequiredToBeSoldTokenQuantity(\\n        uint256 _auctionId\\n    ) public view returns (uint256 requiredToSold) {\\n        AuctionConfiguration memory auction = auctions[_auctionId];\\n        uint256 requiredToSoldTokenQuantity = 0;\\n        if (getAuctionBidsById(_auctionId).length == 0) {\\n            return requiredToSoldTokenQuantity;\\n        }\\n        AuctionBid[]\\n            memory sortedBids = sortByPricePerTokenAndBlockNumberDescending(\\n                getAuctionBidsById(_auctionId)\\n            );\\n        uint256 index = 0;\\n\\n        do {\\n            AuctionBid memory singleBid = sortedBids[index];\\n            // Check if pricePerToken is higher or equal with auction floor price\\n            // We need to auto pass bids above floor price\\n            if (singleBid.accepted) {\\n                // Check if allAcceptedTokenQuantity has some space for another bid and how many\\n                if (\\n                    requiredToSoldTokenQuantity + singleBid.tokenQuantity <\\n                    auction.tokenQuantity\\n                ) {\\n                    requiredToSoldTokenQuantity += singleBid.tokenQuantity;\\n                } else {\\n                    uint256 tokensLeft = auction.tokenQuantity -\\n                        requiredToSoldTokenQuantity;\\n                    requiredToSoldTokenQuantity += tokensLeft;\\n                }\\n            }\\n            index++;\\n            // Check if bid value is higher than\\n        } while (\\n            index <= sortedBids.length - 1 &&\\n                requiredToSoldTokenQuantity <= auction.tokenQuantity\\n        );\\n\\n        return requiredToSoldTokenQuantity;\\n    }\\n\\n    // Get walletAuctionIds when the vakue in map is greater than 0\\n    function getWalletAuctionIds(\\n        address _wallet\\n    ) public view returns (uint256[] memory) {\\n        // Count how many auctionIds are is greater tahn 0\\n        uint256 count = 0;\\n        for (uint256 i = 0; i < walletAuctionIds[_wallet].length; i++) {\\n            if (walletAuctionIds[_wallet][i] > 0) {\\n                count++;\\n            }\\n        }\\n        uint256[] memory walletAuctionIdsMap = walletAuctionIds[_wallet];\\n        uint256[] memory walletAuctionIdsMapFiltered = new uint256[](count);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < walletAuctionIdsMap.length; i++) {\\n            if (walletAuctionIdsMap[i] > 0) {\\n                walletAuctionIdsMapFiltered[index] = walletAuctionIdsMap[i];\\n                index++;\\n            }\\n        }\\n        return walletAuctionIdsMapFiltered;\\n    }\\n\\n    function getBatchAuctions(\\n        uint256[] memory _auctionIds\\n    ) public view returns (AuctionConfiguration[] memory) {\\n        AuctionConfiguration[]\\n            memory auctionsConfigurations = new AuctionConfiguration[](\\n                _auctionIds.length\\n            );\\n\\n        for (uint256 i = 0; i < _auctionIds.length; i++) {\\n            // Require tokenId to be higher than 0\\n            require(\\n                auctions[_auctionIds[i]].tokenId > 0,\\n                \\\"MetaproAuction: Auction for given auctionId does not exist\\\"\\n            );\\n            auctionsConfigurations[i] = auctions[_auctionIds[i]];\\n        }\\n\\n        return auctionsConfigurations;\\n    }\\n\\n    function removeBid(uint256 _auctionId) public {\\n        AuctionBid[] storage auctionBids = auctionsBids[_auctionId];\\n        uint256[] storage walletAuctionIdsMap = walletAuctionIds[msg.sender];\\n\\n        bool hasActiveBiddsInAuction = false;\\n        for (uint256 index = 0; index < auctionBids.length; index++) {\\n            if (\\n                auctionBids[index].bidder == msg.sender &&\\n                auctionBids[index].valid\\n            ) {\\n                hasActiveBiddsInAuction = true;\\n                uint256 valueToSendBack = auctionBids[index].tokenQuantity.mul(\\n                    auctionBids[index].pricePerToken\\n                );\\n                // Send back the bid value from contract to bidder\\n                busd.transfer(auctionBids[index].bidder, valueToSendBack);\\n                auctionBalance[_auctionId] -= valueToSendBack;\\n                delete auctionBids[index];\\n            }\\n        }\\n        require(\\n            hasActiveBiddsInAuction &&\\n                auctions[_auctionId].endBlock > block.number,\\n            \\\"MetaproAuction: Wallet has no active bid in auction or auction is ended\\\"\\n        );\\n        for (uint256 index = 0; index < walletAuctionIdsMap.length; index++) {\\n            if (walletAuctionIdsMap[index] == _auctionId) {\\n                delete walletAuctionIdsMap[index];\\n            }\\n        }\\n    }\\n\\n    function sortByPricePerTokenAndBlockNumberDescending(\\n        AuctionBid[] memory bids\\n    ) private pure returns (AuctionBid[] memory) {\\n        quickSortByPriceAndBlockDescending(bids, int(0), int(bids.length - 1));\\n        return bids;\\n    }\\n\\n    function quickSortByPriceAndBlockDescending(\\n        AuctionBid[] memory bids,\\n        int left,\\n        int right\\n    ) private pure {\\n        if (left < right) {\\n            int pivotIndex = int(partition(bids, uint(left), uint(right)));\\n            if (pivotIndex > left) {\\n                quickSortByPriceAndBlockDescending(bids, left, pivotIndex - 1);\\n            }\\n            if (pivotIndex < right) {\\n                quickSortByPriceAndBlockDescending(bids, pivotIndex + 1, right);\\n            }\\n        }\\n    }\\n\\n    function partition(\\n        AuctionBid[] memory bids,\\n        uint left,\\n        uint right\\n    ) private pure returns (uint) {\\n        uint pivotIndex = left;\\n        uint pivotPrice = bids[pivotIndex].pricePerToken;\\n        uint pivotBlock = bids[pivotIndex].bidBlockNumber;\\n        int i = int(left + 1);\\n        int j = int(right);\\n\\n        while (i <= j) {\\n            while (\\n                i <= j &&\\n                (bids[uint(i)].pricePerToken > pivotPrice ||\\n                    (bids[uint(i)].pricePerToken == pivotPrice &&\\n                        bids[uint(i)].bidBlockNumber < pivotBlock))\\n            ) {\\n                i++;\\n            }\\n\\n            while (\\n                j >= i &&\\n                (bids[uint(j)].pricePerToken < pivotPrice ||\\n                    (bids[uint(j)].pricePerToken == pivotPrice &&\\n                        bids[uint(j)].bidBlockNumber > pivotBlock))\\n            ) {\\n                j--;\\n            }\\n\\n            if (i < j) {\\n                (bids[uint(i)], bids[uint(j)]) = (bids[uint(j)], bids[uint(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n\\n        uint newPivotIndex = uint(i - 1);\\n        (bids[left], bids[newPivotIndex]) = (bids[newPivotIndex], bids[left]);\\n        return newPivotIndex;\\n    }\\n\\n    // Accept bid that is lower than floor price but first check how many tokens are required to be sold (pricePerToken is higher than floor price)\\n    function acceptBid(\\n        uint256 _auctionId,\\n        address _bidder\\n    ) public nonReentrant {\\n        AuctionConfiguration memory auction = auctions[_auctionId];\\n        // Check if function sender is operator on the auction\\n        require(\\n            auctions[_auctionId].operator == msg.sender,\\n            \\\"MetaproAuction: Only operator can accept bids\\\"\\n        );\\n\\n        // Check if auction is valid\\n        require(\\n            auction.valid &&\\n                auction.endBlock.add(finalizationBlockDelay) > block.number,\\n            \\\"MetaproAuction: Auction does not exist or is ended and can not be accepted\\\"\\n        );\\n\\n        // Find bidder bid in auction bids and get its value\\n        AuctionBid[] storage auctionBids = auctionsBids[_auctionId];\\n        AuctionBid memory bidderBid;\\n        for (uint256 index = 0; index < auctionBids.length; index++) {\\n            if (auctionBids[index].bidder == _bidder) {\\n                bidderBid = auctionBids[index];\\n            }\\n        }\\n        // Check if bid has truthy valid parameter that means that bid does not exist\\n        require(\\n            bidderBid.valid,\\n            \\\"MetaproAuction: Bid does not exist and can not be accepted\\\"\\n        );\\n        // Check if bid value is lower than floor price\\n        require(\\n            bidderBid.pricePerToken < auction.tokenFloorPrice,\\n            \\\"MetaproAuction: Bid value is higher than floor price and is accepted automatically\\\"\\n        );\\n        // Check if bid is not accepted\\n        require(\\n            !bidderBid.accepted,\\n            \\\"MetaproAuction: Bid is already accepted and can not be accepted again\\\"\\n        );\\n        // Check how many tokens are required to be sold (bid values are higher than floor price) using requiredToSoldTokenQuantity function\\n        uint256 requiredToSoldTokenQuantity = getRequiredToBeSoldTokenQuantity(\\n            _auctionId\\n        );\\n        // Check if requiredToSoldTokenQuantity is lower than bid that is about to be accepted\\n        require(\\n            auction.tokenQuantity - requiredToSoldTokenQuantity >=\\n                bidderBid.tokenQuantity,\\n            \\\"MetaproAuction: Bid is not accepted because there are not enough tokens to be sold\\\"\\n        );\\n        // Find valid auction bid and change accepted value to true\\n        for (uint256 index = 0; index < auctionBids.length; index++) {\\n            if (\\n                auctionBids[index].bidder == _bidder && auctionBids[index].valid\\n            ) {\\n                auctionBids[index].accepted = true;\\n            }\\n        }\\n\\n        // Emit event that auction is accepted\\n        emit AuctionBidAccepted(_auctionId, _bidder);\\n    }\\n\\n    function closeAuction(uint256 _auctionId, bytes memory _data) public {\\n        // Get auction configuration by auctionId\\n        AuctionConfiguration memory auction = auctions[_auctionId];\\n        // Check if auction is valid\\n        require(\\n            auction.auctionId != 0,\\n            \\\"MetaproAuction: Auction does not exist and can not be closed\\\"\\n        );\\n        // Check if auction has truthy valid parameter\\n        require(auction.valid, \\\"MetaproAuction: Auction is already closed\\\");\\n        // Get auction fees configuration by auctionId\\n        Referral.ReferralFees memory _auctionFees = auctionReferralFees[\\n            _auctionId\\n        ];\\n        // Get auction bids by auctionID\\n        AuctionBid[] memory _auctionBids = auctionsBids[_auctionId];\\n        // Check if msg.sender is auction operator and if is fire finalizeAuctionByOperator function\\n        if (auction.operator == msg.sender) {\\n            finalizeAuctionByOperator(\\n                _auctionId,\\n                _auctionFees,\\n                _auctionBids,\\n                _data\\n            );\\n        } else {\\n            // If msg.sender is not auction operator fire finalizeAuctionByParticipant function\\n            finalizeAuctionByParticipant(_auctionId);\\n        }\\n    }\\n\\n    // Finalize auction by participant by auctionId\\n    function finalizeAuctionByParticipant(\\n        uint256 _auctionId\\n    ) private finalizeEnabled(_auctionId) nonReentrant {\\n        // Get memory auction by auctionId\\n        AuctionConfiguration memory auction = auctions[_auctionId];\\n        // Get AuctionBid for the msg.sender\\n        AuctionBid[] storage auctionBids = auctionsBids[_auctionId];\\n        // Find ms.sender bid in auctionBids\\n        AuctionBid memory walletBid;\\n        for (uint256 index = 0; index < auctionBids.length; index++) {\\n            if (auctionBids[index].bidder == msg.sender) {\\n                walletBid = auctionBids[index];\\n            }\\n        }\\n        // Check if walletBid exists\\n        require(\\n            walletBid.valid,\\n            \\\"MetaproAuction: Auction can not be finalized by participant that does not have any active bids\\\"\\n        );\\n\\n        // Count how many tokens are required to be sold for msg.sender with function getWalletBidAcceptedTokenQuantity\\n        uint256 walletBidAcceptedTokenQuantity = getWalletBidAcceptedTokenQuantity(\\n                _auctionId,\\n                msg.sender\\n            );\\n\\n        // When walletBid is accepted send tokens to walletBid bidder\\n        if (walletBidAcceptedTokenQuantity > 0) {\\n            // Get auction token contract IERC1155 address from mapping auctionTokenContractAddress\\n            IERC1155 auctionTokenContract = IERC1155(\\n                auctionTokenContractAddress[_auctionId]\\n            );\\n            // Send tokens to walletBid bidder\\n            auctionTokenContract.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                auction.tokenId,\\n                walletBidAcceptedTokenQuantity,\\n                \\\"\\\"\\n            );\\n            sendFeesToReferrers(\\n                auction,\\n                auctionReferralFees[auction.auctionId],\\n                walletBidAcceptedTokenQuantity.mul(walletBid.pricePerToken),\\n                msg.sender\\n            );\\n            if (walletBidAcceptedTokenQuantity < walletBid.tokenQuantity) {\\n                // Send busd tokens back to bidder\\n                busd.transfer(\\n                    msg.sender,\\n                    walletBid\\n                        .tokenQuantity\\n                        .sub(walletBidAcceptedTokenQuantity)\\n                        .mul(walletBid.pricePerToken)\\n                );\\n            }\\n        } else {\\n            // When walletBid is not accepted send busd tokens back to bidder\\n            busd.transfer(\\n                msg.sender,\\n                walletBid.tokenQuantity.mul(walletBid.pricePerToken)\\n            );\\n        }\\n\\n        // Unvalidate wallet bids\\n        for (uint256 index = 0; index < auctionBids.length; index++) {\\n            if (\\n                auctionBids[index].bidder == msg.sender &&\\n                auctionBids[index].valid\\n            ) {\\n                auctionBids[index].valid = false;\\n            }\\n        }\\n\\n        // Emit event that auction is finalized by participant\\n        emit AuctionFinalizedByParticipant(_auctionId, msg.sender);\\n    }\\n\\n    function isFinalizedByOperator(\\n        uint256 _auctionId\\n    ) public view returns (bool) {\\n        // Check if auction by auctionId is valid\\n        require(\\n            auctions[_auctionId].valid,\\n            \\\"MetaproAuction: Auction does not exist\\\"\\n        );\\n        return operatorWithdrawn[_auctionId];\\n    }\\n\\n    // Finalize auction by operator by auctionId\\n    function finalizeAuctionByOperator(\\n        uint256 _auctionId,\\n        Referral.ReferralFees memory _auctionFeesConfiguration,\\n        AuctionBid[] memory _auctionBids,\\n        bytes memory _data\\n    ) private finalizeEnabled(_auctionId) nonReentrant {\\n        // Get memory auction by auctionId\\n        AuctionConfiguration storage _auction = auctions[_auctionId];\\n        // Check if msg.sender is auction operator\\n        require(\\n            _auction.operator == msg.sender,\\n            \\\"MetaproAuction: Only operator can finalize auction\\\"\\n        );\\n        // Check is auction is already withdrawn by operator\\n        require(\\n            !isFinalizedByOperator(_auctionId),\\n            \\\"MetaproAuction: Auction is already withdrawn by operator\\\"\\n        );\\n\\n        uint256 tokensLocked = _auctionBids.length > 0\\n            ? getRequiredToBeSoldTokenQuantity(_auctionId)\\n            : 0;\\n        uint256 totalApprovedBidsValue = 0;\\n        uint256 busdAmountFromBids = 0;\\n        for (uint256 i = 0; i < _auctionBids.length; i++) {\\n            AuctionBid memory singleWalletBid = _auctionBids[i];\\n            if (\\n                singleWalletBid.bidder != msg.sender &&\\n                singleWalletBid.bidder != address(0)\\n            ) {\\n                uint256 walletBidAcceptedTokenQuantity = getWalletBidAcceptedTokenQuantity(\\n                        _auctionId,\\n                        singleWalletBid.bidder\\n                    );\\n                // Calculate referral fees from deposits\\n                if (walletBidAcceptedTokenQuantity > 0) {\\n                    uint256 bidAmount = walletBidAcceptedTokenQuantity.mul(\\n                        singleWalletBid.pricePerToken\\n                    );\\n\\n                    uint256 refFee = calculateReferralFee(\\n                        _auctionFeesConfiguration,\\n                        bidAmount,\\n                        singleWalletBid.bidder\\n                    );\\n                    busdAmountFromBids += bidAmount - refFee;\\n                    totalApprovedBidsValue += bidAmount;\\n                }\\n            }\\n        }\\n\\n        // Calculate treasury fee\\n        uint256 treasuryFeeAmount = totalApprovedBidsValue.mul(treasuryFee).div(\\n            10000\\n        );\\n\\n        // Send fee to the treasury address\\n        busd.transfer(tressuryAddress, treasuryFeeAmount);\\n\\n        // Send fee to the royalty team\\n        uint256 royaltyFee = sendFeesToRoyaltyTeamMembers(\\n            _auction,\\n            totalApprovedBidsValue\\n        );\\n\\n        uint256 operatorTokens = _auction.tokenQuantity - tokensLocked;\\n\\n        // Give back operator tokens when is something left\\n        if (operatorTokens != 0) {\\n            IERC1155(auctionTokenContractAddress[_auction.auctionId])\\n                .safeTransferFrom(\\n                    address(this),\\n                    _auction.operator,\\n                    _auction.tokenId,\\n                    operatorTokens,\\n                    _data\\n                );\\n        }\\n\\n        uint256 operatorEarnings = sendEarningsToOperator(\\n            _auction,\\n            busdAmountFromBids - royaltyFee - treasuryFeeAmount\\n        );\\n\\n        // Subtract ins balance by sent operator earnings with\\n        auctionBalance[_auction.auctionId] = 0;\\n        operatorWithdrawn[_auction.auctionId] = true;\\n        if (block.number < _auction.startBlock) {\\n            _auction.valid = false;\\n        }\\n\\n        emit OperatorWithdraw(\\n            _auction.auctionId,\\n            msg.sender,\\n            operatorEarnings,\\n            operatorTokens\\n        );\\n    }\\n\\n    function sendEarningsToOperator(\\n        AuctionConfiguration memory _auction,\\n        uint256 _bidsAmountWithFees\\n    ) private returns (uint256) {\\n        busd.transfer(_auction.operator, _bidsAmountWithFees);\\n        return _bidsAmountWithFees;\\n    }\\n\\n    function depositOnReferrer(\\n        uint256 _auctionId,\\n        address _referrer,\\n        address _depositer,\\n        uint256 _amount,\\n        uint256 _referralFee,\\n        uint256 _tokenId,\\n        uint256 _level\\n    ) private returns (uint256) {\\n        uint256 referralFeeAmount = _amount.mul(_referralFee).div(10000);\\n\\n        busd.transfer(_referrer, referralFeeAmount);\\n\\n        metaproReferral.saveReferralDeposit(\\n            _referrer,\\n            address(this),\\n            _auctionId,\\n            _tokenId,\\n            _depositer,\\n            _level,\\n            referralFeeAmount\\n        );\\n        return referralFeeAmount;\\n    }\\n\\n    function sendFeesToReferrers(\\n        AuctionConfiguration memory _auctionConfiguration,\\n        Referral.ReferralFees memory _auctionFeesConfiguration,\\n        uint256 _amount,\\n        address _depositer\\n    ) private returns (uint256) {\\n        uint256 fee = 0;\\n        address level1Referrer = metaproReferral.getReferral(_depositer);\\n        if (level1Referrer != address(0)) {\\n            // Level 1\\n            if (_auctionFeesConfiguration.level1ReferrerFee > 0) {\\n                uint256 level1Fee = depositOnReferrer(\\n                    _auctionConfiguration.auctionId,\\n                    level1Referrer,\\n                    _depositer,\\n                    _amount,\\n                    _auctionFeesConfiguration.level1ReferrerFee,\\n                    _auctionConfiguration.tokenId,\\n                    1\\n                );\\n\\n                fee += level1Fee;\\n            }\\n            // Level 2\\n            address level2Referrer = metaproReferral.getReferral(\\n                level1Referrer\\n            );\\n            if (level2Referrer != address(0)) {\\n                if (_auctionFeesConfiguration.level2ReferrerFee > 0) {\\n                    uint256 level2Fee = depositOnReferrer(\\n                        _auctionConfiguration.auctionId,\\n                        level2Referrer,\\n                        _depositer,\\n                        _amount,\\n                        _auctionFeesConfiguration.level2ReferrerFee,\\n                        _auctionConfiguration.tokenId,\\n                        2\\n                    );\\n\\n                    fee += level2Fee;\\n                }\\n\\n                // Level 3\\n                address level3Referrer = metaproReferral.getReferral(\\n                    level2Referrer\\n                );\\n                if (level3Referrer != address(0)) {\\n                    if (_auctionFeesConfiguration.level3ReferrerFee > 0) {\\n                        uint256 level3Fee = depositOnReferrer(\\n                            _auctionConfiguration.auctionId,\\n                            level3Referrer,\\n                            _depositer,\\n                            _amount,\\n                            _auctionFeesConfiguration.level3ReferrerFee,\\n                            _auctionConfiguration.tokenId,\\n                            3\\n                        );\\n                        fee += level3Fee;\\n                    }\\n                }\\n            }\\n        }\\n        return fee;\\n    }\\n\\n    function calculateReferralFee(\\n        Referral.ReferralFees memory _auctionFeesConfiguration,\\n        uint256 _amount,\\n        address _depositer\\n    ) private view returns (uint256) {\\n        uint256 fee = 0;\\n        address level1Referrer = metaproReferral.getReferral(_depositer);\\n        if (level1Referrer != address(0)) {\\n            // Level 1\\n            if (_auctionFeesConfiguration.level1ReferrerFee > 0) {\\n                fee += _amount\\n                    .mul(_auctionFeesConfiguration.level1ReferrerFee)\\n                    .div(10000);\\n            }\\n            // Level 2\\n            address level2Referrer = metaproReferral.getReferral(\\n                level1Referrer\\n            );\\n            if (level2Referrer != address(0)) {\\n                if (_auctionFeesConfiguration.level2ReferrerFee > 0) {\\n                    fee += _amount\\n                        .mul(_auctionFeesConfiguration.level2ReferrerFee)\\n                        .div(10000);\\n                }\\n\\n                // Level 3\\n                address level3Referrer = metaproReferral.getReferral(\\n                    level2Referrer\\n                );\\n                if (level3Referrer != address(0)) {\\n                    if (_auctionFeesConfiguration.level3ReferrerFee > 0) {\\n                        fee += _amount\\n                            .mul(_auctionFeesConfiguration.level3ReferrerFee)\\n                            .div(10000);\\n                    }\\n                }\\n            }\\n        }\\n        return fee;\\n    }\\n\\n    function sendFeesToRoyaltyTeamMembers(\\n        AuctionConfiguration memory _auctionConfiguration,\\n        uint256 _amount\\n    ) private returns (uint256) {\\n        uint256 fee = 0;\\n        Royalty.RoyaltyTeamMember[]\\n            storage royaltyTeamMembers = auctionRoyaltyTeamMembers[\\n                _auctionConfiguration.auctionId\\n            ];\\n\\n        for (uint256 i = 0; i < royaltyTeamMembers.length; i++) {\\n            Royalty.RoyaltyTeamMember memory member = royaltyTeamMembers[i];\\n            uint256 royaltyFee = _amount.mul(member.royaltyFee).div(10000);\\n            busd.transfer(member.member, royaltyFee);\\n            fee += royaltyFee;\\n        }\\n\\n        return fee;\\n    }\\n\\n    //Function to set finalizationBlockDelay only by owner\\n    function setFinalizationBlockDelay(\\n        uint256 _finalizationBlockDelay\\n    ) public onlyOwner {\\n        finalizationBlockDelay = _finalizationBlockDelay;\\n    }\\n\\n    function setTreasuryFee(uint256 _fee) external onlyOwner {\\n        require(_fee < 2500, \\\"INS: Fee can't be greater than 2,5%; 2500\\\");\\n        treasuryFee = _fee;\\n    }\\n\\n    function setAddresses(\\n        address _busdAddress,\\n        address _treasuryAddress,\\n        address _referralAddress,\\n        address _royaltyAddress\\n    ) external onlyOwner {\\n        busd = IERC20(_busdAddress);\\n        tressuryAddress = _treasuryAddress;\\n        referralAddress = _referralAddress;\\n        metaproReferral = MetaproReferral(_referralAddress);\\n        royaltyAddress = _royaltyAddress;\\n        metaproRoyalty = MetaproRoyalty(_royaltyAddress);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tressuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"AuctionBidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"AuctionFinalizedByParticipant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earnings\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"OperatorWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionReferralFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level1ReferrerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level2ReferrerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level3ReferrerFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionRoyaltyTeamMembers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionTokenContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBidTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenFloorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level1ReferralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level2ReferralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_level3ReferralFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizationBlockDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFloorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.AuctionConfiguration[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionBidsById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.AuctionBid[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFloorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.AuctionConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionHeighestBid\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.AuctionBid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.TokenAuction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_auctionIds\",\"type\":\"uint256[]\"}],\"name\":\"getBatchAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFloorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.AuctionConfiguration[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getRequiredToBeSoldTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requiredToSold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenFloorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidTokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaproBiddingAuctionV1UAT.AuctionConfiguration[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getWalletAuctionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getWalletBidAcceptedTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"isFinalizedByOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaproReferral\",\"outputs\":[{\"internalType\":\"contract MetaproReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaproRoyalty\",\"outputs\":[{\"internalType\":\"contract MetaproRoyalty\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pricePerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"removeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_busdAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalizationBlockDelay\",\"type\":\"uint256\"}],\"name\":\"setFinalizationBlockDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tressuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MetaproBiddingAuctionV1UAT", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000001ac33e1e4d501087d8a14a5c5c4668936b0fb6770000000000000000000000002569070c3461c8fd4e87e4302dd12557cf922f0400000000000000000000000042aded3421616df2b5a40e3906e649c5fdfcbba7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}