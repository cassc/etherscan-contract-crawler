{"SourceCode": "pragma solidity ^0.4.26;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n}\r\ncontract ERC20Basic {\r\n    uint public _totalSupply;\r\n    uint public _burnlimit;\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address who) public constant returns (uint);\r\n    function transfer(address to, uint value) public;\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n    function transferFrom(address from, address to, uint value) public;\r\n    function approve(address spender, uint value) public;\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract StandardToken is Ownable, ERC20 {\r\n\r\n    mapping (address => mapping (address => uint)) public allowed;\r\n    uint public constant MAX_UINT = 2**256 - 1;\r\n    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        uint fee = (_value.mul(basisPointsRate)).div(100);\r\n        uint feeburn = (_value.mul(basisBurnRate)).div(100);\r\n        uint feestaking = (_value.mul(basisstakeRate)).div(100);\r\n        if (_allowance < MAX_UINT) {\r\n            allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        }\r\n        if(_totalSupply <= _burnlimit)\r\n        {\r\n            feeburn=0;\r\n        }\r\n        if(isWhiteListed[_from] == true)\r\n        {\r\n            feeburn=0;\r\n            fee=0;\r\n            feestaking=0;\r\n        }\r\n        uint sendAmount = _value.sub(fee).sub(feeburn).sub(feestaking);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(sendAmount);\r\n        if (fee > 0) {\r\n            balances[_owner1] = balances[_owner1].add(fee.div(4));\r\n            emit Transfer(_from, _owner1, fee.div(4));\r\n            balances[_owner2] = balances[_owner2].add(fee.div(4));\r\n            emit Transfer(_from, _owner2, fee.div(4));\r\n            balances[_owner3] = balances[_owner3].add(fee.div(4));\r\n            emit Transfer(_from, _owner3, fee.div(4));\r\n            balances[_owner4] = balances[_owner4].add(fee.div(4));\r\n            emit Transfer(_from, _owner4, fee.div(4));\r\n        }\r\n        if (feeburn > 0) {\r\n            balances[address(0)] = balances[address(0)].add(feeburn);\r\n            _totalSupply -= feeburn;\r\n            emit Transfer(msg.sender, address(0), feeburn);\r\n        }\r\n        if (feestaking > 0) {\r\n            balances[_stacking] = balances[_stacking].add(feestaking);\r\n            emit Transfer(msg.sender, _stacking, feestaking);\r\n        }\r\n        emit Transfer(_from, _to, sendAmount);\r\n    }\r\n\r\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\r\n\r\n        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) public balances;\r\n    address _stacking=0xfaE55859F461E9aCc279C670a7Fe9C58a7933533;\r\n    address _owner1=0x6fEbE33b3958121De76a0e898Ad55B2Dbf5e3D45;\r\n    address _owner2=0x6DDfB8b11DC8827d5dF69e8ea6ACeFe33e066fb9;\r\n    address _owner3=0x7A66B441d3c78248C150257DF0F469fEb11641c9;\r\n    address _owner4=0xDf994f5f2317d3E10EdaFc5A4ca55D61075621b7;\r\n    mapping (address => bool) public isWhiteListed;\r\n\r\n    uint public basisPointsRate = 2;\r\n    uint public basisBurnRate = 2;\r\n    uint public basisstakeRate = 2;\r\n\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(!(msg.data.length < size + 4));\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\r\n        uint fee = (_value.mul(basisPointsRate)).div(100);\r\n        uint feeburn = (_value.mul(basisBurnRate)).div(100);\r\n        uint feestaking = (_value.mul(basisstakeRate)).div(100);\r\n        if(_totalSupply <= _burnlimit)\r\n        {\r\n            feeburn=0;\r\n        }\r\n        if(isWhiteListed[msg.sender] == true)\r\n        {\r\n            feeburn=0;\r\n            fee=0;\r\n            feestaking=0;\r\n        }\r\n        uint sendAmount = _value.sub(fee).sub(feeburn).sub(feestaking);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(sendAmount);\r\n        if (fee > 0) {\r\n            balances[_owner1] = balances[_owner1].add(fee.div(4));\r\n            emit Transfer(msg.sender, _owner1, fee.div(4));\r\n            balances[_owner2] = balances[_owner2].add(fee.div(4));\r\n            emit Transfer(msg.sender, _owner2, fee.div(4));\r\n            balances[_owner3] = balances[_owner3].add(fee.div(4));\r\n            emit Transfer(msg.sender, _owner3, fee.div(4));\r\n            balances[_owner4] = balances[_owner4].add(fee.div(4));\r\n            emit Transfer(msg.sender, _owner4, fee.div(4));\r\n        }\r\n        if (feeburn > 0) {\r\n            balances[address(0)] = balances[address(0)].add(feeburn);\r\n            _totalSupply -= feeburn;\r\n            emit Transfer(msg.sender, address(0), feeburn);\r\n        }\r\n        if (feestaking > 0) {\r\n            balances[_stacking] = balances[_stacking].add(feestaking);\r\n            emit Transfer(msg.sender, _stacking, feestaking);\r\n        }\r\n        emit Transfer(msg.sender, _to, sendAmount);\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function getWhiteListStatus(address _maker) external constant returns (bool) {\r\n        return isWhiteListed[_maker];\r\n    }\r\n    function getOwner() external constant returns (address) {\r\n        return owner;\r\n    }\r\n    function addWhiteList (address _evilUser) public onlyOwner {\r\n        isWhiteListed[_evilUser] = true;\r\n        emit AddedWhiteList(_evilUser);\r\n    }\r\n\r\n    function removeWhiteList (address _clearedUser) public onlyOwner {\r\n        isWhiteListed[_clearedUser] = false;\r\n        emit RemovedWhiteList(_clearedUser);\r\n    }\r\n\r\n    event AddedWhiteList(address _user);\r\n\r\n    event RemovedWhiteList(address _user);\r\n}\r\n\r\ncontract TweeterCoin is  Ownable, StandardToken {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    address public upgradedAddress;\r\n    mapping (address => bool) public isWhiteListed;\r\n    constructor(string _name, string _symbol) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n        _totalSupply = 10000000*10 ** decimals;\r\n        balances[owner] = _totalSupply;\r\n        _burnlimit=900000*10 ** decimals;\r\n        addWhiteList(msg.sender);\r\n    }\r\n    function transfer(address _to, uint _value) public  {\r\n        return super.transfer(_to, _value);\r\n    }\r\n    function transferFrom(address _from, address _to, uint _value) public  {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n    function balanceOf(address who) public constant returns (uint) {\r\n        return super.balanceOf(who);\r\n    }\r\n    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\r\n        return super.allowance(_owner, _spender);\r\n    }\r\n    function totalSupply() public constant returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"_burnlimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getWhiteListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisBurnRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisstakeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "TweeterCoin", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c5477656574657220436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035457430000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8310b649835fc7e1afe4d312b60dc766d01eb0893eaa29a1f335d05ddbe962c0"}