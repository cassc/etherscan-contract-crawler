{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/interfaces/IERC1271.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC1271 standard signature validation method for\r\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC1271 {\r\n    /**\r\n     * @dev Should return whether the signature provided is valid for the provided data\r\n     * @param hash      Hash of the data to be signed\r\n     * @param signature Signature byte array associated with _data\r\n     */\r\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\r\n}\r\n\r\n// File: contracts/Manager/interface/IWETH.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\n// File: contracts/Manager/trans/interface/TheTransFerSelector.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface TheTransferSelector {\r\n    function checkTransferManagerForToken(address collection) external view returns (address);\r\n}\r\n\r\n// File: contracts/Manager/interface/TheTransferManager.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface TheTransferManager {\r\n    function transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\n// File: contracts/Manager/interface/TheRoyaltyFeeManager.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface TheRoyaltyManager {\r\n    function calculateRoyaltyFeeAndGetRecipient(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) external view returns (address, uint256);\r\n}\r\n\r\n// File: contracts/libraries/OrderTypes.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n//\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014Order Structure\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\nlibrary OrderTypes {\r\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\r\n    bytes32 internal constant MAKER_ORDER_HASH = 0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\r\n\r\n    struct MakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address signer; // signer of the maker order\r\n        address collection; // collection address\r\n        uint256 price; // price (used as )\r\n        uint256 tokenId; // id of the token\r\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\r\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\r\n        address currency; // currency (e.g., WETH)\r\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\r\n        uint256 startTime; // startTime in timestamp\r\n        uint256 endTime; // endTime in timestamp\r\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\r\n        bytes params; // additional parameters\r\n        uint8 v; // v: parameter (27 or 28)\r\n        bytes32 r; // r: parameter\r\n        bytes32 s; // s: parameter\r\n    }\r\n\r\n    struct TakerOrder {\r\n        bool isOrderAsk; // true --> ask / false --> bid\r\n        address taker; // msg.sender\r\n        uint256 price; // final price for the purchase\r\n        uint256 tokenId;\r\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\r\n        bytes params; // other params (e.g., tokenId)\r\n    }\r\n\r\n\r\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\r\n        return\r\n        keccak256(\r\n            abi.encode(\r\n                MAKER_ORDER_HASH,\r\n                makerOrder.isOrderAsk,\r\n                makerOrder.signer,\r\n                makerOrder.collection,\r\n                makerOrder.price,\r\n                makerOrder.tokenId,\r\n                makerOrder.amount,\r\n                makerOrder.strategy,\r\n                makerOrder.currency,\r\n                makerOrder.nonce,\r\n                makerOrder.startTime,\r\n                makerOrder.endTime,\r\n                makerOrder.minPercentageToAsk,\r\n                keccak256(makerOrder.params)\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\n// File: contracts/Manager/interface/TheUnemetaExchange.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ninterface TheUnemetaExchange {\r\n    function matchSellerOrdersWETH(\r\n        OrderTypes.TakerOrder calldata takerBid,\r\n        OrderTypes.MakerOrder calldata makerAsk\r\n    ) external payable;\r\n\r\n    function matchSellerOrders(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external;\r\n\r\n    function matchesBuyerOrder(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external;\r\n}\r\n\r\n// File: contracts/Manager/execution/interface/TheExecutionStrategy.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\ninterface TheExStrategy {\r\n    function canExecuteBuy(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function canExecuteSell(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function viewProtocolFee() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Manager/interface/TheExManager.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface TheExManager {\r\n    function addStrategy(address strategy) external;\r\n\r\n    function removeStrategy(address strategy) external;\r\n\r\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\r\n\r\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\r\n\r\n    function viewCountWhitelistedStrategies() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Manager/interface/TheCurrencyManager.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface TheCurrencyManager {\r\n    function addCurrency(address currency) external;\r\n\r\n    function removeCurrency(address currency) external;\r\n\r\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\r\n\r\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\r\n\r\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/SignatureChecker.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SignatureChecker\r\n * @notice This library allows verification of signatures for both EOAs and contracts.\r\n */\r\nlibrary SignatureChecker {\r\n\r\n    //\r\n    // function recover\r\n    //  @Description:  Recover signer from the signature\r\n    //  @param bytes32  hash  Including has of signiture information\r\n    //  @param uint8 Two possibilities, to enforce decryption from multiple angles using public key\r\n    //  @param bytes32\r\n    //  @param bytes32\r\n    //  @return internal\r\n    //\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\r\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\r\n        require(\r\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\r\n            \" Invalid s parameter\"\r\n        );\r\n\r\n        require(v == 27 || v == 28, \"Invalid v parameter\");\r\n\r\n        // Recover one signing address if signature is normal\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0), \" Invalid signer\");\r\n\r\n        return signer;\r\n    }\r\n    \r\n    //\r\n    // tion verify\r\n    //  @Description: To verify of signer matches all the signature information\r\n    //  @param bytes32\r\n    //  @param address\r\n    //  @param uint8\r\n    //  @param bytes32\r\n    //  @param bytes32\r\n    //  @param bytes32\r\n    //  @return internal\r\n    //\r\n    function verify(\r\n        bytes32 hash,\r\n        address signer,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 domainSeparator\r\n    ) internal view returns (bool) {\r\n        // \\x19\\x01 Standard prefix code\r\n        // https://eips.ethereum.org/EIPS/eip-712#specification\r\n        // Checking code of the input domain and hash\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, hash));\r\n        // If the signature address is the contract address\r\n        if (Address.isContract(signer)) {\r\n            // 0x1626ba7e is the interfaceId(see IERC1271) of signing contract\r\n            // Standard 1271 API\r\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\r\n        } else {\r\n            // Check if signature address is same as input address\r\n            return recover(digest, v, r, s) == signer;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/Manager/UnemetaMarket.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.7;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//UnemetaExchange\r\ncontract UnemetaMarket is TheUnemetaExchange, ReentrancyGuard, Ownable {\r\n    // Load safe erc20\r\n    using SafeERC20 for IERC20;\r\n    using OrderTypes for OrderTypes.MakerOrder;\r\n    using OrderTypes for OrderTypes.TakerOrder;\r\n\r\n    //Cancel all orders\r\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\r\n    // Cancel some orders\r\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\r\n    // New currency manager address\r\n    event NewCurrencyManager(address indexed currencyManager);\r\n    // New execution manager address\r\n    event NewExecutionManager(address indexed executionManager);\r\n    // new platform transaction fee receipient address\r\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\r\n    // New royalty fee receipient address\r\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\r\n    // New NFT transfer selector\r\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\r\n\r\n    // Defaulty wetg address\r\n    address public immutable WETH;\r\n    // Defualt eip712 domain hash\r\n    address public protocolFeeRecipient;\r\n\r\n\r\n    TheCurrencyManager public currencyManager;\r\n    TheExManager public executionManager;\r\n    TheRoyaltyManager public royaltyFeeManager;\r\n    TheTransferSelector public transferSelectorNFT;\r\n\r\n\r\n    // Users' minimal nonce map\r\n    mapping(address => uint256) public userMinOrderNonce;\r\n    // User proceeds to execution or cancellation\r\n    mapping(address => mapping(uint256 => bool)) private _theUserOrderExecutedOrCancelled;\r\n\r\n    /*Royalty fee payment structure*/\r\n    event RoyaltyPayment(\r\n        address indexed collection, //collection address\r\n        uint256 indexed tokenId, //token id\r\n        address indexed royaltyRecipient, //recipient wallet address\r\n        address currency, //currency\r\n        uint256 amount//amount\r\n    );\r\n\r\n    //Ask price structure\r\n    event TakerAsk(\r\n        bytes32 orderHash,\r\n        uint256 orderNonce,\r\n        address indexed taker,\r\n        address indexed maker,\r\n        address indexed strategy,\r\n        address currency,\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount,\r\n        uint256 price\r\n    );\r\n\r\n    //Bid price structure\r\n    event TakerBid(\r\n        bytes32 orderHash,\r\n        uint256 orderNonce,\r\n        address indexed taker,\r\n        address indexed maker,\r\n        address indexed strategy,\r\n        address currency,\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 amount,\r\n        uint256 price\r\n    );\r\n\r\n    //\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014constructor function\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\r\n    // Initialize contract using the input parameters\r\n    // Including currency manager, execution manager, royalty manager, NFT transfer selector, weth address, platform transaction fee receipient\r\n    constructor(\r\n        address _currencyManager, //currency manager\r\n        address _executionManager, //execution manager\r\n        address _royaltyFeeManager, //royalty fee manager\r\n        address _WETH, //WETH address\r\n        address _protocolFeeRecipient// platform transaction fee recipient\r\n    ) {\r\n        currencyManager = TheCurrencyManager(_currencyManager);\r\n        executionManager = TheExManager(_executionManager);\r\n        royaltyFeeManager = TheRoyaltyManager(_royaltyFeeManager);\r\n        WETH = _WETH;\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n    }\r\n\r\n\r\n\r\n    //\r\n    // function matchSellerOrdersWETH\r\n    //  @Description: Match seller order with weth and eth\r\n    //  @param OrderTypes.TakerOrder\r\n    //  @param OrderTypes.MakerOrder\r\n    //  @return external\r\n    //\r\n    function matchSellerOrdersWETH(\r\n        OrderTypes.TakerOrder calldata takerBid,\r\n        OrderTypes.MakerOrder calldata makerAsk\r\n    ) external payable override nonReentrant {\r\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Error About Order Side\");\r\n        // Confirm using weth\r\n        require(makerAsk.currency == WETH, \"Currency must be WETH\");\r\n        require(msg.sender == takerBid.taker, \"Order must be the sender\");\r\n\r\n        // if the balance of eth is low then use weth\r\n        if (takerBid.price > msg.value) {\r\n            IERC20(WETH).safeTransferFrom(msg.sender, address(this), (takerBid.price - msg.value));\r\n        } else {\r\n            require(takerBid.price == msg.value, \"Msg.value is too high\");\r\n        }\r\n\r\n        //deposit weth\r\n        IWETH(WETH).deposit{value : msg.value}();\r\n\r\n        // Confirm users of offer and make\r\n        bytes32 askHash = makerAsk.hash();\r\n        _validateOrder(makerAsk, askHash);\r\n\r\n        // Confirm execution parameters\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = TheExStrategy(makerAsk.strategy)\r\n        .canExecuteSell(takerBid, makerAsk);\r\n\r\n        require(isExecutionValid, \"Strategy should be valid\");\r\n\r\n        // Update the random number status of current order to be true, avoid reentrancy\r\n        _theUserOrderExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\r\n\r\n        // transfer fund\r\n        _transferFeesAndFundsWithWETH(\r\n            makerAsk.strategy,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            makerAsk.signer,\r\n            takerBid.price,\r\n            makerAsk.minPercentageToAsk\r\n        );\r\n\r\n        // transfer nft\r\n        _transferNonFungibleToken(\r\n            makerAsk.collection,\r\n            makerAsk.signer,\r\n            takerBid.taker,\r\n            tokenId,\r\n            amount);\r\n\r\n        emit TakerBid(\r\n            askHash,\r\n            makerAsk.nonce,\r\n            takerBid.taker,\r\n            makerAsk.signer,\r\n            makerAsk.strategy,\r\n            makerAsk.currency,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            amount,\r\n            takerBid.price\r\n        );\r\n    }\r\n\r\n    //\r\n    // function matchSellerOrders\r\n    //  @Description: matchi seller order\r\n    //  @param OrderTypes.TakerOrder\r\n    //  @param OrderTypes.MakerOrder\r\n    //  @return external\r\n    //\r\n    function matchSellerOrders(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\r\n    external\r\n    override\r\n    nonReentrant\r\n    {\r\n        //Confirm the listing is valid and not a bid order\r\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Error About Order Side\");\r\n        // order must be from the bidder\r\n        require(msg.sender == takerBid.taker, \"Order must be the sender\");\r\n\r\n        //  validate signature\r\n        bytes32 askHash = makerAsk.hash();\r\n        _validateOrder(makerAsk, askHash);\r\n\r\n        //\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = TheExStrategy(makerAsk.strategy)\r\n        .canExecuteSell(takerBid, makerAsk);\r\n\r\n        // Confirm valid execution\r\n        require(isExecutionValid, \"Strategy should be valid\");\r\n\r\n        // Update the random number status of current order to be true, avoid reentrancy\r\n        _theUserOrderExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\r\n\r\n        // transfer fund\r\n        _transferFeesAndFunds(\r\n            makerAsk.strategy,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            makerAsk.currency,\r\n            msg.sender,\r\n            makerAsk.signer,\r\n            takerBid.price,\r\n            makerAsk.minPercentageToAsk\r\n        );\r\n\r\n        //transfer nft\r\n        _transferNonFungibleToken(\r\n            makerAsk.collection,\r\n            makerAsk.signer,\r\n            takerBid.taker,\r\n            tokenId,\r\n            amount);\r\n\r\n        emit TakerBid(\r\n            askHash,\r\n            makerAsk.nonce,\r\n            takerBid.taker,\r\n            makerAsk.signer,\r\n            makerAsk.strategy,\r\n            makerAsk.currency,\r\n            makerAsk.collection,\r\n            tokenId,\r\n            amount,\r\n            takerBid.price\r\n        );\r\n    }\r\n\r\n    //\r\n    // function matchesBuyerOrder\r\n    //  @Description: match buyer order\r\n    //  @param OrderTypes.TakerOrder\r\n    //  @param OrderTypes.MakerOrder\r\n    //  @return external\r\n    //\r\n    function matchesBuyerOrder(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\r\n    external\r\n    override\r\n    nonReentrant\r\n    {\r\n        // validate paramenters of both sides\r\n        // This step ensures matching seller order to buyer order\r\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \"Error About Order Side\");\r\n        // order must be from the seller\r\n        require(msg.sender == takerAsk.taker, \"Order must be the sender\");\r\n\r\n        // confirm bid is signed\r\n        bytes32 bidHash = makerBid.hash();\r\n        // confirm bid signature is valid\r\n        _validateOrder(makerBid, bidHash);\r\n\r\n        // confirm trading strategy can be effectively executed\r\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = TheExStrategy(makerBid.strategy)\r\n        .canExecuteBuy(takerAsk, makerBid);\r\n\r\n        require(isExecutionValid, \"Strategy should be valid\");\r\n\r\n        // Update the random number status of current order to be true, avoid reentrancy\r\n        _theUserOrderExecutedOrCancelled[makerBid.signer][makerBid.nonce] = true;\r\n\r\n        // transfer nft\r\n        _transferNonFungibleToken(\r\n            makerBid.collection,\r\n            msg.sender,\r\n            makerBid.signer,\r\n            tokenId,\r\n            amount);\r\n\r\n        // transfer fund\r\n        _transferFeesAndFunds(\r\n            makerBid.strategy,\r\n            makerBid.collection,\r\n            tokenId,\r\n            makerBid.currency,\r\n            makerBid.signer,\r\n            takerAsk.taker,\r\n            takerAsk.price,\r\n            takerAsk.minPercentageToAsk\r\n        );\r\n\r\n        emit TakerAsk(\r\n            bidHash,\r\n            makerBid.nonce,\r\n            takerAsk.taker,\r\n            makerBid.signer,\r\n            makerBid.strategy,\r\n            makerBid.currency,\r\n            makerBid.collection,\r\n            tokenId,\r\n            amount,\r\n            takerAsk.price\r\n        );\r\n    }\r\n\r\n    //\r\n    // function cancelAllOrdersForSender\r\n    //  @Description: \u53d6\u6d88\u6240\u6709\u7684order\r\n    //  @param uint256\r\n    //  @return external\r\n    //\r\n    function cancelAllOrdersForSender(uint256 minNonce) external {\r\n        require(minNonce > userMinOrderNonce[msg.sender], \"Cancel Order nonce cannot lower than current\");\r\n        require(minNonce < userMinOrderNonce[msg.sender] + 500000, \"Cannot cancel too many orders\");\r\n        // maintain a minimal nonce, to confirm the current order has reached the minimal nonce\r\n        userMinOrderNonce[msg.sender] = minNonce;\r\n\r\n        emit CancelAllOrders(msg.sender, minNonce);\r\n    }\r\n\r\n    //\r\n    // function cancelMultipleMakerOrders\r\n    //  @Description: cancel multiple orders\r\n    //  @param uint256[] orderNonces\r\n    //  @return external\r\n    //\r\n    function cancelMultipleMakerOrders(uint256[] calldata NonceList) external {\r\n        require(NonceList.length > 0, \"Cannot be empty Cancel list\");\r\n\r\n        for (uint256 i = 0; i < NonceList.length; i++) {\r\n            require(NonceList[i] >= userMinOrderNonce[msg.sender], \"Cancel Order nonce cannot lower than current\");\r\n            _theUserOrderExecutedOrCancelled[msg.sender][NonceList[i]] = true;\r\n        }\r\n\r\n        emit CancelMultipleOrders(msg.sender, NonceList);\r\n    }\r\n    //\r\n    // function isUserOrderNonceExecutedOrCancelled\r\n    //  @Description: Check if the current order is cancelled or was previously executed using map\r\n    //  @param address  user address\r\n    //  @param uint256  random number status of current order\r\n    //  @return external\r\n    //\r\n    function isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\r\n        //view viewing does not consume gas\r\n        return _theUserOrderExecutedOrCancelled[user][orderNonce];\r\n    }\r\n\r\n    //\r\n    // tion _transferFeesAndFunds\r\n    //  @Description: using specific erc20 method to transfer fund(platform transaction fee or other fee)\r\n    //  @param address  _strategy trading strategy address\r\n    //  @param address  _collection nft contract address\r\n    //  @param uint256  _tokenId nft if\r\n    //  @param address  _currency erc20 contract address\r\n    //  @param address  _seller seller address\r\n    //  @param address  _buyer buyer address\r\n    //  @param uint256  _price price\r\n    //  @param uint256  _minPercentageToAsk minimal percentage accepted by the seller\r\n    //  @return internal\r\n    //\r\n    function _transferFeesAndFunds(\r\n        address strategy,\r\n        address collection,\r\n        uint256 tokenId,\r\n        address currency,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minPercentageToAsk\r\n    ) internal {\r\n        // initialize final price\r\n        uint256 finalSellerAmount = amount;\r\n\r\n        //2\uff0ccalculate platform transaction fee\r\n\r\n        uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\r\n        // Confirm strategy is not null, platform transaction fee recipient is not null, platform transaction fee is not 0, before charging platform transaction fee\r\n        // If current strategy is not null, but platform transaction fee is 0, then pass\r\n        if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n            IERC20(currency).safeTransferFrom(from, protocolFeeRecipient, protocolFeeAmount);\r\n            finalSellerAmount -= protocolFeeAmount;\r\n        }\r\n\r\n\r\n        //3\u3002 calculate royalty fee\r\n\r\n        (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\r\n        .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\r\n\r\n        // Pass only when current royalty recipient exists and royalty fee is 0\r\n        if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n            IERC20(currency).safeTransferFrom(from, royaltyFeeRecipient, royaltyFeeAmount);\r\n            finalSellerAmount -= royaltyFeeAmount;\r\n\r\n            emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, currency, royaltyFeeAmount);\r\n        }\r\n\r\n        // confirm the final amount is higher than the price set by user\r\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"The fee is too high for the seller\");\r\n\r\n        //4  transfer final amount\r\n\r\n        IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\r\n\r\n    }\r\n\r\n\r\n    //\r\n    // function _transferFeesAndFundsWithWETH\r\n    //  @Description: use weth to transfer fee and fund, including different types of fee\r\n    //  @param address execution strategy address\r\n    //  @param address  collection address\r\n    //  @param uint256  tokenId\r\n    //  @param address  target wallet(seller)\r\n    //  @param uint256  amount\r\n    //  @param uint256  minimal percentage accepted by the seller\r\n    //  @return internal\r\n    //\r\n    function _transferFeesAndFundsWithWETH(\r\n        address strategy,\r\n        address collection,\r\n        uint256 tokenId,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 minPercentageToAsk\r\n    ) internal {\r\n        //1. initialize final amount\r\n        uint256 finalSellerAmount = amount;\r\n\r\n\r\n        //2\uff0ccalculate platform transaction fee\r\n        uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\r\n\r\n        // Confirm strategy is not null, platform transaction fee recipient is not null, platform transaction fee is not 0, before charging platform transaction fee\r\n        // If current strategy is not null, but platform transaction fee is 0, then pass\r\n        if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\r\n            IERC20(WETH).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\r\n            finalSellerAmount -= protocolFeeAmount;\r\n        }\r\n\r\n\r\n        //3. calculate royalty fee\r\n        (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\r\n        .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\r\n\r\n        // Pass only when current royalty recipient exists and royalty fee is 0\r\n        if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\r\n            IERC20(WETH).safeTransfer(royaltyFeeRecipient, royaltyFeeAmount);\r\n            finalSellerAmount -= royaltyFeeAmount;\r\n\r\n            emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, address(WETH), royaltyFeeAmount);\r\n        }\r\n\r\n\r\n        // confirm the final amount is higher than the price set by user\r\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"The fee is too high for the seller\");\r\n\r\n        //4  transfer final amount\r\n        IERC20(WETH).safeTransfer(to, finalSellerAmount);\r\n\r\n    }\r\n\r\n\r\n    //\r\n    // function _transferNonFungibleToken\r\n    //  @Description: transfer nft\r\n    //  @param address  collection address\r\n    //  @param address  source address\r\n    //  @param address  target address\r\n    //  @param uint256  tokenId\r\n    //  @param uint256  amount\r\n    //  @return internal\r\n    //\r\n    function _transferNonFungibleToken(\r\n        address collection,\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        uint256 amount\r\n    ) internal {\r\n        //  check contract manager in initialization\r\n        address Manager = transferSelectorNFT.checkTransferManagerForToken(collection);\r\n\r\n        // ensure manager contract exists\r\n        require(Manager != address(0), \"Can't fount transfer manager\");\r\n\r\n        // If one is found, transfer the token\r\n        TheTransferManager(Manager).transferNonFungibleToken(collection, from, to, tokenId, amount);\r\n    }\r\n\r\n    //\r\n    // function _calculateProtocolFee\r\n    //  @Description:  calculate platform transaction fee according to strategy\r\n    //  @param address  execution stratgey address\r\n    //  @param uint256  trading amount\r\n    //  @return internal\r\n    //\r\n    function _calculateProtocolFee(address theStrategy, uint256 amount) internal view returns (uint256) {\r\n        uint256 protocolFee = TheExStrategy(theStrategy).viewProtocolFee();\r\n        return (protocolFee * amount) / 10000;\r\n    }\r\n\r\n    //\r\n    // function _validateOrder\r\n    //  @Description: validate using order infor\r\n    //  @param OrderTypes.MakerOrder memory order order information\r\n    //  @param bytes32 hash order hash\r\n    //  @return internal\r\n    //\r\n    function _validateOrder(OrderTypes.MakerOrder calldata Make, bytes32 Hash) internal view {\r\n        // Verify whether order nonce has expired\r\n        require(\r\n        // check if the order is cancelled or timeout\r\n            (!_theUserOrderExecutedOrCancelled[Make.signer][Make.nonce]) &&\r\n            (Make.nonce >= userMinOrderNonce[Make.signer]),\r\n            \"Order: Matching order expired\"\r\n        );\r\n\r\n        //order signature cannot be null\r\n        require(Make.signer != address(0), \"The Order signer cannot be the zero address\");\r\n\r\n        //confirm if amount is larger than 0\r\n        require(Make.amount > 0, \"The order amount should be greater than 0\");\r\n\r\n        bytes32 Domain = keccak256(\r\n            abi.encode(\r\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\r\n            // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\r\n                0x2e3445393f211d11d7f88d325bc26ce78976b4decd39029feb202d9b409fc3c5,\r\n            // keccak256(\"UnemetaMarket\")\r\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6,\r\n            // keccak256(bytes(\"1\")) for versionId = 1\r\n                block.chainid,\r\n                address(this)\r\n            )\r\n        );\r\n\r\n        //validate signature\r\n        //because the eip712 signature stored in the server is used, must restore using teh same structure\r\n        //ensures signature is valid\r\n        require(\r\n            SignatureChecker.\r\n            verify(\r\n                Hash, //hash\r\n                Make.signer, // listing signer\r\n                Make.v, //signature parameter, from eip712 standard\r\n                Make.r,\r\n                Make.s,\r\n                Domain\r\n            ),\r\n            \"Signature: Invalid\"\r\n        );\r\n\r\n        // confirm currency is whitelisted\r\n        require(currencyManager.isCurrencyWhitelisted(Make.currency), \" Not in Currency whitelist\");\r\n\r\n        // confirm trading strategy is whitelisted and can execute correctly\r\n        require(executionManager.isStrategyWhitelisted(Make.strategy), \" Not in Strategy whitelist\");\r\n    }\r\n\r\n\r\n\r\n    //\r\n    // function updateCurrencyManager\r\n    //  @Description: Update a currency manager\r\n    //  @param address\r\n    //  @return external\r\n    //\r\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\r\n        require(_currencyManager != address(0), \"Cannot update to a null address\");\r\n        currencyManager = TheCurrencyManager(_currencyManager);\r\n        emit NewCurrencyManager(_currencyManager);\r\n    }\r\n\r\n    //\r\n    // function updateExecutionManager\r\n    //  @Description: Update an execution manager\r\n    //  @param address\r\n    //  @return external\r\n    //\r\n    function updateExecutionManager(address _executionManager) external onlyOwner {\r\n        require(_executionManager != address(0), \"Cannot update to a null address\");\r\n        executionManager = TheExManager(_executionManager);\r\n        emit NewExecutionManager(_executionManager);\r\n    }\r\n\r\n    //\r\n    // function updateProtocolFeeRecipient\r\n    //  @Description: Update platform transaction fee recipient\r\n    //  @param address\r\n    //  @return external\r\n    //\r\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\r\n        protocolFeeRecipient = _protocolFeeRecipient;\r\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\r\n    }\r\n\r\n    //\r\n    // function updateRoyaltyFeeManager\r\n    //  @Description: update royalty fee manager\r\n    //  @param address\r\n    //  @return external\r\n    //\r\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\r\n        require(_royaltyFeeManager != address(0), \"Cannot update to a null address\");\r\n        royaltyFeeManager = TheRoyaltyManager(_royaltyFeeManager);\r\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\r\n    }\r\n\r\n    //\r\n    // function updateTransferSelectorNFT\r\n    //  @Description: update transfer manager\r\n    //  @param address\r\n    //  @return external\r\n    //\r\n    function updateTransferSelectorNFT(address _transferSelectorNFT) external onlyOwner {\r\n        require(_transferSelectorNFT != address(0), \"Cannot update to a null address\");\r\n        transferSelectorNFT = TheTransferSelector(_transferSelectorNFT);\r\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinNonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currencyManager\",\"type\":\"address\"}],\"name\":\"NewCurrencyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executionManager\",\"type\":\"address\"}],\"name\":\"NewExecutionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"NewRoyaltyFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"NewTransferSelectorNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerAsk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce\",\"type\":\"uint256\"}],\"name\":\"cancelAllOrdersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"NonceList\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleMakerOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract TheCurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionManager\",\"outputs\":[{\"internalType\":\"contract TheExManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"isUserOrderNonceExecutedOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchSellerOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchSellerOrdersWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"matchesBuyerOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeManager\",\"outputs\":[{\"internalType\":\"contract TheRoyaltyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSelectorNFT\",\"outputs\":[{\"internalType\":\"contract TheTransferSelector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"}],\"name\":\"updateExecutionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"updateTransferSelectorNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinOrderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnemetaMarket", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "000000000000000000000000f422d09058be2de34817c8b78dbc9f76a30252640000000000000000000000004cc7f82e10e6fb06751ef2736d92f88192631cec000000000000000000000000976d52549e572ca2895d16622acbbf317691311b000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000080172b72a4516d5f02dd1205bbcf3d5461591437", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0f3a262c193bb83a03f18900b33eb5a5db062617935a6292671747db8af805be"}