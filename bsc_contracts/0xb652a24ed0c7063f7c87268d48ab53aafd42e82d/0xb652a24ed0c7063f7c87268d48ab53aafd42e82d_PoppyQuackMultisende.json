{"SourceCode": "/**\r\n * @title PoppyQuackMultisender\r\n * @dev Smart contract created by PoppyQuack from ParaQuack Meme Token Community, a meme-powered DeFi project.\r\n * This contract allows the multisending of BNB and tokens to multiple addresses, while providing ownership management.\r\n *\r\n * Our motto: \"Never give up!\" embodies our commitment to providing innovative solutions and services in the crypto space.\r\n *\r\n * Visit our website at https://paraquack.com to learn more about our community and projects.\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ncontract PoppyQuackMultisender {\r\n    address public owner;\r\n\r\n    event BNBReceived(address indexed sender, uint256 amount);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid new owner address\");\r\n        owner = newOwner;\r\n    }\r\n\r\n    function multisendToken(address _tokenAddr, address[] calldata _to, uint256[] calldata _value) public returns (bool success) {\r\n        require(_to.length == _value.length, \"Address and value arrays must have the same length\");\r\n        require(_to.length <= 1000, \"Too many recipients in a single transaction\");\r\n\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            require(Token(_tokenAddr).transfer(_to[i], _value[i]), \"Token transfer failed\");\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function multisendBNB(address[] calldata _to, uint256[] calldata _value) public onlyOwner {\r\n        require(_to.length == _value.length, \"Address and value arrays must have the same length\");\r\n        require(_to.length <= 1000, \"Too many recipients in a single transaction\");\r\n\r\n        for (uint256 i = 0; i < _to.length; i++) {\r\n            payable(_to[i]).transfer(_value[i]);\r\n        }\r\n    }\r\n\r\n    receive() external payable {\r\n        emit BNBReceived(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BNBReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisendBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PoppyQuackMultisender", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d7672d032b117eba06865ec72429650de48911b43b0452720bb5f3f71bd1660"}