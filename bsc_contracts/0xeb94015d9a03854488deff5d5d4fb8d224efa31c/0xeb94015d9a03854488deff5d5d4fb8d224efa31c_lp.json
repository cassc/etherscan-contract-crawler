{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-05-17\r\n*/\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.5.0;\r\ninterface WERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function totalSupply() external view returns (uint);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a+b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, 'sub');\r\n        return a-b;\r\n    }   \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        \r\n        return a*b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, 'div');\r\n        return (a - (a % b)) / b;\r\n    }    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, 'mod');\r\n        return a % b;\r\n    }\r\n}\r\ncontract lp{\r\n    using SafeMath for uint256;    \r\n    address owner;\r\n    address sendAddress;\r\n\r\n    IPancakePair public payAddress; //\u8d28\u62bc\u5e01\r\n    WERC20 public outputAddress; //\u4ea7\u51fa\u5e01\r\n\r\n    struct order {\r\n        uint256 id;\r\n        uint256 num;\r\n        uint256 status;  //1 \u91ca\u653e 2 \u53ef\u9886\u53d6  3\u5df2\u9886\u53d6\r\n        uint256 toReceive; //\u53ef\u9886\u53d6\r\n    }\r\n    uint256 private lock = 0; \r\n    mapping (address => uint256) public ToReceive;  //\u5f85\u9886\u53d6\r\n\r\n    mapping (address => order[]) public LockList;  //\u8d28\u62bc\u8bb0\u5f55\r\n\r\n\r\n    event updateLockUpTime(uint indexed id, uint num, uint status);\r\n    event Buy(address indexed sender, uint256 id, uint256 num, uint256 key , uint256 timestamp); \r\n    event Out(address indexed sender, uint256 key , uint256 timestamp); \r\n    constructor(IPancakePair _payAddress, WERC20 _outputAddress) {\r\n\r\n        owner = msg.sender; //\u53d1\u5e01\u8005\r\n        payAddress = _payAddress;\r\n        outputAddress = _outputAddress;\r\n    }  \r\n    modifier checkOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier checkSend() {\r\n        require(msg.sender == sendAddress);\r\n        _;\r\n    }\r\n    modifier checkLock() {\r\n        require(lock == 0);\r\n        lock = 1;\r\n        _;\r\n        lock = 0;\r\n    }\r\n    //\u8d28\u62bc\r\n    function buy(uint256 id, uint256 _num) checkLock public{\r\n        require(id > 0);\r\n        require(_num > 0);\r\n        (bool success, bytes memory returndata) = address(payAddress).call{ value: 0 }(abi.encodeWithSelector(payAddress.transferFrom.selector, msg.sender,address(this), _num));  \r\n        if (!success) {\r\n            if (returndata.length > 0) {               \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert('no error');\r\n            }\r\n        } \r\n        uint key = LockList[msg.sender].length+1;\r\n        LockList[msg.sender].push(order(key,_num,1,0));\r\n        emit Buy(msg.sender,id,_num, key, block.timestamp);\r\n    }\r\n    //\u9886\u53d6\u8d28\u62bc\r\n    function out(uint256 id, address to) public{\r\n        uint256 _index = id.sub(1); \r\n        uint256 status = LockList[msg.sender][_index].status;\r\n        require(status == 2, \"Do not pick up\");\r\n        uint256 _num = LockList[msg.sender][_index].toReceive;\r\n        (bool success, bytes memory returndata) = address(payAddress).call{ value: 0 }(abi.encodeWithSelector(payAddress.transfer.selector, to, _num));  \r\n        if (!success) {\r\n            if (returndata.length > 0) {               \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert('no error');\r\n            }\r\n        } \r\n        LockList[msg.sender][_index].status = 3;\r\n        emit Out(msg.sender,id, block.timestamp);\r\n    }\r\n    //\u7528\u6237\u9886\u53d6\r\n    function receiveReward() public {\r\n        uint256 num = ToReceive[msg.sender];\r\n        require(num > 0 ,'no bfs'); \r\n        (bool success, bytes memory returndata) = address(outputAddress).call{ value: 0 }(abi.encodeWithSelector(outputAddress.transfer.selector, msg.sender, num));  \r\n        if (!success) {\r\n            if (returndata.length > 0) {               \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert('no error');\r\n            }\r\n        } \r\n        ToReceive[msg.sender] = 0;\r\n    }\r\n    //\u63d0\u73b0\u5408\u7ea6\u4ee3\u5e01\r\n    function withdraw(WERC20 erc20address, uint256 num, address _to) checkOwner public {\r\n        (bool success, bytes memory returndata) = address(erc20address).call{ value: 0 }(abi.encodeWithSelector(erc20address.transfer.selector, _to, num));  \r\n        if (!success) {\r\n            if (returndata.length > 0) {               \r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert('no error');\r\n            }\r\n        } \r\n    }\r\n    //\u901a\u77e5\u4f63\u91d1\r\n    function updateWaitReceive(address _u,uint _a, uint256 _t) checkSend public {\r\n        if(_t == 1){\r\n            ToReceive[_u] = ToReceive[_u].add(_a);\r\n        }else if(_t == 2){\r\n            ToReceive[_u] = ToReceive[_u].sub(_a);\r\n        }\r\n    }\r\n    //\u901a\u77e5lp\r\n    function updateWaitReceiveLp(address _a, uint _key, uint _s, uint _n1) checkSend public {\r\n        uint256 _index = _key.sub(1); \r\n        LockList[_a][_index].status = _s;\r\n        LockList[_a][_index].toReceive = _n1;\r\n    }\r\n    //\u4fee\u6539\u53d1\u5e01\u8005\r\n    function setOwner(address _a) checkOwner public {\r\n        owner = _a;\r\n    }\r\n    function setSendAddress(address _a) checkOwner public {\r\n        sendAddress = _a;\r\n    }\r\n    function setOutputAddress(WERC20 _a) checkOwner public {\r\n        outputAddress = _a;\r\n    }\r\n    function setPayAddress(IPancakePair _a) checkOwner public {\r\n        payAddress = _a;\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"_payAddress\",\"type\":\"address\"},{\"internalType\":\"contract WERC20\",\"name\":\"_outputAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Out\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"updateLockUpTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toReceive\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ToReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"out\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputAddress\",\"outputs\":[{\"internalType\":\"contract WERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payAddress\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WERC20\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setOutputAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setPayAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setSendAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_u\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"updateWaitReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_n1\",\"type\":\"uint256\"}],\"name\":\"updateWaitReceiveLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WERC20\",\"name\":\"erc20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "lp", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009af9796ffd974461f27898adc04c0dc6f291a36b0000000000000000000000009af9796ffd974461f27898adc04c0dc6f291a36b", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a883a868cc1c856662d9034fadbdcb28cdacfd3f691bfdd848124b873757d38d"}