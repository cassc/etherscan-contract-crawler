{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LocalCoinSwapBNBEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./libs/SafeERC20.sol\\\";\\nimport \\\"./libs/IERC20.sol\\\";\\n\\ncontract LocalCoinSwapBNBEscrow {\\n  using SafeERC20 for IERC20;\\n\\n  address public arbitrator;\\n  address public owner;\\n  address public relayer;\\n\\n  struct Escrow {\\n    bool exists;\\n    uint128 relayerGasSpent;\\n  }\\n\\n  mapping(bytes32 => Escrow) public escrows;\\n  uint256 public collectedFees;\\n\\n  /***********************\\n    +     Instructions     +\\n    ***********************/\\n\\n  uint8 private constant RELEASE_ESCROW = 0x01;\\n  uint8 private constant BUYER_CANCELS = 0x02;\\n  uint8 private constant RESOLVE_DISPUTE = 0x03;\\n\\n  /***********************\\n    +       Events        +\\n    ***********************/\\n\\n  event Created(bytes32 indexed tradeHash);\\n  event Cancelled(bytes32 indexed tradeHash, uint128 relayerGasSpent);\\n  event Released(bytes32 indexed tradeHash, uint128 relayerGasSpent);\\n  event DisputeResolved(bytes32 indexed tradeHash, uint128 relayerGasSpent);\\n\\n  constructor(address initialAddress) payable {\\n    owner = initialAddress;\\n    arbitrator = initialAddress;\\n    relayer = initialAddress;\\n  }\\n\\n  /***********************\\n    +     Open Escrow     +\\n    ***********************/\\n\\n  function createEscrow(\\n    bytes32 _tradeHash,\\n    uint256 _value,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external payable {\\n    require(!escrows[_tradeHash].exists, \\\"Trade already exists\\\");\\n    // To account for fees spent by relayer when releasing\\n    require(_value > 500000000000000, \\\"Escrow value too small\\\");\\n    // Check transaction value against signed _value and make sure is not 0\\n    require(msg.value == _value && msg.value > 0, \\\"Incorrect ether sent\\\");\\n\\n    bytes32 _invitationHash = keccak256(abi.encodePacked(_tradeHash));\\n    require(\\n      recoverAddress(_invitationHash, _v, _r, _s) == relayer,\\n      \\\"Signature not from relayer\\\"\\n    );\\n\\n    escrows[_tradeHash] = Escrow(true, 0);\\n    emit Created(_tradeHash);\\n  }\\n\\n  /***********************\\n    +   Complete Escrow    +\\n    ***********************/\\n\\n  function release(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) external returns (bool) {\\n    require(msg.sender == _seller, \\\"Must be seller\\\");\\n    return doRelease(_tradeID, _seller, _buyer, _value, _fee);\\n  }\\n\\n  uint128 constant GAS_DO_RELEASE = 100000;\\n\\n  function doRelease(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private returns (bool) {\\n    Escrow memory _escrow;\\n    bytes32 _tradeHash;\\n    (_escrow, _tradeHash) = getEscrowAndHash(\\n      _tradeID,\\n      _seller,\\n      _buyer,\\n      _value,\\n      _fee\\n    );\\n    if (!_escrow.exists) return false;\\n    uint128 _txFees = _escrow.relayerGasSpent +\\n      (msg.sender == relayer ? GAS_DO_RELEASE * uint128(tx.gasprice) : 0);\\n    delete escrows[_tradeHash];\\n    transferMinusFees(_buyer, _value, _txFees, _fee);\\n    emit Released(_tradeHash, _txFees);\\n    return true;\\n  }\\n\\n  uint128 constant GAS_RESOLVE_DISPUTE = 100000;\\n\\n  function resolveDispute(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s,\\n    uint8 _buyerPercent\\n  ) external onlyArbitrator {\\n    address _signature = recoverAddress(\\n      keccak256(abi.encodePacked(_tradeID, RESOLVE_DISPUTE)),\\n      _v,\\n      _r,\\n      _s\\n    );\\n    require(\\n      _signature == _buyer || _signature == _seller,\\n      \\\"Must be buyer or seller\\\"\\n    );\\n\\n    Escrow memory _escrow;\\n    bytes32 _tradeHash;\\n    (_escrow, _tradeHash) = getEscrowAndHash(\\n      _tradeID,\\n      _seller,\\n      _buyer,\\n      _value,\\n      _fee\\n    );\\n    require(_escrow.exists, \\\"Escrow does not exist\\\");\\n    require(_buyerPercent <= 100, \\\"_buyerPercent invalid\\\");\\n\\n    uint128 _disputeTxFees = (GAS_RESOLVE_DISPUTE * uint128(tx.gasprice));\\n    uint128 _txFees = _escrow.relayerGasSpent + _disputeTxFees;\\n    require(_value - _txFees <= _value, \\\"Overflow error\\\"); // Prevent underflow\\n    collectedFees += _txFees;\\n\\n    _escrow.relayerGasSpent += _disputeTxFees;\\n\\n    delete escrows[_tradeHash];\\n    emit DisputeResolved(_tradeHash, _txFees);\\n    if (_buyerPercent > 0) {\\n      // If dispute goes to buyer take the fee\\n      uint256 _escrowFees = ((_value * _fee) / 10000);\\n      uint256 buyerAmount = (_value * _buyerPercent) / 100 - _escrowFees;\\n      require(buyerAmount > 0, \\\"Buyer amount negative\\\"); // Prevent underflow\\n      collectedFees += _escrowFees;\\n\\n      _buyer.transfer(buyerAmount);\\n    }\\n    if (_buyerPercent < 100) {\\n      _seller.transfer(((_value - _txFees) * (100 - _buyerPercent)) / 100);\\n    }\\n  }\\n\\n  function buyerCancel(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) external returns (bool) {\\n    require(msg.sender == _buyer, \\\"Must be buyer\\\");\\n    return doBuyerCancel(_tradeID, _seller, _buyer, _value, _fee);\\n  }\\n\\n  uint128 constant GAS_BUYER_CANCELS = 100000;\\n\\n  function increaseGasSpent(bytes32 _tradeHash, uint128 _gas) private {\\n    escrows[_tradeHash].relayerGasSpent += _gas * uint128(tx.gasprice);\\n  }\\n\\n  function doBuyerCancel(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private returns (bool) {\\n    Escrow memory _escrow;\\n    bytes32 _tradeHash;\\n    (_escrow, _tradeHash) = getEscrowAndHash(\\n      _tradeID,\\n      _seller,\\n      _buyer,\\n      _value,\\n      _fee\\n    );\\n    require(_escrow.exists, \\\"Escrow does not exist\\\");\\n    if (!_escrow.exists) {\\n      return false;\\n    }\\n    uint128 _txFees = _escrow.relayerGasSpent +\\n      (msg.sender == relayer ? GAS_BUYER_CANCELS * uint128(tx.gasprice) : 0);\\n    delete escrows[_tradeHash];\\n    emit Cancelled(_tradeHash, _txFees);\\n    transferMinusFees(_seller, _value, _txFees, 0);\\n    return true;\\n  }\\n\\n  /***********************\\n    +        Relays        +\\n    ***********************/\\n\\n  function batchRelay(\\n    bytes16[] memory _tradeID,\\n    address payable[] memory _seller,\\n    address payable[] memory _buyer,\\n    uint256[] memory _value,\\n    uint16[] memory _fee,\\n    uint128[] memory _maximumGasPrice,\\n    uint8[] memory _v,\\n    bytes32[] memory _r,\\n    bytes32[] memory _s,\\n    uint8[] memory _instructionByte\\n  ) public returns (bool[] memory) {\\n    bool[] memory _results = new bool[](_tradeID.length);\\n    for (uint8 i = 0; i < _tradeID.length; i++) {\\n      _results[i] = relay(\\n        _tradeID[i],\\n        _seller[i],\\n        _buyer[i],\\n        _value[i],\\n        _fee[i],\\n        _maximumGasPrice[i],\\n        _v[i],\\n        _r[i],\\n        _s[i],\\n        _instructionByte[i]\\n      );\\n    }\\n    return _results;\\n  }\\n\\n  function relay(\\n    bytes16 _tradeID,\\n    address payable _seller,\\n    address payable _buyer,\\n    uint256 _value,\\n    uint16 _fee,\\n    uint128 _maximumGasPrice,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s,\\n    uint8 _instructionByte\\n  ) public returns (bool) {\\n    address _relayedSender = getRelayedSender(\\n      _tradeID,\\n      _instructionByte,\\n      _maximumGasPrice,\\n      _v,\\n      _r,\\n      _s\\n    );\\n    if (_relayedSender == _buyer) {\\n      if (_instructionByte == BUYER_CANCELS) {\\n        return doBuyerCancel(_tradeID, _seller, _buyer, _value, _fee);\\n      }\\n    } else if (_relayedSender == _seller) {\\n      if (_instructionByte == RELEASE_ESCROW) {\\n        return doRelease(_tradeID, _seller, _buyer, _value, _fee);\\n      }\\n    } else {\\n      require(msg.sender == _seller, \\\"Unrecognised party\\\");\\n      return false;\\n    }\\n    return false;\\n  }\\n\\n  /// @notice Transfer the value of an escrow, minus the fees, minus the gas costs incurred by relay\\n  function transferMinusFees(\\n    address payable _to,\\n    uint256 _value,\\n    uint128 _totalRelayerGasSpent,\\n    uint16 _fee\\n  ) private {\\n    uint256 _totalFees = ((_value * _fee) / 10000) + _totalRelayerGasSpent;\\n    require(_value - _totalFees > 0, \\\"Negative transfer value\\\");\\n    // Add fees to the pot for localcoinswap to withdraw\\n    collectedFees += _totalFees;\\n    _to.transfer(_value - _totalFees);\\n  }\\n\\n  function getRelayedSender(\\n    bytes16 _tradeID,\\n    uint8 _instructionByte,\\n    uint128 _maximumGasPrice,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) private pure returns (address) {\\n    bytes32 _hash = keccak256(\\n      abi.encodePacked(_tradeID, _instructionByte, _maximumGasPrice)\\n    );\\n    return recoverAddress(_hash, _v, _r, _s);\\n  }\\n\\n  function getEscrowAndHash(\\n    bytes16 _tradeID,\\n    address _seller,\\n    address _buyer,\\n    uint256 _value,\\n    uint16 _fee\\n  ) private view returns (Escrow storage, bytes32) {\\n    bytes32 _tradeHash = keccak256(\\n      abi.encodePacked(_tradeID, _seller, _buyer, _value, _fee)\\n    );\\n    return (escrows[_tradeHash], _tradeHash);\\n  }\\n\\n  function recoverAddress(\\n    bytes32 _h,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) private pure returns (address) {\\n    bytes memory _prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n    bytes32 _prefixedHash = keccak256(abi.encodePacked(_prefix, _h));\\n    return ecrecover(_prefixedHash, _v, _r, _s);\\n  }\\n\\n  /// @notice Withdraw fees collected by the contract. Only the owner can call this.\\n  /// @param _to Address to withdraw fees in to\\n  /// @param _amount Amount to withdraw\\n  function withdrawFees(address payable _to, uint256 _amount)\\n    external\\n    onlyOwner\\n  {\\n    // This check also prevents underflow\\n    require(_amount <= collectedFees, \\\"Amount is higher than amount available\\\");\\n    collectedFees -= _amount;\\n    _to.transfer(_amount);\\n  }\\n\\n  /// @notice Allows the owner to withdraw stuck ERC20 tokens.\\n  function transferToken(\\n    IERC20 TokenContract,\\n    address _transferTo,\\n    uint256 _value\\n  ) external onlyOwner {\\n    TokenContract.transfer(_transferTo, _value);\\n  }\\n\\n  /// @notice Allows the owner to withdraw stuck ERC20 tokens.\\n  function transferTokenFrom(\\n    IERC20 TokenContract,\\n    address _transferTo,\\n    address _transferFrom,\\n    uint256 _value\\n  ) external onlyOwner {\\n    TokenContract.transferFrom(_transferTo, _transferFrom, _value);\\n  }\\n\\n  /// @notice Allows the owner to withdraw stuck ERC20 tokens.\\n  function approveToken(\\n    IERC20 TokenContract,\\n    address _spender,\\n    uint256 _value\\n  ) external onlyOwner {\\n    TokenContract.approve(_spender, _value);\\n  }\\n\\n  /***********************\\n    + Staff and Management +\\n    ***********************/\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Only the owner can do this\\\");\\n    _;\\n  }\\n\\n  modifier onlyArbitrator() {\\n    require(msg.sender == arbitrator, \\\"Only the arbitrator can do this\\\");\\n    _;\\n  }\\n\\n  function setArbitrator(address _newArbitrator) external onlyOwner {\\n    arbitrator = _newArbitrator;\\n  }\\n\\n  function setOwner(address _newOwner) external onlyOwner {\\n    owner = _newOwner;\\n  }\\n\\n  function setRelayer(address _newRelayer) external onlyOwner {\\n    relayer = _newRelayer;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(\\n    IERC20 token,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transfer.selector, to, value)\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    IERC20 token,\\n    address from,\\n    address to,\\n    uint256 value\\n  ) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, value)\\n    );\\n  }\\n\\n  function safeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(\\n        oldAllowance >= value,\\n        \\\"SafeERC20: decreased allowance below zero\\\"\\n      );\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(\\n        token,\\n        abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(\\n      data,\\n      \\\"SafeERC20: low-level call failed\\\"\\n    );\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(\\n        abi.decode(returndata, (bool)),\\n        \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n      );\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(\\n      success,\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return\\n      functionCallWithValue(\\n        target,\\n        data,\\n        value,\\n        \\\"Address: low-level call with value failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(\\n      address(this).balance >= value,\\n      \\\"Address: insufficient balance for call\\\"\\n    );\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    return\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data)\\n    internal\\n    returns (bytes memory)\\n  {\\n    return\\n      functionDelegateCall(\\n        target,\\n        data,\\n        \\\"Address: low-level delegate call failed\\\"\\n      );\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"name\":\"Cancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"TokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"_tradeID\",\"type\":\"bytes16[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_seller\",\"type\":\"address[]\"},{\"internalType\":\"address payable[]\",\"name\":\"_buyer\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_fee\",\"type\":\"uint16[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_maximumGasPrice\",\"type\":\"uint128[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_instructionByte\",\"type\":\"uint8[]\"}],\"name\":\"batchRelay\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"buyerCancel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tradeHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"createEscrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"relayerGasSpent\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_maximumGasPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_instructionByte\",\"type\":\"uint8\"}],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_tradeID\",\"type\":\"bytes16\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_buyerPercent\",\"type\":\"uint8\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newArbitrator\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRelayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"TokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"TokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_transferFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LocalCoinSwapBNBEscrow", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000aa3a5f64890a7018603c94e59fb92fd25c118db8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}