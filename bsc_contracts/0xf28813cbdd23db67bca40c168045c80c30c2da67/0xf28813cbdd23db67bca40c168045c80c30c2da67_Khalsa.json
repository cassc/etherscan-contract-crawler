{"SourceCode": "//SPDX-License-Identifier: Business Source License (BSL 1.1)\r\n\r\n// submitted on 24/09/2023\r\n\r\npragma solidity >=0.5.0 <0.8.21;\r\n\r\nlibrary SafeMath{\r\n     \r\n     function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n     \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n contract owned {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"token: Required Owner !\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require (newOwner != address(0),\"token New Owner cannot be zero address\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient {  function receiveApproval(address _from, uint256 _value, address _token, bytes calldata  _extraData) external ; }\r\n\r\ncontract KhalsaContract {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n  \r\n    uint256 public totalSupply;\r\n\r\n   \r\n\r\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ){\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  \r\n        balanceOf[msg.sender] = totalSupply;                \r\n        name = tokenName;                                \r\n        symbol = tokenSymbol;                               \r\n    }\r\n   \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) private _allowance;\r\n    mapping (address => bool) public LockList;\r\n    mapping (address => uint256) public LockedTokens;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        uint256 stage;\r\n        \r\n        require(_from != address(0), \"token: transfer from the zero address\");\r\n        require(_to != address(0), \"token: transfer to the zero address\");       \r\n\r\n        require (LockList[msg.sender] == false,\"token: Caller Locked !\");          \r\n        require (LockList[_from] == false, \"token: Sender Locked !\");\r\n        require (LockList[_to] == false,\"token: Receipient Locked !\");\r\n\r\n       \r\n        stage=balanceOf[_from].sub(_value, \"token: transfer amount exceeds balance\");\r\n        require (stage >= LockedTokens[_from],\"token: transfer amount exceeds Senders Locked Amount\");\r\n        \r\n       \r\n        balanceOf[_from]=stage;\r\n        balanceOf[_to]=balanceOf[_to].add(_value,\"token: Addition overflow\");\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n    }\r\n    \r\n    function _approve(address owner, address _spender, uint256 amount) internal {\r\n        require(owner != address(0), \"token: approve from the zero address\");\r\n        require(_spender != address(0), \"token: approve to the zero address\");\r\n\r\n        _allowance[owner][_spender] = amount;\r\n        emit Approval(owner, _spender, amount);\r\n    }\r\n\r\n   \r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address Account, uint256 _value) public returns (bool success) {\r\n        require (LockList[msg.sender] == false,\"token: User Locked !\");    \r\n        require (LockList[Account] == false,\"token: Owner Locked !\");    \r\n        uint256 stage;\r\n        require(Account != address(0), \"token: Burn from the zero address\");\r\n        \r\n        \r\n        _approve(Account, msg.sender, _allowance[Account][msg.sender].sub(_value,\"token: burn amount exceeds allowance\"));\r\n        \r\n       \r\n        stage=balanceOf[Account].sub(_value,\"token: Transfer amount exceeds allowance\");\r\n        require(stage>=LockedTokens[Account],\"token: Burn amount exceeds accounts locked amount\");\r\n        balanceOf[Account] =stage ;            \r\n        \r\n        totalSupply=totalSupply.sub(_value,\"token: Burn Amount exceeds totalSupply\");\r\n       \r\n        emit Burn(Account, _value);\r\n        emit Transfer(Account, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns(bool){\r\n        require (LockList[msg.sender] == false,\"token: User Locked !\");    \r\n        \r\n        uint256 stage;\r\n        stage=balanceOf[msg.sender].sub(_value, \"token: transfer amount exceeds balance\");\r\n        require (stage >= LockedTokens[msg.sender],\"token: transfer amount exceeds Senders Locked Amount\");\r\n        \r\n        balanceOf[msg.sender]=balanceOf[msg.sender].sub(_value,\"token: Burn amount exceeds balance.\");\r\n        totalSupply=totalSupply.sub(_value,\"token: Burn amount exceeds total supply\");\r\n        \r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n     \r\n    \r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        _transfer(_from, _to, _value);\r\n        _approve(_from,msg.sender,_allowance[_from][msg.sender].sub(_value,\"token: transfer amount exceeds allowance\"));\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function allowance(address _owner,address _spender) public view returns(uint256){\r\n        return _allowance[_owner][_spender];\r\n    }\r\n   \r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        uint256 unapprovbal;\r\n\r\n        unapprovbal=balanceOf[msg.sender].sub(_value,\"token: Allowance exceeds balance of approver\");\r\n        require(unapprovbal>=LockedTokens[msg.sender],\"token: Approval amount exceeds locked amount \");\r\n       \r\n       \r\n        _allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Khalsa is owned, KhalsaContract{\r\n\r\n\r\n    constructor() KhalsaContract(\r\n        100000000 * 1 ** uint256(decimals),\"Khalsa World\",\"KHALSA\") \r\n        {\r\n    }\r\n   \r\n    function UserLock(address Account, bool mode) onlyOwner public {\r\n        LockList[Account] = mode;\r\n    }\r\n    \r\n   function LockTokens(address Account, uint256 amount) onlyOwner public{\r\n       LockedTokens[Account]=amount;\r\n   }\r\n   \r\n    function UnLockTokens(address Account) onlyOwner public{\r\n       LockedTokens[Account]=0;\r\n   }\r\n\r\n   \r\n   \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"LockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"}],\"name\":\"UnLockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"UserLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Khalsa", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ed4102797f168436a413f38f9ab2da1f6964bb247d50eb4d3d4d078425a68e4"}