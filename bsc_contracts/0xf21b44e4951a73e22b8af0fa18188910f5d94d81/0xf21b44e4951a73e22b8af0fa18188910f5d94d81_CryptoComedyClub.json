{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * @author Brewlabs\r\n * This contract has been developed by Brewlabs.info\r\n */\r\n\r\npragma solidity 0.8.13;\r\n\r\ninterface IERC20 {\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount)\r\n\texternal\r\n\treturns (bool);\r\n\r\n\tfunction allowance(address owner, address spender)\r\n\texternal\r\n\tview\r\n\treturns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(\r\n\t\taddress indexed owner,\r\n\t\taddress indexed spender,\r\n\t\tuint256 value\r\n\t);\r\n}\r\n\r\ninterface IFactory {\r\n\tfunction createPair(address tokenA, address tokenB)\r\n\texternal\r\n\treturns (address pair);\r\n\r\n\tfunction getPair(address tokenA, address tokenB)\r\n\texternal\r\n\tview\r\n\treturns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint256 amountTokenDesired,\r\n\t\tuint256 amountTokenMin,\r\n\t\tuint256 amountETHMin,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t)\r\n\texternal\r\n\tpayable\r\n\treturns (\r\n\t\tuint256 amountToken,\r\n\t\tuint256 amountETH,\r\n\t\tuint256 liquidity\r\n\t);\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint256 amountIn,\r\n\t\tuint256 amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint256 deadline\r\n\t) external;\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\ninterface DividendPayingTokenInterface {\r\n\tfunction dividendOf(address _owner) external view returns(uint256);\r\n\tfunction withdrawDividend() external;\r\n\tevent DividendsDistributed(\r\n\t\taddress indexed from,\r\n\t\tuint256 weiAmount\r\n\t);\r\n\tevent DividendWithdrawn(\r\n\t\taddress indexed to,\r\n\t\tuint256 weiAmount\r\n\t);\r\n}\r\n\r\ninterface DividendPayingTokenOptionalInterface {\r\n\tfunction withdrawableDividendOf(address _owner) external view returns(uint256);\r\n\tfunction withdrawnDividendOf(address _owner) external view returns(uint256);\r\n\tfunction accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\r\n\t}\r\n\r\n\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b != 0, errorMessage);\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\nlibrary SafeMathInt {\r\n\tint256 private constant MIN_INT256 = int256(1) << 255;\r\n\tint256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n\tfunction mul(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a * b;\r\n\r\n\t\t// Detect overflow when multiplying MIN_INT256 with -1\r\n\t\trequire(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n\t\trequire((b == 0) || (c / b == a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction div(int256 a, int256 b) internal pure returns (int256) {\r\n\t\t// Prevent overflow when dividing MIN_INT256 by -1\r\n\t\trequire(b != -1 || a != MIN_INT256);\r\n\r\n\t\t// Solidity already throws when dividing by 0.\r\n\t\treturn a / b;\r\n\t}\r\n\tfunction sub(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a - b;\r\n\t\trequire((b >= 0 && c <= a) || (b < 0 && c > a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction add(int256 a, int256 b) internal pure returns (int256) {\r\n\t\tint256 c = a + b;\r\n\t\trequire((b >= 0 && c >= a) || (b < 0 && c < a));\r\n\t\treturn c;\r\n\t}\r\n\tfunction abs(int256 a) internal pure returns (int256) {\r\n\t\trequire(a != MIN_INT256);\r\n\t\treturn a < 0 ? -a : a;\r\n\t}\r\n\tfunction toUint256Safe(int256 a) internal pure returns (uint256) {\r\n\t\trequire(a >= 0);\r\n\t\treturn uint256(a);\r\n\t}\r\n}\r\n\r\nlibrary SafeMathUint {\r\n\tfunction toInt256Safe(uint256 a) internal pure returns (int256) {\r\n\t\tint256 b = int256(a);\r\n\t\trequire(b >= 0);\r\n\t\treturn b;\r\n\t}\r\n}\r\n\r\nlibrary IterableMapping {\r\n\tstruct Map {\r\n\t\taddress[] keys;\r\n\t\tmapping(address => uint) values;\r\n\t\tmapping(address => uint) indexOf;\r\n\t\tmapping(address => bool) inserted;\r\n\t}\r\n\r\n\tfunction get(Map storage map, address key) public view returns (uint) {\r\n\t\treturn map.values[key];\r\n\t}\r\n\r\n\tfunction getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n\t\tif(!map.inserted[key]) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn int(map.indexOf[key]);\r\n\t}\r\n\r\n\tfunction getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n\t\treturn map.keys[index];\r\n\t}\r\n\r\n\tfunction size(Map storage map) public view returns (uint) {\r\n\t\treturn map.keys.length;\r\n\t}\r\n\r\n\tfunction set(Map storage map, address key, uint val) public {\r\n\t\tif (map.inserted[key]) {\r\n\t\t\tmap.values[key] = val;\r\n\t\t} else {\r\n\t\t\tmap.inserted[key] = true;\r\n\t\t\tmap.values[key] = val;\r\n\t\t\tmap.indexOf[key] = map.keys.length;\r\n\t\t\tmap.keys.push(key);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction remove(Map storage map, address key) public {\r\n\t\tif (!map.inserted[key]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete map.inserted[key];\r\n\t\tdelete map.values[key];\r\n\r\n\t\tuint index = map.indexOf[key];\r\n\t\tuint lastIndex = map.keys.length - 1;\r\n\t\taddress lastKey = map.keys[lastIndex];\r\n\r\n\t\tmap.indexOf[lastKey] = index;\r\n\t\tdelete map.indexOf[key];\r\n\r\n\t\tmap.keys[index] = lastKey;\r\n\t\tmap.keys.pop();\r\n\t}\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor () public {\r\n\t\taddress msgSender = _msgSender();\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) public {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(sender, recipient, amount);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[account] = _balances[account].add(amount);\r\n\t\temit Transfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\temit Transfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(\r\n\t\taddress owner,\r\n\t\taddress spender,\r\n\t\tuint256 amount\r\n\t) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) internal virtual {}\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, Ownable, DividendPayingTokenInterface, DividendPayingTokenOptionalInterface {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathUint for uint256;\r\n\tusing SafeMathInt for int256;\r\n\r\n\tuint256 constant internal magnitude = 2**128;\r\n\tuint256 internal magnifiedDividendPerShare;\r\n\tuint256 public totalDividendsDistributed;\r\n    address public rewardToken;\r\n\r\n\tmapping(address => int256) internal magnifiedDividendCorrections;\r\n\tmapping(address => uint256) internal withdrawnDividends;\r\n\r\n\tconstructor(string memory _name, string memory _symbol) public ERC20(_name, _symbol) {}\r\n\r\n\treceive() external payable {}\r\n\r\n\tfunction distributeDividendsUsingAmount(uint256 amount) public onlyOwner {\r\n\t\trequire(totalSupply() > 0);\r\n\t\tif (amount > 0) {\r\n\t\t\tmagnifiedDividendPerShare = magnifiedDividendPerShare.add((amount).mul(magnitude) / totalSupply());\r\n\t\t\temit DividendsDistributed(msg.sender, amount);\r\n\t\t\ttotalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n\t\t}\r\n\t}\r\n\tfunction withdrawDividend() public virtual override {\r\n\t\t_withdrawDividendOfUser(payable(msg.sender));\r\n\t}\r\n\tfunction _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n\t\tuint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n\t\tif (_withdrawableDividend > 0) {\r\n\t\t\twithdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n\t\t\temit DividendWithdrawn(user, _withdrawableDividend);\r\n            (bool success) = IERC20(rewardToken).transfer(user, _withdrawableDividend);\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n            return _withdrawableDividend;\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\tfunction dividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawableDividendOf(_owner);\r\n\t}\r\n\tfunction withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n\t}\r\n\tfunction withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn withdrawnDividends[_owner];\r\n\t}\r\n\tfunction accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n\t\treturn magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n\t\t.add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n\t}\r\n\tfunction _transfer(address from, address to, uint256 value) internal virtual override {\r\n\t\trequire(false);\r\n\t\tint256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n\t\tmagnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n\t\tmagnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n\t}\r\n\tfunction _mint(address account, uint256 value) internal override {\r\n\t\tsuper._mint(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _burn(address account, uint256 value) internal override {\r\n\t\tsuper._burn(account, value);\r\n\t\tmagnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n\t\t.add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n\t}\r\n\tfunction _setBalance(address account, uint256 newBalance) internal {\r\n\t\tuint256 currentBalance = balanceOf(account);\r\n\t\tif(newBalance > currentBalance) {\r\n\t\t\tuint256 mintAmount = newBalance.sub(currentBalance);\r\n\t\t\t_mint(account, mintAmount);\r\n\t\t} else if(newBalance < currentBalance) {\r\n\t\t\tuint256 burnAmount = currentBalance.sub(newBalance);\r\n\t\t\t_burn(account, burnAmount);\r\n\t\t}\r\n\t}\r\n    function _setRewardToken(address token) internal onlyOwner {\r\n\t\trewardToken = token;\r\n\t}\r\n}\r\n\r\ncontract CryptoComedyClub is ERC20, Ownable {\r\n\tIRouter public uniswapV2Router;\r\n\taddress public immutable uniswapV2Pair;\r\n\r\n\tstring private _name = \"Crypto Comedy Club\";\r\n\tstring private _symbol = \"LOL\";\r\n\tuint8 private _decimals = 18;\r\n\r\n\tCryptoComedyClubDividendTracker public dividendTracker;\r\n\r\n\tbool public isTradingEnabled;\r\n\tuint256 private _tradingPausedTimestamp;\r\n\r\n\t// initialSupply\r\n\tuint256 constant initialSupply = 100000000000 * (10**18);\r\n\r\n\t// max wallet is 5% of initialSupply\r\n\tuint256 public maxWalletAmount = initialSupply * 500 / 10000;\r\n\t// max buy and sell tx is 5% of initialSupply\r\n\tuint256 public maxTxAmount = initialSupply * 500 / 10000;\r\n\r\n\tbool private _swapping;\r\n\tuint256 public minimumTokensBeforeSwap = 25000000 * (10**18);\r\n\tuint256 public gasForProcessing = 300000;\r\n\r\n    address public liquidityWallet;\r\n\taddress public marketingWallet;\r\n\taddress public talentWallet;\r\n\taddress public dev1Wallet;\r\n\taddress public dev2Wallet;\r\n    address public dev3Wallet;\r\n    address public dev4Wallet;\r\n\r\n\tstruct CustomTaxPeriod {\r\n\t\tbytes23 periodName;\r\n\t\tuint8 blocksInPeriod;\r\n\t\tuint256 timeInPeriod;\r\n\t\tuint256 liquidityFeeOnBuy;\r\n\t\tuint256 liquidityFeeOnSell;\r\n\t\tuint256 marketingFeeOnBuy;\r\n\t\tuint256 marketingFeeOnSell;\r\n        uint256 talentFeeOnBuy;\r\n\t\tuint256 talentFeeOnSell;\r\n        uint256 dev1FeeOnBuy;\r\n\t\tuint256 dev1FeeOnSell;\r\n\t\tuint256 dev2FeeOnBuy;\r\n\t\tuint256 dev2FeeOnSell;\r\n\t\tuint256 dev3FeeOnBuy;\r\n\t\tuint256 dev3FeeOnSell;\r\n        uint256 dev4FeeOnBuy;\r\n\t\tuint256 dev4FeeOnSell;\r\n\t\tuint256 holdersFeeOnBuy;\r\n\t\tuint256 holdersFeeOnSell;\r\n\t}\r\n\r\n\t// Launch taxes\r\n\tbool private _isLaunched;\r\n\tuint256 private _launchStartTimestamp;\r\n\tuint256 private _launchBlockNumber;\r\n\tCustomTaxPeriod private _launch1 = CustomTaxPeriod('launch1',3,0,10000,200,0,200,0,200,0,75,0,75,0,75,0,75,0,100);\r\n\tCustomTaxPeriod private _launch2 = CustomTaxPeriod('launch2',0,3600,200,500,200,1100,200,500,75,100,75,100,75,100,75,100,100,500);\r\n\tCustomTaxPeriod private _launch3 = CustomTaxPeriod('launch3',0,82800,200,300,200,800,200,600,75,100,75,100,75,100,75,100,100,400);\r\n\r\n\t// Base taxes\r\n\tCustomTaxPeriod private _default = CustomTaxPeriod('default',0,0,200,200,200,200,200,200,75,75,75,75,75,75,75,75,100,100);\r\n\tCustomTaxPeriod private _base = CustomTaxPeriod('base',0,0,200,200,200,200,200,200,75,75,75,75,75,75,75,75,100,100);\r\n\r\n\t// ROFL Hour taxes\r\n\tuint256 private _roflHourStartTimestamp;\r\n\tCustomTaxPeriod private _rofl1 = CustomTaxPeriod('rofl1',0,3600,0,500,0,1100,0,500,0,100,0,100,0,100,0,100,300,500);\r\n\tCustomTaxPeriod private _rofl2 = CustomTaxPeriod('rofl2',0,3600,200,300,200,800,200,600,75,100,75,100,75,100,75,100,100,400);\r\n\r\n\tuint256 private _blockedTimeLimit = 172800;\r\n    bool private _feeOnWalletTranfers;\r\n\tmapping (address => bool) private _isAllowedToTradeWhenDisabled;\r\n\tmapping (address => bool) private _feeOnSelectedWalletTransfers;\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\tmapping (address => bool) private _isExcludedFromMaxTransactionLimit;\r\n\tmapping (address => bool) private _isExcludedFromMaxWalletLimit;\r\n\tmapping (address => bool) private _isBlocked;\r\n\tmapping (address => bool) public automatedMarketMakerPairs;\r\n\tmapping (address => uint256) private _buyTimesInLaunch;\r\n\r\n\tuint256 private _liquidityFee;\r\n\tuint256 private _marketingFee;\r\n\tuint256 private _talentFee;\r\n\tuint256 private _dev1Fee;\r\n    uint256 private _dev2Fee;\r\n    uint256 private _dev3Fee;\r\n    uint256 private _dev4Fee;\r\n\tuint256 private _holdersFee;\r\n\tuint256 private _totalFee;\r\n\r\n\tevent AutomatedMarketMakerPairChange(address indexed pair, bool indexed value);\r\n\tevent DividendTrackerChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent UniswapV2RouterChange(address indexed newAddress, address indexed oldAddress);\r\n\tevent WalletChange(string indexed walletIdentifier, address indexed newWallet, address indexed oldWallet);\r\n\tevent GasForProcessingChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent FeeChange(string indexed identifier, uint256 liquidityFee, uint256 marketingFee, uint256 talentFee, uint256 dev1Fee, uint256 dev2Fee, uint256 dev3Fee, uint256 dev4Fee, uint256 holdersFee);\r\n\tevent CustomTaxPeriodChange(uint256 indexed newValue, uint256 indexed oldValue, string indexed taxType, bytes23 period);\r\n\tevent BlockedAccountChange(address indexed holder, bool indexed status);\r\n\tevent RoflHourChange(bool indexed newValue, bool indexed oldValue);\r\n    event AllowedWhenTradingDisabledChange(address indexed account, bool isExcluded);\r\n    event MaxTransactionAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MaxWalletAmountChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent MinTokenAmountBeforeSwapChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event MinTokenAmountForDividendsChange(uint256 indexed newValue, uint256 indexed oldValue);\r\n    event ExcludeFromFeesChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxTransferChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromMaxWalletChange(address indexed account, bool isExcluded);\r\n\tevent ExcludeFromDividendsChange(address indexed account, bool isExcluded);\r\n    event FeeOnWalletTransferChange(bool indexed newValue, bool indexed oldValue);\r\n\tevent FeeOnSelectedWalletTransfersChange(address indexed account, bool newValue);\r\n\tevent DividendsSent(uint256 tokensSwapped);\r\n\tevent SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived,uint256 tokensIntoLiqudity);\r\n    event ClaimBNBOverflow(uint256 amount);\r\n\tevent ProcessedDividendTracker(\r\n\t\tuint256 iterations,\r\n\t\tuint256 claims,\r\n\t\tuint256 lastProcessedIndex,\r\n\t\tbool indexed automatic,\r\n\t\tuint256 gas,\r\n\t\taddress indexed processor\r\n\t);\r\n\tevent FeesApplied(uint256 liquidityFee, uint256 marketingFee, uint256 talentFee, uint256 dev1Fee, uint256 dev2Fee, uint256 dev3Fee, uint256 dev4Fee, uint256 holdersFee, uint256 totalFee);\r\n\r\n\tconstructor() public ERC20(_name, _symbol) {\r\n        liquidityWallet = owner();\r\n        marketingWallet = 0x6b4015CDA60Aa32e3AE9320c9764DEc1E0c03271;\r\n\t    talentWallet = 0x7fd4E9D70fd84A1d3578476e8483Df5816E756d9;\r\n\t    dev1Wallet = 0xf81C76315E5F1f8aD36e609A3B1E4a76be98703B;\r\n\t    dev2Wallet = 0x4E0465514166b06546Ca2092a03455ee7Af48c8a;\r\n        dev3Wallet = 0x25A0D4A6c166fd32cB01835B4453ce93020d52d2;\r\n        dev4Wallet = 0xA37d91112Bd09C95F8cCf30A11E7D0f92549D175;\r\n\r\n\t\tdividendTracker = new CryptoComedyClubDividendTracker();\r\n        dividendTracker.setRewardToken(address(this));\r\n\r\n\t\tIRouter _uniswapV2Router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // Mainnet\r\n\t\taddress _uniswapV2Pair = IFactory(_uniswapV2Router.factory()).createPair(\r\n\t\t\taddress(this),\r\n\t\t\t_uniswapV2Router.WETH()\r\n\t\t);\r\n\t\tuniswapV2Router = _uniswapV2Router;\r\n\t\tuniswapV2Pair = _uniswapV2Pair;\r\n\t\t_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_isExcludedFromFee[address(dividendTracker)] = true;\r\n\r\n\t\tdividendTracker.excludeFromDividends(address(dividendTracker));\r\n\t\tdividendTracker.excludeFromDividends(address(this));\r\n\t\tdividendTracker.excludeFromDividends(address(0x000000000000000000000000000000000000dEaD));\r\n\t\tdividendTracker.excludeFromDividends(owner());\r\n\t\tdividendTracker.excludeFromDividends(address(_uniswapV2Router));\r\n\r\n        _isAllowedToTradeWhenDisabled[owner()] = true;\r\n\r\n\t\t_isExcludedFromMaxTransactionLimit[address(dividendTracker)] = true;\r\n\t\t_isExcludedFromMaxTransactionLimit[address(this)] = true;\r\n\r\n\t\t_isExcludedFromMaxWalletLimit[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(dividendTracker)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(uniswapV2Router)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[address(this)] = true;\r\n\t\t_isExcludedFromMaxWalletLimit[owner()] = true;\r\n\r\n\t\t_mint(owner(), initialSupply);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t// Setters\r\n\tfunction _getNow() private view returns (uint256) {\r\n\t\treturn block.timestamp;\r\n\t}\r\n\tfunction launch() external onlyOwner {\r\n\t\t_launchStartTimestamp = _getNow();\r\n\t\t_launchBlockNumber = block.number;\r\n\t\tisTradingEnabled = true;\r\n\t\t_isLaunched = true;\r\n\t}\r\n\tfunction cancelLaunch() external onlyOwner {\r\n\t\trequire(this.isInLaunch(), \"CryptoComedyClub: Launch is not set\");\r\n\t\t_launchStartTimestamp = 0;\r\n\t\t_launchBlockNumber = 0;\r\n\t\t_isLaunched = false;\r\n\t}\r\n\tfunction activateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = true;\r\n\t}\r\n\tfunction deactivateTrading() external onlyOwner {\r\n\t\tisTradingEnabled = false;\r\n\t\t_tradingPausedTimestamp = _getNow();\r\n\t}\r\n\tfunction setRoflHour() external onlyOwner {\r\n\t\trequire(!this.isInRoflHour(), \"CryptoComedyClub: Rofl Hour is already set\");\r\n\t\trequire(isTradingEnabled, \"CryptoComedyClub: Trading must be enabled first\");\r\n\t\trequire(!this.isInLaunch(), \"CryptoComedyClub: Must not be in launch period\");\r\n\t\temit RoflHourChange(true, false);\r\n\t\t_roflHourStartTimestamp = _getNow();\r\n\t}\r\n\tfunction cancelRoflHour() external onlyOwner {\r\n\t\trequire(this.isInRoflHour(), \"CryptoComedyClub: Rofl Hour is not set\");\r\n\t\temit RoflHourChange(false, true);\r\n\t\t_roflHourStartTimestamp = 0;\r\n\t}\r\n\tfunction _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n\t\trequire(automatedMarketMakerPairs[pair] != value, \"CryptoComedyClub: Automated market maker pair is already set to that value\");\r\n\t\tautomatedMarketMakerPairs[pair] = value;\r\n\t\tif(value) {\r\n\t\t\tdividendTracker.excludeFromDividends(pair);\r\n\t\t}\r\n\t\temit AutomatedMarketMakerPairChange(pair, value);\r\n\t}\r\n    function allowTradingWhenDisabled(address account, bool allowed) external onlyOwner {\r\n\t\t_isAllowedToTradeWhenDisabled[account] = allowed;\r\n\t\temit AllowedWhenTradingDisabledChange(account, allowed);\r\n\t}\r\n\tfunction excludeFromFees(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromFee[account] != excluded, \"CryptoComedyClub: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromFee[account] = excluded;\r\n\t\temit ExcludeFromFeesChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\tdividendTracker.excludeFromDividends(account);\r\n\t}\r\n\tfunction excludeFromMaxTransactionLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxTransactionLimit[account] != excluded, \"CryptoComedyClub: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxTransactionLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxTransferChange(account, excluded);\r\n\t}\r\n\tfunction excludeFromMaxWalletLimit(address account, bool excluded) external onlyOwner {\r\n\t\trequire(_isExcludedFromMaxWalletLimit[account] != excluded, \"CryptoComedyClub: Account is already the value of 'excluded'\");\r\n\t\t_isExcludedFromMaxWalletLimit[account] = excluded;\r\n\t\temit ExcludeFromMaxWalletChange(account, excluded);\r\n\t}\r\n\tfunction blockAccount(address account) external onlyOwner {\r\n\t\tuint256 currentTimestamp = _getNow();\r\n\t\trequire(!_isBlocked[account], \"CryptoComedyClub: Account is already blocked\");\r\n\t\tif (_isLaunched) {\r\n\t\t\trequire((currentTimestamp - _launchStartTimestamp) < _blockedTimeLimit, \"CryptoComedyClub: Time to block accounts has expired\");\r\n\t\t}\r\n\t\t_isBlocked[account] = true;\r\n\t\temit BlockedAccountChange(account, true);\r\n\t}\r\n\tfunction unblockAccount(address account) external onlyOwner {\r\n\t\trequire(_isBlocked[account], \"CryptoComedyClub: Account is not blcoked\");\r\n\t\t_isBlocked[account] = false;\r\n\t\temit BlockedAccountChange(account, false);\r\n\t}\r\n\tfunction setWallets(address newLiquidityWallet, address newMarketingWallet, address newTalentWallet, address newDev1Wallet, address newDev2Wallet, address newDev3Wallet, address newDev4Wallet) external onlyOwner {\r\n\t\tif(liquidityWallet != newLiquidityWallet) {\r\n\t\t\trequire(newLiquidityWallet != address(0), \"CryptoComedyClub: The liquidityWallet cannot be 0\");\r\n\t\t\temit WalletChange('liquidityWallet', newLiquidityWallet, liquidityWallet);\r\n\t\t\tliquidityWallet = newLiquidityWallet;\r\n\t\t}\r\n\t\tif(marketingWallet != newMarketingWallet) {\r\n\t\t\trequire(newMarketingWallet != address(0), \"CryptoComedyClub: The marketingWallet cannot be 0\");\r\n\t\t\temit WalletChange('marketingWallet', newMarketingWallet, marketingWallet);\r\n\t\t\tmarketingWallet = newMarketingWallet;\r\n\t\t}\r\n        if(talentWallet != newTalentWallet) {\r\n\t\t\trequire(newTalentWallet != address(0), \"CryptoComedyClub: The talentWallet cannot be 0\");\r\n\t\t\temit WalletChange('talentWallet', newTalentWallet, talentWallet);\r\n\t\t\ttalentWallet = newTalentWallet;\r\n\t\t}\r\n\t\tif(dev1Wallet != newDev1Wallet) {\r\n\t\t\trequire(newDev1Wallet != address(0), \"CryptoComedyClub: The dev1Wallet cannot be 0\");\r\n\t\t\temit WalletChange('dev1Wallet', newDev1Wallet, dev1Wallet);\r\n\t\t\tdev1Wallet = newDev1Wallet;\r\n\t\t}\r\n        if(dev2Wallet != newDev2Wallet) {\r\n\t\t\trequire(newDev2Wallet != address(0), \"CryptoComedyClub: The dev2Wallet cannot be 0\");\r\n\t\t\temit WalletChange('dev2Wallet', newDev2Wallet, dev2Wallet);\r\n\t\t\tdev2Wallet = newDev2Wallet;\r\n\t\t}\r\n        if(dev3Wallet != newDev3Wallet) {\r\n\t\t\trequire(newDev3Wallet != address(0), \"CryptoComedyClub: The dev3Wallet cannot be 0\");\r\n\t\t\temit WalletChange('dev3Wallet', newDev3Wallet, dev3Wallet);\r\n\t\t\tdev3Wallet = newDev3Wallet;\r\n\t\t}\r\n        if(dev4Wallet != newDev4Wallet) {\r\n\t\t\trequire(newDev4Wallet != address(0), \"CryptoComedyClub: The dev4Wallet cannot be 0\");\r\n\t\t\temit WalletChange('dev4Wallet', newDev4Wallet, dev4Wallet);\r\n\t\t\tdev4Wallet = newDev4Wallet;\r\n\t\t}\r\n\t}\r\n    function setFeeOnWalletTransfers(bool value) external onlyOwner {\r\n\t\temit FeeOnWalletTransferChange(value, _feeOnWalletTranfers);\r\n\t\t_feeOnWalletTranfers = value;\r\n\t}\r\n\tfunction setFeeOnSelectedWalletTransfers(address account, bool value) external onlyOwner {\r\n\t\trequire(_feeOnSelectedWalletTransfers[account] != value, \"CryptoComedyClub: The selected wallet is already set to the value \");\r\n\t\t_feeOnSelectedWalletTransfers[account] = value;\r\n\t\temit FeeOnSelectedWalletTransfersChange(account, value);\r\n\t}\r\n\tfunction setAllFeesToZero() external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, 0, 0, 0, 0, 0, 0, 0, 0);\r\n\t\temit FeeChange('baseFees-Buy', 0, 0, 0, 0, 0, 0, 0, 0);\r\n\t\t_setCustomSellTaxPeriod(_base, 0, 0, 0, 0, 0, 0, 0, 0);\r\n\t\temit FeeChange('baseFees-Sell', 0, 0, 0, 0, 0, 0, 0, 0);\r\n\t}\r\n\tfunction resetAllFees() external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _default.liquidityFeeOnBuy, _default.marketingFeeOnBuy, _default.talentFeeOnBuy,  _default.dev1FeeOnBuy, _default.dev2FeeOnBuy, _default.dev3FeeOnBuy, _default.dev4FeeOnBuy, _default.holdersFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _default.liquidityFeeOnBuy, _default.marketingFeeOnBuy, _default.talentFeeOnBuy,  _default.dev1FeeOnBuy, _default.dev2FeeOnBuy, _default.dev3FeeOnBuy, _default.dev4FeeOnBuy, _default.holdersFeeOnBuy);\r\n\t\t_setCustomSellTaxPeriod(_base, _default.liquidityFeeOnSell, _default.marketingFeeOnSell, _default.talentFeeOnSell, _default.dev1FeeOnSell, _default.dev2FeeOnSell, _default.dev3FeeOnSell, _default.dev4FeeOnSell, _default.holdersFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _default.liquidityFeeOnSell, _default.marketingFeeOnSell, _default.talentFeeOnSell, _default.dev1FeeOnSell, _default.dev2FeeOnSell, _default.dev3FeeOnSell, _default.dev4FeeOnSell, _default.holdersFeeOnSell);\r\n\t}\r\n\t// Base Fees\r\n\tfunction setBaseFeesOnBuy(uint256 _liquidityFeeOnBuy, uint256 _marketingFeeOnBuy, uint256 _talentFeeOnBuy, uint256 _dev1FeeOnBuy, uint256 _dev2FeeOnBuy, uint256 _dev3FeeOnBuy, uint256 _dev4FeeOnBuy, uint256 _holdersFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_base, _liquidityFeeOnBuy, _marketingFeeOnBuy, _talentFeeOnBuy, _dev1FeeOnBuy, _dev2FeeOnBuy, _dev3FeeOnBuy, _dev4FeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('baseFees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _talentFeeOnBuy, _dev1FeeOnBuy, _dev2FeeOnBuy, _dev3FeeOnBuy, _dev4FeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setBaseFeesOnSell(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _talentFeeOnSell, uint256 _dev1FeeOnSell, uint256 _dev2FeeOnSell, uint256 _dev3FeeOnSell, uint256 _dev4FeeOnSell, uint256 _holdersFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_base, _liquidityFeeOnSell, _marketingFeeOnSell, _talentFeeOnSell, _dev1FeeOnSell, _dev2FeeOnSell, _dev3FeeOnSell, _dev4FeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('baseFees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _talentFeeOnSell, _dev1FeeOnSell, _dev2FeeOnSell, _dev3FeeOnSell, _dev4FeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\t// Rofl1 Hour Fees\r\n\tfunction setRoflHour1BuyFees(uint256 _liquidityFeeOnBuy,uint256 _marketingFeeOnBuy, uint256 _talentFeeOnBuy, uint256 _dev1FeeOnBuy, uint256 _dev2FeeOnBuy, uint256 _dev3FeeOnBuy, uint256 _dev4FeeOnBuy, uint256 _holdersFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_rofl1, _liquidityFeeOnBuy, _marketingFeeOnBuy, _talentFeeOnBuy, _dev1FeeOnBuy, _dev2FeeOnBuy, _dev3FeeOnBuy, _dev4FeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('rofl1Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _talentFeeOnBuy, _dev1FeeOnBuy, _dev2FeeOnBuy, _dev3FeeOnBuy, _dev4FeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setRoflHour1SellFees(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _talentFeeOnSell, uint256 _dev1FeeOnSell, uint256 _dev2FeeOnSell, uint256 _dev3FeeOnSell, uint256 _dev4FeeOnSell, uint256 _holdersFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_rofl1, _liquidityFeeOnSell, _marketingFeeOnSell, _talentFeeOnSell, _dev1FeeOnSell, _dev2FeeOnSell, _dev3FeeOnSell, _dev4FeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('rofl1Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _talentFeeOnSell, _dev1FeeOnSell, _dev2FeeOnSell, _dev3FeeOnSell, _dev4FeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\t// Rofl2 Hour Fees\r\n\tfunction setRoflHour2BuyFees(uint256 _liquidityFeeOnBuy,uint256 _marketingFeeOnBuy, uint256 _talentFeeOnBuy, uint256 _dev1FeeOnBuy, uint256 _dev2FeeOnBuy, uint256 _dev3FeeOnBuy, uint256 _dev4FeeOnBuy, uint256 _holdersFeeOnBuy) external onlyOwner {\r\n\t\t_setCustomBuyTaxPeriod(_rofl2, _liquidityFeeOnBuy, _marketingFeeOnBuy, _talentFeeOnBuy, _dev1FeeOnBuy, _dev2FeeOnBuy, _dev3FeeOnBuy, _dev4FeeOnBuy, _holdersFeeOnBuy);\r\n\t\temit FeeChange('rofl2Fees-Buy', _liquidityFeeOnBuy, _marketingFeeOnBuy, _talentFeeOnBuy, _dev1FeeOnBuy, _dev2FeeOnBuy, _dev3FeeOnBuy, _dev4FeeOnBuy, _holdersFeeOnBuy);\r\n\t}\r\n\tfunction setRoflHour2SellFees(uint256 _liquidityFeeOnSell,uint256 _marketingFeeOnSell, uint256 _talentFeeOnSell, uint256 _dev1FeeOnSell, uint256 _dev2FeeOnSell, uint256 _dev3FeeOnSell, uint256 _dev4FeeOnSell, uint256 _holdersFeeOnSell) external onlyOwner {\r\n\t\t_setCustomSellTaxPeriod(_rofl2, _liquidityFeeOnSell, _marketingFeeOnSell, _talentFeeOnSell, _dev1FeeOnSell, _dev2FeeOnSell, _dev3FeeOnSell, _dev4FeeOnSell, _holdersFeeOnSell);\r\n\t\temit FeeChange('rofl2Fees-Sell', _liquidityFeeOnSell, _marketingFeeOnSell, _talentFeeOnSell, _dev1FeeOnSell, _dev2FeeOnSell, _dev3FeeOnSell, _dev4FeeOnSell, _holdersFeeOnSell);\r\n\t}\r\n\tfunction setUniswapRouter(address newAddress) external onlyOwner {\r\n\t\trequire(newAddress != address(uniswapV2Router), \"CryptoComedyClub: The router already has that address\");\r\n\t\temit UniswapV2RouterChange(newAddress, address(uniswapV2Router));\r\n\t\tuniswapV2Router = IRouter(newAddress);\r\n\t}\r\n\tfunction setGasForProcessing(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != gasForProcessing, \"CryptoComedyClub: Cannot update gasForProcessing to same value\");\r\n\t\temit GasForProcessingChange(newValue, gasForProcessing);\r\n\t\tgasForProcessing = newValue;\r\n\t}\r\n\tfunction setMaxTransactionAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxTxAmount, \"CryptoComedyClub: Cannot update maxTxAmount to same value\");\r\n\t\temit MaxTransactionAmountChange(newValue, maxTxAmount);\r\n\t\tmaxTxAmount = newValue;\r\n\t}\r\n\tfunction setMaxWalletAmount(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != maxWalletAmount, \"CryptoComedyClub: Cannot update maxWalletAmount to same value\");\r\n\t\temit MaxWalletAmountChange(newValue, maxWalletAmount);\r\n\t\tmaxWalletAmount = newValue;\r\n\t}\r\n\tfunction setMinimumTokensBeforeSwap(uint256 newValue) external onlyOwner {\r\n\t\trequire(newValue != minimumTokensBeforeSwap, \"CryptoComedyClub: Cannot update minimumTokensBeforeSwap to same value\");\r\n\t\temit MinTokenAmountBeforeSwapChange(newValue, minimumTokensBeforeSwap);\r\n\t\tminimumTokensBeforeSwap = newValue;\r\n\t}\r\n\tfunction setMinimumTokenBalanceForDividends(uint256 newValue) external onlyOwner {\r\n\t\tdividendTracker.setTokenBalanceForDividends(newValue);\r\n\t}\r\n\tfunction claim() external {\r\n\t\tdividendTracker.processAccount(payable(msg.sender), false);\r\n\t}\r\n\tfunction claimBNBOverflow() external onlyOwner {\r\n\t    uint256 amount = address(this).balance;\r\n        (bool success,) = address(owner()).call{value : amount}(\"\");\r\n        if (success){\r\n            emit ClaimBNBOverflow(amount);\r\n        }\r\n\t}\r\n\r\n\t// Getters\r\n\tfunction timeSinceLastRoflHour() external view returns(uint256){\r\n\t    uint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _roflHourStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\treturn currentTimestamp - _roflHourStartTimestamp;\r\n\t}\r\n\tfunction isInRoflHour() external view returns (bool) {\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _roflHourStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 totalRoflTime = _rofl1.timeInPeriod + _rofl2.timeInPeriod;\r\n\t\tuint256 timeSinceRofl = currentTimestamp - _roflHourStartTimestamp;\r\n\t\tif(timeSinceRofl < totalRoflTime) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction isInLaunch() external view returns (bool) {\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 timeSinceLaunch = currentTimestamp - _launchStartTimestamp;\r\n\t\tuint256 blocksSinceLaunch = block.number - _launchBlockNumber;\r\n\t\tuint256 totalLaunchTime =  _launch1.timeInPeriod + _launch2.timeInPeriod + _launch3.timeInPeriod;\r\n\r\n\t\tif(_isLaunched && (timeSinceLaunch < totalLaunchTime || blocksSinceLaunch < _launch1.blocksInPeriod )) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tfunction getTotalDividendsDistributed() external view returns (uint256) {\r\n\t\treturn dividendTracker.totalDividendsDistributed();\r\n\t}\r\n\tfunction getNumberOfDividendTokenHolders() external view returns(uint256) {\r\n\t\treturn dividendTracker.getNumberOfTokenHolders();\r\n\t}\r\n\tfunction getBaseBuyFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_base.liquidityFeeOnBuy, _base.marketingFeeOnBuy, _base.talentFeeOnBuy, _base.dev1FeeOnBuy, _base.dev2FeeOnBuy, _base.dev3FeeOnBuy, _base.dev4FeeOnBuy, _base.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getBaseSellFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_base.liquidityFeeOnSell, _base.marketingFeeOnSell, _base.talentFeeOnSell, _base.dev1FeeOnSell, _base.dev2FeeOnSell, _base.dev3FeeOnSell, _base.dev4FeeOnSell, _base.holdersFeeOnSell);\r\n\t}\r\n\tfunction getRofl1BuyFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_rofl1.liquidityFeeOnBuy, _rofl1.marketingFeeOnBuy, _rofl1.talentFeeOnBuy, _rofl1.dev1FeeOnBuy, _rofl1.dev2FeeOnBuy, _rofl1.dev3FeeOnBuy, _rofl1.dev4FeeOnBuy, _rofl1.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getRofl1SellFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_rofl1.liquidityFeeOnSell, _rofl1.marketingFeeOnSell, _rofl1.talentFeeOnSell, _rofl1.dev1FeeOnSell, _rofl1.dev2FeeOnSell, _rofl1.dev3FeeOnSell, _rofl1.dev4FeeOnSell, _rofl1.holdersFeeOnSell);\r\n\t}\r\n\tfunction getRofl2BuyFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_rofl2.liquidityFeeOnBuy, _rofl2.marketingFeeOnBuy, _rofl2.talentFeeOnBuy, _rofl2.dev1FeeOnBuy, _rofl2.dev2FeeOnBuy, _rofl2.dev3FeeOnBuy, _rofl2.dev4FeeOnBuy, _rofl2.holdersFeeOnBuy);\r\n\t}\r\n\tfunction getRofl2SellFees() external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256){\r\n\t\treturn (_rofl2.liquidityFeeOnSell, _rofl2.marketingFeeOnSell, _rofl2.talentFeeOnSell, _rofl2.dev1FeeOnSell, _rofl2.dev2FeeOnSell, _rofl2.dev3FeeOnSell, _rofl2.dev4FeeOnSell, _rofl2.holdersFeeOnSell);\r\n\t}\r\n\r\n\t// Main\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t\t) internal override {\r\n\t\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t\tif(amount == 0) {\r\n\t\t\t\tsuper._transfer(from, to, 0);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tbool isBuyFromLp = automatedMarketMakerPairs[from];\r\n\t\t\tbool isSelltoLp = automatedMarketMakerPairs[to];\r\n\t\t\tbool _isInLaunch = this.isInLaunch();\r\n\t\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\r\n\t\t    if(!_isAllowedToTradeWhenDisabled[from] && !_isAllowedToTradeWhenDisabled[to]) {\r\n\t\t\t\trequire(isTradingEnabled, \"CryptoComedyClub: Trading is currently disabled.\");\r\n\t\t\t\trequire(!_isBlocked[to], \"CryptoComedyClub: Account is blocked\");\r\n\t\t\t\trequire(!_isBlocked[from], \"CryptoComedyClub: Account is blocked\");\r\n\t\t\t\tif (_isInLaunch && (currentTimestamp - _launchStartTimestamp) <= 300 && isBuyFromLp) {\r\n\t\t\t\t\trequire((currentTimestamp - _buyTimesInLaunch[to]) > 60, \"CryptoComedyClub: Cannot buy more than once per min in first 5min of launch\");\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isExcludedFromMaxTransactionLimit[to] && !_isExcludedFromMaxTransactionLimit[from]) {\r\n\t\t\t\t\trequire(amount <= maxTxAmount, \"CryptoComedyClub: Buy amount exceeds the maxTxBuyAmount.\");\r\n\t\t\t\t}\r\n\t\t\t\tif (!_isExcludedFromMaxWalletLimit[to]) {\r\n\t\t\t\t\trequire((balanceOf(to) + amount) <= maxWalletAmount, \"CryptoComedyClub: Expected wallet amount exceeds the maxWalletAmount.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t_adjustTaxes(isBuyFromLp, isSelltoLp, _isInLaunch, to, from);\r\n\t\t\tbool canSwap = balanceOf(address(this)) >= minimumTokensBeforeSwap;\r\n\r\n\t\t\tif (\r\n\t\t\t\tisTradingEnabled &&\r\n\t\t\t\tcanSwap &&\r\n\t\t\t\t!_swapping &&\r\n\t\t\t\t_totalFee > 0 &&\r\n\t\t\t\tautomatedMarketMakerPairs[to] &&\r\n\t\t\t\tfrom != liquidityWallet && to != liquidityWallet &&\r\n\t\t\t\tfrom != marketingWallet && to != marketingWallet &&\r\n                from != talentWallet && to != talentWallet &&\r\n\t\t\t\tfrom != dev1Wallet && to != dev1Wallet &&\r\n                from != dev2Wallet && to != dev2Wallet &&\r\n                from != dev3Wallet && to != dev3Wallet &&\r\n                from != dev4Wallet && to != dev4Wallet\r\n\r\n\t\t\t) {\r\n\t\t\t\t_swapping = true;\r\n\t\t\t\t_swapAndLiquify();\r\n\t\t\t\t_swapping = false;\r\n\t\t\t}\r\n\r\n\t\t\tbool takeFee = !_swapping && isTradingEnabled;\r\n\r\n\t\t\tif(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n\t\t\t\ttakeFee = false;\r\n\t\t\t}\r\n\t\t\tif (takeFee) {\r\n\t\t\t\tuint256 fee = amount * _totalFee / 10000;\r\n\t\t\t\tamount = amount - fee;\r\n\t\t\t\tsuper._transfer(from, address(this), fee);\r\n\t\t\t}\r\n\r\n\t\t\tif (_isInLaunch && (currentTimestamp - _launchStartTimestamp) <= 300) {\r\n\t\t\t\tif (to != owner() && isBuyFromLp  && (currentTimestamp - _buyTimesInLaunch[to]) > 60) {\r\n\t\t\t\t\t_buyTimesInLaunch[to] = currentTimestamp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsuper._transfer(from, to, amount);\r\n\r\n\t\t\ttry dividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n\t\t\ttry dividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n\t\t\tif(!_swapping) {\r\n\t\t\t\tuint256 gas = gasForProcessing;\r\n\t\t\t\ttry dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t\t\t\t\temit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t\t\t\t}\r\n\t\t\t\tcatch {}\r\n\t\t\t}\r\n\t}\r\n\tfunction _adjustTaxes(bool isBuyFromLp, bool isSelltoLp, bool isLaunching, address to, address from) private {\r\n\t\tuint256 blocksSinceLaunch = block.number - _launchBlockNumber;\r\n\t\tuint256 currentTimestamp = !isTradingEnabled && _tradingPausedTimestamp > _launchStartTimestamp  ? _tradingPausedTimestamp : _getNow();\r\n\t\tuint256 timeSinceLaunch = currentTimestamp - _launchStartTimestamp;\r\n\t\tuint256 timeSinceRofl = currentTimestamp - _roflHourStartTimestamp;\r\n\r\n\t\t_liquidityFee = 0;\r\n\t\t_marketingFee = 0;\r\n\t\t_talentFee = 0;\r\n        _dev1Fee = 0;\r\n\t\t_dev2Fee = 0;\r\n        _dev3Fee = 0;\r\n\t\t_dev4Fee = 0;\r\n\t\t_holdersFee = 0;\r\n\r\n\t\tif (isBuyFromLp) {\r\n\t\t    _liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t_marketingFee = _base.marketingFeeOnBuy;\r\n            _talentFee = _base.talentFeeOnBuy;\r\n\t\t\t_dev1Fee = _base.dev1FeeOnBuy;\r\n\t\t\t_dev2Fee = _base.dev2FeeOnBuy;\r\n\t\t\t_dev3Fee = _base.dev3FeeOnBuy;\r\n            _dev4Fee = _base.dev4FeeOnBuy;\r\n\t\t\t_holdersFee = _base.holdersFeeOnBuy;\r\n\r\n\t\t\tif (isLaunching) {\r\n\t\t\t\tif (_isLaunched && blocksSinceLaunch < _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch1.liquidityFeeOnBuy;\r\n\t\t\t\t\t_marketingFee = _launch1.marketingFeeOnBuy;\r\n\t\t\t\t\t_talentFee = _launch1.talentFeeOnBuy;\r\n                    _dev1Fee = _launch1.dev1FeeOnBuy;\r\n                    _dev2Fee = _launch1.dev2FeeOnBuy;\r\n                    _dev3Fee = _launch1.dev3FeeOnBuy;\r\n                    _dev4Fee = _launch1.dev4FeeOnBuy;\r\n\t\t\t\t\t_holdersFee = _launch1.holdersFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t\telse if (_isLaunched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch2.liquidityFeeOnBuy;\r\n\t\t\t\t\t_marketingFee = _launch2.marketingFeeOnBuy;\r\n\t\t\t\t\t_talentFee = _launch2.talentFeeOnBuy;\r\n                    _dev1Fee = _launch2.dev1FeeOnBuy;\r\n                    _dev2Fee = _launch2.dev2FeeOnBuy;\r\n                    _dev3Fee = _launch2.dev3FeeOnBuy;\r\n                    _dev4Fee = _launch2.dev4FeeOnBuy;\r\n\t\t\t\t\t_holdersFee = _launch2.holdersFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t_liquidityFee = _launch3.liquidityFeeOnBuy;\r\n\t\t\t\t\t_marketingFee = _launch3.marketingFeeOnBuy;\r\n\t\t\t\t\t_talentFee = _launch3.talentFeeOnBuy;\r\n                    _dev1Fee = _launch3.dev1FeeOnBuy;\r\n                    _dev2Fee = _launch3.dev2FeeOnBuy;\r\n                    _dev3Fee = _launch3.dev3FeeOnBuy;\r\n                    _dev4Fee = _launch3.dev4FeeOnBuy;\r\n\t\t\t\t\t_holdersFee = _launch3.holdersFeeOnBuy;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (timeSinceRofl <= _rofl1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _rofl1.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _rofl1.marketingFeeOnBuy;\r\n\t\t\t\t_talentFee = _rofl1.talentFeeOnBuy;\r\n                _dev1Fee = _rofl1.dev1FeeOnBuy;\r\n                _dev2Fee = _rofl1.dev2FeeOnBuy;\r\n                _dev3Fee = _rofl1.dev3FeeOnBuy;\r\n                _dev4Fee = _rofl1.dev4FeeOnBuy;\r\n\t\t\t\t_holdersFee = _rofl1.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t\telse if (timeSinceRofl > _rofl1.timeInPeriod && timeSinceRofl <= (_rofl1.timeInPeriod + _rofl2.timeInPeriod)) {\r\n\t\t\t\t_liquidityFee = _rofl2.liquidityFeeOnBuy;\r\n\t\t\t\t_marketingFee = _rofl2.marketingFeeOnBuy;\r\n\t\t\t\t_talentFee = _rofl2.talentFeeOnBuy;\r\n                _dev1Fee = _rofl2.dev1FeeOnBuy;\r\n                _dev2Fee = _rofl2.dev2FeeOnBuy;\r\n                _dev3Fee = _rofl2.dev3FeeOnBuy;\r\n                _dev4Fee = _rofl2.dev4FeeOnBuy;\r\n\t\t\t\t_holdersFee = _rofl2.holdersFeeOnBuy;\r\n\t\t\t}\r\n\t\t}\r\n\t    if (isSelltoLp) {\r\n\t    \t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_marketingFee = _base.marketingFeeOnSell;\r\n            _talentFee = _base.talentFeeOnSell;\r\n            _dev1Fee = _base.dev1FeeOnSell;\r\n            _dev2Fee = _base.dev2FeeOnSell;\r\n            _dev3Fee = _base.dev3FeeOnSell;\r\n            _dev4Fee = _base.dev4FeeOnSell;\r\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\r\n\r\n\t\t\tif (isLaunching) {\r\n\t\t\t\tif (_isLaunched && blocksSinceLaunch < _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch1.liquidityFeeOnSell;\r\n\t\t\t\t\t_marketingFee = _launch1.marketingFeeOnSell;\r\n\t\t\t\t\t_talentFee = _launch1.talentFeeOnSell;\r\n                    _dev1Fee = _launch1.dev1FeeOnSell;\r\n                    _dev2Fee = _launch1.dev2FeeOnSell;\r\n                    _dev3Fee = _launch1.dev3FeeOnSell;\r\n                    _dev4Fee = _launch1.dev4FeeOnSell;\r\n\t\t\t\t\t_holdersFee = _launch1.holdersFeeOnSell;\r\n\t\t\t\t}\r\n\t\t\t\telse if (_isLaunched && timeSinceLaunch <= _launch2.timeInPeriod && blocksSinceLaunch > _launch1.blocksInPeriod) {\r\n\t\t\t\t\t_liquidityFee = _launch2.liquidityFeeOnSell;\r\n\t\t\t\t\t_marketingFee = _launch2.marketingFeeOnSell;\r\n\t\t\t\t\t_talentFee = _launch2.talentFeeOnSell;\r\n                    _dev1Fee = _launch2.dev1FeeOnSell;\r\n                    _dev2Fee = _launch2.dev2FeeOnSell;\r\n                    _dev3Fee = _launch2.dev3FeeOnSell;\r\n                    _dev4Fee = _launch2.dev4FeeOnSell;\r\n\t\t\t\t\t_holdersFee = _launch2.holdersFeeOnSell;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t_liquidityFee = _launch3.liquidityFeeOnSell;\r\n\t\t\t\t\t_marketingFee = _launch3.marketingFeeOnSell;\r\n\t\t\t\t\t_talentFee = _launch3.talentFeeOnSell;\r\n                    _dev1Fee = _launch3.dev1FeeOnSell;\r\n                    _dev2Fee = _launch3.dev2FeeOnSell;\r\n                    _dev3Fee = _launch3.dev3FeeOnSell;\r\n                    _dev4Fee = _launch3.dev4FeeOnSell;\r\n\t\t\t\t\t_holdersFee = _launch3.holdersFeeOnSell;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (timeSinceRofl <= _rofl1.timeInPeriod) {\r\n\t\t\t\t_liquidityFee = _rofl1.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _rofl1.marketingFeeOnSell;\r\n\t\t\t\t_talentFee = _rofl1.talentFeeOnSell;\r\n                _dev1Fee = _rofl1.dev1FeeOnSell;\r\n                _dev2Fee = _rofl1.dev2FeeOnSell;\r\n                _dev3Fee = _rofl1.dev3FeeOnSell;\r\n                _dev4Fee = _rofl1.dev4FeeOnSell;\r\n\t\t\t\t_holdersFee = _rofl1.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t\telse if (timeSinceRofl > _rofl1.timeInPeriod && timeSinceRofl <= (_rofl1.timeInPeriod + _rofl2.timeInPeriod)) {\r\n\t\t\t\t_liquidityFee = _rofl2.liquidityFeeOnSell;\r\n\t\t\t\t_marketingFee = _rofl2.marketingFeeOnSell;\r\n\t\t\t\t_talentFee = _rofl2.talentFeeOnSell;\r\n                _dev1Fee = _rofl2.dev1FeeOnSell;\r\n                _dev2Fee = _rofl2.dev2FeeOnSell;\r\n                _dev3Fee = _rofl2.dev3FeeOnSell;\r\n                _dev4Fee = _rofl2.dev4FeeOnSell;\r\n\t\t\t\t_holdersFee = _rofl2.holdersFeeOnSell;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!isSelltoLp && !isBuyFromLp && (_feeOnSelectedWalletTransfers[from] || _feeOnSelectedWalletTransfers[to])) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnSell;\r\n\t\t\t_marketingFee = _base.marketingFeeOnSell;\r\n            _talentFee = _base.talentFeeOnSell;\r\n            _dev1Fee = _base.dev1FeeOnSell;\r\n            _dev2Fee = _base.dev2FeeOnSell;\r\n            _dev3Fee = _base.dev3FeeOnSell;\r\n            _dev4Fee = _base.dev4FeeOnSell;\r\n\t\t\t_holdersFee = _base.holdersFeeOnSell;\r\n\r\n\t\t}\r\n\t\telse if (!isSelltoLp && !isBuyFromLp && !_feeOnSelectedWalletTransfers[from] && !_feeOnSelectedWalletTransfers[to] && _feeOnWalletTranfers) {\r\n\t\t\t_liquidityFee = _base.liquidityFeeOnBuy;\r\n\t\t\t_marketingFee = _base.marketingFeeOnBuy;\r\n\t\t\t_talentFee = _base.talentFeeOnBuy;\r\n            _dev1Fee = _base.dev1FeeOnBuy;\r\n            _dev2Fee = _base.dev2FeeOnBuy;\r\n            _dev3Fee = _base.dev3FeeOnBuy;\r\n            _dev4Fee = _base.dev4FeeOnBuy;\r\n\t\t\t_holdersFee = _base.holdersFeeOnBuy;\r\n\t\t}\r\n\t\t_totalFee = _liquidityFee + _marketingFee + _talentFee + _dev1Fee + _dev2Fee + _dev3Fee + _dev4Fee + _holdersFee;\r\n\t\temit FeesApplied(_liquidityFee, _marketingFee, _talentFee, _dev1Fee, _dev2Fee, _dev3Fee, _dev4Fee, _holdersFee, _totalFee);\r\n\t}\r\n\tfunction _setCustomSellTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint256 _liquidityFeeOnSell,\r\n\t\tuint256 _marketingFeeOnSell,\r\n\t\tuint256 _talentFeeOnSell,\r\n        uint256 _dev1FeeOnSell,\r\n\t\tuint256 _dev2FeeOnSell,\r\n        uint256 _dev3FeeOnSell,\r\n\t\tuint256 _dev4FeeOnSell,\r\n\t\tuint256 _holdersFeeOnSell\r\n\t) private {\r\n\t\tif (map.liquidityFeeOnSell != _liquidityFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnSell, map.liquidityFeeOnSell, 'liquidityFeeOnSell', map.periodName);\r\n\t\t\tmap.liquidityFeeOnSell = _liquidityFeeOnSell;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnSell != _marketingFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnSell, map.marketingFeeOnSell, 'marketingFeeOnSell', map.periodName);\r\n\t\t\tmap.marketingFeeOnSell = _marketingFeeOnSell;\r\n\t\t}\r\n\t\tif (map.talentFeeOnSell != _talentFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_talentFeeOnSell, map.talentFeeOnSell, 'talentFeeOnSell', map.periodName);\r\n\t\t\tmap.talentFeeOnSell = _talentFeeOnSell;\r\n\t\t}\r\n        if (map.dev1FeeOnSell != _dev1FeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_dev1FeeOnSell, map.dev1FeeOnSell, 'dev1FeeOnSell', map.periodName);\r\n\t\t\tmap.dev1FeeOnSell = _dev1FeeOnSell;\r\n\t\t}\r\n        if (map.dev2FeeOnSell != _dev2FeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_dev2FeeOnSell, map.dev2FeeOnSell, 'dev2FeeOnSell', map.periodName);\r\n\t\t\tmap.dev2FeeOnSell = _dev2FeeOnSell;\r\n\t\t}\r\n\t\tif (map.dev3FeeOnSell != _dev3FeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_dev3FeeOnSell, map.dev3FeeOnSell, 'dev3FeeOnSell', map.periodName);\r\n\t\t\tmap.dev3FeeOnSell = _dev3FeeOnSell;\r\n\t\t}\r\n        if (map.dev4FeeOnSell != _dev4FeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_dev4FeeOnSell, map.dev4FeeOnSell, 'dev4FeeOnSell', map.periodName);\r\n\t\t\tmap.dev4FeeOnSell = _dev4FeeOnSell;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnSell != _holdersFeeOnSell) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnSell, map.holdersFeeOnSell, 'holdersFeeOnSell', map.periodName);\r\n\t\t\tmap.holdersFeeOnSell = _holdersFeeOnSell;\r\n\t\t}\r\n\t}\r\n\tfunction _setCustomBuyTaxPeriod(CustomTaxPeriod storage map,\r\n\t\tuint256 _liquidityFeeOnBuy,\r\n\t\tuint256 _marketingFeeOnBuy,\r\n\t\tuint256 _talentFeeOnBuy,\r\n        uint256 _dev1FeeOnBuy,\r\n\t\tuint256 _dev2FeeOnBuy,\r\n        uint256 _dev3FeeOnBuy,\r\n\t\tuint256 _dev4FeeOnBuy,\r\n\t\tuint256 _holdersFeeOnBuy\r\n\t\t) private {\r\n\t\tif (map.liquidityFeeOnBuy != _liquidityFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_liquidityFeeOnBuy, map.liquidityFeeOnBuy, 'liquidityFeeOnBuy', map.periodName);\r\n\t\t\tmap.liquidityFeeOnBuy = _liquidityFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.marketingFeeOnBuy != _marketingFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_marketingFeeOnBuy, map.marketingFeeOnBuy, 'marketingFeeOnBuy', map.periodName);\r\n\t\t\tmap.marketingFeeOnBuy = _marketingFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.talentFeeOnBuy != _talentFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_talentFeeOnBuy, map.talentFeeOnBuy, 'talentFeeOnBuy', map.periodName);\r\n\t\t\tmap.talentFeeOnBuy = _talentFeeOnBuy;\r\n\t\t}\r\n\t\tif (map.dev1FeeOnBuy != _dev1FeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_dev1FeeOnBuy, map.dev1FeeOnBuy, 'dev1FeeOnBuy', map.periodName);\r\n\t\t\tmap.dev1FeeOnBuy = _dev1FeeOnBuy;\r\n\t\t}\r\n        if (map.dev2FeeOnBuy != _dev2FeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_dev2FeeOnBuy, map.dev2FeeOnBuy, 'dev2FeeOnBuy', map.periodName);\r\n\t\t\tmap.dev2FeeOnBuy = _dev2FeeOnBuy;\r\n\t\t}\r\n        if (map.dev3FeeOnBuy != _dev3FeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_dev3FeeOnBuy, map.dev3FeeOnBuy, 'dev3FeeOnBuy', map.periodName);\r\n\t\t\tmap.dev3FeeOnBuy = _dev3FeeOnBuy;\r\n\t\t}\r\n        if (map.dev4FeeOnBuy != _dev4FeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_dev4FeeOnBuy, map.dev4FeeOnBuy, 'dev4FeeOnBuy', map.periodName);\r\n\t\t\tmap.dev4FeeOnBuy = _dev4FeeOnBuy;\r\n\t\t}\r\n\t\tif (map.holdersFeeOnBuy != _holdersFeeOnBuy) {\r\n\t\t\temit CustomTaxPeriodChange(_holdersFeeOnBuy, map.holdersFeeOnBuy, 'holdersFeeOnBuy', map.periodName);\r\n\t\t\tmap.holdersFeeOnBuy = _holdersFeeOnBuy;\r\n\t\t}\r\n\t}\r\n\tfunction _swapAndLiquify() private {\r\n\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\tuint256 initialBNBBalance = address(this).balance;\r\n\r\n\t\tuint256 totalFeePrior = _totalFee;\r\n\r\n\t\tuint256 amountToLiquify = contractBalance * _liquidityFee / _totalFee / 2;\r\n        uint256 amountForHolders = contractBalance * _holdersFee / _totalFee;\r\n\t\tuint256 amountToSwap = contractBalance - (amountToLiquify + amountForHolders);\r\n\r\n\t\t_swapTokensForBNB(amountToSwap);\r\n\r\n\t\tuint256 BNBBalanceAfterSwap = address(this).balance - initialBNBBalance;\r\n\t\tuint256 totalBNBFee = _totalFee - (_liquidityFee / 2) - (_holdersFee);\r\n\r\n\t\tuint256 amountBNBLiquidity = BNBBalanceAfterSwap * _liquidityFee / totalBNBFee / 2;\r\n\t\tuint256 amountBNBMarketing = BNBBalanceAfterSwap * _marketingFee / totalBNBFee;\r\n        uint256 amountBNBDev1 = BNBBalanceAfterSwap * _dev1Fee / totalBNBFee;\r\n        uint256 amountBNBDev2 = BNBBalanceAfterSwap * _dev2Fee / totalBNBFee;\r\n        uint256 amountBNBDev3 = BNBBalanceAfterSwap * _dev3Fee / totalBNBFee;\r\n        uint256 amountBNBDev4 = BNBBalanceAfterSwap * _dev4Fee / totalBNBFee;\r\n\t\tuint256 amountBNBTalent = BNBBalanceAfterSwap - (amountBNBLiquidity + amountBNBMarketing + amountBNBDev1 + amountBNBDev2 + amountBNBDev3 + amountBNBDev4);\r\n\r\n\t\tpayable(marketingWallet).transfer(amountBNBMarketing);\r\n\t\tpayable(talentWallet).transfer(amountBNBTalent);\r\n        payable(dev1Wallet).transfer(amountBNBDev1);\r\n        payable(dev2Wallet).transfer(amountBNBDev2);\r\n        payable(dev3Wallet).transfer(amountBNBDev3);\r\n        payable(dev4Wallet).transfer(amountBNBDev4);\r\n\r\n        if (amountToLiquify > 0) {\r\n\t\t\t_addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n\t\t\temit SwapAndLiquify(amountToSwap, amountBNBLiquidity, amountToLiquify);\r\n\t\t}\r\n\r\n\t\t(bool success) = IERC20(address(this)).transfer(address(dividendTracker), amountForHolders);\r\n\t\tif(success) {\r\n\t\t\tdividendTracker.distributeDividendsUsingAmount(amountForHolders);\r\n\t\t\temit DividendsSent(amountForHolders);\r\n\t\t}\r\n\r\n\t\t_totalFee = totalFeePrior;\r\n\t}\r\n\tfunction _swapTokensForBNB(uint256 tokenAmount) private {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // accept any amount of ETH\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\t\t_approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\t\tuniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\t0, // slippage is unavoidable\r\n\t\t\tliquidityWallet,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n}\r\n\r\ncontract CryptoComedyClubDividendTracker is DividendPayingToken {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeMathInt for int256;\r\n\tusing IterableMapping for IterableMapping.Map;\r\n\r\n\tIterableMapping.Map private tokenHoldersMap;\r\n\r\n\tuint256 public lastProcessedIndex;\r\n\tmapping (address => bool) public excludedFromDividends;\r\n\tmapping (address => uint256) public lastClaimTimes;\r\n\tuint256 public claimWait;\r\n\tuint256 public minimumTokenBalanceForDividends;\r\n\r\n\tevent ExcludeFromDividends(address indexed account);\r\n\tevent ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n\tevent Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n\r\n\tconstructor() public DividendPayingToken(\"CryptoComedyClub_Dividend_Tracker\", \"CryptoComedyClub_Dividend_Tracker\") {\r\n\t\tclaimWait = 3600;\r\n\t\tminimumTokenBalanceForDividends = 0 * (10**18);\r\n\t}\r\n    function setRewardToken(address token) external onlyOwner {\r\n\t\t_setRewardToken(token);\r\n\t}\r\n\tfunction _transfer(address, address, uint256) internal override {\r\n\t\trequire(false, \"CryptoComedyClub_Dividend_Tracker: No transfers allowed\");\r\n\t}\r\n\tfunction excludeFromDividends(address account) external onlyOwner {\r\n\t\trequire(!excludedFromDividends[account]);\r\n\t\texcludedFromDividends[account] = true;\r\n\t\t_setBalance(account, 0);\r\n\t\ttokenHoldersMap.remove(account);\r\n\t\temit ExcludeFromDividends(account);\r\n\t}\r\n\tfunction setTokenBalanceForDividends(uint256 newValue) external onlyOwner {\r\n\t\trequire(minimumTokenBalanceForDividends != newValue, \"CryptoComedyClub_Dividend_Tracker: minimumTokenBalanceForDividends already the value of 'newValue'.\");\r\n\t\tminimumTokenBalanceForDividends = newValue;\r\n\t}\r\n\tfunction updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n\t\trequire(newClaimWait >= 3600 && newClaimWait <= 86400, \"CryptoComedyClub_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n\t\trequire(newClaimWait != claimWait, \"CryptoComedyClub_Dividend_Tracker: Cannot update claimWait to same value\");\r\n\t\temit ClaimWaitUpdated(newClaimWait, claimWait);\r\n\t\tclaimWait = newClaimWait;\r\n\t}\r\n\tfunction getLastProcessedIndex() external view returns(uint256) {\r\n\t\treturn lastProcessedIndex;\r\n\t}\r\n\tfunction getNumberOfTokenHolders() external view returns(uint256) {\r\n\t\treturn tokenHoldersMap.keys.length;\r\n\t}\r\n\tfunction getAccount(address _account)\r\n\t\tpublic view returns (\r\n\t\taddress account,\r\n\t\tint256 index,\r\n\t\tint256 iterationsUntilProcessed,\r\n\t\tuint256 withdrawableDividends,\r\n\t\tuint256 totalDividends,\r\n\t\tuint256 lastClaimTime,\r\n\t\tuint256 nextClaimTime,\r\n\t\tuint256 secondsUntilAutoClaimAvailable) {\r\n\t\t\taccount = _account;\r\n\r\n\t\t\tindex = tokenHoldersMap.getIndexOfKey(account);\r\n\t\t\titerationsUntilProcessed = -1;\r\n\t\t\tif(index >= 0) {\r\n\t\t\t\tif(uint256(index) > lastProcessedIndex) {\r\n\t\t\t\t\titerationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tuint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ? tokenHoldersMap.keys.length.sub(lastProcessedIndex) : 0;\r\n\t\t\t\t\titerationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\twithdrawableDividends = withdrawableDividendOf(account);\r\n\t\t\ttotalDividends = accumulativeDividendOf(account);\r\n\t\t\tlastClaimTime = lastClaimTimes[account];\r\n\t\t\tnextClaimTime = lastClaimTime > 0 ? lastClaimTime.add(claimWait) : 0;\r\n\t\t\tsecondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime.sub(block.timestamp) : 0;\r\n\t}\r\n\tfunction getAccountAtIndex(uint256 index)\r\n\t\tpublic view returns (\r\n\t\taddress,\r\n\t\tint256,\r\n\t\tint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256,\r\n\t\tuint256) {\r\n\t\t\tif(index >= tokenHoldersMap.size()) {\r\n\t\t\t\treturn (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n\t\t\t}\r\n\t\t\taddress account = tokenHoldersMap.getKeyAtIndex(index);\r\n\t\t\treturn getAccount(account);\r\n\t}\r\n\tfunction canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n\t\tif(lastClaimTime > block.timestamp)  {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n\t}\r\n\tfunction setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n\t\tif(excludedFromDividends[account]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(newBalance >= minimumTokenBalanceForDividends) {\r\n\t\t\t_setBalance(account, newBalance);\r\n\t\t\ttokenHoldersMap.set(account, newBalance);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t_setBalance(account, 0);\r\n\t\t\ttokenHoldersMap.remove(account);\r\n\t\t}\r\n\t\tprocessAccount(account, true);\r\n\t}\r\n\tfunction process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n\t\tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\t\tif(numberOfTokenHolders == 0) {\r\n\t\t\treturn (0, 0, lastProcessedIndex);\r\n\t\t}\r\n\r\n\t\tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 claims = 0;\r\n\r\n\t\twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n\t\t\t_lastProcessedIndex++;\r\n\t\t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n\t\t\t\t_lastProcessedIndex = 0;\r\n\t\t\t}\r\n\t\t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\t\t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n\t\t\t\tif(processAccount(payable(account), true)) {\r\n\t\t\t\t\tclaims++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\titerations++;\r\n\t\t\tuint256 newGasLeft = gasleft();\r\n\t\t\tif(gasLeft > newGasLeft) {\r\n\t\t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n\t\t\t}\r\n\t\t\tgasLeft = newGasLeft;\r\n\t\t}\r\n\t\tlastProcessedIndex = _lastProcessedIndex;\r\n\t\treturn (iterations, claims, lastProcessedIndex);\r\n\t}\r\n\r\n\tfunction processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n\t\tuint256 amount = _withdrawDividendOfUser(account);\r\n\t\tif(amount > 0) {\r\n\t\t\tlastClaimTimes[account] = block.timestamp;\r\n\t\t\temit Claim(account, amount, automatic);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"AllowedWhenTradingDisabledChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AutomatedMarketMakerPairChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BlockedAccountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBOverflow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"taxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes23\",\"name\":\"period\",\"type\":\"bytes23\"}],\"name\":\"CustomTaxPeriodChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"DividendTrackerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"}],\"name\":\"DividendsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFeesChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromMaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"talentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev1Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev2Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev3Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev4Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFee\",\"type\":\"uint256\"}],\"name\":\"FeeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"FeeOnSelectedWalletTransfersChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"FeeOnWalletTransferChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"talentFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev1Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev2Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev3Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dev4Fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"holdersFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"FeesApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxTransactionAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MaxWalletAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountBeforeSwapChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"MinTokenAmountForDividendsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"oldValue\",\"type\":\"bool\"}],\"name\":\"RoflHourChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"walletIdentifier\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"WalletChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowTradingWhenDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelRoflHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBNBOverflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev1Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev2Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev3Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev4Wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract CryptoComedyClubDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRofl1BuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRofl1SellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRofl2BuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRofl2SellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInRoflHour\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllFeesToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_talentFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev1FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev3FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev4FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setBaseFeesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_talentFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev1FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev3FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev4FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setBaseFeesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnSelectedWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeOnWalletTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setRoflHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_talentFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev1FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev3FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev4FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setRoflHour1BuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_talentFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev1FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev3FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev4FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setRoflHour1SellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_talentFeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev1FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev3FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev4FeeOnBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnBuy\",\"type\":\"uint256\"}],\"name\":\"setRoflHour2BuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_talentFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev1FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev2FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev3FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev4FeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdersFeeOnSell\",\"type\":\"uint256\"}],\"name\":\"setRoflHour2SellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTalentWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDev1Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDev2Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDev3Wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDev4Wallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"talentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeSinceLastRoflHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CryptoComedyClub", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:6818b8ea4c516c9e5a4633c1845944accce211a0", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f9e29b321b93e97cb203b42ac4cd4c411a981f0506565e35f2bc2bd184a543c5"}