{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/Babylonian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n *        __                   __\\n *       / /   ___  ___  _____/ /_\\n *      / /   / _ \\\\/ _ \\\\/ ___/ __ \\\\\\n *     / /___/  __/  __/ /__/ / / / v.0.2-beta\\n *    /_____/\\\\___/\\\\___/\\\\___/_/ /_/           __\\n *    / __ \\\\_________  / /_____  _________  / /\\n *   / /_/ / ___/ __ \\\\/ __/ __ \\\\/ ___/ __ \\\\/ /\\n *  / ____/ /  / /_/ / /_/ /_/ / /__/ /_/ / /\\n * /_/   /_/   \\\\____/\\\\__/\\\\____/\\\\___/\\\\____/_/\\n *\\n * @title Leech Protocol helpers and utilities.\\n * @author Leech Protocol (https://app.leechprotocol.com/).\\n * @custom:version 0.2-beta.\\n * @custom:security Found vulnerability? Get reward here bounty@leechprotocol.com.\\n */\\nlibrary Helpers {\\n    /// @dev SafeERC20 library from OpenZeppelin.\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice For decimals (1 = 0.01).\\n    uint16 public constant DENOMINATOR = 10000;\\n\\n    /// @notice Leech Protocol fee is limited by 20%.\\n    uint16 public constant MAX_FEE = 2000;\\n\\n    /// @notice Percent is more than denominator or max fee amount.\\n    error PercentExeedsMaximalValue();\\n\\n    /**\\n     * @notice Calc protocol fee amount.\\n     * @param amount Full amount.\\n     * @param fees Slippage percent.\\n     * @return Fee amount.\\n     */\\n    function calcFee(\\n        uint256 amount,\\n        uint16 fees\\n    ) external pure returns (uint256) {\\n        if (fees == 0) return 0;\\n        if (fees > MAX_FEE) revert PercentExeedsMaximalValue();\\n\\n        return (amount * fees) / DENOMINATOR;\\n    }\\n\\n    /**\\n     * @notice Calc minAmount for tokens swap.\\n     * @param amount Full amount.\\n     * @param slippage Slippage tolerance percentage (1% = 100).\\n     * @return Minimal token amount after swap.\\n     */\\n    function withSlippage(\\n        uint256 amount,\\n        uint16 slippage\\n    ) external pure returns (uint256) {\\n        if (slippage == 0) return amount;\\n        if (slippage > DENOMINATOR) revert PercentExeedsMaximalValue();\\n\\n        return amount - ((amount * slippage) / DENOMINATOR);\\n    }\\n\\n    /**\\n     * @notice Converts \\\"abi.encode(address)\\\" string back to address.\\n     * @param b Bytes with address.\\n     * @return decoded Recovered address.\\n     */\\n    function toAddress(\\n        bytes calldata b\\n    ) external pure returns (address decoded) {\\n        decoded = abi.decode(b, (address));\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw for stuck tokens.\\n     * @param token Token instance.\\n     */\\n    function rescue(IERC20 token) external {\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Approve tokens for external contract.\\n     * @param token Token instance.\\n     * @param to Address to be approved.\\n     */\\n    function approveAll(IERC20 token, address to) external {\\n        if (token.allowance(address(this), to) != type(uint256).max) {\\n            token.forceApprove(address(to), type(uint256).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/BaseFarmStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IBaseFarmStrategy.sol\\\";\\nimport \\\"./ILeechRouter.sol\\\";\\n\\n//        __                   __\\n//       / /   ___  ___  _____/ /_\\n//      / /   / _ \\\\/ _ \\\\/ ___/ __ \\\\  Leech\\n//     / /___/  __/  __/ /__/ / / / Protocol\\n//    /_____/\\\\___/\\\\___/\\\\___/_/ /_/           __\\n//    / __ \\\\_________  / /_____  _________  / /\\n//   / /_/ / ___/ __ \\\\/ __/ __ \\\\/ ___/ __ \\\\/ /\\n//  / ____/ /  / /_/ / /_/ /_/ / /__/ /_/ / /\\n// /_/   /_/   \\\\____/\\\\__/\\\\____/\\\\___/\\\\____/_/\\n\\n/**\\n * @title Base farming strategy.\\n * @author Leech Protocol (https://app.leechprotocol.com/).\\n * @custom:version v1.0.0.\\n * @custom:security Found vulnerability? Get reward (bounty@leechprotocol.com).\\n * @custom:oz-upgrades-unsafe-allow external-library-linking\\n */\\n\\nabstract contract BaseFarmStrategy is\\n    OwnableUpgradeable,\\n    IBaseFarmStrategy\\n{\\n    /// @dev SafeERC20 library from OpenZeppelin.\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The protocol fee limit is 12%.\\n    uint16 public constant MAX_FEE = 1200;\\n\\n    /// @notice Used for fractional part (1 = 0.01)\\n    uint16 public constant DENOMINATOR = 10000;\\n\\n    /// @notice Address of Leech's backend.\\n    address public controller;\\n\\n    /// @notice Address of LeechRouter.\\n    address public router;\\n\\n    /// @notice Treasury address.\\n    address public treasury;\\n\\n    /// @notice Leech's comission.\\n    uint16 public protocolFee;\\n\\n    /// @notice Sum of all pools shares.\\n    uint256 public totalAllocation;\\n\\n    /// @notice Swap slippage.\\n    uint16 public slippage; // 1% by default\\n\\n    /// @dev Re-entrancy lock.\\n    bool private locked;\\n\\n    /// @notice Share of pool\\n    /// @dev poolId => allocPoints\\n    mapping(uint16 => uint256) public allocationOf;\\n\\n    /// @dev Limit access for the LeechRouter only.\\n    modifier onlyRouter() {\\n        if (msg.sender != router) revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @dev Unsigned integer should be great than zero.\\n    modifier notZeroAmount(uint256 amountToCheck) {\\n        if (amountToCheck == 0) revert ZeroAmount();\\n        _;\\n    }\\n\\n    /// @dev Address shouldn't be empty.\\n    modifier notZeroAddress(address addressToCheck) {\\n        if (addressToCheck == address(0)) revert ZeroAddress();\\n        _;\\n    }\\n\\n    /// @dev Re-entrancy lock\\n    modifier lock() {\\n        if (locked) revert Reentrancy();\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @notice Take fees and re-invests rewards.\\n     */\\n    function autocompound(uint16) public virtual {\\n        // Revert if protocol paused\\n        if (ILeechRouter(router).paused()) revert OnPause();\\n    }\\n\\n    /**\\n     * @notice Move liquidity to another strategy.\\n     * @param pool Pool ID.\\n     * @param _slippage Slippage tolerance.\\n     * @param data Additional params.\\n     * @return amountOut Withdraw token amount.\\n     */\\n    function migrate(\\n        uint16 pool,\\n        uint16 _slippage,\\n        bytes memory data\\n    ) external onlyRouter returns (uint256 amountOut) {\\n        // Calc amount in LP tokens\\n        uint256 _lpAmount = (balance() * allocationOf[pool]) / totalAllocation;\\n        // Reduce shares if not migration\\n        totalAllocation -= allocationOf[pool];\\n        allocationOf[pool] = 0;\\n        // Withdraw to, amount, path1...\\n        amountOut = _withdraw(\\n            _lpAmount,\\n            IERC20(ILeechRouter(router).base()),\\n            data,\\n            _slippage\\n        );\\n    }\\n\\n    /**\\n     * @notice Depositing into the farm pool.\\n     * @dev Only LeechRouter can call this function.\\n     * @dev Re-entrancy lock on the LeechRouter side.\\n     * @param poolId Pool identifier.\\n     * @param depositToken Incoming token.\\n     * @param data Additional data.\\n     * @return share Deposit allocation.\\n     */\\n    function deposit(\\n        uint16 poolId,\\n        IERC20 depositToken,\\n        bytes memory data\\n    ) public virtual onlyRouter returns (uint256 share) {\\n        // Get external LP amount\\n        share = _deposit(data, depositToken);\\n        // Balance of LP before deposit\\n        uint256 _initialBalance = balance() - share;\\n        // Second+ deposit\\n        if (totalAllocation != 0 && _initialBalance != 0) {\\n            // Calc deposit share\\n            share = (share * totalAllocation) / _initialBalance;\\n        }\\n        // Revert is nothing to deposit\\n        if (share == 0) revert ZeroAmount();\\n        // Update pool allocation\\n        allocationOf[poolId] += share;\\n        // Update total allcation\\n        totalAllocation += share;\\n    }\\n\\n    /**\\n     * @notice Withdrawing staking token (LP) from the strategy.\\n     * @dev Can only be called by LeechRouter.\\n     * @dev Re-entrancy lock on the LeechRouter side.\\n     * @param poolId Pool identifier.\\n     * @param shares Amount of the strategy shares to be withdrawn.\\n     * @param tokenOut Token to be swapped to.\\n     * @param data Output token encoded to bytes string.\\n     * @return tokenOutAmount Amount of the token returned to LeechRouter.\\n     */\\n    function withdraw(\\n        uint16 poolId,\\n        uint256 shares,\\n        IERC20 tokenOut,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        onlyRouter\\n        notZeroAmount(shares)\\n        returns (uint256 tokenOutAmount)\\n    {\\n        // Is amount more than pool have?\\n        if (shares > allocationOf[poolId]) revert BadAmount();\\n        // Calc amount in LP tokens\\n        uint256 _lpAmount = (balance() * shares) / totalAllocation;\\n        // Reduce shares if not migration\\n        allocationOf[poolId] -= shares;\\n        totalAllocation -= shares;\\n        // Return amount of tokenOut\\n        tokenOutAmount = _withdraw(_lpAmount, tokenOut, data, slippage);\\n    }\\n\\n    /**\\n     * @notice Sets fee taken by the Leech protocol.\\n     * @dev Only owner can set the protocol fee.\\n     * @param _fee Fee value.\\n     */\\n    function setFee(uint16 _fee) external virtual onlyOwner {\\n        if (_fee > MAX_FEE) revert BadAmount();\\n        protocolFee = _fee;\\n    }\\n\\n    /**\\n     * @notice Sets the tresury address.\\n     * @dev Only owner can set the treasury address.\\n     * @param _treasury The address to be set.\\n     */\\n    function setTreasury(address _treasury) external virtual onlyOwner {\\n        if (_treasury == address(0)) revert ZeroAddress();\\n        treasury = _treasury;\\n    }\\n\\n    /**\\n     * @notice Sets the controller address.\\n     * @dev Only owner can set the controller address.\\n     * @param _controller The address to be set.\\n     */\\n    function setController(address _controller) external virtual onlyOwner {\\n        if (_controller == address(0)) revert ZeroAddress();\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Sets slippage tolerance.\\n     * @dev Only owner can set the slippage tolerance.\\n     * @param _slippage Slippage percent (1 == 0.01%).\\n     */\\n    function setSlippage(uint16 _slippage) external virtual onlyOwner {\\n        if (_slippage > DENOMINATOR) revert SlippageTooHigh();\\n        if (_slippage == 0) revert ZeroAmount();\\n        slippage = _slippage;\\n    }\\n\\n    /**\\n     * @notice Function returns estimated amount of token out from the LP withdrawn LP amount.\\n     * @param shares Amount of shares.\\n     * @param token0toTokenOut Path to output token.\\n     * @param token1toTokenOut Path to output token.\\n     * @param data Additional params.\\n     * @param price0 Price of token0.\\n     * @param price1 Price of token1.\\n     */\\n    function quotePotentialWithdraw(\\n        uint256 shares,\\n        address[] calldata token0toTokenOut,\\n        address[] calldata token1toTokenOut,\\n        bytes calldata data,\\n        uint256 price0,\\n        uint256 price1\\n    ) public view virtual returns (uint256 amountOut) {}\\n\\n    /**\\n     * @notice Address of base token.\\n     * @return Base token address.\\n     */\\n    function base() public view virtual returns (address) {\\n        return ILeechRouter(router).base();\\n    }\\n\\n    /**\\n     * @notice Amount of LPs staked into Masterchef.\\n     * @return amount LP amount.\\n     */\\n    function balance() public view virtual returns (uint256 amount) {}\\n\\n    /**\\n     * @notice Amounts of pending rewards.\\n     * @return tokens Array of reward tokens.\\n     * @return amounts Array of reward amounts.\\n     */\\n    function claimable()\\n        public\\n        view\\n        virtual\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {}\\n\\n    /**\\n     * @dev Depositing into the farm pool.\\n     * @return share External pool deposit LP amount.\\n     */\\n    function _deposit(\\n        bytes memory,\\n        IERC20\\n    ) internal virtual returns (uint256 share) {}\\n\\n    /**\\n     * @dev Withdrawing staking token (LP) from the strategy.\\n     * @return tokenOutAmount Amount of the token returned to LeechRouter.\\n     */\\n    function _withdraw(\\n        uint256,\\n        IERC20,\\n        bytes memory,\\n        uint16\\n    ) internal virtual returns (uint256 tokenOutAmount) {}\\n}\"\r\n    },\r\n    \"contracts/strategies/IBaseFarmStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBaseFarmStrategy {\\n    /// @dev Universal instalation params.\\n    struct InstallParams {\\n        address controller;\\n        address router;\\n        address treasury;\\n        uint16 protocolFee;\\n        uint16 slippage;\\n    }\\n\\n    /// @dev Emitted when reards get autocompounded.\\n    event Compounded(uint256 rewardAmount, uint256 fee);\\n\\n    /// @dev Caller unauthorized.\\n    error Unauthorized();\\n\\n    /// @dev Unexpected token address.\\n    error BadToken();\\n\\n    /// @dev Strategy disabled.\\n    error NotActive();\\n\\n    /// @dev Amount is zero.\\n    error ZeroAmount();\\n\\n    /// @dev Address is zero.\\n    error ZeroAddress();\\n\\n    /// @dev Protocol paused.\\n    error OnPause();\\n\\n    /// @dev Slippage too big.\\n    error SlippageProtection();\\n\\n    /// @dev Slippage percentage too big.\\n    error SlippageTooHigh();\\n\\n    /// @dev Wrong amount.\\n    error BadAmount();\\n\\n    /// @dev Strategy disabled.\\n    error StrategyDisabled();\\n\\n    /// @dev Different size of arrays.\\n    error ArrayDifferentLength();\\n\\n    /// @dev No rewards to claim.\\n    error NoRewardsAvailable();\\n\\n    /// @dev Reentrancy detected.\\n    error Reentrancy();\\n\\n    function balance() external view returns (uint256);\\n\\n    function claimable()\\n        external\\n        view\\n        returns (address[] memory tokens, uint256[] memory amounts);\\n\\n    function deposit(\\n        uint16 poolId,\\n        IERC20 depositToken,\\n        bytes memory data\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        uint16 poolId,\\n        uint256 shares,\\n        IERC20 tokenOut,\\n        bytes memory data\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Move liquidity to another strategy.\\n     * @param pool Pool ID.\\n     * @param _slippage Slippage tolerance.\\n     * @param data Additional params.\\n     * @return amountOut Withdraw token amount.\\n     */\\n    function migrate(\\n        uint16 pool,\\n        uint16 _slippage,\\n        bytes memory data\\n    ) external returns (uint256 amountOut);\\n\\n    function autocompound(uint16 slippage) external;\\n\\n    function quotePotentialWithdraw(\\n        uint256 shares,\\n        address[] calldata path1,\\n        address[] calldata path2,\\n        bytes calldata data,\\n        uint256 price1,\\n        uint256 price2\\n    ) external view returns (uint256 amountOut);\\n\\n    function allocationOf(uint16 poolId) external view returns (uint256);\\n\\n    function totalAllocation() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/strategies/ILeechRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ILeechRouter {\\n    function base() external view returns (address);\\n\\n    function paused() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/strategies/Thena/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"contracts/strategies/Thena/IGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IGauge {\\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Harvest(address indexed user, uint256 reward);\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n    event RewardAdded(uint256 reward);\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    function DISTRIBUTION() external view returns (address);\\n\\n    function DURATION() external view returns (uint256);\\n\\n    function TOKEN() external view returns (address);\\n\\n    function _VE() external view returns (address);\\n\\n    function _balances(address) external view returns (uint256);\\n\\n    function _periodFinish() external view returns (uint256);\\n\\n    function _totalSupply() external view returns (uint256);\\n\\n    function activateEmergencyMode() external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function depositAll() external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function emergency() external view returns (bool);\\n\\n    function emergencyWithdraw() external;\\n\\n    function emergencyWithdrawAmount(uint256 _amount) external;\\n\\n    function external_bribe() external view returns (address);\\n\\n    function feeVault() external view returns (address);\\n\\n    function fees0() external view returns (uint256);\\n\\n    function fees1() external view returns (uint256);\\n\\n    function gaugeRewarder() external view returns (address);\\n\\n    function getReward() external;\\n\\n    function getReward(address _user) external;\\n\\n    function internal_bribe() external view returns (address);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    function notifyRewardAmount(address token, uint256 reward) external;\\n\\n    function owner() external view returns (address);\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function rewardForDuration() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function rewarderPid() external view returns (uint256);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function setDistribution(address _distribution) external;\\n\\n    function setFeeVault(address _feeVault) external;\\n\\n    function setGaugeRewarder(address _gaugeRewarder) external;\\n\\n    function setInternalBribe(address _int) external;\\n\\n    function setRewarderPid(uint256 _pid) external;\\n\\n    function stopEmergencyMode() external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function withdrawAll() external;\\n\\n    function withdrawAllAndHarvest() external;\\n}\"\r\n    },\r\n    \"contracts/strategies/Thena/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface IAlgebraQuoter {\\n    function quoteExactInput(\\n        bytes memory path,\\n        uint amountIn\\n    ) external returns (uint amountOut, uint16[] memory fees);\\n}\\n\\ninterface IGammaUniProxy {\\n    function clearance() external view returns (address);\\n\\n    function getDepositAmount(\\n        address pos,\\n        address token,\\n        uint _deposit\\n    ) external view returns (uint amountStart, uint amountEnd);\\n\\n    function deposit(\\n        uint deposit0,\\n        uint deposit1,\\n        address to,\\n        address pos,\\n        uint[4] memory minIn\\n    ) external returns (uint shares);\\n}\\n\\ninterface IAlgebraPool {\\n    function pool() external view returns (address);\\n\\n    function globalState() external view returns (uint);\\n}\\n\\ninterface IHypervisor {\\n    function whitelistedAddress() external view returns (address uniProxy);\\n\\n    function withdraw(\\n        uint256 shares,\\n        address to,\\n        address from,\\n        uint256[4] memory minAmounts\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function balanceOf(address _address) external view returns (uint256);\\n\\n    function getTotalAmounts() external view returns (uint256, uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IV1Pair {\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/strategies/Thena/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\ninterface ISwapRouter {\\n    function WNativeToken() external view returns (address);\\n\\n    function algebraSwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes memory _data\\n    ) external;\\n\\n    function exactInput(ISwapRouter.ExactInputParams memory params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function exactInputSingle(ISwapRouter.ExactInputSingleParams memory params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function exactInputSingleSupportingFeeOnTransferTokens(\\n        ISwapRouter.ExactInputSingleParams memory params\\n    ) external returns (uint256 amountOut);\\n\\n    function exactOutput(ISwapRouter.ExactOutputParams memory params)\\n        external\\n        payable\\n        returns (uint256 amountIn);\\n\\n    function exactOutputSingle(\\n        ISwapRouter.ExactOutputSingleParams memory params\\n    ) external payable returns (uint256 amountIn);\\n\\n    function factory() external view returns (address);\\n\\n    function multicall(bytes[] memory data)\\n        external\\n        payable\\n        returns (bytes[] memory results);\\n\\n    function poolDeployer() external view returns (address);\\n\\n    function refundNativeToken() external payable;\\n\\n    function selfPermit(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function selfPermitAllowed(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function selfPermitAllowedIfNecessary(\\n        address token,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function selfPermitIfNecessary(\\n        address token,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n\\n    function sweepTokenWithFee(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient,\\n        uint256 feeBips,\\n        address feeRecipient\\n    ) external payable;\\n\\n    function unwrapWNativeToken(uint256 amountMinimum, address recipient)\\n        external\\n        payable;\\n\\n    function unwrapWNativeTokenWithFee(\\n        uint256 amountMinimum,\\n        address recipient,\\n        uint256 feeBips,\\n        address feeRecipient\\n    ) external payable;\\n\\n    receive() external payable;\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 limitSqrtPrice;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 limitSqrtPrice;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/Thena/StrategyThena.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./IPool.sol\\\";\\nimport \\\"./ISwapRouter.sol\\\";\\nimport \\\"./IGauge.sol\\\";\\nimport \\\"./IERC20Metadata.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/Babylonian.sol\\\";\\nimport \\\"./../../libraries/Helpers.sol\\\";\\nimport \\\"./../BaseFarmStrategy.sol\\\";\\n\\n//        __                   __\\n//       / /   ___  ___  _____/ /_\\n//      / /   / _ \\\\/ _ \\\\/ ___/ __ \\\\  Leech\\n//     / /___/  __/  __/ /__/ / / / Protocol\\n//    /_____/\\\\___/\\\\___/\\\\___/_/ /_/ Strategy  __\\n//    / __ \\\\_________  / /_____  _________  / /\\n//   / /_/ / ___/ __ \\\\/ __/ __ \\\\/ ___/ __ \\\\/ /\\n//  / ____/ /  / /_/ / /_/ /_/ / /__/ /_/ / /\\n// /_/   /_/   \\\\____/\\\\__/\\\\____/\\\\___/\\\\____/_/\\n\\n/**\\n * @title Leech Protocol farming strategy for Thena.\\n * @author Leech Protocol (https://app.leechprotocol.com/).\\n * @notice Only for the stable pairs on Thena.\\n * @custom:version 0.2-beta.\\n * @custom:network BSC (chainId 56).\\n * @custom:security Found vulnerability? Get reward (bounty@leechprotocol.com).\\n */\\ncontract StrategyThena is BaseFarmStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev To extract address from bytes.\\n    using Helpers for bytes;\\n\\n    /// @dev To calc slippage.\\n    using Helpers for uint256;\\n\\n    /// @dev For max approve.\\n    using Helpers for IERC20;\\n\\n    /// @notice Thena uniProxy contract\\n    IGammaUniProxy public constant uniProxy =\\n        IGammaUniProxy(0xF75c017E3b023a593505e281b565ED35Cc120efa);\\n\\n    /// @notice Thena router\\n    ISwapRouter public constant SwapRouter =\\n        ISwapRouter(payable(0x327Dd3208f0bCF590A66110aCB6e5e6941A4EfA0));\\n\\n    /// @notice Thena quoter contract\\n    IAlgebraQuoter public constant quoter =\\n        IAlgebraQuoter(0xeA68020D6A9532EeC42D4dB0f92B83580c39b2cA);\\n\\n    /// @notice Pool reward.\\n    IERC20 public constant rewardToken =\\n        IERC20(0xF4C8E32EaDEC4BFe97E0F595AdD0f4450a863a11);\\n\\n    /// @notice Thena wUSDR-USDC gauge\\n    IGauge public gauge;\\n\\n    /// @notice v1 vollatile pair\\n    IV1Pair public v1Pool;\\n\\n    /// @notice fusion pair\\n    IHypervisor public want;\\n\\n    /// @notice fusion pool\\n    IAlgebraPool public pool;\\n\\n    /// @notice First token of the pair.\\n    IERC20 public token0;\\n\\n    /// @notice First token of the pair.\\n    IERC20 public token1;\\n\\n    /// @notice Tether address\\n    IERC20 public baseToken;\\n\\n    /// @notice Route pathes\\n    /// @dev tokenIn => tokenOut => Velodrome routes array\\n    mapping(IERC20 => mapping(IERC20 => bytes)) public routes;\\n\\n    /**\\n     * @notice Executes on contract deployment.\\n     * @param params General strategy parameters.\\n     * @param _token0 First token of the pair.\\n     * @param _token1 Second token of the pair.\\n     */\\n    function initialize(\\n        InstallParams memory params,\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        IGauge _gauge,\\n        IV1Pair _v1Pool,\\n        IHypervisor _want,\\n        IAlgebraPool _pool\\n    ) external initializer {\\n        __Ownable_init();\\n        (controller, router, treasury, protocolFee, slippage) = (\\n            params.controller,\\n            params.router,\\n            params.treasury,\\n            params.protocolFee,\\n            params.slippage\\n        );\\n        (token0, token1, gauge, v1Pool, want, pool) = (\\n            _token0,\\n            _token1,\\n            _gauge,\\n            _v1Pool,\\n            _want,\\n            _pool\\n        );\\n        // Approve for staking\\n        IERC20(address(want)).approveAll(address(gauge));\\n\\n        // Approve for pool\\n        token0.approveAll(address(want));\\n        token1.approveAll(address(want));\\n\\n        // Approves for router\\n        baseToken = IERC20(ILeechRouter(router).base());\\n        baseToken.approveAll(address(SwapRouter));\\n        token0.approveAll(address(SwapRouter));\\n        token1.approveAll(address(SwapRouter));\\n        rewardToken.approveAll(address(SwapRouter));\\n\\n        routes[rewardToken][baseToken] = abi.encodePacked(\\n            address(rewardToken),\\n            0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c,\\n            address(baseToken)\\n        );\\n        routes[token0][token1] = abi.encodePacked(\\n            address(token0),\\n            address(token1)\\n        );\\n        routes[token1][token0] = abi.encodePacked(\\n            address(token1),\\n            address(token0)\\n        );\\n        routes[token0][baseToken] = abi.encodePacked(\\n            address(token0),\\n            address(baseToken)\\n        );\\n        routes[token1][baseToken] = abi.encodePacked(\\n            address(token1),\\n            address(token0),\\n            address(baseToken)\\n        );\\n        routes[baseToken][token0] = abi.encodePacked(\\n            address(baseToken),\\n            address(token0)\\n        );\\n        routes[baseToken][token1] = abi.encodePacked(\\n            address(baseToken),\\n            address(token0),\\n            address(token1)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sets pathes for tokens swap.\\n     * @dev Only owner can set a pathes.\\n     * @param tokenIn From token.\\n     * @param tokenOut To token.\\n     * @param path BSW routes array.\\n     */\\n    function setRoutes(\\n        IERC20 tokenIn,\\n        IERC20 tokenOut,\\n        bytes calldata path\\n    ) external onlyOwner {\\n        routes[tokenIn][tokenOut] = path;\\n    }\\n\\n    /**\\n     * @notice Re-invests rewards.\\n     */\\n    function autocompound(uint16) public override {\\n        // Execute parent\\n        super.autocompound(0);\\n        // Mint rewards\\n        gauge.getReward();\\n\\n        // Get reward amount\\n        uint256 rewardBal = rewardToken.balanceOf(address(this));\\n        // Swap rewards to USDT\\n        _swap(routes[rewardToken][baseToken], rewardBal);\\n        uint256 balanceOfBase = baseToken.balanceOf(address(this));\\n        // Calc fee\\n        uint256 fee = (balanceOfBase * protocolFee) / DENOMINATOR;\\n        // Send fee to the treasury\\n        baseToken.safeTransfer(treasury, fee);\\n        // Re-invest reward\\n        balanceOfBase = baseToken.balanceOf(address(this));\\n        _deposit(\\\"\\\", baseToken);\\n        // Notify services\\n        emit Compounded(rewardBal, fee);\\n    }\\n\\n    \\n    /**\\n     * @notice Function returns estimated amount of token out from the LP withdrawn LP amount.\\n     * @param shares Amount of shares.\\n     */\\n    function quotePotentialWithdrawV2(\\n        uint256 shares,\\n        address[] calldata,\\n        address[] calldata,\\n        bytes calldata,\\n        uint256,\\n        uint256\\n    ) public returns (uint256 amountOut) {\\n        // Convert shares to LP amount\\n        uint256 wantBalance = (balance() * shares) / totalAllocation;\\n        // Get pool reserves\\n        (uint256 reserve0, uint256 reserve1) = want.getTotalAmounts();\\n        // Get pool total supply\\n        uint256 totalSupply = want.totalSupply();\\n        // Amount of token0\\n        uint256 token0Amount = (wantBalance * reserve0) / totalSupply;\\n        // Amount of token1\\n        uint256 token1Amount = (wantBalance * reserve1) / totalSupply;\\n        // A bit of calculations\\n        (uint256 swappedAmountOut,) = quoter.quoteExactInput(routes[token1][token0], token1Amount);\\n        amountOut += swappedAmountOut;\\n        amountOut += token0Amount;\\n    }\\n\\n    /**\\n     * @notice Amount of LPs staked into Masterchef\\n     * @return amountWant Amount in want token\\n     */\\n    function balance() public view override returns (uint256 amountWant) {\\n        amountWant = gauge.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Function returns estimated amount of token out from the LP withdrawn LP amount.\\n     * @param shares Amount of shares.\\n     */\\n    function quotePotentialWithdraw(\\n        uint256 shares,\\n        address[] calldata,\\n        address[] calldata,\\n        bytes calldata,\\n        uint256,\\n        uint256\\n    ) public view override returns (uint256 amountOut) {\\n        // Convert shares to LP amount\\n        uint256 wantBalance = (balance() * shares) / totalAllocation;\\n        // Get pool reserves\\n        (uint256 reserve0, uint256 reserve1) = want.getTotalAmounts();\\n        // Get pool total supply\\n        uint256 totalSupply = want.totalSupply();\\n        // Amount of token0\\n        uint256 token0Amount = (wantBalance * reserve0) / totalSupply;\\n        // Amount of token1\\n        uint256 token1Amount = (wantBalance * reserve1) / totalSupply;\\n        // A bit of calculations\\n        uint256 pricePerToken1 = v1Pool.getAmountOut(\\n            10 ** IERC20Metadata(0x2952beb1326acCbB5243725bd4Da2fC937BCa087).decimals(),\\n            0x2952beb1326acCbB5243725bd4Da2fC937BCa087\\n        );\\n        amountOut +=\\n            (token1Amount * pricePerToken1) /\\n            10 ** (18 - IERC20Metadata(0x2952beb1326acCbB5243725bd4Da2fC937BCa087).decimals());\\n        amountOut += token0Amount;\\n    }\\n\\n    /**\\n     * @notice Amount of pending rewards\\n     */\\n    function claimable()\\n        public\\n        view\\n        override\\n        returns (address[] memory tokens, uint256[] memory amounts)\\n    {\\n        tokens = new address[](1);\\n        amounts = new uint256[](1);\\n        tokens[0] = address(rewardToken);\\n        amounts[0] = gauge.earned(address(this));\\n    }\\n\\n    /**\\n     * @notice Depositing into the farm pool.\\n     * @param depositToken Address of the deposit token.\\n     * @return shares Pool share of user.\\n     */\\n    function _deposit(\\n        bytes memory data,\\n        IERC20 depositToken\\n    ) internal override returns (uint256 shares) {\\n        // Check and get path to token0\\n        if (\\n            depositToken != token0 &&\\n            depositToken != token1 &&\\n            depositToken != baseToken &&\\n            depositToken != rewardToken\\n        ) revert BadToken();\\n        // Get balance of deposit token\\n        uint256 tokenBal = depositToken.balanceOf(address(this));\\n        // Revert if zero amount\\n        if (tokenBal == 0) revert(\\\"Nothing to deposit\\\");\\n        // Convert to token1 if needed\\n        if (address(depositToken) != address(baseToken)) {\\n            _swap(routes[depositToken][baseToken], tokenBal);\\n        }\\n        // Swap and add liquidity to the pool\\n        _swapIn();\\n        // Deposit all into farm\\n        shares = want.balanceOf(address(this));\\n        // Check min amount\\n        if (shares < abi.decode(data, (uint256))) revert SlippageProtection();\\n        gauge.deposit(shares);\\n    }\\n\\n    /**\\n     * @notice Withdrawing staking token (LP) from the strategy.\\n     * @dev Can only be called by LeechRouter.\\n     * @dev Re-entrancy lock on the LeechRouter side.\\n     * @param shares Amount of the strategy shares to be withdrawn.\\n     * @param withdrawSlippage Slippage tolerance.\\n     * @return tokenOutAmount Amount of the token returned to LeechRouter.\\n     */\\n    function _withdraw(\\n        uint256 shares,\\n        IERC20 withdrawToken,\\n        bytes memory data,\\n        uint16 withdrawSlippage\\n    ) internal override returns (uint256 tokenOutAmount) {\\n        if (shares == 0) revert ZeroAmount();\\n        // Check if slippage is ok\\n        if (withdrawSlippage == 0) withdrawSlippage = slippage;\\n        gauge.withdraw(shares);\\n        // Disassembly LPs\\n        _swapOut();\\n        // Swap token0 to withdraw token if needed\\n        if (address(token0) != address(withdrawToken)) {\\n            _swap(\\n                routes[token0][withdrawToken],\\n                token0.balanceOf(address(this))\\n            );\\n        }\\n        // Swap token1 to withdraw token if needed\\n        if (address(token1) != address(withdrawToken)) {\\n            _swap(\\n                routes[token1][withdrawToken],\\n                token1.balanceOf(address(this))\\n            );\\n        }\\n        // Get balance of the token\\n        tokenOutAmount = withdrawToken.balanceOf(address(this));\\n        // Check min amount\\n        if (tokenOutAmount < abi.decode(data, (uint256)))\\n            revert SlippageProtection();\\n        // Send to LeechRouter for withdraw\\n        withdrawToken.safeTransfer(router, tokenOutAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps the input token into the liquidity pair.\\n     */\\n    function _swapIn() private {\\n        (uint toLp0, uint toLp1) = _quoteAddLiquidity();\\n        if (baseToken != token0) {\\n            _swap(routes[baseToken][token0], toLp0);\\n        }\\n        if (baseToken != token1) {\\n            _swap(routes[baseToken][token1], toLp1);\\n        }\\n\\n        uint256 lp0Bal = token0.balanceOf(address(this));\\n        uint256 lp1Bal = token1.balanceOf(address(this));\\n        (uint amount1Start, uint amount1End) = uniProxy.getDepositAmount(\\n            address(want),\\n            address(token0),\\n            lp0Bal\\n        );\\n        if (lp1Bal > amount1End) {\\n            lp1Bal = amount1End;\\n        } else if (lp1Bal < amount1Start) {\\n            (, lp0Bal) = uniProxy.getDepositAmount(\\n                address(want),\\n                address(token1),\\n                lp1Bal\\n            );\\n        }\\n\\n        uint[4] memory minIn;\\n        uniProxy.deposit(lp0Bal, lp1Bal, address(this), address(want), minIn);\\n    }\\n\\n    /**\\n     * @dev Remove liquidity\\n     */\\n    function _swapOut() private {\\n        uint256[4] memory zero;\\n        zero[0] = 0;\\n        zero[1] = 0;\\n        zero[2] = 0;\\n        zero[3] = 0;\\n        want.withdraw(\\n            want.balanceOf(address(this)),\\n            address(this),\\n            address(this),\\n            zero\\n        );\\n    }\\n\\n    /**\\n     * @dev uniV3 interface swap helper\\n     * @param _path Swap path for thena router\\n     * @param _amountIn Amount of token to be swapped.\\n     */\\n    function _swap(\\n        bytes memory _path,\\n        uint256 _amountIn\\n    ) private returns (uint256 amountOut) {\\n        (uint256 quoteAmountOut,) = quoter.quoteExactInput(_path, _amountIn);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter\\n            .ExactInputParams({\\n                path: _path,\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountIn: _amountIn,\\n                amountOutMinimum: quoteAmountOut.withSlippage(slippage)\\n            });\\n        return SwapRouter.exactInput(params);\\n    }\\n\\n    /**\\n     * @dev Calculate proportion of the base token to be swapped into token0 and token1\\n     */\\n    function _quoteAddLiquidity()\\n        private\\n        view\\n        returns (uint toLp0, uint toLp1)\\n    {\\n        uint baseBal = baseToken.balanceOf(address(this));\\n        uint ratio;\\n        uint lp0Decimals = 10 ** IERC20Metadata(address(token0)).decimals();\\n        uint lp1Decimals = 10 ** IERC20Metadata(address(token1)).decimals();\\n        uint decimalsDiff = (1e18 * lp0Decimals) / lp1Decimals;\\n        uint decimalsDenominator = decimalsDiff > 1e12 ? 1e6 : 1;\\n        uint sqrtPriceX96 = pool.globalState();\\n        uint price = ((sqrtPriceX96 ** 2 *\\n            (decimalsDiff / decimalsDenominator)) / (2 ** 192)) *\\n            decimalsDenominator;\\n        (uint amountStart, uint amountEnd) = uniProxy.getDepositAmount(\\n            address(want),\\n            address(token0),\\n            lp0Decimals\\n        );\\n        uint amountB = (((amountStart + amountEnd) / 2) * 1e18) / lp1Decimals;\\n        ratio = (amountB * 1e18) / price;\\n        toLp0 = (baseBal * 1e18) / (ratio + 1e18);\\n        toLp1 = baseBal - toLp0;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/Helpers.sol\": {\r\n        \"Helpers\": \"0x1093cd7ff3e1cf46c7e19e882a99a2932b49a952\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"ArrayDifferentLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BadToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRewardsAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageProtection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Compounded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"allocationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"autocompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWant\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"protocolFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"slippage\",\"type\":\"uint16\"}],\"internalType\":\"struct IBaseFarmStrategy.InstallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"contract IGauge\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"contract IV1Pair\",\"name\":\"_v1Pool\",\"type\":\"address\"},{\"internalType\":\"contract IHypervisor\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"contract IAlgebraPool\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"pool\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IAlgebraPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quotePotentialWithdrawV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoter\",\"outputs\":[{\"internalType\":\"contract IAlgebraQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"setRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_slippage\",\"type\":\"uint16\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniProxy\",\"outputs\":[{\"internalType\":\"contract IGammaUniProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v1Pool\",\"outputs\":[{\"internalType\":\"contract IV1Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IHypervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"poolId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StrategyThena", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}