{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\n/*\r\n __   ___  __   ___      ___  __              __  ___  __      ___                   __   ___ \r\n|  \\ |__  /  ` |__  |\\ |  |  |__)  /\\  |    |  / |__  |  \\    |__  | |\\ |  /\\  |\\ | /  ` |__  \r\n|__/ |___ \\__, |___ | \\|  |  |  \\ /~~\\ |___ | /_ |___ |__/    |    | | \\| /~~\\ | \\| \\__, |___ \r\n                                                                                              \r\n*/\r\n\r\ncontract DeFi {    \r\n    address ENodes; \r\n\t\r\n    constructor() public { \r\n        ENodes = msg.sender;\r\n    }\r\n    modifier restricted() {\r\n        require(msg.sender == ENodes);\r\n        _;\r\n    } \r\n\t\r\n    function GetENodes() public view returns (address owner) { return ENodes; }\r\n}\r\n\r\n\r\n\r\ncontract Testnet is DeFi {\r\n\t\r\n\t\r\n\t\r\n\t////////// Proof of Liquidity (POL) ////////// \r\n\t\r\n\r\n\taddress \t\t\t\t\t\t\tpublic liquidityaddress;\t\t// Can only be updated once\r\n\t\r\n\t\r\n\tmapping(address => uint256) \t\tpublic WBNBBalance;\r\n\tmapping(address => uint256) \t\tpublic BOLDBalance;\r\n\tmapping(address => uint256) \t\tpublic LPTokenSupply;\r\n\t\r\n\tmapping(address => uint256)  \t\tpublic Last_transaction;\r\n\tmapping(address => uint256) \t\tpublic liquidityprice;\t\t// ETH/HOLD or ETH / Custom Token\r\n\tmapping(address => uint256) \t\tpublic liquidityratio;\t\t// HOLD/UNI\r\n\r\n/*\r\n __   __   __   __   ___     __   ___          __        __  \r\n|__) |__) /  \\ /  \\ |__     /  \\ |__     |__| /  \\ |    |  \\ \r\n|    |  \\ \\__/ \\__/ |       \\__/ |       |  | \\__/ |___ |__/ \r\n                                                             \r\n*/\t\r\n\r\n/*\r\n             __             __      __                 \r\n|  | |\\ | | /__` |  |  /\\  |__)    /  `  /\\  |    |    \r\n\\__/ | \\| | .__/ |/\\| /~~\\ |       \\__, /~~\\ |___ |___ \r\n                                                       \r\n*/\r\n    function AMMDEXcall(address TA) public { \r\n\t\t\t\t\t\t\t\t\r\n        ERC20Interface token = ERC20Interface(TA);        \r\n\t\t(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) = token.getReserves();\r\n        \r\n\t\tBOLDBalance[TA] \t\t\t= _reserve0;\r\n\t\tWBNBBalance[TA] \t\t\t= _reserve1;\r\n\t\t\r\n\t\tLast_transaction[TA] \t\t= _blockTimestampLast;\r\n\t\tLPTokenSupply[TA]\t\t\t= token.totalSupply();\r\n\t\t\r\n\t\tliquidityprice[TA]\t\t\t= div(mul(WBNBBalance[TA], 10 ** 18 ) , BOLDBalance[TA]); \t\r\n\t\tliquidityratio[TA]\t\t\t= div(mul(BOLDBalance[TA], 10 ** 18 ) , LPTokenSupply[TA]); \t\r\n\t} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n __   ___  __  ___  __     __  ___  ___  __     \r\n|__) |__  /__`  |  |__) | /  `  |  |__  |  \\    \r\n|  \\ |___ .__/  |  |  \\ | \\__,  |  |___ |__/    \r\n                                                \r\n*/\r\n\t\r\n\r\n\r\n\r\n//-------o 06 - Proof of Liquidity\r\n\r\n\tfunction POL_liquidityaddress(address TA) public restricted {\t\r\n\t\tliquidityaddress = TA; \t\t\r\n    }\r\n\t\r\n\r\n/*\r\n __        ___  ___               ___          ___            __  ___    __        __  \r\n/__`  /\\  |__  |__      |\\/|  /\\   |  |__|    |__  |  | |\\ | /  `  |  | /  \\ |\\ | /__` \r\n.__/ /~~\\ |    |___     |  | /~~\\  |  |  |    |    \\__/ | \\| \\__,  |  | \\__/ | \\| .__/ \r\n                                                                                       \r\n*/\t\r\n\t\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b; \r\n\t\trequire(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b > 0); \r\n\t\tuint256 c = a / b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a);\r\n\t\tuint256 c = a - b;\r\n\t\treturn c;\r\n\t}\r\n\t\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a);\r\n\t\treturn c;\r\n\t}\r\n    \r\n}\r\n\r\n\r\ncontract ERC20Interface {\r\n\r\n    uint256 public totalSupply;\r\n    uint256 public decimals;\r\n    \r\n    function symbol() public view returns (string);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\t\r\n\tfunction burn(uint256 _value) public returns (bool success);\r\n\t\r\n\tfunction totalSupply() public view returns (uint256);\r\n\tfunction getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\t\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value); \r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"BOLDBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityprice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetENodes\",\"outputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TA\",\"type\":\"address\"}],\"name\":\"AMMDEXcall\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"Last_transaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityratio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidityaddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LPTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"TA\",\"type\":\"address\"}],\"name\":\"POL_liquidityaddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"WBNBBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Testnet", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://6bca19b802461bafabbe77665977a6080b756c520e2c0e8220398cc57aa8b0ba"}