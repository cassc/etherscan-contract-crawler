{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/IvirseToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./AutomaticOwnershipManagement.sol\\\";\\r\\nimport \\\"./interfaces/IvirseTokenInterface.sol\\\";\\r\\n\\r\\ncontract IvirseToken is\\r\\n  IvirseTokenInterface,\\r\\n  ERC20,\\r\\n  AutomaticOwnershipManagement\\r\\n{\\r\\n  /**\\r\\n   *@dev Storage\\r\\n   */\\r\\n  uint256 public mintCount;\\r\\n\\r\\n  mapping(uint256 => MintData) mints;\\r\\n\\r\\n  mapping(uint256 => mapping(address => bool)) public mintVotes;\\r\\n  uint256 private immutable _maxSupply;\\r\\n\\r\\n  /**\\r\\n   *@dev Constructor\\r\\n   */\\r\\n  constructor(address[] memory initialOwners_)\\r\\n    ERC20(\\\"IVIE\\\", \\\"IVI\\\")\\r\\n    AutomaticOwnershipManagement(initialOwners_)\\r\\n  {\\r\\n    uint256 fractions = 10**uint256(18);\\r\\n    _maxSupply = 888888888 * fractions;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev require total vote for pause or unpause > 50% minter.\\r\\n   */\\r\\n  modifier mintEnoughVotes(uint256 id) {\\r\\n    require(\\r\\n      _getMintVoteCount(id) >= _getRequired(),\\r\\n      \\\"IvirseToken Contract: Not enough votes!\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n  /**\\r\\n   *@dev require sender accept for mint request.\\r\\n   */\\r\\n  modifier mintAccepted(uint256 id) {\\r\\n    address sender = _msgSender();\\r\\n    require(mintVotes[id][sender], \\\"IvirseToken Contract: Rejected!\\\");\\r\\n    _;\\r\\n  }\\r\\n  /**\\r\\n   *@dev require sender does not accept for mint request.\\r\\n   */\\r\\n  modifier mintRejected(uint256 id) {\\r\\n    address sender = _msgSender();\\r\\n    require(!mintVotes[id][sender], \\\"IvirseToken Contract: Accepted!\\\");\\r\\n    _;\\r\\n  }\\r\\n  /**\\r\\n   *@dev require mint request actived.\\r\\n   */\\r\\n  modifier notMint(uint256 id) {\\r\\n    require(!mints[id].used, \\\"IvirseToken Contract: Minted!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev minter create mint request for multisign.\\r\\n   */\\r\\n  function createMintRequest(address to, uint256 amount)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n  {\\r\\n    address sender = _msgSender();\\r\\n    MintData memory data = MintData(\\r\\n      mintCount,\\r\\n      block.timestamp,\\r\\n      sender,\\r\\n      to,\\r\\n      amount,\\r\\n      false\\r\\n    );\\r\\n    mints[mintCount] = data;\\r\\n    mintCount++;\\r\\n    emit NewMintRequest(sender, data.id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev minter accept mint request.\\r\\n   */\\r\\n  function acceptMint(uint256 id)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    notMint(id)\\r\\n    mintRejected(id)\\r\\n  {\\r\\n    address sender = _msgSender();\\r\\n    mintVotes[id][sender] = true;\\r\\n    emit AcceptMint(sender, id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev minter reject mint request.\\r\\n   */\\r\\n  function rejectMint(uint256 id)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    notMint(id)\\r\\n    mintAccepted(id)\\r\\n  {\\r\\n    address sender = _msgSender();\\r\\n    mintVotes[id][sender] = false;\\r\\n    emit RejectMint(sender, id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev minter active mint request when enough consensus.\\r\\n   */\\r\\n  function mintConsensus(uint256 id)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    notMint(id)\\r\\n    mintEnoughVotes(id)\\r\\n  {\\r\\n    MintData storage transaction = mints[id];\\r\\n    require(\\r\\n      totalSupply() + transaction.amount <= _maxSupply,\\r\\n      \\\"IvirseToken Contract: mint amount exceeds max supply\\\"\\r\\n    );\\r\\n    transaction.used = true;\\r\\n    _mint(transaction.to, transaction.amount);\\r\\n    emit MintConsensus(_msgSender(), id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev get total accept of mint request.\\r\\n   */\\r\\n  function getMintVoteCount(uint256 id) public view override returns (uint256) {\\r\\n    return _getMintVoteCount(id);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev get vote of mint request.\\r\\n   */\\r\\n  function getMintVote(address minter, uint256 id)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return mintVotes[id][minter];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev get all mint request.\\r\\n   */\\r\\n  function getMintRequests()\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (MintData[] memory results)\\r\\n  {\\r\\n    results = new MintData[](mintCount);\\r\\n    for (uint256 i = 0; i < mintCount; i++) {\\r\\n      results[i] = mints[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev Private function\\r\\n   */\\r\\n\\r\\n  function _getMintVoteCount(uint256 _id) private view returns (uint256 count) {\\r\\n    for (uint256 index = 0; index < owners.length; index++) {\\r\\n      address minter = owners[index];\\r\\n      bool vote = mintVotes[_id][minter];\\r\\n      if (vote && isOwner[minter] == Status.ACTIVE) {\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IvirseTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @author tuan.dq.\\r\\n * @title Interface for MultiSig contract.\\r\\n */\\r\\ninterface IvirseTokenInterface {\\r\\n  /**\\r\\n   *@dev Structs\\r\\n   */\\r\\n  struct MintData {\\r\\n    uint256 id;\\r\\n    uint256 createdAt;\\r\\n    address requestBy;\\r\\n    address to;\\r\\n    uint256 amount;\\r\\n    bool used;\\r\\n  }\\r\\n  /**\\r\\n   *@dev Events\\r\\n   */\\r\\n\\r\\n  event AcceptMint(address indexed minter, uint256 id);\\r\\n  event RejectMint(address indexed minter, uint256 id);\\r\\n  event MintConsensus(address indexed minter, uint256 id);\\r\\n  event NewMintRequest(address indexed minter, uint256 id);\\r\\n\\r\\n  /**\\r\\n   *@dev Functions\\r\\n   */\\r\\n\\r\\n  function createMintRequest(address to, uint256 amount) external;\\r\\n\\r\\n  function acceptMint(uint256 id) external;\\r\\n\\r\\n  function rejectMint(uint256 id) external;\\r\\n\\r\\n  function mintConsensus(uint256 id) external;\\r\\n\\r\\n  function getMintVoteCount(uint256 id) external view returns (uint256);\\r\\n\\r\\n  function getMintVote(address minter, uint256 id) external view returns (bool);\\r\\n\\r\\n  function getMintRequests() external view returns (MintData[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IAutomaticOwnershipManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\n/**\\r\\n * @author tuan.dq.\\r\\n * @title Interface for MultiSig contract.\\r\\n */\\r\\ninterface IAutomaticOwnershipManagement {\\r\\n  /**\\r\\n   *@dev Enums\\r\\n   */\\r\\n\\r\\n  enum Status {\\r\\n    DEFAULT,\\r\\n    ACTIVE,\\r\\n    INACTIVE\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *@dev Events\\r\\n   */\\r\\n\\r\\n  event NewAccount(address indexed account);\\r\\n  event GrantOwnership(address indexed account);\\r\\n  event RevokeOwnership(address indexed owner);\\r\\n  event AcceptGrant(address indexed from, address indexed to);\\r\\n  event RejectGrant(address indexed from, address indexed to);\\r\\n  event RemoveAccount(address indexed from, address indexed to);\\r\\n\\r\\n  /**\\r\\n   *@dev Functions\\r\\n   */\\r\\n\\r\\n  function requestNewOwner(address account) external;\\r\\n\\r\\n  function acceptAccount(address account) external;\\r\\n\\r\\n  function rejectAccount(address account) external;\\r\\n\\r\\n  function grantOwnership(address account) external;\\r\\n\\r\\n  function revokeOwnership(address newOwner) external;\\r\\n\\r\\n  function renounceOwnership() external;\\r\\n\\r\\n  function removeAccount(address account) external;\\r\\n\\r\\n  function getRequired() external view returns (uint256);\\r\\n\\r\\n  function getVote(address account, address owner) external view returns (bool);\\r\\n\\r\\n  function getNumberVote(address account) external view returns (uint256);\\r\\n\\r\\n  function getAllOwner() external view returns (address[] memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/AutomaticOwnershipManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./interfaces/IAutomaticOwnershipManagement.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @author tuan.dq.\\r\\n * @title Allow automatic management of administrative rights.\\r\\n */\\r\\ncontract AutomaticOwnershipManagement is\\r\\n  IAutomaticOwnershipManagement,\\r\\n  Context\\r\\n{\\r\\n  /**\\r\\n   *  Constants\\r\\n   */\\r\\n  uint256 public constant MAX_OWNER_COUNT = 50;\\r\\n\\r\\n  /**\\r\\n   *  Storage\\r\\n   */\\r\\n  address[] public owners;\\r\\n  mapping(address => bool) public isExist;\\r\\n  mapping(address => Status) public isOwner;\\r\\n  mapping(address => mapping(address => bool)) public votes;\\r\\n\\r\\n  /**\\r\\n   *  Modifiers\\r\\n   */\\r\\n\\r\\n  modifier onlyOwner() {\\r\\n    require(\\r\\n      isOwner[_msgSender()] == Status.ACTIVE,\\r\\n      \\\"MultiSig Contract: Sender is not owner!\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n  modifier doesNotHaveOwnership(address owner) {\\r\\n    require(\\r\\n      isOwner[owner] == Status.DEFAULT || isOwner[owner] == Status.INACTIVE,\\r\\n      \\\"MultiSig Contract: Already owner!\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier hasOwnership(address owner) {\\r\\n    require(isOwner[owner] == Status.ACTIVE, \\\"MultiSig Contract: Not owner!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier validMaxOwner() {\\r\\n    require(\\r\\n      owners.length + 1 <= MAX_OWNER_COUNT,\\r\\n      \\\"MultiSig Contract: Limit reached!\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier accountDoesNotExist(address account) {\\r\\n    require(!isExist[account], \\\"MultiSig Contract: Account existed!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier accountExist(address account) {\\r\\n    require(isExist[account], \\\"MultiSig Contract: Not exist!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier accepted(address account) {\\r\\n    require(votes[account][_msgSender()], \\\"MultiSig Contract: Not accept!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier notAccept(address account) {\\r\\n    require(!votes[account][_msgSender()], \\\"MultiSig Contract: Accepted!\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address[] memory initialOwners_) {\\r\\n    for (uint256 index = 0; index < initialOwners_.length; index++) {\\r\\n      address account = initialOwners_[index];\\r\\n      owners.push(account);\\r\\n      isOwner[account] = Status.ACTIVE;\\r\\n      isExist[account] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  Public functions\\r\\n   */\\r\\n\\r\\n  function requestNewOwner(address account)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    accountDoesNotExist(account)\\r\\n    validMaxOwner\\r\\n  {\\r\\n    _requestNewOwner(account);\\r\\n  }\\r\\n\\r\\n  function acceptAccount(address account)\\r\\n    public\\r\\n    override\\r\\n    accountExist(account)\\r\\n    notAccept(account)\\r\\n    onlyOwner\\r\\n  {\\r\\n    _acceptAccount(account);\\r\\n  }\\r\\n\\r\\n  function rejectAccount(address account)\\r\\n    public\\r\\n    override\\r\\n    accountExist(account)\\r\\n    accepted(account)\\r\\n    onlyOwner\\r\\n  {\\r\\n    _rejectAccount(account);\\r\\n  }\\r\\n\\r\\n  function grantOwnership(address account)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    doesNotHaveOwnership(account)\\r\\n    accountExist(account)\\r\\n  {\\r\\n    require(\\r\\n      _getNumberVote(account) >= _getRequired(),\\r\\n      \\\"MultiSig Contract: Not enough votes!\\\"\\r\\n    );\\r\\n    _grantOwnership(account);\\r\\n  }\\r\\n\\r\\n  function revokeOwnership(address owner)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    hasOwnership(owner)\\r\\n  {\\r\\n    require(\\r\\n      _getNumberVote(owner) >= _getRequired() && owners.length > 2,\\r\\n      \\\"MultiSig Contract: Not enough votes!\\\"\\r\\n    );\\r\\n    _revokeOwnership(owner);\\r\\n  }\\r\\n\\r\\n  function renounceOwnership() public override onlyOwner {\\r\\n    require(owners.length > 1, \\\"MultiSig Contract: Last administrator!\\\");\\r\\n    _revokeOwnership(_msgSender());\\r\\n  }\\r\\n\\r\\n  function removeAccount(address account)\\r\\n    public\\r\\n    override\\r\\n    onlyOwner\\r\\n    doesNotHaveOwnership(account)\\r\\n  {\\r\\n    _removeAccount(account);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  View functions\\r\\n   */\\r\\n  function getRequired() public view override returns (uint256) {\\r\\n    return _getRequired();\\r\\n  }\\r\\n\\r\\n  function getVote(address account, address owner)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return votes[account][owner];\\r\\n  }\\r\\n\\r\\n  function getNumberVote(address account)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _getNumberVote(account);\\r\\n  }\\r\\n\\r\\n  function getAllOwner() public view override returns (address[] memory) {\\r\\n    return owners;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   *  Private functions\\r\\n   */\\r\\n\\r\\n  function _addForce(address _newOwner) private {\\r\\n    owners.push(_newOwner);\\r\\n    isOwner[_newOwner] = Status.ACTIVE;\\r\\n    isExist[_newOwner] = true;\\r\\n  }\\r\\n\\r\\n  function _requestNewOwner(address _account) private {\\r\\n    owners.push(_account);\\r\\n    isExist[_account] = true;\\r\\n    emit NewAccount(_account);\\r\\n  }\\r\\n\\r\\n  function _acceptAccount(address _account) private {\\r\\n    address sender = _msgSender();\\r\\n    votes[_account][sender] = true;\\r\\n    emit AcceptGrant(sender, _account);\\r\\n  }\\r\\n\\r\\n  function _rejectAccount(address _account) private {\\r\\n    address sender = _msgSender();\\r\\n    votes[_account][sender] = false;\\r\\n    emit RejectGrant(sender, _account);\\r\\n  }\\r\\n\\r\\n  function _grantOwnership(address _newOwner) private {\\r\\n    isOwner[_newOwner] = Status.ACTIVE;\\r\\n    _resetVotes(_newOwner);\\r\\n    emit GrantOwnership(_newOwner);\\r\\n  }\\r\\n\\r\\n  function _revokeOwnership(address _owner) private {\\r\\n    isOwner[_owner] = Status.INACTIVE;\\r\\n    _resetVotes(_owner);\\r\\n    emit RevokeOwnership(_owner);\\r\\n  }\\r\\n\\r\\n  function _removeAccount(address _account) private {\\r\\n    require(\\r\\n      _getNumberVote(_account) == 0,\\r\\n      \\\"MultiSig Contract: Have more than one vote!\\\"\\r\\n    );\\r\\n    uint256 numOfOwner = owners.length;\\r\\n    for (uint256 index = 0; index < numOfOwner; index++) {\\r\\n      if (owners[index] == _account) {\\r\\n        owners[index] = owners[numOfOwner - 1];\\r\\n        owners.pop();\\r\\n        break;\\r\\n      }\\r\\n    }\\r\\n    isOwner[_account] = Status.DEFAULT;\\r\\n    isExist[_account] = false;\\r\\n    emit RemoveAccount(_msgSender(), _account);\\r\\n  }\\r\\n\\r\\n  function _resetVotes(address _account) private {\\r\\n    for (uint256 index = 0; index < owners.length; index++) {\\r\\n      votes[_account][owners[index]] = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _getRequired() internal view returns (uint256) {\\r\\n    uint256 numOwner = 0;\\r\\n\\r\\n    for (uint256 index = 0; index < owners.length; index++) {\\r\\n      address owner = owners[index];\\r\\n      if (isOwner[owner] == Status.ACTIVE) {\\r\\n        numOwner++;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (numOwner <= 2) {\\r\\n      return numOwner;\\r\\n    } else {\\r\\n      return numOwner / 2 + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _getNumberVote(address _account)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256 count)\\r\\n  {\\r\\n    for (uint256 index = 0; index < owners.length; index++) {\\r\\n      address owner = owners[index];\\r\\n      bool vote = votes[_account][owner];\\r\\n      if (vote && isOwner[owner] == Status.ACTIVE) {\\r\\n        count++;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"initialOwners_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AcceptGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"AcceptMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GrantOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MintConsensus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewMintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RejectGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"RejectMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"RemoveAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RevokeOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"acceptAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"acceptMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createMintRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllOwner\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requestBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"used\",\"type\":\"bool\"}],\"internalType\":\"struct IvirseTokenInterface.MintData[]\",\"name\":\"results\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMintVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getMintVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNumberVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"enum IAutomaticOwnershipManagement.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"mintConsensus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"rejectAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"rejectMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"requestNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IvirseToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000abfb745df39eafb8d9a80662dcc4cea998c20524", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}