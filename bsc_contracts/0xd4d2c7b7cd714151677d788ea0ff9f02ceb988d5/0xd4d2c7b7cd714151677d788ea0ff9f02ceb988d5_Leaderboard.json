{"SourceCode": "/**\r\n *Submitted for verification at testnet.bscscan.com on 2023-11-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is paused.\r\n     */\r\n    error EnforcedPause();\r\n\r\n    /**\r\n     * @dev The operation failed because the contract is not paused.\r\n     */\r\n    error ExpectedPause();\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        if (paused()) {\r\n            revert EnforcedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        if (!paused()) {\r\n            revert ExpectedPause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\nabstract contract PausableElement is Ownable, Pausable {\r\n    /// @notice pause contract\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    /// @notice unpause contract\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n\r\nabstract contract WithdrawalElement is PausableElement {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    event WithdrawToken(address token, address recipient, uint256 amount);\r\n    event Withdraw(address recipient, uint256 amount);\r\n\r\n    /// @notice management function. Withdraw all tokens in emergency mode only when contract paused\r\n    function withdrawToken(address _token, address _recipient) external virtual onlyOwner whenPaused {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n\r\n        _withdrawToken(_token, _recipient, amount);\r\n        _afterWithdrawToken(_token, _recipient, amount);\r\n    }\r\n\r\n    /// @notice management function. Withdraw  some tokens in emergency mode only when contract paused\r\n    function withdrawSomeToken(address _token, address _recipient, uint256 _amount)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n        whenPaused\r\n    {\r\n        _withdrawToken(_token, _recipient, _amount);\r\n        _afterWithdrawToken(_token, _recipient, _amount);\r\n    }\r\n\r\n    ///@notice withdraw all BNB. Withdraw in emergency mode only when contract paused\r\n    function withdraw() external virtual onlyOwner whenPaused {\r\n        _withdraw(_msgSender(), address(this).balance);\r\n    }\r\n\r\n    ///@notice withdraw some BNB. Withdraw in emergency mode only when contract paused\r\n    function withdrawSome(address _recipient, uint256 _amount) external virtual onlyOwner whenPaused {\r\n        _withdraw(_recipient, _amount);\r\n    }\r\n\r\n    function _deliverFunds(address _recipient, uint256 _value, string memory _message) internal {\r\n        (bool sent,) = payable(_recipient).call{value: _value}(\"\");\r\n\r\n        require(sent, _message);\r\n    }\r\n\r\n    function _deliverTokens(address _token, address _recipient, uint256 _value) internal {\r\n        IERC20(_token).safeTransfer(_recipient, _value);\r\n    }\r\n\r\n    function _withdraw(address _recipient, uint256 _amount) internal virtual {\r\n        require(_recipient != address(0x0), \"CryptoDrop Loto: address is zero\");\r\n        require(_amount <= address(this).balance, \"CryptoDrop Loto: not enought BNB balance\");\r\n\r\n        _afterWithdraw(_recipient, _amount);\r\n\r\n        _deliverFunds(_recipient, _amount, \"CryptoDrop Loto: Can't send BNB\");\r\n        emit Withdraw(_recipient, _amount);\r\n    }\r\n\r\n    function _afterWithdraw(address _recipient, uint256 _amount) internal virtual {}\r\n\r\n    function _withdrawToken(address _token, address _recipient, uint256 _amount) internal virtual {\r\n        require(_recipient != address(0x0), \"CryptoDrop Loto: address is zero\");\r\n        require(_amount <= IERC20(_token).balanceOf(address(this)), \"CryptoDrop Loto: not enought token balance\");\r\n\r\n        IERC20(_token).safeTransfer(_recipient, _amount);\r\n\r\n        _afterWithdrawToken(_token, _recipient, _amount);\r\n    }\r\n\r\n    function _afterWithdrawToken(address _token, address _recipient, uint256 _amount) internal virtual {}\r\n}\r\n\r\ncontract Leaderboard is WithdrawalElement {\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum PLACE {\r\n        NOTHING,\r\n        TOP1,\r\n        TOP2,\r\n        TOP3,\r\n        TOP4,\r\n        TOP5\r\n    }\r\n\r\n    struct Range {\r\n        uint256 minGames;\r\n        uint256 maxGames;\r\n        uint256 percent;\r\n    }\r\n\r\n    struct Distribution {\r\n        uint256 amount; //amount for distribution\r\n        mapping(PLACE => uint256) gamersForPlaces; // how much gamers in place\r\n        mapping(PLACE => uint256) distributedAmount;\r\n        bool distributed;\r\n    }\r\n\r\n    /// @notice epoch => Distribution\r\n    mapping(uint256 => Distribution) public distributions;\r\n    mapping(PLACE => Range) public ranges;\r\n\r\n    struct Epoch {\r\n        uint256 totalGames;\r\n        uint256 totalWins;\r\n        PLACE place;\r\n    }\r\n\r\n    mapping(address => mapping(uint256 => Epoch)) public epochs;\r\n\r\n    uint256 public currentEpoch = 1;\r\n\r\n    mapping(address => bool) public authorized;\r\n\r\n    mapping(address => bool) public authorizedGames;\r\n\r\n    mapping(address => uint256) private rewards;\r\n\r\n    mapping(address => uint256) public lastUserEpochIndex;\r\n\r\n    uint256 public minTokenAmountForDistribution = 1_000 ether;\r\n\r\n    address public token;\r\n\r\n    event RecordGame(address gamer, uint8 place, uint256 epoch);\r\n    event Claim(address gamer, uint256 amount);\r\n\r\n    constructor(address _token) Ownable(msg.sender) {\r\n        ranges[PLACE.TOP1] = Range(50, 70, 40 ether);\r\n        ranges[PLACE.TOP2] = Range(20, 49, 30 ether);\r\n        ranges[PLACE.TOP3] = Range(10, 19, 15 ether);\r\n        ranges[PLACE.TOP4] = Range(5, 9, 10 ether);\r\n        ranges[PLACE.TOP5] = Range(1, 4, 5 ether);\r\n\r\n        token = _token;\r\n    }\r\n\r\n    function changeMinTokenAmountForDistribution(uint256 _minTokenAmountForDistribution) external onlyOwner {\r\n        minTokenAmountForDistribution = _minTokenAmountForDistribution;\r\n    }\r\n\r\n    function changeRange(PLACE _place, Range memory _range) external onlyOwner {\r\n        ranges[_place] = _range;\r\n    }\r\n\r\n    function authorize(address[] memory _users, bool[] memory _isAuth) external onlyOwner {\r\n        require(_users.length == _isAuth.length, \"mistmatch length\");\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            authorized[_users[i]] = _isAuth[i];\r\n        }\r\n    }\r\n\r\n    function authorizeGames(address[] memory _games, bool[] memory _isAuth) external onlyOwner {\r\n        require(_games.length == _isAuth.length, \"mistmatch length\");\r\n        for (uint256 i = 0; i < _games.length; i++) {\r\n            authorizedGames[_games[i]] = _isAuth[i];\r\n        }\r\n    }\r\n\r\n    modifier isAuthorized() {\r\n        require(authorized[msg.sender], \"CryptoDrop Leaderboard: not authorized user\");\r\n        _;\r\n    }\r\n\r\n    modifier isAuthorizedGame() {\r\n        require(authorizedGames[msg.sender], \"CryptoDrop Leaderboard: not authorized user\");\r\n        _;\r\n    }\r\n\r\n    function createDistribution(uint256 _amount) external payable isAuthorized whenNotPaused {\r\n        require(\r\n            IERC20(token).balanceOf(address(this)) >= _amount, \"CryptoDrop Leadeboard: amount and value are incorrect\"\r\n        );\r\n\r\n        distributions[currentEpoch].amount = distributions[currentEpoch].amount + _amount;\r\n\r\n        if (_amount >= minTokenAmountForDistribution) {\r\n            uint256 reward = distributions[currentEpoch].amount;\r\n            uint256 amount = reward;\r\n            uint256 topReward;\r\n\r\n            if (distributions[currentEpoch].gamersForPlaces[PLACE.TOP1] > 0) {\r\n                topReward = (amount * ranges[PLACE.TOP1].percent) / 100 / 1 ether;\r\n                distributions[currentEpoch].distributedAmount[PLACE.TOP1] = topReward;\r\n                reward = reward - topReward;\r\n            }\r\n\r\n            if (distributions[currentEpoch].gamersForPlaces[PLACE.TOP2] > 0) {\r\n                topReward = (amount * ranges[PLACE.TOP2].percent) / 100 / 1 ether;\r\n                distributions[currentEpoch].distributedAmount[PLACE.TOP2] = topReward;\r\n                reward = reward - topReward;\r\n            }\r\n\r\n            if (distributions[currentEpoch].gamersForPlaces[PLACE.TOP3] > 0) {\r\n                topReward = (amount * ranges[PLACE.TOP3].percent) / 100 / 1 ether;\r\n                distributions[currentEpoch].distributedAmount[PLACE.TOP3] = topReward;\r\n                reward = reward - topReward;\r\n            }\r\n\r\n            if (distributions[currentEpoch].gamersForPlaces[PLACE.TOP4] > 0) {\r\n                topReward = (amount * ranges[PLACE.TOP4].percent) / 100 / 1 ether;\r\n                distributions[currentEpoch].distributedAmount[PLACE.TOP4] = topReward;\r\n                reward = reward - topReward;\r\n            }\r\n\r\n            if (distributions[currentEpoch].gamersForPlaces[PLACE.TOP5] > 0) {\r\n                topReward = (amount * ranges[PLACE.TOP5].percent) / 100 / 1 ether;\r\n                distributions[currentEpoch].distributedAmount[PLACE.TOP5] = topReward;\r\n                reward = reward - topReward;\r\n            }\r\n\r\n            distributions[currentEpoch].distributed = true;\r\n            distributions[currentEpoch].amount -= reward;\r\n            currentEpoch += 1;\r\n            distributions[currentEpoch].amount += reward;\r\n        }\r\n    }\r\n\r\n    function recordGame(address _gamer) external isAuthorizedGame whenNotPaused {\r\n        // record info about _gamer\r\n        epochs[_gamer][currentEpoch].totalGames += 1;\r\n\r\n        uint256 totalGames = epochs[_gamer][currentEpoch].totalGames;\r\n\r\n        PLACE currentPlace = epochs[_gamer][currentEpoch].place;\r\n        // PLACE 5\r\n        if (totalGames >= ranges[PLACE.TOP5].minGames && totalGames <= ranges[PLACE.TOP5].maxGames) {\r\n            epochs[_gamer][currentEpoch].place = PLACE.TOP5;\r\n        }\r\n        // PLACE 4\r\n        else if (totalGames >= ranges[PLACE.TOP4].minGames && totalGames <= ranges[PLACE.TOP4].maxGames) {\r\n            epochs[_gamer][currentEpoch].place = PLACE.TOP4;\r\n        }\r\n        // PLACE 3\r\n        else if (totalGames >= ranges[PLACE.TOP3].minGames && totalGames <= ranges[PLACE.TOP3].maxGames) {\r\n            epochs[_gamer][currentEpoch].place = PLACE.TOP3;\r\n        }\r\n        // PLACE 2\r\n        else if (totalGames >= ranges[PLACE.TOP2].minGames && totalGames <= ranges[PLACE.TOP2].maxGames) {\r\n            epochs[_gamer][currentEpoch].place = PLACE.TOP2;\r\n        }\r\n        // PLACE 1\r\n        else if (totalGames >= ranges[PLACE.TOP1].minGames) {\r\n            epochs[_gamer][currentEpoch].place = PLACE.TOP1;\r\n        }\r\n\r\n        if (\r\n            currentPlace != PLACE.NOTHING && epochs[_gamer][currentEpoch].place != PLACE.NOTHING\r\n                && currentPlace != epochs[_gamer][currentEpoch].place\r\n        ) {\r\n            distributions[currentEpoch].gamersForPlaces[currentPlace] -= 1;\r\n            distributions[currentEpoch].gamersForPlaces[epochs[_gamer][currentEpoch].place] += 1;\r\n        } else if (currentPlace == PLACE.NOTHING && epochs[_gamer][currentEpoch].place != PLACE.NOTHING) {\r\n            distributions[currentEpoch].gamersForPlaces[epochs[_gamer][currentEpoch].place] += 1;\r\n        }\r\n\r\n        if (lastUserEpochIndex[_gamer] != currentEpoch && lastUserEpochIndex[_gamer] != 0) {\r\n            uint256 epoch = lastUserEpochIndex[_gamer];\r\n\r\n            PLACE place = epochs[msg.sender][epoch].place;\r\n\r\n            if (place != PLACE.NOTHING) {\r\n                uint256 gamers = distributions[epoch].gamersForPlaces[place];\r\n                uint256 claimedAmount = distributions[epoch].distributedAmount[place] / gamers;\r\n\r\n                rewards[_gamer] += claimedAmount;\r\n\r\n                lastUserEpochIndex[_gamer] = currentEpoch;\r\n            }\r\n        } else if (lastUserEpochIndex[_gamer] == 0) {\r\n            lastUserEpochIndex[_gamer] = currentEpoch;\r\n        }\r\n\r\n        emit RecordGame(_gamer, uint8(epochs[_gamer][currentEpoch].place), currentEpoch);\r\n    }\r\n\r\n    function recordWin(address _gamer) external isAuthorizedGame whenNotPaused {\r\n        epochs[_gamer][currentEpoch].totalWins += 1;\r\n    }\r\n\r\n    function claim() external whenNotPaused {\r\n        uint256 claimedAmount = getAmountForClaim(msg.sender);\r\n\r\n        if (claimedAmount > 0) {\r\n            rewards[msg.sender] = 0;\r\n            lastUserEpochIndex[msg.sender] = 0;\r\n\r\n            _deliverTokens(token, msg.sender, claimedAmount);\r\n            emit Claim(msg.sender, claimedAmount);\r\n        }\r\n    }\r\n\r\n    function getAmountForClaim(address _gamer) public view returns (uint256 claimedAmount) {\r\n        uint256 epoch = lastUserEpochIndex[_gamer];\r\n        if (epoch != 0) {\r\n            if (distributions[epoch].distributed) {\r\n                PLACE place = epochs[_gamer][epoch].place;\r\n\r\n                if (place != PLACE.NOTHING) {\r\n                    uint256 amount = distributions[epoch].distributedAmount[place];\r\n                    uint256 gamers = distributions[epoch].gamersForPlaces[place];\r\n                    claimedAmount += amount / gamers;\r\n                }\r\n            }\r\n\r\n            if (rewards[_gamer] > 0) {\r\n                claimedAmount += rewards[_gamer];\r\n            }\r\n        }\r\n    }\r\n\r\n    function returnEpochGamersForPlace(uint256 _epoch, PLACE _place) external view returns (uint256) {\r\n        return distributions[_epoch].gamersForPlaces[_place];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gamer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"RecordGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isAuth\",\"type\":\"bool[]\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_games\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isAuth\",\"type\":\"bool[]\"}],\"name\":\"authorizeGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedGames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokenAmountForDistribution\",\"type\":\"uint256\"}],\"name\":\"changeMinTokenAmountForDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Leaderboard.PLACE\",\"name\":\"_place\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"internalType\":\"struct Leaderboard.Range\",\"name\":\"_range\",\"type\":\"tuple\"}],\"name\":\"changeRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createDistribution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"distributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWins\",\"type\":\"uint256\"},{\"internalType\":\"enum Leaderboard.PLACE\",\"name\":\"place\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gamer\",\"type\":\"address\"}],\"name\":\"getAmountForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserEpochIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenAmountForDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Leaderboard.PLACE\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"ranges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGames\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gamer\",\"type\":\"address\"}],\"name\":\"recordGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gamer\",\"type\":\"address\"}],\"name\":\"recordWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"enum Leaderboard.PLACE\",\"name\":\"_place\",\"type\":\"uint8\"}],\"name\":\"returnEpochGamersForPlace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSomeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Leaderboard", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e17815add494c0b67f3f6b17546753054cac9fc4", "EVMVersion": "paris", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f9ea77810ca1d3fe6b7516f12590163b43721c6c731a55c5b9ee4d8054eb1dc"}