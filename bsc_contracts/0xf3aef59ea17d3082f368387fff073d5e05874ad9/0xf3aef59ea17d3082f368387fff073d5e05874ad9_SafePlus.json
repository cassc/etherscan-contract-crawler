{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDividendPayingToken {\r\n  function dividendOf(address _owner) external view returns(uint256);\r\n \r\n  function withdrawDividend() external;\r\n \r\n  event DividendsDistributed(\r\n    address indexed from,\r\n    uint256 weiAmount\r\n  );\r\n \r\n  event DividendWithdrawn(\r\n    address indexed to,\r\n    uint256 weiAmount\r\n  );\r\n}\r\n \r\ninterface IDividendPayingTokenOptional {\r\n  function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n \r\n  function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n \r\n  function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n \r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n \r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n \r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n \r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n \r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n \r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n \r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n \r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n \r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n \r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n \r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n \r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n \r\n    function initialize(address, address) external;\r\n}\r\n \r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n \r\n    function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); \r\nfunction addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); \r\nfunction removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB); \r\nfunction removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); \r\nfunction removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB); \r\nfunction removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH); \r\nfunction swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); \r\nfunction swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); \r\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); \r\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); \r\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); \r\nfunction swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); \r\n \r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); \r\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); \r\n \r\n \r\nfunction swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; \r\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; \r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; \r\n \r\n}\r\n \r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n \r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n \r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n \r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n \r\n \r\n \r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n \r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n \r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n \r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n \r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n \r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n \r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n \r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n \r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n \r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n \r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n \r\nlibrary SafeMathInt {\r\n  function mul(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when multiplying INT256_MIN with -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n \r\n    int256 c = a * b;\r\n    require((b == 0) || (c / b == a));\r\n    return c;\r\n  }\r\n \r\n  function div(int256 a, int256 b) internal pure returns (int256) {\r\n    // Prevent overflow when dividing INT256_MIN by -1\r\n    // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n    require(!(a == - 2**255 && b == -1) && (b > 0));\r\n \r\n    return a / b;\r\n  }\r\n \r\n  function sub(int256 a, int256 b) internal pure returns (int256) {\r\n    require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n \r\n    return a - b;\r\n  }\r\n \r\n  function add(int256 a, int256 b) internal pure returns (int256) {\r\n    int256 c = a + b;\r\n    require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n    return c;\r\n  }\r\n \r\n  function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n    require(a >= 0);\r\n    return uint256(a);\r\n  }\r\n}\r\n \r\nlibrary SafeMathUint {\r\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n    int256 b = int256(a);\r\n    require(b >= 0);\r\n    return b;\r\n  }\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n \r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n \r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n \r\n    mapping (address => uint256) private _balances;\r\n \r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n \r\n    uint256 private _totalSupply;\r\n \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n \r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n \r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n \r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n \r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n \r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n \r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n \r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n \r\n        _beforeTokenTransfer(address(0), account, amount);\r\n \r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n \r\n        _beforeTokenTransfer(account, address(0), amount);\r\n \r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n \r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n \r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n \r\ncontract SafePlus is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    IWETH eth = IWETH(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n \r\n    address public token1DividendToken;\r\n    address public token2DividendToken;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    bool private swapping;\r\n    bool public tradingIsEnabled = false;\r\n    bool public marketingEnabled = true;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public token1DividendEnabled = true;\r\n    bool public token2DividendEnabled = true;\r\n    bool public sell_time_handler = true;\r\n \r\n    Token1DividendTracker public token1DividendTracker;\r\n    Token2DividendTracker public token2DividendTracker;\r\n    \r\n    uint256 public swapTokensAtAmount = 400 * 10**6 * 10**18;\r\n \r\n    uint256 public liquidityFee = 2;\r\n    uint256 public previousLiquidityFee;\r\n    uint256 public token1DividendRewardsFee = 5;\r\n    uint256 public previoustoken1DividendRewardsFee;\r\n    uint256 public token2DividendRewardsFee = 4;\r\n    uint256 public previoustoken2DividendRewardsFee;\r\n    uint256 public marketingFee = 1;\r\n    uint256 public previousMarketingFee;\r\n    uint256 public buybackFee = 2;\r\n    uint256 public previousBuybackfee;\r\n    uint256 public greenmoonFee = 1;\r\n    uint256 public previousGreenMoonFee;\r\n    uint256 public totalFees = token1DividendRewardsFee.add(marketingFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n    uint256 public gasForProcessing = 600000;\r\n \r\n    address public presaleAddress;\r\n    address public marketingWallet = 0xB165E70D2139BB944A85E7c7816a37D49ad666D8;\r\n    mapping (address => bool) private isExcludedFromFees;\r\n\r\n\r\n    /***\r\n    Antiwhale system\r\n    \r\n     */\r\n\r\n     mapping(address => uint) private sellsPerUserTime;\r\n\r\n\r\n     mapping(address =>  address) private referrals;\r\n\r\n     uint maxTxAmountPerTime;\r\n     uint timeForSellTotalMaxTxAmount = 604800 seconds;\r\n     mapping(address => uint) private sellsStartPerUser;\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n\r\n    mapping(address => bool) public isStakingContract;\r\n\r\n    mapping(address => bool) public isBlacklisted;\r\n \r\n    mapping(address => bool) private _isExcludedFromAntiwhale;\r\n\r\n    uint public referralFeeDecrease = 5;\r\n\r\n\r\n\r\n\r\n\r\n \r\n    event Updatetoken1DividendTracker(address indexed newAddress, address indexed oldAddress);\r\n    event Updatetoken2DividendTracker(address indexed newAddress, address indexed oldAddress);\r\n \r\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\r\n \r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event MarketingEnabledUpdated(bool enabled);\r\n    event token1DividendEnabledUpdated(bool enabled);\r\n    event token2DividendEnabledUpdated(bool enabled);\r\n \r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(address[] accounts, bool isExcluded);\r\n \r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n \r\n    event MarketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\r\n \r\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n \r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n \r\n    event SendDividends(\r\n    \tuint256 amount\r\n    );\r\n \r\n    event Processedtoken1DividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n \r\n    event Processedtoken2DividendTracker(\r\n    \tuint256 iterations,\r\n    \tuint256 claims,\r\n        uint256 lastProcessedIndex,\r\n    \tbool indexed automatic,\r\n    \tuint256 gas,\r\n    \taddress indexed processor\r\n    );\r\n \r\n    constructor(address _newOwner) ERC20(\"SafePlusV2\", \"SPLUSV2\") {\r\n    \ttoken1DividendTracker = new Token1DividendTracker();\r\n    \ttoken2DividendTracker = new Token2DividendTracker();\r\n\r\n    \ttoken1DividendToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        token2DividendToken = address(0);\r\n \r\n    \tIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n \r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n \r\n        _setAutomatedMarketMakerPair(_uniswapV2Pair, true);\r\n \r\n        excludeFromDividend(address(token1DividendTracker), true);\r\n        excludeFromDividend(address(token2DividendTracker), true);\r\n        excludeFromDividend(address(this), true);\r\n        excludeFromDividend(address(_uniswapV2Router), true);\r\n        excludeFromDividend(deadAddress, true);\r\n        maxTxAmountPerTime = totalSupply().mul(500).div(10000);\r\n \r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(deadAddress, true);\r\n        excludeFromFees(_newOwner, true);\r\n \r\n        setAuthOnDividends(_newOwner);\r\n\r\n\r\n        _isExcludedFromAntiwhale[address(this)] = true;\r\n        _isExcludedFromAntiwhale[_newOwner] = true;\r\n        _isExcludedFromAntiwhale[deadAddress] = true;\r\n \r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(_newOwner, 1e15 * (10**18));\r\n      \r\n    }\r\n \r\n    receive() external payable {\r\n \r\n  \t}\r\n\r\n    function blackList(address acc, bool value) public onlyOwner {\r\n          isBlacklisted[acc] = value;\r\n    }\r\n    function setExcludeStakingContract(address acc, bool value) public onlyOwner{\r\n        isStakingContract[acc] = value;\r\n        isExcludedFromFees[acc] = true;\r\n        \r\n    }\r\n\r\n    function isExcludedFromAntiwhale(address acc) public view returns(bool) {\r\n        return _isExcludedFromAntiwhale[acc];\r\n    }\r\n\r\n    function setExcludeAntiwhale(address acc, bool val) public onlyOwner {\r\n        _isExcludedFromAntiwhale[acc] = val;\r\n    }\r\n  \tfunction whitelistPreSale(address _presaleAddress, address _routerAddress) external onlyOwner {\r\n  \t    presaleAddress = _presaleAddress;\r\n        token1DividendTracker.excludeFromDividends(_presaleAddress, true);\r\n        token2DividendTracker.excludeFromDividends(_presaleAddress, true);\r\n        excludeFromFees(_presaleAddress, true);\r\n \r\n        token1DividendTracker.excludeFromDividends(_routerAddress, true);\r\n        token2DividendTracker.excludeFromDividends(_routerAddress, true);\r\n        excludeFromFees(_routerAddress, true);\r\n  \t}\r\n \r\n  \tfunction prepareForPartherOrExchangeListing(address _partnerOrExchangeAddress) external onlyOwner {\r\n  \t    token1DividendTracker.excludeFromDividends(_partnerOrExchangeAddress, true);\r\n        token2DividendTracker.excludeFromDividends(_partnerOrExchangeAddress, true);\r\n        excludeFromFees(_partnerOrExchangeAddress, true);\r\n  \t}\r\n \r\n  \r\n  \tfunction updatetoken2DividendToken(address _newContract) external onlyOwner {\r\n  \t    token2DividendToken = _newContract;\r\n  \t    token2DividendTracker.setDividendTokenAddress(_newContract);\r\n  \t}\r\n \r\n  \tfunction updatetoken1DividendToken(address _newContract) external onlyOwner {\r\n  \t    token1DividendToken = _newContract;\r\n  \t    token1DividendTracker.setDividendTokenAddress(_newContract);\r\n  \t}\r\n\r\n    function addReferral(address referr) public {\r\n        referrals[msg.sender] = referr;\r\n    }\r\n    \r\n  \tfunction updateMarketingWallet(address _newWallet) external onlyOwner {\r\n  \t    require(_newWallet != marketingWallet, \"SafeplusV2: The marketing wallet is already this address\");\r\n        excludeFromFees(_newWallet, true);\r\n        emit MarketingWalletUpdated(marketingWallet, _newWallet);\r\n  \t    marketingWallet = _newWallet;\r\n  \t}\r\n \r\n  \tfunction setSwapTokensAtAmount(uint256 _swapAmount) external onlyOwner {\r\n  \t    swapTokensAtAmount = _swapAmount;\r\n  \t}\r\n \r\n    function setTradingIsEnabled() external onlyOwner {\r\n        tradingIsEnabled = true;\r\n    }\r\n \r\n    function setAuthOnDividends(address account) public onlyOwner{\r\n        token1DividendTracker.setAuth(account);\r\n        token2DividendTracker.setAuth(account);\r\n    }\r\n \r\n    function edit_dividends_settings(uint256 valueToken1, uint256 _valueToken2) external onlyOwner {\r\n    \r\n            token1DividendTracker.updateClaimWait(valueToken1);\r\n            token2DividendTracker.updateClaimWait(_valueToken2);\r\n    }\r\n\r\n    function settoken1DividendEnabled(bool _enabled) external onlyOwner {\r\n        require(token1DividendEnabled != _enabled, \"Can't set flag to same status\");\r\n        if (_enabled == false) {\r\n            previoustoken1DividendRewardsFee = token1DividendRewardsFee;\r\n            token1DividendRewardsFee = 0;\r\n            token1DividendEnabled = _enabled;\r\n        } else {\r\n            token1DividendRewardsFee = previoustoken1DividendRewardsFee;\r\n            totalFees = token1DividendRewardsFee.add(marketingFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n            token1DividendEnabled = _enabled;\r\n        }\r\n \r\n        emit token1DividendEnabledUpdated(_enabled);\r\n    }\r\n \r\n    function settoken2DividendEnabled(bool _enabled) external onlyOwner {\r\n        require(token2DividendEnabled != _enabled, \"Can't set flag to same status\");\r\n        if (_enabled == false) {\r\n            previoustoken2DividendRewardsFee = token2DividendRewardsFee;\r\n            token2DividendRewardsFee = 0;\r\n            token2DividendEnabled = _enabled;\r\n        } else {\r\n            token2DividendRewardsFee = previoustoken2DividendRewardsFee;\r\n            totalFees = token2DividendRewardsFee.add(marketingFee).add(token1DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n            token2DividendEnabled = _enabled;\r\n        }\r\n \r\n        emit token2DividendEnabledUpdated(_enabled);\r\n    }\r\n \r\n    function setMarketingEnabled(bool _enabled) external onlyOwner {\r\n        require(marketingEnabled != _enabled, \"Can't set flag to same status\");\r\n        if (_enabled == false) {\r\n            previousMarketingFee = marketingFee;\r\n            marketingFee = 0;\r\n            marketingEnabled = _enabled;\r\n        } else {\r\n            marketingFee = previousMarketingFee;\r\n            totalFees = marketingFee.add(token2DividendRewardsFee).add(token1DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n            marketingEnabled = _enabled;\r\n        }\r\n \r\n        emit MarketingEnabledUpdated(_enabled);\r\n    }\r\n \r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        require(swapAndLiquifyEnabled != _enabled, \"Can't set flag to same status\");\r\n        if (_enabled == false) {\r\n            previousLiquidityFee = liquidityFee;\r\n            liquidityFee = 0;\r\n            swapAndLiquifyEnabled = _enabled;\r\n        } else {\r\n            liquidityFee = previousLiquidityFee;\r\n            totalFees = token2DividendRewardsFee.add(marketingFee).add(token1DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n            swapAndLiquifyEnabled = _enabled;\r\n        }\r\n \r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function updatetoken1DividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(token1DividendTracker), \"TestPlus: The dividend tracker already has that address\");\r\n \r\n        Token1DividendTracker newtoken1DividendTracker = Token1DividendTracker(payable(newAddress));\r\n \r\n        require(newtoken1DividendTracker.owner() == address(this), \"TestPlus: The new dividend tracker must be owned by the SafePlus token contract\");\r\n \r\n        newtoken1DividendTracker.excludeFromDividends(address(newtoken1DividendTracker), true);\r\n        newtoken1DividendTracker.excludeFromDividends(address(this), true);\r\n        newtoken1DividendTracker.excludeFromDividends(address(uniswapV2Router), true);\r\n        newtoken1DividendTracker.excludeFromDividends(address(deadAddress), true);\r\n \r\n        emit Updatetoken1DividendTracker(newAddress, address(token1DividendTracker));\r\n \r\n        token1DividendTracker = newtoken1DividendTracker;\r\n    }\r\n \r\n    function updatetoken2DividendTracker(address newAddress) external onlyOwner {\r\n        require(newAddress != address(token2DividendTracker), \"TestPlus: The dividend tracker already has that address\");\r\n \r\n       Token2DividendTracker newtoken2DividendTracker = Token2DividendTracker(payable(newAddress));\r\n \r\n        require(newtoken2DividendTracker.owner() == address(this), \"TestPlus: The new dividend tracker must be owned by the SafePlus token contract\");\r\n \r\n        newtoken2DividendTracker.excludeFromDividends(address(newtoken2DividendTracker), true);\r\n        newtoken2DividendTracker.excludeFromDividends(address(this), true);\r\n        newtoken2DividendTracker.excludeFromDividends(address(uniswapV2Router), true);\r\n        newtoken2DividendTracker.excludeFromDividends(address(deadAddress), true);\r\n \r\n        emit Updatetoken2DividendTracker(newAddress, address(token2DividendTracker));\r\n \r\n        token2DividendTracker = newtoken2DividendTracker;\r\n    }\r\n \r\n    function updateToken1DividendRewardFee(uint8 newFee) external onlyOwner {\r\n        token1DividendRewardsFee = newFee;\r\n        totalFees = token1DividendRewardsFee.add(marketingFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n        require(totalFees <= 25, \"Total fees cannot be higher than 25%\");\r\n    }\r\n \r\n    function updateToken2DividendRewardFee(uint8 newFee) external onlyOwner {\r\n        token2DividendRewardsFee = newFee;\r\n        totalFees = token2DividendRewardsFee.add(token1DividendRewardsFee).add(marketingFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n        require(totalFees <= 25, \"Total fees cannot be higher than 25%\");\r\n    }\r\n \r\n    function updateMarketingFee(uint8 newFee) external onlyOwner {\r\n        marketingFee = newFee;\r\n        totalFees = marketingFee.add(token1DividendRewardsFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n        require(totalFees <= 25, \"Total fees cannot be higher than 25%\");\r\n    }\r\n \r\n    function updateLiquidityFee(uint8 newFee) external onlyOwner {\r\n        liquidityFee = newFee;\r\n        totalFees = marketingFee.add(token1DividendRewardsFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n        require(totalFees <= 25, \"Total fees cannot be higher than 25%\");\r\n    }\r\n\r\n    function updateBuybackFee(uint fee) external onlyOwner {\r\n        buybackFee = fee;\r\n        totalFees = marketingFee.add(token1DividendRewardsFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n        require(totalFees <= 25, \"Total fees cannot be higher than 25%\");\r\n\r\n    }\r\n     function updateGreenMoonFee(uint fee) external onlyOwner {\r\n        greenmoonFee = fee;\r\n        totalFees = marketingFee.add(token1DividendRewardsFee).add(token2DividendRewardsFee).add(liquidityFee).add(buybackFee).add(greenmoonFee);\r\n        require(totalFees <= 25, \"Total fees cannot be higher than 25%\");\r\n\r\n    }\r\n    function updateUniswapV2Router(address newAddress) external onlyOwner {\r\n        require(newAddress != address(uniswapV2Router), \"SafeplusV2: The router already has that address\");\r\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n    }\r\n \r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        isExcludedFromFees[account] = excluded;\r\n \r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n \r\n    function excludeFromDividend(address account, bool exclude) public onlyOwner {\r\n        token1DividendTracker.excludeFromDividends(address(account), exclude);\r\n        token2DividendTracker.excludeFromDividends(address(account), exclude);\r\n    }\r\n \r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n \r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n \r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != uniswapV2Pair, \"SafeplusV2: The PanadaSwap pair cannot be removed from automatedMarketMakerPairs\");\r\n \r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n \r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private onlyOwner {\r\n        require(automatedMarketMakerPairs[pair] != value, \"TestPlus: Automated market maker pair is already set to that value\");\r\n        automatedMarketMakerPairs[pair] = value;\r\n \r\n        if(value) {\r\n            token1DividendTracker.excludeFromDividends(pair, true);\r\n            token2DividendTracker.excludeFromDividends(pair, true);\r\n        }\r\n \r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n \r\n    function updateGasForProcessing(uint256 newValue) external onlyOwner {\r\n        require(newValue != gasForProcessing, \"SafeplusV2: Cannot update gasForProcessing to same value\");\r\n        gasForProcessing = newValue;\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n    }\r\n \r\n    function updateMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        token1DividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n        token2DividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n \r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        token1DividendTracker.updateClaimWait(claimWait);\r\n        token2DividendTracker.updateClaimWait(claimWait);\r\n    }\r\n \r\n    function gettoken1ClaimWait() external view returns(uint256) {\r\n        return token1DividendTracker.claimWait();\r\n    }\r\n \r\n    function gettoken2ClaimWait() external view returns(uint256) {\r\n        return token2DividendTracker.claimWait();\r\n    }\r\n \r\n    function getTotaltoken1DividendsDistributed() external view returns (uint256) {\r\n        return token1DividendTracker.totalDividendsDistributed();\r\n    }\r\n \r\n    function getTotaltoken2DividendsDistributed() external view returns (uint256) {\r\n        return token2DividendTracker.totalDividendsDistributed();\r\n    }\r\n \r\n    function getIsExcludedFromFees(address account) public view returns(bool) {\r\n        return isExcludedFromFees[account];\r\n    }\r\n \r\n    function withdrawabletoken1DividendOf(address account) external view returns(uint256) {\r\n    \treturn token1DividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n \r\n  \tfunction withdrawabletoken2DividendOf(address account) external view returns(uint256) {\r\n    \treturn token2DividendTracker.withdrawableDividendOf(account);\r\n  \t}\r\n \r\n\tfunction token1DividendTokenBalanceOf(address account) external view returns (uint256) {\r\n\t\treturn token1DividendTracker.balanceOf(account);\r\n\t}\r\n \r\n\tfunction token2DividendTokenBalanceOf(address account) external view returns (uint256) {\r\n\t\treturn token2DividendTracker.balanceOf(account);\r\n\t}\r\n \r\n    function getAccounttoken1DividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return token1DividendTracker.getAccount(account);\r\n    }\r\n \r\n    function getAccounttoken2DividendsInfo(address account)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n        return token2DividendTracker.getAccount(account);\r\n    }\r\n \r\n\tfunction getAccounttoken1DividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn token1DividendTracker.getAccountAtIndex(index);\r\n    }\r\n \r\n    function getAccounttoken2DividendsInfoAtIndex(uint256 index)\r\n        external view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \treturn token2DividendTracker.getAccountAtIndex(index);\r\n    }\r\n \r\n\tfunction processDividendTracker(uint256 gas) external onlyOwner {\r\n\t\t(uint256 token1Iterations, uint256 token1Claims, uint256 token1LastProcessedIndex) = token1DividendTracker.process(gas);\r\n\t\temit Processedtoken1DividendTracker(token1Iterations, token1Claims, token1LastProcessedIndex, false, gas, tx.origin);\r\n \r\n\t\t(uint256 token2Iterations, uint256 token2Claims, uint256 token2LastProcessedIndex) = token2DividendTracker.process(gas);\r\n\t\temit Processedtoken2DividendTracker(token2Iterations, token2Claims, token2LastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n \r\n    function claim() external {\r\n\t\ttoken1DividendTracker.processAccount(payable(msg.sender), false);\r\n\t\ttoken2DividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n    \r\n    function getLasttoken1DividendProcessedIndex() external view returns(uint256) {\r\n    \treturn token1DividendTracker.getLastProcessedIndex();\r\n    }\r\n \r\n    function getLasttoken2DividendProcessedIndex() external view returns(uint256) {\r\n    \treturn token2DividendTracker.getLastProcessedIndex();\r\n    }\r\n \r\n    function getNumberOftoken1DividendTokenHolders() external view returns(uint256) {\r\n        return token1DividendTracker.getNumberOfTokenHolders();\r\n    }\r\n \r\n    function getNumberOftoken2DividendTokenHolders() external view returns(uint256) {\r\n        return token2DividendTracker.getNumberOfTokenHolders();\r\n    }\r\n    \r\n    function startBuyback(uint valBNB) public payable onlyOwner {\r\n        require(msg.value >= valBNB, \"bnb invalid\");\r\n        swapETHForTokens(msg.value);\r\n    }\r\n\r\n    \r\n    function swapETHForTokens(uint256 bnbAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: bnbAmount}(\r\n            0, // accept any amount of ETH\r\n            path,\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n \r\n    }\r\n\r\n    function setTimeSellMaxTxAmount(uint val) public onlyOwner {\r\n        require(val <= 10 days, \"max 1 week\");\r\n        timeForSellTotalMaxTxAmount = val;\r\n    }\r\n    function setMaxTxAmountTime(uint val) public onlyOwner {\r\n        require(val >= 100, \"Minimum 100\");\r\n        maxTxAmountPerTime = totalSupply().mul(val).div(10000);\r\n    }\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(!isBlacklisted[from] && !isBlacklisted[to], \"Blacklisted\");\r\n        require(tradingIsEnabled || (isExcludedFromFees[from] || isExcludedFromFees[to]), \"SafeplusV2: Trading has not started yet\");\r\n \r\n        bool excludedAccount = isExcludedFromFees[from] || isExcludedFromFees[to];\r\n \r\n        if (!_isExcludedFromAntiwhale[from] && !_isExcludedFromAntiwhale[to]) {\r\n            if (to == uniswapV2Pair) {\r\n                uint totalSellNow = sellsPerUserTime[from];\r\n                if(block.timestamp - sellsStartPerUser[from] >= timeForSellTotalMaxTxAmount) {\r\n                    sellsStartPerUser[from] = block.timestamp;\r\n                    sellsPerUserTime[from] = 0;\r\n                } else {\r\n                    require(totalSellNow + amount <= maxTxAmountPerTime, \"Max transaction reached for a specific time.\");\r\n                    sellsPerUserTime[from] = totalSellNow + amount;\r\n                }\r\n            }\r\n        }\r\n \r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\r\n \r\n        if (!swapping && canSwap && from != uniswapV2Pair) {\r\n            swapping = true;\r\n            uint256 liqTokensToAdd;\r\n            if (liquidityFee > 0) {\r\n                liqTokensToAdd = contractTokenBalance.mul(liquidityFee.div(2)).div(totalFees);\r\n                contractTokenBalance -= liqTokensToAdd;\r\n            }\r\n            uint initBalance = address(this).balance;\r\n            swapTokensForBNB(contractTokenBalance);\r\n            uint finalBalance = address(this).balance.sub(initBalance);\r\n            if (marketingEnabled  && marketingFee > 0) {\r\n              \r\n                uint256 swapTokens = finalBalance.div(totalFees).mul(marketingFee);\r\n                //swapTokensForBNB(swapTokens);\r\n                payable(marketingWallet).transfer(swapTokens);\r\n            }\r\n\r\n            if(buybackFee > 0) {\r\n                uint256 buybackTokens = finalBalance.div(totalFees).mul(buybackFee);\r\n                payable(marketingWallet).transfer(buybackTokens);\r\n            }\r\n            if(greenmoonFee > 0) {\r\n                uint256 greenmonTokens = finalBalance.div(totalFees).mul(greenmoonFee);\r\n                payable(marketingWallet).transfer(greenmonTokens);\r\n            }\r\n\r\n\r\n            if(swapAndLiquifyEnabled && liquidityFee > 0) {\r\n                uint256 liqTokens = liqTokensToAdd;\r\n                addLiquidity(liqTokens, finalBalance.mul(liquidityFee.div(2)).div(totalFees));\r\n            }\r\n \r\n            if (token1DividendEnabled && token1DividendRewardsFee > 0) {\r\n                uint256 token1Tokens = finalBalance.div(totalFees).mul(token1DividendRewardsFee);\r\n                swapAndSendtoken1Dividends(token1Tokens);\r\n            }\r\n \r\n            if (token2DividendEnabled && token2DividendRewardsFee > 0) {\r\n                uint256 token2Tokens = finalBalance.div(totalFees).mul(token2DividendRewardsFee);\r\n                swapAndSendtoken2Dividends(token2Tokens);\r\n            }\r\n \r\n                swapping = false;\r\n        }\r\n \r\n        bool takeFee = tradingIsEnabled && !swapping && !excludedAccount;\r\n \r\n        if(takeFee) {\r\n        \tuint256 fees = amount.div(100).mul(totalFees);\r\n            if(referrals[from] != address(0) || referrals[to] != address(0)) {\r\n                fees -= fees.div(100).mul(referralFeeDecrease);\r\n            }\r\n \r\n        \tamount = amount.sub(fees);\r\n \r\n            super._transfer(from, address(this), fees);\r\n        }\r\n \r\n        super._transfer(from, to, amount);\r\n        if(!isStakingContract[from] && !isStakingContract[to]) {\r\n            try token1DividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n            try token2DividendTracker.setBalance(payable(from), balanceOf(from)) {} catch {}\r\n            try token1DividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n            try token2DividendTracker.setBalance(payable(to), balanceOf(to)) {} catch {}\r\n        }\r\n        if(!swapping) {\r\n\t    \tuint256 gas = gasForProcessing;\r\n \r\n\t    \ttry token1DividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit Processedtoken1DividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t}\r\n\t    \tcatch {\r\n \r\n\t    \t}\r\n \r\n\t    \ttry token2DividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n\t    \t\temit Processedtoken2DividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n\t    \t}\r\n\t    \tcatch {\r\n \r\n\t    \t}\r\n        }\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n \r\n        uint256 initialBalance = address(this).balance;\r\n \r\n        swapTokensForBNB(half);\r\n \r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n \r\n        addLiquidity(otherHalf, newBalance);\r\n \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n \r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n \r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n \r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n \r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n \r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n \r\n    }\r\n \r\n    function swapTokensForDividendToken(uint256 _tokenAmount, address _recipient, address _dividendAddress) private {\r\n        if(_dividendAddress != address(0)) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = _dividendAddress;\r\n \r\n\r\n \r\n        // make the swap\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: _tokenAmount}(\r\n            0, // accept any amount of dividend token\r\n            path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n        } \r\n    }\r\n \r\n    function swapAndSendtoken1Dividends(uint256 tokens) private {\r\n        if (token1DividendToken != address(0)) {\r\n          uint init = IERC20(token1DividendToken).balanceOf(address(this));\r\n        swapTokensForDividendToken(tokens, address(this), token1DividendToken);\r\n        uint256 token1Dividends = IERC20(token1DividendToken).balanceOf(address(this)) - init;\r\n        transferDividends(token1DividendToken, address(token1DividendTracker), token1DividendTracker, token1Dividends);\r\n        } else {\r\n              (bool success,) = address(token1DividendTracker).call{value: tokens}(\"\");\r\n \r\n                if(success) {\r\n                    emit SendDividends(tokens);\r\n                }\r\n        }\r\n    }\r\n \r\n    function swapAndSendtoken2Dividends(uint256 tokens) private {\r\n        if (token2DividendToken != address(0)) {\r\n              uint init = IERC20(token2DividendToken).balanceOf(address(this));\r\n            swapTokensForDividendToken(tokens, address(this), token2DividendToken);\r\n            uint256 token2Dividends = IERC20(token2DividendToken).balanceOf(address(this)) - init;\r\n\r\n            transferDividends(token2DividendToken, address(token2DividendTracker), token2DividendTracker, token2Dividends);\r\n        } else {\r\n          \r\n            (bool success,) = address(token2DividendTracker).call{value: tokens}(\"\");\r\n \r\n                if(success) {\r\n                    emit SendDividends(tokens);\r\n                }\r\n        }\r\n    }\r\n\r\n    \r\n \r\n    function transferToWallet(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n \r\n    function transferDividends(address dividendToken, address dividendTracker, DividendPayingToken dividendPayingTracker, uint256 amount) private {\r\n        bool success = IERC20(dividendToken).transfer(dividendTracker, amount);\r\n \r\n        if (success) {\r\n            dividendPayingTracker.distributeDividends(amount);\r\n            emit SendDividends(amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, Ownable, IDividendPayingToken, IDividendPayingTokenOptional {\r\n  using SafeMath for uint256;\r\n  using SafeMathUint for uint256;\r\n  using SafeMathInt for int256;\r\n \r\n  uint256 constant internal magnitude = 2**128;\r\n \r\n  uint256 internal magnifiedDividendPerShare;\r\n  uint256 internal lastAmount;\r\n \r\n  address public dividendToken;\r\n \r\n \r\n  mapping(address => int256) internal magnifiedDividendCorrections;\r\n  mapping(address => uint256) internal withdrawnDividends;\r\n  mapping(address => bool) _isAuth;\r\n \r\n  uint256 public totalDividendsDistributed;\r\n \r\n  modifier onlyAuth() {\r\n    require(_isAuth[msg.sender], \"Auth: caller is not the authorized\");\r\n    _;\r\n  }\r\n \r\n  constructor(string memory _name, string memory _symbol, address _token) ERC20(_name, _symbol) {\r\n    dividendToken = _token;\r\n    _isAuth[msg.sender] = true;\r\n  }\r\n \r\n  function setAuth(address account) external onlyAuth{\r\n      _isAuth[account] = true;\r\n  }\r\n\r\n    receive() payable external {\r\n        if(dividendToken == address(0)) {\r\n            distributeDividends(msg.value);\r\n        }\r\n    }\r\n \r\n  function distributeDividends(uint256 amount) public onlyOwner {\r\n    require(totalSupply() > 0);\r\n \r\n    if (amount > 0) {\r\n      magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n        (amount).mul(magnitude) / totalSupply()\r\n      );\r\n      emit DividendsDistributed(msg.sender, amount);\r\n \r\n      totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n    }\r\n  }\r\n \r\n  function withdrawDividend() public virtual override {\r\n    _withdrawDividendOfUser(payable(msg.sender));\r\n  }\r\n \r\n  function setDividendTokenAddress(address newToken) external virtual onlyAuth{\r\n      dividendToken = newToken;\r\n  }\r\n \r\n  function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n    uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n    if (_withdrawableDividend > 0) {\r\n      withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n      emit DividendWithdrawn(user, _withdrawableDividend);\r\n      if (address(dividendToken) != address(0)) {\r\n        bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n    \r\n        if(!success) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n            return 0;\r\n        }\r\n      } else {\r\n          (bool success,) = payable(user).call{value: _withdrawableDividend, gas: 5000}(\"\");\r\n          if (!success) {\r\n              withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n              return 0;\r\n          }\r\n      }\r\n \r\n      return _withdrawableDividend;\r\n    }\r\n \r\n    return 0;\r\n  }\r\n \r\n \r\n  function dividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawableDividendOf(_owner);\r\n  }\r\n \r\n  function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n    return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n  }\r\n \r\n  function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n    return withdrawnDividends[_owner];\r\n  }\r\n \r\n \r\n  function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n    return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n      .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n  }\r\n \r\n  function _transfer(address from, address to, uint256 value) internal virtual override {\r\n    require(false);\r\n \r\n    int256 _magCorrection = magnifiedDividendPerShare.mul(value).toInt256Safe();\r\n    magnifiedDividendCorrections[from] = magnifiedDividendCorrections[from].add(_magCorrection);\r\n    magnifiedDividendCorrections[to] = magnifiedDividendCorrections[to].sub(_magCorrection);\r\n  }\r\n \r\n  function _mint(address account, uint256 value) internal override {\r\n    super._mint(account, value);\r\n \r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n \r\n  function _burn(address account, uint256 value) internal override {\r\n    super._burn(account, value);\r\n \r\n    magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n      .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n  }\r\n \r\n  function _setBalance(address account, uint256 newBalance) internal {\r\n    uint256 currentBalance = balanceOf(account);\r\n \r\n    if(newBalance > currentBalance) {\r\n      uint256 mintAmount = newBalance.sub(currentBalance);\r\n      _mint(account, mintAmount);\r\n    } else if(newBalance < currentBalance) {\r\n      uint256 burnAmount = currentBalance.sub(newBalance);\r\n      _burn(account, burnAmount);\r\n    }\r\n  }\r\n}\r\n\r\ncontract Token1DividendTracker is DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n \r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n \r\n    mapping (address => bool) public excludedFromDividends;\r\n \r\n    mapping (address => uint256) public lastClaimTimes;\r\n \r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n \r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n \r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n \r\n    constructor() DividendPayingToken(\"SafePlus_Token1_Dividend_Tracker\", \"SafePlus_Token1_Dividend_Tracker\", 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56) {\r\n    \tclaimWait = 3600;\r\n        minimumTokenBalanceForDividends = 2000000 * (10**18); //must hold 2000000+ tokens\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"SafePlus_Token1_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n \r\n    function withdrawDividend() pure public override {\r\n        require(false, \"SafePlus_Token1_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main SafePlus contract.\");\r\n    }\r\n \r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n      dividendToken = newToken;\r\n    }\r\n \r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends, \"New mimimum balance for dividend cannot be same as current minimum balance\");\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n \r\n    function excludeFromDividends(address account, bool exclude) external onlyOwner {\r\n      if (exclude = true) {\r\n            require(!excludedFromDividends[account]);\r\n          excludedFromDividends[account] = true;\r\n \r\n          _setBalance(account, 0);\r\n          tokenHoldersMap.remove(account);\r\n \r\n          emit ExcludeFromDividends(account);\r\n        } else {\r\n            require(excludedFromDividends[account]);\r\n            excludedFromDividends[account] = false;\r\n                if(balanceOf(account) >= minimumTokenBalanceForDividends) {\r\n                _setBalance(account, balanceOf(account));\r\n    \t\t    tokenHoldersMap.set(account, balanceOf(account));\r\n    \t    }\r\n        }\r\n    }\r\n \r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"SafePlus_Token1_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"SafePlus_Token1_Dividend_Tracker: Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n \r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n \r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n \r\n \r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n \r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n \r\n        iterationsUntilProcessed = -1;\r\n \r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n \r\n \r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n \r\n \r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n \r\n        lastClaimTime = lastClaimTimes[account];\r\n \r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n \r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n \r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n \r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n \r\n        return getAccount(account);\r\n    }\r\n \r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n \r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n \r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n \r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n \r\n    \tprocessAccount(account, true);\r\n    }\r\n \r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n \r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n \r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n \r\n    \tuint256 gasUsed = 0;\r\n \r\n    \tuint256 gasLeft = gasleft();\r\n \r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n \r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n \r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n \r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n \r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n \r\n    \t\titerations++;\r\n \r\n    \t\tuint256 newGasLeft = gasleft();\r\n \r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n \r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n \r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n \r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n \r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n \r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n \r\n    \treturn false;\r\n    }\r\n}\r\n \r\ncontract Token2DividendTracker is DividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n \r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n \r\n    mapping (address => bool) public excludedFromDividends;\r\n \r\n    mapping (address => uint256) public lastClaimTimes;\r\n \r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n \r\n    event ExcludeFromDividends(address indexed account);\r\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\r\n \r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n \r\n    constructor() DividendPayingToken(\"SafePlus_Token2_Dividend_Tracker\", \"SafePlus_Token2_Dividend_Tracker\", address(0)) {\r\n    \tclaimWait = 3600;\r\n        minimumTokenBalanceForDividends = 2000000 * (10**18); //must hold 2000000+ tokens\r\n    }\r\n \r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"SafePlus_Token2_Dividend_Tracker: No transfers allowed\");\r\n    }\r\n \r\n    function withdrawDividend() pure public override {\r\n        require(false, \"SafePlus_Token2_Dividend_Tracker: withdrawDividend disabled. Use the 'claim' function on the main SafePlus contract.\");\r\n    }\r\n \r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n      dividendToken = newToken;\r\n    }\r\n \r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        require(_newMinimumBalance != minimumTokenBalanceForDividends, \"New mimimum balance for dividend cannot be same as current minimum balance\");\r\n        minimumTokenBalanceForDividends = _newMinimumBalance * (10**18);\r\n    }\r\n \r\n    function excludeFromDividends(address account, bool exclude) external onlyOwner {\r\n      if (exclude = true) {\r\n            require(!excludedFromDividends[account]);\r\n          excludedFromDividends[account] = true;\r\n \r\n          _setBalance(account, 0);\r\n          tokenHoldersMap.remove(account);\r\n \r\n          emit ExcludeFromDividends(account);\r\n        } else {\r\n            require(excludedFromDividends[account]);\r\n            excludedFromDividends[account] = false;\r\n                if(balanceOf(account) >= minimumTokenBalanceForDividends) {\r\n                _setBalance(account, balanceOf(account));\r\n    \t\t    tokenHoldersMap.set(account, balanceOf(account));\r\n    \t    }\r\n        }\r\n    }\r\n \r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 3600 && newClaimWait <= 86400, \"SafePlus_Token2_Dividend_Tracker: claimWait must be updated to between 1 and 24 hours\");\r\n        require(newClaimWait != claimWait, \"SafePlus_Token2_Dividend_Tracker: Cannot update claimWait to same value\");\r\n        emit ClaimWaitUpdated(newClaimWait, claimWait);\r\n        claimWait = newClaimWait;\r\n    }\r\n \r\n    function getLastProcessedIndex() external view returns(uint256) {\r\n    \treturn lastProcessedIndex;\r\n    }\r\n \r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n \r\n \r\n    function getAccount(address _account)\r\n        public view returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n \r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n \r\n        iterationsUntilProcessed = -1;\r\n \r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                                                        tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                                                        0;\r\n \r\n \r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n \r\n \r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n \r\n        lastClaimTime = lastClaimTimes[account];\r\n \r\n        nextClaimTime = lastClaimTime > 0 ?\r\n                                    lastClaimTime.add(claimWait) :\r\n                                    0;\r\n \r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n                                                    nextClaimTime.sub(block.timestamp) :\r\n                                                    0;\r\n    }\r\n \r\n    function getAccountAtIndex(uint256 index)\r\n        public view returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256) {\r\n    \tif(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n \r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n \r\n        return getAccount(account);\r\n    }\r\n \r\n    function canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n    \tif(lastClaimTime > block.timestamp)  {\r\n    \t\treturn false;\r\n    \t}\r\n \r\n    \treturn block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n \r\n    function setBalance(address payable account, uint256 newBalance) external onlyOwner {\r\n    \tif(excludedFromDividends[account]) {\r\n    \t\treturn;\r\n    \t}\r\n \r\n    \tif(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n    \t\ttokenHoldersMap.set(account, newBalance);\r\n    \t}\r\n    \telse {\r\n            _setBalance(account, 0);\r\n    \t\ttokenHoldersMap.remove(account);\r\n    \t}\r\n \r\n    \tprocessAccount(account, true);\r\n    }\r\n \r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n    \tuint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n \r\n    \tif(numberOfTokenHolders == 0) {\r\n    \t\treturn (0, 0, lastProcessedIndex);\r\n    \t}\r\n \r\n    \tuint256 _lastProcessedIndex = lastProcessedIndex;\r\n \r\n    \tuint256 gasUsed = 0;\r\n \r\n    \tuint256 gasLeft = gasleft();\r\n \r\n    \tuint256 iterations = 0;\r\n    \tuint256 claims = 0;\r\n \r\n    \twhile(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n    \t\t_lastProcessedIndex++;\r\n \r\n    \t\tif(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n    \t\t\t_lastProcessedIndex = 0;\r\n    \t\t}\r\n \r\n    \t\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n \r\n    \t\tif(canAutoClaim(lastClaimTimes[account])) {\r\n    \t\t\tif(processAccount(payable(account), true)) {\r\n    \t\t\t\tclaims++;\r\n    \t\t\t}\r\n    \t\t}\r\n \r\n    \t\titerations++;\r\n \r\n    \t\tuint256 newGasLeft = gasleft();\r\n \r\n    \t\tif(gasLeft > newGasLeft) {\r\n    \t\t\tgasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n    \t\t}\r\n \r\n    \t\tgasLeft = newGasLeft;\r\n    \t}\r\n \r\n    \tlastProcessedIndex = _lastProcessedIndex;\r\n \r\n    \treturn (iterations, claims, lastProcessedIndex);\r\n    }\r\n \r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n \r\n    \tif(amount > 0) {\r\n    \t\tlastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n    \t\treturn true;\r\n    \t}\r\n \r\n    \treturn false;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"MarketingEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"Processedtoken1DividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"Processedtoken2DividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"Updatetoken1DividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"Updatetoken2DividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"token1DividendEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"token2DividendEnabledUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referr\",\"type\":\"address\"}],\"name\":\"addReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valueToken1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valueToken2\",\"type\":\"uint256\"}],\"name\":\"edit_dividends_settings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccounttoken1DividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccounttoken1DividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccounttoken2DividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccounttoken2DividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getIsExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLasttoken1DividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLasttoken2DividendProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOftoken1DividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOftoken2DividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotaltoken1DividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotaltoken2DividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken1ClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken2ClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greenmoonFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"}],\"name\":\"isExcludedFromAntiwhale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakingContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerOrExchangeAddress\",\"type\":\"address\"}],\"name\":\"prepareForPartherOrExchangeListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousBuybackfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousGreenMoonFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previoustoken1DividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previoustoken2DividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFeeDecrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sell_time_handler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAuthOnDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setExcludeAntiwhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acc\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setExcludeStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setMarketingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmountTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setTimeSellMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"settoken1DividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"settoken2DividendEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"valBNB\",\"type\":\"uint256\"}],\"name\":\"startBuyback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1DividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1DividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1DividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"token1DividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1DividendTracker\",\"outputs\":[{\"internalType\":\"contract Token1DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2DividendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2DividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2DividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"token2DividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token2DividendTracker\",\"outputs\":[{\"internalType\":\"contract Token2DividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateGreenMoonFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"updateMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateToken1DividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"updateToken2DividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updatetoken1DividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatetoken1DividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"updatetoken2DividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updatetoken2DividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"whitelistPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawabletoken1DividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawabletoken2DividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SafePlus", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000b89f1ff34cb725b5c560984159b513c2dc5b2e2", "EVMVersion": "Default", "Library": "IterableMapping:538fc6adeed8a27dc6d311ed086f52e88d4793b1", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://72eddd58489fd08c82f96b96f54bd46bf588441b5833cb01fc3b55f36fe4100a"}