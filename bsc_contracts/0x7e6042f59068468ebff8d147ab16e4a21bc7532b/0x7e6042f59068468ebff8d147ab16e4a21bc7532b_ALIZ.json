{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-19\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary DateTimeLibrary {\r\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint256 constant SECONDS_PER_MINUTE = 60;\r\n    int256 constant OFFSET19700101 = 2440588;\r\n\r\n    uint256 constant DOW_MON = 1;\r\n    uint256 constant DOW_TUE = 2;\r\n    uint256 constant DOW_WED = 3;\r\n    uint256 constant DOW_THU = 4;\r\n    uint256 constant DOW_FRI = 5;\r\n    uint256 constant DOW_SAT = 6;\r\n    uint256 constant DOW_SUN = 7;\r\n\r\n    function _daysToDate(uint256 _days)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        int256 __days = int256(_days);\r\n\r\n        int256 L = __days + 68569 + OFFSET19700101;\r\n        int256 N = (4 * L) / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int256 _year = (4000 * (L + 1)) / 1461001;\r\n        L = L - (1461 * _year) / 4 + 31;\r\n        int256 _month = (80 * L) / 2447;\r\n        int256 _day = L - (2447 * _month) / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n\r\n        year = uint256(_year);\r\n        month = uint256(_month);\r\n        day = uint256(_day);\r\n    }\r\n\r\n    function timestampToDate(uint256 timestamp)\r\n        internal\r\n        pure\r\n        returns (\r\n            uint256 year,\r\n            uint256 month,\r\n            uint256 day\r\n        )\r\n    {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ncontract ALIZ is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) public _tOwned;\r\n    mapping(address => uint256) private buyAmount;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcludedFromVip;\r\n    mapping(address => bool) private _isBlackList;\r\n    mapping(address => bool) isDividendExempt;\r\n    mapping(address => bool) private _updated;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public _tTotal;\r\n    uint256 public _rTotal;\r\n    uint256 public _tFeeTotal;\r\n\r\n    uint256 currentIndex;\r\n    uint256 distributorGas = 500000;\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public LPFeefenhong;\r\n\r\n    uint256 private InviterAmount;\r\n    uint256 public LPFeeTarget;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    address private _destroyAddress =\r\n        address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    address[] shareholders;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n\r\n    mapping(address => address) private inviter;\r\n    mapping(address => address[]) private inviterSuns;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n    address private _feeOwner;\r\n    address private _fee2Owner;\r\n    address private _fee3Owner;\r\n\r\n    bool public isExcludedFromFeeToTransfer;\r\n    bool public initialFee;\r\n\r\n    bool inSwapAndLiquify;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor(address tokenOwner, address newFeeOwner, address newFee2Owner, address newFee3Owner) {\r\n        //mainnet\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), address(0x55d398326f99059fF775485246999027B3197955));\r\n\r\n        // set the rest of the contract variables\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //testnet\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n        //     0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n        // );\r\n\r\n        // // Create a uniswap pair for this new token\r\n        // uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        //     .createPair(address(this), address(0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684));\r\n\r\n        // // set the rest of the contract variables\r\n        // uniswapV2Router = _uniswapV2Router;\r\n\r\n        //crazydoge\r\n        _name = \"CRAZYDOGE TOKEN\";\r\n        _symbol = \"CRAZYDOGE\";\r\n\r\n        _decimals = 18;\r\n        _tTotal = 1310000 * 10**_decimals;\r\n\r\n        LPFeeTarget = 3 * 10 ** _decimals;\r\n        InviterAmount = 31 * 10 ** 14;\r\n\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n        _rOwned[tokenOwner] = _rTotal;\r\n        _isExcludedFromFee[tokenOwner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n        _owner = msg.sender;\r\n        _feeOwner = newFeeOwner;\r\n        _fee2Owner = newFee2Owner;\r\n        _fee3Owner = newFee3Owner;\r\n        emit Transfer(address(0), tokenOwner, _tTotal);\r\n    }\r\n\r\n    function getFeeOwner() public view returns (address) {\r\n        return _feeOwner;\r\n    }\r\n\r\n    function getFee2Owner() public view returns (address) {\r\n        return _fee2Owner;\r\n    }\r\n\r\n    function getFee3Owner() public view returns (address) {\r\n        return _fee3Owner;\r\n    }\r\n\r\n    function setFeeOwner(address newFeeOwner) public onlyOwner {\r\n        _feeOwner = newFeeOwner;\r\n    }\r\n\r\n    function setFee2Owner(address newFee2Owner) public onlyOwner {\r\n        _fee2Owner = newFee2Owner;\r\n    }\r\n\r\n    function setFee3Owner(address newFee3Owner) public onlyOwner {\r\n        _fee3Owner = newFee3Owner;\r\n    }\r\n\r\n    function setLPFeeTarget(uint256 newLPFeeTarget) public onlyOwner {\r\n        LPFeeTarget = newLPFeeTarget;\r\n    }\r\n\r\n    function setInviterAmount(uint256 newInviterAmount) public onlyOwner {\r\n        InviterAmount = newInviterAmount;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromFee(address[] memory accounts) public onlyOwner {\r\n        for (uint256 ind = 0; ind < accounts.length; ind++) {\r\n            _isExcludedFromFee[accounts[ind]] = true; \r\n        }\r\n    }\r\n        \r\n\r\n    function includeInFee(address[] memory accounts) public onlyOwner {\r\n        for (uint256 ind = 0; ind < accounts.length; ind++) {\r\n            _isExcludedFromFee[accounts[ind]] = false;\r\n        }\r\n    }\r\n\r\n    function excludeBlockList(address[] memory accounts) public onlyOwner {\r\n        for (uint256 ind = 0; ind < accounts.length; ind++) {\r\n            if (_isExcludedFromFee[accounts[ind]]) _isExcludedFromFee[accounts[ind]] = false;\r\n            _isBlackList[accounts[ind]] = true;\r\n        }\r\n        \r\n    }\r\n\r\n    function includeBlockList(address[] memory accounts) public onlyOwner {\r\n        for (uint256 ind = 0; ind < accounts.length; ind++) {\r\n            _isBlackList[accounts[ind]] = false;\r\n        }     \r\n    }\r\n\r\n    function excludeFromVip(address[] memory accounts) public onlyOwner {\r\n        for (uint256 ind = 0; ind < accounts.length; ind++) {\r\n            _isExcludedFromVip[accounts[ind]] = true;\r\n        }   \r\n        \r\n    }\r\n\r\n    function includeInVip(address[] memory accounts) public onlyOwner {\r\n        for (uint256 ind = 0; ind < accounts.length; ind++) {\r\n            _isExcludedFromVip[accounts[ind]] = false;\r\n        } \r\n        \r\n    }\r\n\r\n    function setIsExcludedFromFeeToTransfer(bool newisExcludedFromFeeToTransfer) public onlyOwner {\r\n        isExcludedFromFeeToTransfer = newisExcludedFromFeeToTransfer;\r\n    }\r\n\r\n    function setInitialFee(bool newInitialFee) public onlyOwner {\r\n        initialFee = newInitialFee;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function getInviter(address user) public view returns (address) {\r\n        return inviter[user];\r\n    }\r\n\r\n    function getInviterSuns(address user)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return inviterSuns[user];\r\n    }\r\n\r\n    function getInviterSunSize(address user) public view returns (uint256) {\r\n        return inviterSuns[user].length;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function claimTokens() public onlyOwner {\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromVip(address account) public view returns (bool) {\r\n        return _isExcludedFromVip[account];\r\n    }\r\n\r\n    function isBlockList(address account) public view returns (bool) {\r\n        return _isBlackList[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        //require(!_isExcludedFromVip[from]);\r\n\r\n        // Anti-pinch: get the minimum amount of one usdt\r\n        uint256 minAmount = getExchangeCountOfOneUsdt();\r\n        \r\n        bool can1;\r\n        if (minAmount == 0) {\r\n            if (amount == InviterAmount) can1 = true;\r\n        } else {\r\n            if (amount >= minAmount.mul(50).div(100)) can1 = true;\r\n        }\r\n\r\n        bool can2 = from != uniswapV2Pair &&\r\n            to != uniswapV2Pair &&\r\n            balanceOf(to) == 0 &&\r\n            inviter[to] == address(0);\r\n\r\n        bool canInviter = can1 && can2;\r\n\r\n        // Whitelisted users do not need to pay fees\r\n        if (_isExcludedFromVip[from] || _isExcludedFromVip[to]) {\r\n            _tokenTransfer(from, to, amount, false);\r\n        } else {\r\n            if (from == uniswapV2Pair) {\r\n                // Blacklisted users cannot withdraw from the pool\r\n                require(!(_isBlackList[to] && IERC20(uniswapV2Pair).balanceOf(to) == 0), \r\n                \"Blacklisted users cannot withdraw from the pool\");\r\n                \r\n                if (isExcludedFromFeeToTransfer) {\r\n                    require(_isExcludedFromFee[to], \"permission denied\"); \r\n                } \r\n                // buy\r\n                _tokenTransferBuy(from, to, amount, true);\r\n                \r\n            } else if (to == uniswapV2Pair) {\r\n                if (!_isExcludedFromFee[from]) {\r\n                    require(!_isBlackList[from], \"Blacklisted user permission denied\");\r\n                }\r\n\r\n                if (isExcludedFromFeeToTransfer) {\r\n                    require(_isExcludedFromFee[from], \"permission denied\"); \r\n                } \r\n                // sell\r\n                _tokenTransferSell(from, to, amount, true);\r\n\r\n            } else {\r\n                if (!_isExcludedFromFee[from]) {\r\n                    require(!_isBlackList[from] && !_isBlackList[to] , \"Blacklisted user permission denied\"); \r\n                }\r\n                \r\n                // common transfer\r\n                if (balanceOf(_destroyAddress) >= 1296900 * 10**18) {\r\n                    _tokenTransfer(from, to, amount, false);\r\n                } else {\r\n                    _tokenTransfer(from, to, amount, true);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        if (canInviter) {\r\n            inviter[to] = from;\r\n            inviterSuns[from].push(to);\r\n        }\r\n\r\n        if (fromAddress == address(0)) fromAddress = from;\r\n        if (toAddress == address(0)) toAddress = to;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)\r\n            setShare(fromAddress);\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)\r\n            setShare(toAddress);\r\n\r\n        fromAddress = from;\r\n        toAddress = to;\r\n        if (\r\n            balanceOf(address(this)) >= LPFeeTarget &&\r\n            from != address(this) &&\r\n            LPFeefenhong.add(minPeriod) <= block.timestamp\r\n        ) {\r\n            process(distributorGas);\r\n            LPFeefenhong = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            uint256 amount = nowbanance\r\n                .mul(\r\n                    IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])\r\n                )\r\n                .div(IERC20(uniswapV2Pair).totalSupply());\r\n            if (balanceOf(address(this)) < amount) return;\r\n            distributeDividend(shareholders[currentIndex], amount);\r\n\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 amount) internal {\r\n        uint256 currentRate = _getRate();\r\n\r\n        uint256 rAmount = amount.mul(currentRate);\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].sub(rAmount);\r\n        _rOwned[shareholder] = _rOwned[shareholder].add(rAmount);\r\n        emit Transfer(address(this), shareholder, amount);\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n        addShareholder(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function _tokenTransferBuy(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            // 3% up 3 down 8\r\n            _takeInviterUpFee(\r\n                sender,\r\n                recipient,\r\n                tAmount.mul(3).div(100),\r\n                currentRate\r\n            );\r\n\r\n            _takeInviterDownFee(\r\n                sender,\r\n                recipient,\r\n                tAmount.mul(3).div(100),\r\n                currentRate\r\n            );\r\n\r\n            _takeTransfer(\r\n                sender,\r\n                _destroyAddress,\r\n                tAmount.mul(2).div(100),\r\n                currentRate\r\n            );\r\n\r\n            _takeTransfer(\r\n                sender,\r\n                _feeOwner,\r\n                tAmount.mul(5).div(100),\r\n                currentRate\r\n            );\r\n\r\n\r\n            uint256 initRate;\r\n            if (initialFee) {\r\n                // ?% initial fee\r\n                _takeTransfer(\r\n                    sender,\r\n                    _fee3Owner,\r\n                    tAmount.mul(29).div(100),\r\n                    currentRate\r\n                );\r\n\r\n                initRate += 29;\r\n            }\r\n            \r\n\r\n            rate = 10 + initRate;\r\n        }\r\n\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _tokenTransferSell(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n\r\n            // 3% dividends for holding coins\r\n            _takeTransfer(\r\n                sender,\r\n                address(this),\r\n                tAmount.mul(3).div(100),\r\n                currentRate\r\n            );\r\n\r\n            // 2% destroy\r\n            _takeTransfer(\r\n                sender,\r\n                _destroyAddress,\r\n                tAmount.mul(2).div(100),\r\n                currentRate\r\n            );\r\n\r\n            _takeTransfer(\r\n                sender,\r\n                _feeOwner,\r\n                tAmount.mul(10).div(100),\r\n                currentRate\r\n            );\r\n\r\n            (bool reb, bool reb1) = isoffs();\r\n            uint256 offRate;\r\n            if (reb) offRate += 5;\r\n            if (reb1) offRate += 10;\r\n\r\n            if (offRate > 0) {\r\n                // ?% Anti-fall mechanism\r\n                _takeTransfer(\r\n                    sender,\r\n                    _fee2Owner,\r\n                    tAmount.mul(offRate).div(100),\r\n                    currentRate\r\n                );\r\n            }\r\n            \r\n            rate = 15 + offRate;\r\n        }\r\n\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            _takeTransfer(\r\n                sender,\r\n                _destroyAddress,\r\n                tAmount.mul(5).div(100),\r\n                currentRate\r\n            );\r\n\r\n            rate = 5;\r\n        }\r\n\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[to] = _rOwned[to].add(rAmount);\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _takeInviterDownFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        address cur;\r\n        address reciver = _feeOwner;\r\n\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } else {\r\n            cur = sender;\r\n        }\r\n\r\n        uint256 rate;\r\n        for (int256 i = 0; i < 3; i++) {\r\n            if (i == 0) {\r\n                rate = 25;\r\n            } else if (i == 1) {\r\n                rate = 10;\r\n            } else {\r\n                rate = 5;\r\n            }\r\n\r\n            address[] memory sunList = inviterSuns[cur];\r\n            if (sunList.length > 0) {\r\n                uint256 index = block.timestamp.mod(sunList.length);\r\n                cur = sunList[index];\r\n            } else {\r\n                cur = address(0);\r\n            }\r\n            \r\n\r\n            if (cur == address(0) || IERC20(uniswapV2Pair).balanceOf(cur) == 0) {\r\n                reciver = _feeOwner;\r\n            } else {\r\n                reciver = cur;\r\n            }\r\n            uint256 curTAmount = tAmount.div(100).mul(rate);\r\n            uint256 curRAmount = curTAmount.mul(currentRate);\r\n            _rOwned[reciver] = _rOwned[reciver].add(curRAmount);\r\n            emit Transfer(sender, reciver, curTAmount);\r\n        }\r\n    }\r\n\r\n    function _takeInviterUpFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        address cur;\r\n        address reciver = _feeOwner;\r\n\r\n        if (sender == uniswapV2Pair) {\r\n            cur = recipient;\r\n        } else {\r\n            cur = sender;\r\n        }\r\n\r\n        uint256 rate;\r\n        for (int256 i = 0; i < 8; i++) {\r\n            if (i == 0) {\r\n                rate = 20;\r\n            } else if (i == 1) {\r\n                rate = 10;\r\n            } else {\r\n                rate = 5;\r\n            }\r\n\r\n            cur = inviter[cur];\r\n            if (cur == address(0) || IERC20(uniswapV2Pair).balanceOf(cur) == 0) {\r\n                reciver = _feeOwner;\r\n            } else {\r\n                reciver = cur;\r\n            }\r\n            uint256 curTAmount = tAmount.div(100).mul(rate);\r\n            uint256 curRAmount = curTAmount.mul(currentRate);\r\n            _rOwned[reciver] = _rOwned[reciver].add(curRAmount);\r\n            emit Transfer(sender, reciver, curTAmount);\r\n        }\r\n    }\r\n\r\n    function gept1() public view returns(uint256 ){\r\n        (uint112 _reserve0, , ) = IUniswapV2Pair(uniswapV2Pair)\r\n            .getReserves();\r\n        uint256 a = _reserve0;\r\n        if (a == 0) return 0;\r\n\r\n      uint[] memory amounts;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(0x55d398326f99059fF775485246999027B3197955);\r\n       amounts = uniswapV2Router.getAmountsOut(1e18, path);\r\n       if (amounts.length>0) {\r\n           return amounts[1];\r\n       } else {\r\n           return 0;\r\n       }\r\n       \r\n  }\r\n\r\n    function getExchangeCountOfOneUsdt() public view returns (uint256) {\r\n\r\n        (uint112 _reserve0, uint112 _reserve1, ) = IUniswapV2Pair(uniswapV2Pair)\r\n            .getReserves();\r\n        uint256 a = _reserve0;\r\n        uint256 b = _reserve1;\r\n        if (a == 0 || b == 0) return 0;\r\n\r\n        uint256[] memory amounts;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(0x55d398326f99059fF775485246999027B3197955);\r\n        path[1] = address(this);\r\n        amounts = uniswapV2Router.getAmountsOut(1e18, path);\r\n        if (amounts.length > 0) {\r\n            return amounts[1];\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Anti-fall mechanism\r\n    function getday(uint256 til) public pure returns (uint256) {\r\n        uint256 year;\r\n        uint256 month;\r\n        uint256 day;\r\n        (year, month, day) = DateTimeLibrary.timestampToDate(til);\r\n        uint256 timess = year * 10000 + month * 100 + day;\r\n        return timess;\r\n    }\r\n\r\n    uint256 public beforetime;\r\n    uint256 public beforebigp;\r\n\r\n    function setbefore(uint256 _beforetime, uint256 _beforebigp)\r\n        public\r\n        onlyOwner\r\n    {\r\n        beforetime = _beforetime;\r\n        beforebigp = _beforebigp;\r\n    }\r\n\r\n    uint256 public npo;\r\n\r\n    function isoffs() internal returns (bool reb, bool reb1) {\r\n        npo = gept1(); // token A\r\n\r\n        if (beforebigp == 0) {\r\n            if (npo > 0) {\r\n                beforebigp = npo;\r\n                beforetime = block.timestamp;\r\n            }\r\n        } else {\r\n            if (npo > beforebigp) {\r\n                // no somethings...\r\n            } else {\r\n                if (block.timestamp.sub(beforetime) >= (24 * 3600)) {\r\n                    beforebigp = npo;\r\n                    beforetime = block.timestamp;\r\n                } else {\r\n                    if (npo <= beforebigp.mul(80).div(100)) {\r\n                        return (true, true);\r\n                    } else if (npo <= (beforebigp.mul(90).div(100))) {\r\n                        return (true, false);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return (false, false);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFeeOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFee2Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFee3Owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeeTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforebigp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beforetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gept1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeCountOfOneUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee2Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee3Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInviterSunSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInviterSuns\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"til\",\"type\":\"uint256\"}],\"name\":\"getday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"includeBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"includeInVip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExcludedFromFeeToTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"npo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFee2Owner\",\"type\":\"address\"}],\"name\":\"setFee2Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFee3Owner\",\"type\":\"address\"}],\"name\":\"setFee3Owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeOwner\",\"type\":\"address\"}],\"name\":\"setFeeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newInitialFee\",\"type\":\"bool\"}],\"name\":\"setInitialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInviterAmount\",\"type\":\"uint256\"}],\"name\":\"setInviterAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newisExcludedFromFeeToTransfer\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromFeeToTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLPFeeTarget\",\"type\":\"uint256\"}],\"name\":\"setLPFeeTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beforetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_beforebigp\",\"type\":\"uint256\"}],\"name\":\"setbefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shareholderIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ALIZ", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000059d243d157db90ec3acc8eaa0613b3511678a8e8000000000000000000000000efb3b50fd02da5499ec24c1df6baa1bc8b23d2bf00000000000000000000000085d7921bba13c6d144b1973825f39163e52c44eb000000000000000000000000b2655a256bfa404d2f84e67ddca42c974b53ebbd", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8232635786f30ccc8af0f46e4a82087b651f4d8168b30a9568ecafc24ec34b0f"}