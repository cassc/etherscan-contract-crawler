{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.17;\r\n\r\ncontract OwnedUpgradeAbilityProxy {\r\n\r\n    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event NewPendingOwner(address currentOwner, address pendingOwner);\r\n\r\n    bytes32 private constant proxyOwnerPosition = 0x3b776454883a83bf3e09d3412bfa01055a63fd59b82c3d51ead7de79bb45e94d;\r\n    bytes32 private constant pendingProxyOwnerPosition = 0x5e641768c6fd46f278255cf087f2eba7f3954a6059c56cee400fe437554909a1;\r\n    bytes32 private constant implementationPosition = 0xb8c5d0871d72d0b5b1e2f73883929b381fcb8b52593756a4693d94f14716bcc5;\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    constructor()  {\r\n        _setUpgradeabilityOwner(msg.sender);\r\n    }\r\n\r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == proxyOwner(), \"only Proxy Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyPendingProxyOwner() {\r\n        require(msg.sender == pendingProxyOwner(), \"only pending Proxy Owner\");\r\n        _;\r\n    }\r\n\r\n    function proxyOwner() public view returns (address owner) {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            owner := sload(position)\r\n        }\r\n    }\r\n\r\n    function pendingProxyOwner() public view returns (address pendingOwner) {\r\n        bytes32 position = pendingProxyOwnerPosition;\r\n        assembly {\r\n            pendingOwner := sload(position)\r\n        }\r\n    }\r\n\r\n    function _setUpgradeabilityOwner(address newProxyOwner) internal {\r\n        bytes32 position = proxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newProxyOwner)\r\n        }\r\n    }\r\n\r\n    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\r\n        bytes32 position = pendingProxyOwnerPosition;\r\n        assembly {\r\n            sstore(position, newPendingProxyOwner)\r\n        }\r\n    }\r\n\r\n    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\r\n        require(newOwner != address(0));\r\n        _setPendingUpgradeabilityOwner(newOwner);\r\n        emit NewPendingOwner(proxyOwner(), newOwner);\r\n    }\r\n\r\n    function claimProxyOwnership() external onlyPendingProxyOwner {\r\n        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\r\n        _setUpgradeabilityOwner(pendingProxyOwner());\r\n        _setPendingUpgradeabilityOwner(address(0));\r\n    }\r\n\r\n    function upgradeTo(address _implementation) public virtual onlyProxyOwner {\r\n        address currentImplementation;\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            currentImplementation := sload(position)\r\n        }\r\n        require(currentImplementation != _implementation);\r\n        assembly {\r\n            sstore(position, _implementation)\r\n        }\r\n        emit Upgraded(_implementation);\r\n    }\r\n\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 position = implementationPosition;\r\n        assembly {\r\n            impl := sload(position)\r\n        }\r\n    }\r\n\r\n    fallback() external payable {\r\n        proxyCall();\r\n    }\r\n\r\n    receive() external payable {\r\n        proxyCall();\r\n    }\r\n\r\n    function proxyCall() internal {\r\n        bytes32 position = implementationPosition;\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, returndatasize(), calldatasize())\r\n            let result := delegatecall(gas(), sload(position), ptr, calldatasize(), returndatasize(), returndatasize())\r\n            returndatacopy(ptr, 0, returndatasize())\r\n\r\n            switch result\r\n            case 0 {\r\n                revert(ptr, returndatasize())\r\n            }\r\n            default {\r\n                return (ptr, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProxyOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"claimProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingProxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferProxyOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OwnedUpgradeAbilityProxy", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bd8e83ae9cd89125e9263c7e436ac10386488a5469a9eca9288a28636f511a4b"}