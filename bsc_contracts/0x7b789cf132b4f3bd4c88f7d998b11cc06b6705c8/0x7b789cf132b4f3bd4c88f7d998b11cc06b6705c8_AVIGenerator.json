{"SourceCode": "{\"Generator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract AVIGenerator is Ownable, IERC20 {\\n\\n    // name and symbol for tokenized contract\\n    string private constant _name = \\\"AVI Staking\\\";\\n    string private constant _symbol = \\\"SAVI\\\";\\n    uint8 private constant _decimals = 18;\\n\\n    // lock time in blocks\\n    uint256 public lockTime = 864_000;\\n\\n    // fee for leaving staking early\\n    uint256 public leaveEarlyFee = 500;\\n\\n    // recipient of fee\\n    address public feeRecipient;\\n\\n    // Staking Token\\n    address public immutable token;\\n\\n    // Reward Token\\n    address public immutable reward;\\n\\n    // User Info\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 unlockBlock;\\n        uint256 totalExcluded;\\n    }\\n    // Address =\\u003e UserInfo\\n    mapping ( address =\\u003e UserInfo ) public userInfo;\\n\\n    // Tracks Dividends\\n    uint256 public totalRewards;\\n    uint256 private totalShares;\\n    uint256 private dividendsPerShare;\\n    uint256 private constant precision = 10**18;\\n\\n    // Events\\n    event SetLockTime(uint LockTime);\\n    event SetEarlyFee(uint earlyFee);\\n    event SetFeeRecipient(address FeeRecipient);\\n\\n    constructor(address token_, address reward_, address feeRecipient_){\\n        require(\\n            token_ != address(0) \\u0026\\u0026\\n            feeRecipient_ != address(0) \\u0026\\u0026\\n            reward_ != address(0),\\n            \\u0027Zero Address\\u0027\\n        );\\n\\n        // set initial state\\n        token = token_;\\n        feeRecipient = feeRecipient_;\\n        reward = reward_;\\n    \\n        emit Transfer(address(0), msg.sender, 0);\\n    }\\n\\n    /** Returns the total number of tokens in existence */\\n    function totalSupply() external view override returns (uint256) { \\n        return totalShares; \\n    }\\n\\n    /** Returns the number of tokens owned by `account` */\\n    function balanceOf(address account) public view override returns (uint256) { \\n        return userInfo[account].amount;\\n    }\\n\\n    /** Returns the number of tokens `spender` can transfer from `holder` */\\n    function allowance(address, address) external pure override returns (uint256) { \\n        return 0; \\n    }\\n    \\n    /** Token Name */\\n    function name() public pure override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /** Token Ticker Symbol */\\n    function symbol() public pure override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /** Tokens decimals */\\n    function decimals() public pure override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /** Approves `spender` to transfer `amount` tokens from caller */\\n    function approve(address spender, uint256) public override returns (bool) {\\n        emit Approval(msg.sender, spender, 0);\\n        return true;\\n    }\\n  \\n    /** Transfer Function */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if (recipient == msg.sender) {\\n            withdraw(amount);\\n        } else {\\n            _claimReward(msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    /** Transfer Function */\\n    function transferFrom(address, address, uint256) external override returns (bool) {\\n        _claimReward(msg.sender);\\n        return true;\\n    }\\n\\n    function setLockTime(uint256 newLockTime) external onlyOwner {\\n        require(\\n            newLockTime \\u003c= 10**10,\\n            \\u0027Lock Time Too Long\\u0027\\n        );\\n        lockTime = newLockTime;\\n        emit SetLockTime(newLockTime);\\n    }\\n\\n    function setLeaveEarlyFee(uint256 newEarlyFee) external onlyOwner {\\n        require(\\n            newEarlyFee \\u003c 1000,\\n            \\u0027Fee Too High\\u0027\\n        );\\n        leaveEarlyFee = newEarlyFee;\\n        emit SetEarlyFee(newEarlyFee);\\n    }\\n\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(\\n            newFeeRecipient != address(0),\\n            \\u0027Zero Address\\u0027\\n        );\\n        feeRecipient = newFeeRecipient;\\n        emit SetFeeRecipient(newFeeRecipient);\\n    }\\n\\n    function withdrawForeignToken(address token_) external onlyOwner {\\n        require(\\n            token != token_,\\n            \\u0027Cannot Withdraw Staked Token\\u0027\\n        );\\n        require(\\n            IERC20(token_).transfer(\\n                msg.sender,\\n                IERC20(token_).balanceOf(address(this))\\n            ),\\n            \\u0027Failure On Token Withdraw\\u0027\\n        );\\n    }\\n\\n    function withdrawETH() external onlyOwner {\\n        (bool s,) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(s);\\n    }\\n\\n    function ownerDeposit(address[] calldata users, uint256[] calldata amounts) external onlyOwner {\\n\\n        uint len = users.length;\\n        require(len == amounts.length, \\u0027Invalid Length\\u0027);\\n\\n        for (uint i = 0; i \\u003c len;) {\\n            \\n            // claim reward if applicable\\n            if (userInfo[users[i]].amount \\u003e 0) {\\n                _claimReward(users[i]);\\n            }\\n\\n            // transfer in tokens\\n            uint received = _transferIn(token, amounts[i]);\\n\\n            // update user info\\n            _deposit(users[i], received);\\n\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function claimRewards() external {\\n        _claimReward(msg.sender);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(\\n            amount \\u003c= userInfo[msg.sender].amount,\\n            \\u0027Insufficient Amount\\u0027\\n        );\\n        require(\\n            amount \\u003e 0,\\n            \\u0027Zero Amount\\u0027\\n        );\\n        if (userInfo[msg.sender].amount \\u003e 0) {\\n            _claimReward(msg.sender);\\n        }\\n\\n        totalShares -= amount;\\n        userInfo[msg.sender].amount -= amount;\\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\\n\\n        uint fee = timeUntilUnlock(msg.sender) == 0 ? 0 : ( amount * leaveEarlyFee ) / 1000;\\n        if (fee \\u003e 0) {\\n            require(\\n                IERC20(token).transfer(feeRecipient, fee),\\n                \\u0027Failure On Token Transfer\\u0027\\n            );\\n        }\\n\\n        uint sendAmount = amount - fee;\\n        require(\\n            IERC20(token).transfer(msg.sender, sendAmount),\\n            \\u0027Failure On Token Transfer To Sender\\u0027\\n        );\\n\\n        emit Transfer(msg.sender, address(0), amount);\\n    }\\n\\n    function deposit(uint256 amount) external {\\n        if (userInfo[msg.sender].amount \\u003e 0) {\\n            _claimReward(msg.sender);\\n        }\\n\\n        // transfer in tokens\\n        uint received = _transferIn(token, amount);\\n        \\n        // update user info\\n        _deposit(msg.sender, received);\\n    }\\n\\n    function _deposit(address user, uint256 amount) internal {\\n\\n        // update data\\n        unchecked {\\n            totalShares += amount;\\n            userInfo[user].amount += amount;\\n            userInfo[user].unlockBlock = block.number + lockTime;\\n        }\\n        userInfo[user].totalExcluded = getCumulativeDividends(userInfo[user].amount);\\n\\n        emit Transfer(address(0), user, amount);\\n    }\\n\\n    function depositRewards(uint256 amount) external {\\n        uint received = _transferIn(reward, amount);\\n\\n        if (totalShares \\u003e 0) {\\n            unchecked {\\n                dividendsPerShare += ( received * precision ) / totalShares;\\n                totalRewards += received;\\n            }\\n        }\\n    }\\n\\n    function _claimReward(address user) internal {\\n\\n        // exit if zero value locked\\n        if (userInfo[user].amount == 0) {\\n            return;\\n        }\\n\\n        // fetch pending rewards\\n        uint256 amount = pendingRewards(user);\\n        uint256 balance = IERC20(reward).balanceOf(address(this));\\n\\n        // prevent overflow\\n        if (amount \\u003e balance) {\\n            amount = balance;\\n        }\\n        \\n        // exit if zero rewards\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // update total excluded\\n        userInfo[msg.sender].totalExcluded = getCumulativeDividends(userInfo[msg.sender].amount);\\n\\n        // transfer reward to user\\n        require(\\n            IERC20(reward).transfer(user, amount),\\n            \\u0027Failure On Token Claim\\u0027\\n        );\\n    }\\n\\n    function _transferIn(address _token, uint256 amount) internal returns (uint256) {\\n        require(\\n            IERC20(_token).allowance(msg.sender, address(this)) \\u003e= amount,\\n            \\u0027Insufficient Allowance\\u0027\\n        );\\n        require(\\n            IERC20(_token).balanceOf(msg.sender) \\u003e= amount,\\n            \\u0027Insufficient Balance\\u0027\\n        );\\n        uint before = IERC20(_token).balanceOf(address(this));\\n        bool s = IERC20(_token).transferFrom(msg.sender, address(this), amount);\\n        uint After = IERC20(_token).balanceOf(address(this));\\n        require(\\n            s \\u0026\\u0026 After \\u003e before,\\n            \\u0027Error On Transfer From\\u0027\\n        );\\n        return After - before;\\n    }\\n\\n    function timeUntilUnlock(address user) public view returns (uint256) {\\n        return userInfo[user].unlockBlock \\u003c block.number ? 0 : userInfo[user].unlockBlock - block.number;\\n    }\\n\\n    function pendingRewards(address shareholder) public view returns (uint256) {\\n        if(userInfo[shareholder].amount == 0){ return 0; }\\n\\n        uint256 shareholderTotalDividends = getCumulativeDividends(userInfo[shareholder].amount);\\n        uint256 shareholderTotalExcluded = userInfo[shareholder].totalExcluded;\\n\\n        if(shareholderTotalDividends \\u003c= shareholderTotalExcluded){ return 0; }\\n\\n        return shareholderTotalDividends - shareholderTotalExcluded;\\n    }\\n\\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\\n        return ( share * dividendsPerShare ) / precision;\\n    }\\n\\n    receive() external payable {}\\n\\n}\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    \\n    function symbol() external view returns(string memory);\\n    \\n    function name() external view returns(string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n    \\n    /**\\n     * @dev Returns the number of decimal places\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.14;\\n\\n/**\\n * @title Owner\\n * @dev Set \\u0026 change owner\\n */\\ncontract Ownable {\\n\\n    address private owner;\\n    \\n    // event for EVM logging\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\n    \\n    // modifier to check if caller is owner\\n    modifier onlyOwner() {\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\n        // changes to the state and to Ether balances are reverted.\\n        // This used to consume all gas in old EVM versions, but not anymore.\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\n        // As a second argument, you can also provide an explanation about what went wrong.\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n    \\n    /**\\n     * @dev Set contract deployer as owner\\n     */\\n    constructor() {\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\n        emit OwnerSet(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Change owner\\n     * @param newOwner address of new owner\\n     */\\n    function changeOwner(address newOwner) public onlyOwner {\\n        emit OwnerSet(owner, newOwner);\\n        owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Return owner address \\n     * @return address of owner\\n     */\\n    function getOwner() external view returns (address) {\\n        return owner;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyFee\",\"type\":\"uint256\"}],\"name\":\"SetEarlyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"FeeRecipient\",\"type\":\"address\"}],\"name\":\"SetFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LockTime\",\"type\":\"uint256\"}],\"name\":\"SetLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveEarlyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"ownerDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEarlyFee\",\"type\":\"uint256\"}],\"name\":\"setLeaveEarlyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"timeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"withdrawForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AVIGenerator", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004a008ab4394f0dc1af064a1d7cc62f8b2380865f0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d0000000000000000000000005058c0e23613bc3fafe019962fcee5bfa0352bec", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0e4d7f08bf62f43e9fd87a79a4eee8ebbbcbefac81ce5a4fb0989113c62dd37"}