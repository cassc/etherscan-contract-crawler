{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DPPOracleAdmin.sol\": {\r\n      \"content\": \"// File: contracts/DODOPrivatePool/intf/IDPPOracle.sol\\n\\n/*\\n\\n    Copyright 2021 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.6.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDPPOracle {\\n    function init(\\n        address owner,\\n        address maintainer,\\n        address baseTokenAddress,\\n        address quoteTokenAddress,\\n        uint256 lpFeeRate,\\n        address mtFeeRateModel,\\n        uint256 k,\\n        uint256 i,\\n        address o,\\n        bool isOpenTWAP,\\n        bool isOracleEnabled\\n    ) external;\\n\\n    function _MT_FEE_RATE_MODEL_() external returns (address);\\n\\n    //=========== admin ==========\\n    function ratioSync() external;\\n\\n    function retrieve(\\n        address payable to,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function reset(\\n        address assetTo,\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 baseOutAmount,\\n        uint256 quoteOutAmount,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n\\n    function tuneParameters(\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function tunePrice(\\n        uint256 newI,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function changeOracle(address newOracle) external;\\n\\n    function enableOracle() external;\\n\\n    function disableOracle(uint256 newI) external;\\n}\\n\\n\\n\\ninterface IDODOApprove {\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\n    function getDODOProxy() external view returns (address);\\n}\\n\\n/**\\n * @title Ownable\\n * @author DODO Breeder\\n *\\n * @notice Ownership related functions\\n */\\ncontract InitializableOwnable {\\n    address public _OWNER_;\\n    address public _NEW_OWNER_;\\n    bool internal _INITIALIZED_;\\n\\n    // ============ Events ============\\n\\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // ============ Modifiers ============\\n\\n    modifier notInitialized() {\\n        require(!_INITIALIZED_, \\\"DODO_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == _OWNER_, \\\"NOT_OWNER\\\");\\n        _;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function initOwner(address newOwner) public notInitialized {\\n        _INITIALIZED_ = true;\\n        _OWNER_ = newOwner;\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\\n        _NEW_OWNER_ = newOwner;\\n    }\\n\\n    function claimOwnership() public {\\n        require(msg.sender == _NEW_OWNER_, \\\"INVALID_CLAIM\\\");\\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\\n        _OWNER_ = _NEW_OWNER_;\\n        _NEW_OWNER_ = address(0);\\n    }\\n}\\n\\n\\n\\n\\ninterface IDODOApproveProxy {\\n    function isAllowedProxy(address _proxy) external view returns (bool);\\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\\n}\\n\\n/**\\n * @title DODOApproveProxy\\n * @author DODO Breeder\\n *\\n * @notice Allow different version dodoproxy to claim from DODOApprove\\n */\\ncontract DODOApproveProxy is InitializableOwnable {\\n    \\n    // ============ Storage ============\\n    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\\n    mapping (address => bool) public _IS_ALLOWED_PROXY_;\\n    uint256 public _TIMELOCK_;\\n    address public _PENDING_ADD_DODO_PROXY_;\\n    address public immutable _DODO_APPROVE_;\\n\\n    // ============ Modifiers ============\\n    modifier notLocked() {\\n        require(\\n            _TIMELOCK_ <= block.timestamp,\\n            \\\"SetProxy is timelocked\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address dodoApporve) public {\\n        _DODO_APPROVE_ = dodoApporve;\\n    }\\n\\n    function init(address owner, address[] memory proxies) external {\\n        initOwner(owner);\\n        for(uint i = 0; i < proxies.length; i++) \\n            _IS_ALLOWED_PROXY_[proxies[i]] = true;\\n    }\\n\\n    function unlockAddProxy(address newDodoProxy) public onlyOwner {\\n        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\\n        _PENDING_ADD_DODO_PROXY_ = newDodoProxy;\\n    }\\n\\n    function lockAddProxy() public onlyOwner {\\n       _PENDING_ADD_DODO_PROXY_ = address(0);\\n       _TIMELOCK_ = 0;\\n    }\\n\\n\\n    function addDODOProxy() external onlyOwner notLocked() {\\n        _IS_ALLOWED_PROXY_[_PENDING_ADD_DODO_PROXY_] = true;\\n        lockAddProxy();\\n    }\\n\\n    function removeDODOProxy (address oldDodoProxy) public onlyOwner {\\n        _IS_ALLOWED_PROXY_[oldDodoProxy] = false;\\n    }\\n    \\n    function claimTokens(\\n        address token,\\n        address who,\\n        address dest,\\n        uint256 amount\\n    ) external {\\n        require(_IS_ALLOWED_PROXY_[msg.sender], \\\"DODOApproveProxy:Access restricted\\\");\\n        IDODOApprove(_DODO_APPROVE_).claimTokens(\\n            token,\\n            who,\\n            dest,\\n            amount\\n        );\\n    }\\n\\n    function isAllowedProxy(address _proxy) external view returns (bool) {\\n        return _IS_ALLOWED_PROXY_[_proxy];\\n    }\\n}\\n\\n\\n\\n/**\\n * @title DPPOracleAdmin\\n * @author DODO Breeder\\n *\\n * @notice Admin of Oracle DODOPrivatePool\\n */\\ncontract DPPOracleAdmin is InitializableOwnable {\\n    address public _DPP_;\\n    address public _OPERATOR_;\\n    address public _DODO_APPROVE_PROXY_;\\n    uint256 public _FREEZE_TIMESTAMP_;\\n\\n\\n    modifier notFreezed() {\\n        require(block.timestamp >= _FREEZE_TIMESTAMP_, \\\"ADMIN_FREEZED\\\");\\n        _;\\n    }\\n\\n    function init(\\n        address owner,\\n        address dpp,\\n        address operator,\\n        address dodoApproveProxy\\n    ) external {\\n        initOwner(owner);\\n        _DPP_ = dpp;\\n        _OPERATOR_ = operator;\\n        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\\n    }\\n\\n    function sync() external notFreezed onlyOwner {\\n        IDPPOracle(_DPP_).ratioSync();\\n    }\\n\\n    function setFreezeTimestamp(uint256 timestamp) external notFreezed onlyOwner {\\n        _FREEZE_TIMESTAMP_ = timestamp;\\n    }\\n\\n    function setOperator(address newOperator) external notFreezed onlyOwner {\\n        _OPERATOR_ = newOperator;\\n    }\\n\\n    function retrieve(\\n        address payable to,\\n        address token,\\n        uint256 amount\\n    ) external notFreezed onlyOwner {\\n        IDPPOracle(_DPP_).retrieve(to, token, amount);\\n    }\\n\\n    function changeOracle(address newOracle) external onlyOwner notFreezed {\\n        IDPPOracle(_DPP_).changeOracle(newOracle);\\n    }\\n\\n    function enableOracle() external onlyOwner notFreezed {\\n        IDPPOracle(_DPP_).enableOracle(); \\n    }\\n\\n    function disableOracle(uint256 newI) external onlyOwner notFreezed {\\n        IDPPOracle(_DPP_).disableOracle(newI); \\n    }\\n\\n    function tuneParameters(\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external onlyOwner notFreezed returns (bool) {\\n        return\\n            IDPPOracle(_DPP_).tuneParameters(\\n                newLpFeeRate,\\n                newI,\\n                newK,\\n                minBaseReserve,\\n                minQuoteReserve\\n            );\\n    }\\n\\n    function tunePrice(\\n        uint256 newI,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external onlyOwner notFreezed returns (bool) {\\n        return\\n            IDPPOracle(_DPP_).tunePrice(\\n                newI,\\n                minBaseReserve,\\n                minQuoteReserve\\n            );\\n    }\\n\\n\\n    function reset(\\n        address operator,\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 baseOutAmount,\\n        uint256 quoteOutAmount,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external notFreezed returns (bool) {\\n        require(\\n            msg.sender == _OWNER_ ||\\n                (IDODOApproveProxy(_DODO_APPROVE_PROXY_).isAllowedProxy(msg.sender) &&\\n                    operator == _OPERATOR_),\\n            \\\"RESET FORBIDDEN\uff01\\\"\\n        ); // only allow owner directly call or operator call via DODODppProxy\\n        return\\n            IDPPOracle(_DPP_).reset(\\n                msg.sender, //only support asset transfer to msg.sender (_OWNER_ or allowed proxy)\\n                newLpFeeRate,\\n                newI,\\n                newK,\\n                baseOutAmount,\\n                quoteOutAmount,\\n                minBaseReserve,\\n                minQuoteReserve\\n            );\\n    }\\n\\n    // ============ Admin Version Control ============\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"DPPOracle Admin 1.1.1\\\";\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FREEZE_TIMESTAMP_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OPERATOR_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"}],\"name\":\"disableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dpp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApproveProxy\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newLpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setFreezeTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve\",\"type\":\"uint256\"}],\"name\":\"tuneParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve\",\"type\":\"uint256\"}],\"name\":\"tunePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "DPPOracleAdmin", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}