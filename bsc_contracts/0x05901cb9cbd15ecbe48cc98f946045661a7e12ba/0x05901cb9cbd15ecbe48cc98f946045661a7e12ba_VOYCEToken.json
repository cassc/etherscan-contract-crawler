{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\n// File: contracts\\SafeMath.sol\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts\\Auth.sol\r\n\r\n/**\r\n * Allows for contract ownership along with multi-address authorization\r\n */\r\nabstract contract Auth {\r\n  address internal owner;\r\n  mapping(address => bool) internal authorizations;\r\n\r\n  constructor(address _owner) {\r\n    owner = _owner;\r\n    authorizations[_owner] = true;\r\n  }\r\n\r\n  /**\r\n   * Function modifier to require caller to be contract owner\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(msg.sender), \"!OWNER\");\r\n    _;\r\n  }\r\n  /**\r\n   * Function modifier to require caller to be authorized\r\n   */\r\n  modifier authorized() {\r\n    require(isAuthorized(msg.sender), \"!AUTHORIZED\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * Authorize address. Owner only\r\n   */\r\n  function authorize(address adr) external onlyOwner {\r\n    authorizations[adr] = true;\r\n  }\r\n\r\n  /**\r\n   * Remove address' authorization. Owner only\r\n   */\r\n  function unauthorize(address adr) external onlyOwner {\r\n    authorizations[adr] = false;\r\n  }\r\n\r\n  /**\r\n   * Check if address is owner\r\n   */\r\n  function isOwner(address account) public view returns (bool) {\r\n    return account == owner;\r\n  }\r\n\r\n  /**\r\n   * Return address' authorization status\r\n   */\r\n  function isAuthorized(address adr) public view returns (bool) {\r\n    return authorizations[adr];\r\n  }\r\n\r\n  /**\r\n   * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\r\n   */\r\n  function transferOwnership(address payable adr) external onlyOwner {\r\n    require(adr != address(0), \"adr: zero address\");\r\n    owner = adr;\r\n    authorizations[adr] = true;\r\n    emit OwnershipTransferred(adr);\r\n  }\r\n\r\n  event OwnershipTransferred(address owner);\r\n}\r\n\r\n// File: contracts\\IDEXFactory.sol\r\n\r\ninterface IDEXFactory {\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n// File: contracts\\IDEXRouter.sol\r\n\r\ninterface IDEXRouter {\r\n  function factory() external pure returns (address);\r\n\r\n  function WETH() external pure returns (address);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint256 amountADesired,\r\n    uint256 amountBDesired,\r\n    uint256 amountAMin,\r\n    uint256 amountBMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    returns (\r\n      uint256 amountA,\r\n      uint256 amountB,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function addLiquidityETH(\r\n    address token,\r\n    uint256 amountTokenDesired,\r\n    uint256 amountTokenMin,\r\n    uint256 amountETHMin,\r\n    address to,\r\n    uint256 deadline\r\n  )\r\n    external\r\n    payable\r\n    returns (\r\n      uint256 amountToken,\r\n      uint256 amountETH,\r\n      uint256 liquidity\r\n    );\r\n\r\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external payable;\r\n\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external;\r\n}\r\n\r\n// File: contracts\\IBEP20.sol\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function decimals() external view returns (uint8);\r\n\r\n  function symbol() external view returns (string memory);\r\n\r\n  function name() external view returns (string memory);\r\n\r\n  function getOwner() external view returns (address);\r\n\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\VOYCEToken.sol\r\n\r\ncontract VOYCEToken is IBEP20, Auth {\r\n  using SafeMath for uint256;\r\n  address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n  address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n  address private constant ZERO = 0x0000000000000000000000000000000000000000;\r\n  string public constant NAME = \"VOYCE Token\";\r\n  string public constant SYMBOL = \"VOYCE\";\r\n  uint8 public constant DECIMALS = 18;\r\n  uint256 public constant TOTAL_SUPPLY = 10**30; // 1T\r\n  uint256 public maxTxAmount = (TOTAL_SUPPLY * 100) / 100;\r\n  //max wallet holding of 2%\r\n  uint256 public maxWalletToken = (TOTAL_SUPPLY * 100) / 100;\r\n  mapping(address => uint256) private _balances;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  mapping(address => bool) private isFeeExempt;\r\n  mapping(address => bool) private isTxLimitExempt;\r\n  mapping(address => bool) private isTimelockExempt;\r\n  mapping(address => bool) private isDividendExempt;\r\n  uint256 private liquidityFee = 3;\r\n  uint256 private charityFee = 4;\r\n  uint256 private projectFee = 2;\r\n  uint256 private totalFee = 9;\r\n  uint256 private feeDenominator = 100;\r\n  uint256 private buyLiquidityFee = 3;\r\n  uint256 private buyCharityFee = 4;\r\n  uint256 private buyProjectFee = 2;\r\n  uint256 private sellLiquidityFee = 3;\r\n  uint256 private sellCharityFee = 4;\r\n  uint256 private sellProjectFee = 2;\r\n  uint256 private banLiquidityFee = 45;\r\n  uint256 private banCharityFee = 50;\r\n  uint256 private banProjectFee = 4;\r\n  uint256 private banblock = 0;\r\n  address private autoLiquidityReceiver;\r\n  address private charityReceiver;\r\n  address private projectReceiver;\r\n  uint256 private targetLiquidity = 20;\r\n  uint256 private targetLiquidityDenominator = 100;\r\n  IDEXRouter public router;\r\n  address public pair;\r\n  bool public tradingOpen = false;\r\n  // Cooldown & timer functionality\r\n  bool public buyCooldownEnabled = false;\r\n  uint8 public cooldownTimerInterval = 0;\r\n  mapping(address => uint256) private cooldownTimer;\r\n  bool public swapEnabled = true;\r\n  uint256 public swapThreshold = (TOTAL_SUPPLY * 10) / 10000; // 0.01% of supply\r\n  uint256 public constant MAX_UINT256 =\r\n    115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n  bool private inSwap;\r\n  modifier swapping() {\r\n    inSwap = true;\r\n    _;\r\n    inSwap = false;\r\n  }\r\n\r\n  constructor() Auth(msg.sender) {\r\n    isFeeExempt[msg.sender] = true;\r\n    isTxLimitExempt[msg.sender] = true;\r\n    // No timelock for these people\r\n    isTimelockExempt[msg.sender] = true;\r\n    isTimelockExempt[DEAD] = true;\r\n    isTimelockExempt[address(this)] = true;\r\n    isDividendExempt[pair] = true;\r\n    isDividendExempt[address(this)] = true;\r\n    isDividendExempt[DEAD] = true;\r\n    router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    _allowances[address(this)][address(router)] = MAX_UINT256;\r\n    autoLiquidityReceiver = msg.sender;\r\n    charityReceiver = 0x7bc33900313AB20053b780e259319443c3D9a897;\r\n    projectReceiver = 0x25295d49b7945861802aC54fF24dB64cD7093696;\r\n    _balances[msg.sender] = TOTAL_SUPPLY;\r\n    emit Transfer(address(0), msg.sender, TOTAL_SUPPLY);\r\n    pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function totalSupply() external pure override returns (uint256) {\r\n    return TOTAL_SUPPLY;\r\n  }\r\n\r\n  function decimals() external pure override returns (uint8) {\r\n    return DECIMALS;\r\n  }\r\n\r\n  function symbol() external pure override returns (string memory) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  function name() external pure override returns (string memory) {\r\n    return NAME;\r\n  }\r\n\r\n  function getOwner() external view override returns (address) {\r\n    return owner;\r\n  }\r\n\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  function allowance(address holder, address spender) external view override returns (uint256) {\r\n    return _allowances[holder][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public override returns (bool) {\r\n    _allowances[msg.sender][spender] = amount;\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function approveMax(address spender) external returns (bool) {\r\n    return approve(spender, MAX_UINT256);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    return _transferFrom(msg.sender, recipient, amount);\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    if (_allowances[sender][msg.sender] != MAX_UINT256) {\r\n      _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(\r\n        amount,\r\n        \"Insufficient Allowance\"\r\n      );\r\n    }\r\n    return _transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  //settting the maximum permitted wallet holding (percent of total supply)\r\n  function setMaxWalletPercent(uint256 maxWallPercent_) external onlyOwner {\r\n    maxWalletToken = (TOTAL_SUPPLY * maxWallPercent_) / 100;\r\n  }\r\n\r\n  function _transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    if (inSwap) {\r\n      return _basicTransfer(sender, recipient, amount);\r\n    } else {\r\n      if (!authorizations[sender] && !authorizations[recipient]) {\r\n        require(tradingOpen, \"Trading is not open yet\");\r\n      }\r\n      // max wallet & Tx code\r\n      if (\r\n        !authorizations[sender] &&\r\n        recipient != address(this) &&\r\n        recipient != address(DEAD) &&\r\n        recipient != pair &&\r\n        recipient != charityReceiver &&\r\n        recipient != autoLiquidityReceiver &&\r\n        recipient != projectReceiver\r\n      ) {\r\n        uint256 heldTokens = balanceOf(recipient);\r\n        require(\r\n          (heldTokens + amount) <= maxWalletToken,\r\n          \"Total Holding is currently limited, you can not buy that much.\"\r\n        );\r\n      }\r\n      require(amount <= maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n      // cooldown timer, so a bot doesnt do quick trades! 1min gap between 2 trades.\r\n      if (sender == pair && buyCooldownEnabled && !isTimelockExempt[recipient]) {\r\n        require(\r\n          cooldownTimer[recipient] < block.timestamp,\r\n          \"Please wait for cooldown between buys\"\r\n        );\r\n        cooldownTimer[recipient] = block.timestamp + cooldownTimerInterval;\r\n      }\r\n      // Liquidity, Maintained at 25%\r\n      if (shouldSwapBack()) {\r\n        swapBack();\r\n      }\r\n      //Exchange tokens\r\n      _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n      uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, amount) : amount;\r\n      _balances[recipient] = _balances[recipient].add(amountReceived);\r\n      emit Transfer(sender, recipient, amountReceived);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  function _basicTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) internal returns (bool) {\r\n    _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function shouldTakeFee(address sender) internal view returns (bool) {\r\n    return !isFeeExempt[sender];\r\n  }\r\n\r\n  function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n    if (block.number < banblock) {\r\n      liquidityFee = banLiquidityFee;\r\n      charityFee = banCharityFee;\r\n      projectFee = banProjectFee;\r\n    } else {\r\n      if (sender == pair) {\r\n        liquidityFee = buyLiquidityFee;\r\n        charityFee = buyCharityFee;\r\n        projectFee = buyProjectFee;\r\n      } else {\r\n        liquidityFee = sellLiquidityFee;\r\n        charityFee = sellCharityFee;\r\n        projectFee = sellProjectFee;\r\n      }\r\n    }\r\n    totalFee = liquidityFee.add(charityFee).add(projectFee);\r\n    uint256 feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n    _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n    emit Transfer(sender, address(this), feeAmount);\r\n    return amount.sub(feeAmount);\r\n  }\r\n\r\n  function shouldSwapBack() internal view returns (bool) {\r\n    return\r\n      msg.sender != pair && !inSwap && swapEnabled && _balances[address(this)] >= swapThreshold;\r\n  }\r\n\r\n  function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n    uint256 amountBNB = address(this).balance;\r\n    payable(projectReceiver).transfer((amountBNB * amountPercentage) / 100);\r\n  }\r\n\r\n  function enableTrading(bool status_, uint256 banBlocks) external onlyOwner {\r\n    require(!tradingOpen, \"protect\");\r\n    tradingOpen = status_;\r\n    // sniper/bot protection - remember to set pretty high fees during this blocks.\r\n    banblock = block.number + banBlocks;\r\n    emit TradingEnabled();\r\n  }\r\n\r\n  // enable cooldown between trades\r\n  function cooldownEnabled(bool status_, uint8 interval_) external onlyOwner {\r\n    buyCooldownEnabled = status_;\r\n    cooldownTimerInterval = interval_;\r\n  }\r\n\r\n  function swapBack() internal swapping {\r\n    uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator)\r\n      ? 0\r\n      : liquidityFee;\r\n    uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n    uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = WBNB;\r\n    uint256 balanceBefore = address(this).balance;\r\n    // swap token for ETH\r\n    router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      amountToSwap,\r\n      0,\r\n      path,\r\n      address(this),\r\n      block.timestamp\r\n    );\r\n    uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n    uint256 totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n    uint256 amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n    uint256 amountBNBCharity = amountBNB.mul(charityFee).div(totalBNBFee);\r\n    uint256 amountBNBProject = amountBNB.mul(projectFee).div(totalBNBFee);\r\n    (bool txCharitySuccess, ) = payable(charityReceiver).call{\r\n      value: amountBNBCharity,\r\n      gas: 30000\r\n    }(\"\");\r\n    require(!txCharitySuccess || txCharitySuccess, \"none\"); // suppress warnings\r\n    (bool txProjectSuccess, ) = payable(projectReceiver).call{\r\n      value: amountBNBProject,\r\n      gas: 30000\r\n    }(\"\");\r\n    require(!txProjectSuccess || txProjectSuccess, \"none\"); // suppress warnings\r\n    if (amountToLiquify > 0) {\r\n      router.addLiquidityETH{ value: amountBNBLiquidity }(\r\n        address(this),\r\n        amountToLiquify,\r\n        0,\r\n        0,\r\n        autoLiquidityReceiver,\r\n        block.timestamp\r\n      );\r\n      emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n    }\r\n  }\r\n\r\n  function setTxLimit(uint256 amount) external authorized {\r\n    maxTxAmount = amount;\r\n  }\r\n\r\n  function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n    isFeeExempt[holder] = exempt;\r\n  }\r\n\r\n  function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n    isTxLimitExempt[holder] = exempt;\r\n  }\r\n\r\n  function setIsTimelockExempt(address holder, bool exempt) external authorized {\r\n    isTimelockExempt[holder] = exempt;\r\n  }\r\n\r\n  function setSellFees(\r\n    uint256 liquidityFee_,\r\n    uint256 charityFee_,\r\n    uint256 projectFee_,\r\n    uint256 feeDenominator_\r\n  ) external authorized {\r\n    liquidityFee = liquidityFee_;\r\n    charityFee = charityFee_;\r\n    projectFee = projectFee_;\r\n    totalFee = liquidityFee.add(charityFee).add(projectFee);\r\n    sellLiquidityFee = liquidityFee_;\r\n    sellCharityFee = charityFee_;\r\n    sellProjectFee = projectFee_;\r\n    feeDenominator = feeDenominator_;\r\n    require(totalFee < feeDenominator / 4);\r\n    emit SellFeesModified();\r\n  }\r\n\r\n  function setBuyFees(\r\n    uint256 liquidityFee_,\r\n    uint256 charityFee_,\r\n    uint256 projectFee_\r\n  ) external authorized {\r\n    buyLiquidityFee = liquidityFee_;\r\n    buyCharityFee = charityFee_;\r\n    buyProjectFee = projectFee_;\r\n    emit BuyFeesModified();\r\n  }\r\n\r\n  function setBanFees(\r\n    uint256 liquidityFee_,\r\n    uint256 charityFee_,\r\n    uint256 projectFee_\r\n  ) external authorized {\r\n    banLiquidityFee = liquidityFee_;\r\n    banCharityFee = charityFee_;\r\n    banProjectFee = projectFee_;\r\n    emit BanFeesModified();\r\n  }\r\n\r\n  function setFeeReceivers(\r\n    address autoLiquidityReceiver_,\r\n    address charityReceiver_,\r\n    address projectReceiver_\r\n  ) external authorized {\r\n    require(autoLiquidityReceiver_ != address(0), \"autoLiquidityReceiver: zero address\");\r\n    require(charityReceiver_ != address(0), \"charityReceiver: zero address\");\r\n    require(projectReceiver_ != address(0), \"projectReceiver: zero address\");\r\n    autoLiquidityReceiver = autoLiquidityReceiver_;\r\n    charityReceiver = charityReceiver_;\r\n    projectReceiver = projectReceiver_;\r\n  }\r\n\r\n  function setSwapBackSettings(bool enabled_, uint256 amount_) external authorized {\r\n    swapEnabled = enabled_;\r\n    swapThreshold = amount_;\r\n    emit SwapBackSettingsModified();\r\n  }\r\n\r\n  function setTargetLiquidity(uint256 target_, uint256 denominator_) external authorized {\r\n    targetLiquidity = target_;\r\n    targetLiquidityDenominator = denominator_;\r\n    emit TargetLiquidityModified();\r\n  }\r\n\r\n  function getCirculatingSupply() public view returns (uint256) {\r\n    return TOTAL_SUPPLY.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n  }\r\n\r\n  function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n    return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n  }\r\n\r\n  function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n    return getLiquidityBacking(accuracy) > target;\r\n  }\r\n\r\n  event AutoLiquify(uint256 amountBNB, uint256 amountToLiquify);\r\n  event SellFeesModified();\r\n  event BuyFeesModified();\r\n  event BanFeesModified();\r\n  event SwapBackSettingsModified();\r\n  event TargetLiquidityModified();\r\n  event TradingEnabled();\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BanFeesModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BuyFeesModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SellFeesModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapBackSettingsModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TargetLiquidityModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyCooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"interval_\",\"type\":\"uint8\"}],\"name\":\"cooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownTimerInterval\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"banBlocks\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectFee_\",\"type\":\"uint256\"}],\"name\":\"setBanFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectFee_\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidityReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charityReceiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectReceiver_\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTimelockExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent_\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"charityFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeDenominator_\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator_\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "VOYCEToken", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63e51ee16dd031199f1e3f3f4b1b36308c2f9c5dc95de747ca13387f2f05ad4a"}