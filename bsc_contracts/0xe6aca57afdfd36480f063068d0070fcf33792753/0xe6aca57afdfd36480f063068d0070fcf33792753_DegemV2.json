{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract DegemV2 is IBEP20, Ownable\r\n{\r\n  \r\n    mapping (address => uint) private _balances;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping(address => bool) public excludedFromFees;\r\n    mapping(address=>bool) public isPair;\r\n    string private constant _name = 'degemV2';\r\n    string private constant _symbol = 'DGMV2';\r\n    uint8 private constant _decimals = 18;\r\n    uint public constant InitialSupply= 10**8 * 10**_decimals;\r\n\r\n    uint private constant DefaultLiquidityLockTime=7 days;\r\n    address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    uint public _circulatingSupply =InitialSupply;\r\n    uint public buyTax = 70;\r\n    uint public sellTax = 70;\r\n    uint public transferTax = 0;\r\n    uint public liquidityTax=250;\r\n    uint public splitterTax=750;\r\n    uint constant TAX_DENOMINATOR=1000;\r\n    uint constant MAXTAXDENOMINATOR=10;\r\n    \r\n    address private _pancakePairAddress; \r\n    IPancakeRouter private  _pancakeRouter;\r\n    \r\n    address public paymentSplitter;\r\n    address public protector;\r\n    modifier onlyProtector() {\r\n        require(msg.sender == protector);\r\n        _;\r\n    }\r\n\r\n    bool public blacklistMode = true;\r\n    mapping (address => bool) public isBlacklisted;\r\n    \r\n    \r\n    constructor () {\r\n        uint deployerBalance=_circulatingSupply;\r\n        _balances[msg.sender] = deployerBalance;\r\n        emit Transfer(address(0), msg.sender, deployerBalance);\r\n        _pancakeRouter = IPancakeRouter(PancakeRouter);\r\n        _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\r\n        isPair[_pancakePairAddress]=true;\r\n        \r\n        paymentSplitter=0x36c5681F7174078E970F89f1FEd512EE4Fa222df;\r\n        excludedFromFees[msg.sender]=true;\r\n        excludedFromFees[PancakeRouter]=true;\r\n        excludedFromFees[address(this)]=true;\r\n    }\r\n    \r\n    function enable_blacklist(bool _status) public onlyOwner {\r\n        blacklistMode = _status;\r\n    }\r\n    function manage_blacklist(address[] calldata addresses, bool status) public onlyOwner {\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isBlacklisted[addresses[i]] = status;\r\n        }\r\n    }\r\n    function protector_function(address[] calldata addresses, bool status) public onlyProtector {\r\n        for (uint256 i; i < addresses.length; ++i) {\r\n            isBlacklisted[addresses[i]] = status;\r\n        }\r\n    }\r\n    function setProtector(address _protector) external onlyOwner {\r\n        protector = _protector;\r\n    }\r\n    function ChangePaymentSplitter(address newWallet) public onlyOwner{\r\n        paymentSplitter=newWallet;\r\n    }\r\n    function _transfer(address sender, address recipient, uint amount) private{\r\n        require(sender != address(0), \"Transfer from zero\");\r\n        require(recipient != address(0), \"Transfer to zero\");\r\n        if(blacklistMode){\r\n            require(!isBlacklisted[sender] && !isBlacklisted[recipient],\"Blacklisted\");    \r\n        }\r\n        if(excludedFromFees[sender] || excludedFromFees[recipient])\r\n            _feelessTransfer(sender, recipient, amount);\r\n        else{ \r\n            require(LaunchTimestamp>0,\"trading not yet enabled\");\r\n            _taxedTransfer(sender,recipient,amount);                  \r\n        }\r\n    }\r\n    function _taxedTransfer(address sender, address recipient, uint amount) private{\r\n        uint senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        bool isBuy=isPair[sender];\r\n        bool isSell=isPair[recipient];\r\n        uint tax;\r\n        if(isSell){  \r\n            uint SellTaxDuration=20 seconds;          \r\n            if(block.timestamp<LaunchTimestamp+SellTaxDuration){\r\n                tax=_getStartTax(SellTaxDuration,200);\r\n                }else tax=sellTax;\r\n            }\r\n        else if(isBuy){\r\n            uint BuyTaxDuration=20 seconds;\r\n            if(block.timestamp<LaunchTimestamp+BuyTaxDuration){\r\n                tax=_getStartTax(BuyTaxDuration,999);\r\n            }else tax=buyTax;\r\n        } else tax=transferTax;\r\n\r\n        if((sender!=_pancakePairAddress)&&(!manualSwap)&&(!_isSwappingContractModifier))\r\n            _swapContractToken(false);\r\n        uint contractToken=_calculateFee(amount, tax, splitterTax+liquidityTax);\r\n        uint taxedAmount=amount-contractToken;\r\n\r\n        _balances[sender]-=amount;\r\n        _balances[address(this)] += contractToken;\r\n        _balances[recipient]+=taxedAmount;\r\n        \r\n        emit Transfer(sender,recipient,taxedAmount);\r\n    }\r\n    function _getStartTax(uint duration, uint maxTax) private view returns (uint){\r\n        uint timeSinceLaunch=block.timestamp-LaunchTimestamp;\r\n        return maxTax-((maxTax-50)*timeSinceLaunch/duration);\r\n    }\r\n    function _calculateFee(uint amount, uint tax, uint taxPercent) private pure returns (uint) {\r\n        return (amount*tax*taxPercent) / (TAX_DENOMINATOR*TAX_DENOMINATOR);\r\n    }\r\n    function _feelessTransfer(address sender, address recipient, uint amount) private{\r\n        uint senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"Transfer exceeds balance\");\r\n        _balances[sender]-=amount;\r\n        _balances[recipient]+=amount;      \r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n    \r\n    bool private _isSwappingContractModifier;\r\n    modifier lockTheSwap {\r\n        _isSwappingContractModifier = true;\r\n        _;\r\n        _isSwappingContractModifier = false;\r\n    }\r\n    uint public swapTreshold=2;\r\n    function setSwapTreshold(uint newSwapTresholdPermille) public onlyOwner{\r\n        require(newSwapTresholdPermille<=10);//MaxTreshold= 1%\r\n        swapTreshold=newSwapTresholdPermille;\r\n    }\r\n    uint public overLiquifyTreshold=150;\r\n    function SetOverLiquifiedTreshold(uint newOverLiquifyTresholdPermille) public onlyOwner{\r\n        require(newOverLiquifyTresholdPermille<=1000);\r\n        overLiquifyTreshold=newOverLiquifyTresholdPermille;\r\n    }\r\n    event OnSetTaxes(uint buy, uint sell, uint transfer_, uint splitter,uint liquidity);\r\n    function SetTaxes(uint buy, uint sell, uint transfer_, uint splitter,uint liquidity) public onlyOwner{\r\n        uint maxTax=TAX_DENOMINATOR/MAXTAXDENOMINATOR;\r\n        require(buy<=maxTax&&sell<=maxTax&&transfer_<=maxTax,\"Tax exceeds maxTax\");\r\n        require(splitter+liquidity==TAX_DENOMINATOR,\"Taxes don't add up to denominator\");\r\n        \r\n        buyTax=buy;\r\n        sellTax=sell;\r\n        transferTax=transfer_;\r\n        splitterTax=splitter;\r\n        liquidityTax=liquidity;\r\n        emit OnSetTaxes(buy, sell, transfer_, splitter,liquidity);\r\n    }\r\n    \r\n    function isOverLiquified() public view returns(bool){\r\n        return _balances[_pancakePairAddress]>_circulatingSupply*overLiquifyTreshold/1000;\r\n    }\r\n    function _swapContractToken(bool ignoreLimits) private lockTheSwap{\r\n        uint contractBalance=_balances[address(this)];\r\n        uint totalTax=liquidityTax+splitterTax;\r\n        uint tokenToSwap=_balances[_pancakePairAddress]*swapTreshold/1000;\r\n        if(totalTax==0)return;\r\n        if(ignoreLimits)\r\n            tokenToSwap=_balances[address(this)];\r\n        else if(contractBalance<tokenToSwap)\r\n            return;\r\n        uint tokenForLiquidity=isOverLiquified()?0:(tokenToSwap*liquidityTax)/totalTax;\r\n\r\n        uint tokenForSplitter= tokenToSwap-tokenForLiquidity;\r\n\r\n        uint LiqHalf=tokenForLiquidity/2;\r\n        uint swapToken=LiqHalf+tokenForSplitter;\r\n        uint initialBNBBalance = address(this).balance;\r\n        _swapTokenForBNB(swapToken);\r\n        uint newBNB=(address(this).balance - initialBNBBalance);\r\n        if(tokenForLiquidity>0){\r\n            uint liqBNB = (newBNB*LiqHalf)/swapToken;\r\n            _addLiquidity(LiqHalf, liqBNB);\r\n        }\r\n        (bool sent,)=paymentSplitter.call{value:address(this).balance}(\"\");\r\n        sent=true;\r\n    }\r\n    function _swapTokenForBNB(uint amount) private {\r\n        _approve(address(this), address(_pancakeRouter), amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n\r\n        try _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ){}\r\n        catch{}\r\n    }\r\n    function _addLiquidity(uint tokenamount, uint bnbamount) private {\r\n        _approve(address(this), address(_pancakeRouter), tokenamount);\r\n        _pancakeRouter.addLiquidityETH{value: bnbamount}(\r\n            address(this),\r\n            tokenamount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function getLiquidityReleaseTimeInSeconds() public view returns (uint){\r\n        if(block.timestamp<_liquidityUnlockTime)\r\n            return _liquidityUnlockTime-block.timestamp;\r\n        return 0;\r\n    }\r\n    function getBurnedTokens() public view returns(uint){\r\n        return (InitialSupply-_circulatingSupply)+_balances[address(0xdead)];\r\n    }\r\n    function SetPair(address Pair, bool Add) public onlyOwner{\r\n        require(Pair!=_pancakePairAddress,\"can't change pancake\");\r\n        isPair[Pair]=Add;\r\n    }\r\n    \r\n    bool public manualSwap;\r\n    function SwitchManualSwap(bool manual) public onlyOwner{\r\n        manualSwap=manual;\r\n    }\r\n    function SwapContractToken() public onlyOwner{\r\n    _swapContractToken(true);\r\n    }\r\n    event ExcludeAccount(address account, bool exclude);\r\n    function ExcludeAccountFromFees(address account, bool exclude) public onlyOwner{\r\n        require(account!=address(this),\"can't Include the contract\");\r\n        excludedFromFees[account]=exclude;\r\n        emit ExcludeAccount(account,exclude);\r\n    }\r\n    event OnEnableTrading();\r\n    uint public LaunchTimestamp;\r\n    function SetupEnableTrading() public onlyOwner{\r\n        require(LaunchTimestamp==0,\"AlreadyLaunched\");\r\n        LaunchTimestamp=block.timestamp;\r\n        emit OnEnableTrading();\r\n    }\r\n    uint _liquidityUnlockTime;\r\n    bool public LPReleaseLimitedTo20Percent;\r\n    function limitLiquidityReleaseTo20Percent() public onlyOwner{\r\n        LPReleaseLimitedTo20Percent=true;\r\n    }\r\n    function LockLiquidityForSeconds(uint secondsUntilUnlock) public onlyOwner{\r\n        _prolongLiquidityLock(secondsUntilUnlock+block.timestamp);\r\n    }\r\n    event OnProlongLPLock(uint UnlockTimestamp);\r\n    function _prolongLiquidityLock(uint newUnlockTime) private{\r\n        require(newUnlockTime>_liquidityUnlockTime);\r\n        _liquidityUnlockTime=newUnlockTime;\r\n        emit OnProlongLPLock(_liquidityUnlockTime);\r\n    }\r\n    event OnReleaseLP();\r\n    function LiquidityRelease() public onlyOwner {\r\n        require(block.timestamp >= _liquidityUnlockTime, \"Not yet unlocked\");\r\n\r\n        IBEP20 liquidityToken = IBEP20(_pancakePairAddress);\r\n        uint amount = liquidityToken.balanceOf(address(this));\r\n        if(LPReleaseLimitedTo20Percent)\r\n        {\r\n            _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\r\n            amount=amount*2/10;\r\n        }\r\n        liquidityToken.transfer(msg.sender, amount);\r\n        emit OnReleaseLP();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint) {\r\n        return _circulatingSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\r\n        uint currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n    \r\n    function withdrawToken(address _tokenContract, uint256 _amount) external onlyOwner {\r\n        IBEP20 tokenContract = IBEP20(_tokenContract);\r\n        tokenContract.transfer(msg.sender, _amount);\r\n    }\r\n    function withdrawBNB(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(msg.sender).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnEnableTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UnlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"OnProlongLPLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnReleaseLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"splitter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"OnSetTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangePaymentSplitter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"ExcludeAccountFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPReleaseLimitedTo20Percent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquidityRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"LockLiquidityForSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newOverLiquifyTresholdPermille\",\"type\":\"uint256\"}],\"name\":\"SetOverLiquifiedTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"SetPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transfer_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"SetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetupEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"manual\",\"type\":\"bool\"}],\"name\":\"SwitchManualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enable_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityReleaseTimeInSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidityReleaseTo20Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"manage_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overLiquifyTreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"protector_function\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protector\",\"type\":\"address\"}],\"name\":\"setProtector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapTresholdPermille\",\"type\":\"uint256\"}],\"name\":\"setSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitterTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DegemV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fe9f7f3bf8a509b6edf714f43f24c2332482a08fe357dd5a7446bdbd1e8cb776"}