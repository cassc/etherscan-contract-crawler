{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-11-12\r\n*/\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/cesslpvault.sol\r\n\r\npragma solidity =0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n// People lock their `lockToken` and get rewarded `rewardToken`\r\n// SETUP: First add the rewardToken into the contract, say 400 TWOK and then set the rewardPerBlock to decide how many are given in a day\r\n/// @notice This contract allows you to lock lockToken tokens and receive earnings\r\n/// It also allows you to extract those earnings\r\ncontract Vault is Initializable, OwnableUpgradeSafe {\r\n    using SafeMath for uint256;\r\n\r\n    // How many lockToken tokens each user has\r\n    mapping (address => uint256) public amountLocked;\r\n    // The price when you extracted your earnings so we can whether you got new earnings or not\r\n    mapping (address => uint256) public lastPriceEarningsExtracted;\r\n    // When the user started locking his lockToken tokens\r\n    mapping (address => uint256) public depositStarts;\r\n    mapping (address => uint256) public lockingTime;\r\n    // The uniswap lockToken token contract\r\n    address public lockToken;\r\n    // The reward token that people receive based on the staking time\r\n    address public rewardToken;\r\n    // How many lockToken tokens are locked\r\n    uint256 public totalLiquidityLocked;\r\n    // The total lockTokenFee generated\r\n    uint256 public totalLockTokenFeeMined;\r\n    uint256 public lockTokenFeePrice;\r\n    uint256 public accomulatedRewards;\r\n    uint256 public pricePadding;\r\n    address payable public devTreasury;\r\n    uint256 public minTimeLock;\r\n    uint256 public maxTimeLock;\r\n    uint256 public minDevTreasuryPercentage;\r\n    uint256 public maxDevTreasuryPercentage;\r\n    // The last block number when fee was updated\r\n    uint256 public lastBlockFee;\r\n    uint256 public rewardPerBlock;\r\n\r\n    // increase the lockTokenFeePrice\r\n    receive() external payable {\r\n        addFeeAndUpdatePrice(msg.value);\r\n    }\r\n\r\n    function initialize(address _lockToken, address _rewardToken, address payable _devTreasury) public initializer {\r\n        __Ownable_init();\r\n        lockToken = _lockToken;\r\n        pricePadding = 1e18;\r\n        devTreasury = _devTreasury;\r\n        minTimeLock = 1 days;\r\n        maxTimeLock = 365 days;\r\n        minDevTreasuryPercentage = 10e18;\r\n        maxDevTreasuryPercentage = 1e18;\r\n        lastBlockFee = 0;\r\n        rewardToken = _rewardToken;\r\n        // The average block time is 3 seconds, therefore 1 day is 28800 blocks\r\n        // 1e18 / 28800 is 1 twok per 28800 blocks (a day on average in BSC)\r\n        rewardPerBlock = 35e12;\r\n    }\r\n\r\n    function setLockToken(address _lockToken) external onlyOwner {\r\n        lockToken = _lockToken;\r\n    }\r\n\r\n    // Must be in 1e18 since it's using the pricePadding\r\n    function setRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\r\n      rewardPerBlock = _rewardPerBlock;\r\n    }\r\n\r\n    function setDevTreasury(address payable _devTreasury) external onlyOwner {\r\n        devTreasury = _devTreasury;\r\n    }\r\n\r\n    function setRewardToken(address _rewardToken) external onlyOwner {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    // Must be in seconds\r\n    function setTimeLocks(uint256 _minTimeLock, uint256 _maxTimeLock) external onlyOwner {\r\n        minTimeLock = _minTimeLock;\r\n        maxTimeLock = _maxTimeLock;\r\n    }\r\n\r\n    function setDevPercentages(uint256 _minDevTreasuryPercentage, uint256 _maxDevTreasuryPercentage) external onlyOwner {\r\n        require(minDevTreasuryPercentage > maxDevTreasuryPercentage, 'Vault: The min % must be larger');\r\n        minDevTreasuryPercentage = _minDevTreasuryPercentage;\r\n        maxDevTreasuryPercentage = _maxDevTreasuryPercentage;\r\n    }\r\n\r\n    /// @notice When ETH is added, the price is increased\r\n    /// Price is = (feeIn / totalLockTokenFeeDistributed) + currentPrice\r\n    /// padded with 18 zeroes that get removed after the calculations\r\n    /// if there are no locked lockTokens, the price is 0\r\n    function addFeeAndUpdatePrice(uint256 _feeIn) internal {\r\n        accomulatedRewards = accomulatedRewards.add(_feeIn);\r\n        if (totalLiquidityLocked == 0) {\r\n          lockTokenFeePrice = 0;\r\n        } else {\r\n          lockTokenFeePrice = (_feeIn.mul(pricePadding).div(totalLiquidityLocked)).add(lockTokenFeePrice);\r\n        }\r\n    }\r\n\r\n    /// @notice To calculate how much fee should be added based on time\r\n    function updateFeeIn() internal {\r\n        // setup the intial block instead of getting rewards right away\r\n        if (lastBlockFee != 0) {\r\n            // Use it\r\n            uint256 blocksPassed = block.number - lastBlockFee;\r\n            // We don't need to divide by the padding since we want the result padded since the TWOK token has 18 decimals\r\n            uint256 feeIn = blocksPassed.mul(rewardPerBlock);\r\n            if (feeIn > 0) addFeeAndUpdatePrice(feeIn);\r\n            // Update it\r\n        }\r\n        lastBlockFee = block.number;\r\n    }\r\n\r\n    // The time lock is reset every new deposit\r\n    function lockLiquidity(uint256 _amount, uint256 _timeLock) public {\r\n        updateFeeIn();\r\n        require(_amount > 0, 'Vault: Amount must be larger than zero');\r\n        require(_timeLock >= minTimeLock && _timeLock <= maxTimeLock, 'Vault: You must setup a locking time between the ranges');\r\n        // Transfer lockToken tokens inside here while earning fees from every transfer\r\n        uint256 approval = IERC20(lockToken).allowance(msg.sender, address(this));\r\n        require(approval >= _amount, 'Vault: You must approve the desired amount of lockToken tokens to this contract first');\r\n        //FIX for inclusive fee tokens\r\n        uint256 initialAmount = IERC20(lockToken).balanceOf(address(this)); //FIX calculate the actual token balance for the SC\r\n        IERC20(lockToken).transferFrom(msg.sender, address(this), _amount);\r\n        _amount = IERC20(lockToken).balanceOf(address(this)).sub(initialAmount); // FIX adjust the _amount var according to the receveid funds\r\n        totalLiquidityLocked = totalLiquidityLocked.add(_amount);\r\n        // Extract earnings in case the user is not a new Locked lockToken\r\n        if (lastPriceEarningsExtracted[msg.sender] != 0 && lastPriceEarningsExtracted[msg.sender] != lockTokenFeePrice) {\r\n            extractEarnings();\r\n        }\r\n        // Set the initial price\r\n        if (lockTokenFeePrice == 0) {\r\n            lockTokenFeePrice = accomulatedRewards.mul(pricePadding).div(_amount).add(1e18);\r\n            lastPriceEarningsExtracted[msg.sender] = 1e18;\r\n        } else {\r\n            lastPriceEarningsExtracted[msg.sender] = lockTokenFeePrice;\r\n        }\r\n        // The price doesn't change when locking lockToken. It changes when fees are generated from transfers\r\n        amountLocked[msg.sender] = amountLocked[msg.sender].add(_amount);\r\n        // Notice that the locking time is reset when new lockToken is added\r\n        depositStarts[msg.sender] = now;\r\n        lockingTime[msg.sender] = _timeLock;\r\n    }\r\n\r\n    // We check for new earnings by seeing if the price the user last extracted his earnings\r\n    // is the same or not to determine whether he can extract new earnings or not\r\n    function extractEarnings() public {\r\n      updateFeeIn();\r\n      require(amountLocked[msg.sender] > 0, 'Vault: You must have locked lockToken provider tokens to extract your earnings');\r\n      require(lockTokenFeePrice != lastPriceEarningsExtracted[msg.sender], 'Vault: You have already extracted your earnings');\r\n      // The amountLocked price minus the last price extracted\r\n      uint256 myPrice = lockTokenFeePrice.sub(lastPriceEarningsExtracted[msg.sender]);\r\n      uint256 earnings = amountLocked[msg.sender].mul(myPrice).div(pricePadding);\r\n      lastPriceEarningsExtracted[msg.sender] = lockTokenFeePrice;\r\n      accomulatedRewards = accomulatedRewards.sub(earnings);\r\n      uint256 devTreasuryPercentage = calcDevTreasuryPercentage(lockingTime[msg.sender]);\r\n      uint256 devTreasuryEarnings = earnings.mul(devTreasuryPercentage).div(1e20);\r\n      uint256 remaining = earnings.sub(devTreasuryEarnings);\r\n\r\n      // Transfer the earnings\r\n      IERC20(rewardToken).transfer(devTreasury, devTreasuryEarnings);\r\n      IERC20(rewardToken).transfer(msg.sender, remaining);\r\n    }\r\n\r\n    // The user must lock the lockToken for 1 year and only then can extract his Locked lockToken tokens\r\n    // he must extract all the lockTokens for simplicity and security purposes\r\n    function extractLiquidity() public {\r\n      updateFeeIn();\r\n      require(amountLocked[msg.sender] > 0, 'Vault: You must have locked lockTokens to extract them');\r\n      require(now.sub(depositStarts[msg.sender]) >= lockingTime[msg.sender], 'Vault: You must wait the specified locking time to extract your lockToken provider tokens');\r\n      // Extract earnings in case there are some\r\n      if (lastPriceEarningsExtracted[msg.sender] != 0 && lastPriceEarningsExtracted[msg.sender] != lockTokenFeePrice) {\r\n          extractEarnings();\r\n      }\r\n      uint256 locked = amountLocked[msg.sender];\r\n      amountLocked[msg.sender] = 0;\r\n      depositStarts[msg.sender] = now;\r\n      lastPriceEarningsExtracted[msg.sender] = 0;\r\n      totalLiquidityLocked = totalLiquidityLocked.sub(locked);\r\n      IERC20(lockToken).transfer(msg.sender, locked);\r\n    }\r\n\r\n    /// Returns the treasury percentage padded with 18 zeroes\r\n    function calcDevTreasuryPercentage(uint256 _lockingTime) public view returns(uint256) {\r\n        require(_lockingTime >= minTimeLock && _lockingTime <= maxTimeLock, 'Vault: You must setup a locking time between the ranges');\r\n        if (_lockingTime == maxTimeLock) {\r\n            return maxDevTreasuryPercentage;\r\n        }\r\n        if (_lockingTime == minTimeLock) {\r\n            return minDevTreasuryPercentage;\r\n        }\r\n        uint256 padding = 1e18;\r\n        uint256 combinedDays = maxTimeLock.sub(minTimeLock);\r\n        uint256 combinedFee = minDevTreasuryPercentage.sub(maxDevTreasuryPercentage);\r\n        // There's no risk of a ratio == 0 since we return the right percentage when lockTime == minLockTime\r\n        uint256 ratio = (_lockingTime.sub(minTimeLock)).mul(padding).div(combinedDays);\r\n        return minDevTreasuryPercentage.sub(ratio.mul(combinedFee).div(padding));\r\n    }\r\n\r\n    function getAmountLocked(address _user) external view returns(uint256) {\r\n        return amountLocked[_user];\r\n    }\r\n\r\n    function extractTokensIfStuck(address _token, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).transfer(owner(), _amount);\r\n    }\r\n\r\n    function extractETHIfStruck() external onlyOwner {\r\n        payable(address(owner())).transfer(address(this).balance);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accomulatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockingTime\",\"type\":\"uint256\"}],\"name\":\"calcDevTreasuryPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositStarts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractETHIfStruck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"extractTokensIfStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAmountLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devTreasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastPriceEarningsExtracted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeLock\",\"type\":\"uint256\"}],\"name\":\"lockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTokenFeePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDevTreasuryPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDevTreasuryPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePadding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDevTreasuryPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDevTreasuryPercentage\",\"type\":\"uint256\"}],\"name\":\"setDevPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devTreasury\",\"type\":\"address\"}],\"name\":\"setDevTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"}],\"name\":\"setLockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTimeLock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTimeLock\",\"type\":\"uint256\"}],\"name\":\"setTimeLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockTokenFeeMined\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vault", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://51aeba4e3c2bf3cc44b109b1caa9a8aa232e7399b9ff31138b916ea62a6a4003"}