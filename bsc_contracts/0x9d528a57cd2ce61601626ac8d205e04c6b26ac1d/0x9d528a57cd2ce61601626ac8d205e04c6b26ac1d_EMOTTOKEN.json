{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * The People's Token! By the People For The People!\r\n * Dedicated to the OG Day 1 FOUNDRz of the $EMOT Family!!\r\n * Special thanks to Positivelife90\r\n */\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract EMOTTOKEN is Pausable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 private _decimals;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public WhaleTaxAvail;\r\n    uint256 public WhaleTaxTotal;\r\n    uint256 public tooMuch;\r\n    uint256 private taxFee;\r\n    uint256 private minBalance;\r\n    uint256 private holderPerk;\r\n\r\n    uint256[4] public TaxDistribution;\r\n    uint256[2] public WhaleTaxDistribution;\r\n    uint256 public _taxSwapThreshold = 0 * 10 ** _decimals;\r\n\r\n    address public pancakeV2Pair;\r\n\r\n    address[4] public wallets;\r\n    address[] private listedHolders;\r\n    address payable private _taxWallet;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private tokenBlacklist;\r\n    mapping(address => bool) private tokenTaxFreeList;\r\n    mapping(address => bool) public isListedHolder;\r\n    mapping(address => bool) public removedListedHolder;\r\n    mapping(address => bool) private isDexAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    IPancakeV2Router02 public pancakeV2Router;\r\n\r\n    event Blacklist(address indexed blackListed, bool value);\r\n    event TaxFreeList(address indexed taxFreeListed, bool value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(\r\n        string memory _tname,\r\n        string memory _tsymbol,\r\n        uint8 _decimal,\r\n        uint256 _supply,\r\n        address _tokenOwner,\r\n        address[4] memory _wallets,\r\n        uint256[4] memory _taxDistribution,\r\n        uint256[4] memory _distribution,\r\n        address _pancakeV2Router,\r\n        uint256 _tax,\r\n        uint256 _TMDivider\r\n    ) {\r\n        _name = _tname;\r\n        _symbol = _tsymbol;\r\n        wallets = _wallets;\r\n        _decimals = _decimal;\r\n        _mint(_tokenOwner, _supply * 10 ** _decimal);\r\n        pancakeV2Router = IPancakeV2Router02(_pancakeV2Router);\r\n        taxFee = _tax;\r\n        tooMuch = (_supply * 10 ** _decimal) / _TMDivider;\r\n        TaxDistribution = _taxDistribution;\r\n        WhaleTaxDistribution[0] = _distribution[0];\r\n        WhaleTaxDistribution[1] = _distribution[1];\r\n        minBalance = _distribution[2];\r\n        holderPerk = _distribution[3];\r\n        _taxWallet = payable(msg.sender);\r\n    }\r\n\r\n    function updateDexContract(\r\n        address _pair,\r\n        address _router\r\n    ) public onlyOwner {\r\n        pancakeV2Pair = _pair;\r\n        pancakeV2Router = IPancakeV2Router02(_router);\r\n    }\r\n\r\n    function updateTSThreshold(uint256 _newTST) public onlyOwner {\r\n        _taxSwapThreshold = _newTST;\r\n    }\r\n\r\n    function setTaxWallet(address payable _tWallet) public {\r\n        {\r\n            require(\r\n                _msgSender() == owner() || _msgSender() == _taxWallet,\r\n                \"Not owner or tax wallet\"\r\n            );\r\n            _taxWallet = _tWallet;\r\n        }\r\n    }\r\n\r\n    function updateListedHolder(\r\n        address[] memory _holders,\r\n        bool[] memory _mode\r\n    ) public onlyOwner {\r\n        require(_holders.length == _mode.length, \"length not match\");\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            address hol = _holders[i];\r\n            bool _m = _mode[i];\r\n            if (_m == true) {\r\n                isListedHolder[hol] = _m;\r\n            } else if (_m == false) {\r\n                removedListedHolder[hol] = _m;\r\n                isListedHolder[hol] = _m;\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendTokenToPrevHolder(\r\n        address _tokenAddress,\r\n        address[] memory _holders\r\n    ) public onlyOwner {\r\n        IERC20 tokenContract = IERC20(_tokenAddress);\r\n        for (uint256 i = 0; i < _holders.length; i++) {\r\n            uint256 hBal = tokenContract.balanceOf(_holders[i]);\r\n            _transferStandard(msg.sender, _holders[i], hBal);\r\n        }\r\n    }\r\n\r\n    function manualSwap() public {\r\n        require(_msgSender() == _taxWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function blackListAddress(\r\n        address listAddress,\r\n        bool isBlackListed\r\n    ) public whenNotPaused onlyOwner returns (bool success) {\r\n        return _blackList(listAddress, isBlackListed);\r\n    }\r\n\r\n    function taxFreeListAddress(\r\n        address listAddress,\r\n        bool istaxFreeListed\r\n    ) public whenNotPaused onlyOwner returns (bool success) {\r\n        return _taxFreeList(listAddress, istaxFreeListed);\r\n    }\r\n\r\n    function setTooMuch(uint256 _amount) public onlyOwner {\r\n        tooMuch = _totalSupply / _amount;\r\n    }\r\n\r\n    function setWallets(\r\n        address[4] memory _wallets,\r\n        uint256[4] memory _taxDistribution\r\n    ) public onlyOwner {\r\n        wallets = _wallets;\r\n        TaxDistribution = _taxDistribution;\r\n    }\r\n\r\n    function updateWTD(uint256[2] memory _WTD) public onlyOwner {\r\n        WhaleTaxDistribution = _WTD;\r\n    }\r\n\r\n    function updateMH(\r\n        uint256 _newMBalance,\r\n        uint256 _newMHperk\r\n    ) public onlyOwner {\r\n        minBalance = _newMBalance;\r\n        holderPerk = _newMHperk;\r\n    }\r\n\r\n    function addDexAddress(\r\n        address[] memory _dexs,\r\n        bool[] memory _modes\r\n    ) public onlyOwner {\r\n        require(_dexs.length == _modes.length, \"length\");\r\n        for (uint256 i = 0; i < _dexs.length; i++) {\r\n            isDexAddress[_dexs[i]] = _modes[i];\r\n        }\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setSwapEnabled() public onlyOwner {\r\n        swapEnabled = !swapEnabled;\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner {\r\n        _approve(address(this), address(pancakeV2Router), _totalSupply);\r\n        if (tradingOpen == false) {\r\n            pancakeV2Pair = IPancakeV2Factory(pancakeV2Router.factory())\r\n                .createPair(address(this), pancakeV2Router.WETH());\r\n        }\r\n\r\n        pancakeV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        tradingOpen = true;\r\n        swapEnabled = true;\r\n        IERC20(pancakeV2Pair).approve(address(pancakeV2Router), type(uint).max);\r\n        isDexAddress[pancakeV2Pair] = true;\r\n        isDexAddress[address(pancakeV2Router)] = true;\r\n    }\r\n\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    ) public whenNotPaused returns (bool) {\r\n        require(tokenBlacklist[msg.sender] == false);\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool) {\r\n        require(tokenBlacklist[_from] == false);\r\n        _transfer(_from, _to, _value);\r\n        _spendAllowance(_from, msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool) {\r\n        require(_value <= _balances[_from]);\r\n        uint256 _Tax;\r\n        uint256 _WTax;\r\n        if (!isListedHolder[_to] && !removedListedHolder[_to]) {\r\n            if (!isDexAddress[_to]) {\r\n                isListedHolder[_to] = true;\r\n                listedHolders.push(_to);\r\n            }\r\n        }\r\n        if (tokenTaxFreeList[_from] == true) {\r\n            _transferStandard(_from, _to, _value);\r\n            return true;\r\n        } else if (!isDexAddress[_from] && !isDexAddress[_to]) {\r\n            _transferStandard(_from, _to, _value);\r\n            return true;\r\n        } else if (_from == address(this)) {\r\n            _transferStandard(_from, _to, _value);\r\n            return true;\r\n        } else if (_value <= tooMuch) {\r\n            _Tax = _value.mul(taxFee).div(100);\r\n            _value = _value.sub(_Tax);\r\n            _transferStandard(_from, _to, _value);\r\n            _distributeTax(_from, _Tax);\r\n            // return true;\r\n        } else if (_value > tooMuch) {\r\n            if (_from != pancakeV2Pair) {\r\n                _transferStandard(_from, address(this), _value);\r\n                uint256 _whaleTax_PayOuts;\r\n                _WTax = _value.mul(WhaleTaxDistribution[0]).div(100);\r\n                _value = _value.sub(_WTax);\r\n                _Tax = _WTax.mul(WhaleTaxDistribution[1]).div(100);\r\n                _whaleTax_PayOuts = _WTax.sub(_Tax);\r\n                WhaleTaxTotal += _whaleTax_PayOuts;\r\n                WhaleTaxAvail = _whaleTax_PayOuts;\r\n                _distributeTax(address(this), _Tax);\r\n                _transferStandard(address(this), _to, _value);\r\n                _disperseWhaleTax(address(this), _whaleTax_PayOuts);\r\n\r\n                //   return true;\r\n            } else {\r\n                _Tax = _value.mul(taxFee).div(100);\r\n                _value = _value.sub(_Tax);\r\n                _transferStandard(_from, _to, _value);\r\n                _distributeTax(_from, _Tax);\r\n                return true;\r\n            }\r\n        }\r\n         uint256 contractTokenBalance = balanceOf(address(this));\r\n        if (\r\n            !inSwap &&\r\n            _from != pancakeV2Pair &&\r\n            swapEnabled &&\r\n            contractTokenBalance > _taxSwapThreshold\r\n        ) {\r\n            uint256 tokenBalance = balanceOf(address(this));\r\n            if (tokenBalance > 0) {\r\n                swapTokensForEth(tokenBalance);\r\n            }\r\n            uint256 ethBalance = address(this).balance;\r\n            if (ethBalance > 0) {\r\n                sendETHToFee(ethBalance);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        if (!tradingOpen) {\r\n            return;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeV2Router.WETH();\r\n        _approve(address(this), address(pancakeV2Router), tokenAmount);\r\n        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 5 minutes\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function _transferStandard(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 fromBalance = _balances[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _distributeTax(address _from, uint256 taxAmount) internal {\r\n        address[4] memory _wallets = wallets;\r\n        uint256[4] memory _distribution = TaxDistribution;\r\n        for (uint256 i = 0; i < _wallets.length; i++) {\r\n            uint256 walletShare = taxAmount.mul(_distribution[i]).div(100);\r\n            address wAddress = _wallets[i];\r\n\r\n            if (wAddress == 0x000000000000000000000000000000000000dEaD) {\r\n                _burn(_from, walletShare);\r\n            } else {\r\n                _transferStandard(_from, wAddress, walletShare);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _disperseWhaleTax(address _from, uint256 WTamount) internal {\r\n        address[] memory walHODLrz = listedHolders;\r\n        uint256 totalWalDist = walHODLrz.length;\r\n        uint256 HODLrzPerk = holderPerk;\r\n        uint256 mBalance = minBalance;\r\n        uint256 HODLrzPerkWals;\r\n\r\n        for (uint256 i = 0; i < walHODLrz.length; i++) {\r\n            address wallet = walHODLrz[i];\r\n            uint256 bal = balanceOf(wallet);\r\n            if (bal >= holderPerk) {\r\n                HODLrzPerkWals++;\r\n            }\r\n        }\r\n        uint256 HODLrzPerkWalDist = HODLrzPerkWals.mul(20).div(100);\r\n        uint256 t = totalWalDist.add(HODLrzPerkWalDist);\r\n        uint256 WhaleWalletShare = WTamount.div(t);\r\n\r\n        for (uint256 i = 0; i < totalWalDist; i++) {\r\n            address wallet = walHODLrz[i];\r\n            if (\r\n                wallet != address(0) &&\r\n                wallet != 0x000000000000000000000000000000000000dEaD &&\r\n                isListedHolder[wallet] &&\r\n                !removedListedHolder[wallet]\r\n            ) {\r\n                uint256 walletBalance = balanceOf(wallet);\r\n                if (\r\n                    !tokenBlacklist[wallet] &&\r\n                    wallet != owner() &&\r\n                    wallet != address(this) &&\r\n                    walletBalance >= mBalance &&\r\n                    WhaleWalletShare != 0\r\n                ) {\r\n                    if (walletBalance >= HODLrzPerk) {\r\n                        if (\r\n                            balanceOf(_from) >=\r\n                            WhaleWalletShare.add(\r\n                                WhaleWalletShare.mul(20).div(100)\r\n                            )\r\n                        ) {\r\n                            _transferStandard(\r\n                                _from,\r\n                                wallet,\r\n                                WhaleWalletShare.add(\r\n                                    WhaleWalletShare.mul(20).div(100)\r\n                                )\r\n                            );\r\n                        }\r\n                    } else {\r\n                        if (balanceOf(_from) >= WhaleWalletShare) {\r\n                            _transferStandard(_from, wallet, WhaleWalletShare);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        (bool success, ) = address(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success, \"Withdraw_Failed\");\r\n        _transferStandard(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _blackList(\r\n        address _address,\r\n        bool _isBlackListed\r\n    ) internal returns (bool) {\r\n        require(tokenBlacklist[_address] != _isBlackListed);\r\n        tokenBlacklist[_address] = _isBlackListed;\r\n        emit Blacklist(_address, _isBlackListed);\r\n        return true;\r\n    }\r\n\r\n    function _taxFreeList(\r\n        address _address,\r\n        bool _istaxFreeListed\r\n    ) internal returns (bool) {\r\n        require(tokenTaxFreeList[_address] != _istaxFreeListed);\r\n        tokenTaxFreeList[_address] = _istaxFreeListed;\r\n        emit TaxFreeList(_address, _istaxFreeListed);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public whenNotPaused returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public whenNotPaused returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public whenNotPaused returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n}\r\n/**\r\n*Cryptoneer1, Jeciera, & Clambo\r\n*2023 to Infinity!!!\r\n*/", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tsymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_wallets\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_taxDistribution\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_distribution\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"_pancakeV2Router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TMDivider\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"blackListed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taxFreeListed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"TaxFreeList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TaxDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhaleTaxAvail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WhaleTaxDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WhaleTaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dexs\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_modes\",\"type\":\"bool[]\"}],\"name\":\"addDexAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"blackListAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isListedHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removedListedHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"}],\"name\":\"sendTokenToPrevHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTooMuch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"_wallets\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_taxDistribution\",\"type\":\"uint256[4]\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"istaxFreeListed\",\"type\":\"bool\"}],\"name\":\"taxFreeListAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tooMuch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateDexContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_holders\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_mode\",\"type\":\"bool[]\"}],\"name\":\"updateListedHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMHperk\",\"type\":\"uint256\"}],\"name\":\"updateMH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTST\",\"type\":\"uint256\"}],\"name\":\"updateTSThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_WTD\",\"type\":\"uint256[2]\"}],\"name\":\"updateWTD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EMOTTOKEN", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000005d5ea85a80d400000000000000000000000000063b05aebdf5e6d0dc7d0d171eaf433b9e57c51b2000000000000000000000000f2cc2c199444d006ce5ed4a74ee0e5981695179a000000000000000000000000e6e11ac43d13c169db0261fe5daf54f86dc23d5b000000000000000000000000fed53e04c7888e034c2408de108589fcca166039000000000000000000000000000000000000000000000000000000000000dead000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000ae9f7bcc000000000000000000000000000000000000000000000000000000015d3ef7980000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000001600a391000000000000000000000000000000000000000000000000000000000000000009454d4f54544f4b454e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004454d4f5400000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d650e63a881ef2ad3ca2b8fc97f8434a341ccab323c3798a109e8b187ad8c56"}