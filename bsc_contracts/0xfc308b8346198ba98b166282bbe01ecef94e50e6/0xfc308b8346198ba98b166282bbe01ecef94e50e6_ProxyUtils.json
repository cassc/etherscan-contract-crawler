{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProxyUtils.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface DEXRouter {\\n    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n}\\n\\ncontract ProxyUtils {\\n\\n    DEXRouter private dexRouter;\\n    uint256 public batchLimit;\\n    uint256 private constant MAX = ~uint256(0);\\n\\n    constructor(address dexRouterAddress) {\\n        dexRouter = DEXRouter(dexRouterAddress);\\n        batchLimit = 1024;\\n    }\\n\\n    function transferToken(address tokenAddress, address to, uint256 amount) external {\\n        IERC20(tokenAddress).transferFrom(msg.sender, to, amount);\\n    }\\n\\n    function batchTransferToken(address tokenAddress, address[] memory recipients, uint256[] memory amounts) external {\\n        require(recipients.length == amounts.length, \\\"ProxyUtils::batchTransferToken: recipients length must be equal to amounts.length\\\");\\n        require(recipients.length <= batchLimit, \\\"ProxyUtils::batchTransferToken: exceeds batch limit\\\");\\n        \\n        for (uint i = 0; i < recipients.length; i++) {\\n            IERC20(tokenAddress).transferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    function batchTransferTokens(address[] memory tokens, address[] memory recipients, uint256[] memory amounts) external {\\n        require(recipients.length == amounts.length, \\\"ProxyUtils::batchTransferTokens: recipients length must be equal to amounts.length\\\");\\n        require(recipients.length <= batchLimit, \\\"ProxyUtils::batchTransferTokens: exceeds batch limit\\\");\\n        \\n        for (uint i = 0; i < recipients.length; i++) {\\n            IERC20(tokens[i]).transferFrom(msg.sender, recipients[i], amounts[i]);\\n        }\\n    }\\n\\n    function swapETHForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata paths, address to, uint256 deadline) payable external {\\n        dexRouter.swapExactETHForTokens{value: amountIn}(amountOutMin, paths, to, deadline);\\n    }\\n\\n    function swapTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata paths, address to, uint256 deadline) external {\\n        IERC20(paths[0]).transferFrom(msg.sender, address(this), amountIn);\\n\\n        uint256 allowance = IERC20(paths[0]).allowance(address(this), address(dexRouter));\\n        if(allowance < amountIn) {\\n            IERC20(paths[0]).approve(address(dexRouter), MAX);\\n        }\\n        \\n        dexRouter.swapExactTokensForETH(amountIn, amountOutMin, paths, to, deadline);\\n    }\\n\\n    function batchSwapTokensForETH(uint256[] calldata amountsIn, uint256[] calldata amountOutMins, address[][] calldata paths, address[] calldata tos, uint256[] calldata deadlines) external {\\n        require(amountsIn.length == amountOutMins.length, \\\"ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to amountOutMins.length\\\");\\n        require(amountsIn.length == paths.length, \\\"ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to paths.length\\\");\\n        require(amountsIn.length == tos.length, \\\"ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to tos.length\\\");\\n        require(amountsIn.length == deadlines.length, \\\"ProxyUtils::batchSwapTokensForETH: amountIn length must be equal to deadlines.length\\\");\\n        require(tos.length <= batchLimit, \\\"ProxyUtils::batchSwapTokensForETH: exceeds batch limit\\\");\\n        \\n        for (uint256 i = 0; i < amountOutMins.length; i++) {\\n            IERC20(paths[i][0]).transferFrom(msg.sender, address(this), amountsIn[i]);\\n     \\n            uint256 allowance = IERC20(paths[i][0]).allowance(address(this), address(dexRouter));\\n            if(allowance < amountsIn[i]) {\\n                IERC20(paths[i][0]).approve(address(dexRouter), MAX);\\n            }\\n            dexRouter.swapExactTokensForETH(amountsIn[i], amountOutMins[i], paths[i], tos[i], deadlines[i]);\\n        }\\n    }\\n\\n    function batchSwapTokensForTokens(uint[] calldata amountsIn, uint[] calldata amountsOutMin, address[][] calldata paths, address[] calldata tos, uint[] calldata deadlines) external {\\n        require(amountsOutMin.length == paths.length, \\\"ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to paths.length\\\");\\n        require(amountsOutMin.length == tos.length, \\\"ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to tos.length\\\");\\n        require(amountsOutMin.length == deadlines.length, \\\"ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to deadlines.length\\\");\\n        require(amountsOutMin.length == amountsIn.length, \\\"ProxyUtils::batchSwapTokensForTokens: amountOutMins length must be equal to amountsIn.length\\\");\\n        require(tos.length <= batchLimit, \\\"ProxyUtils::batchSwapTokensForTokens: exceeds batch limit\\\");\\n        \\n        for (uint256 i = 0; i < amountsOutMin.length; i++) {\\n            if(paths[i][0] == address(0)) {\\n                dexRouter.swapExactETHForTokens{value: amountsIn[i]}(amountsOutMin[i], paths[i], tos[i], deadlines[i]);\\n            } else {\\n                IERC20(paths[i][0]).transferFrom(msg.sender, address(this), amountsIn[i]);\\n                \\n                uint256 allowance = IERC20(paths[i][0]).allowance(address(this), address(dexRouter));\\n                if(allowance < amountsIn[i]) {\\n                    IERC20(paths[i][0]).approve(address(dexRouter), MAX);\\n                }\\n                dexRouter.swapExactTokensForTokens(amountsIn[i], amountsOutMin[i], paths[i], tos[i], deadlines[i]);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"batchLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountOutMins\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"}],\"name\":\"batchSwapTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutMin\",\"type\":\"uint256[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"}],\"name\":\"batchSwapTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"paths\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProxyUtils", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}