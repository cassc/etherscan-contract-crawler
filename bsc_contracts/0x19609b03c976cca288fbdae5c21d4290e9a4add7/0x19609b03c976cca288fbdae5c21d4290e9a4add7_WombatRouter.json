{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wombat-core/libraries/WombatRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.5;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport '../interfaces/IPool.sol';\\nimport '../interfaces/IWombatRouter.sol';\\n\\ninterface IWNative {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\\n/**\\n * @title WombatRouter\\n * @notice Allows routing on different wombat pools\\n * @dev Owner is allowed and required to approve token spending by pools via approveSpendingByPool function.\\n * With great thanks to the uniswap team for your contribution to the opensource community\\n * reference: https://github.com/Uniswap/v2-periphery/blob/master/contracts/UniswapV2Router02.sol\\n */\\ncontract WombatRouter is Ownable, IWombatRouter {\\n    using SafeERC20 for IERC20;\\n\\n    // WBNB (mainnet): 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\\n    // WBNB (testnet): 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd\\n    IWNative public immutable wNative;\\n\\n    constructor(IWNative _wNative) {\\n        wNative = _wNative;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(wNative));\\n    }\\n\\n    /// @notice approve spending of router tokens by pool\\n    /// @param tokens array of tokens to be approved\\n    /// @param pool to be approved to spend\\n    /// @dev needs to be done after asset deployment for router to be able to support the tokens\\n    function approveSpendingByPool(address[] calldata tokens, address pool) external onlyOwner {\\n        for (uint256 i; i < tokens.length; ++i) {\\n            IERC20(tokens[i]).safeApprove(pool, 0);\\n            IERC20(tokens[i]).safeApprove(pool, type(uint256).max);\\n        }\\n    }\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable override returns (uint256 liquidity) {\\n        wNative.deposit{value: msg.value}();\\n        return pool.deposit(address(wNative), msg.value, minimumLiquidity, to, deadline, shouldStake);\\n    }\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amount) {\\n        address asset = pool.addressOfAsset(address(wNative));\\n        IERC20(asset).transferFrom(address(msg.sender), address(this), liquidity);\\n\\n        amount = pool.withdraw(address(wNative), liquidity, minimumAmount, address(this), deadline);\\n        wNative.withdraw(amount);\\n        _safeTransferNative(to, amount);\\n    }\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount) {\\n        address asset = pool.addressOfAsset(fromToken);\\n        IERC20(asset).transferFrom(address(msg.sender), address(this), liquidity);\\n\\n        amount = pool.withdrawFromOtherAsset(\\n            fromToken,\\n            address(wNative),\\n            liquidity,\\n            minimumAmount,\\n            address(this),\\n            deadline\\n        );\\n        wNative.withdraw(amount);\\n        _safeTransferNative(to, amount);\\n    }\\n\\n    /// @notice Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path\\n    /// @param tokenPath An array of token addresses. path.length must be >= 2.\\n    /// @param tokenPath The first element of the path is the input token, the last element is the output token.\\n    /// @param poolPath An array of pool addresses. The pools where the pathTokens are contained in order.\\n    /// @param amountIn the amount in\\n    /// @param minimumamountOut the minimum amount to get for user\\n    /// @param to the user to send the tokens to\\n    /// @param deadline the deadline to respect\\n    /// @return amountOut received by user\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountOut) {\\n        require(deadline >= block.timestamp, 'expired');\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get from token from users\\n        IERC20(tokenPath[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\\n\\n        amountOut = _swap(tokenPath, poolPath, amountIn, to);\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n    }\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable override returns (uint256 amountOut) {\\n        require(tokenPath[0] == address(wNative), 'the first address should be wrapped token');\\n        require(deadline >= block.timestamp, 'expired');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get wrapped tokens\\n        wNative.deposit{value: msg.value}();\\n\\n        amountOut = _swap(tokenPath, poolPath, msg.value, to);\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n    }\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external override returns (uint256 amountOut) {\\n        require(tokenPath[tokenPath.length - 1] == address(wNative), 'the last address should be wrapped token');\\n        require(deadline >= block.timestamp, 'expired');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // get from token from users\\n        IERC20(tokenPath[0]).safeTransferFrom(address(msg.sender), address(this), amountIn);\\n\\n        amountOut = _swap(tokenPath, poolPath, amountIn, address(this));\\n        require(amountOut >= minimumamountOut, 'amountOut too low');\\n\\n        wNative.withdraw(amountOut);\\n        _safeTransferNative(to, amountOut);\\n    }\\n\\n    /// @notice Private function to swap alone the token path\\n    /// @dev Assumes router has initial amountIn in balance.\\n    /// Assumes tokens being swapped have been approve via the approveSpendingByPool function\\n    /// @param tokenPath An array of token addresses. path.length must be >= 2.\\n    /// @param tokenPath The first element of the path is the input token, the last element is the output token.\\n    /// @param poolPath An array of pool addresses. The pools where the pathTokens are contained in order.\\n    /// @param amountIn the amount in\\n    /// @param to the user to send the tokens to\\n    /// @return amountOut received by user\\n    function _swap(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        // next from amount, starts with amountIn in arg\\n        uint256 nextamountIn = amountIn;\\n\\n        // first n - 1 swaps\\n        for (uint256 i; i < poolPath.length - 1; ++i) {\\n            // make the swap with the correct arguments\\n            (amountOut, ) = IPool(poolPath[i]).swap(\\n                tokenPath[i],\\n                tokenPath[i + 1],\\n                nextamountIn,\\n                0, // minimum amount received is ensured on calling function\\n                address(this),\\n                type(uint256).max // deadline is ensured on calling function\\n            );\\n            nextamountIn = amountOut;\\n        }\\n\\n        // last swap\\n        uint256 i = poolPath.length - 1;\\n        (amountOut, ) = IPool(poolPath[i]).swap(\\n            tokenPath[i],\\n            tokenPath[i + 1],\\n            nextamountIn,\\n            0, // minimum amount received is ensured on calling function\\n            to,\\n            type(uint256).max // deadline is ensured on calling function\\n        );\\n    }\\n\\n    /**\\n     * @notice Given an input asset amount and an array of token addresses, calculates the\\n     * maximum output token amount (accounting for fees and slippage).\\n     * @param tokenPath The token swap path\\n     * @param poolPath The token pool path\\n     * @param amountIn The from amount\\n     * @return amountOut The potential final amount user would receive\\n     */\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view override returns (uint256 amountOut, uint256[] memory haircuts) {\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // next from amount, starts with amountIn in arg\\n        int256 nextamountIn = amountIn;\\n        haircuts = new uint256[](poolPath.length);\\n\\n        for (uint256 i; i < poolPath.length; ++i) {\\n            // make the swap with the correct arguments\\n            (amountOut, haircuts[i]) = IPool(poolPath[i]).quotePotentialSwap(\\n                tokenPath[i],\\n                tokenPath[i + 1],\\n                nextamountIn\\n            );\\n            nextamountIn = int256(amountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     * @param tokenPath The token swap path\\n     * @param poolPath The token pool path\\n     * @param amountOut The to amount\\n     * @return amountIn The potential final amount user would receive\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view override returns (uint256 amountIn, uint256[] memory haircuts) {\\n        require(tokenPath.length >= 2, 'invalid token path');\\n        require(poolPath.length == tokenPath.length - 1, 'invalid pool path');\\n\\n        // next from amount, starts with amountIn in arg\\n        int256 nextAmountOut = int256(amountOut);\\n        haircuts = new uint256[](poolPath.length);\\n\\n        for (uint256 i = poolPath.length; i > 0; --i) {\\n            (amountIn, haircuts[i - 1]) = IPool(poolPath[i - 1]).quoteAmountIn(\\n                tokenPath[i - 1],\\n                tokenPath[i],\\n                nextAmountOut\\n            );\\n            nextAmountOut = int256(amountIn);\\n        }\\n    }\\n\\n    function _safeTransferNative(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, '_safeTransferNative fails');\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/wombat-core/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\ninterface IPool {\\n    function getTokens() external view returns (address[] memory);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256 liquidity);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quotePotentialDeposit(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (uint256 amount, uint256 fee);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n}\\n\"\r\n    },\r\n    \"contracts/wombat-core/interfaces/IWombatRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.5;\\n\\nimport './IPool.sol';\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"_wNative\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldStake\",\"type\":\"bool\"}],\"name\":\"addLiquidityNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"approveSpendingByPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"haircuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"int256\",\"name\":\"amountIn\",\"type\":\"int256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"haircuts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityFromOtherAssetAsNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactNativeForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"poolPath\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumamountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNative\",\"outputs\":[{\"internalType\":\"contract IWNative\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WombatRouter", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}