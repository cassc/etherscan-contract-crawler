{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address user) external view returns(uint);\r\n}\r\n\r\ninterface IXxx {\r\n    function registrationFor(address userAddress) external;\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function buyNewLevelFor(address userAddress, uint8 level) external;\r\n}\r\n\r\ninterface IForsageExpress {\r\n    function registrationFor(address userAddress) external;\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function buyNewLevelFor(address userAddress, uint8 level) external;\r\n}\r\n\r\ninterface IMaxDrive {\r\n    function registrationFor(address userAddress) external;\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function buyNewLevelFor(address userAddress, uint8 level) external;\r\n}\r\n\r\ninterface IForsageLottery {\r\n    function registrationFor(address userAddress) external;\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function buyNewLevelFor(address userAddress, uint8 level) external;\r\n}\r\n\r\ninterface IXGold {\r\n    function buyNewLevel(uint8 level) external payable;\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function buyNewLevelFor(address userAddress, uint8 level) external payable;\r\n}\r\n\r\ninterface IXQore {\r\n    function buyNewLevel(uint8 level) external payable;\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function buyNewLevelFor(address userAddress, uint8 level) external payable;\r\n}\r\n\r\ninterface IForsage {\r\n    function registrationFor(address userAddress, address referrerAddress) external;\r\n    function buyNewLevelFor(address userAddress, uint8 matrix, uint8 level) external;\r\n    function BASIC_PRICE() external view returns(uint);\r\n    function levelPrice(uint8 level) external view returns(uint);\r\n    function users(address userAddress) external view returns(uint id, address referrer, uint partnersCount);\r\n}\r\n\r\ninterface IPancakeRouter {\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IWBNB {\r\n  function withdraw(uint amount) external;\r\n}\r\n\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n        // Copy msg.data. We take full control of memory in this inline assembly\r\n        // block because it will not return to Solidity code. We overwrite the\r\n        // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n        // Call the implementation.\r\n        // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\r\n\r\n        // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize()) }\r\n            default { return(0, returndatasize()) }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal virtual view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     * \r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive () payable external {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     * \r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {\r\n    }\r\n}\r\n\r\n\r\ncontract RouterProxy is Proxy {\r\n\r\n    address public impl;\r\n    address public contractOwner;\r\n\r\n    modifier onlyContractOwner() {\r\n        require(msg.sender == contractOwner);\r\n        _;\r\n    }\r\n\r\n    constructor(address _impl) {\r\n        impl = _impl;\r\n        contractOwner = msg.sender;\r\n    }\r\n\r\n    function update(address newImpl) public onlyContractOwner {\r\n        impl = newImpl;\r\n    }\r\n\r\n    function removeOwnership() public onlyContractOwner {\r\n        contractOwner = address(0);\r\n    }\r\n\r\n    function _implementation() internal override view returns (address) {\r\n        return impl;\r\n    }\r\n}\r\n\r\ninterface IForsageRouter {\r\n    function forsageExpressRegistration(address referrerAddress) external payable;\r\n}\r\n\r\ncontract ForsageRouterBasic {\r\n\r\n    address public impl;\r\n    address public contractOwner;\r\n\r\n    IERC20 public busd;\r\n\r\n    IPancakeRouter public pancakeRouter;\r\n    IForsage public forsage;\r\n    IForsageExpress public forsageExpress;\r\n    IXGold public xGold;\r\n    IXxx public xxx;\r\n    IMaxDrive public maxDrive;\r\n\r\n    address payable public feeWallet;\r\n    uint public busdFee;\r\n\r\n    IForsageLottery public forsageLottery;\r\n\r\n    IXQore public xQore;\r\n    IXQore public maxQore;\r\n}\r\n\r\ncontract ForsageRouter is ForsageRouterBasic {\r\n\r\n    //forsage - 0x5acc84a3e955bdd76467d3348077d003f00ffb97\r\n    //pancakeRouter - 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    function init(IForsage _forsage,\r\n        IXxx _xxx,\r\n        IXGold _xGold,\r\n        IPancakeRouter _pancakeRouter,\r\n        IXQore _xQore,\r\n        IXQore _maxQore\r\n    ) public {\r\n        require(msg.sender == contractOwner, \"onlyContractOwner\");\r\n        busd = IERC20(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n        forsage = _forsage;\r\n        pancakeRouter = _pancakeRouter;\r\n        xQore = _xQore;\r\n        xGold = _xGold;\r\n        xxx = _xxx;\r\n        maxQore = _maxQore; \r\n\r\n        busd.approve(address(pancakeRouter), type(uint256).max);\r\n        busd.approve(address(forsage), type(uint256).max);\r\n        busd.approve(address(xxx), type(uint256).max);\r\n        busd.approve(address(xGold), type(uint256).max);\r\n        busd.approve(address(xQore), type(uint256).max);\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    fallback() external payable {\r\n\r\n    }\r\n\r\n    function setFeeData(address payable _feeWallet, uint _busdFee) public {\r\n        require(msg.sender == contractOwner, \"onlyContractOwner\");\r\n        feeWallet = _feeWallet;\r\n        busdFee = _busdFee;\r\n    }\r\n\r\n    // function forsageRegistration(address referrerAddress) public payable {\r\n    //     uint fee = 0.003e18;\r\n    //     feeWallet.transfer(fee);\r\n\r\n    //     uint amountOut = forsage.BASIC_PRICE() * 2;\r\n\r\n    //     address[] memory path = new address[](2);\r\n    //     path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    //     path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    //     address to = address(this);\r\n    //     uint deadline = block.timestamp + 1000;\r\n\r\n    //     pancakeRouter.swapETHForExactTokens{value: msg.value - fee}(amountOut, path, to, deadline);\r\n\r\n    //     forsage.registrationFor(msg.sender, referrerAddress);\r\n\r\n    //     if(address(this).balance > 0) {\r\n    //         payable(msg.sender).transfer(address(this).balance);\r\n    //     }\r\n    // }\r\n\r\n\r\n    function forsageRegistration(address referrerAddress) public payable {\r\n        uint amountOut = forsage.BASIC_PRICE() * 2 + busdFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        forsage.registrationFor(msg.sender, referrerAddress);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function forsageRegistrationBUSD(address referrerAddress) public payable {\r\n        uint amountOut = forsage.BASIC_PRICE() * 2 + busdFee;\r\n\r\n        busd.transferFrom(msg.sender, address(this), amountOut);\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        forsage.registrationFor(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function forsageAndXGoldRegistration(address referrerAddress) public payable {\r\n        uint amountOut = forsage.BASIC_PRICE() * 2 + xGold.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        forsage.registrationFor(msg.sender, referrerAddress);\r\n        xGold.buyNewLevelFor(msg.sender, 1);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function forsageAndXxxRegistration(address referrerAddress) public payable {\r\n        uint amountOut = forsage.BASIC_PRICE() * 2 + xxx.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        forsage.registrationFor(msg.sender, referrerAddress);\r\n        xxx.buyNewLevelFor(msg.sender, 1);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function xxxActivation() public payable {\r\n        uint amountOut = busdFee + xxx.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        xxx.buyNewLevelFor(msg.sender, 1);\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function xxxActivationBusd() public payable {\r\n        uint amountOut = busdFee + xxx.levelPrice(1);\r\n        busd.transferFrom(msg.sender, address(this), amountOut);\r\n\r\n        xxx.buyNewLevelFor(msg.sender, 1);\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n    }\r\n\r\n    function xGoldActivation() public payable {\r\n        uint amountOut = busdFee + xGold.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        xGold.buyNewLevelFor(msg.sender, 1);\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function xGoldActivationBusd() public {\r\n        uint amountOut = busdFee + xGold.levelPrice(1);\r\n        busd.transferFrom(msg.sender, address(this), amountOut);\r\n\r\n        xGold.buyNewLevelFor(msg.sender, 1);\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n    }\r\n\r\n    function x3x4BuyLevelBatch(uint8 matrixType, uint8[] memory _levels) public payable {\r\n        uint amountOut = busdFee;\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            amountOut+= forsage.levelPrice(_levels[i]);\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            forsage.buyNewLevelFor(msg.sender, matrixType, _levels[i]);\r\n        }\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function x3x4BuyLevelBatchBusd(uint8 matrixType, uint8[] memory _levels) public {\r\n\r\n        uint amountOut = busdFee;\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            amountOut+= forsage.levelPrice(_levels[i]);\r\n        }\r\n\r\n        busd.transferFrom(msg.sender, address(this), amountOut);\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            forsage.buyNewLevelFor(msg.sender, matrixType, _levels[i]);\r\n        }\r\n    }\r\n\r\n    function xGoldBuyLevelBatch(uint8[] memory _levels) public payable {\r\n        uint amountOut = busdFee;\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            amountOut+= xGold.levelPrice(_levels[i]);\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            xGold.buyNewLevelFor(msg.sender, _levels[i]);\r\n        }\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function xGoldBuyLevelBatchBusd(uint8[] memory _levels) public {\r\n        uint amountOut = busdFee;\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            amountOut+= xGold.levelPrice(_levels[i]);\r\n        }\r\n\r\n        busd.transferFrom(msg.sender, address(this), amountOut);\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            xGold.buyNewLevelFor(msg.sender, _levels[i]);\r\n        }\r\n    }\r\n\r\n    function xxxBuyLevelBatch(uint8[] memory _levels) public payable {\r\n        uint amountOut = busdFee;\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            amountOut+= xxx.levelPrice(_levels[i]);\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value}(amountOut, path, to, deadline);\r\n\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            xxx.buyNewLevelFor(msg.sender, _levels[i]);\r\n        }\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function xxxBuyLevelBatchBusd(uint8[] memory _levels) public {\r\n        uint amountOut = busdFee;\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            amountOut+= xxx.levelPrice(_levels[i]);\r\n        }\r\n\r\n        busd.transferFrom(msg.sender, address(this), amountOut);\r\n\r\n        for(uint i = 0; i < _levels.length; i++) {\r\n            xxx.buyNewLevelFor(msg.sender, _levels[i]);\r\n        }\r\n\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n\r\n    //- Reg \u04453/\u04454 + xQore (BNB)\r\n    function forsageAndXQoreRegistration(address referrerAddress) public payable {        \r\n        uint amountOut = forsage.BASIC_PRICE() * 2;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        path[1] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        uint xQoreRegistrationPrice = xQore.levelPrice(1);\r\n\r\n        pancakeRouter.swapETHForExactTokens{value: msg.value - xQoreRegistrationPrice}(amountOut, path, to, deadline);\r\n\r\n        forsage.registrationFor(msg.sender, referrerAddress);\r\n        xQore.buyNewLevelFor{value: xQoreRegistrationPrice}(msg.sender, 1) ;\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    // - Reg \u04453/\u04454 + xQore (BUSD)\r\n    function forsageAndXQoreRegistrationBusd(address referrerAddress, uint busdRequest) public {\r\n        uint busdBalanceBefore = busd.balanceOf(address(this));\r\n        uint amountOut = xQore.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        busd.transferFrom(msg.sender, address(this), busdRequest);\r\n        pancakeRouter.swapTokensForExactETH(amountOut, busdRequest, path, to, deadline);\r\n        // IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).withdraw(amountOut);\r\n\r\n        forsage.registrationFor(msg.sender, referrerAddress);\r\n        xQore.buyNewLevelFor{value: amountOut}(msg.sender, 1);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n\r\n        uint busdBalanceAfter = busd.balanceOf(address(this));\r\n        if(busdBalanceAfter > busdBalanceBefore) {\r\n            busd.transfer(msg.sender, busdBalanceAfter - busdBalanceBefore);\r\n        }\r\n    }\r\n\r\n    // - Activate xQore\r\n    function xQoreRegistration() public payable {\r\n        uint fee = 0.003e18;\r\n        feeWallet.transfer(fee);\r\n\r\n        xQore.buyNewLevelFor{value: msg.value - fee}(msg.sender, 1);\r\n    }\r\n\r\n    //- Activate xQore \u0432 BUSD\r\n function xQoreRegistrationBusd(uint busdRequest) public {\r\n        uint busdBalanceBefore = busd.balanceOf(address(this));\r\n        uint amountOut = xQore.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        busd.transferFrom(msg.sender, address(this), busdRequest + busdFee);\r\n        if(busdFee > 0) {\r\n            busd.transfer(feeWallet, busdFee);\r\n        }\r\n\r\n        pancakeRouter.swapTokensForExactETH(amountOut, busdRequest, path, to, deadline);\r\n        // IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).withdraw(amountOut);\r\n\r\n        xQore.buyNewLevelFor{value: amountOut}(msg.sender, 1);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n\r\n        uint busdBalanceAfter = busd.balanceOf(address(this));\r\n        if(busdBalanceAfter > busdBalanceBefore) {\r\n            busd.transfer(msg.sender, busdBalanceAfter - busdBalanceBefore);\r\n        }\r\n    }\r\n\r\n    // - Upgrade xQore\r\n    function xQoreUpgrades(uint8 level) public payable {\r\n        uint fee = 0.003e18;\r\n        feeWallet.transfer(fee);\r\n        xQore.buyNewLevelFor{value: msg.value - fee}(msg.sender, level);\r\n    }\r\n\r\n    // - Upgrade xQore BUSD\r\n    function xQoreUpgradesBusd(uint8 level, uint busdRequest) public {\r\n        uint fee = 0.003e18;\r\n        uint busdBalanceBefore = busd.balanceOf(address(this));\r\n        uint amountOut = xQore.levelPrice(level);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        busd.transferFrom(msg.sender, address(this), busdRequest);\r\n        pancakeRouter.swapTokensForExactETH(amountOut + fee, busdRequest, path, to, deadline);\r\n        // IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).withdraw(amountOut + fee);\r\n\r\n        feeWallet.transfer(fee);\r\n\r\n        xQore.buyNewLevelFor{value: amountOut}(msg.sender, level);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n\r\n        uint busdBalanceAfter = busd.balanceOf(address(this));\r\n        if(busdBalanceAfter > busdBalanceBefore) {\r\n            busd.transfer(msg.sender, busdBalanceAfter - busdBalanceBefore);\r\n        }\r\n    }\r\n\r\n    // - Activate maxQore\r\n    function maxQoreRegistration() public payable {\r\n        uint fee = 0.003e18;\r\n        feeWallet.transfer(fee);\r\n        maxQore.buyNewLevelFor{value: msg.value - fee}(msg.sender, 1);\r\n    }\r\n\r\n    //- Activate maxQore \u0432 BUSD\r\n    function maxQoreRegistrationBusd(uint busdRequest) public {\r\n        uint fee = 0.003e18;\r\n        uint busdBalanceBefore = busd.balanceOf(address(this));\r\n        uint amountOut = maxQore.levelPrice(1);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        busd.transferFrom(msg.sender, address(this), busdRequest);\r\n        pancakeRouter.swapTokensForExactETH(amountOut + fee, busdRequest, path, to, deadline);\r\n        // IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).withdraw(amountOut);\r\n \r\n        feeWallet.transfer(fee);\r\n\r\n        maxQore.buyNewLevelFor{value: amountOut}(msg.sender, 1);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n\r\n        uint busdBalanceAfter = busd.balanceOf(address(this));\r\n        if(busdBalanceAfter > busdBalanceBefore) {\r\n            busd.transfer(msg.sender, busdBalanceAfter - busdBalanceBefore);\r\n        }\r\n    }\r\n\r\n    // - Upgrade maxQore\r\n    function maxQoreUpgrades(uint8 level) public payable {\r\n        uint fee = 0.003e18;\r\n        feeWallet.transfer(fee);\r\n        maxQore.buyNewLevelFor{value: msg.value - fee}(msg.sender, level);\r\n    }\r\n\r\n    // - Upgrade maxQore BUSD\r\n    function maxQoreUpgradesBusd(uint8 level, uint busdRequest) public {\r\n        uint fee = 0.003e18;\r\n        uint busdBalanceBefore = busd.balanceOf(address(this));\r\n        uint amountOut = maxQore.levelPrice(level);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n        address to = address(this);\r\n        uint deadline = block.timestamp + 1000;\r\n\r\n        busd.transferFrom(msg.sender, address(this), busdRequest);\r\n        pancakeRouter.swapTokensForExactETH(amountOut + fee, busdRequest, path, to, deadline);\r\n        // IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).withdraw(amountOut + fee);\r\n\r\n        feeWallet.transfer(fee);\r\n\r\n        maxQore.buyNewLevelFor{value: amountOut}(msg.sender, level);\r\n\r\n        if(address(this).balance > 0) {\r\n            payable(msg.sender).transfer(address(this).balance);\r\n        }\r\n\r\n        uint busdBalanceAfter = busd.balanceOf(address(this));\r\n        if(busdBalanceAfter > busdBalanceBefore) {\r\n            busd.transfer(msg.sender, busdBalanceAfter - busdBalanceBefore);\r\n        }\r\n    } \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_impl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"impl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RouterProxy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000024832636a5ba3f5d9339767b3134dc7da3568a59", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xfb4d7017e83772e77b01937e9977ab9f5f6e229b", "SwarmSource": "ipfs://dc2818b86b0ed8a2e771d74bb4744eac73e82c2593cbb4749eabebaa27919e82"}