{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n *\r\n *\r\n *\r\n *\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2513\u2513\u2503\u2503\u2503\u2501\u2501\u2501\u2513\u2503\u2503\u2501\u2501\u2501\u2513\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2513\u2513\u2503\u2503\u250f\u2513\r\n *\u2503\u250f\u2501\u2513\u2503\u250f\u2501\u2513\u2503\u2503\u2503\u2503\u2503\u2513\u250f\u2513\u2503\u2503\u2503\u250f\u2501\u2513\u2503\u252b\u2523\u251b\u250f\u2513\u250f\u2513\u2503\u2517\u2513\u250f\u251b\u2503\r\n *\u2503\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u251b\u2503\u2503\u2517\u251b\u2513\u2517\u251b\u250f\u251b\r\n *\u2503\u2503\u250f\u2501\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2513\u250f\u251b\u2503\r\n *\u2503\u2517\u253b\u2501\u2503\u2517\u2501\u251b\u2503\u2517\u2501\u251b\u2503\u251b\u2517\u251b\u2503\u2503\u2503\u2517\u2501\u251b\u2503\u252b\u2523\u2513\u250f\u251b\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\r\n *\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u251b\u2503\u2503\u2501\u2501\u2501\u251b\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\r\n *\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\r\n *\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\u2503\r\n *\r\n *\u2591\u2584\u2580\u2580\u2591\u2588\u2584\u2592\u2584\u2588\u2592\u2584\u2580\u2584\u2592\u2588\u2580\u2584\u2591\u2580\u2588\u2580\u2591\u2591\u2591\u2584\u2580\u2580\u2591\u2584\u2580\u2584\u2591\u2588\u2584\u2591\u2588\u2591\u2580\u2588\u2580\u2592\u2588\u2580\u2584\u2592\u2584\u2580\u2584\u2591\u2584\u2580\u2580\u2591\u2580\u2588\u2580\r\n *\u2592\u2584\u2588\u2588\u2591\u2588\u2592\u2580\u2592\u2588\u2591\u2588\u2580\u2588\u2591\u2588\u2580\u2584\u2591\u2592\u2588\u2592\u2592\u2591\u2591\u2580\u2584\u2584\u2591\u2580\u2584\u2580\u2591\u2588\u2592\u2580\u2588\u2591\u2592\u2588\u2592\u2591\u2588\u2580\u2584\u2591\u2588\u2580\u2588\u2591\u2580\u2584\u2584\u2591\u2592\u2588\u2592\r\n *\r\n *\r\n *  Gold City is an economic investment game built on a decentralized smart contract by Binance Smart Chain.\r\n *\r\n *  You build your city and make a profit.\r\n *\r\n *  Profit is accrued every second\r\n *\r\n *  Flexible interest rates\r\n *\r\n *  Works only with USDT BSC-BEP20\r\n *  \r\n */\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _msgValue() internal view virtual returns (uint256) {\r\n        return msg.value;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        if (_status == _ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\ncontract GoldCity is Ownable, ReentrancyGuard {\r\n    \r\n    address public usdt = 0xfAaE3E76cB3dC2404CA4BF3C865D277c5c0317Ff; //testUSDT\r\n    \r\n    IERC20 public token;\r\n\r\n    uint256 public INIT_MIN_DEPOSIT = 1;\r\n    uint256 public INIT_MAX_DEPOSIT = 50;\r\n    uint256 private INIT_MULTIPLIER = 1e18;\r\n    uint256[2] private AFFILIATE_PERCENTS_BRICKS = [60, 30]; //6% for first-level partner, 3% for second-level partner\r\n    uint256 private extraPercentageOfReinvest = 70; //7% - extra profit for reinvestment\r\n    uint256 private minPercentage = 150; //1.5% min percentage\r\n    uint256 private maxPercentage = 367; //3.67% max percentage\r\n    uint256 private maxAmount = 10000; //the max amount for the max percentage    \r\n    \r\n    address public defaultRef = 0xb2407ab82f2a5B80C55412688B66201B16A07E79;\r\n    uint256 public totalInvested;\r\n    uint256 public totalInvestors;\r\n    uint256 public totalBricks;\r\n\r\n    struct Referrals {\r\n        uint256 refsTotal;\r\n        uint256 refs1level; \r\n        uint256 refearnBricks;\r\n    }\r\n\r\n    struct User {\r\n        uint256 deposit;\r\n        uint256 reinvested;\r\n        uint256 earned;\r\n        uint256 withdrawn;\r\n        uint256 bucks;\r\n        uint256 bricks;\r\n        uint256 timestamp;        \r\n        uint256 percentage;\r\n        address partner;\r\n        Referrals referrals;\r\n    }\r\n\r\n    mapping(address => User) public user;\r\n    \r\n    constructor() {\r\n        token = IERC20(usdt);       \r\n    }\r\n\r\n    event ChangeUser(\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint256 amount\r\n    );\r\n\r\n    receive() external payable onlyOwner {}\r\n\r\n    function BuildCity(uint256 amount, address partner) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        require(\r\n            amount >= (INIT_MIN_DEPOSIT * INIT_MULTIPLIER),\r\n            \"Min deposit is 1 USDT\"\r\n        );\r\n        require(\r\n            (user[_msgSender()].deposit + amount) <=\r\n                (INIT_MAX_DEPOSIT * INIT_MULTIPLIER),\r\n            \"Max deposit limit has been exceeded\"\r\n        );\r\n        require(\r\n            partner != _msgSender(),\r\n            \"Cannot set your own address as partner\"\r\n        );\r\n\r\n        _updateprePayment(_msgSender());\r\n        totalInvested += amount;\r\n        \r\n        user[_msgSender()].deposit += amount;\r\n\r\n        if (user[_msgSender()].percentage == 0) {            \r\n            totalInvestors += 1;\r\n            address ref = user[partner].deposit == 0 ? defaultRef : partner;\r\n            user[ref].referrals.refs1level++;\r\n            user[ref].referrals.refsTotal++;\r\n            user[user[ref].partner].referrals.refsTotal++;\r\n            user[_msgSender()].partner = ref;\r\n            user[_msgSender()].percentage = 1736111111111110; //1.5%\r\n        }\r\n\r\n        _updatePercentage(_msgSender());\r\n        token.transferFrom(_msgSender(), address(this), amount);\r\n        emit ChangeUser(\r\n            _msgSender(),\r\n            user[_msgSender()].partner,\r\n            user[_msgSender()].deposit\r\n        );\r\n\r\n        // REF\r\n        _traverseTree(user[_msgSender()].partner, amount);\r\n\r\n        // OWNER FEE\r\n        uint256 feeBricks = (amount * 3) / 100;\r\n        user[owner()].bricks += feeBricks;\r\n        totalBricks += feeBricks;\r\n        uint256 feeUSDT = (amount * 5) / 100;\r\n        token.transfer(owner(), feeUSDT);\r\n    }\r\n\r\n    function ReinvestBricks(uint256 amount) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        _updateprePayment(_msgSender());\r\n        require(amount <= user[_msgSender()].bricks, \"Insufficient funds\");\r\n        user[_msgSender()].bricks -= amount;\r\n        user[_msgSender()].deposit += amount;\r\n        user[_msgSender()].reinvested += amount;\r\n        _updatePercentage(_msgSender());\r\n        emit ChangeUser(\r\n            _msgSender(),\r\n            user[_msgSender()].partner,\r\n            user[_msgSender()].deposit\r\n        );\r\n    }\r\n\r\n    function ReinvestBucks(uint256 amount) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        _updateprePayment(_msgSender());\r\n        require(amount <= user[_msgSender()].bucks, \"Insufficient funds\");\r\n        user[_msgSender()].bucks -= amount;\r\n        user[_msgSender()].deposit += (amount + amount*extraPercentageOfReinvest/1000); //extra profit for reinvestment\r\n        user[_msgSender()].reinvested += amount;\r\n        _updatePercentage(_msgSender());\r\n        emit ChangeUser(\r\n            _msgSender(),\r\n            user[_msgSender()].partner,\r\n            user[_msgSender()].deposit\r\n        );\r\n    }\r\n\r\n    function Withdraw(uint256 amount) external nonReentrant {\r\n        require(\r\n            _msgSender() == tx.origin,\r\n            \"Function can only be called by a user account\"\r\n        );\r\n        require(amount > 0, \"Min withdrawal must be greater then 0\");\r\n        _updateprePayment(_msgSender());\r\n        require(amount <= user[_msgSender()].bucks, \"Insufficient funds\");\r\n        user[_msgSender()].bucks -= amount;\r\n        user[_msgSender()].withdrawn += amount;\r\n        token.transfer(_msgSender(), amount);\r\n    }\r\n\r\n    function checkReward(address account) public view returns (uint256) {\r\n        uint256 RewardTime = block.timestamp - user[account].timestamp;\r\n        RewardTime = (RewardTime >= 86400) ? 86400 : RewardTime;\r\n        return ((((user[account].deposit / 10000) * user[account].percentage) /\r\n            INIT_MULTIPLIER) * RewardTime);\r\n    }\r\n\r\n    function _updateprePayment(address account) internal {\r\n        uint256 pending = checkReward(_msgSender());\r\n        user[account].timestamp = block.timestamp;\r\n        user[account].bucks += pending;\r\n        user[account].earned += pending;\r\n    }\r\n\r\n    function isValidAddress(address _address) internal pure returns (bool) {\r\n        return (_address != address(0));\r\n    }\r\n\r\n    function _traverseTree(address account, uint256 value) internal {\r\n        \r\n        if (value != 0 && isValidAddress(account)) {\r\n            for (uint8 i; i < 2; i++) {\r\n                uint256 feeBricks = ((value * AFFILIATE_PERCENTS_BRICKS[i]) /\r\n                    1000);\r\n                totalBricks += feeBricks;\r\n                user[account].bricks += feeBricks;\r\n                user[account].referrals.refearnBricks += feeBricks;\r\n                account = user[account].partner;\r\n            }\r\n        }\r\n    }    \r\n\r\n    function _updatePercentage(address account) internal {\r\n        uint256 availablePercent = getPercentage(user[account].deposit / INIT_MULTIPLIER);\r\n        if (user[account].percentage != availablePercent) {\r\n            user[account].percentage = availablePercent;\r\n        }\r\n    }\r\n\r\n    function changeMaxDeposit(uint256 amount) external onlyOwner {\r\n        require(amount > 50, \"The amount must be more than 50\");\r\n        INIT_MAX_DEPOSIT = amount;\r\n    }\r\n    \r\n    function  getPercentage(uint256 amount) public view returns (uint256) {                \r\n        if (amount >= maxAmount)\r\n            return maxPercentage*INIT_MULTIPLIER/86400;\r\n        else \r\n            return (amount/100+minPercentage+amount/1000*2)*INIT_MULTIPLIER/86400;\r\n        \r\n    }  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"BuildCity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MAX_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestBricks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestBucks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBricks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bucks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bricks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs1level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnBricks\",\"type\":\"uint256\"}],\"internalType\":\"struct GoldCity.Referrals\",\"name\":\"referrals\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoldCity", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a6c9052e2ea00885193a046d0d22b2a90012e506f22b7add9b178ff71b6ca4f0"}