{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-02-28\r\n*/\r\n\r\npragma solidity ^0.5.10;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      if (a == 0) {\r\n        return 0;\r\n      }\r\n      c = a * b;\r\n      assert(c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n      c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract TOKEN {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n      owner = address(0xF4210B747e44592035da0126f70C48Cb04634Eac);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n}\r\n\r\ncontract ToadFarm is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 ACTIVATION_TIME = 1614600000;\r\n\r\n    modifier isActivated {\r\n        require(now >= ACTIVATION_TIME);\r\n        _;\r\n    }\r\n\r\n    modifier hasDripped {\r\n        if (dividendPool > 0) {\r\n          uint256 secondsPassed = SafeMath.sub(now, lastDripTime);\r\n          uint256 dividends = secondsPassed.mul(dividendPool).div(dailyRate);\r\n\r\n          if (dividends > dividendPool) {\r\n            dividends = dividendPool;\r\n          }\r\n\r\n          profitPerShare = SafeMath.add(profitPerShare, (dividends * divMagnitude) / tokenSupply);\r\n          dividendPool = dividendPool.sub(dividends);\r\n          lastDripTime = now;\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyTokenHolders {\r\n        require(myTokens() > 0);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDivis {\r\n        require(myDividends() > 0);\r\n        _;\r\n    }\r\n\r\n    event onDonation(\r\n        address indexed customerAddress,\r\n        uint256 tokens\r\n    );\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n    );\r\n\r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingTokens,\r\n        uint256 tokensMinted,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 tokensEarned,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event onRoll(\r\n        address indexed customerAddress,\r\n        uint256 tokensRolled,\r\n        uint256 tokensMinted\r\n    );\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 tokensWithdrawn\r\n    );\r\n\r\n    string public name = \"Toad Farm\";\r\n    string public symbol = \"TOADF\";\r\n    uint8 constant public decimals = 18;\r\n    uint256 constant private divMagnitude = 2 ** 64;\r\n\r\n    uint32 constant private dailyRate = 8640000; //1% a day\r\n\r\n    mapping(address => uint256) private tokenBalanceLedger;\r\n    mapping(address => int256) private payoutsTo;\r\n\r\n    struct Stats {\r\n       uint256 deposits;\r\n       uint256 withdrawals;\r\n    }\r\n\r\n    mapping(address => Stats) public playerStats;\r\n\r\n    uint256 public dividendPool = 0;\r\n    uint256 public lastDripTime = ACTIVATION_TIME;\r\n    uint256 public totalPlayer = 0;\r\n    uint256 public totalDonation = 0;\r\n\r\n    uint256 private tokenSupply = 0;\r\n    uint256 private profitPerShare = 0;\r\n\r\n    address public burnAddress;\r\n    TOKEN bep20;\r\n\r\n    constructor() public {\r\n        burnAddress = address(0xdEaD); //burning address\r\n        bep20 = TOKEN(address(0x463E737D8F740395ABf44f7aac2D9531D8D539E9)); //toad\r\n    }\r\n\r\n    function() payable external {\r\n        revert();\r\n    }\r\n    \r\n    function checkAndTransferToad(uint256 _amount) private {\r\n        require(bep20.transferFrom(msg.sender, address(this), _amount) == true, \"transfer must succeed\");\r\n    }\r\n    \r\n    function donateToPool(uint256 _amount) public {\r\n        require(_amount > 0 && tokenSupply > 0, \"must be a positive value and have supply\");\r\n        checkAndTransferToad(_amount);\r\n        totalDonation += _amount;\r\n        dividendPool = dividendPool.add(_amount);\r\n        emit onDonation(msg.sender, _amount);\r\n    }\r\n\r\n    function roll() hasDripped onlyDivis public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends();\r\n        payoutsTo[_customerAddress] +=  (int256) (_dividends * divMagnitude);\r\n        uint256 _tokens = purchaseTokens(_customerAddress, _dividends);\r\n        emit onRoll(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function withdraw() hasDripped onlyDivis public {\r\n        address payable _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends();\r\n        payoutsTo[_customerAddress] += (int256) (_dividends * divMagnitude);\r\n        bep20.transfer(_customerAddress, _dividends);\r\n        playerStats[_customerAddress].withdrawals += _dividends;\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n    \r\n    function deposit(uint256 _amount) hasDripped public returns (uint256) {\r\n        checkAndTransferToad(_amount);\r\n        return purchaseTokens(msg.sender, _amount);\r\n    }\r\n\r\n    function _purchaseTokens(address _customerAddress, uint256 _incomingTokens) private returns(uint256) {\r\n        uint256 _amountOfTokens = _incomingTokens;\r\n\r\n        require(_amountOfTokens > 0 && _amountOfTokens.add(tokenSupply) > tokenSupply);\r\n\r\n        tokenSupply = tokenSupply.add(_amountOfTokens);\r\n        tokenBalanceLedger[_customerAddress] =  tokenBalanceLedger[_customerAddress].add(_amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare * _amountOfTokens);\r\n        payoutsTo[_customerAddress] += _updatedPayouts;\r\n\r\n        emit Transfer(address(0), _customerAddress, _amountOfTokens);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function purchaseTokens(address _customerAddress, uint256 _incomingTokens) isActivated private returns (uint256) {\r\n        if (playerStats[_customerAddress].deposits == 0) {\r\n            totalPlayer++;\r\n        }\r\n\r\n        playerStats[_customerAddress].deposits += _incomingTokens;\r\n\r\n        require(_incomingTokens > 0);\r\n\r\n        uint256 _amountOfTokens = _purchaseTokens(_customerAddress, _incomingTokens);\r\n\r\n        emit onTokenPurchase(_customerAddress, _incomingTokens, _amountOfTokens, now);\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) isActivated hasDripped onlyTokenHolders public {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens > 0 && _amountOfTokens <= tokenBalanceLedger[_customerAddress]);\r\n\r\n        tokenSupply = tokenSupply.sub(_amountOfTokens);\r\n        tokenBalanceLedger[_customerAddress] = tokenBalanceLedger[_customerAddress].sub(_amountOfTokens);\r\n\r\n        int256 _updatedPayouts = (int256) (profitPerShare * _amountOfTokens);\r\n        payoutsTo[_customerAddress] -= _updatedPayouts;\r\n        \r\n        bep20.transfer(_customerAddress, _amountOfTokens);\r\n        \r\n        emit Transfer(_customerAddress, address(0), _amountOfTokens);\r\n        emit onTokenSell(_customerAddress, _amountOfTokens, _amountOfTokens, now);\r\n    }\r\n\r\n    function setName(string memory _name) onlyOwner public\r\n    {\r\n        name = _name;\r\n    }\r\n\r\n    function setSymbol(string memory _symbol) onlyOwner public\r\n    {\r\n        symbol = _symbol;\r\n    }\r\n\r\n    function totalTokenBalance() public view returns (uint256) {\r\n        return bep20.balanceOf(address(this));\r\n    }\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return tokenSupply;\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myEstimateDividends(bool _dayEstimate) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return estimateDividendsOf(_customerAddress, _dayEstimate) ;\r\n    }\r\n\r\n    function estimateDividendsOf(address _customerAddress, bool _dayEstimate) public view returns (uint256) {\r\n        uint256 _profitPerShare = profitPerShare;\r\n\r\n        if (dividendPool > 0) {\r\n          uint256 secondsPassed = 0;\r\n\r\n          if (_dayEstimate == true){\r\n            secondsPassed = 86400;\r\n          } else {\r\n            secondsPassed = SafeMath.sub(now, lastDripTime);\r\n          }\r\n\r\n          uint256 dividends = secondsPassed.mul(dividendPool).div(dailyRate);\r\n\r\n          if (dividends > dividendPool) {\r\n            dividends = dividendPool;\r\n          }\r\n\r\n          _profitPerShare = SafeMath.add(_profitPerShare, (dividends * divMagnitude) / tokenSupply);\r\n        }\r\n\r\n        return (uint256) ((int256) (_profitPerShare * tokenBalanceLedger[_customerAddress]) - payoutsTo[_customerAddress]) / divMagnitude;\r\n    }\r\n\r\n    function myDividends() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare * tokenBalanceLedger[_customerAddress]) - payoutsTo[_customerAddress]) / divMagnitude;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger[_customerAddress];\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"onDonation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRolled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"}],\"name\":\"onRoll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensWithdrawn\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dividendPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donateToPool\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dayEstimate\",\"type\":\"bool\"}],\"name\":\"estimateDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastDripTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dayEstimate\",\"type\":\"bool\"}],\"name\":\"myEstimateDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawals\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"roll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ToadFarm", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://e4d0f3344a7b3c5e234326504b135c05c62bf8b8b618b5a3abb34d5f5adfbdfe"}