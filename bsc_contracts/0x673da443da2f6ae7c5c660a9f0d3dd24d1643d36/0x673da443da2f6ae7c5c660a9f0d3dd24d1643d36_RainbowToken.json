{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//\r\n// Copyright of The $RAINBOW Team\r\n//\r\n//  .______          ___       __  .__   __. .______     ______   ____    __    ____ \r\n//  |   _  \\        /   \\     |  | |  \\ |  | |   _  \\   /  __  \\  \\   \\  /  \\  /   / \r\n//  |  |_)  |      /  ^  \\    |  | |   \\|  | |  |_)  | |  |  |  |  \\   \\/    \\/   /  \r\n//  |      /      /  /_\\  \\   |  | |  . `  | |   _  <  |  |  |  |   \\            /   \r\n//  |  |\\  \\----./  _____  \\  |  | |  |\\   | |  |_)  | |  `--'  |    \\    /\\    /    \r\n//  | _| `._____/__/     \\__\\ |__| |__| \\__| |______/   \\______/      \\__/  \\__/   \r\n//\r\n// There is a pot of gold at the end of every rainbow\r\n// \r\n// $RAINBOW has 7% tax split across 7 protocols\r\n// (Sells have doubled tax)\r\n// \r\n// Red     1%: Burn\r\n// Orange  1%: Buyback\r\n// Yellow  1%: Reflected\r\n// Green   1%: Charity\r\n// Blue    1%: Liquidity\r\n// Indigo  1%: Marketing\r\n// Violet  1%: Lottery\r\n                                                                                 \r\npragma solidity ^0.8.4;\r\n\r\n// IERC20 interface taken from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol)\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Context abstract contract taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SafeMath library taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Address library taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// Ownable abstract contract taken from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// IUniswapV2Factory interface taken from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// IUniswapV2Pair interface taken from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// IUniswapV2Router01 interface taken from: https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// IUniswapV2Router02 interface taken from: https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev The official RainbowToken smart contract\r\n */\r\ncontract RainbowToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    // General Info\r\n    string private _name     = \"RainbowToken\";\r\n    string private _symbol   = \"RAINBOW\";\r\n    uint8  private _decimals = 9;\r\n    \r\n    // Liquidity Settings\r\n    IUniswapV2Router02 public _pancakeswapV2Router; // The address of the PancakeSwap V2 Router\r\n    address public _pancakeswapV2LiquidityPair;     // The address of the PancakeSwap V2 liquidity pairing for RAINBOW/WBNB\r\n    \r\n    bool currentlySwapping;\r\n\r\n    modifier lockSwapping {\r\n        currentlySwapping = true;\r\n        _;\r\n        currentlySwapping = false;\r\n    }\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 bnbReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    // Addresses\r\n    address payable public _marketingAddress = payable(0x2BA4B1CCa6E240C0e6d938F2C647019179454559); // Marketing address used to pay for marketing\r\n    address payable public _burnAddress      = payable(0x000000000000000000000000000000000000dEaD); // Burn address used to burn a portion of tokens\r\n    \r\n    // Balances\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // Exclusions\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n   \r\n    // Supply\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1 * 10**15 * 10**9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _totalReflections; // Total reflections\r\n    \r\n    // Token Tax Settings\r\n    uint256 public  _taxFee           = 7;  // 7% tax \r\n    uint256 public  _sellTaxFee       = 14; // 14% tax \r\n    uint256 public  _whaleSellTaxFee  = 21; // 21% tax \r\n    uint256 private _previousTaxFee;\r\n    \r\n    // Token Limits\r\n    uint256 public _maxTxAmount        = 1 * 10**15 * 10**9;  // 1 quadrillion\r\n    uint256 public _tokenSwapThreshold = 100 * 10**9 * 10**9; // 100 billion\r\n    \r\n    // Timer Constants \r\n    uint private constant DAY = 86400; // How many seconds in a day\r\n    \r\n    // Anti-Whale Settings \r\n    uint256 public _whaleSellThreshold = 500 * 10**9 * 10**9; // 500 billion\r\n    uint    public _whaleSellTimer     = DAY;                 // 24 hours\r\n    mapping (address => uint256) private _amountSold;\r\n    mapping (address => uint) private _timeSinceFirstSell;\r\n    \r\n    // BUYBACK \r\n    bool    public _enableBuyback        = false;             // Disabled on deployment\r\n    uint256 public _buybackBNBThreshold  = 1 * 10**18;        // 1 BNB will be required to be inside the contract before a buyback will be performed\r\n    uint256 public _buybackUpperLimit    = 1 * 10**9 * 10**9; // 1 billion $RAINBOW will be used to buy at maximum in any one trade\r\n    uint256 public _buybackBNBPercentage = 1;                 // 1% of BNB is used to buyback tokens\r\n    \r\n    // LIQUIDITY\r\n    bool public _enableLiquidity = false; // Controls whether the contract will swap tokens\r\n    \r\n    // LOTTERY\r\n    bool    public  _enableLottery       = false;              // Disabled on deployment\r\n    uint256 private _lotteryPool         = 0;                  // How many reflections are in the lottery pool\r\n    uint    public  _lotteryChance       = 25;                 // 1% chance to win on a buy\r\n    uint256 public  _lotteryThreshold    = 10 * 10**6 * 10**9; // 10 million tokens required to be in the pool before lottery can be triggered\r\n    uint256 public  _lotteryMinimumSpend = 10 * 10**6 * 10**9; // 10 million tokens required to buy before before lottery can be triggered\r\n    address public  _previousWinner;\r\n    uint256 public  _previousWonAmount;\r\n    uint    public  _previousWinTime;\r\n    uint    public  _lastRoll;\r\n    uint256 private _nonce;\r\n    \r\n    event LotteryAward(\r\n        address winner,\r\n        uint256 amount,\r\n        uint time\r\n    );\r\n    \r\n    constructor () {\r\n        // Mint the total reflection balance to the deployer of this contract\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        // Exclude the owner and the contract from paying fees\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        \r\n        // Set up the pancakeswap V2 router\r\n        IUniswapV2Router02 pancakeswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _pancakeswapV2LiquidityPair = IUniswapV2Factory(pancakeswapV2Router.factory())\r\n            .createPair(address(this), pancakeswapV2Router.WETH());\r\n        _pancakeswapV2Router = pancakeswapV2Router;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n    \r\n    /**\r\n     * @notice Required to recieve BNB from PancakeSwap V2 Router when swaping\r\n     */\r\n    receive() external payable {}\r\n    \r\n    /**\r\n     * @notice Withdraws BNB from the contract\r\n     */\r\n    function withdrawBNB(uint256 amount) public onlyOwner() {\r\n        if(amount == 0) payable(owner()).transfer(address(this).balance);\r\n        else payable(owner()).transfer(amount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Withdraws non-RAINBOW tokens that are stuck as to not interfere with the liquidity\r\n     */\r\n    function withdrawForeignToken(address token) public onlyOwner() {\r\n        require(address(this) != address(token), \"Cannot withdraw native token\");\r\n        IERC20(address(token)).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n    \r\n    /**\r\n     * @notice Transfers BNB to an address\r\n     */\r\n    function transferBNBToAddress(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows the contract to change the router, in the instance when PancakeSwap upgrades making the contract future proof\r\n     */\r\n    function setRouterAddress(address router) public onlyOwner() {\r\n        // Connect to the new router\r\n        IUniswapV2Router02 newPancakeSwapRouter = IUniswapV2Router02(router);\r\n        \r\n        // Grab an existing pair, or create one if it doesnt exist\r\n        address newPair = IUniswapV2Factory(newPancakeSwapRouter.factory()).getPair(address(this), newPancakeSwapRouter.WETH());\r\n        if(newPair == address(0)){\r\n            newPair = IUniswapV2Factory(newPancakeSwapRouter.factory()).createPair(address(this), newPancakeSwapRouter.WETH());\r\n        }\r\n        _pancakeswapV2LiquidityPair = newPair;\r\n\r\n        _pancakeswapV2Router = newPancakeSwapRouter;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function getTotalReflections() external view returns (uint256) {\r\n        return _totalReflections;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) external view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n    \r\n    function isExcludedFromReflection(address account) external view returns(bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    \r\n    function getLotteryTokens() public view returns (uint256) {\r\n        return tokenFromReflection(_lotteryPool);\r\n    }\r\n    \r\n    function buybackUpperLimitAmount() external view returns (uint256) {\r\n        return _buybackUpperLimit;\r\n    }\r\n    \r\n    function amountSold(address account) external view returns (uint256) {\r\n        return _amountSold[account];\r\n    }\r\n    \r\n    function getTimeSinceFirstSell(address account) external view returns (uint) {\r\n        return _timeSinceFirstSell[account];\r\n    }\r\n    \r\n    function excludeFromFee(address account) external onlyOwner() {\r\n        _isExcludedFromFees[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner() {\r\n        _isExcludedFromFees[account] = false;\r\n    }\r\n    \r\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n        _taxFee = taxFee;\r\n    }\r\n    \r\n    function setSellTaxFeePerecent(uint256 taxFee) external onlyOwner() {\r\n        _sellTaxFee = taxFee;\r\n    }\r\n    \r\n    function setWhaleSellTaxFeePerecent(uint256 taxFee) external onlyOwner() {\r\n        _whaleSellTaxFee = taxFee;\r\n    }\r\n    \r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        _maxTxAmount = maxTxAmount;\r\n    }\r\n    \r\n    function setTokenSwapThreshold(uint256 tokenSwapThreshold) external onlyOwner() {\r\n        _tokenSwapThreshold = tokenSwapThreshold;\r\n    }\r\n    \r\n    function setMarketingAddress(address marketingAddress) external onlyOwner() {\r\n        _marketingAddress = payable(marketingAddress);\r\n    }\r\n    \r\n    function setBuyback(bool b) external onlyOwner() {\r\n        _enableBuyback = b;\r\n    }\r\n    \r\n    function setBuybackBNBThreshold(uint256 bnbAmount) external onlyOwner() {\r\n        _buybackBNBThreshold = bnbAmount;\r\n    }\r\n    \r\n    function setBuybackUpperLimit(uint256 buybackLimit) external onlyOwner() {\r\n        _buybackUpperLimit = buybackLimit;\r\n    }\r\n    \r\n    function setBuybackBNBPercentage(uint256 percentage) external onlyOwner() {\r\n        _buybackBNBPercentage = percentage;\r\n    }\r\n\r\n    function setLiquidity(bool b) external onlyOwner() {\r\n        _enableLiquidity = b;\r\n    }\r\n\r\n    function setWhaleSellThreshold(uint256 amount) external onlyOwner() {\r\n        _whaleSellThreshold = amount;\r\n    }\r\n    \r\n    function setWhaleSellTimer(uint time) external onlyOwner() {\r\n        _whaleSellTimer = time;\r\n    }\r\n    \r\n    function setLottery(bool b) external onlyOwner() {\r\n        _enableLottery = b;\r\n    }\r\n    \r\n    function setLotteryChance(uint chance) external onlyOwner() {\r\n        _lotteryChance = chance;\r\n    }\r\n    \r\n    function setLotteryThreshold(uint256 threshold) external onlyOwner() {\r\n        _lotteryThreshold = threshold;\r\n    }\r\n    \r\n    function setLotteryMinimumSpend(uint256 minimumSpend) external onlyOwner() {\r\n        _lotteryMinimumSpend = minimumSpend;\r\n    }\r\n  \r\n    /**\r\n     * @notice Converts a token value to a reflection value\r\n     */\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Converts a reflection value to a token value\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n    \r\n    /**\r\n     * @notice Generates a random number between 1 and 1000\r\n     */\r\n    function random() private returns (uint) {\r\n        uint r = uint(uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _nonce))) % 1000);\r\n        r = r.add(1);\r\n        _nonce++;\r\n        return r;\r\n    }\r\n    \r\n    /**\r\n     * @notice Removes all fees and stores their previous values to be later restored\r\n     */\r\n    function removeAllFees() private {\r\n        if(_taxFee == 0) return;\r\n        \r\n        _previousTaxFee = _taxFee;\r\n        _taxFee = 0;\r\n    }\r\n    \r\n    /**\r\n     * @notice Restores the fees\r\n     */\r\n    function restoreAllFees() private {\r\n        _taxFee = _previousTaxFee;\r\n    }\r\n    \r\n    /**\r\n     * @notice Calculates whether the lottery is hit using a random number\r\n     */\r\n    function calculateLotteryReward() private returns (uint256) {\r\n        // If the transfer is a buy, and the lottery pool is above a certain token threshold, start to award it\r\n        uint256 reward = 0;\r\n        uint256 lotteryTokens = getLotteryTokens();\r\n        if (lotteryTokens >= _lotteryThreshold) {\r\n            // Generates a random number between 1 and 1000\r\n            _lastRoll = random(); \r\n            if(_lastRoll <= _lotteryChance) {\r\n                reward = lotteryTokens;\r\n            }\r\n        } \r\n        return reward;\r\n    }\r\n    \r\n    /**\r\n     * @notice Collects all the necessary transfer values\r\n     */\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates transfer token values\r\n     */\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(_taxFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates transfer reflection values\r\n     */\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates the rate of reflections to tokens\r\n     */\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current supply values\r\n     */\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n    \r\n    /**\r\n     * @notice Excludes an address from receiving reflections\r\n     */\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    /**\r\n     * @notice Includes an address back into the reflection system\r\n     */\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @notice Transfers a winner an extra amount of tokens\r\n     */\r\n    function _lotteryTransfer(address winner, uint256 tAmount) private {\r\n\t\tif (_isExcluded[winner]) {\r\n            _tOwned[winner] = _tOwned[winner].add(tAmount);\r\n\t\t}\r\n\t\t_rOwned[winner] = _rOwned[winner].add(_lotteryPool); \r\n        _lotteryPool = 0;\r\n        _previousWinner = winner;\r\n        _previousWonAmount = tAmount;\r\n        _previousWinTime = block.timestamp;\r\n        emit LotteryAward(winner, tAmount, block.timestamp);\r\n        emit Transfer(address(this), winner, tAmount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Handles the before and after of a token transfer, such as taking fees and firing off a swap and liquify event\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        \r\n        // Only the owner of this contract can bypass the max transfer amount\r\n        if(from != owner() && to != owner()) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n        \r\n        // LOTTERY MECHANISM\r\n        // If the transaction is a buy, then we roll to see if we award any extra tokens\r\n        if(_enableLottery && amount >= _lotteryMinimumSpend && from == _pancakeswapV2LiquidityPair) {\r\n            uint256 lotteryReward = calculateLotteryReward();\r\n            if (lotteryReward > 0) {\r\n                _lotteryTransfer(to, lotteryReward);\r\n            }\r\n        }\r\n         \r\n        // Gets the contracts RAINBOW balance for buybacks, charity, liquidity and marketing\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if(tokenBalance >= _maxTxAmount)\r\n        {\r\n            tokenBalance = _maxTxAmount;\r\n        }\r\n        \r\n        // AUTO-LIQUIDITY MECHANISM\r\n        // Check that the contract balance has reached the threshold required to execute a swap and liquify event\r\n        // Do not execute the swap and liquify if there is already a swap happening\r\n        // Do not allow the adding of liquidity if the sender is the PancakeSwap V2 liquidity pool\r\n        if (_enableLiquidity && tokenBalance >= _tokenSwapThreshold && !currentlySwapping && from != _pancakeswapV2LiquidityPair) {\r\n            tokenBalance = _tokenSwapThreshold;\r\n            swapAndLiquify(tokenBalance);\r\n        }\r\n                \r\n        // BUYBACK MECHANISM\r\n        // If buyback is enabled, and someone is sending tokens to the liquidity pool (i.e. a sell), then we buy back tokens.\r\n        // Do not execute the buyback if there is already a swap happening\r\n        if (_enableBuyback && !currentlySwapping && to == _pancakeswapV2LiquidityPair) {\r\n\t        uint256 balance = address(this).balance;\r\n\t        \r\n\t        // Only execute a buyback when the contract has more than 1.0 BNB\r\n            if (balance > _buybackBNBThreshold) {\r\n                if (balance >= _buybackUpperLimit) {\r\n                    balance = _buybackUpperLimit;\r\n                }\r\n                \r\n                // Buy back tokens with 1% of the BNB inside the contract\r\n                buyBackTokens(balance.mul(_buybackBNBPercentage).div(100));\r\n            }\r\n        }\r\n        \r\n        // If any account belongs to _isExcludedFromFee account then remove the fee\r\n        bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n\r\n        // ANTI-WHALE TAX MECHANISM\r\n        // If we are taking fees and sending tokens to the liquidity pool (i.e. a sell), check for anti-whale tax\r\n        if (takeFee && to == _pancakeswapV2LiquidityPair) {\r\n            \r\n            // We will assume that the normal sell tax rate will apply\r\n            uint256 fee = _sellTaxFee;\r\n            \r\n            // Get the time difference in seconds between now and the first sell\r\n            uint delta = block.timestamp.sub(_timeSinceFirstSell[from]);\r\n            \r\n            // Get the new total to see if it has spilled over the threshold\r\n            uint256 newTotal = _amountSold[from].add(amount);\r\n            \r\n            // If a known wallet started their selling within the whale sell timer window, check if they're trying to spill over the threshold\r\n            // If they are then increase the tax amount\r\n            if (delta > 0 && delta < _whaleSellTimer && _timeSinceFirstSell[from] != 0) {\r\n                if (newTotal > _whaleSellThreshold) {\r\n                    fee = _whaleSellTaxFee; \r\n                }\r\n                _amountSold[from] = newTotal;\r\n            } else if (_timeSinceFirstSell[from] == 0 && newTotal > _whaleSellThreshold) {\r\n                fee = _whaleSellTaxFee;\r\n                _amountSold[from] = newTotal;\r\n            } else {\r\n                // Otherwise we reset their sold amount and timer\r\n                _timeSinceFirstSell[from] = block.timestamp;\r\n                _amountSold[from] = amount;\r\n            }\r\n                \r\n            // Set the tax rate to the sell tax rate, if the whale sell tax rate applies then we set that\r\n            _previousTaxFee = _taxFee;\r\n            _taxFee = fee;\r\n        }\r\n        \r\n        // Remove fees completely from the transfer if either wallet are excluded\r\n        if (!takeFee) {\r\n            removeAllFees();\r\n        }\r\n        \r\n        // Transfer the token amount from sender to receipient.\r\n        _tokenTransfer(from, to, amount);\r\n        \r\n        // If we removed the fees for this transaction, then restore them for future transactions\r\n        if (!takeFee) {\r\n            restoreAllFees();\r\n        }\r\n        \r\n        // If this transaction was a sell, and we took a fee, restore the fee amount back to the original buy amount\r\n        if (takeFee && to == _pancakeswapV2LiquidityPair) {\r\n            _taxFee = _previousTaxFee;\r\n        }\r\n        \r\n    }\r\n    \r\n    /**\r\n     * @notice Handles the actual token transfer\r\n     */\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        // Calculate the values required to execute a transfer\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount,) = _getRValues(tAmount, tFee, _getRate());\r\n        \r\n        // Transfer from sender to recipient\r\n\t\tif (_isExcluded[sender]) {\r\n\t\t    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t}\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t\r\n\t\tif (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t}\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\t\t\r\n\t\t// This is always 1% of a transaction worth of tokens\r\n\t\tif (tFee > 0) {\r\n\t    \tuint256 tPortion = tFee.div(_taxFee);\r\n\r\n            // Burn some of the taxed tokens \r\n            _burnTokens(tPortion);\r\n            \r\n            // Reflect some of the taxed tokens \r\n    \t\t_reflectTokens(tPortion);\r\n            \r\n            // Take the rest of the taxed tokens for the other functions\r\n            _takeTokens(tFee.sub(tPortion).sub(tPortion).sub(tPortion), tPortion);\r\n\t\t}\r\n            \r\n        // Emit an event \r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    /**\r\n     * @notice Burns RAINBOW tokens straight to the burn address\r\n     */\r\n    function _burnTokens(uint256 tFee) private {\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rOwned[_burnAddress] = _rOwned[_burnAddress].add(rFee);\r\n        if(_isExcluded[_burnAddress]) {\r\n            _tOwned[_burnAddress] = _tOwned[_burnAddress].add(tFee);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Increases the rate of how many reflections each token is worth\r\n     */\r\n    function _reflectTokens(uint256 tFee) private {\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _totalReflections = _totalReflections.add(tFee);\r\n    }\r\n    \r\n    /**\r\n     * @notice The contract takes a portion of tokens from taxed transactions\r\n     */\r\n    function _takeTokens(uint256 tTakeAmount, uint256 tLottery) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTakeAmount = tTakeAmount.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTakeAmount);\r\n        if(_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tTakeAmount);\r\n        }\r\n        \r\n        // Add a portion to the lottery pool to be rewarded to a lucky buyer\r\n        uint256 rLottery = tLottery.mul(currentRate);\r\n        _lotteryPool = _lotteryPool.add(rLottery);\r\n    }\r\n    \r\n    /**\r\n     * @notice Buys tokens using the contract balance\r\n     */\r\n    function buyBackTokens(uint256 amount) private lockSwapping {\r\n    \tif (amount > 0) {\r\n    \t    swapBNBForTokens(amount);\r\n\t    }\r\n    }\r\n    \r\n    /**\r\n     * @notice Generates BNB by selling tokens and pairs some of the received BNB with tokens to add and grow the liquidity pool\r\n     */\r\n    function swapAndLiquify(uint256 tokenAmount) private lockSwapping {\r\n        // Split the contract balance into the swap portion and the liquidity portion\r\n        uint256 eigth      = tokenAmount.div(8);     // 1/8 of the tokens, used for liquidity\r\n        uint256 swapAmount = tokenAmount.sub(eigth); // 7/8 of the tokens, used to swap for BNB\r\n\r\n        // Capture the contract's current BNB balance so that we know exactly the amount of BNB that the\r\n        // swap creates. This way the liquidity event wont include any BNB that has been collected by other means.\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // Swap 7/8ths of RAINBOW tokens for BNB\r\n        swapTokensForBNB(swapAmount); \r\n\r\n        // How much BNB did we just receive\r\n        uint256 receivedBNB = address(this).balance.sub(initialBalance);\r\n        \r\n        // A seventh of the received BNB will be paired with the eigth of tokens left behind\r\n        uint256 liquidityBNB = receivedBNB.div(7);\r\n        \r\n        // Add liquidity via the PancakeSwap V2 Router\r\n        addLiquidity(eigth, liquidityBNB);\r\n        \r\n        // We now have 6/7ths left of BNB (converted from RAINBOW)\r\n        // We want to send 4/7ths to the marketing wallet and keep 2/7ths within the contract for buyback\r\n        uint256 marketingBNB = receivedBNB.div(7).mul(4);\r\n        \r\n        // Send the remaining BNB to the marketing wallet\r\n        transferBNBToAddress(_marketingAddress, marketingBNB);\r\n        \r\n        emit SwapAndLiquify(swapAmount, liquidityBNB, eigth);\r\n    }\r\n    \r\n    /**\r\n     * @notice Swap tokens for BNB storing the resulting BNB in the contract\r\n     */\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        // Generate the Pancakeswap pair for DHT/WBNB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeswapV2Router.WETH(); // WETH = WBNB on BSC\r\n\r\n        _approve(address(this), address(_pancakeswapV2Router), tokenAmount);\r\n\r\n        // Execute the swap\r\n        _pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // Accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Swaps BNB for tokens and immedietely burns them\r\n     */\r\n    function swapBNBForTokens(uint256 amount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = _pancakeswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        _pancakeswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0, // Accept any amount of RAINBOW\r\n            path,\r\n            _burnAddress, // Burn address\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Adds liquidity to the PancakeSwap V2 LP\r\n     */\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // Approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_pancakeswapV2Router), tokenAmount);\r\n\r\n        // Adds the liquidity and gives the LP tokens to the owner of this contract\r\n        // The LP tokens need to be manually locked\r\n        _pancakeswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // Take any amount of tokens (ratio varies)\r\n            0, // Take any amount of BNB (ratio varies)\r\n            owner(),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @notice Allows a user to voluntarily reflect their tokens to everyone else\r\n     */\r\n    function reflect(uint256 tAmount) public {\r\n        require(!_isExcluded[_msgSender()], \"Excluded addresses cannot call this function\");\r\n        (uint256 rAmount,,,,) = _getValues(tAmount);\r\n        _rOwned[_msgSender()] = _rOwned[_msgSender()].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _totalReflections = _totalReflections.add(tAmount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LotteryAward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackBNBPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackBNBThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackUpperLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enableBuyback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enableLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_enableLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryMinimumSpend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lotteryThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeswapV2LiquidityPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousWinTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_previousWonAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whaleSellTaxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whaleSellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whaleSellTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"amountSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackUpperLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeSinceFirstSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setBuybackBNBPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"name\":\"setBuybackBNBThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buybackLimit\",\"type\":\"uint256\"}],\"name\":\"setBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chance\",\"type\":\"uint256\"}],\"name\":\"setLotteryChance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumSpend\",\"type\":\"uint256\"}],\"name\":\"setLotteryMinimumSpend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLotteryThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setSellTaxFeePerecent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSwapThreshold\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setWhaleSellTaxFeePerecent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setWhaleSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setWhaleSellTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RainbowToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b05ab452f811d63dae82d259a755e34c408d8dfb9dc51c39dad25f0ead5228b"}