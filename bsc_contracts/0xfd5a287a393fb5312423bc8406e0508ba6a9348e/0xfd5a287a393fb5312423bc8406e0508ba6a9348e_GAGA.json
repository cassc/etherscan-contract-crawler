{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface ISwapPair {\r\n\tfunction getReserves()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n\tfunction totalSupply() external view returns (uint);\r\n\r\n\tfunction kLast() external view returns (uint);\r\n\r\n\tfunction sync() external;\r\n}\r\n\r\nlibrary Math {\r\n\tfunction min(uint x, uint y) internal pure returns (uint z) {\r\n\t\tz = x < y ? x : y;\r\n\t}\r\n\r\n\tfunction sqrt(uint y) internal pure returns (uint z) {\r\n\t\tif (y > 3) {\r\n\t\t\tz = y;\r\n\t\t\tuint x = y / 2 + 1;\r\n\t\t\twhile (x < z) {\r\n\t\t\t\tz = x;\r\n\t\t\t\tx = (y / x + x) / 2;\r\n\t\t\t}\r\n\t\t} else if (y != 0) {\r\n\t\t\tz = 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction decimals() external view returns (uint8);\r\n\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\tfunction name() external view returns (string memory);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n\tfunction factory() external pure returns (address);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n}\r\n\r\nabstract contract Ownable {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\t_owner = msgSender;\r\n\t\temit OwnershipTransferred(address(0), msgSender);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\temit OwnershipTransferred(_owner, address(0));\r\n\t\t_owner = address(0);\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\temit OwnershipTransferred(_owner, newOwner);\r\n\t\t_owner = newOwner;\r\n\t}\r\n}\r\n\r\ncontract TokenDistributor {\r\n\tconstructor(address token) {\r\n\t\tIERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n\t}\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _allowances;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\tuint8 private _decimals;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 private _tTotal;\r\n\taddress DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\taddress usdtAddress = 0x55d398326f99059fF775485246999027B3197955;\r\n\taddress fundAddress = 0xD032B0e2F3073121dDc5e8B74a660BD0392468Ff;\r\n\r\n\tuint256 public startTradeBlock;\r\n\tmapping(address => bool) public _feeWhiteList;\r\n\tmapping(address => bool) public _swapPairList;\r\n\tmapping(address => bool) public _swapRouters;\r\n\taddress public immutable _mainPair;\r\n\tISwapRouter public immutable _swapRouter;\r\n\r\n\tuint256 public numTokensSellToFund = 10 * 10 ** 18;\r\n\r\n\taddress[] public holders;\r\n\tmapping(address => uint256) public holderIndex;\r\n\tmapping(address => bool) public excludeHolder;\r\n\tuint256 public _rewardGas = 500000;\r\n\r\n\tmapping(uint256 => uint256) public _inviteFee;\r\n\tmapping(address => address) public _invitor;\r\n\tmapping(address => mapping(address => bool)) public _maybeInvitor;\r\n\r\n\tbool private inSwap;\r\n\tmodifier lockTheSwap() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n\tTokenDistributor public token_distributor;\r\n\r\n\tconstructor(\r\n\t\tstring memory Name,\r\n\t\tstring memory Symbol,\r\n\t\tuint8 Decimals,\r\n\t\tuint256 Supply,\r\n\t\taddress RouterAddress,\r\n\t\taddress receiveAddress\r\n\t) {\r\n\t\t_name = Name;\r\n\t\t_symbol = Symbol;\r\n\t\t_decimals = Decimals;\r\n\t\t_tTotal = Supply * 10 ** _decimals;\r\n\r\n\t\t_inviteFee[0] = 5;\r\n\t\t_inviteFee[1] = 3;\r\n\t\t_inviteFee[2] = 2;\r\n\r\n\t\tISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\t\t_swapRouter = swapRouter;\r\n\t\t_allowances[address(this)][address(swapRouter)] = MAX;\r\n\t\t_swapRouters[address(swapRouter)] = true;\r\n\r\n\t\taddress usdtPair;\r\n\t\tusdtPair = ISwapFactory(swapRouter.factory()).createPair(address(this), usdtAddress);\r\n\r\n\t\t_swapPairList[usdtPair] = true;\r\n\t\t_mainPair = usdtPair;\r\n\r\n\t\t_feeWhiteList[receiveAddress] = true;\r\n\t\t_feeWhiteList[address(this)] = true;\r\n\t\t_feeWhiteList[msg.sender] = true;\r\n\t\t_feeWhiteList[address(0)] = true;\r\n\t\t_feeWhiteList[DEAD] = true;\r\n\r\n\t\ttoken_distributor = new TokenDistributor(usdtAddress);\r\n\r\n\t\t_allowances[address(this)][address(_swapRouter)] = MAX;\r\n\t\tIERC20(usdtAddress).approve(address(_swapRouter), MAX);\r\n\r\n\t\t_balances[receiveAddress] = _tTotal;\r\n\t\temit Transfer(address(0), receiveAddress, _tTotal);\r\n\t}\r\n\r\n\tmodifier onlyWhiteList() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire(msgSender == fundAddress || msgSender == owner(), \"nw\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction symbol() external view override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction name() external view override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction decimals() external view override returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() external view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(msg.sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\tif (_allowances[sender][msg.sender] != MAX) {\r\n\t\t\t_allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"approve from the zero address\");\r\n\t\trequire(spender != address(0), \"approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction addHolder(address adr) private {\r\n\t\tif (0 == holderIndex[adr]) {\r\n\t\t\tif (0 == holders.length || holders[0] != adr) {\r\n\t\t\t\tuint256 size;\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tsize := extcodesize(adr)\r\n\t\t\t\t}\r\n\t\t\t\tif (size > 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tholderIndex[adr] = holders.length;\r\n\t\t\t\tholders.push(adr);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tuint256 public currentIndex;\r\n\tuint256 public RewardCondition = 1 ether;\r\n\tuint256 public progressRewardBlock;\r\n\tuint256 public progressRewardBlockDebt = 1;\r\n\r\n\tfunction processReward(uint256 gas) private {\r\n\t\tuint256 blockNum = block.number;\r\n\r\n\t\tif (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (balanceOf(address(this)) < RewardCondition) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tIERC20 lpToken = IERC20(_mainPair);\r\n\t\tuint lpTokenTotal = lpToken.totalSupply();\r\n\r\n\t\taddress shareHolder;\r\n\t\tuint256 amount;\r\n\t\tuint256 lpBalance;\r\n\r\n\t\tuint256 shareholderCount = holders.length;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\r\n\t\twhile (gasUsed < gas && iterations < shareholderCount) {\r\n\t\t\tif (currentIndex >= shareholderCount) {\r\n\t\t\t\tcurrentIndex = 0;\r\n\t\t\t}\r\n\t\t\tshareHolder = holders[currentIndex];\r\n\t\t\tlpBalance = lpToken.balanceOf(shareHolder);\r\n\t\t\tif (!excludeHolder[shareHolder] && lpBalance > 0) {\r\n\t\t\t\tamount = (RewardCondition * lpBalance) / lpTokenTotal;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\t_balances[address(this)] -= amount;\r\n\t\t\t\t\t_takeTransfer(address(this), shareHolder, amount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgasUsed = gasUsed + (gasLeft - gasleft());\r\n\t\t\tgasLeft = gasleft();\r\n\t\t\tcurrentIndex++;\r\n\t\t\titerations++;\r\n\t\t}\r\n\t\tprogressRewardBlock = blockNum;\r\n\t}\r\n\r\n\tfunction _funTransfer(address sender, address recipient, uint256 tAmount, uint256 fee) private {\r\n\t\t_balances[sender] -= tAmount;\r\n\t\tuint256 feeAmount = (tAmount / 100) * fee;\r\n\t\tif (feeAmount > 0) {\r\n\t\t\t_takeTransfer(sender, fundAddress, feeAmount);\r\n\t\t}\r\n\t\t_takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\t}\r\n\r\n\taddress private _lastMaybeAddLPAddress;\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) private {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\t\trequire(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n\t\tuint256 balance = balanceOf(from);\r\n\t\trequire(balance >= amount, \"BNE\");\r\n\r\n\t\taddress lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n\t\tif (address(0) != lastMaybeAddLPAddress) {\r\n\t\t\t_lastMaybeAddLPAddress = address(0);\r\n\t\t\tif (IERC20(_mainPair).balanceOf(lastMaybeAddLPAddress) > 0) {\r\n\t\t\t\taddHolder(lastMaybeAddLPAddress);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tbool takeFee;\r\n\t\tbool isAddLP;\r\n\t\tif (_swapPairList[from] || _swapPairList[to]) {\r\n\t\t\tif (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n\t\t\t\ttakeFee = true;\r\n\r\n\t\t\t\trequire(0 < startTradeBlock);\r\n\t\t\t\tif (block.number < startTradeBlock + 3) {\r\n\t\t\t\t\t_funTransfer(from, to, amount, 99);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tuint256 maxSellAmount = (balance * 9999) / 10000;\r\n\t\t\t\tif (amount > maxSellAmount) {\r\n\t\t\t\t\tamount = maxSellAmount;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (address(0) == _invitor[to] && amount > 0 && from != to) {\r\n\t\t\t\t_maybeInvitor[to][from] = true;\r\n\t\t\t}\r\n\t\t\tif (address(0) == _invitor[from] && amount > 0 && from != to) {\r\n\t\t\t\tif (_maybeInvitor[from][to]) {\r\n\t\t\t\t\t_invitor[from] = to;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tuint256 addLPLiquidity;\r\n        if (to == _mainPair && _swapRouters[msg.sender]) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                isAddLP = true;\r\n            }\r\n        }\r\n\r\n\t\tif (isAddLP) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n\r\n\t\t_tokenTransfer(from, to, amount, takeFee);\r\n\r\n\t\tif (from != address(this)) {\r\n\t\t\tif (_mainPair == to) {\r\n\t\t\t\t_lastMaybeAddLPAddress = from;\r\n\t\t\t}\r\n\t\t\tif (takeFee && !isAddLP) {\r\n\t\t\t\tprocessReward(_rewardGas);\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _takeTransfer(address sender, address to, uint256 tAmount) private {\r\n\t\t_balances[to] = _balances[to] + tAmount;\r\n\t\temit Transfer(sender, to, tAmount);\r\n\t}\r\n\r\n\tfunction feeToInvitor(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) private returns (uint256 inviteFee) {\r\n\t\taddress user = (_swapPairList[sender]) ? recipient : sender;\r\n\t\tfor (uint256 i; i < 3; ++i) {\r\n\t\t\tuint256 invitorAmount = (amount * _inviteFee[i]) / 1000;\r\n\t\t\taddress invitor = (_invitor[user] != address(0)) ? _invitor[user] : fundAddress;\r\n\t\t\tif (invitorAmount > 0) {\r\n\t\t\t\t_takeTransfer(sender, invitor, invitorAmount);\r\n\t\t\t\tinviteFee += invitorAmount;\r\n\t\t\t}\r\n\t\t\tuser = invitor;\r\n\t\t}\r\n\t}\r\n\r\n\tuint256 _returnLPFee = 5;\r\n\tuint256 _LpRewardsFee = 25;\r\n\r\n\tfunction _tokenTransfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 tAmount,\r\n\t\tbool takeFee\r\n\t) private {\r\n\t\t_balances[sender] -= tAmount;\r\n\t\tuint256 returnLPFee;\r\n\t\tuint256 LpRewardsFee;\r\n\t\tuint256 inviteFee;\r\n\r\n\t\tuint256 feeAmount;\r\n\r\n\t\tif (takeFee) {\r\n\t\t\tinviteFee = feeToInvitor(sender, recipient, tAmount);\r\n\t\t\treturnLPFee = (tAmount * _returnLPFee) / 1000;\r\n\t\t\tLpRewardsFee = (tAmount * _LpRewardsFee) / 1000;\r\n\t\t\t_takeTransfer(sender, address(this), returnLPFee + LpRewardsFee);\r\n\t\t\tfeeAmount = returnLPFee + LpRewardsFee + inviteFee;\r\n\r\n\t\t\tuint256 contract_balance = balanceOf(address(this));\r\n\t\t\tbool need_sell = contract_balance >= numTokensSellToFund;\r\n\t\t\tif (need_sell && !inSwap && _swapPairList[recipient]) {\r\n\t\t\t\tSwapTokenToFund(numTokensSellToFund);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t_takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\t}\r\n\r\n\tfunction SwapTokenToFund(uint256 amount) private lockTheSwap {\r\n\t\tuint256 totalFee = _returnLPFee + _LpRewardsFee;\r\n\t\tuint256 lpAmount = (amount * _returnLPFee) / totalFee;\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = usdtAddress;\r\n\t\t_swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tlpAmount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(token_distributor),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t\tuint256 usdt_amount;\r\n\t\tusdt_amount = IERC20(usdtAddress).balanceOf(address(token_distributor));\r\n\t\tIERC20(usdtAddress).transferFrom(address(token_distributor), address(this), usdt_amount);\r\n\r\n\t\t_swapRouter.addLiquidity(\r\n\t\t\taddress(this),\r\n\t\t\tusdtAddress,\r\n\t\t\tlpAmount,\r\n\t\t\tusdt_amount,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tfundAddress,\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator;\r\n                    uint256 denominator;\r\n                    if (address(_swapRouter) == address(0x10ED43C718714eb63d5aA57B78B54704E256024E)) {// BSC Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                        denominator = rootK * 17 + (rootKLast * 8);\r\n                    } else if (address(_swapRouter) == address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)) {//BSC testnet Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 3 + rootKLast;\r\n                    } else if (address(_swapRouter) == address(0xE9d6f80028671279a28790bb4007B10B0595Def1)) {//PG W3Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 3;\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    } else {//SushiSwap,UniSwap,OK Cherry Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    }\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n\tfunction _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n        address tokenOther = usdtAddress;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n        balanceOther = IERC20(tokenOther).balanceOf(_mainPair);\r\n    }\r\n\r\n\tfunction _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        //isAddLP\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n\r\n\tfunction startTrade() external onlyWhiteList {\r\n\t\trequire(0 == startTradeBlock, \"trading\");\r\n\t\tstartTradeBlock = block.number;\r\n\t}\r\n\r\n\tfunction setRewardPrams(\r\n\t\tuint256 newRewardCondition,\r\n\t\tuint256 newProgressRewardBlockDebt\r\n\t) external onlyWhiteList {\r\n\t\tRewardCondition = newRewardCondition;\r\n\t\tprogressRewardBlockDebt = newProgressRewardBlockDebt;\r\n\t}\r\n\r\n\tfunction setNumTokensSellToFund(uint256 newNum) external onlyWhiteList {\r\n\t\tnumTokensSellToFund = newNum;\r\n\t}\r\n\r\n\tfunction withDrawToken(address tokenAddr) external onlyWhiteList {\r\n\t\tuint256 token_num = IERC20(tokenAddr).balanceOf(address(this));\r\n\t\tIERC20(tokenAddr).transfer(msg.sender, token_num);\r\n\t}\r\n\r\n\tfunction withDrawEth() external onlyWhiteList {\r\n\t\tuint256 balance = address(this).balance;\r\n\t\tpayable(msg.sender).transfer(balance);\r\n\t}\r\n\r\n\tfunction setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n\t\t_feeWhiteList[addr] = enable;\r\n\t}\r\n\r\n\tfunction batchSetFeeWhiteList(address[] memory addr, bool enable) external onlyWhiteList {\r\n\t\tfor (uint i = 0; i < addr.length; i++) {\r\n\t\t\t_feeWhiteList[addr[i]] = enable;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setExcludeHolder(address addr, bool enable) external onlyWhiteList {\r\n\t\texcludeHolder[addr] = enable;\r\n\t}\r\n\r\n\tfunction setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n\t\trequire(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n\t\t_rewardGas = rewardGas;\r\n\t}\r\n\r\n\tfunction setFundAddress(address newfund) external onlyWhiteList {\r\n\t\tfundAddress = newfund;\r\n\t\t_feeWhiteList[newfund] = true;\r\n\t}\r\n\r\n\tfunction setTax(\r\n\t\tuint256 feeForReturn,\r\n\t\tuint256 feeForReward,\r\n\t\tuint256 inviteFeeL1,\r\n\t\tuint256 inviteFeeL2,\r\n\t\tuint256 inviteFeeL3\r\n\t) external onlyWhiteList {\r\n\t\t_returnLPFee = feeForReturn;\r\n\t\t_LpRewardsFee = feeForReward;\r\n\t\t_inviteFee[0] = inviteFeeL1;\r\n\t\t_inviteFee[1] = inviteFeeL2;\r\n\t\t_inviteFee[2] = inviteFeeL3;\r\n\t}\r\n\r\n\treceive() external payable {}\r\n}\r\n\r\ncontract GAGA is AbsToken {\r\n\tconstructor()\r\n\t\tAbsToken(\r\n\t\t\t\"PEPE MOON\",\r\n\t\t\t\"GAGA\",\r\n\t\t\t18,\r\n\t\t\t100000000000,\r\n\t\t\t// router\r\n\t\t\t0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n\t\t\t// receive address\r\n\t\t\t0x305df070a8CfFbC32702c36c874baEACd9fe817f\r\n\t\t)\r\n\t{}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_maybeInvitor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newfund\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProgressRewardBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setRewardPrams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeForReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeForReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteFeeL1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteFeeL2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteFeeL3\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_distributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GAGA", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7808f1626e50755cf65d0f295fae422b6294e6f83f88e0be8f74aa2d1cf1410d"}