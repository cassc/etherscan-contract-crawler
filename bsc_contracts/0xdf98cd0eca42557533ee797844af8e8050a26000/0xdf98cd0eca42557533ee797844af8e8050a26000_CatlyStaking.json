{"SourceCode": "// Catly2.io - Catly 2.0 Airdrop 100 $Catly!\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n   \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract CatlyStaking {\r\n    using SafeMath for uint256;\r\n\r\n    struct User {\r\n        uint256 stakedAmount;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewards;\r\n    }\r\n\r\n    mapping(address => User) public users;\r\n    address public owner;\r\n    address public stakingToken;\r\n    uint256 public totalStaked;\r\n    uint256 public stakingRatePerSecond;\r\n    uint256 public reductionFactor = 24000000; \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _stakingToken,\r\n        uint256 _stakingRatePerSecond\r\n    ) {\r\n        owner = msg.sender;\r\n        stakingToken = _stakingToken;\r\n        stakingRatePerSecond = _stakingRatePerSecond;\r\n    }\r\n\r\n function stake(uint256 amount) external {\r\n    require(amount > 0, \"Amount must be greater than 0\");\r\n\r\n    User storage user = users[msg.sender];\r\n\r\n    if (user.stakedAmount > 0) {\r\n        claimRewards(); \r\n    }\r\n\r\n    require(IERC20(stakingToken).transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n\r\n    user.stakedAmount += amount;\r\n    user.lastUpdateTime = block.timestamp;\r\n    totalStaked += amount;\r\n}\r\n\r\n\r\n\r\n    function claimRewards() public {\r\n        User storage user = users[msg.sender];\r\n        require(user.stakedAmount > 0, \"No staked amount\");\r\n\r\n        uint256 pendingRewards = calculatePendingRewards(msg.sender);\r\n        require(pendingRewards > 0, \"No rewards to claim\");\r\n\r\n        user.rewards += pendingRewards;\r\n        user.lastUpdateTime = block.timestamp;\r\n\r\n        require(IERC20(stakingToken).transfer(msg.sender, pendingRewards), \"Token transfer failed\");\r\n\r\n        user.rewards = 0; \r\n    }\r\n\r\n    function calculatePendingRewards(address user) public view returns (uint256) {\r\n        User storage staker = users[user];\r\n        uint256 stakingDuration = block.timestamp - staker.lastUpdateTime;\r\n      \r\n        uint256 baseReward = staker.stakedAmount.mul(stakingRatePerSecond).mul(stakingDuration);\r\n        uint256 reducedReward = baseReward.mul(3).div(reductionFactor); \r\n\r\n        return reducedReward;\r\n    }\r\n\r\n    function updateStakingRatePerSecond(uint256 newRate) external onlyOwner {\r\n        stakingRatePerSecond = newRate;\r\n    }\r\n\r\n    function updateReductionFactor(uint256 newFactor) external onlyOwner {\r\n        reductionFactor = newFactor;\r\n    }\r\n\r\n    function setStakingToken(address newToken) external onlyOwner {\r\n        require(newToken != address(0), \"Invalid token address\");\r\n        stakingToken = newToken;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingRatePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculatePendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reductionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRatePerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFactor\",\"type\":\"uint256\"}],\"name\":\"updateReductionFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"updateStakingRatePerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CatlyStaking", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e7f13e6c9c1c55109be763db00ba0ea2eb2eedfb0000000000000000000000000000000000000000000000000000000000000003", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5645bc7ef06d8dc7c6e7ca52029d40f9849af4cf2e2f656bf1d7b6405edad1d5"}