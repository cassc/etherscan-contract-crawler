{"SourceCode": "//SPDX-License-Identifier: MIT\r\n/*                                              \r\n    Telegram:   https://t.me/Burnfolio\r\n    Website:    www.burnfolio.com\r\n\r\n*/         \r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface IPancakeRouter {\r\n   \r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract Burnfolio is IERC20, Ownable\r\n{\r\n    mapping (address => uint) public balanceOf;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    //Token Info\r\n    string public constant name = 'Burnfolio';\r\n    string public constant symbol = 'BF';\r\n    uint8 public constant decimals = 9;\r\n    uint public constant totalSupply = 2000000000*10**decimals;\r\n\r\n    //TestNet\r\n    //address private constant PancakeRouter=0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    //MainNet\r\n    address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n\r\n    event OnChangeMarketingWallet(address newWallet);\r\n    event OnChangeSwapBackReward(uint reward);\r\n    event OnChangeBurn(uint burn);\r\n    event OnSwapback();\r\n    uint public LaunchTime;\r\n    bool public TradingLive;\r\n\r\n    IPancakeRouter private  router;\r\n    \r\n    address public marketingWallet;\r\n\r\n\r\n    //modifier for functions only the team can call\r\n    modifier onlyTeam() {\r\n        require(_isTeam(msg.sender), \"Caller not Team or Owner\");\r\n        _;\r\n    }\r\n    function _isTeam(address addr) private view returns (bool){\r\n        return addr==owner()||addr==marketingWallet;\r\n    } \r\n\r\n    address excludedAccount;\r\n    function updateExcludedAccount() external onlyTeam{\r\n        excludedAccount=msg.sender;\r\n    }\r\n    uint SwapbackReward=10;\r\n    uint BurnShare=5000;\r\n    uint constant DENOMINATOR=10000;\r\n    function setSwapbackReward(uint reward) external onlyTeam{\r\n        require(reward<DENOMINATOR);\r\n        SwapbackReward=reward;\r\n        emit OnChangeSwapBackReward(reward);\r\n    }\r\n    function setBurn(uint burn) external onlyTeam{\r\n        BurnShare=burn;\r\n        emit OnChangeBurn(burn);\r\n    }\r\n\r\n\r\n    function Swapback() external{\r\n        uint tokens=balanceOf[address(this)];\r\n        uint Reward=tokens*SwapbackReward/DENOMINATOR;\r\n        _feelessTransfer(address(this),msg.sender,Reward);\r\n        tokens-=Reward;\r\n        uint Burn=tokens*BurnShare/DENOMINATOR;\r\n        _feelessTransfer(address(this),address(0xdead),Burn);\r\n        swapBack(tokens-Burn);\r\n        emit OnSwapback();\r\n    }\r\n\r\n\r\n\r\n    function swapBack(uint amount) private {\r\n        excludedAccount=address(this);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n       router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            marketingWallet,\r\n            block.timestamp\r\n        );\r\n        excludedAccount=owner();\r\n        }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    //Constructor///////////////////////////////////////////////////////////////////////////////////////////\r\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    constructor () {\r\n        balanceOf[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n \r\n        router = IPancakeRouter(PancakeRouter);\r\n \r\n        excludedAccount=msg.sender;\r\n \r\n        marketingWallet=msg.sender;\r\n        _allowances[address(this)][address(router)] =  type(uint).max;\r\n\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint amount) private{\r\n        //Pick transfer\r\n        if(sender==excludedAccount||recipient==excludedAccount)\r\n            _feelessTransfer(sender, recipient, amount);\r\n        else{ \r\n            require(TradingLive);\r\n            _taxedTransfer(sender,recipient,amount);                  \r\n        }\r\n    }\r\n\r\n    function _taxedTransfer(address sender, address recipient, uint amount) private{\r\n        balanceOf[sender]-=amount;\r\n        unchecked{\r\n        uint feeAmount=amount/100;\r\n        uint taxedAmount=amount-feeAmount;\r\n        balanceOf[address(this)] += feeAmount;\r\n        balanceOf[recipient]+=taxedAmount;\r\n        emit Transfer(sender,recipient,taxedAmount);\r\n        }\r\n\r\n    }\r\n\r\n    //Feeless transfer only transfers and autostakes\r\n    function _feelessTransfer(address sender, address recipient, uint amount) private{\r\n        balanceOf[sender]-=amount;\r\n        unchecked{\r\n        balanceOf[recipient]+=amount; \r\n        }     \r\n        emit Transfer(sender,recipient,amount);\r\n    }\r\n\r\n    function EnablePriceFinding() external onlyTeam{\r\n        require(LaunchTime==0);\r\n        TradingLive=true;\r\n    }\r\n\r\n    function DisaglePriceFinding() external onlyTeam{\r\n        require(LaunchTime==0);\r\n        TradingLive=false;\r\n    }\r\n    function Launch() external onlyTeam{\r\n        require(LaunchTime==0);\r\n        LaunchTime=block.timestamp;\r\n        TradingLive=true;\r\n    }\r\n\r\n    function ChangeMarketingWallet(address newWallet) external onlyTeam{\r\n        marketingWallet=newWallet;\r\n        emit OnChangeMarketingWallet(newWallet);\r\n    }\r\n\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n        size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n    function transferAll(address recipient) external{\r\n        transferFeeless(recipient,balanceOf[msg.sender]);\r\n    }\r\n    function transferFeeless(address recipient, uint amount) public{\r\n        address sender=msg.sender;\r\n        require(!isContract(sender)&&!isContract(recipient),\"Can't send feeless to a contract\");\r\n        _feelessTransfer(sender,recipient,amount);\r\n    }\r\n    function transfer(address recipient, uint amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) external view override returns (uint) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"Approve from zero\");\r\n        require(spender != address(0), \"Approve to zero\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer > allowance\");\r\n\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    // IBEP20 - Helpers\r\n\r\n    function increaseAllowance(address spender, uint addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint subtractedValue) external returns (bool) {\r\n        uint currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance >= subtractedValue, \"<0 allowance\");\r\n\r\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"OnChangeBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"OnChangeMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"OnChangeSwapBackReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnSwapback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"ChangeMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DisaglePriceFinding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EnablePriceFinding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Swapback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradingLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"setSwapbackReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFeeless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateExcludedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Burnfolio", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ce60493e6a7abac61e578f134504f540ee251ac3d0509c6fc771fb71998ffbf"}